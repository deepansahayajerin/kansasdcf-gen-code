#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:51:21 PM
   **        *   FROM COBOL PGM   :  SWEXIR15
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                   INFORMATION ENGINEERING FACILITY (TM)
                       TEXAS INSTRUMENTS INC.
                COPYRIGHT (C) TEXAS INSTRUMENTS INC. 1997
       NAME: EAB_READ_ALIAS_BATCH             DATE: 97/03/26
       TARGET OS:   MVS                       TIME: 17:26:10
       TARGET DBMS: DB2                       USER: SWMTSXC
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
   **************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXIR15_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXIR15_ws_WorkingStorage";
            internal const string OUTPUT_GROUP_ALIASES_0001FL = "OUTPUT_GROUP_ALIASES_0001FL";
            internal const string OUTPUT_GROUP_ALIASES_0001PS = "OUTPUT_GROUP_ALIASES_0001PS";
            internal const string OUTPUT_GROUP_ALIASES_0001RF = "OUTPUT_GROUP_ALIASES_0001RF";
            internal const string FUNC_0704133111_ESC_FLAG = "FUNC_0704133111_ESC_FLAG";
            internal const string INP_CLT_NBR = "INP_CLT_NBR";
            internal const string WRK_CLT_NBR = "WRK_CLT_NBR";
            internal const string INP_CLT_NBRX = "INP_CLT_NBRX";
            internal const string WRK_CLT_EOF_IND = "WRK_CLT_EOF_IND";
            internal const string WRK_CLT_EOF = "WRK_CLT_EOF";
            internal const string WRK_SYSPT_EOF_IND = "WRK_SYSPT_EOF_IND";
            internal const string WRK_SYSPT_EOF = "WRK_SYSPT_EOF";
            internal const string WRK_SSN = "WRK_SSN";
            internal const string WRK_SSNI = "WRK_SSNI";
            internal const string WRK_CLT_NM = "WRK_CLT_NM";
            internal const string WRK_LST_NM = "WRK_LST_NM";
            internal const string WRK_FST_NM = "WRK_FST_NM";
            internal const string WRK_MID_NM = "WRK_MID_NM";
            internal const string WRK_CLT_NMX = "WRK_CLT_NMX";
            internal const string WRK_DOB_SEX = "WRK_DOB_SEX";
            internal const string WRK_DOB = "WRK_DOB";
            internal const string WRK_SEX = "WRK_SEX";
            internal const string WRK_SYS_IND = "WRK_SYS_IND";
            internal const string WRK_SYS_KAE = "WRK_SYS_KAE";
            internal const string WRK_SYS_CSE = "WRK_SYS_CSE";
            internal const string WRK_SYS_KPY = "WRK_SYS_KPY";
            internal const string WRK_SYS_KSC = "WRK_SYS_KSC";
            internal const string WS_DB2_DOB = "WS_DB2_DOB";
            internal const string WS_DB2_YR = "WS_DB2_YR";
            internal const string WS_DB2_MO = "WS_DB2_MO";
            internal const string WS_DB2_DA = "WS_DB2_DA";
            internal const string WS_CLT_DOB = "WS_CLT_DOB";
            internal const string WS_CLT_YR = "WS_CLT_YR";
            internal const string WS_CLT_MO = "WS_CLT_MO";
            internal const string WS_CLT_DA = "WS_CLT_DA";
            internal const string WS_FORMAT_DOB = "WS_FORMAT_DOB";
            internal const string WS_FORMAT_YR = "WS_FORMAT_YR";
            internal const string WS_FORMAT_MO = "WS_FORMAT_MO";
            internal const string WS_FORMAT_DA = "WS_FORMAT_DA";
            internal const string X = "X";
            internal const string Y = "Y";
            internal const string WRK_MAX_IDX = "WRK_MAX_IDX";
            internal const string WRK_PGM_ERR = "WRK_PGM_ERR";
            internal const string WRK_ERR_TYP = "WRK_ERR_TYP";
            internal const string WRK_ADA_ERR = "WRK_ADA_ERR";
            internal const string WRK_ADA_CD = "WRK_ADA_CD";
            internal const string WRK_ADA_ACT = "WRK_ADA_ACT";
            internal const string WRK_FND_ERR = "WRK_FND_ERR";
            internal const string WRK_RIN_ERR = "WRK_RIN_ERR";
            internal const string WRK_RLF_ERR = "WRK_RLF_ERR";
            internal const string WRK_RLN_ERR = "WRK_RLN_ERR";
            internal const string WRK_ADA_NBR = "WRK_ADA_NBR";
            internal const string WRK_CLT_ERR = "WRK_CLT_ERR";
            internal const string WRK_CLT_ERR_YES = "WRK_CLT_ERR_YES";
            internal const string WRK_PTR_ERR = "WRK_PTR_ERR";
            internal const string WRK_PTR_ERR_YES = "WRK_PTR_ERR_YES";
            internal const string TBL_CLT = "TBL_CLT";
            internal const string TBL_CLT_NM = "TBL_CLT_NM";
            internal const string TBL_LST_NM = "TBL_LST_NM";
            internal const string TBL_FST_NM = "TBL_FST_NM";
            internal const string TBL_MID_NM = "TBL_MID_NM";
            internal const string TBL_DOB_SEX = "TBL_DOB_SEX";
            internal const string TBL_DOB = "TBL_DOB";
            internal const string TBL_SEX = "TBL_SEX";
            internal const string TBL_SSN = "TBL_SSN";
            internal const string TBL_SSN_NBR = "TBL_SSN_NBR";
            internal const string TBL_SYS_IND = "TBL_SYS_IND";
            internal const string TBL_KAE_IND = "TBL_KAE_IND";
            internal const string TBL_CSE_IND = "TBL_CSE_IND";
            internal const string TBL_KPY_IND = "TBL_KPY_IND";
            internal const string TBL_KSC_IND = "TBL_KSC_IND";
            internal const string DCLKSD_CLIENT_BASIC = "DCLKSD_CLIENT_BASIC";
            internal const string CLIENTB_CLIENT_NUMBER = "CLIENTB_CLIENT_NUMBER";
            internal const string CLIENTB_CLIENT_GIVEN_NAME = "CLIENTB_CLIENT_GIVEN_NAME";
            internal const string CLIENTB_CLIENT_INITIALS = "CLIENTB_CLIENT_INITIALS";
            internal const string CLIENTB_CLIENT_SURNAME = "CLIENTB_CLIENT_SURNAME";
            internal const string CLIENTB_SSN = "CLIENTB_SSN";
            internal const string CLIENTB_GENDER = "CLIENTB_GENDER";
            internal const string CLIENTB_DATE_OF_BIRTH = "CLIENTB_DATE_OF_BIRTH";
            internal const string DCLKSD_CLIENT = "DCLKSD_CLIENT";
            internal const string CLIENT_SSN = "CLIENT_SSN";
            internal const string CLIENT_DATE_OF_BIRTH = "CLIENT_DATE_OF_BIRTH";
            internal const string CLIENT_GENDER = "CLIENT_GENDER";
            internal const string CLIENT_CLIENT_NAME = "CLIENT_CLIENT_NAME";
            internal const string CLIENT_FK_CLB_CLIENT_NO = "CLIENT_FK_CLB_CLIENT_NO";
            internal const string DCLKSD_SYSTEM_PART = "DCLKSD_SYSTEM_PART";
            internal const string SPART_SYSTEM_CODE = "SPART_SYSTEM_CODE";
            internal const string SPART_PARTICIPATION_FLAG = "SPART_PARTICIPATION_FLAG";
        }
        #endregion

        #region Direct-access element properties
        public IField OUTPUT_GROUP_ALIASES_0001FL { get { return GetElementByName<IField>(Names.OUTPUT_GROUP_ALIASES_0001FL); } }
        public IField OUTPUT_GROUP_ALIASES_0001PS { get { return GetElementByName<IField>(Names.OUTPUT_GROUP_ALIASES_0001PS); } }
        public IField OUTPUT_GROUP_ALIASES_0001RF { get { return GetElementByName<IField>(Names.OUTPUT_GROUP_ALIASES_0001RF); } }
        public IField FUNC_0704133111_ESC_FLAG { get { return GetElementByName<IField>(Names.FUNC_0704133111_ESC_FLAG); } }
        public IGroup INP_CLT_NBR { get { return GetElementByName<IGroup>(Names.INP_CLT_NBR); } }
        public IField WRK_CLT_NBR { get { return GetElementByName<IField>(Names.WRK_CLT_NBR); } }
        public IField INP_CLT_NBRX { get { return GetElementByName<IField>(Names.INP_CLT_NBRX); } }
        public IField WRK_CLT_EOF_IND { get { return GetElementByName<IField>(Names.WRK_CLT_EOF_IND); } }
        public ICheckField WRK_CLT_EOF { get { return GetElementByName<ICheckField>(Names.WRK_CLT_EOF); } }
        public IField WRK_SYSPT_EOF_IND { get { return GetElementByName<IField>(Names.WRK_SYSPT_EOF_IND); } }
        public ICheckField WRK_SYSPT_EOF { get { return GetElementByName<ICheckField>(Names.WRK_SYSPT_EOF); } }
        public IField WRK_SSN { get { return GetElementByName<IField>(Names.WRK_SSN); } }
        public IField WRK_SSNI { get { return GetElementByName<IField>(Names.WRK_SSNI); } }
        public IGroup WRK_CLT_NM { get { return GetElementByName<IGroup>(Names.WRK_CLT_NM); } }
        public IField WRK_LST_NM { get { return GetElementByName<IField>(Names.WRK_LST_NM); } }
        public IField WRK_FST_NM { get { return GetElementByName<IField>(Names.WRK_FST_NM); } }
        public IField WRK_MID_NM { get { return GetElementByName<IField>(Names.WRK_MID_NM); } }
        public IField WRK_CLT_NMX { get { return GetElementByName<IField>(Names.WRK_CLT_NMX); } }
        public IGroup WRK_DOB_SEX { get { return GetElementByName<IGroup>(Names.WRK_DOB_SEX); } }
        public IField WRK_DOB { get { return GetElementByName<IField>(Names.WRK_DOB); } }
        public IField WRK_SEX { get { return GetElementByName<IField>(Names.WRK_SEX); } }
        public IGroup WRK_SYS_IND { get { return GetElementByName<IGroup>(Names.WRK_SYS_IND); } }
        public IField WRK_SYS_KAE { get { return GetElementByName<IField>(Names.WRK_SYS_KAE); } }
        public IField WRK_SYS_CSE { get { return GetElementByName<IField>(Names.WRK_SYS_CSE); } }
        public IField WRK_SYS_KPY { get { return GetElementByName<IField>(Names.WRK_SYS_KPY); } }
        public IField WRK_SYS_KSC { get { return GetElementByName<IField>(Names.WRK_SYS_KSC); } }
        public IGroup WS_DB2_DOB { get { return GetElementByName<IGroup>(Names.WS_DB2_DOB); } }
        public IField WS_DB2_YR { get { return GetElementByName<IField>(Names.WS_DB2_YR); } }
        public IField WS_DB2_MO { get { return GetElementByName<IField>(Names.WS_DB2_MO); } }
        public IField WS_DB2_DA { get { return GetElementByName<IField>(Names.WS_DB2_DA); } }
        public IGroup WS_CLT_DOB { get { return GetElementByName<IGroup>(Names.WS_CLT_DOB); } }
        public IField WS_CLT_YR { get { return GetElementByName<IField>(Names.WS_CLT_YR); } }
        public IField WS_CLT_MO { get { return GetElementByName<IField>(Names.WS_CLT_MO); } }
        public IField WS_CLT_DA { get { return GetElementByName<IField>(Names.WS_CLT_DA); } }
        public IGroup WS_FORMAT_DOB { get { return GetElementByName<IGroup>(Names.WS_FORMAT_DOB); } }
        public IField WS_FORMAT_YR { get { return GetElementByName<IField>(Names.WS_FORMAT_YR); } }
        public IField WS_FORMAT_MO { get { return GetElementByName<IField>(Names.WS_FORMAT_MO); } }
        public IField WS_FORMAT_DA { get { return GetElementByName<IField>(Names.WS_FORMAT_DA); } }
        public IField X { get { return GetElementByName<IField>(Names.X); } }
        public IField Y { get { return GetElementByName<IField>(Names.Y); } }
        public IField WRK_MAX_IDX { get { return GetElementByName<IField>(Names.WRK_MAX_IDX); } }
        public IGroup WRK_PGM_ERR { get { return GetElementByName<IGroup>(Names.WRK_PGM_ERR); } }
        public IField WRK_ERR_TYP { get { return GetElementByName<IField>(Names.WRK_ERR_TYP); } }
        public ICheckField WRK_ADA_ERR { get { return GetElementByName<ICheckField>(Names.WRK_ADA_ERR); } }
        public IField WRK_ADA_CD { get { return GetElementByName<IField>(Names.WRK_ADA_CD); } }
        public IField WRK_ADA_ACT { get { return GetElementByName<IField>(Names.WRK_ADA_ACT); } }
        public ICheckField WRK_FND_ERR { get { return GetElementByName<ICheckField>(Names.WRK_FND_ERR); } }
        public ICheckField WRK_RIN_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RIN_ERR); } }
        public ICheckField WRK_RLF_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RLF_ERR); } }
        public ICheckField WRK_RLN_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RLN_ERR); } }
        public IField WRK_ADA_NBR { get { return GetElementByName<IField>(Names.WRK_ADA_NBR); } }
        public IField WRK_CLT_ERR { get { return GetElementByName<IField>(Names.WRK_CLT_ERR); } }
        public ICheckField WRK_CLT_ERR_YES { get { return GetElementByName<ICheckField>(Names.WRK_CLT_ERR_YES); } }
        public IField WRK_PTR_ERR { get { return GetElementByName<IField>(Names.WRK_PTR_ERR); } }
        public ICheckField WRK_PTR_ERR_YES { get { return GetElementByName<ICheckField>(Names.WRK_PTR_ERR_YES); } }
        public IGroup TBL_CLT { get { return GetElementByName<IGroup>(Names.TBL_CLT); } }
        public IArrayElementAccessor<IGroup> TBL_CLT_NM { get { return GetArrayElementAccessor<IGroup>(Names.TBL_CLT_NM); } }
        public IArrayElementAccessor<IField> TBL_LST_NM { get { return GetArrayElementAccessor<IField>(Names.TBL_LST_NM); } }
        public IArrayElementAccessor<IField> TBL_FST_NM { get { return GetArrayElementAccessor<IField>(Names.TBL_FST_NM); } }
        public IArrayElementAccessor<IField> TBL_MID_NM { get { return GetArrayElementAccessor<IField>(Names.TBL_MID_NM); } }
        public IArrayElementAccessor<IGroup> TBL_DOB_SEX { get { return GetArrayElementAccessor<IGroup>(Names.TBL_DOB_SEX); } }
        public IArrayElementAccessor<IField> TBL_DOB { get { return GetArrayElementAccessor<IField>(Names.TBL_DOB); } }
        public IArrayElementAccessor<IField> TBL_SEX { get { return GetArrayElementAccessor<IField>(Names.TBL_SEX); } }
        public IArrayElementAccessor<IGroup> TBL_SSN { get { return GetArrayElementAccessor<IGroup>(Names.TBL_SSN); } }
        public IArrayElementAccessor<IField> TBL_SSN_NBR { get { return GetArrayElementAccessor<IField>(Names.TBL_SSN_NBR); } }
        public IArrayElementAccessor<IGroup> TBL_SYS_IND { get { return GetArrayElementAccessor<IGroup>(Names.TBL_SYS_IND); } }
        public IArrayElementAccessor<IField> TBL_KAE_IND { get { return GetArrayElementAccessor<IField>(Names.TBL_KAE_IND); } }
        public IArrayElementAccessor<IField> TBL_CSE_IND { get { return GetArrayElementAccessor<IField>(Names.TBL_CSE_IND); } }
        public IArrayElementAccessor<IField> TBL_KPY_IND { get { return GetArrayElementAccessor<IField>(Names.TBL_KPY_IND); } }
        public IArrayElementAccessor<IField> TBL_KSC_IND { get { return GetArrayElementAccessor<IField>(Names.TBL_KSC_IND); } }
        public IGroup DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT_BASIC); } }
        public IField CLIENTB_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_NUMBER); } }
        public IField CLIENTB_CLIENT_GIVEN_NAME { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_GIVEN_NAME); } }
        public IField CLIENTB_CLIENT_INITIALS { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_INITIALS); } }
        public IField CLIENTB_CLIENT_SURNAME { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_SURNAME); } }
        public IField CLIENTB_SSN { get { return GetElementByName<IField>(Names.CLIENTB_SSN); } }
        public IField CLIENTB_GENDER { get { return GetElementByName<IField>(Names.CLIENTB_GENDER); } }
        public IField CLIENTB_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENTB_DATE_OF_BIRTH); } }
        public IGroup DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT); } }
        public IField CLIENT_SSN { get { return GetElementByName<IField>(Names.CLIENT_SSN); } }
        public IField CLIENT_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENT_DATE_OF_BIRTH); } }
        public IField CLIENT_GENDER { get { return GetElementByName<IField>(Names.CLIENT_GENDER); } }
        public IField CLIENT_CLIENT_NAME { get { return GetElementByName<IField>(Names.CLIENT_CLIENT_NAME); } }
        public IField CLIENT_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CLIENT_FK_CLB_CLIENT_NO); } }
        public IGroup DCLKSD_SYSTEM_PART { get { return GetElementByName<IGroup>(Names.DCLKSD_SYSTEM_PART); } }
        public IField SPART_SYSTEM_CODE { get { return GetElementByName<IField>(Names.SPART_SYSTEM_CODE); } }
        public IField SPART_PARTICIPATION_FLAG { get { return GetElementByName<IField>(Names.SPART_PARTICIPATION_FLAG); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup("FILLER", (FILLER) =>
           {
               FILLER.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001FL, FieldType.String, 1);
               FILLER.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001PS, FieldType.CompShort, 4);
               FILLER.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001RF, FieldType.String, 1);
           });
            recordDef.CreateNewField(Names.FUNC_0704133111_ESC_FLAG, FieldType.String, 1);

            IGroup INP_CLT_NBR_local = (IGroup)recordDef.CreateNewGroup(Names.INP_CLT_NBR, (INP_CLT_NBR) =>
           {
               INP_CLT_NBR.CreateNewFillerField(1, FillWith.Hashes);
               INP_CLT_NBR.CreateNewField(Names.WRK_CLT_NBR, FieldType.UnsignedNumeric, 9);
           });
            recordDef.CreateNewFieldRedefine(Names.INP_CLT_NBRX, FieldType.String, INP_CLT_NBR_local, 10);
            recordDef.CreateNewField(Names.WRK_CLT_EOF_IND, FieldType.String, 1)
                .NewCheckField(Names.WRK_CLT_EOF, "Y")
                ;
            recordDef.CreateNewField(Names.WRK_SYSPT_EOF_IND, FieldType.String, 1)
                .NewCheckField(Names.WRK_SYSPT_EOF, "Y")
                ;

            IField WRK_SSN_local = recordDef.CreateNewField(Names.WRK_SSN, FieldType.UnsignedNumeric, 9);
            recordDef.CreateNewFieldRedefine(Names.WRK_SSNI, FieldType.CompInt, WRK_SSN_local, 9);

            IGroup WRK_CLT_NM_local = (IGroup)recordDef.CreateNewGroup(Names.WRK_CLT_NM, (WRK_CLT_NM) =>
           {
               WRK_CLT_NM.CreateNewField(Names.WRK_LST_NM, FieldType.String, 17);
               WRK_CLT_NM.CreateNewField(Names.WRK_FST_NM, FieldType.String, 12);
               WRK_CLT_NM.CreateNewField(Names.WRK_MID_NM, FieldType.String, 1);
           });
            recordDef.CreateNewFieldRedefine(Names.WRK_CLT_NMX, FieldType.String, WRK_CLT_NM_local, 30);

            recordDef.CreateNewGroup(Names.WRK_DOB_SEX, (WRK_DOB_SEX) =>
           {
               WRK_DOB_SEX.CreateNewField(Names.WRK_DOB, FieldType.String, 8);
               WRK_DOB_SEX.CreateNewField(Names.WRK_SEX, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.WRK_SYS_IND, (WRK_SYS_IND) =>
           {
               WRK_SYS_IND.CreateNewField(Names.WRK_SYS_KAE, FieldType.String, 1);
               WRK_SYS_IND.CreateNewField(Names.WRK_SYS_CSE, FieldType.String, 1);
               WRK_SYS_IND.CreateNewField(Names.WRK_SYS_KPY, FieldType.String, 1);
               WRK_SYS_IND.CreateNewField(Names.WRK_SYS_KSC, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.WS_DB2_DOB, (WS_DB2_DOB) =>
           {
               WS_DB2_DOB.CreateNewField(Names.WS_DB2_YR, FieldType.String, 4);
               WS_DB2_DOB.CreateNewFillerField(1, FillWith.Hashes);
               WS_DB2_DOB.CreateNewField(Names.WS_DB2_MO, FieldType.String, 2);
               WS_DB2_DOB.CreateNewFillerField(1, FillWith.Hashes);
               WS_DB2_DOB.CreateNewField(Names.WS_DB2_DA, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.WS_CLT_DOB, (WS_CLT_DOB) =>
           {
               WS_CLT_DOB.CreateNewField(Names.WS_CLT_YR, FieldType.String, 4);
               WS_CLT_DOB.CreateNewFillerField(1, FillWith.Hashes);
               WS_CLT_DOB.CreateNewField(Names.WS_CLT_MO, FieldType.String, 2);
               WS_CLT_DOB.CreateNewFillerField(1, FillWith.Hashes);
               WS_CLT_DOB.CreateNewField(Names.WS_CLT_DA, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.WS_FORMAT_DOB, (WS_FORMAT_DOB) =>
           {
               WS_FORMAT_DOB.CreateNewField(Names.WS_FORMAT_YR, FieldType.String, 4);
               WS_FORMAT_DOB.CreateNewField(Names.WS_FORMAT_MO, FieldType.String, 2);
               WS_FORMAT_DOB.CreateNewField(Names.WS_FORMAT_DA, FieldType.String, 2);
           });
            recordDef.CreateNewField(Names.X, FieldType.UnsignedNumeric, 1);
            recordDef.CreateNewField(Names.Y, FieldType.UnsignedNumeric, 1);
            recordDef.CreateNewField(Names.WRK_MAX_IDX, FieldType.UnsignedNumeric, 1, 6);

            recordDef.CreateNewGroup(Names.WRK_PGM_ERR, (WRK_PGM_ERR) =>
           {
               WRK_PGM_ERR.CreateNewField(Names.WRK_ERR_TYP, FieldType.String, 1)
                   .NewCheckField(Names.WRK_ADA_ERR, "A")
                   ;
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_CD, FieldType.UnsignedNumeric, 4);
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_ACT, FieldType.String, 3)
                   .NewCheckField(Names.WRK_FND_ERR, "NE ")
                   .NewCheckField(Names.WRK_RIN_ERR, "RI ")
                   .NewCheckField(Names.WRK_RLF_ERR, "RLF")
                   .NewCheckField(Names.WRK_RLN_ERR, "RL ")
                   ;
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_NBR, FieldType.UnsignedNumeric, 4);
               WRK_PGM_ERR.CreateNewField(Names.WRK_CLT_ERR, FieldType.String, 1)
                   .NewCheckField(Names.WRK_CLT_ERR_YES, "Y")
                   ;
               WRK_PGM_ERR.CreateNewField(Names.WRK_PTR_ERR, FieldType.String, 1)
                   .NewCheckField(Names.WRK_PTR_ERR_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.TBL_CLT, (TBL_CLT) =>
           {
               TBL_CLT.CreateNewGroupArray("FILLER_d7", 6, (FILLER_d7) =>
               {
                   FILLER_d7.CreateNewGroup(Names.TBL_CLT_NM, (TBL_CLT_NM) =>
                   {
                       TBL_CLT_NM.CreateNewField(Names.TBL_LST_NM, FieldType.String, 17);
                       TBL_CLT_NM.CreateNewField(Names.TBL_FST_NM, FieldType.String, 12);
                       TBL_CLT_NM.CreateNewField(Names.TBL_MID_NM, FieldType.String, 1);
                   });
                   FILLER_d7.CreateNewGroup(Names.TBL_DOB_SEX, (TBL_DOB_SEX) =>
                   {
                       TBL_DOB_SEX.CreateNewField(Names.TBL_DOB, FieldType.String, 8);
                       TBL_DOB_SEX.CreateNewField(Names.TBL_SEX, FieldType.String, 1);
                   });
                   FILLER_d7.CreateNewGroup(Names.TBL_SSN, (TBL_SSN) =>
                   {
                       TBL_SSN.CreateNewField(Names.TBL_SSN_NBR, FieldType.UnsignedNumeric, 9);
                   });
                   FILLER_d7.CreateNewGroup(Names.TBL_SYS_IND, (TBL_SYS_IND) =>
                   {
                       TBL_SYS_IND.CreateNewField(Names.TBL_KAE_IND, FieldType.String, 1);
                       TBL_SYS_IND.CreateNewField(Names.TBL_CSE_IND, FieldType.String, 1);
                       TBL_SYS_IND.CreateNewField(Names.TBL_KPY_IND, FieldType.String, 1);
                       TBL_SYS_IND.CreateNewField(Names.TBL_KSC_IND, FieldType.String, 1);
                   });
               });
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT_BASIC, (DCLKSD_CLIENT_BASIC) =>
           {
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_NUMBER, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_INITIALS, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_SURNAME, FieldType.String, 17);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_DATE_OF_BIRTH, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT, (DCLKSD_CLIENT) =>
           {
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_DATE_OF_BIRTH, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_CLIENT_NAME, FieldType.String, 30);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_SYSTEM_PART, (DCLKSD_SYSTEM_PART) =>
           {
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SPART_SYSTEM_CODE, FieldType.String, 2);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SPART_PARTICIPATION_FLAG, FieldType.String, 1);
           });


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXIR15_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXIR15_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_0704133114_IA = "A_0704133114_IA";
            internal const string INPUT_0001EV = "INPUT_0001EV";
            internal const string CSE_PERSONS_WORK_SET_0001ET = "CSE_PERSONS_WORK_SET_0001ET";
            internal const string NUMBER_0001AS = "NUMBER_0001AS";
            internal const string NUMBER_0001 = "NUMBER_0001";
            internal const string NUMBER_0001XX = "NUMBER_0001XX";
            internal const string UNIQUE_KEY_0001AS = "UNIQUE_KEY_0001AS";
            internal const string UNIQUE_KEY_0001 = "UNIQUE_KEY_0001";
            internal const string UNIQUE_KEY_0001XX = "UNIQUE_KEY_0001XX";
            internal const string W_OA = "W_OA";
            internal const string A_0704133119_OA = "A_0704133119_OA";
            internal const string OUTPUT_0002EV = "OUTPUT_0002EV";
            internal const string ABEND_DATA_0002ET = "ABEND_DATA_0002ET";
            internal const string TYPE_0002AS = "TYPE_0002AS";
            internal const string TYPE_0002 = "TYPE_0002";
            internal const string TYPE_0002XX = "TYPE_0002XX";
            internal const string ADABAS_FILE_NUMBER_0002AS = "ADABAS_FILE_NUMBER_0002AS";
            internal const string ADABAS_FILE_NUMBER_0002 = "ADABAS_FILE_NUMBER_0002";
            internal const string ADABAS_FILE_NUMBER_0002XX = "ADABAS_FILE_NUMBER_0002XX";
            internal const string ADABAS_FILE_ACTION_0002AS = "ADABAS_FILE_ACTION_0002AS";
            internal const string ADABAS_FILE_ACTION_0002 = "ADABAS_FILE_ACTION_0002";
            internal const string ADABAS_FILE_ACTION_0002XX = "ADABAS_FILE_ACTION_0002XX";
            internal const string ADABAS_RESPONSE_CD_0002AS = "ADABAS_RESPONSE_CD_0002AS";
            internal const string ADABAS_RESPONSE_CD_0002 = "ADABAS_RESPONSE_CD_0002";
            internal const string ADABAS_RESPONSE_CD_0002XX = "ADABAS_RESPONSE_CD_0002XX";
            internal const string CICS_RESOURCE_NM_0002AS = "CICS_RESOURCE_NM_0002AS";
            internal const string CICS_RESOURCE_NM_0002 = "CICS_RESOURCE_NM_0002";
            internal const string CICS_RESOURCE_NM_0002XX = "CICS_RESOURCE_NM_0002XX";
            internal const string CICS_FUNCTION_CD_0002AS = "CICS_FUNCTION_CD_0002AS";
            internal const string CICS_FUNCTION_CD_0002 = "CICS_FUNCTION_CD_0002";
            internal const string CICS_FUNCTION_CD_0002XX = "CICS_FUNCTION_CD_0002XX";
            internal const string CICS_RESPONSE_CD_0002AS = "CICS_RESPONSE_CD_0002AS";
            internal const string CICS_RESPONSE_CD_0002 = "CICS_RESPONSE_CD_0002";
            internal const string CICS_RESPONSE_CD_0002XX = "CICS_RESPONSE_CD_0002XX";
            internal const string OUTPUT_NEXT_KEY_0003EV = "OUTPUT_NEXT_KEY_0003EV";
            internal const string CSE_PERSONS_WORK_SET_0003ET = "CSE_PERSONS_WORK_SET_0003ET";
            internal const string UNIQUE_KEY_0003AS = "UNIQUE_KEY_0003AS";
            internal const string UNIQUE_KEY_0003 = "UNIQUE_KEY_0003";
            internal const string UNIQUE_KEY_0003XX = "UNIQUE_KEY_0003XX";
            internal const string OUTPUT_GROUP_ALIASES_0001RG = "OUTPUT_GROUP_ALIASES_0001RG";
            internal const string OUTPUT_GROUP_ALIASES_0001MA = "OUTPUT_GROUP_ALIASES_0001MA";
            internal const string OUTPUT_GROUP_ALIASES_0001MX = "OUTPUT_GROUP_ALIASES_0001MX";
            internal const string OUTPUT_GROUP_ALIASES_0001 = "OUTPUT_GROUP_ALIASES_0001";
            internal const string OUTPUT_GROUP_ALIASES_0001AC = "OUTPUT_GROUP_ALIASES_0001AC";
            internal const string OUTPUT_G_0004EV = "OUTPUT_G_0004EV";
            internal const string CSE_PERSONS_WORK_SET_0004ET = "CSE_PERSONS_WORK_SET_0004ET";
            internal const string UNIQUE_KEY_0004AS = "UNIQUE_KEY_0004AS";
            internal const string UNIQUE_KEY_0004 = "UNIQUE_KEY_0004";
            internal const string UNIQUE_KEY_0004XX = "UNIQUE_KEY_0004XX";
            internal const string SSN_0004AS = "SSN_0004AS";
            internal const string SSN_0004 = "SSN_0004";
            internal const string SSN_0004XX = "SSN_0004XX";
            internal const string FIRST_NAME_0004AS = "FIRST_NAME_0004AS";
            internal const string FIRST_NAME_0004 = "FIRST_NAME_0004";
            internal const string FIRST_NAME_0004XX = "FIRST_NAME_0004XX";
            internal const string MIDDLE_INITIAL_0004AS = "MIDDLE_INITIAL_0004AS";
            internal const string MIDDLE_INITIAL_0004 = "MIDDLE_INITIAL_0004";
            internal const string MIDDLE_INITIAL_0004XX = "MIDDLE_INITIAL_0004XX";
            internal const string LAST_NAME_0004AS = "LAST_NAME_0004AS";
            internal const string LAST_NAME_0004 = "LAST_NAME_0004";
            internal const string LAST_NAME_0004XX = "LAST_NAME_0004XX";
            internal const string SEX_0004AS = "SEX_0004AS";
            internal const string SEX_0004 = "SEX_0004";
            internal const string SEX_0004XX = "SEX_0004XX";
            internal const string DOB_0004AS = "DOB_0004AS";
            internal const string DOB_0004 = "DOB_0004";
            internal const string DOB_0004XX = "DOB_0004XX";
            internal const string OUTPUT_G_KSCARES_0005EV = "OUTPUT_G_KSCARES_0005EV";
            internal const string IEF_SUPPLIED_0005ET = "IEF_SUPPLIED_0005ET";
            internal const string FLAG_0005AS = "FLAG_0005AS";
            internal const string FLAG_0005 = "FLAG_0005";
            internal const string FLAG_0005XX = "FLAG_0005XX";
            internal const string OUTPUT_G_KANPAY_0006EV = "OUTPUT_G_KANPAY_0006EV";
            internal const string IEF_SUPPLIED_0006ET = "IEF_SUPPLIED_0006ET";
            internal const string FLAG_0006AS = "FLAG_0006AS";
            internal const string FLAG_0006 = "FLAG_0006";
            internal const string FLAG_0006XX = "FLAG_0006XX";
            internal const string OUTPUT_G_CSE_0007EV = "OUTPUT_G_CSE_0007EV";
            internal const string IEF_SUPPLIED_0007ET = "IEF_SUPPLIED_0007ET";
            internal const string FLAG_0007AS = "FLAG_0007AS";
            internal const string FLAG_0007 = "FLAG_0007";
            internal const string FLAG_0007XX = "FLAG_0007XX";
            internal const string OUTPUT_G_AE_0008EV = "OUTPUT_G_AE_0008EV";
            internal const string IEF_SUPPLIED_0008ET = "IEF_SUPPLIED_0008ET";
            internal const string FLAG_0008AS = "FLAG_0008AS";
            internal const string FLAG_0008 = "FLAG_0008";
            internal const string FLAG_0008XX = "FLAG_0008XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_0704133114_IA { get { return GetElementByName<IGroup>(Names.A_0704133114_IA); } }
        public IGroup INPUT_0001EV { get { return GetElementByName<IGroup>(Names.INPUT_0001EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0001ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0001ET); } }
        public IField NUMBER_0001AS { get { return GetElementByName<IField>(Names.NUMBER_0001AS); } }
        public IField NUMBER_0001 { get { return GetElementByName<IField>(Names.NUMBER_0001); } }
        public IField NUMBER_0001XX { get { return GetElementByName<IField>(Names.NUMBER_0001XX); } }
        public IField UNIQUE_KEY_0001AS { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0001AS); } }
        public IField UNIQUE_KEY_0001 { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0001); } }
        public IField UNIQUE_KEY_0001XX { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0001XX); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_0704133119_OA { get { return GetElementByName<IGroup>(Names.A_0704133119_OA); } }
        public IGroup OUTPUT_0002EV { get { return GetElementByName<IGroup>(Names.OUTPUT_0002EV); } }
        public IGroup ABEND_DATA_0002ET { get { return GetElementByName<IGroup>(Names.ABEND_DATA_0002ET); } }
        public IField TYPE_0002AS { get { return GetElementByName<IField>(Names.TYPE_0002AS); } }
        public IField TYPE_0002 { get { return GetElementByName<IField>(Names.TYPE_0002); } }
        public IField TYPE_0002XX { get { return GetElementByName<IField>(Names.TYPE_0002XX); } }
        public IField ADABAS_FILE_NUMBER_0002AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0002AS); } }
        public IField ADABAS_FILE_NUMBER_0002 { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0002); } }
        public IField ADABAS_FILE_NUMBER_0002XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0002XX); } }
        public IField ADABAS_FILE_ACTION_0002AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0002AS); } }
        public IField ADABAS_FILE_ACTION_0002 { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0002); } }
        public IField ADABAS_FILE_ACTION_0002XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0002XX); } }
        public IField ADABAS_RESPONSE_CD_0002AS { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0002AS); } }
        public IField ADABAS_RESPONSE_CD_0002 { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0002); } }
        public IField ADABAS_RESPONSE_CD_0002XX { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0002XX); } }
        public IField CICS_RESOURCE_NM_0002AS { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0002AS); } }
        public IField CICS_RESOURCE_NM_0002 { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0002); } }
        public IField CICS_RESOURCE_NM_0002XX { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0002XX); } }
        public IField CICS_FUNCTION_CD_0002AS { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0002AS); } }
        public IField CICS_FUNCTION_CD_0002 { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0002); } }
        public IField CICS_FUNCTION_CD_0002XX { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0002XX); } }
        public IField CICS_RESPONSE_CD_0002AS { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0002AS); } }
        public IField CICS_RESPONSE_CD_0002 { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0002); } }
        public IField CICS_RESPONSE_CD_0002XX { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0002XX); } }
        public IGroup OUTPUT_NEXT_KEY_0003EV { get { return GetElementByName<IGroup>(Names.OUTPUT_NEXT_KEY_0003EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0003ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0003ET); } }
        public IField UNIQUE_KEY_0003AS { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0003AS); } }
        public IField UNIQUE_KEY_0003 { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0003); } }
        public IField UNIQUE_KEY_0003XX { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0003XX); } }
        public IGroup OUTPUT_GROUP_ALIASES_0001RG { get { return GetElementByName<IGroup>(Names.OUTPUT_GROUP_ALIASES_0001RG); } }
        public IField OUTPUT_GROUP_ALIASES_0001MA { get { return GetElementByName<IField>(Names.OUTPUT_GROUP_ALIASES_0001MA); } }
        public IField OUTPUT_GROUP_ALIASES_0001MX { get { return GetElementByName<IField>(Names.OUTPUT_GROUP_ALIASES_0001MX); } }
        public IArrayElementAccessor<IGroup> OUTPUT_GROUP_ALIASES_0001 { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_GROUP_ALIASES_0001); } }
        public IArrayElementAccessor<IField> OUTPUT_GROUP_ALIASES_0001AC { get { return GetArrayElementAccessor<IField>(Names.OUTPUT_GROUP_ALIASES_0001AC); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_0004EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_0004EV); } }
        public IArrayElementAccessor<IGroup> CSE_PERSONS_WORK_SET_0004ET { get { return GetArrayElementAccessor<IGroup>(Names.CSE_PERSONS_WORK_SET_0004ET); } }
        public IArrayElementAccessor<IField> UNIQUE_KEY_0004AS { get { return GetArrayElementAccessor<IField>(Names.UNIQUE_KEY_0004AS); } }
        public IArrayElementAccessor<IField> UNIQUE_KEY_0004 { get { return GetArrayElementAccessor<IField>(Names.UNIQUE_KEY_0004); } }
        public IArrayElementAccessor<IField> UNIQUE_KEY_0004XX { get { return GetArrayElementAccessor<IField>(Names.UNIQUE_KEY_0004XX); } }
        public IArrayElementAccessor<IField> SSN_0004AS { get { return GetArrayElementAccessor<IField>(Names.SSN_0004AS); } }
        public IArrayElementAccessor<IField> SSN_0004 { get { return GetArrayElementAccessor<IField>(Names.SSN_0004); } }
        public IArrayElementAccessor<IField> SSN_0004XX { get { return GetArrayElementAccessor<IField>(Names.SSN_0004XX); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0004AS { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0004AS); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0004 { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0004); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0004XX { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0004XX); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0004AS { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0004AS); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0004 { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0004); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0004XX { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0004XX); } }
        public IArrayElementAccessor<IField> LAST_NAME_0004AS { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0004AS); } }
        public IArrayElementAccessor<IField> LAST_NAME_0004 { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0004); } }
        public IArrayElementAccessor<IField> LAST_NAME_0004XX { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0004XX); } }
        public IArrayElementAccessor<IField> SEX_0004AS { get { return GetArrayElementAccessor<IField>(Names.SEX_0004AS); } }
        public IArrayElementAccessor<IField> SEX_0004 { get { return GetArrayElementAccessor<IField>(Names.SEX_0004); } }
        public IArrayElementAccessor<IField> SEX_0004XX { get { return GetArrayElementAccessor<IField>(Names.SEX_0004XX); } }
        public IArrayElementAccessor<IField> DOB_0004AS { get { return GetArrayElementAccessor<IField>(Names.DOB_0004AS); } }
        public IArrayElementAccessor<IField> DOB_0004 { get { return GetArrayElementAccessor<IField>(Names.DOB_0004); } }
        public IArrayElementAccessor<IField> DOB_0004XX { get { return GetArrayElementAccessor<IField>(Names.DOB_0004XX); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_KSCARES_0005EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_KSCARES_0005EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0005ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0005ET); } }
        public IArrayElementAccessor<IField> FLAG_0005AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0005AS); } }
        public IArrayElementAccessor<IField> FLAG_0005 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0005); } }
        public IArrayElementAccessor<IField> FLAG_0005XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0005XX); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_KANPAY_0006EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_KANPAY_0006EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0006ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0006ET); } }
        public IArrayElementAccessor<IField> FLAG_0006AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0006AS); } }
        public IArrayElementAccessor<IField> FLAG_0006 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0006); } }
        public IArrayElementAccessor<IField> FLAG_0006XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0006XX); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_CSE_0007EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_CSE_0007EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0007ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0007ET); } }
        public IArrayElementAccessor<IField> FLAG_0007AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0007AS); } }
        public IArrayElementAccessor<IField> FLAG_0007 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0007); } }
        public IArrayElementAccessor<IField> FLAG_0007XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0007XX); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_AE_0008EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_AE_0008EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0008ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0008ET); } }
        public IArrayElementAccessor<IField> FLAG_0008AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0008AS); } }
        public IArrayElementAccessor<IField> FLAG_0008 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0008); } }
        public IArrayElementAccessor<IField> FLAG_0008XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0008XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_0704133114_IA, (A_0704133114_IA) =>
               {
                   A_0704133114_IA.CreateNewGroup(Names.INPUT_0001EV, (INPUT_0001EV) =>
                   {
                       INPUT_0001EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0001ET, (CSE_PERSONS_WORK_SET_0001ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.NUMBER_0001AS, FieldType.String, 1);

                           IField NUMBER_0001_local = CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.NUMBER_0001, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewFieldRedefine(Names.NUMBER_0001XX, FieldType.String, NUMBER_0001_local, 10);
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.UNIQUE_KEY_0001AS, FieldType.String, 1);

                           IField UNIQUE_KEY_0001_local = CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.UNIQUE_KEY_0001, FieldType.String, 100);
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewFieldRedefine(Names.UNIQUE_KEY_0001XX, FieldType.String, UNIQUE_KEY_0001_local, 100);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_0704133119_OA, (A_0704133119_OA) =>
               {
                   A_0704133119_OA.CreateNewGroup(Names.OUTPUT_0002EV, (OUTPUT_0002EV) =>
                   {
                       OUTPUT_0002EV.CreateNewGroup(Names.ABEND_DATA_0002ET, (ABEND_DATA_0002ET) =>
                       {
                           ABEND_DATA_0002ET.CreateNewField(Names.TYPE_0002AS, FieldType.String, 1);

                           IField TYPE_0002_local = ABEND_DATA_0002ET.CreateNewField(Names.TYPE_0002, FieldType.String, 1);
                           ABEND_DATA_0002ET.CreateNewFieldRedefine(Names.TYPE_0002XX, FieldType.String, TYPE_0002_local, 1);
                           ABEND_DATA_0002ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0002AS, FieldType.String, 1);

                           IField ADABAS_FILE_NUMBER_0002_local = ABEND_DATA_0002ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0002, FieldType.String, 4);
                           ABEND_DATA_0002ET.CreateNewFieldRedefine(Names.ADABAS_FILE_NUMBER_0002XX, FieldType.String, ADABAS_FILE_NUMBER_0002_local, 4);
                           ABEND_DATA_0002ET.CreateNewField(Names.ADABAS_FILE_ACTION_0002AS, FieldType.String, 1);

                           IField ADABAS_FILE_ACTION_0002_local = ABEND_DATA_0002ET.CreateNewField(Names.ADABAS_FILE_ACTION_0002, FieldType.String, 3);
                           ABEND_DATA_0002ET.CreateNewFieldRedefine(Names.ADABAS_FILE_ACTION_0002XX, FieldType.String, ADABAS_FILE_ACTION_0002_local, 3);
                           ABEND_DATA_0002ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0002AS, FieldType.String, 1);

                           IField ADABAS_RESPONSE_CD_0002_local = ABEND_DATA_0002ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0002, FieldType.String, 4);
                           ABEND_DATA_0002ET.CreateNewFieldRedefine(Names.ADABAS_RESPONSE_CD_0002XX, FieldType.String, ADABAS_RESPONSE_CD_0002_local, 4);
                           ABEND_DATA_0002ET.CreateNewField(Names.CICS_RESOURCE_NM_0002AS, FieldType.String, 1);

                           IField CICS_RESOURCE_NM_0002_local = ABEND_DATA_0002ET.CreateNewField(Names.CICS_RESOURCE_NM_0002, FieldType.String, 8);
                           ABEND_DATA_0002ET.CreateNewFieldRedefine(Names.CICS_RESOURCE_NM_0002XX, FieldType.String, CICS_RESOURCE_NM_0002_local, 8);
                           ABEND_DATA_0002ET.CreateNewField(Names.CICS_FUNCTION_CD_0002AS, FieldType.String, 1);

                           IField CICS_FUNCTION_CD_0002_local = ABEND_DATA_0002ET.CreateNewField(Names.CICS_FUNCTION_CD_0002, FieldType.String, 2);
                           ABEND_DATA_0002ET.CreateNewFieldRedefine(Names.CICS_FUNCTION_CD_0002XX, FieldType.String, CICS_FUNCTION_CD_0002_local, 2);
                           ABEND_DATA_0002ET.CreateNewField(Names.CICS_RESPONSE_CD_0002AS, FieldType.String, 1);

                           IField CICS_RESPONSE_CD_0002_local = ABEND_DATA_0002ET.CreateNewField(Names.CICS_RESPONSE_CD_0002, FieldType.String, 6);
                           ABEND_DATA_0002ET.CreateNewFieldRedefine(Names.CICS_RESPONSE_CD_0002XX, FieldType.String, CICS_RESPONSE_CD_0002_local, 6);
                       });
                   });
                   A_0704133119_OA.CreateNewGroup(Names.OUTPUT_NEXT_KEY_0003EV, (OUTPUT_NEXT_KEY_0003EV) =>
                   {
                       OUTPUT_NEXT_KEY_0003EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0003ET, (CSE_PERSONS_WORK_SET_0003ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.UNIQUE_KEY_0003AS, FieldType.String, 1);

                           IField UNIQUE_KEY_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.UNIQUE_KEY_0003, FieldType.String, 100);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.UNIQUE_KEY_0003XX, FieldType.String, UNIQUE_KEY_0003_local, 100);
                       });
                   });
                   A_0704133119_OA.CreateNewGroup(Names.OUTPUT_GROUP_ALIASES_0001RG, (OUTPUT_GROUP_ALIASES_0001RG) =>
                   {

                       IField OUTPUT_GROUP_ALIASES_0001MA_local = OUTPUT_GROUP_ALIASES_0001RG.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001MA, FieldType.SignedNumeric, 4);
                       OUTPUT_GROUP_ALIASES_0001RG.CreateNewFieldRedefine(Names.OUTPUT_GROUP_ALIASES_0001MX, FieldType.String, OUTPUT_GROUP_ALIASES_0001MA_local, 4);
                       OUTPUT_GROUP_ALIASES_0001RG.CreateNewGroupArray(Names.OUTPUT_GROUP_ALIASES_0001, 6, (OUTPUT_GROUP_ALIASES_0001) =>
                       {
                           OUTPUT_GROUP_ALIASES_0001.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001AC, FieldType.String, 1);
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_0004EV, (OUTPUT_G_0004EV) =>
                           {
                               OUTPUT_G_0004EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0004ET, (CSE_PERSONS_WORK_SET_0004ET) =>
                               {
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.UNIQUE_KEY_0004AS, FieldType.String, 1);

                                   IField UNIQUE_KEY_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.UNIQUE_KEY_0004, FieldType.String, 100);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.UNIQUE_KEY_0004XX, FieldType.String, UNIQUE_KEY_0004_local, 100);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.SSN_0004AS, FieldType.String, 1);

                                   IField SSN_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.SSN_0004, FieldType.String, 9);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.SSN_0004XX, FieldType.String, SSN_0004_local, 9);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.FIRST_NAME_0004AS, FieldType.String, 1);

                                   IField FIRST_NAME_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.FIRST_NAME_0004, FieldType.String, 12);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.FIRST_NAME_0004XX, FieldType.String, FIRST_NAME_0004_local, 12);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.MIDDLE_INITIAL_0004AS, FieldType.String, 1);

                                   IField MIDDLE_INITIAL_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.MIDDLE_INITIAL_0004, FieldType.String, 1);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0004XX, FieldType.String, MIDDLE_INITIAL_0004_local, 1);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.LAST_NAME_0004AS, FieldType.String, 1);

                                   IField LAST_NAME_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.LAST_NAME_0004, FieldType.String, 17);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.LAST_NAME_0004XX, FieldType.String, LAST_NAME_0004_local, 17);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.SEX_0004AS, FieldType.String, 1);

                                   IField SEX_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.SEX_0004, FieldType.String, 1);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.SEX_0004XX, FieldType.String, SEX_0004_local, 1);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.DOB_0004AS, FieldType.String, 1);

                                   IField DOB_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.DOB_0004, FieldType.SignedNumeric, 8);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.DOB_0004XX, FieldType.String, DOB_0004_local, 8);
                               });
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_KSCARES_0005EV, (OUTPUT_G_KSCARES_0005EV) =>
                           {
                               OUTPUT_G_KSCARES_0005EV.CreateNewGroup(Names.IEF_SUPPLIED_0005ET, (IEF_SUPPLIED_0005ET) =>
                               {
                                   IEF_SUPPLIED_0005ET.CreateNewField(Names.FLAG_0005AS, FieldType.String, 1);

                                   IField FLAG_0005_local = IEF_SUPPLIED_0005ET.CreateNewField(Names.FLAG_0005, FieldType.String, 1);
                                   IEF_SUPPLIED_0005ET.CreateNewFieldRedefine(Names.FLAG_0005XX, FieldType.String, FLAG_0005_local, 1);
                               });
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_KANPAY_0006EV, (OUTPUT_G_KANPAY_0006EV) =>
                           {
                               OUTPUT_G_KANPAY_0006EV.CreateNewGroup(Names.IEF_SUPPLIED_0006ET, (IEF_SUPPLIED_0006ET) =>
                               {
                                   IEF_SUPPLIED_0006ET.CreateNewField(Names.FLAG_0006AS, FieldType.String, 1);

                                   IField FLAG_0006_local = IEF_SUPPLIED_0006ET.CreateNewField(Names.FLAG_0006, FieldType.String, 1);
                                   IEF_SUPPLIED_0006ET.CreateNewFieldRedefine(Names.FLAG_0006XX, FieldType.String, FLAG_0006_local, 1);
                               });
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_CSE_0007EV, (OUTPUT_G_CSE_0007EV) =>
                           {
                               OUTPUT_G_CSE_0007EV.CreateNewGroup(Names.IEF_SUPPLIED_0007ET, (IEF_SUPPLIED_0007ET) =>
                               {
                                   IEF_SUPPLIED_0007ET.CreateNewField(Names.FLAG_0007AS, FieldType.String, 1);

                                   IField FLAG_0007_local = IEF_SUPPLIED_0007ET.CreateNewField(Names.FLAG_0007, FieldType.String, 1);
                                   IEF_SUPPLIED_0007ET.CreateNewFieldRedefine(Names.FLAG_0007XX, FieldType.String, FLAG_0007_local, 1);
                               });
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_AE_0008EV, (OUTPUT_G_AE_0008EV) =>
                           {
                               OUTPUT_G_AE_0008EV.CreateNewGroup(Names.IEF_SUPPLIED_0008ET, (IEF_SUPPLIED_0008ET) =>
                               {
                                   IEF_SUPPLIED_0008ET.CreateNewField(Names.FLAG_0008AS, FieldType.String, 1);

                                   IField FLAG_0008_local = IEF_SUPPLIED_0008ET.CreateNewField(Names.FLAG_0008, FieldType.String, 1);
                                   IEF_SUPPLIED_0008ET.CreateNewFieldRedefine(Names.FLAG_0008XX, FieldType.String, FLAG_0008_local, 1);
                               });
                           });
                       });
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(W_IA, args, 2);
            SetPassedParm(W_OA, args, 3);
            SetPassedParm(PSMGR_EAB_DATA, args, 4);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(W_IA, args, 2);
            SetReturnParm(W_OA, args, 3);
            SetReturnParm(PSMGR_EAB_DATA, args, 4);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXIR15 : EABBase
    {

        #region Public Constructors
        public SWEXIR15()
            : base()
        {
            this.ProgramName.SetValue("SWEXIR15");

            WS = new SWEXIR15_ws();
            LS = new SWEXIR15_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryTextWithUR("CLNTCSR", "SELECT SSN, DATE_OF_BIRTH, GENDER, CLIENT_NAME, FK_CLB_CLIENT_NO FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = {0} ",  //COBOL==>EXEC SQL DECLARE CLNTCSR CURSOR FOR SELECT SSN , DATE_OF_BIRTH , GENDER , CLIENT_NAME , FK_CLB_CLIENT_NO FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = :INP-CLT-NBRX WITH UR END-EXEC
                                WS.INP_CLT_NBRX);

            DbConv.SetQueryTextWithUR("SYSPTCSR", "SELECT SYSTEM_CODE, PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {0}  AND FK_CLI_CLIENT_NAME = {1}  AND FK_CLI_SSN = {2} ",  //COBOL==>EXEC SQL DECLARE SYSPTCSR CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO AND FK_CLI_CLIENT_NAME = :CLIENT-CLIENT-NAME AND FK_CLI_SSN = :CLIENT-SSN WITH UR END-EXEC
                                WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_CLIENT_NAME, WS.CLIENT_SSN);

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXIR15_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXIR15_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_0704133111(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_0704133111
        /// </summary>
        private void M_MAIN_0704133111(string returnMethod = "")
        {
            M_PARA_0704133111_INIT("M_PARA_0704133111_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-0704133111-INIT THRU PARA-0704133111-INIT-EXIT.
            WS.FUNC_0704133111_ESC_FLAG.SetValue("N");                                                          //COBOL==> MOVE 'N' TO FUNC-0704133111-ESC-FLAG.
            if (returnMethod != "" && returnMethod != "M_MAIN_0704133111") { M_0000_BEG_PGM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_BEG_PGM
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  INCLUDE NAME:  SWCSZG59
        ///COMMENT:      EAB NAME:  SWEXIR15
        ///COMMENT:   DESCRIPTION:  RETRIEVE ALIAS DATA
        ///COMMENT: ****************************************************************
        ///COMMENT:  03-13-01  MLS  REWRITTEN
        ///COMMENT: ****************************************************************
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:                   CONTRL                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:                                                                *
        ///COMMENT:  052014   LAT     CQ35825 CHANGE ADABAS TO DB2 FOR KEES PHASE 3*
        ///COMMENT:  12/5/14  RKM     CORRECTED TO RETURN MULTIPLE ALIAS RECORDS   *
        ///COMMENT:  8/29/17  RKM     ADDED WITH UR TO QUERIES                     *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_0000_BEG_PGM(string returnMethod = "")
        {
            WS.X.ResetToInitialValue();                                                                         //COBOL==> INITIALIZE X.
            WS.TBL_CLT.ResetToInitialValue();                                                                   //COBOL==> INITIALIZE TBL-CLT.
            WS.WRK_PGM_ERR.ResetToInitialValue();                                                               //COBOL==> INITIALIZE WRK-PGM-ERR.
            WS.INP_CLT_NBR.SetValue(LS.NUMBER_0001);                                                            //COBOL==> MOVE NUMBER-0001 TO INP-CLT-NBR
            if (WS.INP_CLT_NBR.IsNumericValue())                                                                //COBOL==> IF INP-CLT-NBR NUMERIC
            {
                //COMMENT:          PERFORM 1000-CHK-CLT-NBR
                M_4100_CHK_CLT_NBR("M_4100_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 4100-CHK-CLT-NBR THRU 4100-EXIT
                if (!(WS.WRK_ADA_ERR.Value))                                                                       //COBOL==> IF NOT WRK-ADA-ERR
                {
                    //COMMENT:              PERFORM 2000-GET-FST-REC
                    M_4200_GET_CLIENT_RECS("M_4200_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 4200-GET-CLIENT-RECS THRU 4200-EXIT
                    if (!(WS.WRK_ADA_ERR.Value))                                                                       //COBOL==> IF NOT WRK-ADA-ERR
                    {
                        M_4000_EXP_CLT_REC("M_4000_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 4000-EXP-CLT-REC THRU 4000-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                //COMMENT:          IF  INP-CLT-NBR = 'CLOSE'
                //COMMENT:              PERFORM 5000-END-PGM
                //COMMENT:          END-IF
                Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WRK_ADA_ERR.Value)                                                                           //COBOL==> IF WRK-ADA-ERR
            {
                LS.TYPE_0002.SetValue(WS.WRK_ERR_TYP);                                                              //COBOL==> MOVE WRK-ERR-TYP TO TYPE-0002
                LS.ADABAS_RESPONSE_CD_0002.SetValue(WS.WRK_ADA_CD);                                                 //COBOL==> MOVE WRK-ADA-CD TO ADABAS-RESPONSE-CD-0002
                LS.ADABAS_FILE_ACTION_0002.SetValue(WS.WRK_ADA_ACT);                                                //COBOL==> MOVE WRK-ADA-ACT TO ADABAS-FILE-ACTION-0002
                LS.ADABAS_FILE_NUMBER_0002.SetValue(WS.WRK_ADA_NBR);                                                //COBOL==> MOVE WRK-ADA-NBR TO ADABAS-FILE-NUMBER-0002
            }                                                                                                   //COBOL==> END-IF.
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_4000_EXP_CLT_REC
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************************************************************
        ///COMMENT: ****************************************************************
        ///COMMENT: * COMMENT OUT ADABASE LOGIC  1000-CHK-CLT-NBR                 **
        ///COMMENT: *                            2000-GET-FST-REC                 **
        ///COMMENT: *                            3000-TBL-CLT-REC                 **
        ///COMMENT: *                            3200-GET-NXT-REC                 **
        ///COMMENT: ****************************************************************
        ///COMMENT: ****************************************************************
        ///COMMENT: 1000-CHK-CLT-NBR.
        ///COMMENT:      @READISN0154 ISN = WRK-CLT-NBR.
        ///COMMENT:      IF  RESPONSE-CODE0154 > ZERO
        ///COMMENT:          SET  WRK-ADA-ERR       TO TRUE
        ///COMMENT:          SET  WRK-RIN-ERR       TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODE0154 TO WRK-ADA-CD
        ///COMMENT:          MOVE 154               TO WRK-ADA-NBR
        ///COMMENT:      ELSE
        ///COMMENT:          IF  CLIENT-NUMBER0154 = INP-CLT-NBR
        ///COMMENT:              MOVE CLIENT-SURNAME0154    TO WRK-LST-NM
        ///COMMENT:              MOVE CLIENT-GIVEN-NAME0154 TO WRK-FST-NM
        ///COMMENT:              MOVE CLIENT-INITIALS0154   TO WRK-MID-NM
        ///COMMENT:              MOVE DATE-OF-BIRTH0154     TO WRK-DOB
        ///COMMENT:              MOVE SSN0154               TO WRK-SSN
        ///COMMENT:              MOVE SEX0154               TO WRK-SEX
        ///COMMENT:          ELSE
        ///COMMENT:              SET  WRK-ADA-ERR           TO TRUE
        ///COMMENT:              SET  WRK-FND-ERR           TO TRUE
        ///COMMENT:              MOVE ZERO                  TO WRK-ADA-CD
        ///COMMENT:              MOVE 154                   TO WRK-ADA-NBR
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        ///COMMENT: 2000-GET-FST-REC.
        ///COMMENT:      MOVE 'N'         TO WRK-CLT-EOF-IND.
        ///COMMENT:      MOVE INP-CLT-NBR TO V-CLIENT-POINTER-1-100149.
        ///COMMENT:      @READLOGICAL0149 FIRST.
        ///COMMENT:      IF  RESPONSE-CODE0149 > ZERO
        ///COMMENT:          SET  WRK-CLT-EOF        TO TRUE
        ///COMMENT:          SET  WRK-ADA-ERR        TO TRUE
        ///COMMENT:          SET  WRK-RLF-ERR        TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODE0149  TO WRK-ADA-CD
        ///COMMENT:          MOVE 149                TO WRK-ADA-NBR
        ///COMMENT:      ELSE
        ///COMMENT:          MOVE CLIENT-POINTER0149 TO WRK-CLT-PTR
        ///COMMENT:          IF  WRK-PTR-NBR = INP-CLT-NBR
        ///COMMENT:              CONTINUE
        ///COMMENT:          ELSE
        ///COMMENT:              SET WRK-CLT-EOF TO TRUE
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        ///COMMENT: 3000-TBL-CLT-REC.
        ///COMMENT:      IF  CLIENT-NAME0149       = WRK-CLT-NM
        ///COMMENT:      AND SSN0149               = WRK-SSN
        ///COMMENT:      AND DATE-OF-BIRTH-SEX0149 = WRK-DOB-SEX
        ///COMMENT:          CONTINUE
        ///COMMENT:      ELSE
        ///COMMENT:          ADD  1 TO X
        ///COMMENT:          MOVE WRK-SYS-IND           TO TBL-SYS-IND (X)
        ///COMMENT:          MOVE CLIENT-NAME0149       TO TBL-CLT-NM  (X)
        ///COMMENT:          MOVE DATE-OF-BIRTH-SEX0149 TO TBL-DOB-SEX (X)
        ///COMMENT:          MOVE SSN0149               TO TBL-SSN-NBR (X)
        ///COMMENT:      END-IF.
        ///COMMENT:      IF  X = WRK-MAX-IDX
        ///COMMENT:          SET WRK-CLT-EOF TO TRUE
        ///COMMENT:      ELSE
        ///COMMENT:          PERFORM 3200-GET-NXT-REC
        ///COMMENT:      END-IF.
        ///COMMENT: 3200-GET-NXT-REC.
        ///COMMENT:      @READLOGICAL0149.
        ///COMMENT:      IF  EOF0149
        ///COMMENT:          SET WRK-CLT-EOF TO TRUE
        ///COMMENT:      ELSE
        ///COMMENT:          IF  RESPONSE-CODE0149 > ZERO
        ///COMMENT:              SET  WRK-CLT-EOF        TO TRUE
        ///COMMENT:              SET  WRK-ADA-ERR        TO TRUE
        ///COMMENT:              SET  WRK-RLN-ERR        TO TRUE
        ///COMMENT:              MOVE RESPONSE-CODE0149  TO WRK-ADA-CD
        ///COMMENT:              MOVE 149                TO WRK-ADA-NBR
        ///COMMENT:          ELSE
        ///COMMENT:              MOVE CLIENT-POINTER0149 TO WRK-CLT-PTR
        ///COMMENT:              IF  WRK-PTR-NBR = INP-CLT-NBR
        ///COMMENT:                  CONTINUE
        ///COMMENT:              ELSE
        ///COMMENT:                  SET WRK-CLT-EOF TO TRUE
        ///COMMENT:              END-IF
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        /// </remarks>
        private void M_4000_EXP_CLT_REC(string returnMethod = "")
        {
            LS.OUTPUT_GROUP_ALIASES_0001MA.SetValue(WS.X);                                                      //COBOL==> MOVE X TO OUTPUT-GROUP-ALIASES-0001MA.
            WS.Y.SetValue(1);                                                                                   //COBOL==> MOVE 1 TO Y.
            while (!(WS.Y.IsGreaterThan(WS.X)))                                                                 //COBOL==> PERFORM UNTIL Y > X
            {
                LS.LAST_NAME_0004[WS.Y.AsInt()].SetValue(WS.TBL_LST_NM[WS.Y.AsInt()]);                              //COBOL==> MOVE TBL-LST-NM ( Y ) TO LAST-NAME-0004 ( Y )
                LS.FIRST_NAME_0004[WS.Y.AsInt()].SetValue(WS.TBL_FST_NM[WS.Y.AsInt()]);                             //COBOL==> MOVE TBL-FST-NM ( Y ) TO FIRST-NAME-0004 ( Y )
                LS.MIDDLE_INITIAL_0004[WS.Y.AsInt()].SetValue(WS.TBL_MID_NM[WS.Y.AsInt()]);                         //COBOL==> MOVE TBL-MID-NM ( Y ) TO MIDDLE-INITIAL-0004 ( Y )
                LS.SEX_0004[WS.Y.AsInt()].SetValue(WS.TBL_SEX[WS.Y.AsInt()]);                                       //COBOL==> MOVE TBL-SEX ( Y ) TO SEX-0004 ( Y )
                LS.FLAG_0005[WS.Y.AsInt()].SetValue(WS.TBL_KSC_IND[WS.Y.AsInt()]);                                  //COBOL==> MOVE TBL-KSC-IND ( Y ) TO FLAG-0005 ( Y )
                LS.FLAG_0006[WS.Y.AsInt()].SetValue(WS.TBL_KPY_IND[WS.Y.AsInt()]);                                  //COBOL==> MOVE TBL-KPY-IND ( Y ) TO FLAG-0006 ( Y )
                LS.FLAG_0007[WS.Y.AsInt()].SetValue(WS.TBL_CSE_IND[WS.Y.AsInt()]);                                  //COBOL==> MOVE TBL-CSE-IND ( Y ) TO FLAG-0007 ( Y )
                LS.FLAG_0008[WS.Y.AsInt()].SetValue(WS.TBL_KAE_IND[WS.Y.AsInt()]);                                  //COBOL==> MOVE TBL-KAE-IND ( Y ) TO FLAG-0008 ( Y )
                if (WS.TBL_DOB[WS.Y.AsInt()].IsNumericValue())                                                      //COBOL==> IF TBL-DOB ( Y ) NUMERIC
                {
                    LS.DOB_0004XX[WS.Y.AsInt()].SetValue(WS.TBL_DOB[WS.Y.AsInt()]);                                     //COBOL==> MOVE TBL-DOB ( Y ) TO DOB-0004XX ( Y )
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    LS.DOB_0004XX[WS.Y.AsInt()].SetValue("00000000");                                                   //COBOL==> MOVE '00000000' TO DOB-0004XX ( Y )
                }                                                                                                   //COBOL==> END-IF
                if (WS.TBL_SSN[WS.Y.AsInt()].IsNumericValue())                                                      //COBOL==> IF TBL-SSN ( Y ) NUMERIC
                {
                    LS.SSN_0004XX[WS.Y.AsInt()].SetValue(WS.TBL_SSN[WS.Y.AsInt()]);                                     //COBOL==> MOVE TBL-SSN ( Y ) TO SSN-0004XX ( Y )
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    LS.SSN_0004XX[WS.Y.AsInt()].SetValue("000000000");                                                  //COBOL==> MOVE '000000000' TO SSN-0004XX ( Y )
                }                                                                                                   //COBOL==> END-IF
                WS.Y.Add(1);                                                                                        //COBOL==> ADD 1 TO Y
            }                                                                                                   //COBOL==> END-PERFORM.
            if (returnMethod != "" && returnMethod != "M_4000_EXP_CLT_REC") { M_4000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4000_EXIT
        /// </summary>
        private void M_4000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4000_EXIT") { M_4100_CHK_CLT_NBR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4100_CHK_CLT_NBR
        /// </summary>
        private void M_4100_CHK_CLT_NBR(string returnMethod = "")
        {
            DbConv.ExecuteSqlQueryWithUR("SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , SSN , GENDER , DATE_OF_BIRTH INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {7} ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , SSN , GENDER , DATE_OF_BIRTH INTO :CLIENTB-CLIENT-NUMBER , :CLIENTB-CLIENT-GIVEN-NAME , :CLIENTB-CLIENT-INITIALS , :CLIENTB-CLIENT-SURNAME , :CLIENTB-SSN , :CLIENTB-GENDER , :CLIENTB-DATE-OF-BIRTH FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :INP-CLT-NBRX WITH UR END-EXEC.
                                 WS.CLIENTB_CLIENT_NUMBER, WS.CLIENTB_CLIENT_GIVEN_NAME, WS.CLIENTB_CLIENT_INITIALS, WS.CLIENTB_CLIENT_SURNAME, WS.CLIENTB_SSN, WS.CLIENTB_GENDER, WS.CLIENTB_DATE_OF_BIRTH, WS.INP_CLT_NBRX);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                WS.WRK_LST_NM.SetValue(WS.CLIENTB_CLIENT_SURNAME);                                                  //COBOL==> MOVE CLIENTB-CLIENT-SURNAME TO WRK-LST-NM
                WS.WRK_FST_NM.SetValue(WS.CLIENTB_CLIENT_GIVEN_NAME);                                               //COBOL==> MOVE CLIENTB-CLIENT-GIVEN-NAME TO WRK-FST-NM
                WS.WRK_MID_NM.SetValue(WS.CLIENTB_CLIENT_INITIALS);                                                 //COBOL==> MOVE CLIENTB-CLIENT-INITIALS TO WRK-MID-NM
                WS.WS_DB2_DOB.SetValue(WS.CLIENTB_DATE_OF_BIRTH);                                                   //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH TO WS-DB2-DOB
                WS.WS_FORMAT_YR.SetValue(WS.WS_DB2_YR);                                                             //COBOL==> MOVE WS-DB2-YR TO WS-FORMAT-YR
                WS.WS_FORMAT_MO.SetValue(WS.WS_DB2_MO);                                                             //COBOL==> MOVE WS-DB2-MO TO WS-FORMAT-MO
                WS.WS_FORMAT_DA.SetValue(WS.WS_DB2_DA);                                                             //COBOL==> MOVE WS-DB2-DA TO WS-FORMAT-DA
                WS.WRK_DOB.SetValue(WS.WS_FORMAT_DOB);                                                              //COBOL==> MOVE WS-FORMAT-DOB TO WRK-DOB
                WS.WRK_SSN.SetValue(WS.CLIENTB_SSN);                                                                //COBOL==> MOVE CLIENTB-SSN TO WRK-SSN
                WS.WRK_SEX.SetValue(WS.CLIENTB_GENDER);                                                             //COBOL==> MOVE CLIENTB-GENDER TO WRK-SEX
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_FND_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-FND-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(154);                                                                       //COBOL==> MOVE 154 TO WRK-ADA-NBR
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_RIN_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-RIN-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(154);                                                                       //COBOL==> MOVE 154 TO WRK-ADA-NBR
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_4100_CHK_CLT_NBR") { M_4100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4100_EXIT
        /// </summary>
        private void M_4100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4100_EXIT") { M_4200_GET_CLIENT_RECS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4200_GET_CLIENT_RECS
        /// </summary>
        private void M_4200_GET_CLIENT_RECS(string returnMethod = "")
        {
            WS.WRK_CLT_EOF_IND.ResetToInitialValue();                                                           //COBOL==> INITIALIZE WRK-CLT-EOF-IND , WRK-CLT-ERR.
            WS.WRK_CLT_ERR.ResetToInitialValue();
            DbConv.OpenReader("CLNTCSR");                                                                       //COBOL==> EXEC SQL OPEN CLNTCSR END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                while (!((WS.WRK_CLT_EOF.Value) || (WS.WRK_CLT_ERR_YES.Value)))                                     //COBOL==> PERFORM 4300-PROCESS-CLIENTS THRU 4300-EXIT UNTIL WRK-CLT-EOF OR WRK-CLT-ERR-YES
                {
                    M_4300_PROCESS_CLIENTS("M_4300_EXIT"); if (Control.ExitProgram) { return; }
                }
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_CLT_EOF.SetValue(true);                                                                      //COBOL==> SET WRK-CLT-EOF TO TRUE
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_RLN_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-RLN-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(149);                                                                       //COBOL==> MOVE 149 TO WRK-ADA-NBR
            }                                                                                                   //COBOL==> END-EVALUATE.
            DbConv.CloseReader("CLNTCSR");                                                                      //COBOL==> EXEC SQL CLOSE CLNTCSR END-EXEC.
            if (returnMethod != "" && returnMethod != "M_4200_GET_CLIENT_RECS") { M_4200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4200_EXIT
        /// </summary>
        private void M_4200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4200_EXIT") { M_4300_PROCESS_CLIENTS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4300_PROCESS_CLIENTS
        /// </summary>
        private void M_4300_PROCESS_CLIENTS(string returnMethod = "")
        {
            DbConv.FetchReaderRow("CLNTCSR",                                                                 //COBOL==> EXEC SQL FETCH CLNTCSR INTO :CLIENT-SSN , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-CLIENT-NAME , :CLIENT-FK-CLB-CLIENT-NO END-EXEC.
                             WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_CLIENT_NAME, WS.CLIENT_FK_CLB_CLIENT_NO);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                if ((((WS.CLIENT_CLIENT_NAME.IsEqualTo(WS.WRK_CLT_NM))
             && (WS.CLIENT_SSN.IsEqualTo(WS.WRK_SSN)))
             && (WS.CLIENT_DATE_OF_BIRTH.IsEqualTo(WS.WS_DB2_DOB)))
             && (WS.CLIENT_GENDER.IsEqualTo(WS.WRK_SEX)))  //COBOL==> IF CLIENT-CLIENT-NAME = WRK-CLT-NM AND CLIENT-SSN = WRK-SSN AND CLIENT-DATE-OF-BIRTH = WS-DB2-DOB AND CLIENT-GENDER = WRK-SEX
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    DbConv.OpenReader("SYSPTCSR");                                                                      //COBOL==> EXEC SQL OPEN SYSPTCSR END-EXEC
                                                                                                                        // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
                    if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
                    {
                        WS.WRK_SYSPT_EOF_IND.ResetToInitialValue();                                                         //COBOL==> INITIALIZE WRK-SYSPT-EOF-IND , WRK-PTR-ERR
                        WS.WRK_PTR_ERR.ResetToInitialValue();
                        WS.WRK_SYS_IND.SetValueWithSpaces();                                                                //COBOL==> MOVE SPACES TO WRK-SYS-IND
                        while (!((WS.WRK_SYSPT_EOF.Value) || (WS.WRK_PTR_ERR_YES.Value)))                                   //COBOL==> PERFORM 4310-GET-SYSTEM-IND THRU 4310-EXIT UNTIL WRK-SYSPT-EOF OR WRK-PTR-ERR-YES
                        {
                            M_4310_GET_SYSTEM_IND("M_4310_EXIT"); if (Control.ExitProgram) { return; }
                        }
                        if (WS.WRK_PTR_ERR_YES.Value)                                                                       //COBOL==> IF WRK-PTR-ERR-YES
                        {
                            WS.WRK_SYS_IND.SetValueWithSpaces();                                                                //COBOL==> MOVE SPACES TO WRK-SYS-IND
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                //COBOL==> WHEN OTHER
                    else
                    {
                        WS.WRK_SYS_IND.SetValueWithSpaces();                                                                //COBOL==> MOVE SPACES TO WRK-SYS-IND
                        WS.WRK_CLT_EOF.SetValue(true);                                                                      //COBOL==> SET WRK-CLT-EOF TO TRUE
                        WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                        WS.WRK_RLN_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-RLN-ERR TO TRUE
                        WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                        WS.WRK_ADA_NBR.SetValue(149);                                                                       //COBOL==> MOVE 149 TO WRK-ADA-NBR
                    }                                                                                                   //COBOL==> END-EVALUATE
                    WS.X.Add(1);                                                                                        //COBOL==> ADD 1 TO X
                    WS.TBL_SYS_IND[WS.X.AsInt()].SetValue(WS.WRK_SYS_IND);                                              //COBOL==> MOVE WRK-SYS-IND TO TBL-SYS-IND ( X )
                    WS.TBL_CLT_NM[WS.X.AsInt()].SetValue(WS.CLIENT_CLIENT_NAME);                                        //COBOL==> MOVE CLIENT-CLIENT-NAME TO TBL-CLT-NM ( X )
                    WS.WS_CLT_DOB.SetValue(WS.CLIENT_DATE_OF_BIRTH);                                                    //COBOL==> MOVE CLIENT-DATE-OF-BIRTH TO WS-CLT-DOB
                    WS.WS_FORMAT_YR.SetValue(WS.WS_CLT_YR);                                                             //COBOL==> MOVE WS-CLT-YR TO WS-FORMAT-YR
                    WS.WS_FORMAT_MO.SetValue(WS.WS_CLT_MO);                                                             //COBOL==> MOVE WS-CLT-MO TO WS-FORMAT-MO
                    WS.WS_FORMAT_DA.SetValue(WS.WS_CLT_DA);                                                             //COBOL==> MOVE WS-CLT-DA TO WS-FORMAT-DA
                    WS.TBL_DOB[WS.X.AsInt()].SetValue(WS.WS_FORMAT_DOB);                                                //COBOL==> MOVE WS-FORMAT-DOB TO TBL-DOB ( X )
                    WS.TBL_SEX[WS.X.AsInt()].SetValue(WS.CLIENT_GENDER);                                                //COBOL==> MOVE CLIENT-GENDER TO TBL-SEX ( X )
                    WS.TBL_SSN_NBR[WS.X.AsInt()].SetValue(WS.CLIENT_SSN);                                               //COBOL==> MOVE CLIENT-SSN TO TBL-SSN-NBR ( X )
                    DbConv.CloseReader("SYSPTCSR");                                                                     //COBOL==> EXEC SQL CLOSE SYSPTCSR END-EXEC
                    if (WS.X.IsEqualTo(6))                                                                              //COBOL==> IF X = 6
                    {
                        WS.WRK_CLT_EOF.SetValue(true);                                                                      //COBOL==> SET WRK-CLT-EOF TO TRUE
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WRK_CLT_EOF.SetValue(true);                                                                      //COBOL==> SET WRK-CLT-EOF TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_CLT_ERR_YES.SetValue(true);                                                                  //COBOL==> SET WRK-CLT-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_4300_PROCESS_CLIENTS") { M_4300_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4300_EXIT
        /// </summary>
        private void M_4300_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4300_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4300_EXIT") { M_4310_GET_SYSTEM_IND(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4310_GET_SYSTEM_IND
        /// </summary>
        private void M_4310_GET_SYSTEM_IND(string returnMethod = "")
        {
            DbConv.FetchReaderRow("SYSPTCSR",                                                                //COBOL==> EXEC SQL FETCH SYSPTCSR INTO :SPART-SYSTEM-CODE , :SPART-PARTICIPATION-FLAG END-EXEC.
                             WS.SPART_SYSTEM_CODE, WS.SPART_PARTICIPATION_FLAG);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                // EvaluateList !WS.SPART_SYSTEM_CODE!                                                              //COBOL==> EVALUATE SPART-SYSTEM-CODE
                if ((WS.SPART_SYSTEM_CODE.IsEqualTo("AE")))                                                         //COBOL==> WHEN 'AE'
                {
                    WS.WRK_SYS_KAE.SetValue(WS.SPART_PARTICIPATION_FLAG);                                               //COBOL==> MOVE SPART-PARTICIPATION-FLAG TO WRK-SYS-KAE
                }                                                                                                //COBOL==> WHEN 'CS'
                else
                if ((WS.SPART_SYSTEM_CODE.IsEqualTo("CS")))
                {
                    WS.WRK_SYS_CSE.SetValue(WS.SPART_PARTICIPATION_FLAG);                                               //COBOL==> MOVE SPART-PARTICIPATION-FLAG TO WRK-SYS-CSE
                }                                                                                                //COBOL==> WHEN 'KA'
                else
                if ((WS.SPART_SYSTEM_CODE.IsEqualTo("KA")))
                {
                    WS.WRK_SYS_KPY.SetValue(WS.SPART_PARTICIPATION_FLAG);                                               //COBOL==> MOVE SPART-PARTICIPATION-FLAG TO WRK-SYS-KPY
                }                                                                                                //COBOL==> WHEN 'KS'
                else
                if ((WS.SPART_SYSTEM_CODE.IsEqualTo("KS")))
                {
                    WS.WRK_SYS_KSC.SetValue(WS.SPART_PARTICIPATION_FLAG);                                               //COBOL==> MOVE SPART-PARTICIPATION-FLAG TO WRK-SYS-KSC
                }                                                                                                //COBOL==> WHEN OTHER
                else
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                   //COBOL==> END-EVALUATE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WRK_SYSPT_EOF.SetValue(true);                                                                    //COBOL==> SET WRK-SYSPT-EOF TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_PTR_ERR_YES.SetValue(true);                                                                  //COBOL==> SET WRK-PTR-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_4310_GET_SYSTEM_IND") { M_4310_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4310_EXIT
        /// </summary>
        private void M_4310_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4310_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4310_EXIT") { M_PARA_0704133111_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0704133111_INIT
        /// </summary>
        /// <remarks>
        ///COMMENT: 5000-END-PGM.
        ///COMMENT:     @CLOSE.
        /// </remarks>
        private void M_PARA_0704133111_INIT(string returnMethod = "")
        {
            LS.OUTPUT_0002EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE OUTPUT-0002EV
            LS.OUTPUT_NEXT_KEY_0003EV.ResetToInitialValue();                                                    //COBOL==> INITIALIZE OUTPUT-NEXT-KEY-0003EV
            WS.OUTPUT_GROUP_ALIASES_0001PS.SetValue(1);                                                         //COBOL==> MOVE 1 TO OUTPUT-GROUP-ALIASES-0001PS
            LS.OUTPUT_GROUP_ALIASES_0001RG.ResetToInitialValue();                                               //COBOL==> INITIALIZE OUTPUT-GROUP-ALIASES-0001RG .
            if (returnMethod != "" && returnMethod != "M_PARA_0704133111_INIT") { M_PARA_0704133111_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0704133111_INIT_EXIT
        /// </summary>
        private void M_PARA_0704133111_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0704133111_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
