#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2021
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2021-12-07 03:12:24 PM
   **        *   FROM COBOL PGM   :  SWEXFE97
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                              COOL:GEN
               COPYRIGHT 1998, STERLING SOFTWARE, INC.
       NAME: EAB_ACCESS_INBOUND_EFT_FILE      DATE: 2000/01/05
       TARGET OS:   MVS                       TIME: 00:00:00
       TARGET DBMS: DB2                       USER: SWSRGMF
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING NOT SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
   **************************************************************
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.IO.Common;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
using MDSY.Framework.IO.Common;
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region File Section Class
    internal class SWEXFE97_fd : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string FileSection = "SWEXFE97_fd_FileSection";
            internal const string EFT_INPUT_FILE = "EFT_INPUT_FILE";
            internal const string EFT_INPUT_RECORD = "EFT_INPUT_RECORD";
            internal const string EFT_HEADER_RECORD = "EFT_HEADER_RECORD";
            internal const string EFT_HEADER_RECORD_TYPE = "EFT_HEADER_RECORD_TYPE";
            internal const string EFT_FILE_CREATION_DATE = "EFT_FILE_CREATION_DATE";
            internal const string EFT_FILE_CREATION_TIME = "EFT_FILE_CREATION_TIME";
            internal const string EFT_DETAIL_RECORD = "EFT_DETAIL_RECORD";
            internal const string EFT_COMPANY_HEADER = "EFT_COMPANY_HEADER";
            internal const string EFT_DETAIL_RECORD_TYPE = "EFT_DETAIL_RECORD_TYPE";
            internal const string EFT_SEQUENCE_NUMBER = "EFT_SEQUENCE_NUMBER";
            internal const string EFT_COMPANY_NAME = "EFT_COMPANY_NAME";
            internal const string EFT_COMPANY_IDENTIFICATION = "EFT_COMPANY_IDENTIFICATION";
            internal const string EFT_COMPANY_IDENT_ICD = "EFT_COMPANY_IDENT_ICD";
            internal const string EFT_COMPANY_IDENT_NUM = "EFT_COMPANY_IDENT_NUM";
            internal const string EFT_COMPANY_ENTRY_DESCR = "EFT_COMPANY_ENTRY_DESCR";
            internal const string EFT_COMPANY_DESCR_DATE = "EFT_COMPANY_DESCR_DATE";
            internal const string EFT_COMPANY_DESCR_DATE_R = "EFT_COMPANY_DESCR_DATE_R";
            internal const string EFT_CO_DESCR_DATE_R_YY = "EFT_CO_DESCR_DATE_R_YY";
            internal const string EFT_CO_DESCR_DATE_R_MM = "EFT_CO_DESCR_DATE_R_MM";
            internal const string EFT_CO_DESCR_DATE_R_DD = "EFT_CO_DESCR_DATE_R_DD";
            internal const string EFT_EFFECTIVE_ENTRY_DATE = "EFT_EFFECTIVE_ENTRY_DATE";
            internal const string EFT_EFFECTIVE_ENTRY_DATE_R = "EFT_EFFECTIVE_ENTRY_DATE_R";
            internal const string EFT_ORIG_DFI_IDENT = "EFT_ORIG_DFI_IDENT";
            internal const string EFT_CCD_OR_CTX = "EFT_CCD_OR_CTX";
            internal const string EFT_TRANSACTION_CODE = "EFT_TRANSACTION_CODE";
            internal const string EFT_DFI_ACCOUNT_NUMBER = "EFT_DFI_ACCOUNT_NUMBER";
            internal const string EFT_TRANSMITTAL_AMOUNT = "EFT_TRANSMITTAL_AMOUNT";
            internal const string EFT_RECEIVING_COMPANY_NAME = "EFT_RECEIVING_COMPANY_NAME";
            internal const string EFT_TRACE_NUMBER = "EFT_TRACE_NUMBER";
            internal const string EFT_DED_ADDENDUM = "EFT_DED_ADDENDUM";
            internal const string EFT_APPLICATION_IDENTIFIER = "EFT_APPLICATION_IDENTIFIER";
            internal const string EFT_CASE_IDENTIFIER = "EFT_CASE_IDENTIFIER";
            internal const string EFT_PAY_DATE = "EFT_PAY_DATE";
            internal const string EFT_PAY_DATE_R = "EFT_PAY_DATE_R";
            internal const string EFT_COLLECTION_AMOUNT = "EFT_COLLECTION_AMOUNT";
            internal const string EFT_NON_CUST_PARENT_SSN = "EFT_NON_CUST_PARENT_SSN";
            internal const string EFT_MEDICAL_SUPP_IND = "EFT_MEDICAL_SUPP_IND";
            internal const string EFT_NON_CUST_PARENT_NAME = "EFT_NON_CUST_PARENT_NAME";
            internal const string EFT_FIPS_CODE = "EFT_FIPS_CODE";
            internal const string EFT_EMPLOYMENT_TERM_IND = "EFT_EMPLOYMENT_TERM_IND";
            internal const string EFT_DED_ADDENDUM_R = "EFT_DED_ADDENDUM_R";
            internal const string EFT_AP_ID_ZZ_FOR_FDSO = "EFT_AP_ID_ZZ_FOR_FDSO";
            internal const string EFT_DED_ADDENDUM_SPACES = "EFT_DED_ADDENDUM_SPACES";
            internal const string EFT_TRAILER_RECORD = "EFT_TRAILER_RECORD";
            internal const string EFT_TRAILER_RECORD_TYPE = "EFT_TRAILER_RECORD_TYPE";
            internal const string EFT_TOTAL_RECORD_COUNT = "EFT_TOTAL_RECORD_COUNT";
            internal const string EFT_TOTAL_AMOUNT = "EFT_TOTAL_AMOUNT";
        }
        #endregion

        #region Direct-access element properties
        public IFileLink EFT_INPUT_FILE { get; set; }
        public IField EFT_INPUT_RECORD { get { return GetElementByName<IField>(Names.EFT_INPUT_RECORD); } }
        public IGroup EFT_HEADER_RECORD { get { return GetElementByName<IGroup>(Names.EFT_HEADER_RECORD); } }
        public IField EFT_HEADER_RECORD_TYPE { get { return GetElementByName<IField>(Names.EFT_HEADER_RECORD_TYPE); } }
        public IField EFT_FILE_CREATION_DATE { get { return GetElementByName<IField>(Names.EFT_FILE_CREATION_DATE); } }
        public IField EFT_FILE_CREATION_TIME { get { return GetElementByName<IField>(Names.EFT_FILE_CREATION_TIME); } }
        public IGroup EFT_DETAIL_RECORD { get { return GetElementByName<IGroup>(Names.EFT_DETAIL_RECORD); } }
        public IGroup EFT_COMPANY_HEADER { get { return GetElementByName<IGroup>(Names.EFT_COMPANY_HEADER); } }
        public IField EFT_DETAIL_RECORD_TYPE { get { return GetElementByName<IField>(Names.EFT_DETAIL_RECORD_TYPE); } }
        public IField EFT_SEQUENCE_NUMBER { get { return GetElementByName<IField>(Names.EFT_SEQUENCE_NUMBER); } }
        public IField EFT_COMPANY_NAME { get { return GetElementByName<IField>(Names.EFT_COMPANY_NAME); } }
        public IGroup EFT_COMPANY_IDENTIFICATION { get { return GetElementByName<IGroup>(Names.EFT_COMPANY_IDENTIFICATION); } }
        public IField EFT_COMPANY_IDENT_ICD { get { return GetElementByName<IField>(Names.EFT_COMPANY_IDENT_ICD); } }
        public IField EFT_COMPANY_IDENT_NUM { get { return GetElementByName<IField>(Names.EFT_COMPANY_IDENT_NUM); } }
        public IField EFT_COMPANY_ENTRY_DESCR { get { return GetElementByName<IField>(Names.EFT_COMPANY_ENTRY_DESCR); } }
        public IField EFT_COMPANY_DESCR_DATE { get { return GetElementByName<IField>(Names.EFT_COMPANY_DESCR_DATE); } }
        public IGroup EFT_COMPANY_DESCR_DATE_R { get { return GetElementByName<IGroup>(Names.EFT_COMPANY_DESCR_DATE_R); } }
        public IField EFT_CO_DESCR_DATE_R_YY { get { return GetElementByName<IField>(Names.EFT_CO_DESCR_DATE_R_YY); } }
        public IField EFT_CO_DESCR_DATE_R_MM { get { return GetElementByName<IField>(Names.EFT_CO_DESCR_DATE_R_MM); } }
        public IField EFT_CO_DESCR_DATE_R_DD { get { return GetElementByName<IField>(Names.EFT_CO_DESCR_DATE_R_DD); } }
        public IField EFT_EFFECTIVE_ENTRY_DATE { get { return GetElementByName<IField>(Names.EFT_EFFECTIVE_ENTRY_DATE); } }
        public IField EFT_EFFECTIVE_ENTRY_DATE_R { get { return GetElementByName<IField>(Names.EFT_EFFECTIVE_ENTRY_DATE_R); } }
        public IField EFT_ORIG_DFI_IDENT { get { return GetElementByName<IField>(Names.EFT_ORIG_DFI_IDENT); } }
        public IGroup EFT_CCD_OR_CTX { get { return GetElementByName<IGroup>(Names.EFT_CCD_OR_CTX); } }
        public IField EFT_TRANSACTION_CODE { get { return GetElementByName<IField>(Names.EFT_TRANSACTION_CODE); } }
        public IField EFT_DFI_ACCOUNT_NUMBER { get { return GetElementByName<IField>(Names.EFT_DFI_ACCOUNT_NUMBER); } }
        public IField EFT_TRANSMITTAL_AMOUNT { get { return GetElementByName<IField>(Names.EFT_TRANSMITTAL_AMOUNT); } }
        public IField EFT_RECEIVING_COMPANY_NAME { get { return GetElementByName<IField>(Names.EFT_RECEIVING_COMPANY_NAME); } }
        public IField EFT_TRACE_NUMBER { get { return GetElementByName<IField>(Names.EFT_TRACE_NUMBER); } }
        public IGroup EFT_DED_ADDENDUM { get { return GetElementByName<IGroup>(Names.EFT_DED_ADDENDUM); } }
        public IField EFT_APPLICATION_IDENTIFIER { get { return GetElementByName<IField>(Names.EFT_APPLICATION_IDENTIFIER); } }
        public IField EFT_CASE_IDENTIFIER { get { return GetElementByName<IField>(Names.EFT_CASE_IDENTIFIER); } }
        public IField EFT_PAY_DATE { get { return GetElementByName<IField>(Names.EFT_PAY_DATE); } }
        public IField EFT_PAY_DATE_R { get { return GetElementByName<IField>(Names.EFT_PAY_DATE_R); } }
        public IField EFT_COLLECTION_AMOUNT { get { return GetElementByName<IField>(Names.EFT_COLLECTION_AMOUNT); } }
        public IField EFT_NON_CUST_PARENT_SSN { get { return GetElementByName<IField>(Names.EFT_NON_CUST_PARENT_SSN); } }
        public IField EFT_MEDICAL_SUPP_IND { get { return GetElementByName<IField>(Names.EFT_MEDICAL_SUPP_IND); } }
        public IField EFT_NON_CUST_PARENT_NAME { get { return GetElementByName<IField>(Names.EFT_NON_CUST_PARENT_NAME); } }
        public IField EFT_FIPS_CODE { get { return GetElementByName<IField>(Names.EFT_FIPS_CODE); } }
        public IField EFT_EMPLOYMENT_TERM_IND { get { return GetElementByName<IField>(Names.EFT_EMPLOYMENT_TERM_IND); } }
        public IGroup EFT_DED_ADDENDUM_R { get { return GetElementByName<IGroup>(Names.EFT_DED_ADDENDUM_R); } }
        public IField EFT_AP_ID_ZZ_FOR_FDSO { get { return GetElementByName<IField>(Names.EFT_AP_ID_ZZ_FOR_FDSO); } }
        public IField EFT_DED_ADDENDUM_SPACES { get { return GetElementByName<IField>(Names.EFT_DED_ADDENDUM_SPACES); } }
        public IGroup EFT_TRAILER_RECORD { get { return GetElementByName<IGroup>(Names.EFT_TRAILER_RECORD); } }
        public IField EFT_TRAILER_RECORD_TYPE { get { return GetElementByName<IField>(Names.EFT_TRAILER_RECORD_TYPE); } }
        public IField EFT_TOTAL_RECORD_COUNT { get { return GetElementByName<IField>(Names.EFT_TOTAL_RECORD_COUNT); } }
        public IField EFT_TOTAL_AMOUNT { get { return GetElementByName<IField>(Names.EFT_TOTAL_AMOUNT); } }


        internal SWEXFE97_ws WS;
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the FileSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.EFT_INPUT_RECORD, FieldType.String, 198);

            recordDef.CreateNewGroup(Names.EFT_HEADER_RECORD, (EFT_HEADER_RECORD) =>
           {
               EFT_HEADER_RECORD.CreateNewField(Names.EFT_HEADER_RECORD_TYPE, FieldType.String, 1);
               EFT_HEADER_RECORD.CreateNewField(Names.EFT_FILE_CREATION_DATE, FieldType.String, 8);
               EFT_HEADER_RECORD.CreateNewField(Names.EFT_FILE_CREATION_TIME, FieldType.String, 4);
               EFT_HEADER_RECORD.CreateNewFillerField(185, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.EFT_DETAIL_RECORD, (EFT_DETAIL_RECORD) =>
           {
               EFT_DETAIL_RECORD.CreateNewGroup(Names.EFT_COMPANY_HEADER, (EFT_COMPANY_HEADER) =>
               {
                   EFT_COMPANY_HEADER.CreateNewField(Names.EFT_DETAIL_RECORD_TYPE, FieldType.String, 1);
                   EFT_COMPANY_HEADER.CreateNewField(Names.EFT_SEQUENCE_NUMBER, FieldType.UnsignedNumeric, 9);
                   EFT_COMPANY_HEADER.CreateNewField(Names.EFT_COMPANY_NAME, FieldType.String, 16);
                   EFT_COMPANY_HEADER.CreateNewGroup(Names.EFT_COMPANY_IDENTIFICATION, (EFT_COMPANY_IDENTIFICATION) =>
                   {
                       EFT_COMPANY_IDENTIFICATION.CreateNewField(Names.EFT_COMPANY_IDENT_ICD, FieldType.String, 1);
                       EFT_COMPANY_IDENTIFICATION.CreateNewField(Names.EFT_COMPANY_IDENT_NUM, FieldType.String, 9);
                   });
                   EFT_COMPANY_HEADER.CreateNewField(Names.EFT_COMPANY_ENTRY_DESCR, FieldType.String, 10);

                   IField EFT_COMPANY_DESCR_DATE_local = EFT_COMPANY_HEADER.CreateNewField(Names.EFT_COMPANY_DESCR_DATE, FieldType.UnsignedNumeric, 6);
                   EFT_COMPANY_HEADER.CreateNewGroupRedefine(Names.EFT_COMPANY_DESCR_DATE_R, EFT_COMPANY_DESCR_DATE_local, (EFT_COMPANY_DESCR_DATE_R) =>
                   {
                       EFT_COMPANY_DESCR_DATE_R.CreateNewField(Names.EFT_CO_DESCR_DATE_R_YY, FieldType.UnsignedNumeric, 2);
                       EFT_COMPANY_DESCR_DATE_R.CreateNewField(Names.EFT_CO_DESCR_DATE_R_MM, FieldType.UnsignedNumeric, 2);
                       EFT_COMPANY_DESCR_DATE_R.CreateNewField(Names.EFT_CO_DESCR_DATE_R_DD, FieldType.UnsignedNumeric, 2);
                   });

                   IField EFT_EFFECTIVE_ENTRY_DATE_local = EFT_COMPANY_HEADER.CreateNewField(Names.EFT_EFFECTIVE_ENTRY_DATE, FieldType.UnsignedNumeric, 6);
                   EFT_COMPANY_HEADER.CreateNewFieldRedefine(Names.EFT_EFFECTIVE_ENTRY_DATE_R, FieldType.String, EFT_EFFECTIVE_ENTRY_DATE_local, 6);
                   EFT_COMPANY_HEADER.CreateNewField(Names.EFT_ORIG_DFI_IDENT, FieldType.String, 8);
               });
               EFT_DETAIL_RECORD.CreateNewGroup(Names.EFT_CCD_OR_CTX, (EFT_CCD_OR_CTX) =>
               {
                   EFT_CCD_OR_CTX.CreateNewField(Names.EFT_TRANSACTION_CODE, FieldType.String, 2);
                   EFT_CCD_OR_CTX.CreateNewField(Names.EFT_DFI_ACCOUNT_NUMBER, FieldType.String, 17);
                   EFT_CCD_OR_CTX.CreateNewField(Names.EFT_TRANSMITTAL_AMOUNT, FieldType.UnsignedNumeric, 10, null, 2);
                   EFT_CCD_OR_CTX.CreateNewField(Names.EFT_RECEIVING_COMPANY_NAME, FieldType.String, 22);
                   EFT_CCD_OR_CTX.CreateNewField(Names.EFT_TRACE_NUMBER, FieldType.String, 15);
               });
               IGroup EFT_DED_ADDENDUM_local = (IGroup)EFT_DETAIL_RECORD.CreateNewGroup(Names.EFT_DED_ADDENDUM, (EFT_DED_ADDENDUM) =>
               {
                   EFT_DED_ADDENDUM.CreateNewField(Names.EFT_APPLICATION_IDENTIFIER, FieldType.String, 2);
                   EFT_DED_ADDENDUM.CreateNewField(Names.EFT_CASE_IDENTIFIER, FieldType.String, 20);

                   IField EFT_PAY_DATE_local = EFT_DED_ADDENDUM.CreateNewField(Names.EFT_PAY_DATE, FieldType.UnsignedNumeric, 6);
                   EFT_DED_ADDENDUM.CreateNewFieldRedefine(Names.EFT_PAY_DATE_R, FieldType.String, EFT_PAY_DATE_local, 6);
                   EFT_DED_ADDENDUM.CreateNewField(Names.EFT_COLLECTION_AMOUNT, FieldType.UnsignedNumeric, 10, null, 2);
                   EFT_DED_ADDENDUM.CreateNewField(Names.EFT_NON_CUST_PARENT_SSN, FieldType.UnsignedNumeric, 9);
                   EFT_DED_ADDENDUM.CreateNewField(Names.EFT_MEDICAL_SUPP_IND, FieldType.String, 1);
                   EFT_DED_ADDENDUM.CreateNewField(Names.EFT_NON_CUST_PARENT_NAME, FieldType.String, 10);
                   EFT_DED_ADDENDUM.CreateNewField(Names.EFT_FIPS_CODE, FieldType.UnsignedNumeric, 7);
                   EFT_DED_ADDENDUM.CreateNewField(Names.EFT_EMPLOYMENT_TERM_IND, FieldType.String, 1);
               });
               EFT_DETAIL_RECORD.CreateNewGroupRedefine(Names.EFT_DED_ADDENDUM_R, EFT_DED_ADDENDUM_local, (EFT_DED_ADDENDUM_R) =>
               {
                   EFT_DED_ADDENDUM_R.CreateNewField(Names.EFT_AP_ID_ZZ_FOR_FDSO, FieldType.String, 2);
                   EFT_DED_ADDENDUM_R.CreateNewField(Names.EFT_DED_ADDENDUM_SPACES, FieldType.String, 64);
               });
           });

            recordDef.CreateNewGroup(Names.EFT_TRAILER_RECORD, (EFT_TRAILER_RECORD) =>
           {
               EFT_TRAILER_RECORD.CreateNewField(Names.EFT_TRAILER_RECORD_TYPE, FieldType.String, 1);
               EFT_TRAILER_RECORD.CreateNewField(Names.EFT_TOTAL_RECORD_COUNT, FieldType.UnsignedNumeric, 9);
               EFT_TRAILER_RECORD.CreateNewField(Names.EFT_TOTAL_AMOUNT, FieldType.UnsignedNumeric, 11, null, 2);
               EFT_TRAILER_RECORD.CreateNewFillerField(177, FillWith.Hashes);
           });

        }

        protected override string GetRecordName()
        {
            return Names.FileSection;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            IFileHandler FileHandler = InversionContainer.GetImplementingObject<IFileHandler>();

            EFT_INPUT_FILE = FileHandler.GetFile("EFTINPUT");
            EFT_INPUT_FILE.StatusField = WS.EFT_FILE_STATUS;
            EFT_INPUT_FILE.AssociatedBuffer = EFT_INPUT_RECORD;
        }
        #endregion

        #region Constructors
        public SWEXFE97_fd(SWEXFE97_ws ws)
            : base()
        {
            this.WS = ws;
            Initialize();

        }
        #endregion
    }
    #endregion File Section Class
    #region Working Storage Class
    internal class SWEXFE97_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXFE97_ws_WorkingStorage";
            internal const string EFT_FILE_STATUS = "EFT_FILE_STATUS";
            internal const string WS_FDSO_CO_DESCR_DATE = "WS_FDSO_CO_DESCR_DATE";
            internal const string WS_FDSO_CO_DESCR_DATE_R = "WS_FDSO_CO_DESCR_DATE_R";
            internal const string WS_FDSO_CO_DESCR_DATE_R_MM = "WS_FDSO_CO_DESCR_DATE_R_MM";
            internal const string WS_FDSO_CO_DESCR_DATE_R_DD = "WS_FDSO_CO_DESCR_DATE_R_DD";
            internal const string WS_FDSO_CO_DESCR_DATE_R_YY = "WS_FDSO_CO_DESCR_DATE_R_YY";
            internal const string WS_FORMAT_8_DIGIT_DATE = "WS_FORMAT_8_DIGIT_DATE";
            internal const string WS_FORMAT_DATE_CC = "WS_FORMAT_DATE_CC";
            internal const string WS_FORMAT_6_DIGIT_DATE = "WS_FORMAT_6_DIGIT_DATE";
            internal const string WS_FORMAT_DATE_YY = "WS_FORMAT_DATE_YY";
            internal const string WS_FORMAT_DATE_MM_DD = "WS_FORMAT_DATE_MM_DD";
            internal const string WS_FORMAT_6_DIGIT_TIME = "WS_FORMAT_6_DIGIT_TIME";
            internal const string WS_FORMAT_HH_MM = "WS_FORMAT_HH_MM";
            internal const string WS_FORMAT_TIME_SS = "WS_FORMAT_TIME_SS";
        }
        #endregion

        #region Direct-access element properties
        public IField EFT_FILE_STATUS { get { return GetElementByName<IField>(Names.EFT_FILE_STATUS); } }
        public IField WS_FDSO_CO_DESCR_DATE { get { return GetElementByName<IField>(Names.WS_FDSO_CO_DESCR_DATE); } }
        public IGroup WS_FDSO_CO_DESCR_DATE_R { get { return GetElementByName<IGroup>(Names.WS_FDSO_CO_DESCR_DATE_R); } }
        public IField WS_FDSO_CO_DESCR_DATE_R_MM { get { return GetElementByName<IField>(Names.WS_FDSO_CO_DESCR_DATE_R_MM); } }
        public IField WS_FDSO_CO_DESCR_DATE_R_DD { get { return GetElementByName<IField>(Names.WS_FDSO_CO_DESCR_DATE_R_DD); } }
        public IField WS_FDSO_CO_DESCR_DATE_R_YY { get { return GetElementByName<IField>(Names.WS_FDSO_CO_DESCR_DATE_R_YY); } }
        public IGroup WS_FORMAT_8_DIGIT_DATE { get { return GetElementByName<IGroup>(Names.WS_FORMAT_8_DIGIT_DATE); } }
        public IField WS_FORMAT_DATE_CC { get { return GetElementByName<IField>(Names.WS_FORMAT_DATE_CC); } }
        public IGroup WS_FORMAT_6_DIGIT_DATE { get { return GetElementByName<IGroup>(Names.WS_FORMAT_6_DIGIT_DATE); } }
        public IField WS_FORMAT_DATE_YY { get { return GetElementByName<IField>(Names.WS_FORMAT_DATE_YY); } }
        public IField WS_FORMAT_DATE_MM_DD { get { return GetElementByName<IField>(Names.WS_FORMAT_DATE_MM_DD); } }
        public IGroup WS_FORMAT_6_DIGIT_TIME { get { return GetElementByName<IGroup>(Names.WS_FORMAT_6_DIGIT_TIME); } }
        public IField WS_FORMAT_HH_MM { get { return GetElementByName<IField>(Names.WS_FORMAT_HH_MM); } }
        public IField WS_FORMAT_TIME_SS { get { return GetElementByName<IField>(Names.WS_FORMAT_TIME_SS); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.EFT_FILE_STATUS, FieldType.String, 2);

            IField WS_FDSO_CO_DESCR_DATE_local = recordDef.CreateNewField(Names.WS_FDSO_CO_DESCR_DATE, FieldType.UnsignedNumeric, 6);
            recordDef.CreateNewGroupRedefine(Names.WS_FDSO_CO_DESCR_DATE_R, WS_FDSO_CO_DESCR_DATE_local, (WS_FDSO_CO_DESCR_DATE_R) =>
            {
                WS_FDSO_CO_DESCR_DATE_R.CreateNewField(Names.WS_FDSO_CO_DESCR_DATE_R_MM, FieldType.UnsignedNumeric, 2);
                WS_FDSO_CO_DESCR_DATE_R.CreateNewField(Names.WS_FDSO_CO_DESCR_DATE_R_DD, FieldType.UnsignedNumeric, 2);
                WS_FDSO_CO_DESCR_DATE_R.CreateNewField(Names.WS_FDSO_CO_DESCR_DATE_R_YY, FieldType.UnsignedNumeric, 2);
            });

            recordDef.CreateNewGroup(Names.WS_FORMAT_8_DIGIT_DATE, (WS_FORMAT_8_DIGIT_DATE) =>
           {
               WS_FORMAT_8_DIGIT_DATE.CreateNewField(Names.WS_FORMAT_DATE_CC, FieldType.String, 2);
               WS_FORMAT_8_DIGIT_DATE.CreateNewGroup(Names.WS_FORMAT_6_DIGIT_DATE, (WS_FORMAT_6_DIGIT_DATE) =>
               {
                   WS_FORMAT_6_DIGIT_DATE.CreateNewField(Names.WS_FORMAT_DATE_YY, FieldType.String, 2);
                   WS_FORMAT_6_DIGIT_DATE.CreateNewField(Names.WS_FORMAT_DATE_MM_DD, FieldType.String, 4);
               });
           });

            recordDef.CreateNewGroup(Names.WS_FORMAT_6_DIGIT_TIME, (WS_FORMAT_6_DIGIT_TIME) =>
           {
               WS_FORMAT_6_DIGIT_TIME.CreateNewField(Names.WS_FORMAT_HH_MM, FieldType.String, 4);
               WS_FORMAT_6_DIGIT_TIME.CreateNewField(Names.WS_FORMAT_TIME_SS, FieldType.String, 2);
           });

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXFE97_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXFE97_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_1051727583_IA = "A_1051727583_IA";
            internal const string IMPORT_0001EV = "IMPORT_0001EV";
            internal const string EAB_FILE_HANDLING_0001ET = "EAB_FILE_HANDLING_0001ET";
            internal const string ACTION_0001AS = "ACTION_0001AS";
            internal const string ACTION_0001 = "ACTION_0001";
            internal const string ACTION_0001XX = "ACTION_0001XX";
            internal const string W_OA = "W_OA";
            internal const string A_1051727584_OA = "A_1051727584_OA";
            internal const string EXPORT_0002EV = "EXPORT_0002EV";
            internal const string EAB_FILE_HANDLING_0002ET = "EAB_FILE_HANDLING_0002ET";
            internal const string STATUS_0002AS = "STATUS_0002AS";
            internal const string STATUS_0002 = "STATUS_0002";
            internal const string STATUS_0002XX = "STATUS_0002XX";
            internal const string EXPORT_ERROR_0003EV = "EXPORT_ERROR_0003EV";
            internal const string EAB_REPORT_SEND_0003ET = "EAB_REPORT_SEND_0003ET";
            internal const string RPT_DETAIL_0003AS = "RPT_DETAIL_0003AS";
            internal const string RPT_DETAIL_0003 = "RPT_DETAIL_0003";
            internal const string RPT_DETAIL_0003XX = "RPT_DETAIL_0003XX";
            internal const string EXPORT_EFT_HEADER_RECOR_0004EV = "EXPORT_EFT_HEADER_RECOR_0004EV";
            internal const string DATE_WORK_AREA_0004ET = "DATE_WORK_AREA_0004ET";
            internal const string DATE_0004AS = "DATE_0004AS";
            internal const string DATE_0004 = "DATE_0004";
            internal const string DATE_0004XX = "DATE_0004XX";
            internal const string TIME_0004AS = "TIME_0004AS";
            internal const string TIME_0004 = "TIME_0004";
            internal const string TIME_0004XX = "TIME_0004XX";
            internal const string EXPORT_EFT_DETAIL_RECOR_0005EV = "EXPORT_EFT_DETAIL_RECOR_0005EV";
            internal const string ELECTRONIC_FUND_TRANSMI_0005ET = "ELECTRONIC_FUND_TRANSMI_0005ET";
            internal const string PAY_DATE_0005AS = "PAY_DATE_0005AS";
            internal const string PAY_DATE_0005 = "PAY_DATE_0005";
            internal const string PAY_DATE_0005XX = "PAY_DATE_0005XX";
            internal const string TRANSMITTAL_AMOUNT_0005AS = "TRANSMITTAL_AMOUNT_0005AS";
            internal const string TRANSMITTAL_AMOUNT_0005 = "TRANSMITTAL_AMOUNT_0005";
            internal const string TRANSMITTAL_AMOUNT_0005XX = "TRANSMITTAL_AMOUNT_0005XX";
            internal const string AP_SSN_0005AS = "AP_SSN_0005AS";
            internal const string AP_SSN_0005 = "AP_SSN_0005";
            internal const string AP_SSN_0005XX = "AP_SSN_0005XX";
            internal const string MEDICAL_SUPPORT_ID_0005AS = "MEDICAL_SUPPORT_ID_0005AS";
            internal const string MEDICAL_SUPPORT_ID_0005 = "MEDICAL_SUPPORT_ID_0005";
            internal const string MEDICAL_SUPPORT_ID_0005XX = "MEDICAL_SUPPORT_ID_0005XX";
            internal const string AP_NAME_0005AS = "AP_NAME_0005AS";
            internal const string AP_NAME_0005 = "AP_NAME_0005";
            internal const string AP_NAME_0005XX = "AP_NAME_0005XX";
            internal const string FIPS_CODE_0005AS = "FIPS_CODE_0005AS";
            internal const string FIPS_CODE_0005 = "FIPS_CODE_0005";
            internal const string FIPS_CODE_0005XX = "FIPS_CODE_0005XX";
            internal const string EMPLOYMENT_TERMINATION__0006AS = "EMPLOYMENT_TERMINATION__0006AS";
            internal const string EMPLOYMENT_TERMINATION_ID_0006 = "EMPLOYMENT_TERMINATION_ID_0006";
            internal const string EMPLOYMENT_TERMINATION__0006XX = "EMPLOYMENT_TERMINATION__0006XX";
            internal const string SEQUENCE_NUMBER_0006AS = "SEQUENCE_NUMBER_0006AS";
            internal const string SEQUENCE_NUMBER_0006 = "SEQUENCE_NUMBER_0006";
            internal const string SEQUENCE_NUMBER_0006XX = "SEQUENCE_NUMBER_0006XX";
            internal const string REC_DFI_ACT_NUMBER_0007AS = "REC_DFI_ACT_NUMBER_0007AS";
            internal const string REC_DFI_ACT_NUMBER_0007 = "REC_DFI_ACT_NUMBER_0007";
            internal const string REC_DFI_ACT_NUMBER_0007XX = "REC_DFI_ACT_NUMBER_0007XX";
            internal const string TRANSACTION_CODE_0007AS = "TRANSACTION_CODE_0007AS";
            internal const string TRANSACTION_CODE_0007 = "TRANSACTION_CODE_0007";
            internal const string TRANSACTION_CODE_0007XX = "TRANSACTION_CODE_0007XX";
            internal const string CASE_ID_0007AS = "CASE_ID_0007AS";
            internal const string CASE_ID_0007 = "CASE_ID_0007";
            internal const string CASE_ID_0007XX = "CASE_ID_0007XX";
            internal const string COMPANY_NAME_0007AS = "COMPANY_NAME_0007AS";
            internal const string COMPANY_NAME_0007 = "COMPANY_NAME_0007";
            internal const string COMPANY_NAME_0007XX = "COMPANY_NAME_0007XX";
            internal const string ORIGINATING_DFI_IDENTIF_0008AS = "ORIGINATING_DFI_IDENTIF_0008AS";
            internal const string ORIGINATING_DFI_IDENTIFIC_0008 = "ORIGINATING_DFI_IDENTIFIC_0008";
            internal const string ORIGINATING_DFI_IDENTIF_0008XX = "ORIGINATING_DFI_IDENTIF_0008XX";
            internal const string COMPANY_IDENTIFICATION__0009AS = "COMPANY_IDENTIFICATION__0009AS";
            internal const string COMPANY_IDENTIFICATION_IC_0009 = "COMPANY_IDENTIFICATION_IC_0009";
            internal const string COMPANY_IDENTIFICATION__0009XX = "COMPANY_IDENTIFICATION__0009XX";
            internal const string COMPANY_IDENTIFICATION__0010AS = "COMPANY_IDENTIFICATION__0010AS";
            internal const string COMPANY_IDENTIFICATION_NU_0010 = "COMPANY_IDENTIFICATION_NU_0010";
            internal const string COMPANY_IDENTIFICATION__0010XX = "COMPANY_IDENTIFICATION__0010XX";
            internal const string COMPANY_DESCRIPTIVE_DAT_0011AS = "COMPANY_DESCRIPTIVE_DAT_0011AS";
            internal const string COMPANY_DESCRIPTIVE_DATE_0011 = "COMPANY_DESCRIPTIVE_DATE_0011";
            internal const string COMPANY_DESCRIPTIVE_DAT_0011XX = "COMPANY_DESCRIPTIVE_DAT_0011XX";
            internal const string EFFECTIVE_ENTRY_DATE_0011AS = "EFFECTIVE_ENTRY_DATE_0011AS";
            internal const string EFFECTIVE_ENTRY_DATE_0011 = "EFFECTIVE_ENTRY_DATE_0011";
            internal const string EFFECTIVE_ENTRY_DATE_0011XX = "EFFECTIVE_ENTRY_DATE_0011XX";
            internal const string RECEIVING_COMPANY_NAME_0011AS = "RECEIVING_COMPANY_NAME_0011AS";
            internal const string RECEIVING_COMPANY_NAME_0011 = "RECEIVING_COMPANY_NAME_0011";
            internal const string RECEIVING_COMPANY_NAME_0011XX = "RECEIVING_COMPANY_NAME_0011XX";
            internal const string TRACE_NUMBER_0011AS = "TRACE_NUMBER_0011AS";
            internal const string TRACE_NUMBER_0011 = "TRACE_NUMBER_0011";
            internal const string TRACE_NUMBER_0011XX = "TRACE_NUMBER_0011XX";
            internal const string APPLICATION_IDENTIFIER_0011AS = "APPLICATION_IDENTIFIER_0011AS";
            internal const string APPLICATION_IDENTIFIER_0011 = "APPLICATION_IDENTIFIER_0011";
            internal const string APPLICATION_IDENTIFIER_0011XX = "APPLICATION_IDENTIFIER_0011XX";
            internal const string COLLECTION_AMOUNT_0011AS = "COLLECTION_AMOUNT_0011AS";
            internal const string COLLECTION_AMOUNT_0011 = "COLLECTION_AMOUNT_0011";
            internal const string COLLECTION_AMOUNT_0011XX = "COLLECTION_AMOUNT_0011XX";
            internal const string COMPANY_ENTRY_DESCRIPIT_0012AS = "COMPANY_ENTRY_DESCRIPIT_0012AS";
            internal const string COMPANY_ENTRY_DESCRIPITIO_0012 = "COMPANY_ENTRY_DESCRIPITIO_0012";
            internal const string COMPANY_ENTRY_DESCRIPIT_0012XX = "COMPANY_ENTRY_DESCRIPIT_0012XX";
            internal const string EXPORT_EFT_TRAILER_RECO_0013EV = "EXPORT_EFT_TRAILER_RECO_0013EV";
            internal const string IEF_SUPPLIED_0013ET = "IEF_SUPPLIED_0013ET";
            internal const string COUNT_0013AS = "COUNT_0013AS";
            internal const string COUNT_0013 = "COUNT_0013";
            internal const string COUNT_0013XX = "COUNT_0013XX";
            internal const string TOTAL_CURRENCY_0013AS = "TOTAL_CURRENCY_0013AS";
            internal const string TOTAL_CURRENCY_0013 = "TOTAL_CURRENCY_0013";
            internal const string TOTAL_CURRENCY_0013XX = "TOTAL_CURRENCY_0013XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_1051727583_IA { get { return GetElementByName<IGroup>(Names.A_1051727583_IA); } }
        public IGroup IMPORT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_0001EV); } }
        public IGroup EAB_FILE_HANDLING_0001ET { get { return GetElementByName<IGroup>(Names.EAB_FILE_HANDLING_0001ET); } }
        public IField ACTION_0001AS { get { return GetElementByName<IField>(Names.ACTION_0001AS); } }
        public IField ACTION_0001 { get { return GetElementByName<IField>(Names.ACTION_0001); } }
        public IField ACTION_0001XX { get { return GetElementByName<IField>(Names.ACTION_0001XX); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_1051727584_OA { get { return GetElementByName<IGroup>(Names.A_1051727584_OA); } }
        public IGroup EXPORT_0002EV { get { return GetElementByName<IGroup>(Names.EXPORT_0002EV); } }
        public IGroup EAB_FILE_HANDLING_0002ET { get { return GetElementByName<IGroup>(Names.EAB_FILE_HANDLING_0002ET); } }
        public IField STATUS_0002AS { get { return GetElementByName<IField>(Names.STATUS_0002AS); } }
        public IField STATUS_0002 { get { return GetElementByName<IField>(Names.STATUS_0002); } }
        public IField STATUS_0002XX { get { return GetElementByName<IField>(Names.STATUS_0002XX); } }
        public IGroup EXPORT_ERROR_0003EV { get { return GetElementByName<IGroup>(Names.EXPORT_ERROR_0003EV); } }
        public IGroup EAB_REPORT_SEND_0003ET { get { return GetElementByName<IGroup>(Names.EAB_REPORT_SEND_0003ET); } }
        public IField RPT_DETAIL_0003AS { get { return GetElementByName<IField>(Names.RPT_DETAIL_0003AS); } }
        public IField RPT_DETAIL_0003 { get { return GetElementByName<IField>(Names.RPT_DETAIL_0003); } }
        public IField RPT_DETAIL_0003XX { get { return GetElementByName<IField>(Names.RPT_DETAIL_0003XX); } }
        public IGroup EXPORT_EFT_HEADER_RECOR_0004EV { get { return GetElementByName<IGroup>(Names.EXPORT_EFT_HEADER_RECOR_0004EV); } }
        public IGroup DATE_WORK_AREA_0004ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0004ET); } }
        public IField DATE_0004AS { get { return GetElementByName<IField>(Names.DATE_0004AS); } }
        public IField DATE_0004 { get { return GetElementByName<IField>(Names.DATE_0004); } }
        public IField DATE_0004XX { get { return GetElementByName<IField>(Names.DATE_0004XX); } }
        public IField TIME_0004AS { get { return GetElementByName<IField>(Names.TIME_0004AS); } }
        public IField TIME_0004 { get { return GetElementByName<IField>(Names.TIME_0004); } }
        public IField TIME_0004XX { get { return GetElementByName<IField>(Names.TIME_0004XX); } }
        public IGroup EXPORT_EFT_DETAIL_RECOR_0005EV { get { return GetElementByName<IGroup>(Names.EXPORT_EFT_DETAIL_RECOR_0005EV); } }
        public IGroup ELECTRONIC_FUND_TRANSMI_0005ET { get { return GetElementByName<IGroup>(Names.ELECTRONIC_FUND_TRANSMI_0005ET); } }
        public IField PAY_DATE_0005AS { get { return GetElementByName<IField>(Names.PAY_DATE_0005AS); } }
        public IField PAY_DATE_0005 { get { return GetElementByName<IField>(Names.PAY_DATE_0005); } }
        public IField PAY_DATE_0005XX { get { return GetElementByName<IField>(Names.PAY_DATE_0005XX); } }
        public IField TRANSMITTAL_AMOUNT_0005AS { get { return GetElementByName<IField>(Names.TRANSMITTAL_AMOUNT_0005AS); } }
        public IField TRANSMITTAL_AMOUNT_0005 { get { return GetElementByName<IField>(Names.TRANSMITTAL_AMOUNT_0005); } }
        public IField TRANSMITTAL_AMOUNT_0005XX { get { return GetElementByName<IField>(Names.TRANSMITTAL_AMOUNT_0005XX); } }
        public IField AP_SSN_0005AS { get { return GetElementByName<IField>(Names.AP_SSN_0005AS); } }
        public IField AP_SSN_0005 { get { return GetElementByName<IField>(Names.AP_SSN_0005); } }
        public IField AP_SSN_0005XX { get { return GetElementByName<IField>(Names.AP_SSN_0005XX); } }
        public IField MEDICAL_SUPPORT_ID_0005AS { get { return GetElementByName<IField>(Names.MEDICAL_SUPPORT_ID_0005AS); } }
        public IField MEDICAL_SUPPORT_ID_0005 { get { return GetElementByName<IField>(Names.MEDICAL_SUPPORT_ID_0005); } }
        public IField MEDICAL_SUPPORT_ID_0005XX { get { return GetElementByName<IField>(Names.MEDICAL_SUPPORT_ID_0005XX); } }
        public IField AP_NAME_0005AS { get { return GetElementByName<IField>(Names.AP_NAME_0005AS); } }
        public IField AP_NAME_0005 { get { return GetElementByName<IField>(Names.AP_NAME_0005); } }
        public IField AP_NAME_0005XX { get { return GetElementByName<IField>(Names.AP_NAME_0005XX); } }
        public IField FIPS_CODE_0005AS { get { return GetElementByName<IField>(Names.FIPS_CODE_0005AS); } }
        public IField FIPS_CODE_0005 { get { return GetElementByName<IField>(Names.FIPS_CODE_0005); } }
        public IField FIPS_CODE_0005XX { get { return GetElementByName<IField>(Names.FIPS_CODE_0005XX); } }
        public IField EMPLOYMENT_TERMINATION__0006AS { get { return GetElementByName<IField>(Names.EMPLOYMENT_TERMINATION__0006AS); } }
        public IField EMPLOYMENT_TERMINATION_ID_0006 { get { return GetElementByName<IField>(Names.EMPLOYMENT_TERMINATION_ID_0006); } }
        public IField EMPLOYMENT_TERMINATION__0006XX { get { return GetElementByName<IField>(Names.EMPLOYMENT_TERMINATION__0006XX); } }
        public IField SEQUENCE_NUMBER_0006AS { get { return GetElementByName<IField>(Names.SEQUENCE_NUMBER_0006AS); } }
        public IField SEQUENCE_NUMBER_0006 { get { return GetElementByName<IField>(Names.SEQUENCE_NUMBER_0006); } }
        public IField SEQUENCE_NUMBER_0006XX { get { return GetElementByName<IField>(Names.SEQUENCE_NUMBER_0006XX); } }
        public IField REC_DFI_ACT_NUMBER_0007AS { get { return GetElementByName<IField>(Names.REC_DFI_ACT_NUMBER_0007AS); } }
        public IField REC_DFI_ACT_NUMBER_0007 { get { return GetElementByName<IField>(Names.REC_DFI_ACT_NUMBER_0007); } }
        public IField REC_DFI_ACT_NUMBER_0007XX { get { return GetElementByName<IField>(Names.REC_DFI_ACT_NUMBER_0007XX); } }
        public IField TRANSACTION_CODE_0007AS { get { return GetElementByName<IField>(Names.TRANSACTION_CODE_0007AS); } }
        public IField TRANSACTION_CODE_0007 { get { return GetElementByName<IField>(Names.TRANSACTION_CODE_0007); } }
        public IField TRANSACTION_CODE_0007XX { get { return GetElementByName<IField>(Names.TRANSACTION_CODE_0007XX); } }
        public IField CASE_ID_0007AS { get { return GetElementByName<IField>(Names.CASE_ID_0007AS); } }
        public IField CASE_ID_0007 { get { return GetElementByName<IField>(Names.CASE_ID_0007); } }
        public IField CASE_ID_0007XX { get { return GetElementByName<IField>(Names.CASE_ID_0007XX); } }
        public IField COMPANY_NAME_0007AS { get { return GetElementByName<IField>(Names.COMPANY_NAME_0007AS); } }
        public IField COMPANY_NAME_0007 { get { return GetElementByName<IField>(Names.COMPANY_NAME_0007); } }
        public IField COMPANY_NAME_0007XX { get { return GetElementByName<IField>(Names.COMPANY_NAME_0007XX); } }
        public IField ORIGINATING_DFI_IDENTIF_0008AS { get { return GetElementByName<IField>(Names.ORIGINATING_DFI_IDENTIF_0008AS); } }
        public IField ORIGINATING_DFI_IDENTIFIC_0008 { get { return GetElementByName<IField>(Names.ORIGINATING_DFI_IDENTIFIC_0008); } }
        public IField ORIGINATING_DFI_IDENTIF_0008XX { get { return GetElementByName<IField>(Names.ORIGINATING_DFI_IDENTIF_0008XX); } }
        public IField COMPANY_IDENTIFICATION__0009AS { get { return GetElementByName<IField>(Names.COMPANY_IDENTIFICATION__0009AS); } }
        public IField COMPANY_IDENTIFICATION_IC_0009 { get { return GetElementByName<IField>(Names.COMPANY_IDENTIFICATION_IC_0009); } }
        public IField COMPANY_IDENTIFICATION__0009XX { get { return GetElementByName<IField>(Names.COMPANY_IDENTIFICATION__0009XX); } }
        public IField COMPANY_IDENTIFICATION__0010AS { get { return GetElementByName<IField>(Names.COMPANY_IDENTIFICATION__0010AS); } }
        public IField COMPANY_IDENTIFICATION_NU_0010 { get { return GetElementByName<IField>(Names.COMPANY_IDENTIFICATION_NU_0010); } }
        public IField COMPANY_IDENTIFICATION__0010XX { get { return GetElementByName<IField>(Names.COMPANY_IDENTIFICATION__0010XX); } }
        public IField COMPANY_DESCRIPTIVE_DAT_0011AS { get { return GetElementByName<IField>(Names.COMPANY_DESCRIPTIVE_DAT_0011AS); } }
        public IField COMPANY_DESCRIPTIVE_DATE_0011 { get { return GetElementByName<IField>(Names.COMPANY_DESCRIPTIVE_DATE_0011); } }
        public IField COMPANY_DESCRIPTIVE_DAT_0011XX { get { return GetElementByName<IField>(Names.COMPANY_DESCRIPTIVE_DAT_0011XX); } }
        public IField EFFECTIVE_ENTRY_DATE_0011AS { get { return GetElementByName<IField>(Names.EFFECTIVE_ENTRY_DATE_0011AS); } }
        public IField EFFECTIVE_ENTRY_DATE_0011 { get { return GetElementByName<IField>(Names.EFFECTIVE_ENTRY_DATE_0011); } }
        public IField EFFECTIVE_ENTRY_DATE_0011XX { get { return GetElementByName<IField>(Names.EFFECTIVE_ENTRY_DATE_0011XX); } }
        public IField RECEIVING_COMPANY_NAME_0011AS { get { return GetElementByName<IField>(Names.RECEIVING_COMPANY_NAME_0011AS); } }
        public IField RECEIVING_COMPANY_NAME_0011 { get { return GetElementByName<IField>(Names.RECEIVING_COMPANY_NAME_0011); } }
        public IField RECEIVING_COMPANY_NAME_0011XX { get { return GetElementByName<IField>(Names.RECEIVING_COMPANY_NAME_0011XX); } }
        public IField TRACE_NUMBER_0011AS { get { return GetElementByName<IField>(Names.TRACE_NUMBER_0011AS); } }
        public IField TRACE_NUMBER_0011 { get { return GetElementByName<IField>(Names.TRACE_NUMBER_0011); } }
        public IField TRACE_NUMBER_0011XX { get { return GetElementByName<IField>(Names.TRACE_NUMBER_0011XX); } }
        public IField APPLICATION_IDENTIFIER_0011AS { get { return GetElementByName<IField>(Names.APPLICATION_IDENTIFIER_0011AS); } }
        public IField APPLICATION_IDENTIFIER_0011 { get { return GetElementByName<IField>(Names.APPLICATION_IDENTIFIER_0011); } }
        public IField APPLICATION_IDENTIFIER_0011XX { get { return GetElementByName<IField>(Names.APPLICATION_IDENTIFIER_0011XX); } }
        public IField COLLECTION_AMOUNT_0011AS { get { return GetElementByName<IField>(Names.COLLECTION_AMOUNT_0011AS); } }
        public IField COLLECTION_AMOUNT_0011 { get { return GetElementByName<IField>(Names.COLLECTION_AMOUNT_0011); } }
        public IField COLLECTION_AMOUNT_0011XX { get { return GetElementByName<IField>(Names.COLLECTION_AMOUNT_0011XX); } }
        public IField COMPANY_ENTRY_DESCRIPIT_0012AS { get { return GetElementByName<IField>(Names.COMPANY_ENTRY_DESCRIPIT_0012AS); } }
        public IField COMPANY_ENTRY_DESCRIPITIO_0012 { get { return GetElementByName<IField>(Names.COMPANY_ENTRY_DESCRIPITIO_0012); } }
        public IField COMPANY_ENTRY_DESCRIPIT_0012XX { get { return GetElementByName<IField>(Names.COMPANY_ENTRY_DESCRIPIT_0012XX); } }
        public IGroup EXPORT_EFT_TRAILER_RECO_0013EV { get { return GetElementByName<IGroup>(Names.EXPORT_EFT_TRAILER_RECO_0013EV); } }
        public IGroup IEF_SUPPLIED_0013ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0013ET); } }
        public IField COUNT_0013AS { get { return GetElementByName<IField>(Names.COUNT_0013AS); } }
        public IField COUNT_0013 { get { return GetElementByName<IField>(Names.COUNT_0013); } }
        public IField COUNT_0013XX { get { return GetElementByName<IField>(Names.COUNT_0013XX); } }
        public IField TOTAL_CURRENCY_0013AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0013AS); } }
        public IField TOTAL_CURRENCY_0013 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0013); } }
        public IField TOTAL_CURRENCY_0013XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0013XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_1051727583_IA, (A_1051727583_IA) =>
               {
                   A_1051727583_IA.CreateNewGroup(Names.IMPORT_0001EV, (IMPORT_0001EV) =>
                   {
                       IMPORT_0001EV.CreateNewGroup(Names.EAB_FILE_HANDLING_0001ET, (EAB_FILE_HANDLING_0001ET) =>
                       {
                           EAB_FILE_HANDLING_0001ET.CreateNewField(Names.ACTION_0001AS, FieldType.String, 1);

                           IField ACTION_0001_local = EAB_FILE_HANDLING_0001ET.CreateNewField(Names.ACTION_0001, FieldType.String, 8);
                           EAB_FILE_HANDLING_0001ET.CreateNewFieldRedefine(Names.ACTION_0001XX, FieldType.String, ACTION_0001_local, 8);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_1051727584_OA, (A_1051727584_OA) =>
               {
                   A_1051727584_OA.CreateNewGroup(Names.EXPORT_0002EV, (EXPORT_0002EV) =>
                   {
                       EXPORT_0002EV.CreateNewGroup(Names.EAB_FILE_HANDLING_0002ET, (EAB_FILE_HANDLING_0002ET) =>
                       {
                           EAB_FILE_HANDLING_0002ET.CreateNewField(Names.STATUS_0002AS, FieldType.String, 1);

                           IField STATUS_0002_local = EAB_FILE_HANDLING_0002ET.CreateNewField(Names.STATUS_0002, FieldType.String, 8);
                           EAB_FILE_HANDLING_0002ET.CreateNewFieldRedefine(Names.STATUS_0002XX, FieldType.String, STATUS_0002_local, 8);
                       });
                   });
                   A_1051727584_OA.CreateNewGroup(Names.EXPORT_ERROR_0003EV, (EXPORT_ERROR_0003EV) =>
                   {
                       EXPORT_ERROR_0003EV.CreateNewGroup(Names.EAB_REPORT_SEND_0003ET, (EAB_REPORT_SEND_0003ET) =>
                       {
                           EAB_REPORT_SEND_0003ET.CreateNewField(Names.RPT_DETAIL_0003AS, FieldType.String, 1);

                           IField RPT_DETAIL_0003_local = EAB_REPORT_SEND_0003ET.CreateNewField(Names.RPT_DETAIL_0003, FieldType.String, 132);
                           EAB_REPORT_SEND_0003ET.CreateNewFieldRedefine(Names.RPT_DETAIL_0003XX, FieldType.String, RPT_DETAIL_0003_local, 132);
                       });
                   });
                   A_1051727584_OA.CreateNewGroup(Names.EXPORT_EFT_HEADER_RECOR_0004EV, (EXPORT_EFT_HEADER_RECOR_0004EV) =>
                   {
                       EXPORT_EFT_HEADER_RECOR_0004EV.CreateNewGroup(Names.DATE_WORK_AREA_0004ET, (DATE_WORK_AREA_0004ET) =>
                       {
                           DATE_WORK_AREA_0004ET.CreateNewField(Names.DATE_0004AS, FieldType.String, 1);

                           IField DATE_0004_local = DATE_WORK_AREA_0004ET.CreateNewField(Names.DATE_0004, FieldType.SignedNumeric, 8);
                           DATE_WORK_AREA_0004ET.CreateNewFieldRedefine(Names.DATE_0004XX, FieldType.String, DATE_0004_local, 8);
                           DATE_WORK_AREA_0004ET.CreateNewField(Names.TIME_0004AS, FieldType.String, 1);

                           IField TIME_0004_local = DATE_WORK_AREA_0004ET.CreateNewField(Names.TIME_0004, FieldType.SignedNumeric, 6);
                           DATE_WORK_AREA_0004ET.CreateNewFieldRedefine(Names.TIME_0004XX, FieldType.String, TIME_0004_local, 6);
                       });
                   });
                   A_1051727584_OA.CreateNewGroup(Names.EXPORT_EFT_DETAIL_RECOR_0005EV, (EXPORT_EFT_DETAIL_RECOR_0005EV) =>
                   {
                       EXPORT_EFT_DETAIL_RECOR_0005EV.CreateNewGroup(Names.ELECTRONIC_FUND_TRANSMI_0005ET, (ELECTRONIC_FUND_TRANSMI_0005ET) =>
                       {
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.PAY_DATE_0005AS, FieldType.String, 1);

                           IField PAY_DATE_0005_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.PAY_DATE_0005, FieldType.SignedNumeric, 8);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.PAY_DATE_0005XX, FieldType.String, PAY_DATE_0005_local, 8);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.TRANSMITTAL_AMOUNT_0005AS, FieldType.String, 1);

                           IField TRANSMITTAL_AMOUNT_0005_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.TRANSMITTAL_AMOUNT_0005, FieldType.SignedNumeric, 10, null, 2);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.TRANSMITTAL_AMOUNT_0005XX, FieldType.String, TRANSMITTAL_AMOUNT_0005_local, 10);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.AP_SSN_0005AS, FieldType.String, 1);

                           IField AP_SSN_0005_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.AP_SSN_0005, FieldType.SignedNumeric, 9);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.AP_SSN_0005XX, FieldType.String, AP_SSN_0005_local, 9);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.MEDICAL_SUPPORT_ID_0005AS, FieldType.String, 1);

                           IField MEDICAL_SUPPORT_ID_0005_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.MEDICAL_SUPPORT_ID_0005, FieldType.String, 1);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.MEDICAL_SUPPORT_ID_0005XX, FieldType.String, MEDICAL_SUPPORT_ID_0005_local, 1);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.AP_NAME_0005AS, FieldType.String, 1);

                           IField AP_NAME_0005_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.AP_NAME_0005, FieldType.String, 10);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.AP_NAME_0005XX, FieldType.String, AP_NAME_0005_local, 10);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.FIPS_CODE_0005AS, FieldType.String, 1);

                           IField FIPS_CODE_0005_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.FIPS_CODE_0005, FieldType.SignedNumeric, 7);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.FIPS_CODE_0005XX, FieldType.String, FIPS_CODE_0005_local, 7);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.EMPLOYMENT_TERMINATION__0006AS, FieldType.String, 1);

                           IField EMPLOYMENT_TERMINATION_ID_0006_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.EMPLOYMENT_TERMINATION_ID_0006, FieldType.String, 1);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.EMPLOYMENT_TERMINATION__0006XX, FieldType.String, EMPLOYMENT_TERMINATION_ID_0006_local, 1);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.SEQUENCE_NUMBER_0006AS, FieldType.String, 1);

                           IField SEQUENCE_NUMBER_0006_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.SEQUENCE_NUMBER_0006, FieldType.SignedNumeric, 9);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.SEQUENCE_NUMBER_0006XX, FieldType.String, SEQUENCE_NUMBER_0006_local, 9);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.REC_DFI_ACT_NUMBER_0007AS, FieldType.String, 1);

                           IField REC_DFI_ACT_NUMBER_0007_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.REC_DFI_ACT_NUMBER_0007, FieldType.String, 17);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.REC_DFI_ACT_NUMBER_0007XX, FieldType.String, REC_DFI_ACT_NUMBER_0007_local, 17);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.TRANSACTION_CODE_0007AS, FieldType.String, 1);

                           IField TRANSACTION_CODE_0007_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.TRANSACTION_CODE_0007, FieldType.String, 2);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.TRANSACTION_CODE_0007XX, FieldType.String, TRANSACTION_CODE_0007_local, 2);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.CASE_ID_0007AS, FieldType.String, 1);

                           IField CASE_ID_0007_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.CASE_ID_0007, FieldType.String, 20);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.CASE_ID_0007XX, FieldType.String, CASE_ID_0007_local, 20);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COMPANY_NAME_0007AS, FieldType.String, 1);

                           IField COMPANY_NAME_0007_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COMPANY_NAME_0007, FieldType.String, 16);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.COMPANY_NAME_0007XX, FieldType.String, COMPANY_NAME_0007_local, 16);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.ORIGINATING_DFI_IDENTIF_0008AS, FieldType.String, 1);

                           IField ORIGINATING_DFI_IDENTIFIC_0008_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.ORIGINATING_DFI_IDENTIFIC_0008, FieldType.SignedNumeric, 8);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.ORIGINATING_DFI_IDENTIF_0008XX, FieldType.String, ORIGINATING_DFI_IDENTIFIC_0008_local, 8);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COMPANY_IDENTIFICATION__0009AS, FieldType.String, 1);

                           IField COMPANY_IDENTIFICATION_IC_0009_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COMPANY_IDENTIFICATION_IC_0009, FieldType.String, 1);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.COMPANY_IDENTIFICATION__0009XX, FieldType.String, COMPANY_IDENTIFICATION_IC_0009_local, 1);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COMPANY_IDENTIFICATION__0010AS, FieldType.String, 1);

                           IField COMPANY_IDENTIFICATION_NU_0010_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COMPANY_IDENTIFICATION_NU_0010, FieldType.String, 9);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.COMPANY_IDENTIFICATION__0010XX, FieldType.String, COMPANY_IDENTIFICATION_NU_0010_local, 9);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COMPANY_DESCRIPTIVE_DAT_0011AS, FieldType.String, 1);

                           IField COMPANY_DESCRIPTIVE_DATE_0011_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COMPANY_DESCRIPTIVE_DATE_0011, FieldType.SignedNumeric, 8);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.COMPANY_DESCRIPTIVE_DAT_0011XX, FieldType.String, COMPANY_DESCRIPTIVE_DATE_0011_local, 8);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.EFFECTIVE_ENTRY_DATE_0011AS, FieldType.String, 1);

                           IField EFFECTIVE_ENTRY_DATE_0011_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.EFFECTIVE_ENTRY_DATE_0011, FieldType.SignedNumeric, 8);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.EFFECTIVE_ENTRY_DATE_0011XX, FieldType.String, EFFECTIVE_ENTRY_DATE_0011_local, 8);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.RECEIVING_COMPANY_NAME_0011AS, FieldType.String, 1);

                           IField RECEIVING_COMPANY_NAME_0011_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.RECEIVING_COMPANY_NAME_0011, FieldType.String, 22);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.RECEIVING_COMPANY_NAME_0011XX, FieldType.String, RECEIVING_COMPANY_NAME_0011_local, 22);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.TRACE_NUMBER_0011AS, FieldType.String, 1);

                           IField TRACE_NUMBER_0011_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.TRACE_NUMBER_0011, FieldType.SignedNumeric, 15);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.TRACE_NUMBER_0011XX, FieldType.String, TRACE_NUMBER_0011_local, 15);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.APPLICATION_IDENTIFIER_0011AS, FieldType.String, 1);

                           IField APPLICATION_IDENTIFIER_0011_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.APPLICATION_IDENTIFIER_0011, FieldType.String, 2);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.APPLICATION_IDENTIFIER_0011XX, FieldType.String, APPLICATION_IDENTIFIER_0011_local, 2);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COLLECTION_AMOUNT_0011AS, FieldType.String, 1);

                           IField COLLECTION_AMOUNT_0011_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COLLECTION_AMOUNT_0011, FieldType.SignedNumeric, 10, null, 2);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.COLLECTION_AMOUNT_0011XX, FieldType.String, COLLECTION_AMOUNT_0011_local, 10);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COMPANY_ENTRY_DESCRIPIT_0012AS, FieldType.String, 1);

                           IField COMPANY_ENTRY_DESCRIPITIO_0012_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.COMPANY_ENTRY_DESCRIPITIO_0012, FieldType.String, 10);
                           ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.COMPANY_ENTRY_DESCRIPIT_0012XX, FieldType.String, COMPANY_ENTRY_DESCRIPITIO_0012_local, 10);
                       });
                   });
                   A_1051727584_OA.CreateNewGroup(Names.EXPORT_EFT_TRAILER_RECO_0013EV, (EXPORT_EFT_TRAILER_RECO_0013EV) =>
                   {
                       EXPORT_EFT_TRAILER_RECO_0013EV.CreateNewGroup(Names.IEF_SUPPLIED_0013ET, (IEF_SUPPLIED_0013ET) =>
                       {
                           IEF_SUPPLIED_0013ET.CreateNewField(Names.COUNT_0013AS, FieldType.String, 1);

                           IField COUNT_0013_local = IEF_SUPPLIED_0013ET.CreateNewField(Names.COUNT_0013, FieldType.SignedNumeric, 9);
                           IEF_SUPPLIED_0013ET.CreateNewFieldRedefine(Names.COUNT_0013XX, FieldType.String, COUNT_0013_local, 9);
                           IEF_SUPPLIED_0013ET.CreateNewField(Names.TOTAL_CURRENCY_0013AS, FieldType.String, 1);

                           IField TOTAL_CURRENCY_0013_local = IEF_SUPPLIED_0013ET.CreateNewField(Names.TOTAL_CURRENCY_0013, FieldType.SignedNumeric, 15, null, 2);
                           IEF_SUPPLIED_0013ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0013XX, FieldType.String, TOTAL_CURRENCY_0013_local, 15);
                       });
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(W_IA, args, 2);
            SetPassedParm(W_OA, args, 3);
            SetPassedParm(PSMGR_EAB_DATA, args, 4);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(W_IA, args, 2);
            SetReturnParm(W_OA, args, 3);
            SetReturnParm(PSMGR_EAB_DATA, args, 4);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXFE97 : EABBase
    {

        #region Public Constructors
        public SWEXFE97()
            : base()
        {
            this.ProgramName.SetValue("SWEXFE97");

            WS = new SWEXFE97_ws();
            FD = new SWEXFE97_fd(WS);
            LS = new SWEXFE97_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXFE97_ws WS;

        //==== File Data Class ========================================
        private SWEXFE97_fd FD;

        //==== Linkage Section Data Class ========================================
        private SWEXFE97_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_1051727580(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_1051727580
        /// </summary>
        private void M_MAIN_1051727580(string returnMethod = "")
        {
            M_PARA_1051727580_INIT("M_PARA_1051727580_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-1051727580-INIT THRU PARA-1051727580-INIT-EXIT
            M_PARA_1051727580("M_PARA_1051727580_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-1051727580 THRU PARA-1051727580-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_1051727580
        /// </summary>
        private void M_PARA_1051727580(string returnMethod = "")
        {
            if (returnMethod != "" && returnMethod != "M_PARA_1051727580") { M_0000_EAB_CODE_MAIN(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_EAB_CODE_MAIN
        /// </summary>
        /// <remarks>
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:  THERE ARE 2 TYPES OF ERRORS THAT ARE RETURNED FROM THIS PROGRAM.
        ///COMMENT:    1.  FATAL ERROR - IF THE STATUS-0002 FIELD CONTAINS A VALUE
        ///COMMENT:        OTHER THAN "OK" THE PROGRAM SHOULD ABEND.
        ///COMMENT:    2.  RECORD ERROR - IF RPT-DETAIL-0003 CONTAINS A VALUE THEN
        ///COMMENT:        THERE IS AN ERROR WITH THE CURRENT EFT RECORD.  THE ERROR
        ///COMMENT:        SHOULD BE WRITTEN OUT AND THE RECORD SHOULD BE WRITTEN
        ///COMMENT:        OUT IN PLACED IN A "PEND" STATUS.  AND PROCESSING SHOULD
        ///COMMENT:        CONTINUE WITH THE REST OF THE EFT RECORDS.
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        /// </remarks>
        private void M_0000_EAB_CODE_MAIN(string returnMethod = "")
        {
            LS.STATUS_0002.SetValue("OK");                                                                      //COBOL==> MOVE 'OK' TO STATUS-0002.
                                                                                                                // EvaluateList !LS.ACTION_0001!                                                                    //COBOL==> EVALUATE ACTION-0001
            if ((LS.ACTION_0001.IsEqualTo("OPEN")))                                                             //COBOL==> WHEN 'OPEN'
            {
                M_1000_OPEN_FILE(); if (Control.ExitProgram) { return; }                                              //COBOL==> PERFORM 1000-OPEN-FILE
            }                                                                                                //COBOL==> WHEN 'READ'
            else
            if ((LS.ACTION_0001.IsEqualTo("READ")))
            {
                M_2000_READ_FILE(); if (Control.ExitProgram) { return; }                                              //COBOL==> PERFORM 2000-READ-FILE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.STATUS_0002.SetValue("BAD ACTN");                                                                //COBOL==> MOVE 'BAD ACTN' TO STATUS-0002
                DisplayToLog("EXTERNAL CALLED W/ ACTION OTHER THAN OPEN" + " OR READ");                             //COBOL==> DISPLAY 'EXTERNAL CALLED W/ ACTION OTHER THAN OPEN' ' OR READ'
                LS.RPT_DETAIL_0003.SetValue("EXT CALLED W/ ACTION OTHER THAN OPEN OR READ");                        //COBOL==> MOVE 'EXT CALLED W/ ACTION OTHER THAN OPEN OR READ' TO RPT-DETAIL-0003
            }                                                                                                   //COBOL==> END-EVALUATE
            M_9999_FINISHED(CheckGotoReturn(returnMethod)); return;                                             //COBOL==> GO TO 9999-FINISHED.
        }
        /// <summary>
        /// Method M_1000_OPEN_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT: ***************
        /// </remarks>
        private void M_1000_OPEN_FILE(string returnMethod = "")
        {
            //COMMENT: ***************
            DisplayToLog("SWEXFE97 (PROCESS UMB INBOUND EFT FILE)" + " last changed 01-06-2000.");              //COBOL==> DISPLAY 'SWEXFE97 (PROCESS UMB INBOUND EFT FILE)' , ' last changed 01-06-2000.'.
            FD.EFT_INPUT_FILE.OpenFile(FileAccessMode.Read);                                                    //COBOL==> OPEN INPUT EFT-INPUT-FILE
            if (WS.EFT_FILE_STATUS.IsEqualTo("00"))                                                             //COBOL==> IF EFT-FILE-STATUS = '00'
            {
                FD.EFT_INPUT_FILE.ReadLine();                                                                       //COBOL==> READ EFT-INPUT-FILE
                DisplayToLog(FD.EFT_INPUT_RECORD.AsString());                                                       //COBOL==> DISPLAY EFT-INPUT-RECORD
                if (WS.EFT_FILE_STATUS.IsEqualTo("00"))                                                             //COBOL==> IF EFT-FILE-STATUS = '00'
                {
                    if (FD.EFT_HEADER_RECORD_TYPE.IsEqualTo(1))                                                         //COBOL==> IF EFT-HEADER-RECORD-TYPE = 1
                    {
                        LS.DATE_0004XX.SetValue(FD.EFT_FILE_CREATION_DATE);                                                 //COBOL==> MOVE EFT-FILE-CREATION-DATE TO DATE-0004XX
                        WS.WS_FORMAT_HH_MM.SetValue(FD.EFT_FILE_CREATION_TIME);                                             //COBOL==> MOVE EFT-FILE-CREATION-TIME TO WS-FORMAT-HH-MM
                        WS.WS_FORMAT_TIME_SS.SetValue("00");                                                                //COBOL==> MOVE '00' TO WS-FORMAT-TIME-SS
                        LS.TIME_0004XX.SetValue(WS.WS_FORMAT_6_DIGIT_TIME);                                                 //COBOL==> MOVE WS-FORMAT-6-DIGIT-TIME TO TIME-0004XX
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        DisplayToLog("FIRST EFT FILE RECORD MUST BE A HEADER REC ");                                        //COBOL==> DISPLAY 'FIRST EFT FILE RECORD MUST BE A HEADER REC '
                        LS.STATUS_0002.SetValue("REC TYPE");                                                                //COBOL==> MOVE 'REC TYPE' TO STATUS-0002
                        LS.RPT_DETAIL_0003.SetValue("FIRST EFT FILE RECORD MUST BE A HEADER REC ");                         //COBOL==> MOVE 'FIRST EFT FILE RECORD MUST BE A HEADER REC ' TO RPT-DETAIL-0003
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    DisplayToLog("STATUS ON READING EFT FILE HEADER RECORD = " + WS.EFT_FILE_STATUS.AsString());        //COBOL==> DISPLAY 'STATUS ON READING EFT FILE HEADER RECORD = ' EFT-FILE-STATUS
                    DisplayToLog("EMPTY FILE.");                                                                        //COBOL==> DISPLAY 'EMPTY FILE.'
                    LS.STATUS_0002.SetValue(WS.EFT_FILE_STATUS);                                                        //COBOL==> MOVE EFT-FILE-STATUS TO STATUS-0002
                    LS.RPT_DETAIL_0003.SetValue("ERROR: EMPTY EFT INPUT FILE ");                                        //COBOL==> MOVE 'ERROR: EMPTY EFT INPUT FILE ' TO RPT-DETAIL-0003
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                DisplayToLog("STATUS ON OPENING EFT FILE = " + WS.EFT_FILE_STATUS.AsString());                      //COBOL==> DISPLAY 'STATUS ON OPENING EFT FILE = ' EFT-FILE-STATUS
                LS.STATUS_0002.SetValue(WS.EFT_FILE_STATUS);                                                        //COBOL==> MOVE EFT-FILE-STATUS TO STATUS-0002
                LS.RPT_DETAIL_0003.SetValue("STATUS ON OPENING EFT FILE = ");                                       //COBOL==> MOVE 'STATUS ON OPENING EFT FILE = ' TO RPT-DETAIL-0003
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1000_OPEN_FILE") { M_2000_READ_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_READ_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT: ***************
        /// </remarks>
        private void M_2000_READ_FILE(string returnMethod = "")
        {
            //COMMENT: ***************
            FD.EFT_INPUT_FILE.ReadLine();                                                                       //COBOL==> READ EFT-INPUT-FILE
                                                                                                                // EvaluateList !WS.EFT_FILE_STATUS!                                                                //COBOL==> EVALUATE EFT-FILE-STATUS
            if ((WS.EFT_FILE_STATUS.IsEqualTo("00")))                                                           //COBOL==> WHEN '00'
            {
                // EvaluateList !FD.EFT_DETAIL_RECORD_TYPE!                                                         //COBOL==> EVALUATE EFT-DETAIL-RECORD-TYPE
                if ((FD.EFT_DETAIL_RECORD_TYPE.IsEqualTo(2)))                                                       //COBOL==> WHEN 2
                {
                    M_2100_MOVE_DETAIL_FIELDS(); if (Control.ExitProgram) { return; }                                     //COBOL==> PERFORM 2100-MOVE-DETAIL-FIELDS
                }                                                                                                //COBOL==> WHEN 9
                else
                if ((FD.EFT_DETAIL_RECORD_TYPE.IsEqualTo(9)))
                {
                    M_2200_MOVE_TRAILER_FIELDS(); if (Control.ExitProgram) { return; }                                    //COBOL==> PERFORM 2200-MOVE-TRAILER-FIELDS
                }                                                                                                //COBOL==> WHEN OTHER
                else
                {
                    M_2300_RECORD_TYPE_ERROR(); if (Control.ExitProgram) { return; }                                      //COBOL==> PERFORM 2300-RECORD-TYPE-ERROR
                }                                                                                                   //COBOL==> END-EVALUATE
            }                                                                                                //COBOL==> WHEN '10'
            else
            if ((WS.EFT_FILE_STATUS.IsEqualTo("10")))
            {
                LS.STATUS_0002.SetValue("NO TRLR");                                                                 //COBOL==> MOVE 'NO TRLR' TO STATUS-0002
                DisplayToLog("EOF ENCOUNTERED WITHOUT A TRAILER REC");                                              //COBOL==> DISPLAY 'EOF ENCOUNTERED WITHOUT A TRAILER REC'
                LS.RPT_DETAIL_0003.SetValue("EOF ENCOUNTERED WITHOUT A TRAILER REC");                               //COBOL==> MOVE 'EOF ENCOUNTERED WITHOUT A TRAILER REC' TO RPT-DETAIL-0003
                M_3000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 3000-CLOSE-FILE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.STATUS_0002.SetValue(WS.EFT_FILE_STATUS);                                                        //COBOL==> MOVE EFT-FILE-STATUS TO STATUS-0002
                DisplayToLog("STATUS ERROR ON READING EFT FILE = " + WS.EFT_FILE_STATUS.AsString());                //COBOL==> DISPLAY 'STATUS ERROR ON READING EFT FILE = ' EFT-FILE-STATUS
                LS.RPT_DETAIL_0003.SetValue("STATUS ERROR ON READING EFT FILE ");                                   //COBOL==> MOVE 'STATUS ERROR ON READING EFT FILE ' TO RPT-DETAIL-0003
                M_3000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 3000-CLOSE-FILE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_2000_READ_FILE") { M_2100_MOVE_DETAIL_FIELDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2100_MOVE_DETAIL_FIELDS
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************
        /// </remarks>
        private void M_2100_MOVE_DETAIL_FIELDS(string returnMethod = "")
        {
            //COMMENT: ****************
            DisplayToLog(" ");                                                                                  //COBOL==> DISPLAY ' '.
            DisplayToLog(FD.EFT_COMPANY_HEADER.AsString());                                                     //COBOL==> DISPLAY EFT-COMPANY-HEADER.
            DisplayToLog(FD.EFT_CCD_OR_CTX.AsString());                                                         //COBOL==> DISPLAY EFT-CCD-OR-CTX.
            DisplayToLog(FD.EFT_DED_ADDENDUM.AsString());                                                       //COBOL==> DISPLAY EFT-DED-ADDENDUM.
            LS.SEQUENCE_NUMBER_0006.SetValue(FD.EFT_SEQUENCE_NUMBER);                                           //COBOL==> MOVE EFT-SEQUENCE-NUMBER TO SEQUENCE-NUMBER-0006.
            LS.COMPANY_NAME_0007.SetValue(FD.EFT_COMPANY_NAME);                                                 //COBOL==> MOVE EFT-COMPANY-NAME TO COMPANY-NAME-0007.
            LS.COMPANY_IDENTIFICATION_IC_0009.SetValue(FD.EFT_COMPANY_IDENT_ICD);                               //COBOL==> MOVE EFT-COMPANY-IDENT-ICD TO COMPANY-IDENTIFICATION-IC-0009.
            LS.COMPANY_IDENTIFICATION_NU_0010.SetValue(FD.EFT_COMPANY_IDENT_NUM);                               //COBOL==> MOVE EFT-COMPANY-IDENT-NUM TO COMPANY-IDENTIFICATION-NU-0010.
            LS.COMPANY_ENTRY_DESCRIPITIO_0012.SetValue(FD.EFT_COMPANY_ENTRY_DESCR);                             //COBOL==> MOVE EFT-COMPANY-ENTRY-DESCR TO COMPANY-ENTRY-DESCRIPITIO-0012.
            if ((FD.EFT_APPLICATION_IDENTIFIER.IsEqualTo("ZZ"))
             && (FD.EFT_DED_ADDENDUM_SPACES.IsSpaces()))  //COBOL==> IF EFT-APPLICATION-IDENTIFIER = 'ZZ' AND EFT-DED-ADDENDUM-SPACES = SPACES
            {
                WS.WS_FDSO_CO_DESCR_DATE.SetValue(FD.EFT_COMPANY_DESCR_DATE);                                       //COBOL==> MOVE EFT-COMPANY-DESCR-DATE TO WS-FDSO-CO-DESCR-DATE
                FD.EFT_CO_DESCR_DATE_R_YY.SetValue(WS.WS_FDSO_CO_DESCR_DATE_R_YY);                                  //COBOL==> MOVE WS-FDSO-CO-DESCR-DATE-R-YY TO EFT-CO-DESCR-DATE-R-YY
                FD.EFT_CO_DESCR_DATE_R_MM.SetValue(WS.WS_FDSO_CO_DESCR_DATE_R_MM);                                  //COBOL==> MOVE WS-FDSO-CO-DESCR-DATE-R-MM TO EFT-CO-DESCR-DATE-R-MM
                FD.EFT_CO_DESCR_DATE_R_DD.SetValue(WS.WS_FDSO_CO_DESCR_DATE_R_DD);                                  //COBOL==> MOVE WS-FDSO-CO-DESCR-DATE-R-DD TO EFT-CO-DESCR-DATE-R-DD
            }                                                                                                   //COBOL==> END-IF.
            if (!(FD.EFT_COMPANY_DESCR_DATE.IsNumericValue()))                                                 //COBOL==> IF EFT-COMPANY-DESCR-DATE IS NOT NUMERIC
            {
                LS.COMPANY_DESCRIPTIVE_DATE_0011.SetValue(00010101);                                                //COBOL==> MOVE 00010101 TO COMPANY-DESCRIPTIVE-DATE-0011
                DisplayToLog("CO. DESCR DATE NOT NUMERIC " + FD.EFT_COMPANY_DESCR_DATE.AsString());                 //COBOL==> DISPLAY 'CO. DESCR DATE NOT NUMERIC ' EFT-COMPANY-DESCR-DATE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(0))                                                         //COBOL==> IF EFT-CO-DESCR-DATE-R-MM = 0
                {
                    LS.COMPANY_DESCRIPTIVE_DATE_0011.SetValue(00010101);                                                //COBOL==> MOVE 00010101 TO COMPANY-DESCRIPTIVE-DATE-0011
                    DisplayToLog("CO. DESCR DATE MM = 0 " + FD.EFT_COMPANY_DESCR_DATE.AsString());                      //COBOL==> DISPLAY 'CO. DESCR DATE MM = 0 ' EFT-COMPANY-DESCR-DATE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (FD.EFT_CO_DESCR_DATE_R_DD.IsEqualTo(0))                                                         //COBOL==> IF EFT-CO-DESCR-DATE-R-DD = 0
                    {
                        LS.COMPANY_DESCRIPTIVE_DATE_0011.SetValue(00010101);                                                //COBOL==> MOVE 00010101 TO COMPANY-DESCRIPTIVE-DATE-0011
                        DisplayToLog("CO. DESCR DATE DD = 0 " + FD.EFT_COMPANY_DESCR_DATE.AsString());                      //COBOL==> DISPLAY 'CO. DESCR DATE DD = 0 ' EFT-COMPANY-DESCR-DATE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if (FD.EFT_CO_DESCR_DATE_R_MM.IsGreaterThan(13))                                                    //COBOL==> IF EFT-CO-DESCR-DATE-R-MM > 13
                        {
                            LS.COMPANY_DESCRIPTIVE_DATE_0011.SetValue(00010101);                                                //COBOL==> MOVE 00010101 TO COMPANY-DESCRIPTIVE-DATE-0011
                            DisplayToLog("CO. DESCR DATE MM > 13 " + FD.EFT_COMPANY_DESCR_DATE.AsString());                     //COBOL==> DISPLAY 'CO. DESCR DATE MM > 13 ' EFT-COMPANY-DESCR-DATE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (((((((FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(1))
             || (FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(3)))
             || (FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(5)))
             || (FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(7)))
             || (FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(8)))
             || (FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(10)))
             || (FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(12)))  //COBOL==> IF EFT-CO-DESCR-DATE-R-MM = ( 1 OR 3 OR 5 OR 7 OR 8 OR 10 OR 12 )
                            {
                                if (FD.EFT_CO_DESCR_DATE_R_DD.IsGreaterThan(31))                                                    //COBOL==> IF EFT-CO-DESCR-DATE-R-DD > 31
                                {
                                    LS.COMPANY_DESCRIPTIVE_DATE_0011.SetValue(00010101);                                                //COBOL==> MOVE 00010101 TO COMPANY-DESCRIPTIVE-DATE-0011
                                    DisplayToLog("CO. DESCR DATE DD > 31 " + FD.EFT_COMPANY_DESCR_DATE.AsString());                     //COBOL==> DISPLAY 'CO. DESCR DATE DD > 31 ' EFT-COMPANY-DESCR-DATE
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                if ((((FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(4))
             || (FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(6)))
             || (FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(9)))
             || (FD.EFT_CO_DESCR_DATE_R_MM.IsEqualTo(11)))  //COBOL==> IF EFT-CO-DESCR-DATE-R-MM = ( 4 OR 6 OR 9 OR 11 )
                                {
                                    if (FD.EFT_CO_DESCR_DATE_R_DD.IsGreaterThan(30))                                                    //COBOL==> IF EFT-CO-DESCR-DATE-R-DD > 30
                                    {
                                        LS.COMPANY_DESCRIPTIVE_DATE_0011.SetValue(00010101);                                                //COBOL==> MOVE 00010101 TO COMPANY-DESCRIPTIVE-DATE-0011
                                        DisplayToLog("CO. DESCR DATE DD > 30 " + FD.EFT_COMPANY_DESCR_DATE.AsString());                     //COBOL==> DISPLAY 'CO. DESCR DATE DD > 30 ' EFT-COMPANY-DESCR-DATE
                                    }                                                                                                   //COBOL==> END-IF
                                                                                                                                        //COMMENT:    ACH TRANSACTIONS USE 2 DIGIT YEARS, WE DO NOT EXPECT ANY PAST
                                                                                                                                        //COMMENT:    DATES IN THIS FIELD, FUTURE DATES ARE SUPPORTED UP TO THE
                                                                                                                                        //COMMENT:    PIVOT YEAR 2070.
                                }                                                                                                   //COBOL==> ELSE
                                else
                                {
                                    if (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(99))                                                        //COBOL==> IF EFT-CO-DESCR-DATE-R-YY = 99
                                    {
                                        //Continue                                                                                          //COBOL==> CONTINUE
                                    }                                                                                                   //COBOL==> ELSE
                                    else
                                    {
                                        if (FD.EFT_CO_DESCR_DATE_R_YY.IsGreaterThan(70))                                                    //COBOL==> IF EFT-CO-DESCR-DATE-R-YY > 70
                                        {
                                            LS.COMPANY_DESCRIPTIVE_DATE_0011.SetValue(00010101);                                                //COBOL==> MOVE 00010101 TO COMPANY-DESCRIPTIVE-DATE-0011
                                            DisplayToLog("CO. DESCR DATE YY > 70 & < 99 " + FD.EFT_COMPANY_DESCR_DATE.AsString());              //COBOL==> DISPLAY 'CO. DESCR DATE YY > 70 & < 99 ' EFT-COMPANY-DESCR-DATE
                                        }                                                                                                   //COBOL==> ELSE
                                        else
                                        {
                                            if ((((((((((((((((((FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(00))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(04)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(08)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(12)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(16)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(20)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(24)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(28)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(32)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(36)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(40)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(44)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(48)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(52)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(56)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(60)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(64)))
             || (FD.EFT_CO_DESCR_DATE_R_YY.IsEqualTo(68)))  //COBOL==> IF EFT-CO-DESCR-DATE-R-YY = ( 00 OR 04 OR 08 OR 12 OR 16 OR 20 OR 24 OR 28 OR 32 OR 36 OR 40 OR 44 OR 48 OR 52 OR 56 OR 60 OR 64 OR 68 )
                                            {
                                                if (FD.EFT_CO_DESCR_DATE_R_DD.IsGreaterThan(29))                                                    //COBOL==> IF EFT-CO-DESCR-DATE-R-DD > 29
                                                {
                                                    LS.COMPANY_DESCRIPTIVE_DATE_0011.SetValue(00010101);                                                //COBOL==> MOVE 00010101 TO COMPANY-DESCRIPTIVE-DATE-0011
                                                    DisplayToLog("CO. DESCR DATE DD > 29 " + FD.EFT_COMPANY_DESCR_DATE.AsString());                     //COBOL==> DISPLAY 'CO. DESCR DATE DD > 29 ' EFT-COMPANY-DESCR-DATE
                                                }                                                                                                   //COBOL==> END-IF
                                            }                                                                                                   //COBOL==> ELSE
                                            else
                                            {
                                                if (FD.EFT_CO_DESCR_DATE_R_DD.IsGreaterThan(28))                                                    //COBOL==> IF EFT-CO-DESCR-DATE-R-DD > 28
                                                {
                                                    LS.COMPANY_DESCRIPTIVE_DATE_0011.SetValue(00010101);                                                //COBOL==> MOVE 00010101 TO COMPANY-DESCRIPTIVE-DATE-0011
                                                    DisplayToLog("CO. DESCR DATE DD > 28 " + FD.EFT_COMPANY_DESCR_DATE.AsString());                     //COBOL==> DISPLAY 'CO. DESCR DATE DD > 28 ' EFT-COMPANY-DESCR-DATE
                                                }                                                                                                   //COBOL==> END-IF
                                            }                                                                                                   //COBOL==> END-IF
                                        }                                                                                                   //COBOL==> END-IF.
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!(LS.COMPANY_DESCRIPTIVE_DATE_0011.IsEqualTo(000010101)))                                       //COBOL==> IF COMPANY-DESCRIPTIVE-DATE-0011 NOT = 000010101
            {
                WS.WS_FORMAT_6_DIGIT_DATE.SetValue(FD.EFT_COMPANY_DESCR_DATE);                                      //COBOL==> MOVE EFT-COMPANY-DESCR-DATE TO WS-FORMAT-6-DIGIT-DATE
                M_8000_FORMAT_DATE(); if (Control.ExitProgram) { return; }                                            //COBOL==> PERFORM 8000-FORMAT-DATE
                LS.COMPANY_DESCRIPTIVE_DATE_0011.SetValue(WS.WS_FORMAT_8_DIGIT_DATE);                               //COBOL==> MOVE WS-FORMAT-8-DIGIT-DATE TO COMPANY-DESCRIPTIVE-DATE-0011
            }                                                                                                   //COBOL==> END-IF.
            if (FD.EFT_EFFECTIVE_ENTRY_DATE_R.IsSpaces())                                                       //COBOL==> IF EFT-EFFECTIVE-ENTRY-DATE-R = SPACES
            {
                LS.EFFECTIVE_ENTRY_DATE_0011.SetValue(00010101);                                                    //COBOL==> MOVE 00010101 TO EFFECTIVE-ENTRY-DATE-0011
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_FORMAT_6_DIGIT_DATE.SetValue(FD.EFT_EFFECTIVE_ENTRY_DATE);                                    //COBOL==> MOVE EFT-EFFECTIVE-ENTRY-DATE TO WS-FORMAT-6-DIGIT-DATE
                M_8000_FORMAT_DATE(); if (Control.ExitProgram) { return; }                                            //COBOL==> PERFORM 8000-FORMAT-DATE
                LS.EFFECTIVE_ENTRY_DATE_0011.SetValue(WS.WS_FORMAT_8_DIGIT_DATE);                                   //COBOL==> MOVE WS-FORMAT-8-DIGIT-DATE TO EFFECTIVE-ENTRY-DATE-0011
            }                                                                                                   //COBOL==> END-IF.
            LS.ORIGINATING_DFI_IDENTIF_0008XX.SetValue(FD.EFT_ORIG_DFI_IDENT);                                  //COBOL==> MOVE EFT-ORIG-DFI-IDENT TO ORIGINATING-DFI-IDENTIF-0008XX.
            LS.TRANSACTION_CODE_0007.SetValue(FD.EFT_TRANSACTION_CODE);                                         //COBOL==> MOVE EFT-TRANSACTION-CODE TO TRANSACTION-CODE-0007.
            LS.REC_DFI_ACT_NUMBER_0007.SetValue(FD.EFT_DFI_ACCOUNT_NUMBER);                                     //COBOL==> MOVE EFT-DFI-ACCOUNT-NUMBER TO REC-DFI-ACT-NUMBER-0007.
            LS.TRANSMITTAL_AMOUNT_0005.SetValue(FD.EFT_TRANSMITTAL_AMOUNT);                                     //COBOL==> MOVE EFT-TRANSMITTAL-AMOUNT TO TRANSMITTAL-AMOUNT-0005.
            LS.RECEIVING_COMPANY_NAME_0011.SetValue(FD.EFT_RECEIVING_COMPANY_NAME);                             //COBOL==> MOVE EFT-RECEIVING-COMPANY-NAME TO RECEIVING-COMPANY-NAME-0011.
            LS.TRACE_NUMBER_0011.SetValue(FD.EFT_TRACE_NUMBER);                                                 //COBOL==> MOVE EFT-TRACE-NUMBER TO TRACE-NUMBER-0011.
            if ((FD.EFT_APPLICATION_IDENTIFIER.IsEqualTo("ZZ"))
             && (FD.EFT_DED_ADDENDUM_SPACES.IsSpaces()))  //COBOL==> IF EFT-APPLICATION-IDENTIFIER = 'ZZ' AND EFT-DED-ADDENDUM-SPACES = SPACES
            {
                LS.APPLICATION_IDENTIFIER_0011.SetValueWithSpaces();                                                //COBOL==> MOVE SPACES TO APPLICATION-IDENTIFIER-0011
                LS.COMPANY_ENTRY_DESCRIPITIO_0012.SetValue("FDSO");                                                 //COBOL==> MOVE 'FDSO' TO COMPANY-ENTRY-DESCRIPITIO-0012
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.APPLICATION_IDENTIFIER_0011.SetValue(FD.EFT_APPLICATION_IDENTIFIER);                             //COBOL==> MOVE EFT-APPLICATION-IDENTIFIER TO APPLICATION-IDENTIFIER-0011
            }                                                                                                   //COBOL==> END-IF.
            LS.CASE_ID_0007.SetValue(FD.EFT_CASE_IDENTIFIER);                                                   //COBOL==> MOVE EFT-CASE-IDENTIFIER TO CASE-ID-0007.
            if (FD.EFT_PAY_DATE_R.IsSpaces())                                                                   //COBOL==> IF EFT-PAY-DATE-R = SPACES
            {
                LS.PAY_DATE_0005.SetValue(00010101);                                                                //COBOL==> MOVE 00010101 TO PAY-DATE-0005
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_FORMAT_6_DIGIT_DATE.SetValue(FD.EFT_PAY_DATE);                                                //COBOL==> MOVE EFT-PAY-DATE TO WS-FORMAT-6-DIGIT-DATE
                M_8000_FORMAT_DATE(); if (Control.ExitProgram) { return; }                                            //COBOL==> PERFORM 8000-FORMAT-DATE
                LS.PAY_DATE_0005.SetValue(WS.WS_FORMAT_8_DIGIT_DATE);                                               //COBOL==> MOVE WS-FORMAT-8-DIGIT-DATE TO PAY-DATE-0005
            }                                                                                                   //COBOL==> END-IF.
            LS.COLLECTION_AMOUNT_0011.SetValue(FD.EFT_COLLECTION_AMOUNT);                                       //COBOL==> MOVE EFT-COLLECTION-AMOUNT TO COLLECTION-AMOUNT-0011.
            LS.AP_SSN_0005.SetValue(FD.EFT_NON_CUST_PARENT_SSN);                                                //COBOL==> MOVE EFT-NON-CUST-PARENT-SSN TO AP-SSN-0005.
            LS.MEDICAL_SUPPORT_ID_0005.SetValue(FD.EFT_MEDICAL_SUPP_IND);                                       //COBOL==> MOVE EFT-MEDICAL-SUPP-IND TO MEDICAL-SUPPORT-ID-0005.
            LS.AP_NAME_0005.SetValue(FD.EFT_NON_CUST_PARENT_NAME);                                              //COBOL==> MOVE EFT-NON-CUST-PARENT-NAME TO AP-NAME-0005.
            LS.FIPS_CODE_0005.SetValue(FD.EFT_FIPS_CODE);                                                       //COBOL==> MOVE EFT-FIPS-CODE TO FIPS-CODE-0005.
            LS.EMPLOYMENT_TERMINATION_ID_0006.SetValue(FD.EFT_EMPLOYMENT_TERM_IND);                             //COBOL==> MOVE EFT-EMPLOYMENT-TERM-IND TO EMPLOYMENT-TERMINATION-ID-0006.
            if (returnMethod != "" && returnMethod != "M_2100_MOVE_DETAIL_FIELDS") { M_2200_MOVE_TRAILER_FIELDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2200_MOVE_TRAILER_FIELDS
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************
        /// </remarks>
        private void M_2200_MOVE_TRAILER_FIELDS(string returnMethod = "")
        {
            //COMMENT: ****************
            DisplayToLog(" ");                                                                                  //COBOL==> DISPLAY ' '.
            DisplayToLog(FD.EFT_INPUT_RECORD.AsString());                                                       //COBOL==> DISPLAY EFT-INPUT-RECORD.
            LS.COUNT_0013.SetValue(FD.EFT_TOTAL_RECORD_COUNT);                                                  //COBOL==> MOVE EFT-TOTAL-RECORD-COUNT TO COUNT-0013.
            LS.TOTAL_CURRENCY_0013.SetValue(FD.EFT_TOTAL_AMOUNT);                                               //COBOL==> MOVE EFT-TOTAL-AMOUNT TO TOTAL-CURRENCY-0013.
                                                                                                                //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
                                                                                                                //COMMENT:   READ FOR A RECORD AFTER THE TRAILER RECORD.  IF A RECORD IS
                                                                                                                //COMMENT:   FOUND THEN THIS IS AN ERROR.
                                                                                                                //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            FD.EFT_INPUT_FILE.ReadLine();                                                                       //COBOL==> READ EFT-INPUT-FILE.
                                                                                                                // EvaluateList !WS.EFT_FILE_STATUS!                                                                //COBOL==> EVALUATE EFT-FILE-STATUS
            if ((WS.EFT_FILE_STATUS.IsEqualTo("00")))                                                           //COBOL==> WHEN '00'
            {
                DisplayToLog(" ");                                                                                  //COBOL==> DISPLAY ' '
                DisplayToLog(FD.EFT_COMPANY_HEADER.AsString());                                                     //COBOL==> DISPLAY EFT-COMPANY-HEADER
                DisplayToLog(FD.EFT_CCD_OR_CTX.AsString());                                                         //COBOL==> DISPLAY EFT-CCD-OR-CTX
                DisplayToLog(FD.EFT_DED_ADDENDUM.AsString());                                                       //COBOL==> DISPLAY EFT-DED-ADDENDUM
                DisplayToLog(" ");                                                                                  //COBOL==> DISPLAY ' '
                DisplayToLog("TRAILER REC IS NOT THE LAST RECORD");                                                 //COBOL==> DISPLAY 'TRAILER REC IS NOT THE LAST RECORD'
                LS.STATUS_0002.SetValue("NOT EOF");                                                                 //COBOL==> MOVE 'NOT EOF' TO STATUS-0002
                LS.RPT_DETAIL_0003.SetValue("TRAILER REC IS NOT THE LAST RECORD");                                  //COBOL==> MOVE 'TRAILER REC IS NOT THE LAST RECORD' TO RPT-DETAIL-0003
                M_3000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 3000-CLOSE-FILE
            }                                                                                                //COBOL==> WHEN '10'
            else
            if ((WS.EFT_FILE_STATUS.IsEqualTo("10")))
            {
                LS.STATUS_0002.SetValue("EOF");                                                                     //COBOL==> MOVE 'EOF' TO STATUS-0002
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.STATUS_0002.SetValue(WS.EFT_FILE_STATUS);                                                        //COBOL==> MOVE EFT-FILE-STATUS TO STATUS-0002
                DisplayToLog("STATUS ERROR ON READ AFTER TRAILER REC = " + WS.EFT_FILE_STATUS.AsString());          //COBOL==> DISPLAY 'STATUS ERROR ON READ AFTER TRAILER REC = ' EFT-FILE-STATUS
                LS.RPT_DETAIL_0003.SetValue("STATUS ERROR ON READ AFTER TRAILER REC");                              //COBOL==> MOVE 'STATUS ERROR ON READ AFTER TRAILER REC' TO RPT-DETAIL-0003
                M_3000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 3000-CLOSE-FILE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_2200_MOVE_TRAILER_FIELDS") { M_2300_RECORD_TYPE_ERROR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2300_RECORD_TYPE_ERROR
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************
        /// </remarks>
        private void M_2300_RECORD_TYPE_ERROR(string returnMethod = "")
        {
            //COMMENT: ****************
            DisplayToLog(" ");                                                                                  //COBOL==> DISPLAY ' '.
            DisplayToLog(FD.EFT_COMPANY_HEADER.AsString());                                                     //COBOL==> DISPLAY EFT-COMPANY-HEADER.
            DisplayToLog(FD.EFT_CCD_OR_CTX.AsString());                                                         //COBOL==> DISPLAY EFT-CCD-OR-CTX.
            DisplayToLog(FD.EFT_DED_ADDENDUM.AsString());                                                       //COBOL==> DISPLAY EFT-DED-ADDENDUM.
            LS.STATUS_0002.SetValue("REC TYPE");                                                                //COBOL==> MOVE 'REC TYPE' TO STATUS-0002.
            DisplayToLog("RECORD TYPE ERROR (EXPECTING 2 OR 9) = " + FD.EFT_DETAIL_RECORD_TYPE.AsString());     //COBOL==> DISPLAY 'RECORD TYPE ERROR (EXPECTING 2 OR 9) = ' EFT-DETAIL-RECORD-TYPE.
            LS.RPT_DETAIL_0003.SetValue("RECORD TYPE ERROR (EXPECTING 2 OR 9)");                                //COBOL==> MOVE 'RECORD TYPE ERROR (EXPECTING 2 OR 9)' TO RPT-DETAIL-0003.
            M_3000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 3000-CLOSE-FILE.
            if (returnMethod != "" && returnMethod != "M_2300_RECORD_TYPE_ERROR") { M_3000_CLOSE_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3000_CLOSE_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************
        /// </remarks>
        private void M_3000_CLOSE_FILE(string returnMethod = "")
        {
            //COMMENT: ****************
            FD.EFT_INPUT_FILE.CloseFile();                                                                      //COBOL==> CLOSE EFT-INPUT-FILE.
            if (returnMethod != "" && returnMethod != "M_3000_CLOSE_FILE") { M_8000_FORMAT_DATE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8000_FORMAT_DATE
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************
        /// </remarks>
        private void M_8000_FORMAT_DATE(string returnMethod = "")
        {
            //COMMENT: ****************
            if (WS.WS_FORMAT_DATE_YY.IsGreaterThan(70))                                                         //COBOL==> IF WS-FORMAT-DATE-YY > 70
            {
                WS.WS_FORMAT_DATE_CC.SetValue(19);                                                                  //COBOL==> MOVE 19 TO WS-FORMAT-DATE-CC
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_FORMAT_DATE_CC.SetValue(20);                                                                  //COBOL==> MOVE 20 TO WS-FORMAT-DATE-CC
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_8000_FORMAT_DATE") { M_9999_FINISHED(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9999_FINISHED
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************
        /// </remarks>
        private void M_9999_FINISHED(string returnMethod = "")
        {
            //COMMENT: ****************
            if (returnMethod == "M_9999_FINISHED") { return; }                                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9999_FINISHED") { M_PARA_1051727580_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1051727580_EXIT
        /// </summary>
        private void M_PARA_1051727580_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_1051727580_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_1051727580_EXIT") { M_PARA_1051727580_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1051727580_INIT
        /// </summary>
        private void M_PARA_1051727580_INIT(string returnMethod = "")
        {
            LS.EXPORT_0002EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0002EV
            LS.EXPORT_ERROR_0003EV.ResetToInitialValue();                                                       //COBOL==> INITIALIZE EXPORT-ERROR-0003EV
            LS.EXPORT_EFT_HEADER_RECOR_0004EV.ResetToInitialValue();                                            //COBOL==> INITIALIZE EXPORT-EFT-HEADER-RECOR-0004EV
            LS.EXPORT_EFT_DETAIL_RECOR_0005EV.ResetToInitialValue();                                            //COBOL==> INITIALIZE EXPORT-EFT-DETAIL-RECOR-0005EV
            LS.EXPORT_EFT_TRAILER_RECO_0013EV.ResetToInitialValue();                                            //COBOL==> INITIALIZE EXPORT-EFT-TRAILER-RECO-0013EV .
            if (returnMethod != "" && returnMethod != "M_PARA_1051727580_INIT") { M_PARA_1051727580_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1051727580_INIT_EXIT
        /// </summary>
        private void M_PARA_1051727580_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_1051727580_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
