#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2021
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2021-12-07 03:06:47 PM
   **        *   FROM COBOL PGM   :  SWEXEW19
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   ***************************************************************
                       SOURCE CODE GENERATED BY
                              CA GEN R8
             COPYRIGHT (C) 2013 CA. ALL RIGHTS RESERVED.
       NAME: FN_B792_EAB_WRITE_IVR_FILE       DATE: 2013/10/16
       TARGET OS:   MVS                       TIME: 14:36:28
       TARGET DBMS: DB2                       USER: SWDPDJD
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
       DYNAMIC LINK (Z/OS) USED BUS SYS DEFAULT OF "Yes"
   ***************************************************************
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.IO.Common;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
using MDSY.Framework.IO.Common;
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region File Section Class
    internal class SWEXEW19_fd : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string FileSection = "SWEXEW19_fd_FileSection";
            internal const string ARSTOUT = "ARSTOUT";
            internal const string ARSTOUT_RECORD = "ARSTOUT_RECORD";
        }
        #endregion

        #region Direct-access element properties
        public IFileLink ARSTOUT { get; set; }
        public IField ARSTOUT_RECORD { get { return GetElementByName<IField>(Names.ARSTOUT_RECORD); } }


        internal SWEXEW19_ws WS;
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the FileSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.ARSTOUT_RECORD, FieldType.String, 225);

        }

        protected override string GetRecordName()
        {
            return Names.FileSection;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            IFileHandler FileHandler = InversionContainer.GetImplementingObject<IFileHandler>();

            ARSTOUT = FileHandler.GetFile("ARSTOUT");
            ARSTOUT.StatusField = WS.ARSTOUT_STAT;
            ARSTOUT.AssociatedBuffer = ARSTOUT_RECORD;
        }
        #endregion

        #region Constructors
        public SWEXEW19_fd(SWEXEW19_ws ws)
            : base()
        {
            this.WS = ws;
            Initialize();

        }
        #endregion
    }
    #endregion File Section Class
    #region Working Storage Class
    internal class SWEXEW19_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXEW19_ws_WorkingStorage";
            internal const string ARSTOUT_STAT = "ARSTOUT_STAT";
            internal const string WS_DATE_AREA = "WS_DATE_AREA";
            internal const string WS_TEST_DATE = "WS_TEST_DATE";
            internal const string WS_DATE_RETURN_CODE = "WS_DATE_RETURN_CODE";
            internal const string WS_DATETIME_AREA = "WS_DATETIME_AREA";
            internal const string HD_CRTIMESTAMP1 = "HD_CRTIMESTAMP1";
            internal const string HD_TIMESTAMP1 = "HD_TIMESTAMP1";
            internal const string HD_FILLER_ZERO_YEAR = "HD_FILLER_ZERO_YEAR";
            internal const string HD_FILLER_ZERO_MONTH = "HD_FILLER_ZERO_MONTH";
            internal const string HD_FILLER_ZERO_DAY = "HD_FILLER_ZERO_DAY";
            internal const string HD_FILLER_ZERO_TIME1 = "HD_FILLER_ZERO_TIME1";
            internal const string HD_TIMESTAMP1_XX = "HD_TIMESTAMP1_XX";
            internal const string WS_TEXT_DATE = "WS_TEXT_DATE";
            internal const string WS_YEAR = "WS_YEAR";
            internal const string WS_MONTH = "WS_MONTH";
            internal const string WS_DAY = "WS_DAY";
            internal const string WS_MISC = "WS_MISC";
            internal const string WS_ENTRY = "WS_ENTRY";
            internal const string WS_RECORD_COUNT = "WS_RECORD_COUNT";
            internal const string WS_RECORD_AMOUNT = "WS_RECORD_AMOUNT";
            internal const string A_DASH = "A_DASH";
            internal const string A_PLUS = "A_PLUS";
            internal const string WS_ARSTOUT = "WS_ARSTOUT";
            internal const string RECOUT = "RECOUT";
            internal const string WS_HEADING = "WS_HEADING";
            internal const string REC_TYPE = "REC_TYPE";
            internal const string CREATE_DATE = "CREATE_DATE";
            internal const string WS_DETAIL = "WS_DETAIL";
            internal const string DT_REC_TYPE = "DT_REC_TYPE";
            internal const string AR_NUM = "AR_NUM";
            internal const string AR_SSN = "AR_SSN";
            internal const string AR_FIRST_NM = "AR_FIRST_NM";
            internal const string AR_MI = "AR_MI";
            internal const string AR_LAST_NM = "AR_LAST_NM";
            internal const string AR_DOB = "AR_DOB";
            internal const string COLLECTION_DT = "COLLECTION_DT";
            internal const string COLLECTION_AMT = "COLLECTION_AMT";
            internal const string CT_ORDER_NUM = "CT_ORDER_NUM";
            internal const string AP_NUM = "AP_NUM";
            internal const string AP_FIRST_NM = "AP_FIRST_NM";
            internal const string AP_MI = "AP_MI";
            internal const string AP_LAST_NM = "AP_LAST_NM";
            internal const string AMT_TO_CURRENT = "AMT_TO_CURRENT";
            internal const string AMT_TO_ARREARS = "AMT_TO_ARREARS";
            internal const string AMT_TO_FAM = "AMT_TO_FAM";
            internal const string WS_TRAILER = "WS_TRAILER";
            internal const string TR_REC_TYPE = "TR_REC_TYPE";
            internal const string REC_COUNT = "REC_COUNT";
        }
        #endregion

        #region Direct-access element properties
        public IField ARSTOUT_STAT { get { return GetExternalElementByName<IField>(Names.ARSTOUT_STAT); } }
        public IField WS_DATE_AREA { get { return GetElementByName<IField>(Names.WS_DATE_AREA); } }
        public IField WS_TEST_DATE { get { return GetElementByName<IField>(Names.WS_TEST_DATE); } }
        public IField WS_DATE_RETURN_CODE { get { return GetElementByName<IField>(Names.WS_DATE_RETURN_CODE); } }
        public IField WS_DATETIME_AREA { get { return GetElementByName<IField>(Names.WS_DATETIME_AREA); } }
        public IGroup HD_CRTIMESTAMP1 { get { return GetElementByName<IGroup>(Names.HD_CRTIMESTAMP1); } }
        public IGroup HD_TIMESTAMP1 { get { return GetElementByName<IGroup>(Names.HD_TIMESTAMP1); } }
        public IField HD_FILLER_ZERO_YEAR { get { return GetElementByName<IField>(Names.HD_FILLER_ZERO_YEAR); } }
        public IField HD_FILLER_ZERO_MONTH { get { return GetElementByName<IField>(Names.HD_FILLER_ZERO_MONTH); } }
        public IField HD_FILLER_ZERO_DAY { get { return GetElementByName<IField>(Names.HD_FILLER_ZERO_DAY); } }
        public IField HD_FILLER_ZERO_TIME1 { get { return GetElementByName<IField>(Names.HD_FILLER_ZERO_TIME1); } }
        public IField HD_TIMESTAMP1_XX { get { return GetElementByName<IField>(Names.HD_TIMESTAMP1_XX); } }
        public IGroup WS_TEXT_DATE { get { return GetElementByName<IGroup>(Names.WS_TEXT_DATE); } }
        public IField WS_YEAR { get { return GetElementByName<IField>(Names.WS_YEAR); } }
        public IField WS_MONTH { get { return GetElementByName<IField>(Names.WS_MONTH); } }
        public IField WS_DAY { get { return GetElementByName<IField>(Names.WS_DAY); } }
        public IGroup WS_MISC { get { return GetElementByName<IGroup>(Names.WS_MISC); } }
        public IField WS_ENTRY { get { return GetElementByName<IField>(Names.WS_ENTRY); } }
        public IField WS_RECORD_COUNT { get { return GetElementByName<IField>(Names.WS_RECORD_COUNT); } }
        public IField WS_RECORD_AMOUNT { get { return GetElementByName<IField>(Names.WS_RECORD_AMOUNT); } }
        public IField A_DASH { get { return GetElementByName<IField>(Names.A_DASH); } }
        public IField A_PLUS { get { return GetElementByName<IField>(Names.A_PLUS); } }
        public IGroup WS_ARSTOUT { get { return GetElementByName<IGroup>(Names.WS_ARSTOUT); } }
        public IField RECOUT { get { return GetElementByName<IField>(Names.RECOUT); } }
        public IGroup WS_HEADING { get { return GetElementByName<IGroup>(Names.WS_HEADING); } }
        public IField REC_TYPE { get { return GetElementByName<IField>(Names.REC_TYPE); } }
        public IField CREATE_DATE { get { return GetElementByName<IField>(Names.CREATE_DATE); } }
        public IGroup WS_DETAIL { get { return GetElementByName<IGroup>(Names.WS_DETAIL); } }
        public IField DT_REC_TYPE { get { return GetElementByName<IField>(Names.DT_REC_TYPE); } }
        public IField AR_NUM { get { return GetElementByName<IField>(Names.AR_NUM); } }
        public IField AR_SSN { get { return GetElementByName<IField>(Names.AR_SSN); } }
        public IField AR_FIRST_NM { get { return GetElementByName<IField>(Names.AR_FIRST_NM); } }
        public IField AR_MI { get { return GetElementByName<IField>(Names.AR_MI); } }
        public IField AR_LAST_NM { get { return GetElementByName<IField>(Names.AR_LAST_NM); } }
        public IField AR_DOB { get { return GetElementByName<IField>(Names.AR_DOB); } }
        public IField COLLECTION_DT { get { return GetElementByName<IField>(Names.COLLECTION_DT); } }
        public IField COLLECTION_AMT { get { return GetElementByName<IField>(Names.COLLECTION_AMT); } }
        public IField CT_ORDER_NUM { get { return GetElementByName<IField>(Names.CT_ORDER_NUM); } }
        public IField AP_NUM { get { return GetElementByName<IField>(Names.AP_NUM); } }
        public IField AP_FIRST_NM { get { return GetElementByName<IField>(Names.AP_FIRST_NM); } }
        public IField AP_MI { get { return GetElementByName<IField>(Names.AP_MI); } }
        public IField AP_LAST_NM { get { return GetElementByName<IField>(Names.AP_LAST_NM); } }
        public IField AMT_TO_CURRENT { get { return GetElementByName<IField>(Names.AMT_TO_CURRENT); } }
        public IField AMT_TO_ARREARS { get { return GetElementByName<IField>(Names.AMT_TO_ARREARS); } }
        public IField AMT_TO_FAM { get { return GetElementByName<IField>(Names.AMT_TO_FAM); } }
        public IGroup WS_TRAILER { get { return GetElementByName<IGroup>(Names.WS_TRAILER); } }
        public IField TR_REC_TYPE { get { return GetElementByName<IField>(Names.TR_REC_TYPE); } }
        public IField REC_COUNT { get { return GetElementByName<IField>(Names.REC_COUNT); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            WsExternals.Instance.CreateNewField(Names.ARSTOUT_STAT, FieldType.UnsignedNumeric, 2);

            IField WS_DATE_AREA_local = recordDef.CreateNewField(Names.WS_DATE_AREA, FieldType.String, 57, SPACES);
            recordDef.CreateNewGroupRedefine("FILLER", WS_DATE_AREA_local, (FILLER) =>
            {
                FILLER.CreateNewField(Names.WS_TEST_DATE, FieldType.UnsignedNumeric, 8);
                FILLER.CreateNewFillerField(8, FillWith.Hashes);
                FILLER.CreateNewField(Names.WS_DATE_RETURN_CODE, FieldType.String, 2);
            });

            IField WS_DATETIME_AREA_local = recordDef.CreateNewField(Names.WS_DATETIME_AREA, FieldType.String, 20, SPACES);
            recordDef.CreateNewGroupRedefine("FILLER_d3", WS_DATETIME_AREA_local, (FILLER_d3) =>
            {
                FILLER_d3.CreateNewGroup(Names.HD_CRTIMESTAMP1, (HD_CRTIMESTAMP1) =>
                {
                    IGroup HD_TIMESTAMP1_local = (IGroup)HD_CRTIMESTAMP1.CreateNewGroup(Names.HD_TIMESTAMP1, (HD_TIMESTAMP1) =>
                    {
                        HD_TIMESTAMP1.CreateNewField(Names.HD_FILLER_ZERO_YEAR, FieldType.UnsignedNumeric, 4);
                        HD_TIMESTAMP1.CreateNewField(Names.HD_FILLER_ZERO_MONTH, FieldType.UnsignedNumeric, 2);
                        HD_TIMESTAMP1.CreateNewField(Names.HD_FILLER_ZERO_DAY, FieldType.UnsignedNumeric, 2);
                        HD_TIMESTAMP1.CreateNewField(Names.HD_FILLER_ZERO_TIME1, FieldType.UnsignedNumeric, 12);
                    });
                    HD_CRTIMESTAMP1.CreateNewFieldRedefine(Names.HD_TIMESTAMP1_XX, FieldType.String, HD_TIMESTAMP1_local, 20);
                });
            });

            recordDef.CreateNewGroup(Names.WS_TEXT_DATE, (WS_TEXT_DATE) =>
           {
               WS_TEXT_DATE.CreateNewField(Names.WS_YEAR, FieldType.String, 4);
               WS_TEXT_DATE.CreateNewFillerField(FieldType.String, 1, "-");
               WS_TEXT_DATE.CreateNewField(Names.WS_MONTH, FieldType.String, 2);
               WS_TEXT_DATE.CreateNewFillerField(FieldType.String, 1, "-");
               WS_TEXT_DATE.CreateNewField(Names.WS_DAY, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.WS_MISC, (WS_MISC) =>
           {
               WS_MISC.CreateNewField(Names.WS_ENTRY, FieldType.String, 40, "SWEXEW19 WORKING STORAGE STARTS HERE");
               WS_MISC.CreateNewField(Names.WS_RECORD_COUNT, FieldType.UnsignedNumeric, 7, ZEROES);
               WS_MISC.CreateNewField(Names.WS_RECORD_AMOUNT, FieldType.UnsignedNumeric, 8, ZEROES);
               WS_MISC.CreateNewField(Names.A_DASH, FieldType.String, 1, "-");
               WS_MISC.CreateNewField(Names.A_PLUS, FieldType.String, 1, "+");
           });

            recordDef.CreateNewGroup(Names.WS_ARSTOUT, (WS_ARSTOUT) =>
           {
               WS_ARSTOUT.CreateNewField(Names.RECOUT, FieldType.String, 225);
           });

            recordDef.CreateNewGroup(Names.WS_HEADING, (WS_HEADING) =>
           {
               WS_HEADING.CreateNewField(Names.REC_TYPE, FieldType.String, 1);
               WS_HEADING.CreateNewField(Names.CREATE_DATE, FieldType.String, 8);
               WS_HEADING.CreateNewFillerField(FieldType.String, 216, SPACES);
           });

            recordDef.CreateNewGroup(Names.WS_DETAIL, (WS_DETAIL) =>
           {
               WS_DETAIL.CreateNewField(Names.DT_REC_TYPE, FieldType.String, 1);
               WS_DETAIL.CreateNewField(Names.AR_NUM, FieldType.String, 10);
               WS_DETAIL.CreateNewField(Names.AR_SSN, FieldType.String, 9);
               WS_DETAIL.CreateNewField(Names.AR_FIRST_NM, FieldType.String, 12);
               WS_DETAIL.CreateNewField(Names.AR_MI, FieldType.String, 1);
               WS_DETAIL.CreateNewField(Names.AR_LAST_NM, FieldType.String, 25);
               WS_DETAIL.CreateNewField(Names.AR_DOB, FieldType.String, 8);
               WS_DETAIL.CreateNewField(Names.COLLECTION_DT, FieldType.String, 8);
               WS_DETAIL.CreateNewField(Names.COLLECTION_AMT, FieldType.UnsignedNumeric, 8, null, 2);
               WS_DETAIL.CreateNewField(Names.CT_ORDER_NUM, FieldType.String, 20);
               WS_DETAIL.CreateNewField(Names.AP_NUM, FieldType.String, 10);
               WS_DETAIL.CreateNewField(Names.AP_FIRST_NM, FieldType.String, 12);
               WS_DETAIL.CreateNewField(Names.AP_MI, FieldType.String, 1);
               WS_DETAIL.CreateNewField(Names.AP_LAST_NM, FieldType.String, 25);
               WS_DETAIL.CreateNewField(Names.AMT_TO_CURRENT, FieldType.UnsignedNumeric, 8, null, 2);
               WS_DETAIL.CreateNewField(Names.AMT_TO_ARREARS, FieldType.UnsignedNumeric, 8, null, 2);
               WS_DETAIL.CreateNewField(Names.AMT_TO_FAM, FieldType.UnsignedNumeric, 8, null, 2);
               WS_DETAIL.CreateNewFillerField(FieldType.String, 52, SPACE);
           });

            recordDef.CreateNewGroup(Names.WS_TRAILER, (WS_TRAILER) =>
           {
               WS_TRAILER.CreateNewField(Names.TR_REC_TYPE, FieldType.String, 1);
               WS_TRAILER.CreateNewFillerField(FieldType.String, 1, SPACES);
               WS_TRAILER.CreateNewField(Names.REC_COUNT, FieldType.String, 10);
               WS_TRAILER.CreateNewFillerField(FieldType.String, 212, SPACES);
           });

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXEW19_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXEW19_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string WHEN_SUCCESSFUL_SF = "WHEN_SUCCESSFUL_SF";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string DB_ERROR_SF = "DB_ERROR_SF";
            internal const string ABORT_SHOW_DBMS_MSG_SF = "ABORT_SHOW_DBMS_MSG_SF";
            internal const string ABORT_SHOW_USER_MSG_SF = "ABORT_SHOW_USER_MSG_SF";
            internal const string RETRY_TRAN_REQUESTED_SF = "RETRY_TRAN_REQUESTED_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string ASYNC_WHEN_AVAILABLE_SF = "ASYNC_WHEN_AVAILABLE_SF";
            internal const string ASYNC_WHEN_ACCEPTED_SF = "ASYNC_WHEN_ACCEPTED_SF";
            internal const string ASYNC_WHEN_NOT_ACCEPTED_SF = "ASYNC_WHEN_NOT_ACCEPTED_SF";
            internal const string ASYNC_WHEN_INVALID_ID_SF = "ASYNC_WHEN_INVALID_ID_SF";
            internal const string ASYNC_WHEN_PENDING_SF = "ASYNC_WHEN_PENDING_SF";
            internal const string ASYNC_WHEN_SERVER_ERROR_SF = "ASYNC_WHEN_SERVER_ERROR_SF";
            internal const string ASYNC_WHEN_COMM_ERROR_SF = "ASYNC_WHEN_COMM_ERROR_SF";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DB_DEADLOCK_TIMOUT_FL_LS = "DB_DEADLOCK_TIMOUT_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_TIRDATE_SKIP_VAL = "PSMGR_TIRDATE_SKIP_VAL";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string TX_RETRY_COUNT = "TX_RETRY_COUNT";
            internal const string TX_USER_RETRY_ALLOWED = "TX_USER_RETRY_ALLOWED";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string PSMGR_ASYNC_DATA = "PSMGR_ASYNC_DATA";
            internal const string ASYNC_MODE = "ASYNC_MODE";
            internal const string FLOW_TYPE_SYNC = "FLOW_TYPE_SYNC";
            internal const string FLOW_TYPE_ASYNC = "FLOW_TYPE_ASYNC";
            internal const string FLOW_TYPE_NO_RESPONSE = "FLOW_TYPE_NO_RESPONSE";
            internal const string ASYNC_FLOW_STATUS_TABLE_PTR = "ASYNC_FLOW_STATUS_TABLE_PTR";
            internal const string ASYNC_SERVER_LOC_TABLE_PTR = "ASYNC_SERVER_LOC_TABLE_PTR";
            internal const string PSMGR_HEAP = "PSMGR_HEAP";
            internal const string HEAP_CFB = "HEAP_CFB";
            internal const string HEAP_CFB_ADDR = "HEAP_CFB_ADDR";
            internal const string HEAP_CFB_ADDR_RESV = "HEAP_CFB_ADDR_RESV";
            internal const string HEAP_CFB_ID = "HEAP_CFB_ID";
            internal const string HEAP_CFB_LEN = "HEAP_CFB_LEN";
            internal const string HEAP_WGLOB = "HEAP_WGLOB";
            internal const string HEAP_WGLOB_ADDR = "HEAP_WGLOB_ADDR";
            internal const string HEAP_WGLOB_ADDR_RESV = "HEAP_WGLOB_ADDR_RESV";
            internal const string HEAP_WGLOB_ID = "HEAP_WGLOB_ID";
            internal const string HEAP_WGLOB_LEN = "HEAP_WGLOB_LEN";
            internal const string IMPORT_0001EV = "IMPORT_0001EV";
            internal const string EAB_FILE_HANDLING_0001ET = "EAB_FILE_HANDLING_0001ET";
            internal const string ACTION_0001AS = "ACTION_0001AS";
            internal const string ACTION_0001 = "ACTION_0001";
            internal const string ACTION_0001XX = "ACTION_0001XX";
            internal const string IMPORT_AR_0002EV = "IMPORT_AR_0002EV";
            internal const string CSE_PERSONS_WORK_SET_0002ET = "CSE_PERSONS_WORK_SET_0002ET";
            internal const string LAST_NAME_0002AS = "LAST_NAME_0002AS";
            internal const string LAST_NAME_0002 = "LAST_NAME_0002";
            internal const string LAST_NAME_0002XX = "LAST_NAME_0002XX";
            internal const string FIRST_NAME_0002AS = "FIRST_NAME_0002AS";
            internal const string FIRST_NAME_0002 = "FIRST_NAME_0002";
            internal const string FIRST_NAME_0002XX = "FIRST_NAME_0002XX";
            internal const string MIDDLE_INITIAL_0002AS = "MIDDLE_INITIAL_0002AS";
            internal const string MIDDLE_INITIAL_0002 = "MIDDLE_INITIAL_0002";
            internal const string MIDDLE_INITIAL_0002XX = "MIDDLE_INITIAL_0002XX";
            internal const string DOB_0002AS = "DOB_0002AS";
            internal const string DOB_0002 = "DOB_0002";
            internal const string DOB_0002XX = "DOB_0002XX";
            internal const string SSN_0002AS = "SSN_0002AS";
            internal const string SSN_0002 = "SSN_0002";
            internal const string SSN_0002XX = "SSN_0002XX";
            internal const string IMPORT_AR_0003EV = "IMPORT_AR_0003EV";
            internal const string CSE_PERSON_0003ET = "CSE_PERSON_0003ET";
            internal const string NUMBER_0003AS = "NUMBER_0003AS";
            internal const string NUMBER_0003 = "NUMBER_0003";
            internal const string NUMBER_0003XX = "NUMBER_0003XX";
            internal const string IMPORT_AP_0004EV = "IMPORT_AP_0004EV";
            internal const string CSE_PERSONS_WORK_SET_0004ET = "CSE_PERSONS_WORK_SET_0004ET";
            internal const string LAST_NAME_0004AS = "LAST_NAME_0004AS";
            internal const string LAST_NAME_0004 = "LAST_NAME_0004";
            internal const string LAST_NAME_0004XX = "LAST_NAME_0004XX";
            internal const string FIRST_NAME_0004AS = "FIRST_NAME_0004AS";
            internal const string FIRST_NAME_0004 = "FIRST_NAME_0004";
            internal const string FIRST_NAME_0004XX = "FIRST_NAME_0004XX";
            internal const string MIDDLE_INITIAL_0004AS = "MIDDLE_INITIAL_0004AS";
            internal const string MIDDLE_INITIAL_0004 = "MIDDLE_INITIAL_0004";
            internal const string MIDDLE_INITIAL_0004XX = "MIDDLE_INITIAL_0004XX";
            internal const string IMPORT_0005EV = "IMPORT_0005EV";
            internal const string LEGAL_ACTION_0005ET = "LEGAL_ACTION_0005ET";
            internal const string STANDARD_NUMBER_0005AS = "STANDARD_NUMBER_0005AS";
            internal const string STANDARD_NUMBER_0005 = "STANDARD_NUMBER_0005";
            internal const string STANDARD_NUMBER_0005XX = "STANDARD_NUMBER_0005XX";
            internal const string IMPORT_AP_0006EV = "IMPORT_AP_0006EV";
            internal const string CSE_PERSON_0006ET = "CSE_PERSON_0006ET";
            internal const string NUMBER_0006AS = "NUMBER_0006AS";
            internal const string NUMBER_0006 = "NUMBER_0006";
            internal const string NUMBER_0006XX = "NUMBER_0006XX";
            internal const string IMPORT_0007EV = "IMPORT_0007EV";
            internal const string COLLECTION_0007ET = "COLLECTION_0007ET";
            internal const string COLLECTION_DT_0007AS = "COLLECTION_DT_0007AS";
            internal const string COLLECTION_DT_0007 = "COLLECTION_DT_0007";
            internal const string COLLECTION_DT_0007XX = "COLLECTION_DT_0007XX";
            internal const string AMOUNT_0007AS = "AMOUNT_0007AS";
            internal const string AMOUNT_0007 = "AMOUNT_0007";
            internal const string AMOUNT_0007XX = "AMOUNT_0007XX";
            internal const string IMPORT_APPLIED_AS_CURRE_0008EV = "IMPORT_APPLIED_AS_CURRE_0008EV";
            internal const string COLLECTION_0008ET = "COLLECTION_0008ET";
            internal const string AMOUNT_0008AS = "AMOUNT_0008AS";
            internal const string AMOUNT_0008 = "AMOUNT_0008";
            internal const string AMOUNT_0008XX = "AMOUNT_0008XX";
            internal const string IMPORT_APPLIED_AS_ARREA_0009EV = "IMPORT_APPLIED_AS_ARREA_0009EV";
            internal const string COLLECTION_0009ET = "COLLECTION_0009ET";
            internal const string AMOUNT_0009AS = "AMOUNT_0009AS";
            internal const string AMOUNT_0009 = "AMOUNT_0009";
            internal const string AMOUNT_0009XX = "AMOUNT_0009XX";
            internal const string IMPORT_TOTAL_FORWARDED__0010EV = "IMPORT_TOTAL_FORWARDED__0010EV";
            internal const string COLLECTION_0010ET = "COLLECTION_0010ET";
            internal const string AMOUNT_0010AS = "AMOUNT_0010AS";
            internal const string AMOUNT_0010 = "AMOUNT_0010";
            internal const string AMOUNT_0010XX = "AMOUNT_0010XX";
            internal const string IMPORT_RECORD_COUNT_0011EV = "IMPORT_RECORD_COUNT_0011EV";
            internal const string WORK_AREA_0011ET = "WORK_AREA_0011ET";
            internal const string TEXT_10_0011AS = "TEXT_10_0011AS";
            internal const string TEXT_10_0011 = "TEXT_10_0011";
            internal const string TEXT_10_0011XX = "TEXT_10_0011XX";
            internal const string IMPORT_CREATE_DATE_0012EV = "IMPORT_CREATE_DATE_0012EV";
            internal const string WORK_AREA_0012ET = "WORK_AREA_0012ET";
            internal const string TEXT_8_0012AS = "TEXT_8_0012AS";
            internal const string TEXT_8_0012 = "TEXT_8_0012";
            internal const string TEXT_8_0012XX = "TEXT_8_0012XX";
            internal const string IMPORT_RECORD_TYPE_0013EV = "IMPORT_RECORD_TYPE_0013EV";
            internal const string WORK_AREA_0013ET = "WORK_AREA_0013ET";
            internal const string TEXT_1_0013AS = "TEXT_1_0013AS";
            internal const string TEXT_1_0013 = "TEXT_1_0013";
            internal const string TEXT_1_0013XX = "TEXT_1_0013XX";
            internal const string EXPORT_0014EV = "EXPORT_0014EV";
            internal const string EAB_FILE_HANDLING_0014ET = "EAB_FILE_HANDLING_0014ET";
            internal const string STATUS_0014AS = "STATUS_0014AS";
            internal const string STATUS_0014 = "STATUS_0014";
            internal const string STATUS_0014XX = "STATUS_0014XX";
            internal const string EXPORT_0015EV = "EXPORT_0015EV";
            internal const string EXTERNAL_0015ET = "EXTERNAL_0015ET";
            internal const string NUMERIC_RETURN_CODE_0015AS = "NUMERIC_RETURN_CODE_0015AS";
            internal const string NUMERIC_RETURN_CODE_0015 = "NUMERIC_RETURN_CODE_0015";
            internal const string NUMERIC_RETURN_CODE_0015XX = "NUMERIC_RETURN_CODE_0015XX";
            internal const string TEXT_RETURN_CODE_0015AS = "TEXT_RETURN_CODE_0015AS";
            internal const string TEXT_RETURN_CODE_0015 = "TEXT_RETURN_CODE_0015";
            internal const string TEXT_RETURN_CODE_0015XX = "TEXT_RETURN_CODE_0015XX";
            internal const string TEXT_LINE_80_0015AS = "TEXT_LINE_80_0015AS";
            internal const string TEXT_LINE_80_0015 = "TEXT_LINE_80_0015";
            internal const string TEXT_LINE_80_0015XX = "TEXT_LINE_80_0015XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField WHEN_SUCCESSFUL_SF { get { return GetElementByName<ICheckField>(Names.WHEN_SUCCESSFUL_SF); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField DB_ERROR_SF { get { return GetElementByName<ICheckField>(Names.DB_ERROR_SF); } }
        public ICheckField ABORT_SHOW_DBMS_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_DBMS_MSG_SF); } }
        public ICheckField ABORT_SHOW_USER_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_USER_MSG_SF); } }
        public ICheckField RETRY_TRAN_REQUESTED_SF { get { return GetElementByName<ICheckField>(Names.RETRY_TRAN_REQUESTED_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public ICheckField ASYNC_WHEN_AVAILABLE_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_AVAILABLE_SF); } }
        public ICheckField ASYNC_WHEN_ACCEPTED_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_ACCEPTED_SF); } }
        public ICheckField ASYNC_WHEN_NOT_ACCEPTED_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_NOT_ACCEPTED_SF); } }
        public ICheckField ASYNC_WHEN_INVALID_ID_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_INVALID_ID_SF); } }
        public ICheckField ASYNC_WHEN_PENDING_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_PENDING_SF); } }
        public ICheckField ASYNC_WHEN_SERVER_ERROR_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_SERVER_ERROR_SF); } }
        public ICheckField ASYNC_WHEN_COMM_ERROR_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_COMM_ERROR_SF); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DB_DEADLOCK_TIMOUT_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_DEADLOCK_TIMOUT_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_TIRDATE_SKIP_VAL { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SKIP_VAL); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IField TX_RETRY_COUNT { get { return GetElementByName<IField>(Names.TX_RETRY_COUNT); } }
        public IField TX_USER_RETRY_ALLOWED { get { return GetElementByName<IField>(Names.TX_USER_RETRY_ALLOWED); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup PSMGR_ASYNC_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ASYNC_DATA); } }
        public IField ASYNC_MODE { get { return GetElementByName<IField>(Names.ASYNC_MODE); } }
        public ICheckField FLOW_TYPE_SYNC { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_SYNC); } }
        public ICheckField FLOW_TYPE_ASYNC { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_ASYNC); } }
        public ICheckField FLOW_TYPE_NO_RESPONSE { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_NO_RESPONSE); } }
        public IField ASYNC_FLOW_STATUS_TABLE_PTR { get { return GetElementByName<IField>(Names.ASYNC_FLOW_STATUS_TABLE_PTR); } }
        public IField ASYNC_SERVER_LOC_TABLE_PTR { get { return GetElementByName<IField>(Names.ASYNC_SERVER_LOC_TABLE_PTR); } }
        public IGroup PSMGR_HEAP { get { return GetElementByName<IGroup>(Names.PSMGR_HEAP); } }
        public IGroup HEAP_CFB { get { return GetElementByName<IGroup>(Names.HEAP_CFB); } }
        public IField HEAP_CFB_ADDR { get { return GetElementByName<IField>(Names.HEAP_CFB_ADDR); } }
        public IField HEAP_CFB_ADDR_RESV { get { return GetElementByName<IField>(Names.HEAP_CFB_ADDR_RESV); } }
        public IField HEAP_CFB_ID { get { return GetElementByName<IField>(Names.HEAP_CFB_ID); } }
        public IField HEAP_CFB_LEN { get { return GetElementByName<IField>(Names.HEAP_CFB_LEN); } }
        public IGroup HEAP_WGLOB { get { return GetElementByName<IGroup>(Names.HEAP_WGLOB); } }
        public IField HEAP_WGLOB_ADDR { get { return GetElementByName<IField>(Names.HEAP_WGLOB_ADDR); } }
        public IField HEAP_WGLOB_ADDR_RESV { get { return GetElementByName<IField>(Names.HEAP_WGLOB_ADDR_RESV); } }
        public IField HEAP_WGLOB_ID { get { return GetElementByName<IField>(Names.HEAP_WGLOB_ID); } }
        public IField HEAP_WGLOB_LEN { get { return GetElementByName<IField>(Names.HEAP_WGLOB_LEN); } }
        public IGroup IMPORT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_0001EV); } }
        public IGroup EAB_FILE_HANDLING_0001ET { get { return GetElementByName<IGroup>(Names.EAB_FILE_HANDLING_0001ET); } }
        public IField ACTION_0001AS { get { return GetElementByName<IField>(Names.ACTION_0001AS); } }
        public IField ACTION_0001 { get { return GetElementByName<IField>(Names.ACTION_0001); } }
        public IField ACTION_0001XX { get { return GetElementByName<IField>(Names.ACTION_0001XX); } }
        public IGroup IMPORT_AR_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_AR_0002EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0002ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0002ET); } }
        public IField LAST_NAME_0002AS { get { return GetElementByName<IField>(Names.LAST_NAME_0002AS); } }
        public IField LAST_NAME_0002 { get { return GetElementByName<IField>(Names.LAST_NAME_0002); } }
        public IField LAST_NAME_0002XX { get { return GetElementByName<IField>(Names.LAST_NAME_0002XX); } }
        public IField FIRST_NAME_0002AS { get { return GetElementByName<IField>(Names.FIRST_NAME_0002AS); } }
        public IField FIRST_NAME_0002 { get { return GetElementByName<IField>(Names.FIRST_NAME_0002); } }
        public IField FIRST_NAME_0002XX { get { return GetElementByName<IField>(Names.FIRST_NAME_0002XX); } }
        public IField MIDDLE_INITIAL_0002AS { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002AS); } }
        public IField MIDDLE_INITIAL_0002 { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002); } }
        public IField MIDDLE_INITIAL_0002XX { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002XX); } }
        public IField DOB_0002AS { get { return GetElementByName<IField>(Names.DOB_0002AS); } }
        public IField DOB_0002 { get { return GetElementByName<IField>(Names.DOB_0002); } }
        public IField DOB_0002XX { get { return GetElementByName<IField>(Names.DOB_0002XX); } }
        public IField SSN_0002AS { get { return GetElementByName<IField>(Names.SSN_0002AS); } }
        public IField SSN_0002 { get { return GetElementByName<IField>(Names.SSN_0002); } }
        public IField SSN_0002XX { get { return GetElementByName<IField>(Names.SSN_0002XX); } }
        public IGroup IMPORT_AR_0003EV { get { return GetElementByName<IGroup>(Names.IMPORT_AR_0003EV); } }
        public IGroup CSE_PERSON_0003ET { get { return GetElementByName<IGroup>(Names.CSE_PERSON_0003ET); } }
        public IField NUMBER_0003AS { get { return GetElementByName<IField>(Names.NUMBER_0003AS); } }
        public IField NUMBER_0003 { get { return GetElementByName<IField>(Names.NUMBER_0003); } }
        public IField NUMBER_0003XX { get { return GetElementByName<IField>(Names.NUMBER_0003XX); } }
        public IGroup IMPORT_AP_0004EV { get { return GetElementByName<IGroup>(Names.IMPORT_AP_0004EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0004ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0004ET); } }
        public IField LAST_NAME_0004AS { get { return GetElementByName<IField>(Names.LAST_NAME_0004AS); } }
        public IField LAST_NAME_0004 { get { return GetElementByName<IField>(Names.LAST_NAME_0004); } }
        public IField LAST_NAME_0004XX { get { return GetElementByName<IField>(Names.LAST_NAME_0004XX); } }
        public IField FIRST_NAME_0004AS { get { return GetElementByName<IField>(Names.FIRST_NAME_0004AS); } }
        public IField FIRST_NAME_0004 { get { return GetElementByName<IField>(Names.FIRST_NAME_0004); } }
        public IField FIRST_NAME_0004XX { get { return GetElementByName<IField>(Names.FIRST_NAME_0004XX); } }
        public IField MIDDLE_INITIAL_0004AS { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0004AS); } }
        public IField MIDDLE_INITIAL_0004 { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0004); } }
        public IField MIDDLE_INITIAL_0004XX { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0004XX); } }
        public IGroup IMPORT_0005EV { get { return GetElementByName<IGroup>(Names.IMPORT_0005EV); } }
        public IGroup LEGAL_ACTION_0005ET { get { return GetElementByName<IGroup>(Names.LEGAL_ACTION_0005ET); } }
        public IField STANDARD_NUMBER_0005AS { get { return GetElementByName<IField>(Names.STANDARD_NUMBER_0005AS); } }
        public IField STANDARD_NUMBER_0005 { get { return GetElementByName<IField>(Names.STANDARD_NUMBER_0005); } }
        public IField STANDARD_NUMBER_0005XX { get { return GetElementByName<IField>(Names.STANDARD_NUMBER_0005XX); } }
        public IGroup IMPORT_AP_0006EV { get { return GetElementByName<IGroup>(Names.IMPORT_AP_0006EV); } }
        public IGroup CSE_PERSON_0006ET { get { return GetElementByName<IGroup>(Names.CSE_PERSON_0006ET); } }
        public IField NUMBER_0006AS { get { return GetElementByName<IField>(Names.NUMBER_0006AS); } }
        public IField NUMBER_0006 { get { return GetElementByName<IField>(Names.NUMBER_0006); } }
        public IField NUMBER_0006XX { get { return GetElementByName<IField>(Names.NUMBER_0006XX); } }
        public IGroup IMPORT_0007EV { get { return GetElementByName<IGroup>(Names.IMPORT_0007EV); } }
        public IGroup COLLECTION_0007ET { get { return GetElementByName<IGroup>(Names.COLLECTION_0007ET); } }
        public IField COLLECTION_DT_0007AS { get { return GetElementByName<IField>(Names.COLLECTION_DT_0007AS); } }
        public IField COLLECTION_DT_0007 { get { return GetElementByName<IField>(Names.COLLECTION_DT_0007); } }
        public IField COLLECTION_DT_0007XX { get { return GetElementByName<IField>(Names.COLLECTION_DT_0007XX); } }
        public IField AMOUNT_0007AS { get { return GetElementByName<IField>(Names.AMOUNT_0007AS); } }
        public IField AMOUNT_0007 { get { return GetElementByName<IField>(Names.AMOUNT_0007); } }
        public IField AMOUNT_0007XX { get { return GetElementByName<IField>(Names.AMOUNT_0007XX); } }
        public IGroup IMPORT_APPLIED_AS_CURRE_0008EV { get { return GetElementByName<IGroup>(Names.IMPORT_APPLIED_AS_CURRE_0008EV); } }
        public IGroup COLLECTION_0008ET { get { return GetElementByName<IGroup>(Names.COLLECTION_0008ET); } }
        public IField AMOUNT_0008AS { get { return GetElementByName<IField>(Names.AMOUNT_0008AS); } }
        public IField AMOUNT_0008 { get { return GetElementByName<IField>(Names.AMOUNT_0008); } }
        public IField AMOUNT_0008XX { get { return GetElementByName<IField>(Names.AMOUNT_0008XX); } }
        public IGroup IMPORT_APPLIED_AS_ARREA_0009EV { get { return GetElementByName<IGroup>(Names.IMPORT_APPLIED_AS_ARREA_0009EV); } }
        public IGroup COLLECTION_0009ET { get { return GetElementByName<IGroup>(Names.COLLECTION_0009ET); } }
        public IField AMOUNT_0009AS { get { return GetElementByName<IField>(Names.AMOUNT_0009AS); } }
        public IField AMOUNT_0009 { get { return GetElementByName<IField>(Names.AMOUNT_0009); } }
        public IField AMOUNT_0009XX { get { return GetElementByName<IField>(Names.AMOUNT_0009XX); } }
        public IGroup IMPORT_TOTAL_FORWARDED__0010EV { get { return GetElementByName<IGroup>(Names.IMPORT_TOTAL_FORWARDED__0010EV); } }
        public IGroup COLLECTION_0010ET { get { return GetElementByName<IGroup>(Names.COLLECTION_0010ET); } }
        public IField AMOUNT_0010AS { get { return GetElementByName<IField>(Names.AMOUNT_0010AS); } }
        public IField AMOUNT_0010 { get { return GetElementByName<IField>(Names.AMOUNT_0010); } }
        public IField AMOUNT_0010XX { get { return GetElementByName<IField>(Names.AMOUNT_0010XX); } }
        public IGroup IMPORT_RECORD_COUNT_0011EV { get { return GetElementByName<IGroup>(Names.IMPORT_RECORD_COUNT_0011EV); } }
        public IGroup WORK_AREA_0011ET { get { return GetElementByName<IGroup>(Names.WORK_AREA_0011ET); } }
        public IField TEXT_10_0011AS { get { return GetElementByName<IField>(Names.TEXT_10_0011AS); } }
        public IField TEXT_10_0011 { get { return GetElementByName<IField>(Names.TEXT_10_0011); } }
        public IField TEXT_10_0011XX { get { return GetElementByName<IField>(Names.TEXT_10_0011XX); } }
        public IGroup IMPORT_CREATE_DATE_0012EV { get { return GetElementByName<IGroup>(Names.IMPORT_CREATE_DATE_0012EV); } }
        public IGroup WORK_AREA_0012ET { get { return GetElementByName<IGroup>(Names.WORK_AREA_0012ET); } }
        public IField TEXT_8_0012AS { get { return GetElementByName<IField>(Names.TEXT_8_0012AS); } }
        public IField TEXT_8_0012 { get { return GetElementByName<IField>(Names.TEXT_8_0012); } }
        public IField TEXT_8_0012XX { get { return GetElementByName<IField>(Names.TEXT_8_0012XX); } }
        public IGroup IMPORT_RECORD_TYPE_0013EV { get { return GetElementByName<IGroup>(Names.IMPORT_RECORD_TYPE_0013EV); } }
        public IGroup WORK_AREA_0013ET { get { return GetElementByName<IGroup>(Names.WORK_AREA_0013ET); } }
        public IField TEXT_1_0013AS { get { return GetElementByName<IField>(Names.TEXT_1_0013AS); } }
        public IField TEXT_1_0013 { get { return GetElementByName<IField>(Names.TEXT_1_0013); } }
        public IField TEXT_1_0013XX { get { return GetElementByName<IField>(Names.TEXT_1_0013XX); } }
        public IGroup EXPORT_0014EV { get { return GetElementByName<IGroup>(Names.EXPORT_0014EV); } }
        public IGroup EAB_FILE_HANDLING_0014ET { get { return GetElementByName<IGroup>(Names.EAB_FILE_HANDLING_0014ET); } }
        public IField STATUS_0014AS { get { return GetElementByName<IField>(Names.STATUS_0014AS); } }
        public IField STATUS_0014 { get { return GetElementByName<IField>(Names.STATUS_0014); } }
        public IField STATUS_0014XX { get { return GetElementByName<IField>(Names.STATUS_0014XX); } }
        public IGroup EXPORT_0015EV { get { return GetElementByName<IGroup>(Names.EXPORT_0015EV); } }
        public IGroup EXTERNAL_0015ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0015ET); } }
        public IField NUMERIC_RETURN_CODE_0015AS { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0015AS); } }
        public IField NUMERIC_RETURN_CODE_0015 { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0015); } }
        public IField NUMERIC_RETURN_CODE_0015XX { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0015XX); } }
        public IField TEXT_RETURN_CODE_0015AS { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0015AS); } }
        public IField TEXT_RETURN_CODE_0015 { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0015); } }
        public IField TEXT_RETURN_CODE_0015XX { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0015XX); } }
        public IField TEXT_LINE_80_0015AS { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0015AS); } }
        public IField TEXT_LINE_80_0015 { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0015); } }
        public IField TEXT_LINE_80_0015XX { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0015XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.WHEN_SUCCESSFUL_SF, SPACES)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.DB_ERROR_SF, "DB")
                       .NewCheckField(Names.ABORT_SHOW_DBMS_MSG_SF, "AB")
                       .NewCheckField(Names.ABORT_SHOW_USER_MSG_SF, "AM")
                       .NewCheckField(Names.RETRY_TRAN_REQUESTED_SF, "RT")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       .NewCheckField(Names.ASYNC_WHEN_AVAILABLE_SF, SPACES)
                       .NewCheckField(Names.ASYNC_WHEN_ACCEPTED_SF, SPACES)
                       .NewCheckField(Names.ASYNC_WHEN_NOT_ACCEPTED_SF, "NA")
                       .NewCheckField(Names.ASYNC_WHEN_INVALID_ID_SF, "II")
                       .NewCheckField(Names.ASYNC_WHEN_PENDING_SF, "PE")
                       .NewCheckField(Names.ASYNC_WHEN_SERVER_ERROR_SF, "SS")
                       .NewCheckField(Names.ASYNC_WHEN_COMM_ERROR_SF, "CE")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DB_DEADLOCK_TIMOUT_FL_LS, "DT")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d14", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d14) =>
                   {
                       FILLER_d14.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d14.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d14.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_SKIP_VAL, FieldType.String, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(95, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 8);
               });
               GLOBDATA.CreateNewField(Names.TX_RETRY_COUNT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_USER_RETRY_ALLOWED, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(3, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ASYNC_DATA, (PSMGR_ASYNC_DATA) =>
               {
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_MODE, FieldType.String, 1)
                       .NewCheckField(Names.FLOW_TYPE_SYNC, SPACE)
                       .NewCheckField(Names.FLOW_TYPE_ASYNC, "A")
                       .NewCheckField(Names.FLOW_TYPE_NO_RESPONSE, "N")
                       ;
                   PSMGR_ASYNC_DATA.CreateNewFillerField(1, FillWith.Hashes);
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_FLOW_STATUS_TABLE_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_SERVER_LOC_TABLE_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_HEAP, (PSMGR_HEAP) =>
               {
                   PSMGR_HEAP.CreateNewGroup(Names.HEAP_CFB, (HEAP_CFB) =>
                   {
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_ADDR, FieldType.ReferencePointer, 4);
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_ADDR_RESV, FieldType.SignedNumeric, 9);
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_ID, FieldType.SignedNumeric, 9);
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_LEN, FieldType.SignedNumeric, 9);
                   });
                   PSMGR_HEAP.CreateNewGroup(Names.HEAP_WGLOB, (HEAP_WGLOB) =>
                   {
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_ADDR, FieldType.ReferencePointer, 4);
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_ADDR_RESV, FieldType.SignedNumeric, 9);
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_ID, FieldType.SignedNumeric, 9);
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_LEN, FieldType.SignedNumeric, 9);
                   });
               });
               GLOBDATA.CreateNewFillerField(157, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_0001EV, (IMPORT_0001EV) =>
           {
               IMPORT_0001EV.CreateNewGroup(Names.EAB_FILE_HANDLING_0001ET, (EAB_FILE_HANDLING_0001ET) =>
               {
                   EAB_FILE_HANDLING_0001ET.CreateNewField(Names.ACTION_0001AS, FieldType.String, 1);

                   IField ACTION_0001_local = EAB_FILE_HANDLING_0001ET.CreateNewField(Names.ACTION_0001, FieldType.String, 8);
                   EAB_FILE_HANDLING_0001ET.CreateNewFieldRedefine(Names.ACTION_0001XX, FieldType.String, ACTION_0001_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_AR_0002EV, (IMPORT_AR_0002EV) =>
           {
               IMPORT_AR_0002EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0002ET, (CSE_PERSONS_WORK_SET_0002ET) =>
               {
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.LAST_NAME_0002AS, FieldType.String, 1);

                   IField LAST_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.LAST_NAME_0002, FieldType.String, 17);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.LAST_NAME_0002XX, FieldType.String, LAST_NAME_0002_local, 17);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FIRST_NAME_0002AS, FieldType.String, 1);

                   IField FIRST_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FIRST_NAME_0002, FieldType.String, 12);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.FIRST_NAME_0002XX, FieldType.String, FIRST_NAME_0002_local, 12);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.MIDDLE_INITIAL_0002AS, FieldType.String, 1);

                   IField MIDDLE_INITIAL_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.MIDDLE_INITIAL_0002, FieldType.String, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0002XX, FieldType.String, MIDDLE_INITIAL_0002_local, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.DOB_0002AS, FieldType.String, 1);

                   IField DOB_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.DOB_0002, FieldType.SignedNumeric, 8);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.DOB_0002XX, FieldType.String, DOB_0002_local, 8);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SSN_0002AS, FieldType.String, 1);

                   IField SSN_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SSN_0002, FieldType.String, 9);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.SSN_0002XX, FieldType.String, SSN_0002_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_AR_0003EV, (IMPORT_AR_0003EV) =>
           {
               IMPORT_AR_0003EV.CreateNewGroup(Names.CSE_PERSON_0003ET, (CSE_PERSON_0003ET) =>
               {
                   CSE_PERSON_0003ET.CreateNewField(Names.NUMBER_0003AS, FieldType.String, 1);

                   IField NUMBER_0003_local = CSE_PERSON_0003ET.CreateNewField(Names.NUMBER_0003, FieldType.String, 10);
                   CSE_PERSON_0003ET.CreateNewFieldRedefine(Names.NUMBER_0003XX, FieldType.String, NUMBER_0003_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_AP_0004EV, (IMPORT_AP_0004EV) =>
           {
               IMPORT_AP_0004EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0004ET, (CSE_PERSONS_WORK_SET_0004ET) =>
               {
                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.LAST_NAME_0004AS, FieldType.String, 1);

                   IField LAST_NAME_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.LAST_NAME_0004, FieldType.String, 17);
                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.LAST_NAME_0004XX, FieldType.String, LAST_NAME_0004_local, 17);
                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.FIRST_NAME_0004AS, FieldType.String, 1);

                   IField FIRST_NAME_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.FIRST_NAME_0004, FieldType.String, 12);
                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.FIRST_NAME_0004XX, FieldType.String, FIRST_NAME_0004_local, 12);
                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.MIDDLE_INITIAL_0004AS, FieldType.String, 1);

                   IField MIDDLE_INITIAL_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.MIDDLE_INITIAL_0004, FieldType.String, 1);
                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0004XX, FieldType.String, MIDDLE_INITIAL_0004_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0005EV, (IMPORT_0005EV) =>
           {
               IMPORT_0005EV.CreateNewGroup(Names.LEGAL_ACTION_0005ET, (LEGAL_ACTION_0005ET) =>
               {
                   LEGAL_ACTION_0005ET.CreateNewField(Names.STANDARD_NUMBER_0005AS, FieldType.String, 1);

                   IField STANDARD_NUMBER_0005_local = LEGAL_ACTION_0005ET.CreateNewField(Names.STANDARD_NUMBER_0005, FieldType.String, 20);
                   LEGAL_ACTION_0005ET.CreateNewFieldRedefine(Names.STANDARD_NUMBER_0005XX, FieldType.String, STANDARD_NUMBER_0005_local, 20);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_AP_0006EV, (IMPORT_AP_0006EV) =>
           {
               IMPORT_AP_0006EV.CreateNewGroup(Names.CSE_PERSON_0006ET, (CSE_PERSON_0006ET) =>
               {
                   CSE_PERSON_0006ET.CreateNewField(Names.NUMBER_0006AS, FieldType.String, 1);

                   IField NUMBER_0006_local = CSE_PERSON_0006ET.CreateNewField(Names.NUMBER_0006, FieldType.String, 10);
                   CSE_PERSON_0006ET.CreateNewFieldRedefine(Names.NUMBER_0006XX, FieldType.String, NUMBER_0006_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0007EV, (IMPORT_0007EV) =>
           {
               IMPORT_0007EV.CreateNewGroup(Names.COLLECTION_0007ET, (COLLECTION_0007ET) =>
               {
                   COLLECTION_0007ET.CreateNewField(Names.COLLECTION_DT_0007AS, FieldType.String, 1);

                   IField COLLECTION_DT_0007_local = COLLECTION_0007ET.CreateNewField(Names.COLLECTION_DT_0007, FieldType.SignedNumeric, 8);
                   COLLECTION_0007ET.CreateNewFieldRedefine(Names.COLLECTION_DT_0007XX, FieldType.String, COLLECTION_DT_0007_local, 8);
                   COLLECTION_0007ET.CreateNewField(Names.AMOUNT_0007AS, FieldType.String, 1);

                   IField AMOUNT_0007_local = COLLECTION_0007ET.CreateNewField(Names.AMOUNT_0007, FieldType.SignedNumeric, 9, null, 2);
                   COLLECTION_0007ET.CreateNewFieldRedefine(Names.AMOUNT_0007XX, FieldType.String, AMOUNT_0007_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_APPLIED_AS_CURRE_0008EV, (IMPORT_APPLIED_AS_CURRE_0008EV) =>
           {
               IMPORT_APPLIED_AS_CURRE_0008EV.CreateNewGroup(Names.COLLECTION_0008ET, (COLLECTION_0008ET) =>
               {
                   COLLECTION_0008ET.CreateNewField(Names.AMOUNT_0008AS, FieldType.String, 1);

                   IField AMOUNT_0008_local = COLLECTION_0008ET.CreateNewField(Names.AMOUNT_0008, FieldType.SignedNumeric, 9, null, 2);
                   COLLECTION_0008ET.CreateNewFieldRedefine(Names.AMOUNT_0008XX, FieldType.String, AMOUNT_0008_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_APPLIED_AS_ARREA_0009EV, (IMPORT_APPLIED_AS_ARREA_0009EV) =>
           {
               IMPORT_APPLIED_AS_ARREA_0009EV.CreateNewGroup(Names.COLLECTION_0009ET, (COLLECTION_0009ET) =>
               {
                   COLLECTION_0009ET.CreateNewField(Names.AMOUNT_0009AS, FieldType.String, 1);

                   IField AMOUNT_0009_local = COLLECTION_0009ET.CreateNewField(Names.AMOUNT_0009, FieldType.SignedNumeric, 9, null, 2);
                   COLLECTION_0009ET.CreateNewFieldRedefine(Names.AMOUNT_0009XX, FieldType.String, AMOUNT_0009_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_TOTAL_FORWARDED__0010EV, (IMPORT_TOTAL_FORWARDED__0010EV) =>
           {
               IMPORT_TOTAL_FORWARDED__0010EV.CreateNewGroup(Names.COLLECTION_0010ET, (COLLECTION_0010ET) =>
               {
                   COLLECTION_0010ET.CreateNewField(Names.AMOUNT_0010AS, FieldType.String, 1);

                   IField AMOUNT_0010_local = COLLECTION_0010ET.CreateNewField(Names.AMOUNT_0010, FieldType.SignedNumeric, 9, null, 2);
                   COLLECTION_0010ET.CreateNewFieldRedefine(Names.AMOUNT_0010XX, FieldType.String, AMOUNT_0010_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_RECORD_COUNT_0011EV, (IMPORT_RECORD_COUNT_0011EV) =>
           {
               IMPORT_RECORD_COUNT_0011EV.CreateNewGroup(Names.WORK_AREA_0011ET, (WORK_AREA_0011ET) =>
               {
                   WORK_AREA_0011ET.CreateNewField(Names.TEXT_10_0011AS, FieldType.String, 1);

                   IField TEXT_10_0011_local = WORK_AREA_0011ET.CreateNewField(Names.TEXT_10_0011, FieldType.String, 10);
                   WORK_AREA_0011ET.CreateNewFieldRedefine(Names.TEXT_10_0011XX, FieldType.String, TEXT_10_0011_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_CREATE_DATE_0012EV, (IMPORT_CREATE_DATE_0012EV) =>
           {
               IMPORT_CREATE_DATE_0012EV.CreateNewGroup(Names.WORK_AREA_0012ET, (WORK_AREA_0012ET) =>
               {
                   WORK_AREA_0012ET.CreateNewField(Names.TEXT_8_0012AS, FieldType.String, 1);

                   IField TEXT_8_0012_local = WORK_AREA_0012ET.CreateNewField(Names.TEXT_8_0012, FieldType.String, 8);
                   WORK_AREA_0012ET.CreateNewFieldRedefine(Names.TEXT_8_0012XX, FieldType.String, TEXT_8_0012_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_RECORD_TYPE_0013EV, (IMPORT_RECORD_TYPE_0013EV) =>
           {
               IMPORT_RECORD_TYPE_0013EV.CreateNewGroup(Names.WORK_AREA_0013ET, (WORK_AREA_0013ET) =>
               {
                   WORK_AREA_0013ET.CreateNewField(Names.TEXT_1_0013AS, FieldType.String, 1);

                   IField TEXT_1_0013_local = WORK_AREA_0013ET.CreateNewField(Names.TEXT_1_0013, FieldType.String, 1);
                   WORK_AREA_0013ET.CreateNewFieldRedefine(Names.TEXT_1_0013XX, FieldType.String, TEXT_1_0013_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_0014EV, (EXPORT_0014EV) =>
           {
               EXPORT_0014EV.CreateNewGroup(Names.EAB_FILE_HANDLING_0014ET, (EAB_FILE_HANDLING_0014ET) =>
               {
                   EAB_FILE_HANDLING_0014ET.CreateNewField(Names.STATUS_0014AS, FieldType.String, 1);

                   IField STATUS_0014_local = EAB_FILE_HANDLING_0014ET.CreateNewField(Names.STATUS_0014, FieldType.String, 8);
                   EAB_FILE_HANDLING_0014ET.CreateNewFieldRedefine(Names.STATUS_0014XX, FieldType.String, STATUS_0014_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_0015EV, (EXPORT_0015EV) =>
           {
               EXPORT_0015EV.CreateNewGroup(Names.EXTERNAL_0015ET, (EXTERNAL_0015ET) =>
               {
                   EXTERNAL_0015ET.CreateNewField(Names.NUMERIC_RETURN_CODE_0015AS, FieldType.String, 1);

                   IField NUMERIC_RETURN_CODE_0015_local = EXTERNAL_0015ET.CreateNewField(Names.NUMERIC_RETURN_CODE_0015, FieldType.SignedNumeric, 2);
                   EXTERNAL_0015ET.CreateNewFieldRedefine(Names.NUMERIC_RETURN_CODE_0015XX, FieldType.String, NUMERIC_RETURN_CODE_0015_local, 2);
                   EXTERNAL_0015ET.CreateNewField(Names.TEXT_RETURN_CODE_0015AS, FieldType.String, 1);

                   IField TEXT_RETURN_CODE_0015_local = EXTERNAL_0015ET.CreateNewField(Names.TEXT_RETURN_CODE_0015, FieldType.String, 2);
                   EXTERNAL_0015ET.CreateNewFieldRedefine(Names.TEXT_RETURN_CODE_0015XX, FieldType.String, TEXT_RETURN_CODE_0015_local, 2);
                   EXTERNAL_0015ET.CreateNewField(Names.TEXT_LINE_80_0015AS, FieldType.String, 1);

                   IField TEXT_LINE_80_0015_local = EXTERNAL_0015ET.CreateNewField(Names.TEXT_LINE_80_0015, FieldType.String, 130);
                   EXTERNAL_0015ET.CreateNewFieldRedefine(Names.TEXT_LINE_80_0015XX, FieldType.String, TEXT_LINE_80_0015_local, 130);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(GLOBDATA, args, 2);
            SetPassedParm(IMPORT_0001EV, args, 3);
            SetPassedParm(IMPORT_AR_0002EV, args, 4);
            SetPassedParm(IMPORT_AR_0003EV, args, 5);
            SetPassedParm(IMPORT_AP_0004EV, args, 6);
            SetPassedParm(IMPORT_0005EV, args, 7);
            SetPassedParm(IMPORT_AP_0006EV, args, 8);
            SetPassedParm(IMPORT_0007EV, args, 9);
            SetPassedParm(IMPORT_APPLIED_AS_CURRE_0008EV, args, 10);
            SetPassedParm(IMPORT_APPLIED_AS_ARREA_0009EV, args, 11);
            SetPassedParm(IMPORT_TOTAL_FORWARDED__0010EV, args, 12);
            SetPassedParm(IMPORT_RECORD_COUNT_0011EV, args, 13);
            SetPassedParm(IMPORT_CREATE_DATE_0012EV, args, 14);
            SetPassedParm(IMPORT_RECORD_TYPE_0013EV, args, 15);
            SetPassedParm(EXPORT_0014EV, args, 16);
            SetPassedParm(EXPORT_0015EV, args, 17);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(GLOBDATA, args, 2);
            SetReturnParm(IMPORT_0001EV, args, 3);
            SetReturnParm(IMPORT_AR_0002EV, args, 4);
            SetReturnParm(IMPORT_AR_0003EV, args, 5);
            SetReturnParm(IMPORT_AP_0004EV, args, 6);
            SetReturnParm(IMPORT_0005EV, args, 7);
            SetReturnParm(IMPORT_AP_0006EV, args, 8);
            SetReturnParm(IMPORT_0007EV, args, 9);
            SetReturnParm(IMPORT_APPLIED_AS_CURRE_0008EV, args, 10);
            SetReturnParm(IMPORT_APPLIED_AS_ARREA_0009EV, args, 11);
            SetReturnParm(IMPORT_TOTAL_FORWARDED__0010EV, args, 12);
            SetReturnParm(IMPORT_RECORD_COUNT_0011EV, args, 13);
            SetReturnParm(IMPORT_CREATE_DATE_0012EV, args, 14);
            SetReturnParm(IMPORT_RECORD_TYPE_0013EV, args, 15);
            SetReturnParm(EXPORT_0014EV, args, 16);
            SetReturnParm(EXPORT_0015EV, args, 17);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXEW19 : EABBase
    {

        #region Public Constructors
        public SWEXEW19()
            : base()
        {
            this.ProgramName.SetValue("SWEXEW19");

            WS = new SWEXEW19_ws();
            FD = new SWEXEW19_fd(WS);
            LS = new SWEXEW19_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXEW19_ws WS;

        //==== File Data Class ========================================
        private SWEXEW19_fd FD;

        //==== Linkage Section Data Class ========================================
        private SWEXEW19_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , GLOBDATA , IMPORT-0001EV , IMPORT-AR-0002EV , IMPORT-AR-0003EV , IMPORT-AP-0004EV , IMPORT-0005EV , IMPORT-AP-0006EV , IMPORT-0007EV , IMPORT-APPLIED-AS-CURRE-0008EV , IMPORT-APPLIED-AS-ARREA-0009EV , IMPORT-TOTAL-FORWARDED--0010EV , IMPORT-RECORD-COUNT-0011EV , IMPORT-CREATE-DATE-0012EV , IMPORT-RECORD-TYPE-0013EV , EXPORT-0014EV , EXPORT-0015EV.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_0309668742(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_0309668742
        /// </summary>
        private void M_MAIN_0309668742(string returnMethod = "")
        {
            M_PARA_0309668742_INIT("M_PARA_0309668742_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-0309668742-INIT THRU PARA-0309668742-INIT-EXIT
            M_PARA_0309668742("M_PARA_0309668742_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-0309668742 THRU PARA-0309668742-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_0309668742
        /// </summary>
        private void M_PARA_0309668742(string returnMethod = "")
        {
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            //COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            //COMMENT: ******************************************
            //COMMENT:  THIS  CODE SWCSZF56 IS A PART OF SWEXEW19*
            //COMMENT: ******************************************
            //COMMENT: IF A NEW STUB IS GENERATED CHANGE
            //COMMENT: ***********************************************************
            LS.STATUS_0014.SetValue("OK");                                                                      //COBOL==> MOVE 'OK' TO STATUS-0014
                                                                                                                // EvaluateList !LS.ACTION_0001!                                                                    //COBOL==> EVALUATE ACTION-0001
            if ((LS.ACTION_0001.IsEqualTo("OPEN")))                                                             //COBOL==> WHEN 'OPEN'
            {
                M_0100_INITIALIZE_AND_OPEN("M_0100_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM 0100-INITIALIZE-AND-OPEN THRU 0100-EXIT
            }                                                                                                //COBOL==> WHEN 'WRITE'
            else
            if ((LS.ACTION_0001.IsEqualTo("WRITE")))
            {
                M_0500_PROCESS_TRANS("M_0500_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 0500-PROCESS-TRANS THRU 0500-EXIT
            }                                                                                                //COBOL==> WHEN 'CLOSE'
            else
            if ((LS.ACTION_0001.IsEqualTo("CLOSE")))
            {
                M_0200_CLOSE("M_0200_EXIT"); if (Control.ExitProgram) { return; }                                     //COBOL==> PERFORM 0200-CLOSE THRU 0200-EXIT
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.STATUS_0014.SetValue("AB");                                                                      //COBOL==> MOVE 'AB' TO STATUS-0014
            }                                                                                                   //COBOL==> END-EVALUATE.
            M_9999_FINISHED(CheckGotoReturn(returnMethod)); return;                                             //COBOL==> GO TO 9999-FINISHED.
        }
        /// <summary>
        /// Method M_0100_INITIALIZE_AND_OPEN
        /// </summary>
        private void M_0100_INITIALIZE_AND_OPEN(string returnMethod = "")
        {
            FD.ARSTOUT.OpenFile(FileAccessMode.Write);                                                          //COBOL==> OPEN OUTPUT ARSTOUT.
            if (!(WS.ARSTOUT_STAT.IsEqualTo(00)))                                                               //COBOL==> IF ARSTOUT-STAT NOT = 00
            {
                LS.STATUS_0014.SetValue("OP");                                                                      //COBOL==> MOVE 'OP' TO STATUS-0014
                LS.TEXT_LINE_80_0015.SetValue("AN ERROR OCCURRED ON OPEN ");                                        //COBOL==> MOVE 'AN ERROR OCCURRED ON OPEN ' TO TEXT-LINE-80-0015
                LS.NUMERIC_RETURN_CODE_0015.SetValue(WS.ARSTOUT_STAT);                                              //COBOL==> MOVE ARSTOUT-STAT TO NUMERIC-RETURN-CODE-0015
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_0100_INITIALIZE_AND_OPEN") { M_0100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0100_EXIT
        /// </summary>
        private void M_0100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_0100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_0100_EXIT") { M_0175_WRITE_TRANSMITTER_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0175_WRITE_TRANSMITTER_REC
        /// </summary>
        private void M_0175_WRITE_TRANSMITTER_REC(string returnMethod = "")
        {
            FD.ARSTOUT_RECORD.SetValueWithSpaces();                                                             //COBOL==> MOVE SPACES TO ARSTOUT-RECORD.
            FD.ARSTOUT_RECORD.SetValue(WS.WS_ARSTOUT);                                                          //COBOL==> MOVE WS-ARSTOUT TO ARSTOUT-RECORD.
            FD.ARSTOUT.WriteLine(FD.ARSTOUT_RECORD.AsBytes);                                                    //COBOL==> WRITE ARSTOUT-RECORD.
            if (!(WS.ARSTOUT_STAT.IsEqualTo(00)))                                                               //COBOL==> IF ARSTOUT-STAT NOT = 00
            {
                LS.STATUS_0014.SetValue("WR");                                                                      //COBOL==> MOVE 'WR' TO STATUS-0014
                LS.TEXT_LINE_80_0015.SetValue("AN ERROR OCCURRED IN WRITTING");                                     //COBOL==> MOVE 'AN ERROR OCCURRED IN WRITTING' TO TEXT-LINE-80-0015
                LS.NUMERIC_RETURN_CODE_0015.SetValue(WS.ARSTOUT_STAT);                                              //COBOL==> MOVE ARSTOUT-STAT TO NUMERIC-RETURN-CODE-0015
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_0175_WRITE_TRANSMITTER_REC") { M_0175_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0175_EXIT
        /// </summary>
        private void M_0175_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_0175_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_0175_EXIT") { M_0200_CLOSE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0200_CLOSE
        /// </summary>
        private void M_0200_CLOSE(string returnMethod = "")
        {
            FD.ARSTOUT.CloseFile();                                                                             //COBOL==> CLOSE ARSTOUT
            if (!(WS.ARSTOUT_STAT.IsEqualTo(00)))                                                               //COBOL==> IF ARSTOUT-STAT NOT = 00
            {
                LS.STATUS_0014.SetValue("CL");                                                                      //COBOL==> MOVE 'CL' TO STATUS-0014
                LS.TEXT_LINE_80_0015.SetValue("ERROR IN CLOSING FILE");                                             //COBOL==> MOVE 'ERROR IN CLOSING FILE' TO TEXT-LINE-80-0015
                LS.NUMERIC_RETURN_CODE_0015.SetValue(WS.ARSTOUT_STAT);                                              //COBOL==> MOVE ARSTOUT-STAT TO NUMERIC-RETURN-CODE-0015
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_0200_CLOSE") { M_0200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0200_EXIT
        /// </summary>
        private void M_0200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_0200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_0200_EXIT") { M_0500_PROCESS_TRANS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0500_PROCESS_TRANS
        /// </summary>
        private void M_0500_PROCESS_TRANS(string returnMethod = "")
        {
            // EvaluateList !LS.TEXT_1_0013!                                                                    //COBOL==> EVALUATE TEXT-1-0013
            if ((LS.TEXT_1_0013.IsEqualTo("1")))                                                                //COBOL==> WHEN '1'
            {
                WS.REC_TYPE.SetValue(LS.TEXT_1_0013);                                                               //COBOL==> MOVE TEXT-1-0013 TO REC-TYPE
                WS.CREATE_DATE.SetValue(LS.TEXT_8_0012);                                                            //COBOL==> MOVE TEXT-8-0012 TO CREATE-DATE
                WS.WS_ARSTOUT.SetValue(WS.WS_HEADING);                                                              //COBOL==> MOVE WS-HEADING TO WS-ARSTOUT
            }                                                                                                //COBOL==> WHEN '2'
            else
            if ((LS.TEXT_1_0013.IsEqualTo("2")))
            {
                WS.DT_REC_TYPE.SetValue(LS.TEXT_1_0013);                                                            //COBOL==> MOVE TEXT-1-0013 TO DT-REC-TYPE
                WS.AR_LAST_NM.SetValue(LS.LAST_NAME_0002);                                                          //COBOL==> MOVE LAST-NAME-0002 TO AR-LAST-NM
                WS.AR_FIRST_NM.SetValue(LS.FIRST_NAME_0002);                                                        //COBOL==> MOVE FIRST-NAME-0002 TO AR-FIRST-NM
                WS.AR_MI.SetValue(LS.MIDDLE_INITIAL_0002);                                                          //COBOL==> MOVE MIDDLE-INITIAL-0002 TO AR-MI
                WS.AR_DOB.SetValue(LS.DOB_0002);                                                                    //COBOL==> MOVE DOB-0002 TO AR-DOB
                WS.AR_SSN.SetValue(LS.SSN_0002);                                                                    //COBOL==> MOVE SSN-0002 TO AR-SSN
                WS.AR_NUM.SetValue(LS.NUMBER_0003);                                                                 //COBOL==> MOVE NUMBER-0003 TO AR-NUM
                WS.AP_LAST_NM.SetValue(LS.LAST_NAME_0004);                                                          //COBOL==> MOVE LAST-NAME-0004 TO AP-LAST-NM
                WS.AP_FIRST_NM.SetValue(LS.FIRST_NAME_0004);                                                        //COBOL==> MOVE FIRST-NAME-0004 TO AP-FIRST-NM
                WS.AP_MI.SetValue(LS.MIDDLE_INITIAL_0004);                                                          //COBOL==> MOVE MIDDLE-INITIAL-0004 TO AP-MI
                WS.CT_ORDER_NUM.SetValue(LS.STANDARD_NUMBER_0005);                                                  //COBOL==> MOVE STANDARD-NUMBER-0005 TO CT-ORDER-NUM
                WS.AP_NUM.SetValue(LS.NUMBER_0006);                                                                 //COBOL==> MOVE NUMBER-0006 TO AP-NUM
                WS.COLLECTION_DT.SetValue(LS.COLLECTION_DT_0007);                                                   //COBOL==> MOVE COLLECTION-DT-0007 TO COLLECTION-DT
                WS.COLLECTION_AMT.SetValue(LS.AMOUNT_0007);                                                         //COBOL==> MOVE AMOUNT-0007 TO COLLECTION-AMT
                WS.AMT_TO_CURRENT.SetValue(LS.AMOUNT_0008);                                                         //COBOL==> MOVE AMOUNT-0008 TO AMT-TO-CURRENT
                WS.AMT_TO_ARREARS.SetValue(LS.AMOUNT_0009);                                                         //COBOL==> MOVE AMOUNT-0009 TO AMT-TO-ARREARS
                WS.AMT_TO_FAM.SetValue(LS.AMOUNT_0010);                                                             //COBOL==> MOVE AMOUNT-0010 TO AMT-TO-FAM
                WS.WS_ARSTOUT.SetValue(WS.WS_DETAIL);                                                               //COBOL==> MOVE WS-DETAIL TO WS-ARSTOUT
            }                                                                                                //COBOL==> WHEN '3'
            else
            if ((LS.TEXT_1_0013.IsEqualTo("3")))
            {
                WS.TR_REC_TYPE.SetValue(LS.TEXT_1_0013);                                                            //COBOL==> MOVE TEXT-1-0013 TO TR-REC-TYPE
                WS.REC_COUNT.SetValue(LS.TEXT_10_0011);                                                             //COBOL==> MOVE TEXT-10-0011 TO REC-COUNT
                WS.WS_ARSTOUT.SetValue(WS.WS_TRAILER);                                                              //COBOL==> MOVE WS-TRAILER TO WS-ARSTOUT
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.STATUS_0014.SetValue("AB");                                                                      //COBOL==> MOVE 'AB' TO STATUS-0014
            }                                                                                                   //COBOL==> END-EVALUATE.
            M_0175_WRITE_TRANSMITTER_REC("M_0175_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 0175-WRITE-TRANSMITTER-REC THRU 0175-EXIT.
            if (returnMethod != "" && returnMethod != "M_0500_PROCESS_TRANS") { M_0500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0500_EXIT
        /// </summary>
        private void M_0500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_0500_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_0500_EXIT") { M_9999_FINISHED(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9999_FINISHED
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************
        /// </remarks>
        private void M_9999_FINISHED(string returnMethod = "")
        {
            //COMMENT: *****************
            if (returnMethod == "M_9999_FINISHED") { return; }                                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9999_FINISHED") { M_PARA_0309668742_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0309668742_EXIT
        /// </summary>
        private void M_PARA_0309668742_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0309668742_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_0309668742_EXIT") { M_PARA_0309668742_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0309668742_INIT
        /// </summary>
        private void M_PARA_0309668742_INIT(string returnMethod = "")
        {
            LS.EXPORT_0014EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0014EV
            LS.EXPORT_0015EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0015EV .
            if (returnMethod != "" && returnMethod != "M_PARA_0309668742_INIT") { M_PARA_0309668742_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0309668742_INIT_EXIT
        /// </summary>
        private void M_PARA_0309668742_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0309668742_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
