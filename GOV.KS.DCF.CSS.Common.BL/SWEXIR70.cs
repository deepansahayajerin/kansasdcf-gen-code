#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:51:35 PM
   **        *   FROM COBOL PGM   :  SWEXIR70
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                              COOL:GEN
               COPYRIGHT 2001, STERLING SOFTWARE, INC.
       NAME: SI_EAB_READ_MA_SUBPROG_TYPE      DATE: 2001/09/13
       TARGET OS:   MVS                       TIME: 14:32:28
       TARGET DBMS: DB2                       USER: SWSRMAR
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING NOT SELECTED
       NO LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
   **************************************************************
   ** MAINTENANCE ***********************************************
                          CHANGE                                *
      DATE     AUTHOR     CONTROL  DESCRIPTION                  *
    --------  ----------  -------  ---------------------------- *
     4/22/14  P.LEAK      CQ35825  KEES PHASE 3 CODING CHANGES  *
    12/15/15  R.MATHEWS   CQ35825  P3 PREFERRED ID CODING CHGS  *
   **************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXIR70_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXIR70_ws_WorkingStorage";
            internal const string INP_CLT_NBR = "INP_CLT_NBR";
            internal const string INP_PGM_CD = "INP_PGM_CD";
            internal const string INP_PGM_TYP = "INP_PGM_TYP";
            internal const string INP_CUR_DT = "INP_CUR_DT";
            internal const string INP_CUR_YM = "INP_CUR_YM";
            internal const string WRK_BEN_YM = "WRK_BEN_YM";
            internal const string WRK_CSE_NBR = "WRK_CSE_NBR";
            internal const string WRK_PRT_EOF_IND = "WRK_PRT_EOF_IND";
            internal const string WRK_PRT_EOF = "WRK_PRT_EOF";
            internal const string WRK_PGM_ERR = "WRK_PGM_ERR";
            internal const string WRK_ERR_TYP = "WRK_ERR_TYP";
            internal const string WRK_ADA_ERR = "WRK_ADA_ERR";
            internal const string WRK_ADA_CD = "WRK_ADA_CD";
            internal const string WRK_ADA_ACT = "WRK_ADA_ACT";
            internal const string WRK_RLF_ERR = "WRK_RLF_ERR";
            internal const string WRK_RLN_ERR = "WRK_RLN_ERR";
            internal const string WRK_ADA_NBR = "WRK_ADA_NBR";
            internal const string DCLKSD_PARTICIPATION = "DCLKSD_PARTICIPATION";
            internal const string PAR_KESSEP_TIME_STMP = "PAR_KESSEP_TIME_STMP";
            internal const string PAR_PART_END_DATE = "PAR_PART_END_DATE";
            internal const string PAR_PART_START_DATE = "PAR_PART_START_DATE";
            internal const string PAR_PART_CODE = "PAR_PART_CODE";
            internal const string PAR_PROGRAM_END_DATE = "PAR_PROGRAM_END_DATE";
            internal const string PAR_PROGRAM_SUBTYPE = "PAR_PROGRAM_SUBTYPE";
            internal const string PAR_RELATIONSHIP = "PAR_RELATIONSHIP";
            internal const string PAR_FK_CSB_CASE_NO = "PAR_FK_CSB_CASE_NO";
            internal const string PAR_FK_PGB_PROG_TYPE = "PAR_FK_PGB_PROG_TYPE";
            internal const string PAR_FK_CLB_CLIENT_NO = "PAR_FK_CLB_CLIENT_NO";
            internal const string DCLKSD_PROGRAM_MONTH = "DCLKSD_PROGRAM_MONTH";
            internal const string PMO_BENEFIT_MONTH = "PMO_BENEFIT_MONTH";
            internal const string PMO_COUNTY_CODE = "PMO_COUNTY_CODE";
            internal const string PMO_PROGRAM_SUBTYPE = "PMO_PROGRAM_SUBTYPE";
            internal const string PMO_EXP_GLA_ADTC_IND = "PMO_EXP_GLA_ADTC_IND";
            internal const string PMO_TWO_PARENT_HH = "PMO_TWO_PARENT_HH";
            internal const string PMO_FK_CSB_CASE_NO = "PMO_FK_CSB_CASE_NO";
            internal const string PMO_FK_PGB_PROG_TYPE = "PMO_FK_PGB_PROG_TYPE";
            internal const string DCLKSD_CLIENT_BASIC = "DCLKSD_CLIENT_BASIC";
            internal const string CLB_CLIENT_NUMBER = "CLB_CLIENT_NUMBER";
            internal const string CLB_CIS_PREFERRED_ID = "CLB_CIS_PREFERRED_ID";
            internal const string WS_SWITCHES = "WS_SWITCHES";
            internal const string WS_PAR_EOFSW = "WS_PAR_EOFSW";
            internal const string WS_PAR_EOF_NO = "WS_PAR_EOF_NO";
            internal const string WS_PAR_EOF_YES = "WS_PAR_EOF_YES";
            internal const string WS_PRM_EOFSW = "WS_PRM_EOFSW";
            internal const string WS_PRM_EOF_NO = "WS_PRM_EOF_NO";
            internal const string WS_PRM_EOF_YES = "WS_PRM_EOF_YES";
        }
        #endregion

        #region Direct-access element properties
        public IField INP_CLT_NBR { get { return GetElementByName<IField>(Names.INP_CLT_NBR); } }
        public IField INP_PGM_CD { get { return GetElementByName<IField>(Names.INP_PGM_CD); } }
        public IField INP_PGM_TYP { get { return GetElementByName<IField>(Names.INP_PGM_TYP); } }
        public IField INP_CUR_DT { get { return GetElementByName<IField>(Names.INP_CUR_DT); } }
        public IField INP_CUR_YM { get { return GetElementByName<IField>(Names.INP_CUR_YM); } }
        public IField WRK_BEN_YM { get { return GetElementByName<IField>(Names.WRK_BEN_YM); } }
        public IField WRK_CSE_NBR { get { return GetElementByName<IField>(Names.WRK_CSE_NBR); } }
        public IField WRK_PRT_EOF_IND { get { return GetElementByName<IField>(Names.WRK_PRT_EOF_IND); } }
        public ICheckField WRK_PRT_EOF { get { return GetElementByName<ICheckField>(Names.WRK_PRT_EOF); } }
        public IGroup WRK_PGM_ERR { get { return GetElementByName<IGroup>(Names.WRK_PGM_ERR); } }
        public IField WRK_ERR_TYP { get { return GetElementByName<IField>(Names.WRK_ERR_TYP); } }
        public ICheckField WRK_ADA_ERR { get { return GetElementByName<ICheckField>(Names.WRK_ADA_ERR); } }
        public IField WRK_ADA_CD { get { return GetElementByName<IField>(Names.WRK_ADA_CD); } }
        public IField WRK_ADA_ACT { get { return GetElementByName<IField>(Names.WRK_ADA_ACT); } }
        public ICheckField WRK_RLF_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RLF_ERR); } }
        public ICheckField WRK_RLN_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RLN_ERR); } }
        public IField WRK_ADA_NBR { get { return GetElementByName<IField>(Names.WRK_ADA_NBR); } }
        public IGroup DCLKSD_PARTICIPATION { get { return GetElementByName<IGroup>(Names.DCLKSD_PARTICIPATION); } }
        public IField PAR_KESSEP_TIME_STMP { get { return GetElementByName<IField>(Names.PAR_KESSEP_TIME_STMP); } }
        public IField PAR_PART_END_DATE { get { return GetElementByName<IField>(Names.PAR_PART_END_DATE); } }
        public IField PAR_PART_START_DATE { get { return GetElementByName<IField>(Names.PAR_PART_START_DATE); } }
        public IField PAR_PART_CODE { get { return GetElementByName<IField>(Names.PAR_PART_CODE); } }
        public IField PAR_PROGRAM_END_DATE { get { return GetElementByName<IField>(Names.PAR_PROGRAM_END_DATE); } }
        public IField PAR_PROGRAM_SUBTYPE { get { return GetElementByName<IField>(Names.PAR_PROGRAM_SUBTYPE); } }
        public IField PAR_RELATIONSHIP { get { return GetElementByName<IField>(Names.PAR_RELATIONSHIP); } }
        public IField PAR_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.PAR_FK_CSB_CASE_NO); } }
        public IField PAR_FK_PGB_PROG_TYPE { get { return GetElementByName<IField>(Names.PAR_FK_PGB_PROG_TYPE); } }
        public IField PAR_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.PAR_FK_CLB_CLIENT_NO); } }
        public IGroup DCLKSD_PROGRAM_MONTH { get { return GetElementByName<IGroup>(Names.DCLKSD_PROGRAM_MONTH); } }
        public IField PMO_BENEFIT_MONTH { get { return GetElementByName<IField>(Names.PMO_BENEFIT_MONTH); } }
        public IField PMO_COUNTY_CODE { get { return GetElementByName<IField>(Names.PMO_COUNTY_CODE); } }
        public IField PMO_PROGRAM_SUBTYPE { get { return GetElementByName<IField>(Names.PMO_PROGRAM_SUBTYPE); } }
        public IField PMO_EXP_GLA_ADTC_IND { get { return GetElementByName<IField>(Names.PMO_EXP_GLA_ADTC_IND); } }
        public IField PMO_TWO_PARENT_HH { get { return GetElementByName<IField>(Names.PMO_TWO_PARENT_HH); } }
        public IField PMO_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.PMO_FK_CSB_CASE_NO); } }
        public IField PMO_FK_PGB_PROG_TYPE { get { return GetElementByName<IField>(Names.PMO_FK_PGB_PROG_TYPE); } }
        public IGroup DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT_BASIC); } }
        public IField CLB_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLB_CLIENT_NUMBER); } }
        public IField CLB_CIS_PREFERRED_ID { get { return GetElementByName<IField>(Names.CLB_CIS_PREFERRED_ID); } }
        public IGroup WS_SWITCHES { get { return GetElementByName<IGroup>(Names.WS_SWITCHES); } }
        public IField WS_PAR_EOFSW { get { return GetElementByName<IField>(Names.WS_PAR_EOFSW); } }
        public ICheckField WS_PAR_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_PAR_EOF_NO); } }
        public ICheckField WS_PAR_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_PAR_EOF_YES); } }
        public IField WS_PRM_EOFSW { get { return GetElementByName<IField>(Names.WS_PRM_EOFSW); } }
        public ICheckField WS_PRM_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_PRM_EOF_NO); } }
        public ICheckField WS_PRM_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_PRM_EOF_YES); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.INP_CLT_NBR, FieldType.String, 10);

            IField INP_PGM_CD_local = recordDef.CreateNewField(Names.INP_PGM_CD, FieldType.String, 3);
            recordDef.CreateNewGroupRedefine("FILLER", INP_PGM_CD_local, (FILLER) =>
            {
                FILLER.CreateNewField(Names.INP_PGM_TYP, FieldType.String, 2);
                FILLER.CreateNewFillerField(1, FillWith.Hashes);
            });

            IField INP_CUR_DT_local = recordDef.CreateNewField(Names.INP_CUR_DT, FieldType.UnsignedNumeric, 8);
            recordDef.CreateNewGroupRedefine("FILLER_d3", INP_CUR_DT_local, (FILLER_d3) =>
            {
                FILLER_d3.CreateNewField(Names.INP_CUR_YM, FieldType.UnsignedNumeric, 6);
                FILLER_d3.CreateNewFillerField(2, FillWith.Hashes);
            });
            recordDef.CreateNewField(Names.WRK_BEN_YM, FieldType.UnsignedNumeric, 6);
            recordDef.CreateNewField(Names.WRK_CSE_NBR, FieldType.String, 8);
            recordDef.CreateNewField(Names.WRK_PRT_EOF_IND, FieldType.String, 1)
                .NewCheckField(Names.WRK_PRT_EOF, "Y")
                ;

            recordDef.CreateNewGroup(Names.WRK_PGM_ERR, (WRK_PGM_ERR) =>
           {
               WRK_PGM_ERR.CreateNewField(Names.WRK_ERR_TYP, FieldType.String, 1)
                   .NewCheckField(Names.WRK_ADA_ERR, "A")
                   ;
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_CD, FieldType.UnsignedNumeric, 4);
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_ACT, FieldType.String, 3)
                   .NewCheckField(Names.WRK_RLF_ERR, "RLF")
                   .NewCheckField(Names.WRK_RLN_ERR, "RLN")
                   ;
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_NBR, FieldType.UnsignedNumeric, 4);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_PARTICIPATION, (DCLKSD_PARTICIPATION) =>
           {
               DCLKSD_PARTICIPATION.CreateNewField(Names.PAR_KESSEP_TIME_STMP, FieldType.String, 20);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PAR_PART_END_DATE, FieldType.String, 10);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PAR_PART_START_DATE, FieldType.String, 10);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PAR_PART_CODE, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PAR_PROGRAM_END_DATE, FieldType.String, 10);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PAR_PROGRAM_SUBTYPE, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PAR_RELATIONSHIP, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PAR_FK_CSB_CASE_NO, FieldType.String, 8);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PAR_FK_PGB_PROG_TYPE, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PAR_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_PROGRAM_MONTH, (DCLKSD_PROGRAM_MONTH) =>
           {
               DCLKSD_PROGRAM_MONTH.CreateNewField(Names.PMO_BENEFIT_MONTH, FieldType.CompInt, 9);
               DCLKSD_PROGRAM_MONTH.CreateNewField(Names.PMO_COUNTY_CODE, FieldType.String, 2);
               DCLKSD_PROGRAM_MONTH.CreateNewField(Names.PMO_PROGRAM_SUBTYPE, FieldType.String, 2);
               DCLKSD_PROGRAM_MONTH.CreateNewField(Names.PMO_EXP_GLA_ADTC_IND, FieldType.String, 1);
               DCLKSD_PROGRAM_MONTH.CreateNewField(Names.PMO_TWO_PARENT_HH, FieldType.String, 2);
               DCLKSD_PROGRAM_MONTH.CreateNewField(Names.PMO_FK_CSB_CASE_NO, FieldType.String, 8);
               DCLKSD_PROGRAM_MONTH.CreateNewField(Names.PMO_FK_PGB_PROG_TYPE, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT_BASIC, (DCLKSD_CLIENT_BASIC) =>
           {
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_CLIENT_NUMBER, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_CIS_PREFERRED_ID, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.WS_SWITCHES, (WS_SWITCHES) =>
           {
               WS_SWITCHES.CreateNewField(Names.WS_PAR_EOFSW, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_PAR_EOF_NO, "N")
                   .NewCheckField(Names.WS_PAR_EOF_YES, "Y")
                   ;
               WS_SWITCHES.CreateNewField(Names.WS_PRM_EOFSW, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_PRM_EOF_NO, "N")
                   .NewCheckField(Names.WS_PRM_EOF_YES, "Y")
                   ;
           });


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXIR70_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXIR70_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_0998512835_IA = "A_0998512835_IA";
            internal const string IMPORT_0001EV = "IMPORT_0001EV";
            internal const string CSE_PERSON_0001ET = "CSE_PERSON_0001ET";
            internal const string NUMBER_0001 = "NUMBER_0001";
            internal const string NUMBER_0001XX = "NUMBER_0001XX";
            internal const string IMPORT_0002EV = "IMPORT_0002EV";
            internal const string PROGRAM_0002ET = "PROGRAM_0002ET";
            internal const string CODE_0002 = "CODE_0002";
            internal const string CODE_0002XX = "CODE_0002XX";
            internal const string IMPORT_PROCESSING_0003EV = "IMPORT_PROCESSING_0003EV";
            internal const string DATE_WORK_AREA_0003ET = "DATE_WORK_AREA_0003ET";
            internal const string DATE_0003 = "DATE_0003";
            internal const string DATE_0003XX = "DATE_0003XX";
            internal const string W_OA = "W_OA";
            internal const string A_0998512836_OA = "A_0998512836_OA";
            internal const string EXPORT_0004EV = "EXPORT_0004EV";
            internal const string PERSON_PROGRAM_0004ET = "PERSON_PROGRAM_0004ET";
            internal const string MED_TYPE_0004 = "MED_TYPE_0004";
            internal const string MED_TYPE_0004XX = "MED_TYPE_0004XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_0998512835_IA { get { return GetElementByName<IGroup>(Names.A_0998512835_IA); } }
        public IGroup IMPORT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_0001EV); } }
        public IGroup CSE_PERSON_0001ET { get { return GetElementByName<IGroup>(Names.CSE_PERSON_0001ET); } }
        public IField NUMBER_0001 { get { return GetElementByName<IField>(Names.NUMBER_0001); } }
        public IField NUMBER_0001XX { get { return GetElementByName<IField>(Names.NUMBER_0001XX); } }
        public IGroup IMPORT_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_0002EV); } }
        public IGroup PROGRAM_0002ET { get { return GetElementByName<IGroup>(Names.PROGRAM_0002ET); } }
        public IField CODE_0002 { get { return GetElementByName<IField>(Names.CODE_0002); } }
        public IField CODE_0002XX { get { return GetElementByName<IField>(Names.CODE_0002XX); } }
        public IGroup IMPORT_PROCESSING_0003EV { get { return GetElementByName<IGroup>(Names.IMPORT_PROCESSING_0003EV); } }
        public IGroup DATE_WORK_AREA_0003ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0003ET); } }
        public IField DATE_0003 { get { return GetElementByName<IField>(Names.DATE_0003); } }
        public IField DATE_0003XX { get { return GetElementByName<IField>(Names.DATE_0003XX); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_0998512836_OA { get { return GetElementByName<IGroup>(Names.A_0998512836_OA); } }
        public IGroup EXPORT_0004EV { get { return GetElementByName<IGroup>(Names.EXPORT_0004EV); } }
        public IGroup PERSON_PROGRAM_0004ET { get { return GetElementByName<IGroup>(Names.PERSON_PROGRAM_0004ET); } }
        public IField MED_TYPE_0004 { get { return GetElementByName<IField>(Names.MED_TYPE_0004); } }
        public IField MED_TYPE_0004XX { get { return GetElementByName<IField>(Names.MED_TYPE_0004XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_0998512835_IA, (A_0998512835_IA) =>
               {
                   A_0998512835_IA.CreateNewGroup(Names.IMPORT_0001EV, (IMPORT_0001EV) =>
                   {
                       IMPORT_0001EV.CreateNewGroup(Names.CSE_PERSON_0001ET, (CSE_PERSON_0001ET) =>
                       {

                           IField NUMBER_0001_local = CSE_PERSON_0001ET.CreateNewField(Names.NUMBER_0001, FieldType.String, 10);
                           CSE_PERSON_0001ET.CreateNewFieldRedefine(Names.NUMBER_0001XX, FieldType.String, NUMBER_0001_local, 10);
                       });
                   });
                   A_0998512835_IA.CreateNewGroup(Names.IMPORT_0002EV, (IMPORT_0002EV) =>
                   {
                       IMPORT_0002EV.CreateNewGroup(Names.PROGRAM_0002ET, (PROGRAM_0002ET) =>
                       {

                           IField CODE_0002_local = PROGRAM_0002ET.CreateNewField(Names.CODE_0002, FieldType.String, 3);
                           PROGRAM_0002ET.CreateNewFieldRedefine(Names.CODE_0002XX, FieldType.String, CODE_0002_local, 3);
                       });
                   });
                   A_0998512835_IA.CreateNewGroup(Names.IMPORT_PROCESSING_0003EV, (IMPORT_PROCESSING_0003EV) =>
                   {
                       IMPORT_PROCESSING_0003EV.CreateNewGroup(Names.DATE_WORK_AREA_0003ET, (DATE_WORK_AREA_0003ET) =>
                       {

                           IField DATE_0003_local = DATE_WORK_AREA_0003ET.CreateNewField(Names.DATE_0003, FieldType.SignedNumeric, 8);
                           DATE_WORK_AREA_0003ET.CreateNewFieldRedefine(Names.DATE_0003XX, FieldType.String, DATE_0003_local, 8);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_0998512836_OA, (A_0998512836_OA) =>
               {
                   A_0998512836_OA.CreateNewGroup(Names.EXPORT_0004EV, (EXPORT_0004EV) =>
                   {
                       EXPORT_0004EV.CreateNewGroup(Names.PERSON_PROGRAM_0004ET, (PERSON_PROGRAM_0004ET) =>
                       {

                           IField MED_TYPE_0004_local = PERSON_PROGRAM_0004ET.CreateNewField(Names.MED_TYPE_0004, FieldType.String, 2);
                           PERSON_PROGRAM_0004ET.CreateNewFieldRedefine(Names.MED_TYPE_0004XX, FieldType.String, MED_TYPE_0004_local, 2);
                       });
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(W_IA, args, 2);
            SetPassedParm(W_OA, args, 3);
            SetPassedParm(PSMGR_EAB_DATA, args, 4);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(W_IA, args, 2);
            SetReturnParm(W_OA, args, 3);
            SetReturnParm(PSMGR_EAB_DATA, args, 4);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXIR70 : EABBase
    {

        #region Public Constructors
        public SWEXIR70()
            : base()
        {
            this.ProgramName.SetValue("SWEXIR70");

            WS = new SWEXIR70_ws();
            LS = new SWEXIR70_ls();
            //DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryTextWithUR("PART", "SELECT PART_END_DATE, PART_START_DATE, FK_CSB_CASE_NO, FK_PGB_PROG_TYPE, FK_CLB_CLIENT_NO FROM KSD_PARTICIPATION WHERE FK_CLB_CLIENT_NO = {0}  AND FK_PGB_PROG_TYPE = {1}  ORDER BY FK_CLB_CLIENT_NO, FK_PGB_PROG_TYPE, PART_START_DATE, FK_CSB_CASE_NO",  //COBOL==>EXEC SQL DECLARE PART CURSOR FOR SELECT PART_END_DATE , PART_START_DATE , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , FK_CLB_CLIENT_NO FROM KSD_PARTICIPATION WHERE FK_CLB_CLIENT_NO = :PAR-FK-CLB-CLIENT-NO AND FK_PGB_PROG_TYPE = :PAR-FK-PGB-PROG-TYPE ORDER BY FK_CLB_CLIENT_NO , FK_PGB_PROG_TYPE , PART_START_DATE , FK_CSB_CASE_NO WITH UR END-EXEC
                                WS.PAR_FK_CLB_CLIENT_NO, WS.PAR_FK_PGB_PROG_TYPE);

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXIR70_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXIR70_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_0998512832(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_0998512832
        /// </summary>
        private void M_MAIN_0998512832(string returnMethod = "")
        {
            M_PARA_0998512832_INIT("M_PARA_0998512832_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-0998512832-INIT THRU PARA-0998512832-INIT-EXIT.
            if (returnMethod != "" && returnMethod != "M_MAIN_0998512832") { M_0000_BEG_PGM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_BEG_PGM
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  INCLUDE NAME:  SWCSZG71
        ///COMMENT:      EAB NAME:  SWEXIR70
        ///COMMENT:   DESCRIPTION:  RETRIEVE PROGRAM SUBTYPE
        ///COMMENT: *****************************************************************
        ///COMMENT:  09-17-01  MLS  CREATED
        ///COMMENT:  4-14      P.LEAK CHANGE ABABAS CALLS TO DB2 (PHASE 3)
        ///COMMENT:  12/17/15  R.MATHEWS  CQ35825 - P3 PREFERRED ID CODING CHGS
        ///COMMENT:  08/29/17  RKM                  ADDED WITH UR TO QUERIES
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_0000_BEG_PGM(string returnMethod = "")
        {
            //COMMENT:      DISPLAY 'ARE WE IN SWCSZG71'
            //COMMENT:      DISPLAY NUMBER-0001.
            //COMMENT:      DISPLAY CODE-0002.
            //COMMENT:      DISPLAY DATE-0003.
            if (LS.NUMBER_0001.IsEqualTo("CLOSE"))                                                              //COBOL==> IF NUMBER-0001 = 'CLOSE'
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (LS.NUMBER_0001.IsGreaterThan(SPACES))                                                           //COBOL==> IF NUMBER-0001 > SPACES
                {
                    M_1100_PROCESS(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM 1100-PROCESS
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:      DISPLAY 'GOBACK'
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_1100_PROCESS
        /// </summary>
        private void M_1100_PROCESS(string returnMethod = "")
        {
            WS.WRK_PGM_ERR.ResetToInitialValue();                                                               //COBOL==> INITIALIZE WRK-PGM-ERR.
            WS.INP_CLT_NBR.SetValue(LS.NUMBER_0001);                                                            //COBOL==> MOVE NUMBER-0001 TO INP-CLT-NBR.
            WS.INP_PGM_CD.SetValue(LS.CODE_0002);                                                               //COBOL==> MOVE CODE-0002 TO INP-PGM-CD.
            WS.INP_CUR_DT.SetValue(LS.DATE_0003);                                                               //COBOL==> MOVE DATE-0003 TO INP-CUR-DT.
            M_1000_GET_CSE_NBR(); if (Control.ExitProgram) { return; }                                            //COBOL==> PERFORM 1000-GET-CSE-NBR.
            if (WS.WRK_CSE_NBR.IsGreaterThan(SPACES))                                                           //COBOL==> IF WRK-CSE-NBR > SPACES
            {
                M_2000_GET_SUB_TYP(); if (Control.ExitProgram) { return; }                                            //COBOL==> PERFORM 2000-GET-SUB-TYP
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WRK_ADA_ERR.Value)                                                                           //COBOL==> IF WRK-ADA-ERR
            {
                DisplayToLog("ADABAS ERROR ENCOUNTERED");                                                           //COBOL==> DISPLAY 'ADABAS ERROR ENCOUNTERED'
                DisplayToLog("ERR TYPE " + WS.WRK_ERR_TYP.AsString());                                              //COBOL==> DISPLAY 'ERR TYPE ' , WRK-ERR-TYP
                DisplayToLog("ADA CD   " + WS.WRK_ADA_CD.AsString());                                               //COBOL==> DISPLAY 'ADA CD   ' , WRK-ADA-CD
                DisplayToLog("ADA ACT  " + WS.WRK_ADA_ACT.AsString());                                              //COBOL==> DISPLAY 'ADA ACT  ' , WRK-ADA-ACT
                DisplayToLog("ADA NBR  " + WS.WRK_ADA_NBR.AsString());                                              //COBOL==> DISPLAY 'ADA NBR  ' , WRK-ADA-NBR
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1100_PROCESS") { M_1000_GET_CSE_NBR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1000_GET_CSE_NBR
        /// </summary>
        private void M_1000_GET_CSE_NBR(string returnMethod = "")
        {
            WS.WRK_CSE_NBR.SetValueWithSpaces();                                                                //COBOL==> MOVE SPACES TO WRK-CSE-NBR.
            WS.WRK_PRT_EOF_IND.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO WRK-PRT-EOF-IND.
                                                                                                                //COMMENT:      MOVE INP-CLT-NBR TO V-CLIENT-NUMBER0161.
                                                                                                                //COMMENT:      MOVE INP-PGM-TYP TO V-PROGRAM-TYPE0161.
                                                                                                                //COMMENT:  RKM - CHANGES FOR CLIENT PREFERRED ID
                                                                                                                //COMMENT:      MOVE INP-CLT-NBR TO PAR-FK-CLB-CLIENT-NO.
            WS.DCLKSD_CLIENT_BASIC.ResetToInitialValue();                                                       //COBOL==> INITIALIZE DCLKSD-CLIENT-BASIC.
            DbConv.ExecuteSqlQueryWithUR("SELECT CLIENT_NUMBER , CIS_PREFERRED_ID INTO {0} , {1} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {2} ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CIS_PREFERRED_ID INTO :CLB-CLIENT-NUMBER , :CLB-CIS-PREFERRED-ID FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :INP-CLT-NBR WITH UR END-EXEC.
                                 WS.CLB_CLIENT_NUMBER, WS.CLB_CIS_PREFERRED_ID, WS.INP_CLT_NBR);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                if ((WS.CLB_CIS_PREFERRED_ID.IsNumericValue())
             && (!(WS.CLB_CIS_PREFERRED_ID.IsEqualTo(WS.CLB_CLIENT_NUMBER))))  //COBOL==> IF CLB-CIS-PREFERRED-ID IS NUMERIC AND CLB-CIS-PREFERRED-ID NOT = CLB-CLIENT-NUMBER
                {
                    WS.PAR_FK_CLB_CLIENT_NO.SetValue(WS.CLB_CIS_PREFERRED_ID);                                          //COBOL==> MOVE CLB-CIS-PREFERRED-ID TO PAR-FK-CLB-CLIENT-NO
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.PAR_FK_CLB_CLIENT_NO.SetValue(WS.INP_CLT_NBR);                                                   //COBOL==> MOVE INP-CLT-NBR TO PAR-FK-CLB-CLIENT-NO
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_PRT_EOF.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-EOF TO TRUE
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(154);                                                                       //COBOL==> MOVE 154 TO WRK-ADA-NBR
            }                                                                                                   //COBOL==> END-EVALUATE.
            WS.PAR_FK_PGB_PROG_TYPE.SetValue(WS.INP_PGM_TYP);                                                   //COBOL==> MOVE INP-PGM-TYP TO PAR-FK-PGB-PROG-TYPE.
                                                                                                                //COMMENT:      PERFORM 1200-GET-FST-PRT.
                                                                                                                //COMMENT:      IF  WRK-PRT-EOF
                                                                                                                //COMMENT:      OR  WRK-CSE-NBR > SPACES
                                                                                                                //COMMENT:          CONTINUE
                                                                                                                //COMMENT:      ELSE
                                                                                                                //COMMENT:          SET WRK-RLN-ERR TO TRUE
                                                                                                                //COMMENT:          PERFORM 1400-GET-NXT-PRT
                                                                                                                //COMMENT:          UNTIL   WRK-PRT-EOF
                                                                                                                //COMMENT:          OR      WRK-CSE-NBR > SPACES
                                                                                                                //COMMENT:      END-IF.
                                                                                                                //COMMENT: 1200-GET-FST-PRT.
                                                                                                                //COMMENT:      @READLOGICAL0161 FIRST.
                                                                                                                //COMMENT:      SET WRK-RLF-ERR TO TRUE.
                                                                                                                //COMMENT: 1400-GET-NXT-PRT.
                                                                                                                //COMMENT:      @READLOGICAL0161.
                                                                                                                //COMMENT:  RKM - CHANGES FOR CLIENT PREFERRED ID
            if (!(WS.WRK_ADA_ERR.Value))                                                                       //COBOL==> IF NOT WRK-ADA-ERR
            {
                WS.WS_PAR_EOF_NO.SetValue(true);                                                                    //COBOL==> SET WS-PAR-EOF-NO TO TRUE
                M_8200_DECLARE_PART("M_8200_EXIT"); if (Control.ExitProgram) { return; }                              //COBOL==> PERFORM 8200-DECLARE-PART THRU 8200-EXIT
                if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
                {
                    M_8210_OPEN_PART("M_8210_EXIT"); if (Control.ExitProgram) { return; }                                 //COBOL==> PERFORM 8210-OPEN-PART THRU 8210-EXIT
                }                                                                                                   //COBOL==> END-IF
                if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
                {
                    while (!((WS.WS_PAR_EOF_YES.Value) || (WS.WRK_CSE_NBR.IsGreaterThan(SPACES))))                      //COBOL==> PERFORM 8220-FETCH-PART THRU 8220-EXIT UNTIL WS-PAR-EOF-YES OR WRK-CSE-NBR > SPACES
                    {
                        M_8220_FETCH_PART("M_8220_EXIT"); if (Control.ExitProgram) { return; }
                    }
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            M_8130_CLOSE_PART("M_8130_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 8130-CLOSE-PART THRU 8130-EXIT.
            if (returnMethod != "" && returnMethod != "M_1000_GET_CSE_NBR") { M_1600_CHK_PRT_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1600_CHK_PRT_REC
        /// </summary>
        /// <remarks>
        ///COMMENT:      PERFORM 1600-CHK-PRT-REC.
        /// </remarks>
        private void M_1600_CHK_PRT_REC(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '1600-CHK-PRT-REC'.
            //COMMENT:      IF  EOF0161
            //COMMENT:          SET WRK-PRT-EOF TO TRUE
            //COMMENT:      ELSE
            //COMMENT:          IF  RESPONSE-CODE0161 > ZERO
            //COMMENT:              SET  WRK-PRT-EOF        TO TRUE
            //COMMENT:              SET  WRK-ADA-ERR        TO TRUE
            //COMMENT:              MOVE RESPONSE-CODE0161  TO WRK-ADA-CD
            //COMMENT:              MOVE 161                TO WRK-ADA-NBR
            //COMMENT:          ELSE
            if ((WS.INP_CUR_DT.IsGreaterThanOrEqualTo(WS.PAR_PART_START_DATE))
             && (WS.INP_CUR_DT.IsLessThanOrEqualTo(WS.PAR_PART_END_DATE)))  //COBOL==> IF INP-CUR-DT >= PAR-PART-START-DATE AND INP-CUR-DT <= PAR-PART-END-DATE
            {
                WS.WRK_CSE_NBR.SetValue(WS.PAR_FK_CSB_CASE_NO);                                                     //COBOL==> MOVE PAR-FK-CSB-CASE-NO TO WRK-CSE-NBR
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1600_CHK_PRT_REC") { M_2000_GET_SUB_TYP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_GET_SUB_TYP
        /// </summary>
        private void M_2000_GET_SUB_TYP(string returnMethod = "")
        {
            //COMMENT:      DISPLAY '2000-GET-SUB-TYP'
            WS.PMO_FK_CSB_CASE_NO.SetValue(WS.PAR_FK_CSB_CASE_NO);                                              //COBOL==> MOVE PAR-FK-CSB-CASE-NO TO PMO-FK-CSB-CASE-NO.
            WS.PMO_FK_PGB_PROG_TYPE.SetValue(WS.PAR_FK_PGB_PROG_TYPE);                                          //COBOL==> MOVE PAR-FK-PGB-PROG-TYPE TO PMO-FK-PGB-PROG-TYPE.
                                                                                                                //COMMENT:      COMPUTE WRK-BEN-YM = 999999 - INP-CUR-YM.
                                                                                                                //COMMENT:      MOVE WRK-BEN-YM TO V-BENEFIT-MONTH-COMP0155.
            WS.PMO_BENEFIT_MONTH.SetValue(WS.INP_CUR_YM);                                                       //COBOL==> MOVE INP-CUR-YM TO PMO-BENEFIT-MONTH.
                                                                                                                //COMMENT:      @READLOGICAL0155 FIRST.
            M_8240_SELECT_PROGRAM_MO("M_8240_EXIT"); if (Control.ExitProgram) { return; }                         //COBOL==> PERFORM 8240-SELECT-PROGRAM-MO THRU 8240-EXIT
                                                                                                                  //COMMENT:      IF  EOF0155
                                                                                                                  //COMMENT:          CONTINUE
                                                                                                                  //COMMENT:      ELSE
                                                                                                                  //COMMENT:          IF  RESPONSE-CODE0155 > ZERO
                                                                                                                  //COMMENT:              SET  WRK-ADA-ERR        TO TRUE
                                                                                                                  //COMMENT:              SET  WRK-RLF-ERR        TO TRUE
                                                                                                                  //COMMENT:              MOVE RESPONSE-CODE0155  TO WRK-ADA-CD
                                                                                                                  //COMMENT:              MOVE 155                TO WRK-ADA-NBR
                                                                                                                  //COMMENT:          ELSE
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                if (((WS.PMO_FK_CSB_CASE_NO.IsEqualTo(WS.PAR_FK_CSB_CASE_NO))
             && (WS.PMO_FK_PGB_PROG_TYPE.IsEqualTo(WS.PAR_FK_PGB_PROG_TYPE)))
             && (WS.PMO_BENEFIT_MONTH.IsEqualTo(WS.INP_CUR_YM)))  //COBOL==> IF PMO-FK-CSB-CASE-NO = PAR-FK-CSB-CASE-NO AND PMO-FK-PGB-PROG-TYPE = PAR-FK-PGB-PROG-TYPE AND PMO-BENEFIT-MONTH = INP-CUR-YM
                {
                    LS.MED_TYPE_0004.SetValue(WS.PMO_PROGRAM_SUBTYPE);                                                  //COBOL==> MOVE PMO-PROGRAM-SUBTYPE TO MED-TYPE-0004
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_2000_GET_SUB_TYP") { M_8200_DECLARE_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8200_DECLARE_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: 9900-CLOSE.
        ///COMMENT:     @CLOSE
        ///COMMENT: *****************************************************************
        ///COMMENT:  DECLARE CURSOR FOR KSD PARTICIPATION CURSOR DB2 TABLE ROUTINE *
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8200_DECLARE_PART(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '8200-DECLARE'
            // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE PART CURSOR FOR SELECT PART_END_DATE , PART_START_DATE , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , FK_CLB_CLIENT_NO FROM KSD_PARTICIPATION WHERE FK_CLB_CLIENT_NO = :PAR-FK-CLB-CLIENT-NO AND FK_PGB_PROG_TYPE = :PAR-FK-PGB-PROG-TYPE ORDER BY FK_CLB_CLIENT_NO , FK_PGB_PROG_TYPE , PART_START_DATE , FK_CSB_CASE_NO WITH UR END-EXEC.
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_PRT_EOF.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-EOF TO TRUE
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(161);                                                                       //COBOL==> MOVE 161 TO WRK-ADA-NBR
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8200_DECLARE_PART") { M_8200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8200_EXIT
        /// </summary>
        private void M_8200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8200_EXIT") { M_8210_OPEN_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8210_OPEN_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD PARTICIPATION DB2 TABLE ROUTINE           *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_8210_OPEN_PART(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '8210-OPEN'
            DbConv.OpenReader("PART");                                                                          //COBOL==> EXEC SQL OPEN PART END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_PRT_EOF.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-EOF TO TRUE
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(161);                                                                       //COBOL==> MOVE 161 TO WRK-ADA-NBR
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8210_OPEN_PART") { M_8210_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8210_EXIT
        /// </summary>
        private void M_8210_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8210_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8210_EXIT") { M_8220_FETCH_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8220_FETCH_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSD PARTICIPATION DB2 TABLE ROUTINE           *
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8220_FETCH_PART(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '8220-FETCH'
            DbConv.FetchReaderRow("PART",                                                                    //COBOL==> EXEC SQL FETCH PART INTO :PAR-PART-END-DATE , :PAR-PART-START-DATE , :PAR-FK-CSB-CASE-NO , :PAR-FK-PGB-PROG-TYPE , :PAR-FK-CLB-CLIENT-NO END-EXEC.
                             WS.PAR_PART_END_DATE, WS.PAR_PART_START_DATE, WS.PAR_FK_CSB_CASE_NO, WS.PAR_FK_PGB_PROG_TYPE, WS.PAR_FK_CLB_CLIENT_NO);
            //COMMENT:     DISPLAY SQLCODE
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                M_1600_CHK_PRT_REC(); if (Control.ExitProgram) { return; }                                            //COBOL==> PERFORM 1600-CHK-PRT-REC
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_PAR_EOF_YES.SetValue(true);                                                                   //COBOL==> SET WS-PAR-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_PRT_EOF.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-EOF TO TRUE
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(161);                                                                       //COBOL==> MOVE 161 TO WRK-ADA-NBR
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8220_FETCH_PART") { M_8220_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8220_EXIT
        /// </summary>
        private void M_8220_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8220_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8220_EXIT") { M_8130_CLOSE_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8130_CLOSE_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_8130_CLOSE_PART(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '8130-CLOSE'
            DbConv.CloseReader("PART");                                                                         //COBOL==> EXEC SQL CLOSE PART END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_PRT_EOF.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-EOF TO TRUE
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(161);                                                                       //COBOL==> MOVE 161 TO WRK-ADA-NBR
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8130_CLOSE_PART") { M_8130_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8130_EXIT
        /// </summary>
        private void M_8130_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8130_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8130_EXIT") { M_8240_SELECT_PROGRAM_MO(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8240_SELECT_PROGRAM_MO
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************************************************************
        ///COMMENT:  SELECT FOR KSD PROGRAM MONTH DB2 TABLE ROUTINE                *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_8240_SELECT_PROGRAM_MO(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '8240-SELECT'
            DbConv.ExecuteSqlQueryWithUR("SELECT BENEFIT_MONTH , PROGRAM_SUBTYPE , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE INTO {0} , {1} , {2} , {3} FROM KSD_PROGRAM_MONTH WHERE FK_CSB_CASE_NO = {4} AND FK_PGB_PROG_TYPE = {5} AND BENEFIT_MONTH = {6} ",  //COBOL==> EXEC SQL SELECT BENEFIT_MONTH , PROGRAM_SUBTYPE , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE INTO :PMO-BENEFIT-MONTH , :PMO-PROGRAM-SUBTYPE , :PMO-FK-CSB-CASE-NO , :PMO-FK-PGB-PROG-TYPE FROM KSD_PROGRAM_MONTH WHERE FK_CSB_CASE_NO = :PMO-FK-CSB-CASE-NO AND FK_PGB_PROG_TYPE = :PMO-FK-PGB-PROG-TYPE AND BENEFIT_MONTH = :PMO-BENEFIT-MONTH WITH UR END-EXEC.
                                 WS.PMO_BENEFIT_MONTH, WS.PMO_PROGRAM_SUBTYPE, WS.PMO_FK_CSB_CASE_NO, WS.PMO_FK_PGB_PROG_TYPE, WS.PMO_FK_CSB_CASE_NO, WS.PMO_FK_PGB_PROG_TYPE, WS.PMO_BENEFIT_MONTH);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_PRM_EOF_YES.SetValue(true);                                                                   //COBOL==> SET WS-PRM-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_RLF_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-RLF-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(155);                                                                       //COBOL==> MOVE 155 TO WRK-ADA-NBR
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8240_SELECT_PROGRAM_MO") { M_8240_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8240_EXIT
        /// </summary>
        private void M_8240_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8240_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8240_EXIT") { M_PARA_0998512832_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0998512832_INIT
        /// </summary>
        private void M_PARA_0998512832_INIT(string returnMethod = "")
        {
            LS.EXPORT_0004EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0004EV .
            if (returnMethod != "" && returnMethod != "M_PARA_0998512832_INIT") { M_PARA_0998512832_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0998512832_INIT_EXIT
        /// </summary>
        private void M_PARA_0998512832_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0998512832_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
