#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:51:42 PM
   **        *   FROM COBOL PGM   :  SWEXIU10
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                   INFORMATION ENGINEERING FACILITY (TM)
                       TEXAS INSTRUMENTS INC.
                COPYRIGHT (C) TEXAS INSTRUMENTS INC. 1997
       NAME: EAB_UPDATE_CSE_PERSON            DATE: 97/06/25
       TARGET OS:   MVS                       TIME: 14:32:02
       TARGET DBMS: DB2                       USER: SWMTSXC
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
   **************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Control.CICS;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXIU10_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXIU10_ws_WorkingStorage";
            internal const string FUNC_0329176144_ESC_FLAG = "FUNC_0329176144_ESC_FLAG";
            internal const string EXTERNAL_ACTION_BLOCK_WS = "EXTERNAL_ACTION_BLOCK_WS";
            internal const string SRADALNK = "SRADALNK";
            internal const string SRMODLNK = "SRMODLNK";
            internal const string MV_ABEND_FIELDS = "MV_ABEND_FIELDS";
            internal const string MV_ABEND_TYPE = "MV_ABEND_TYPE";
            internal const string MV_ABEND_TYPE_NONE = "MV_ABEND_TYPE_NONE";
            internal const string MV_ABEND_TYPE_ADABAS = "MV_ABEND_TYPE_ADABAS";
            internal const string MV_ABEND_TYPE_CICS = "MV_ABEND_TYPE_CICS";
            internal const string MV_ABEND_ADABAS = "MV_ABEND_ADABAS";
            internal const string MV_ADA_FILE_NUMBER = "MV_ADA_FILE_NUMBER";
            internal const string MV_ADA_FILE_ACTION = "MV_ADA_FILE_ACTION";
            internal const string MV_ADA_RESPONSE_CD = "MV_ADA_RESPONSE_CD";
            internal const string MV_ABEND_CICS = "MV_ABEND_CICS";
            internal const string MV_CICS_RESOURCE_NM = "MV_CICS_RESOURCE_NM";
            internal const string MV_CICS_FUNCTION_CD = "MV_CICS_FUNCTION_CD";
            internal const string MV_CICS_RESPONSE_CD = "MV_CICS_RESPONSE_CD";
            internal const string MV_ABS_TIME = "MV_ABS_TIME";
            internal const string MV_CCYYMMDD_X8 = "MV_CCYYMMDD_X8";
            internal const string MV_CC = "MV_CC";
            internal const string MV_YYMMDD_X6 = "MV_YYMMDD_X6";
            internal const string MV_YY = "MV_YY";
            internal const string MV_MM = "MV_MM";
            internal const string MV_DD = "MV_DD";
            internal const string MV_YYMMDD = "MV_YYMMDD";
            internal const string MV_CURRENT_CCYY = "MV_CURRENT_CCYY";
            internal const string MV_CURRENT_MMDD = "MV_CURRENT_MMDD";
            internal const string MV_CCYYMMDD = "MV_CCYYMMDD";
            internal const string MV_COMPLEMENT_DATE = "MV_COMPLEMENT_DATE";
            internal const string MV_WRK_PTR = "MV_WRK_PTR";
            internal const string MV_ISN = "MV_ISN";
            internal const string MV_KCC_PTR = "MV_KCC_PTR";
            internal const string MV_CLIENT_INFO_NUMBER = "MV_CLIENT_INFO_NUMBER";
            internal const string MV_CLIENT_FOUND_IND = "MV_CLIENT_FOUND_IND";
            internal const string MV_CLIENT_FOUND = "MV_CLIENT_FOUND";
            internal const string MV_CLIENT_POINTER_X31 = "MV_CLIENT_POINTER_X31";
            internal const string MV_CLIENT_POINTER_X10 = "MV_CLIENT_POINTER_X10";
            internal const string MV_CLIENT_POINTER_X21 = "MV_CLIENT_POINTER_X21";
            internal const string MV_CLIENT_ID_KEY = "MV_CLIENT_ID_KEY";
            internal const string MV_CIK_CLIENT_POINTER_X10 = "MV_CIK_CLIENT_POINTER_X10";
            internal const string MV_CIK_CLIENT_NAME = "MV_CIK_CLIENT_NAME";
            internal const string MV_CIK_SSN = "MV_CIK_SSN";
            internal const string MV_CIK_DATE_OF_BIRTH_SEX = "MV_CIK_DATE_OF_BIRTH_SEX";
            internal const string MV_CIK_DATE_OF_BIRTH = "MV_CIK_DATE_OF_BIRTH";
            internal const string MV_CIK_SEX = "MV_CIK_SEX";
            internal const string MV_CIK_CLIENT_POINTER_X21 = "MV_CIK_CLIENT_POINTER_X21";
            internal const string MV_CIK_VERIFIED_SSN_FLAG = "MV_CIK_VERIFIED_SSN_FLAG";
            internal const string MV_CIK_SYSTEM_PARTICIPATION = "MV_CIK_SYSTEM_PARTICIPATION";
            internal const string MV_CIK_SYS_PART_AE = "MV_CIK_SYS_PART_AE";
            internal const string MV_CIK_SYS_PART_CSE = "MV_CIK_SYS_PART_CSE";
            internal const string MV_CIK_SYS_PART_KANPAY = "MV_CIK_SYS_PART_KANPAY";
            internal const string MV_CIK_SYS_PART_KSCARES = "MV_CIK_SYS_PART_KSCARES";
            internal const string MV_CIK_SYS_PART_FACTS = "MV_CIK_SYS_PART_FACTS";
            internal const string MV_CIK_SYS_PART_KMIS = "MV_CIK_SYS_PART_KMIS";
            internal const string MV_RECORD_NAME = "MV_RECORD_NAME";
            internal const string MV_RECORD_LAST_NAME = "MV_RECORD_LAST_NAME";
            internal const string MV_RECORD_FIRST_NAME = "MV_RECORD_FIRST_NAME";
            internal const string MV_RECORD_FIRST_NAME_1 = "MV_RECORD_FIRST_NAME_1";
            internal const string MV_RECORD_FIRST_NAME_11 = "MV_RECORD_FIRST_NAME_11";
            internal const string MV_RECORD_INITIAL = "MV_RECORD_INITIAL";
            internal const string MV_PHONETIC_DATA = "MV_PHONETIC_DATA";
            internal const string MV_PHONETIC_1 = "MV_PHONETIC_1";
            internal const string MV_PHONETIC_CODE = "MV_PHONETIC_CODE";
            internal const string MV_PHONETIC_3 = "MV_PHONETIC_3";
            internal const string MV_DATE_OF_BIRTH_SEX = "MV_DATE_OF_BIRTH_SEX";
            internal const string MV_DATE_OF_BIRTH_X8 = "MV_DATE_OF_BIRTH_X8";
            internal const string MV_DATE_OF_BIRTH = "MV_DATE_OF_BIRTH";
            internal const string MV_SEX = "MV_SEX";
            internal const string MV_CLIENT_POINTER = "MV_CLIENT_POINTER";
            internal const string MV_CLIENT_ID = "MV_CLIENT_ID";
            internal const string MV_CLIENT_ID_910 = "MV_CLIENT_ID_910";
            internal const string MV_CLIENT_POINTER_FLAGS = "MV_CLIENT_POINTER_FLAGS";
            internal const string MV_VERIFIED_SSN_FLAG = "MV_VERIFIED_SSN_FLAG";
            internal const string MV_SYSTEM_PARTICIPATION = "MV_SYSTEM_PARTICIPATION";
            internal const string MV_SYS_PART_AE = "MV_SYS_PART_AE";
            internal const string MV_SYS_PART_AE_YES = "MV_SYS_PART_AE_YES";
            internal const string MV_SYS_PART_CSE = "MV_SYS_PART_CSE";
            internal const string MV_SYS_PART_CSE_YES = "MV_SYS_PART_CSE_YES";
            internal const string MV_SYS_PART_KANPAY = "MV_SYS_PART_KANPAY";
            internal const string MV_SYS_PART_KANPAY_YES = "MV_SYS_PART_KANPAY_YES";
            internal const string MV_SYS_PART_KSCARES = "MV_SYS_PART_KSCARES";
            internal const string MV_SYS_PART_KSCARES_YES = "MV_SYS_PART_KSCARES_YES";
            internal const string MV_SYS_PART_FACTS = "MV_SYS_PART_FACTS";
            internal const string MV_SYS_PART_FACTS_YES = "MV_SYS_PART_FACTS_YES";
            internal const string MV_SYS_PART_KMIS = "MV_SYS_PART_KMIS";
            internal const string MV_SYS_PART_KMIS_YES = "MV_SYS_PART_KMIS_YES";
            internal const string MV_AE_CASE_BASIC_TABLE = "MV_AE_CASE_BASIC_TABLE";
            internal const string MV_AE_CASE_BASIC_NUMBER = "MV_AE_CASE_BASIC_NUMBER";
            internal const string MV_AE_CASE_BASIC_ISN = "MV_AE_CASE_BASIC_ISN";
            internal const string MV_ACB_PTR = "MV_ACB_PTR";
            internal const string MC_ACB_MAX = "MC_ACB_MAX";
            internal const string IMP_CLIENT_NUMBER_X10 = "IMP_CLIENT_NUMBER_X10";
            internal const string IMP_CLIENT_NUMBER = "IMP_CLIENT_NUMBER";
            internal const string IMP_CLIENT_KEY = "IMP_CLIENT_KEY";
            internal const string IMP_CLIENT_KEY_RED = "IMP_CLIENT_KEY_RED";
            internal const string IMP_CLIKEY_CLIENT_NUMBER = "IMP_CLIKEY_CLIENT_NUMBER";
            internal const string IMP_CLIKEY_CLIENT_NAME = "IMP_CLIKEY_CLIENT_NAME";
            internal const string IMP_CLIKEY_SSN = "IMP_CLIKEY_SSN";
            internal const string IMP_CLIKEY_DATE_OF_BIRTH = "IMP_CLIKEY_DATE_OF_BIRTH";
            internal const string IMP_CLIKEY_SEX = "IMP_CLIKEY_SEX";
            internal const string IMP_CLIKEY_VERIFIED_SSN_FLAG = "IMP_CLIKEY_VERIFIED_SSN_FLAG";
            internal const string IMP_CLIKEY_SYS_PART = "IMP_CLIKEY_SYS_PART";
            internal const string IMP_CLIENT_INFO = "IMP_CLIENT_INFO";
            internal const string IMP_NAME = "IMP_NAME";
            internal const string IMP_LAST_NAME = "IMP_LAST_NAME";
            internal const string IMP_FIRST_NAME = "IMP_FIRST_NAME";
            internal const string IMP_INITIAL = "IMP_INITIAL";
            internal const string IMP_DATE_OF_BIRTH_SEX = "IMP_DATE_OF_BIRTH_SEX";
            internal const string IMP_DATE_OF_BIRTH_X8 = "IMP_DATE_OF_BIRTH_X8";
            internal const string IMP_DATE_OF_BIRTH = "IMP_DATE_OF_BIRTH";
            internal const string IMP_SEX = "IMP_SEX";
            internal const string IMP_SOC_SEC_NUM_X9 = "IMP_SOC_SEC_NUM_X9";
            internal const string IMP_SOC_SEC_NUM = "IMP_SOC_SEC_NUM";
            internal const string IMP_SOC_SEC_NUM_3 = "IMP_SOC_SEC_NUM_3";
            internal const string IMP_SOC_SEC_NUM_3_VALID = "IMP_SOC_SEC_NUM_3_VALID";
            internal const string IMP_SOC_SEC_NUM_2 = "IMP_SOC_SEC_NUM_2";
            internal const string IMP_SOC_SEC_NUM_2_VALID = "IMP_SOC_SEC_NUM_2_VALID";
            internal const string IMP_SOC_SEC_NUM_4 = "IMP_SOC_SEC_NUM_4";
            internal const string IMP_SOC_SEC_NUM_4_VALID = "IMP_SOC_SEC_NUM_4_VALID";
            internal const string CUR_CLIENT_INFO = "CUR_CLIENT_INFO";
            internal const string CUR_NAME = "CUR_NAME";
            internal const string CUR_LAST_NAME = "CUR_LAST_NAME";
            internal const string CUR_FIRST_NAME = "CUR_FIRST_NAME";
            internal const string CUR_INITIAL = "CUR_INITIAL";
            internal const string CUR_DATE_OF_BIRTH_SEX = "CUR_DATE_OF_BIRTH_SEX";
            internal const string CUR_DATE_OF_BIRTH_X8 = "CUR_DATE_OF_BIRTH_X8";
            internal const string CUR_DATE_OF_BIRTH = "CUR_DATE_OF_BIRTH";
            internal const string CUR_SEX = "CUR_SEX";
            internal const string CUR_SOC_SEC_NUM_X9 = "CUR_SOC_SEC_NUM_X9";
            internal const string CUR_SOC_SEC_NUM = "CUR_SOC_SEC_NUM";
            internal const string DCLKSD_CLIENT = "DCLKSD_CLIENT";
            internal const string CLIENT_SSN = "CLIENT_SSN";
            internal const string CLIENT_PREVIOUS_SSN = "CLIENT_PREVIOUS_SSN";
            internal const string CLIENT_PHONETIC_DATA = "CLIENT_PHONETIC_DATA";
            internal const string CLIENT_DT_OF_LAST_UPDATE = "CLIENT_DT_OF_LAST_UPDATE";
            internal const string CLIENT_DATE_OF_BIRTH = "CLIENT_DATE_OF_BIRTH";
            internal const string CLIENT_GENDER = "CLIENT_GENDER";
            internal const string CLIENT_VERIFIED_SSN_FLAG = "CLIENT_VERIFIED_SSN_FLAG";
            internal const string CLIENT_CLIENT_NAME = "CLIENT_CLIENT_NAME";
            internal const string CLIENT_CREATED_BY = "CLIENT_CREATED_BY";
            internal const string CLIENT_CREATED_TIMESTAMP = "CLIENT_CREATED_TIMESTAMP";
            internal const string CLIENT_LAST_MODIFIED_BY = "CLIENT_LAST_MODIFIED_BY";
            internal const string CLIENT_LAST_MODIFIED_TMST = "CLIENT_LAST_MODIFIED_TMST";
            internal const string CLIENT_FK_CLB_CLIENT_NO = "CLIENT_FK_CLB_CLIENT_NO";
            internal const string CLIENT_NAME_TYPE = "CLIENT_NAME_TYPE";
            internal const string DCLKSD_CLIENT_BASIC = "DCLKSD_CLIENT_BASIC";
            internal const string CLIENTB_CLIENT_NUMBER = "CLIENTB_CLIENT_NUMBER";
            internal const string CLIENTB_CLIENT_GIVEN_NAME = "CLIENTB_CLIENT_GIVEN_NAME";
            internal const string CLIENTB_CLIENT_INITIALS = "CLIENTB_CLIENT_INITIALS";
            internal const string CLIENTB_CLIENT_SURNAME = "CLIENTB_CLIENT_SURNAME";
            internal const string CLIENTB_CIS_REPL_IND = "CLIENTB_CIS_REPL_IND";
            internal const string CLIENTB_WORK_PHONE = "CLIENTB_WORK_PHONE";
            internal const string CLIENTB_SSN = "CLIENTB_SSN";
            internal const string CLIENTB_GENDER = "CLIENTB_GENDER";
            internal const string CLIENTB_PARENT_RGHTS_SEV = "CLIENTB_PARENT_RGHTS_SEV";
            internal const string CLIENTB_PRNT_RGHTS_SEV_DT = "CLIENTB_PRNT_RGHTS_SEV_DT";
            internal const string CLIENTB_LEGAL_STATUS = "CLIENTB_LEGAL_STATUS";
            internal const string CLIENTB_INSURANCE_CODE = "CLIENTB_INSURANCE_CODE";
            internal const string CLIENTB_INITIAL_CUSTODY_DT = "CLIENTB_INITIAL_CUSTODY_DT";
            internal const string CLIENTB_HOME_PHONE = "CLIENTB_HOME_PHONE";
            internal const string CLIENTB_DATE_OF_BIRTH = "CLIENTB_DATE_OF_BIRTH";
            internal const string CLIENTB_CURR_PLACEMNT_DT = "CLIENTB_CURR_PLACEMNT_DT";
            internal const string CLIENTB_CURRENT_PLACEMENT = "CLIENTB_CURRENT_PLACEMENT";
            internal const string CLIENTB_CSEA_G_CAUSE_CODE = "CLIENTB_CSEA_G_CAUSE_CODE";
            internal const string CLIENTB_CSEA_G_CAUSE_CL_DT = "CLIENTB_CSEA_G_CAUSE_CL_DT";
            internal const string CLIENTB_CSEA_COOP_CODE = "CLIENTB_CSEA_COOP_CODE";
            internal const string CLIENTB_COUNTY_CRT_COMMIT = "CLIENTB_COUNTY_CRT_COMMIT";
            internal const string CLIENTB_MONTHS_ASST_AF = "CLIENTB_MONTHS_ASST_AF";
            internal const string CLIENTB_MONTHS_ASST_GA = "CLIENTB_MONTHS_ASST_GA";
            internal const string CLIENTB_MO_DEATH_DT = "CLIENTB_MO_DEATH_DT";
            internal const string CLIENTB_MO_PRT_DT = "CLIENTB_MO_PRT_DT";
            internal const string CLIENTB_FA_DEATH_DT = "CLIENTB_FA_DEATH_DT";
            internal const string CLIENTB_FA_PRT_DT = "CLIENTB_FA_PRT_DT";
            internal const string CLIENTB_MPI_ID = "CLIENTB_MPI_ID";
            internal const string CLIENTB_MED_COVERAGE_IND = "CLIENTB_MED_COVERAGE_IND";
            internal const string CLIENTB_INSURANCE_CARRIER = "CLIENTB_INSURANCE_CARRIER";
            internal const string CLIENTB_INSURANCE_POLCY_NO = "CLIENTB_INSURANCE_POLCY_NO";
            internal const string CLIENTB_SPOKEN_LANGUAGE = "CLIENTB_SPOKEN_LANGUAGE";
            internal const string CLIENTB_WRITTEN_LANGUAGE = "CLIENTB_WRITTEN_LANGUAGE";
            internal const string CLIENTB_STATE_OF_BIRTH = "CLIENTB_STATE_OF_BIRTH";
            internal const string CLIENTB_SCHOOL_DISTRICT = "CLIENTB_SCHOOL_DISTRICT";
            internal const string CLIENTB_ETHNIC_CLASS = "CLIENTB_ETHNIC_CLASS";
            internal const string CLIENTB_SUFFIX_NAME = "CLIENTB_SUFFIX_NAME";
            internal const string CLIENTB_EMPLOYER_NAME = "CLIENTB_EMPLOYER_NAME";
            internal const string CLIENTB_EARNED_INCOME_AMT = "CLIENTB_EARNED_INCOME_AMT";
            internal const string CLIENTB_INCOME_FREQUENCY = "CLIENTB_INCOME_FREQUENCY";
            internal const string CLIENTB_KEES_ABMS_ID = "CLIENTB_KEES_ABMS_ID";
            internal const string CLIENTB_EMAIL_ADDRESS = "CLIENTB_EMAIL_ADDRESS";
            internal const string CLIENTB_EMAIL_ADDRESS_LEN = "CLIENTB_EMAIL_ADDRESS_LEN";
            internal const string CLIENTB_EMAIL_ADDRESS_TEXT = "CLIENTB_EMAIL_ADDRESS_TEXT";
            internal const string CLIENTB_OCCUPATION = "CLIENTB_OCCUPATION";
            internal const string CLIENTB_OCCUPATION_LEN = "CLIENTB_OCCUPATION_LEN";
            internal const string CLIENTB_OCCUPATION_TEXT = "CLIENTB_OCCUPATION_TEXT";
            internal const string CLIENTB_CREATED_BY = "CLIENTB_CREATED_BY";
            internal const string CLIENTB_CREATED_TIMESTAMP = "CLIENTB_CREATED_TIMESTAMP";
            internal const string CLIENTB_LAST_MODIFIED_BY = "CLIENTB_LAST_MODIFIED_BY";
            internal const string CLIENTB_LAST_MODIFIED_TMST = "CLIENTB_LAST_MODIFIED_TMST";
            internal const string CLIENTB_SENSITIVE_FLAG = "CLIENTB_SENSITIVE_FLAG";
            internal const string CLIENTB_CIS_PREFERRED_ID = "CLIENTB_CIS_PREFERRED_ID";
            internal const string CLIENTB_NAME_TYPE = "CLIENTB_NAME_TYPE";
            internal const string DCLKSD_CASE_BASIC = "DCLKSD_CASE_BASIC";
            internal const string CASEB_CASE_NUMBER = "CASEB_CASE_NUMBER";
            internal const string CASEB_TELEPHONE = "CASEB_TELEPHONE";
            internal const string CASEB_CASE_STATUS = "CASEB_CASE_STATUS";
            internal const string CASEB_CASE_STATUS_DATE = "CASEB_CASE_STATUS_DATE";
            internal const string CASEB_CASE_SURNAME = "CASEB_CASE_SURNAME";
            internal const string CASEB_CASE_GIVEN_NAME = "CASEB_CASE_GIVEN_NAME";
            internal const string CASEB_CASE_INITIAL = "CASEB_CASE_INITIAL";
            internal const string CASEB_CASEWORKR_GIVN_NME = "CASEB_CASEWORKR_GIVN_NME";
            internal const string CASEB_CASEWORKR_SURNAME = "CASEB_CASEWORKR_SURNAME";
            internal const string CASEB_CASEWORKR_MI = "CASEB_CASEWORKR_MI";
            internal const string CASEB_AR_SURNAME = "CASEB_AR_SURNAME";
            internal const string CASEB_AR_GIVEN_NAME = "CASEB_AR_GIVEN_NAME";
            internal const string CASEB_AR_INITIAL = "CASEB_AR_INITIAL";
            internal const string CASEB_FILE_LOCATION = "CASEB_FILE_LOCATION";
            internal const string CASEB_PAYEE_SURNAME = "CASEB_PAYEE_SURNAME";
            internal const string CASEB_PAYEE_GIVEN_NAME = "CASEB_PAYEE_GIVEN_NAME";
            internal const string CASEB_PAYEE_INITIAL = "CASEB_PAYEE_INITIAL";
            internal const string CASEB_TELEPHONE_2_NUMBER = "CASEB_TELEPHONE_2_NUMBER";
            internal const string CASEB_CREATED_TIMESTAMP = "CASEB_CREATED_TIMESTAMP";
            internal const string CASEB_CREATED_BY = "CASEB_CREATED_BY";
            internal const string CASEB_LAST_MODIFIED_BY = "CASEB_LAST_MODIFIED_BY";
            internal const string CASEB_LAST_MODIFIED_TMST = "CASEB_LAST_MODIFIED_TMST";
            internal const string DCLKSD_CASE_COMP = "DCLKSD_CASE_COMP";
            internal const string CASEC_BENEFIT_MONTH = "CASEC_BENEFIT_MONTH";
            internal const string CASEC_PARTICIPATION_CODE = "CASEC_PARTICIPATION_CODE";
            internal const string CASEC_MEDICAL_SUBTYPE = "CASEC_MEDICAL_SUBTYPE";
            internal const string CASEC_POSITION_ON_APP = "CASEC_POSITION_ON_APP";
            internal const string CASEC_CASE_OPEN_DT = "CASEC_CASE_OPEN_DT";
            internal const string CASEC_CASE_CLOSE_DT = "CASEC_CASE_CLOSE_DT";
            internal const string CASEC_CREATED_TIMESTAMP = "CASEC_CREATED_TIMESTAMP";
            internal const string CASEC_CREATED_BY = "CASEC_CREATED_BY";
            internal const string CASEC_LAST_MODIFIED_BY = "CASEC_LAST_MODIFIED_BY";
            internal const string CASEC_LAST_MODIFIED_TMST = "CASEC_LAST_MODIFIED_TMST";
            internal const string CASEC_FK_CLB_CLIENT_NO = "CASEC_FK_CLB_CLIENT_NO";
            internal const string CASEC_FK_CSB_CASE_NO = "CASEC_FK_CSB_CASE_NO";
            internal const string CASEC_FK_PGB_PROG_TYPE = "CASEC_FK_PGB_PROG_TYPE";
            internal const string DCLKSD_PARTICIPATION = "DCLKSD_PARTICIPATION";
            internal const string PART_KESSEP_TIME_STMP = "PART_KESSEP_TIME_STMP";
            internal const string PART_PART_END_DATE = "PART_PART_END_DATE";
            internal const string PART_PART_START_DATE = "PART_PART_START_DATE";
            internal const string PART_PART_CODE = "PART_PART_CODE";
            internal const string PART_PROGRAM_END_DATE = "PART_PROGRAM_END_DATE";
            internal const string PART_PROGRAM_SUBTYPE = "PART_PROGRAM_SUBTYPE";
            internal const string PART_RELATIONSHIP = "PART_RELATIONSHIP";
            internal const string PART_CREATED_BY = "PART_CREATED_BY";
            internal const string PART_CREATED_TIMESTAMP = "PART_CREATED_TIMESTAMP";
            internal const string PART_LAST_MODIFIED_BY = "PART_LAST_MODIFIED_BY";
            internal const string PART_LAST_MODIFIED_TMST = "PART_LAST_MODIFIED_TMST";
            internal const string PART_FK_CSB_CASE_NO = "PART_FK_CSB_CASE_NO";
            internal const string PART_FK_PGB_PROG_TYPE = "PART_FK_PGB_PROG_TYPE";
            internal const string PART_FK_CLB_CLIENT_NO = "PART_FK_CLB_CLIENT_NO";
            internal const string DCLKSD_SYSTEM_PART = "DCLKSD_SYSTEM_PART";
            internal const string SYSPART_SYSTEM_CODE = "SYSPART_SYSTEM_CODE";
            internal const string SYSPART_PARTICIPATION_FLAG = "SYSPART_PARTICIPATION_FLAG";
            internal const string SYSPART_CREATED_TIMESTAMP = "SYSPART_CREATED_TIMESTAMP";
            internal const string SYSPART_CREATED_BY = "SYSPART_CREATED_BY";
            internal const string SYSPART_LAST_MODIFIED_BY = "SYSPART_LAST_MODIFIED_BY";
            internal const string SYSPART_LAST_MODIFIED_TMST = "SYSPART_LAST_MODIFIED_TMST";
            internal const string SYSPART_FK_CLB_CLIENT_NO = "SYSPART_FK_CLB_CLIENT_NO";
            internal const string SYSPART_FK_CLI_CLIENT_NAME = "SYSPART_FK_CLI_CLIENT_NAME";
            internal const string SYSPART_FK_CLI_SSN = "SYSPART_FK_CLI_SSN";
            internal const string DCLKSD_NEXT_CLIENT_ID = "DCLKSD_NEXT_CLIENT_ID";
            internal const string NEXTCLI_IDENT = "NEXTCLI_IDENT";
            internal const string NEXTCLI_NEXT_CLIENT_ID = "NEXTCLI_NEXT_CLIENT_ID";
            internal const string NEXTCLI_CREATED_TIMESTAMP = "NEXTCLI_CREATED_TIMESTAMP";
            internal const string NEXTCLI_CREATED_BY = "NEXTCLI_CREATED_BY";
            internal const string NEXTCLI_LAST_MODIFIED_BY = "NEXTCLI_LAST_MODIFIED_BY";
            internal const string NEXTCLI_LAST_MODIFIED_TMST = "NEXTCLI_LAST_MODIFIED_TMST";
            internal const string WS_DB2_CONSTANT_AREAS = "WS_DB2_CONSTANT_AREAS";
            internal const string WS_SYS_CD_AE = "WS_SYS_CD_AE";
            internal const string WS_SYS_CD_CS = "WS_SYS_CD_CS";
            internal const string WS_SYS_CD_KA = "WS_SYS_CD_KA";
            internal const string WS_SYS_CD_KS = "WS_SYS_CD_KS";
            internal const string WS_SYS_CD_FA = "WS_SYS_CD_FA";
            internal const string WS_SYS_CD_KM = "WS_SYS_CD_KM";
            internal const string WS_YES_Y = "WS_YES_Y";
            internal const string WS_IDENT_0000000001 = "WS_IDENT_0000000001";
            internal const string WS_DB2_WORK_AREAS = "WS_DB2_WORK_AREAS";
            internal const string WS_CASE_NUMBER_NUM = "WS_CASE_NUMBER_NUM";
            internal const string WS_OLD_CLB_SSN = "WS_OLD_CLB_SSN";
            internal const string PART_WS_END_DATE = "PART_WS_END_DATE";
            internal const string PART_WS_START_DATE = "PART_WS_START_DATE";
            internal const string CLIENT_WS_DATE_OF_BIRTH = "CLIENT_WS_DATE_OF_BIRTH";
            internal const string WS_CLIENT_DATE_OF_BIRTH = "WS_CLIENT_DATE_OF_BIRTH";
            internal const string WS_DB2_SWITCHES = "WS_DB2_SWITCHES";
            internal const string WS_CASE_EOF_SW = "WS_CASE_EOF_SW";
            internal const string WS_CASE_EOF_NO = "WS_CASE_EOF_NO";
            internal const string WS_CASE_EOF_YES = "WS_CASE_EOF_YES";
            internal const string WS_CASEC_EOF_SW = "WS_CASEC_EOF_SW";
            internal const string WS_CASEC_EOF_NO = "WS_CASEC_EOF_NO";
            internal const string WS_CASEC_EOF_YES = "WS_CASEC_EOF_YES";
            internal const string WS_CLIENT_EOF_SW = "WS_CLIENT_EOF_SW";
            internal const string WS_CLIENT_EOF_NO = "WS_CLIENT_EOF_NO";
            internal const string WS_CLIENT_EOF_YES = "WS_CLIENT_EOF_YES";
            internal const string WS_CLIENTB_EOF_SW = "WS_CLIENTB_EOF_SW";
            internal const string WS_CLIENTB_EOF_NO = "WS_CLIENTB_EOF_NO";
            internal const string WS_CLIENTB_EOF_YES = "WS_CLIENTB_EOF_YES";
            internal const string WS_PART_EOF_SW = "WS_PART_EOF_SW";
            internal const string WS_PART_EOF_NO = "WS_PART_EOF_NO";
            internal const string WS_PART_EOF_YES = "WS_PART_EOF_YES";
            internal const string WS_SYSPART_EOF_SW = "WS_SYSPART_EOF_SW";
            internal const string WS_SYSPART_EOF_NO = "WS_SYSPART_EOF_NO";
            internal const string WS_SYSPART_EOF_YES = "WS_SYSPART_EOF_YES";
            internal const string WS_CASEC_1ST_SW = "WS_CASEC_1ST_SW";
            internal const string WS_CASEC_1ST_NO = "WS_CASEC_1ST_NO";
            internal const string WS_CASEC_1ST_YES = "WS_CASEC_1ST_YES";
            internal const string WS_CLIENT_1ST_SW = "WS_CLIENT_1ST_SW";
            internal const string WS_CLIENT_1ST_NO = "WS_CLIENT_1ST_NO";
            internal const string WS_CLIENT_1ST_YES = "WS_CLIENT_1ST_YES";
            internal const string WS_PART_1ST_SW = "WS_PART_1ST_SW";
            internal const string WS_PART_1ST_NO = "WS_PART_1ST_NO";
            internal const string WS_PART_1ST_YES = "WS_PART_1ST_YES";
            internal const string WS_CLIENT_POINTER = "WS_CLIENT_POINTER";
            internal const string WS_CLIPTR_CLIENT_ID = "WS_CLIPTR_CLIENT_ID";
            internal const string WS_CLIPTR_VERIFIED_SSN_FLAG = "WS_CLIPTR_VERIFIED_SSN_FLAG";
            internal const string WS_CLIPTR_SYSTEM_PARTICIPATION = "WS_CLIPTR_SYSTEM_PARTICIPATION";
            internal const string WS_CLIPTR_SYSPART_AE = "WS_CLIPTR_SYSPART_AE";
            internal const string WS_CLIPTR_SYSPART_CS = "WS_CLIPTR_SYSPART_CS";
            internal const string WS_CLIPTR_SYSPART_KA = "WS_CLIPTR_SYSPART_KA";
            internal const string WS_CLIPTR_SYSPART_KS = "WS_CLIPTR_SYSPART_KS";
            internal const string WS_CLIPTR_SYSPART_FA = "WS_CLIPTR_SYSPART_FA";
            internal const string WS_CLIPTR_SYSPART_KM = "WS_CLIPTR_SYSPART_KM";
            internal const string WS_CLIPTR_FILL = "WS_CLIPTR_FILL";
            internal const string WS_UPD_UNIQUE_KEY = "WS_UPD_UNIQUE_KEY";
            internal const string WS_UUK_CLIENT_NUMBER = "WS_UUK_CLIENT_NUMBER";
            internal const string WS_UUK_CLIENT_NAME = "WS_UUK_CLIENT_NAME";
            internal const string WS_UUK_CLI_LAST_NAME = "WS_UUK_CLI_LAST_NAME";
            internal const string WS_UUK_CLI_FIRST_NAME = "WS_UUK_CLI_FIRST_NAME";
            internal const string WS_UUK_CLI_INITIAL = "WS_UUK_CLI_INITIAL";
            internal const string WS_UUK_SSN = "WS_UUK_SSN";
            internal const string WS_UUK_DOB = "WS_UUK_DOB";
            internal const string WS_UUK_SEX = "WS_UUK_SEX";
            internal const string WS_UUK_VERIFY_FLAG = "WS_UUK_VERIFY_FLAG";
            internal const string WS_UUK_CLIPTR_SYSTEM_PART = "WS_UUK_CLIPTR_SYSTEM_PART";
            internal const string WS_UUK_AE_FLAG = "WS_UUK_AE_FLAG";
            internal const string WS_UUK_CS_FLAG = "WS_UUK_CS_FLAG";
            internal const string WS_UUK_KC_FLAG = "WS_UUK_KC_FLAG";
            internal const string WS_UUK_KP_FLAG = "WS_UUK_KP_FLAG";
            internal const string WS_UUK_FA_FLAG = "WS_UUK_FA_FLAG";
            internal const string WS_UUK_PART_FILL = "WS_UUK_PART_FILL";
            internal const string WS_UUK_FILL = "WS_UUK_FILL";
            internal const string WS_SYS_PART_CNT = "WS_SYS_PART_CNT";
            internal const string WS_INS_PART_CNT = "WS_INS_PART_CNT";
            internal const string WS_DB2_SYSTEM_PART_TABLE = "WS_DB2_SYSTEM_PART_TABLE";
            internal const string WS_DB2_SYSTEM_PART = "WS_DB2_SYSTEM_PART";
            internal const string WS_DB2_SYSTEM_CODE = "WS_DB2_SYSTEM_CODE";
            internal const string WS_DB2_PARTICIPATION_FLAG = "WS_DB2_PARTICIPATION_FLAG";
            internal const string WS_DB2_CREATED_TIMESTAMP = "WS_DB2_CREATED_TIMESTAMP";
            internal const string WS_DB2_CREATED_BY = "WS_DB2_CREATED_BY";
            internal const string WS_DB2_LAST_MODIFIED_BY = "WS_DB2_LAST_MODIFIED_BY";
            internal const string WS_DB2_LAST_MODIFIED_TMST = "WS_DB2_LAST_MODIFIED_TMST";
            internal const string WS_DB2_FK_CLB_CLIENT_NO = "WS_DB2_FK_CLB_CLIENT_NO";
            internal const string WS_DB2_FK_CLI_CLIENT_NAME = "WS_DB2_FK_CLI_CLIENT_NAME";
            internal const string WS_DB2_FK_CLI_SSN = "WS_DB2_FK_CLI_SSN";
            internal const string WS_DUP_CLT_CNT = "WS_DUP_CLT_CNT";
            internal const string WS_CHK_CLT_NO = "WS_CHK_CLT_NO";
            internal const string WS_CHK_CLT_SSN = "WS_CHK_CLT_SSN";
            internal const string CONTROL_BLOCK = "CONTROL_BLOCK";
            internal const string COMMAND_CODE = "COMMAND_CODE";
            internal const string COMMAND_ID = "COMMAND_ID";
            internal const string FILE_NUMBER = "FILE_NUMBER";
            internal const string RESPONSE_CODE = "RESPONSE_CODE";
            internal const string ISN = "ISN";
            internal const string ISN_LOWER_LIMIT = "ISN_LOWER_LIMIT";
            internal const string ISN_QUANTITY = "ISN_QUANTITY";
            internal const string FORMAT_BUFFER_LENGTH = "FORMAT_BUFFER_LENGTH";
            internal const string RECORD_BUFFER_LENGTH = "RECORD_BUFFER_LENGTH";
            internal const string SEARCH_BUFFER_LENGTH = "SEARCH_BUFFER_LENGTH";
            internal const string VALUE_BUFFER_LENGTH = "VALUE_BUFFER_LENGTH";
            internal const string ISN_BUFFER_LENGTH = "ISN_BUFFER_LENGTH";
            internal const string COMMAND_OPTION_1 = "COMMAND_OPTION_1";
            internal const string COMMAND_OPTION_2 = "COMMAND_OPTION_2";
            internal const string ADDITIONS_1 = "ADDITIONS_1";
            internal const string ADDITIONS_2 = "ADDITIONS_2";
            internal const string ADDITIONS_3 = "ADDITIONS_3";
            internal const string ADDITIONS_4 = "ADDITIONS_4";
            internal const string COMMAND_TIME = "COMMAND_TIME";
            internal const string USER_AREA = "USER_AREA";
            internal const string PH_FNTIC_C1 = "PH_FNTIC_C1";
            internal const string PH_FNTIC_C2 = "PH_FNTIC_C2";
            internal const string PH_FNTIC_C3 = "PH_FNTIC_C3";
            internal const string PH_FNTIC_CX = "PH_FNTIC_CX";
            internal const string PH_SUSS_ID = "PH_SUSS_ID";
            internal const string PH_HIT = "PH_HIT";
            internal const string PH_ERR_NAME = "PH_ERR_NAME";
            internal const string PH_COUNT_UP = "PH_COUNT_UP";
            internal const string PH_COUNT_INQUIRY = "PH_COUNT_INQUIRY";
            internal const string PH_COUNT_DB = "PH_COUNT_DB";
            internal const string PH_L1 = "PH_L1";
            internal const string PH_CR1_INDXX = "PH_CR1_INDXX";
            internal const string PH_CR2_INDXX = "PH_CR2_INDXX";
            internal const string PH_CF1_INDXX = "PH_CF1_INDXX";
            internal const string PH_CF2_INDXX = "PH_CF2_INDXX";
            internal const string PH_DEGREE = "PH_DEGREE";
            internal const string PH_PERCENT = "PH_PERCENT";
            internal const string PH_NAME_RAW_INQ = "PH_NAME_RAW_INQ";
            internal const string PH_NAME_RAW_MSTR = "PH_NAME_RAW_MSTR";
            internal const string PH_NAME_CRUNCH_INQ = "PH_NAME_CRUNCH_INQ";
            internal const string PH_L_CRNCH = "PH_L_CRNCH";
            internal const string PH_NAME_REDUC_INQ = "PH_NAME_REDUC_INQ";
            internal const string PH_L_REDUC = "PH_L_REDUC";
            internal const string PH_SAVE_REDUC_INQ = "PH_SAVE_REDUC_INQ";
            internal const string PH_S_REDUC = "PH_S_REDUC";
            internal const string PH_NAME_PARTS = "PH_NAME_PARTS";
            internal const string PH_THREE_LETTERS = "PH_THREE_LETTERS";
            internal const string PH_LETTERS_3 = "PH_LETTERS_3";
            internal const string PH_TWO_LETTERS = "PH_TWO_LETTERS";
            internal const string PH_ONE_LETTER = "PH_ONE_LETTER";
            internal const string PH_NAME_34_NUMERIC = "PH_NAME_34_NUMERIC";
            internal const string PH_NAME_NUM_34 = "PH_NAME_NUM_34";
            internal const string PH_NAME_17_NUMERIC = "PH_NAME_17_NUMERIC";
            internal const string PH_NAME_NUM_17 = "PH_NAME_NUM_17";
            internal const string PH_REFMT_34_17 = "PH_REFMT_34_17";
            internal const string PH_DIGIT_1 = "PH_DIGIT_1";
            internal const string PH_DIGIT_2 = "PH_DIGIT_2";
            internal const string PH_FIRST_2_TABLE = "PH_FIRST_2_TABLE";
            internal const string PH_FIRST_2_TBL = "PH_FIRST_2_TBL";
            internal const string PH_FR2_NUM = "PH_FR2_NUM";
            internal const string PH_ALPH2 = "PH_ALPH2";
            internal const string PH_NUM2 = "PH_NUM2";
            internal const string PH_FIRST_1_TABLE = "PH_FIRST_1_TABLE";
            internal const string PH_FIRST_1_TBL = "PH_FIRST_1_TBL";
            internal const string PH_FR1_NUM = "PH_FR1_NUM";
            internal const string PH_ALPH1 = "PH_ALPH1";
            internal const string PH_NUM1 = "PH_NUM1";
            internal const string PH_REMAIN_2_TABLE = "PH_REMAIN_2_TABLE";
            internal const string PH_REMAIN_2_TBL = "PH_REMAIN_2_TBL";
            internal const string PH_RR2_NUM = "PH_RR2_NUM";
            internal const string PH_ALPHR2 = "PH_ALPHR2";
            internal const string PH_NUMR2 = "PH_NUMR2";
            internal const string PH_REMAIN_1_TABLE = "PH_REMAIN_1_TABLE";
            internal const string PH_REMAIN_1_TBL = "PH_REMAIN_1_TBL";
            internal const string PH_RR1_NUM = "PH_RR1_NUM";
            internal const string PH_ALPHR1 = "PH_ALPHR1";
            internal const string PH_NUMR1 = "PH_NUMR1";
            internal const string PH_CF2_INDEX = "PH_CF2_INDEX";
            internal const string PH_CF1_INDEX = "PH_CF1_INDEX";
            internal const string PH_CR2_INDEX = "PH_CR2_INDEX";
            internal const string PH_CR1_INDEX = "PH_CR1_INDEX";
        }
        #endregion

        #region Direct-access element properties
        public IField FUNC_0329176144_ESC_FLAG { get { return GetElementByName<IField>(Names.FUNC_0329176144_ESC_FLAG); } }
        public IGroup EXTERNAL_ACTION_BLOCK_WS { get { return GetElementByName<IGroup>(Names.EXTERNAL_ACTION_BLOCK_WS); } }
        public IField SRADALNK { get { return GetElementByName<IField>(Names.SRADALNK); } }
        public IField SRMODLNK { get { return GetElementByName<IField>(Names.SRMODLNK); } }
        public IGroup MV_ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.MV_ABEND_FIELDS); } }
        public IField MV_ABEND_TYPE { get { return GetElementByName<IField>(Names.MV_ABEND_TYPE); } }
        public ICheckField MV_ABEND_TYPE_NONE { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_NONE); } }
        public ICheckField MV_ABEND_TYPE_ADABAS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_ADABAS); } }
        public ICheckField MV_ABEND_TYPE_CICS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_CICS); } }
        public IGroup MV_ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.MV_ABEND_ADABAS); } }
        public IField MV_ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.MV_ADA_FILE_NUMBER); } }
        public IField MV_ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.MV_ADA_FILE_ACTION); } }
        public IField MV_ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_ADA_RESPONSE_CD); } }
        public IGroup MV_ABEND_CICS { get { return GetElementByName<IGroup>(Names.MV_ABEND_CICS); } }
        public IField MV_CICS_RESOURCE_NM { get { return GetElementByName<IField>(Names.MV_CICS_RESOURCE_NM); } }
        public IField MV_CICS_FUNCTION_CD { get { return GetElementByName<IField>(Names.MV_CICS_FUNCTION_CD); } }
        public IField MV_CICS_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_CICS_RESPONSE_CD); } }
        public IField MV_ABS_TIME { get { return GetElementByName<IField>(Names.MV_ABS_TIME); } }
        public IGroup MV_CCYYMMDD_X8 { get { return GetElementByName<IGroup>(Names.MV_CCYYMMDD_X8); } }
        public IField MV_CC { get { return GetElementByName<IField>(Names.MV_CC); } }
        public IGroup MV_YYMMDD_X6 { get { return GetElementByName<IGroup>(Names.MV_YYMMDD_X6); } }
        public IField MV_YY { get { return GetElementByName<IField>(Names.MV_YY); } }
        public IField MV_MM { get { return GetElementByName<IField>(Names.MV_MM); } }
        public IField MV_DD { get { return GetElementByName<IField>(Names.MV_DD); } }
        public IField MV_YYMMDD { get { return GetElementByName<IField>(Names.MV_YYMMDD); } }
        public IField MV_CURRENT_CCYY { get { return GetElementByName<IField>(Names.MV_CURRENT_CCYY); } }
        public IField MV_CURRENT_MMDD { get { return GetElementByName<IField>(Names.MV_CURRENT_MMDD); } }
        public IField MV_CCYYMMDD { get { return GetElementByName<IField>(Names.MV_CCYYMMDD); } }
        public IField MV_COMPLEMENT_DATE { get { return GetElementByName<IField>(Names.MV_COMPLEMENT_DATE); } }
        public IField MV_WRK_PTR { get { return GetElementByName<IField>(Names.MV_WRK_PTR); } }
        public IField MV_ISN { get { return GetElementByName<IField>(Names.MV_ISN); } }
        public IField MV_KCC_PTR { get { return GetElementByName<IField>(Names.MV_KCC_PTR); } }
        public IField MV_CLIENT_INFO_NUMBER { get { return GetElementByName<IField>(Names.MV_CLIENT_INFO_NUMBER); } }
        public IField MV_CLIENT_FOUND_IND { get { return GetElementByName<IField>(Names.MV_CLIENT_FOUND_IND); } }
        public ICheckField MV_CLIENT_FOUND { get { return GetElementByName<ICheckField>(Names.MV_CLIENT_FOUND); } }
        public IGroup MV_CLIENT_POINTER_X31 { get { return GetElementByName<IGroup>(Names.MV_CLIENT_POINTER_X31); } }
        public IField MV_CLIENT_POINTER_X10 { get { return GetElementByName<IField>(Names.MV_CLIENT_POINTER_X10); } }
        public IField MV_CLIENT_POINTER_X21 { get { return GetElementByName<IField>(Names.MV_CLIENT_POINTER_X21); } }
        public IGroup MV_CLIENT_ID_KEY { get { return GetElementByName<IGroup>(Names.MV_CLIENT_ID_KEY); } }
        public IField MV_CIK_CLIENT_POINTER_X10 { get { return GetElementByName<IField>(Names.MV_CIK_CLIENT_POINTER_X10); } }
        public IField MV_CIK_CLIENT_NAME { get { return GetElementByName<IField>(Names.MV_CIK_CLIENT_NAME); } }
        public IField MV_CIK_SSN { get { return GetElementByName<IField>(Names.MV_CIK_SSN); } }
        public IField MV_CIK_DATE_OF_BIRTH_SEX { get { return GetElementByName<IField>(Names.MV_CIK_DATE_OF_BIRTH_SEX); } }
        public IField MV_CIK_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.MV_CIK_DATE_OF_BIRTH); } }
        public IField MV_CIK_SEX { get { return GetElementByName<IField>(Names.MV_CIK_SEX); } }
        public IGroup MV_CIK_CLIENT_POINTER_X21 { get { return GetElementByName<IGroup>(Names.MV_CIK_CLIENT_POINTER_X21); } }
        public IField MV_CIK_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.MV_CIK_VERIFIED_SSN_FLAG); } }
        public IGroup MV_CIK_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.MV_CIK_SYSTEM_PARTICIPATION); } }
        public IField MV_CIK_SYS_PART_AE { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_AE); } }
        public IField MV_CIK_SYS_PART_CSE { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_CSE); } }
        public IField MV_CIK_SYS_PART_KANPAY { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_KANPAY); } }
        public IField MV_CIK_SYS_PART_KSCARES { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_KSCARES); } }
        public IField MV_CIK_SYS_PART_FACTS { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_FACTS); } }
        public IField MV_CIK_SYS_PART_KMIS { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_KMIS); } }
        public IGroup MV_RECORD_NAME { get { return GetElementByName<IGroup>(Names.MV_RECORD_NAME); } }
        public IField MV_RECORD_LAST_NAME { get { return GetElementByName<IField>(Names.MV_RECORD_LAST_NAME); } }
        public IGroup MV_RECORD_FIRST_NAME { get { return GetElementByName<IGroup>(Names.MV_RECORD_FIRST_NAME); } }
        public IField MV_RECORD_FIRST_NAME_1 { get { return GetElementByName<IField>(Names.MV_RECORD_FIRST_NAME_1); } }
        public IField MV_RECORD_FIRST_NAME_11 { get { return GetElementByName<IField>(Names.MV_RECORD_FIRST_NAME_11); } }
        public IField MV_RECORD_INITIAL { get { return GetElementByName<IField>(Names.MV_RECORD_INITIAL); } }
        public IGroup MV_PHONETIC_DATA { get { return GetElementByName<IGroup>(Names.MV_PHONETIC_DATA); } }
        public IField MV_PHONETIC_1 { get { return GetElementByName<IField>(Names.MV_PHONETIC_1); } }
        public IField MV_PHONETIC_CODE { get { return GetElementByName<IField>(Names.MV_PHONETIC_CODE); } }
        public IField MV_PHONETIC_3 { get { return GetElementByName<IField>(Names.MV_PHONETIC_3); } }
        public IGroup MV_DATE_OF_BIRTH_SEX { get { return GetElementByName<IGroup>(Names.MV_DATE_OF_BIRTH_SEX); } }
        public IGroup MV_DATE_OF_BIRTH_X8 { get { return GetElementByName<IGroup>(Names.MV_DATE_OF_BIRTH_X8); } }
        public IField MV_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.MV_DATE_OF_BIRTH); } }
        public IField MV_SEX { get { return GetElementByName<IField>(Names.MV_SEX); } }
        public IGroup MV_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.MV_CLIENT_POINTER); } }
        public IGroup MV_CLIENT_ID { get { return GetElementByName<IGroup>(Names.MV_CLIENT_ID); } }
        public IField MV_CLIENT_ID_910 { get { return GetElementByName<IField>(Names.MV_CLIENT_ID_910); } }
        public IGroup MV_CLIENT_POINTER_FLAGS { get { return GetElementByName<IGroup>(Names.MV_CLIENT_POINTER_FLAGS); } }
        public IField MV_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.MV_VERIFIED_SSN_FLAG); } }
        public IGroup MV_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.MV_SYSTEM_PARTICIPATION); } }
        public IField MV_SYS_PART_AE { get { return GetElementByName<IField>(Names.MV_SYS_PART_AE); } }
        public ICheckField MV_SYS_PART_AE_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_AE_YES); } }
        public IField MV_SYS_PART_CSE { get { return GetElementByName<IField>(Names.MV_SYS_PART_CSE); } }
        public ICheckField MV_SYS_PART_CSE_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_CSE_YES); } }
        public IField MV_SYS_PART_KANPAY { get { return GetElementByName<IField>(Names.MV_SYS_PART_KANPAY); } }
        public ICheckField MV_SYS_PART_KANPAY_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_KANPAY_YES); } }
        public IField MV_SYS_PART_KSCARES { get { return GetElementByName<IField>(Names.MV_SYS_PART_KSCARES); } }
        public ICheckField MV_SYS_PART_KSCARES_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_KSCARES_YES); } }
        public IField MV_SYS_PART_FACTS { get { return GetElementByName<IField>(Names.MV_SYS_PART_FACTS); } }
        public ICheckField MV_SYS_PART_FACTS_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_FACTS_YES); } }
        public IField MV_SYS_PART_KMIS { get { return GetElementByName<IField>(Names.MV_SYS_PART_KMIS); } }
        public ICheckField MV_SYS_PART_KMIS_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_KMIS_YES); } }
        public IGroup MV_AE_CASE_BASIC_TABLE { get { return GetElementByName<IGroup>(Names.MV_AE_CASE_BASIC_TABLE); } }
        public IArrayElementAccessor<IGroup> MV_AE_CASE_BASIC_NUMBER { get { return GetArrayElementAccessor<IGroup>(Names.MV_AE_CASE_BASIC_NUMBER); } }
        public IArrayElementAccessor<IField> MV_AE_CASE_BASIC_ISN { get { return GetArrayElementAccessor<IField>(Names.MV_AE_CASE_BASIC_ISN); } }
        public IField MV_ACB_PTR { get { return GetElementByName<IField>(Names.MV_ACB_PTR); } }
        public IField MC_ACB_MAX { get { return GetElementByName<IField>(Names.MC_ACB_MAX); } }
        public IGroup IMP_CLIENT_NUMBER_X10 { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_NUMBER_X10); } }
        public IField IMP_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.IMP_CLIENT_NUMBER); } }
        public IField IMP_CLIENT_KEY { get { return GetElementByName<IField>(Names.IMP_CLIENT_KEY); } }
        public IGroup IMP_CLIENT_KEY_RED { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_KEY_RED); } }
        public IField IMP_CLIKEY_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.IMP_CLIKEY_CLIENT_NUMBER); } }
        public IField IMP_CLIKEY_CLIENT_NAME { get { return GetElementByName<IField>(Names.IMP_CLIKEY_CLIENT_NAME); } }
        public IField IMP_CLIKEY_SSN { get { return GetElementByName<IField>(Names.IMP_CLIKEY_SSN); } }
        public IField IMP_CLIKEY_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.IMP_CLIKEY_DATE_OF_BIRTH); } }
        public IField IMP_CLIKEY_SEX { get { return GetElementByName<IField>(Names.IMP_CLIKEY_SEX); } }
        public IField IMP_CLIKEY_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.IMP_CLIKEY_VERIFIED_SSN_FLAG); } }
        public IField IMP_CLIKEY_SYS_PART { get { return GetElementByName<IField>(Names.IMP_CLIKEY_SYS_PART); } }
        public IGroup IMP_CLIENT_INFO { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_INFO); } }
        public IGroup IMP_NAME { get { return GetElementByName<IGroup>(Names.IMP_NAME); } }
        public IField IMP_LAST_NAME { get { return GetElementByName<IField>(Names.IMP_LAST_NAME); } }
        public IField IMP_FIRST_NAME { get { return GetElementByName<IField>(Names.IMP_FIRST_NAME); } }
        public IField IMP_INITIAL { get { return GetElementByName<IField>(Names.IMP_INITIAL); } }
        public IGroup IMP_DATE_OF_BIRTH_SEX { get { return GetElementByName<IGroup>(Names.IMP_DATE_OF_BIRTH_SEX); } }
        public IGroup IMP_DATE_OF_BIRTH_X8 { get { return GetElementByName<IGroup>(Names.IMP_DATE_OF_BIRTH_X8); } }
        public IField IMP_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.IMP_DATE_OF_BIRTH); } }
        public IField IMP_SEX { get { return GetElementByName<IField>(Names.IMP_SEX); } }
        public IGroup IMP_SOC_SEC_NUM_X9 { get { return GetElementByName<IGroup>(Names.IMP_SOC_SEC_NUM_X9); } }
        public IField IMP_SOC_SEC_NUM { get { return GetElementByName<IField>(Names.IMP_SOC_SEC_NUM); } }
        public IField IMP_SOC_SEC_NUM_3 { get { return GetElementByName<IField>(Names.IMP_SOC_SEC_NUM_3); } }
        public ICheckField IMP_SOC_SEC_NUM_3_VALID { get { return GetElementByName<ICheckField>(Names.IMP_SOC_SEC_NUM_3_VALID); } }
        public IField IMP_SOC_SEC_NUM_2 { get { return GetElementByName<IField>(Names.IMP_SOC_SEC_NUM_2); } }
        public ICheckField IMP_SOC_SEC_NUM_2_VALID { get { return GetElementByName<ICheckField>(Names.IMP_SOC_SEC_NUM_2_VALID); } }
        public IField IMP_SOC_SEC_NUM_4 { get { return GetElementByName<IField>(Names.IMP_SOC_SEC_NUM_4); } }
        public ICheckField IMP_SOC_SEC_NUM_4_VALID { get { return GetElementByName<ICheckField>(Names.IMP_SOC_SEC_NUM_4_VALID); } }
        public IGroup CUR_CLIENT_INFO { get { return GetElementByName<IGroup>(Names.CUR_CLIENT_INFO); } }
        public IGroup CUR_NAME { get { return GetElementByName<IGroup>(Names.CUR_NAME); } }
        public IField CUR_LAST_NAME { get { return GetElementByName<IField>(Names.CUR_LAST_NAME); } }
        public IField CUR_FIRST_NAME { get { return GetElementByName<IField>(Names.CUR_FIRST_NAME); } }
        public IField CUR_INITIAL { get { return GetElementByName<IField>(Names.CUR_INITIAL); } }
        public IGroup CUR_DATE_OF_BIRTH_SEX { get { return GetElementByName<IGroup>(Names.CUR_DATE_OF_BIRTH_SEX); } }
        public IGroup CUR_DATE_OF_BIRTH_X8 { get { return GetElementByName<IGroup>(Names.CUR_DATE_OF_BIRTH_X8); } }
        public IField CUR_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CUR_DATE_OF_BIRTH); } }
        public IField CUR_SEX { get { return GetElementByName<IField>(Names.CUR_SEX); } }
        public IGroup CUR_SOC_SEC_NUM_X9 { get { return GetElementByName<IGroup>(Names.CUR_SOC_SEC_NUM_X9); } }
        public IField CUR_SOC_SEC_NUM { get { return GetElementByName<IField>(Names.CUR_SOC_SEC_NUM); } }
        public IGroup DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT); } }
        public IField CLIENT_SSN { get { return GetElementByName<IField>(Names.CLIENT_SSN); } }
        public IField CLIENT_PREVIOUS_SSN { get { return GetElementByName<IField>(Names.CLIENT_PREVIOUS_SSN); } }
        public IField CLIENT_PHONETIC_DATA { get { return GetElementByName<IField>(Names.CLIENT_PHONETIC_DATA); } }
        public IField CLIENT_DT_OF_LAST_UPDATE { get { return GetElementByName<IField>(Names.CLIENT_DT_OF_LAST_UPDATE); } }
        public IField CLIENT_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENT_DATE_OF_BIRTH); } }
        public IField CLIENT_GENDER { get { return GetElementByName<IField>(Names.CLIENT_GENDER); } }
        public IField CLIENT_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CLIENT_VERIFIED_SSN_FLAG); } }
        public IField CLIENT_CLIENT_NAME { get { return GetElementByName<IField>(Names.CLIENT_CLIENT_NAME); } }
        public IField CLIENT_CREATED_BY { get { return GetElementByName<IField>(Names.CLIENT_CREATED_BY); } }
        public IField CLIENT_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CLIENT_CREATED_TIMESTAMP); } }
        public IField CLIENT_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CLIENT_LAST_MODIFIED_BY); } }
        public IField CLIENT_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CLIENT_LAST_MODIFIED_TMST); } }
        public IField CLIENT_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CLIENT_FK_CLB_CLIENT_NO); } }
        public IField CLIENT_NAME_TYPE { get { return GetElementByName<IField>(Names.CLIENT_NAME_TYPE); } }
        public IGroup DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT_BASIC); } }
        public IField CLIENTB_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_NUMBER); } }
        public IField CLIENTB_CLIENT_GIVEN_NAME { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_GIVEN_NAME); } }
        public IField CLIENTB_CLIENT_INITIALS { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_INITIALS); } }
        public IField CLIENTB_CLIENT_SURNAME { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_SURNAME); } }
        public IField CLIENTB_CIS_REPL_IND { get { return GetElementByName<IField>(Names.CLIENTB_CIS_REPL_IND); } }
        public IField CLIENTB_WORK_PHONE { get { return GetElementByName<IField>(Names.CLIENTB_WORK_PHONE); } }
        public IField CLIENTB_SSN { get { return GetElementByName<IField>(Names.CLIENTB_SSN); } }
        public IField CLIENTB_GENDER { get { return GetElementByName<IField>(Names.CLIENTB_GENDER); } }
        public IField CLIENTB_PARENT_RGHTS_SEV { get { return GetElementByName<IField>(Names.CLIENTB_PARENT_RGHTS_SEV); } }
        public IField CLIENTB_PRNT_RGHTS_SEV_DT { get { return GetElementByName<IField>(Names.CLIENTB_PRNT_RGHTS_SEV_DT); } }
        public IField CLIENTB_LEGAL_STATUS { get { return GetElementByName<IField>(Names.CLIENTB_LEGAL_STATUS); } }
        public IField CLIENTB_INSURANCE_CODE { get { return GetElementByName<IField>(Names.CLIENTB_INSURANCE_CODE); } }
        public IField CLIENTB_INITIAL_CUSTODY_DT { get { return GetElementByName<IField>(Names.CLIENTB_INITIAL_CUSTODY_DT); } }
        public IField CLIENTB_HOME_PHONE { get { return GetElementByName<IField>(Names.CLIENTB_HOME_PHONE); } }
        public IField CLIENTB_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENTB_DATE_OF_BIRTH); } }
        public IField CLIENTB_CURR_PLACEMNT_DT { get { return GetElementByName<IField>(Names.CLIENTB_CURR_PLACEMNT_DT); } }
        public IField CLIENTB_CURRENT_PLACEMENT { get { return GetElementByName<IField>(Names.CLIENTB_CURRENT_PLACEMENT); } }
        public IField CLIENTB_CSEA_G_CAUSE_CODE { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_G_CAUSE_CODE); } }
        public IField CLIENTB_CSEA_G_CAUSE_CL_DT { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_G_CAUSE_CL_DT); } }
        public IField CLIENTB_CSEA_COOP_CODE { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_COOP_CODE); } }
        public IField CLIENTB_COUNTY_CRT_COMMIT { get { return GetElementByName<IField>(Names.CLIENTB_COUNTY_CRT_COMMIT); } }
        public IField CLIENTB_MONTHS_ASST_AF { get { return GetElementByName<IField>(Names.CLIENTB_MONTHS_ASST_AF); } }
        public IField CLIENTB_MONTHS_ASST_GA { get { return GetElementByName<IField>(Names.CLIENTB_MONTHS_ASST_GA); } }
        public IField CLIENTB_MO_DEATH_DT { get { return GetElementByName<IField>(Names.CLIENTB_MO_DEATH_DT); } }
        public IField CLIENTB_MO_PRT_DT { get { return GetElementByName<IField>(Names.CLIENTB_MO_PRT_DT); } }
        public IField CLIENTB_FA_DEATH_DT { get { return GetElementByName<IField>(Names.CLIENTB_FA_DEATH_DT); } }
        public IField CLIENTB_FA_PRT_DT { get { return GetElementByName<IField>(Names.CLIENTB_FA_PRT_DT); } }
        public IField CLIENTB_MPI_ID { get { return GetElementByName<IField>(Names.CLIENTB_MPI_ID); } }
        public IField CLIENTB_MED_COVERAGE_IND { get { return GetElementByName<IField>(Names.CLIENTB_MED_COVERAGE_IND); } }
        public IField CLIENTB_INSURANCE_CARRIER { get { return GetElementByName<IField>(Names.CLIENTB_INSURANCE_CARRIER); } }
        public IField CLIENTB_INSURANCE_POLCY_NO { get { return GetElementByName<IField>(Names.CLIENTB_INSURANCE_POLCY_NO); } }
        public IField CLIENTB_SPOKEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLIENTB_SPOKEN_LANGUAGE); } }
        public IField CLIENTB_WRITTEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLIENTB_WRITTEN_LANGUAGE); } }
        public IField CLIENTB_STATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENTB_STATE_OF_BIRTH); } }
        public IField CLIENTB_SCHOOL_DISTRICT { get { return GetElementByName<IField>(Names.CLIENTB_SCHOOL_DISTRICT); } }
        public IField CLIENTB_ETHNIC_CLASS { get { return GetElementByName<IField>(Names.CLIENTB_ETHNIC_CLASS); } }
        public IField CLIENTB_SUFFIX_NAME { get { return GetElementByName<IField>(Names.CLIENTB_SUFFIX_NAME); } }
        public IField CLIENTB_EMPLOYER_NAME { get { return GetElementByName<IField>(Names.CLIENTB_EMPLOYER_NAME); } }
        public IField CLIENTB_EARNED_INCOME_AMT { get { return GetElementByName<IField>(Names.CLIENTB_EARNED_INCOME_AMT); } }
        public IField CLIENTB_INCOME_FREQUENCY { get { return GetElementByName<IField>(Names.CLIENTB_INCOME_FREQUENCY); } }
        public IField CLIENTB_KEES_ABMS_ID { get { return GetElementByName<IField>(Names.CLIENTB_KEES_ABMS_ID); } }
        public IGroup CLIENTB_EMAIL_ADDRESS { get { return GetElementByName<IGroup>(Names.CLIENTB_EMAIL_ADDRESS); } }
        public IField CLIENTB_EMAIL_ADDRESS_LEN { get { return GetElementByName<IField>(Names.CLIENTB_EMAIL_ADDRESS_LEN); } }
        public IField CLIENTB_EMAIL_ADDRESS_TEXT { get { return GetElementByName<IField>(Names.CLIENTB_EMAIL_ADDRESS_TEXT); } }
        public IGroup CLIENTB_OCCUPATION { get { return GetElementByName<IGroup>(Names.CLIENTB_OCCUPATION); } }
        public IField CLIENTB_OCCUPATION_LEN { get { return GetElementByName<IField>(Names.CLIENTB_OCCUPATION_LEN); } }
        public IField CLIENTB_OCCUPATION_TEXT { get { return GetElementByName<IField>(Names.CLIENTB_OCCUPATION_TEXT); } }
        public IField CLIENTB_CREATED_BY { get { return GetElementByName<IField>(Names.CLIENTB_CREATED_BY); } }
        public IField CLIENTB_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CLIENTB_CREATED_TIMESTAMP); } }
        public IField CLIENTB_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CLIENTB_LAST_MODIFIED_BY); } }
        public IField CLIENTB_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CLIENTB_LAST_MODIFIED_TMST); } }
        public IField CLIENTB_SENSITIVE_FLAG { get { return GetElementByName<IField>(Names.CLIENTB_SENSITIVE_FLAG); } }
        public IField CLIENTB_CIS_PREFERRED_ID { get { return GetElementByName<IField>(Names.CLIENTB_CIS_PREFERRED_ID); } }
        public IField CLIENTB_NAME_TYPE { get { return GetElementByName<IField>(Names.CLIENTB_NAME_TYPE); } }
        public IGroup DCLKSD_CASE_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CASE_BASIC); } }
        public IField CASEB_CASE_NUMBER { get { return GetElementByName<IField>(Names.CASEB_CASE_NUMBER); } }
        public IField CASEB_TELEPHONE { get { return GetElementByName<IField>(Names.CASEB_TELEPHONE); } }
        public IField CASEB_CASE_STATUS { get { return GetElementByName<IField>(Names.CASEB_CASE_STATUS); } }
        public IField CASEB_CASE_STATUS_DATE { get { return GetElementByName<IField>(Names.CASEB_CASE_STATUS_DATE); } }
        public IField CASEB_CASE_SURNAME { get { return GetElementByName<IField>(Names.CASEB_CASE_SURNAME); } }
        public IField CASEB_CASE_GIVEN_NAME { get { return GetElementByName<IField>(Names.CASEB_CASE_GIVEN_NAME); } }
        public IField CASEB_CASE_INITIAL { get { return GetElementByName<IField>(Names.CASEB_CASE_INITIAL); } }
        public IField CASEB_CASEWORKR_GIVN_NME { get { return GetElementByName<IField>(Names.CASEB_CASEWORKR_GIVN_NME); } }
        public IField CASEB_CASEWORKR_SURNAME { get { return GetElementByName<IField>(Names.CASEB_CASEWORKR_SURNAME); } }
        public IField CASEB_CASEWORKR_MI { get { return GetElementByName<IField>(Names.CASEB_CASEWORKR_MI); } }
        public IField CASEB_AR_SURNAME { get { return GetElementByName<IField>(Names.CASEB_AR_SURNAME); } }
        public IField CASEB_AR_GIVEN_NAME { get { return GetElementByName<IField>(Names.CASEB_AR_GIVEN_NAME); } }
        public IField CASEB_AR_INITIAL { get { return GetElementByName<IField>(Names.CASEB_AR_INITIAL); } }
        public IField CASEB_FILE_LOCATION { get { return GetElementByName<IField>(Names.CASEB_FILE_LOCATION); } }
        public IField CASEB_PAYEE_SURNAME { get { return GetElementByName<IField>(Names.CASEB_PAYEE_SURNAME); } }
        public IField CASEB_PAYEE_GIVEN_NAME { get { return GetElementByName<IField>(Names.CASEB_PAYEE_GIVEN_NAME); } }
        public IField CASEB_PAYEE_INITIAL { get { return GetElementByName<IField>(Names.CASEB_PAYEE_INITIAL); } }
        public IField CASEB_TELEPHONE_2_NUMBER { get { return GetElementByName<IField>(Names.CASEB_TELEPHONE_2_NUMBER); } }
        public IField CASEB_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CASEB_CREATED_TIMESTAMP); } }
        public IField CASEB_CREATED_BY { get { return GetElementByName<IField>(Names.CASEB_CREATED_BY); } }
        public IField CASEB_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CASEB_LAST_MODIFIED_BY); } }
        public IField CASEB_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CASEB_LAST_MODIFIED_TMST); } }
        public IGroup DCLKSD_CASE_COMP { get { return GetElementByName<IGroup>(Names.DCLKSD_CASE_COMP); } }
        public IField CASEC_BENEFIT_MONTH { get { return GetElementByName<IField>(Names.CASEC_BENEFIT_MONTH); } }
        public IField CASEC_PARTICIPATION_CODE { get { return GetElementByName<IField>(Names.CASEC_PARTICIPATION_CODE); } }
        public IField CASEC_MEDICAL_SUBTYPE { get { return GetElementByName<IField>(Names.CASEC_MEDICAL_SUBTYPE); } }
        public IField CASEC_POSITION_ON_APP { get { return GetElementByName<IField>(Names.CASEC_POSITION_ON_APP); } }
        public IField CASEC_CASE_OPEN_DT { get { return GetElementByName<IField>(Names.CASEC_CASE_OPEN_DT); } }
        public IField CASEC_CASE_CLOSE_DT { get { return GetElementByName<IField>(Names.CASEC_CASE_CLOSE_DT); } }
        public IField CASEC_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CASEC_CREATED_TIMESTAMP); } }
        public IField CASEC_CREATED_BY { get { return GetElementByName<IField>(Names.CASEC_CREATED_BY); } }
        public IField CASEC_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CASEC_LAST_MODIFIED_BY); } }
        public IField CASEC_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CASEC_LAST_MODIFIED_TMST); } }
        public IField CASEC_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CASEC_FK_CLB_CLIENT_NO); } }
        public IField CASEC_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.CASEC_FK_CSB_CASE_NO); } }
        public IField CASEC_FK_PGB_PROG_TYPE { get { return GetElementByName<IField>(Names.CASEC_FK_PGB_PROG_TYPE); } }
        public IGroup DCLKSD_PARTICIPATION { get { return GetElementByName<IGroup>(Names.DCLKSD_PARTICIPATION); } }
        public IField PART_KESSEP_TIME_STMP { get { return GetElementByName<IField>(Names.PART_KESSEP_TIME_STMP); } }
        public IField PART_PART_END_DATE { get { return GetElementByName<IField>(Names.PART_PART_END_DATE); } }
        public IField PART_PART_START_DATE { get { return GetElementByName<IField>(Names.PART_PART_START_DATE); } }
        public IField PART_PART_CODE { get { return GetElementByName<IField>(Names.PART_PART_CODE); } }
        public IField PART_PROGRAM_END_DATE { get { return GetElementByName<IField>(Names.PART_PROGRAM_END_DATE); } }
        public IField PART_PROGRAM_SUBTYPE { get { return GetElementByName<IField>(Names.PART_PROGRAM_SUBTYPE); } }
        public IField PART_RELATIONSHIP { get { return GetElementByName<IField>(Names.PART_RELATIONSHIP); } }
        public IField PART_CREATED_BY { get { return GetElementByName<IField>(Names.PART_CREATED_BY); } }
        public IField PART_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.PART_CREATED_TIMESTAMP); } }
        public IField PART_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.PART_LAST_MODIFIED_BY); } }
        public IField PART_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.PART_LAST_MODIFIED_TMST); } }
        public IField PART_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.PART_FK_CSB_CASE_NO); } }
        public IField PART_FK_PGB_PROG_TYPE { get { return GetElementByName<IField>(Names.PART_FK_PGB_PROG_TYPE); } }
        public IField PART_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.PART_FK_CLB_CLIENT_NO); } }
        public IGroup DCLKSD_SYSTEM_PART { get { return GetElementByName<IGroup>(Names.DCLKSD_SYSTEM_PART); } }
        public IField SYSPART_SYSTEM_CODE { get { return GetElementByName<IField>(Names.SYSPART_SYSTEM_CODE); } }
        public IField SYSPART_PARTICIPATION_FLAG { get { return GetElementByName<IField>(Names.SYSPART_PARTICIPATION_FLAG); } }
        public IField SYSPART_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.SYSPART_CREATED_TIMESTAMP); } }
        public IField SYSPART_CREATED_BY { get { return GetElementByName<IField>(Names.SYSPART_CREATED_BY); } }
        public IField SYSPART_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.SYSPART_LAST_MODIFIED_BY); } }
        public IField SYSPART_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.SYSPART_LAST_MODIFIED_TMST); } }
        public IField SYSPART_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.SYSPART_FK_CLB_CLIENT_NO); } }
        public IField SYSPART_FK_CLI_CLIENT_NAME { get { return GetElementByName<IField>(Names.SYSPART_FK_CLI_CLIENT_NAME); } }
        public IField SYSPART_FK_CLI_SSN { get { return GetElementByName<IField>(Names.SYSPART_FK_CLI_SSN); } }
        public IGroup DCLKSD_NEXT_CLIENT_ID { get { return GetElementByName<IGroup>(Names.DCLKSD_NEXT_CLIENT_ID); } }
        public IField NEXTCLI_IDENT { get { return GetElementByName<IField>(Names.NEXTCLI_IDENT); } }
        public IField NEXTCLI_NEXT_CLIENT_ID { get { return GetElementByName<IField>(Names.NEXTCLI_NEXT_CLIENT_ID); } }
        public IField NEXTCLI_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.NEXTCLI_CREATED_TIMESTAMP); } }
        public IField NEXTCLI_CREATED_BY { get { return GetElementByName<IField>(Names.NEXTCLI_CREATED_BY); } }
        public IField NEXTCLI_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.NEXTCLI_LAST_MODIFIED_BY); } }
        public IField NEXTCLI_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.NEXTCLI_LAST_MODIFIED_TMST); } }
        public IGroup WS_DB2_CONSTANT_AREAS { get { return GetElementByName<IGroup>(Names.WS_DB2_CONSTANT_AREAS); } }
        public IField WS_SYS_CD_AE { get { return GetElementByName<IField>(Names.WS_SYS_CD_AE); } }
        public IField WS_SYS_CD_CS { get { return GetElementByName<IField>(Names.WS_SYS_CD_CS); } }
        public IField WS_SYS_CD_KA { get { return GetElementByName<IField>(Names.WS_SYS_CD_KA); } }
        public IField WS_SYS_CD_KS { get { return GetElementByName<IField>(Names.WS_SYS_CD_KS); } }
        public IField WS_SYS_CD_FA { get { return GetElementByName<IField>(Names.WS_SYS_CD_FA); } }
        public IField WS_SYS_CD_KM { get { return GetElementByName<IField>(Names.WS_SYS_CD_KM); } }
        public IField WS_YES_Y { get { return GetElementByName<IField>(Names.WS_YES_Y); } }
        public IField WS_IDENT_0000000001 { get { return GetElementByName<IField>(Names.WS_IDENT_0000000001); } }
        public IGroup WS_DB2_WORK_AREAS { get { return GetElementByName<IGroup>(Names.WS_DB2_WORK_AREAS); } }
        public IField WS_CASE_NUMBER_NUM { get { return GetElementByName<IField>(Names.WS_CASE_NUMBER_NUM); } }
        public IField WS_OLD_CLB_SSN { get { return GetElementByName<IField>(Names.WS_OLD_CLB_SSN); } }
        public IField PART_WS_END_DATE { get { return GetElementByName<IField>(Names.PART_WS_END_DATE); } }
        public IField PART_WS_START_DATE { get { return GetElementByName<IField>(Names.PART_WS_START_DATE); } }
        public IField CLIENT_WS_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENT_WS_DATE_OF_BIRTH); } }
        public IField WS_CLIENT_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.WS_CLIENT_DATE_OF_BIRTH); } }
        public IGroup WS_DB2_SWITCHES { get { return GetElementByName<IGroup>(Names.WS_DB2_SWITCHES); } }
        public IField WS_CASE_EOF_SW { get { return GetElementByName<IField>(Names.WS_CASE_EOF_SW); } }
        public ICheckField WS_CASE_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_CASE_EOF_NO); } }
        public ICheckField WS_CASE_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_CASE_EOF_YES); } }
        public IField WS_CASEC_EOF_SW { get { return GetElementByName<IField>(Names.WS_CASEC_EOF_SW); } }
        public ICheckField WS_CASEC_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_CASEC_EOF_NO); } }
        public ICheckField WS_CASEC_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_CASEC_EOF_YES); } }
        public IField WS_CLIENT_EOF_SW { get { return GetElementByName<IField>(Names.WS_CLIENT_EOF_SW); } }
        public ICheckField WS_CLIENT_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_CLIENT_EOF_NO); } }
        public ICheckField WS_CLIENT_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_CLIENT_EOF_YES); } }
        public IField WS_CLIENTB_EOF_SW { get { return GetElementByName<IField>(Names.WS_CLIENTB_EOF_SW); } }
        public ICheckField WS_CLIENTB_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_CLIENTB_EOF_NO); } }
        public ICheckField WS_CLIENTB_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_CLIENTB_EOF_YES); } }
        public IField WS_PART_EOF_SW { get { return GetElementByName<IField>(Names.WS_PART_EOF_SW); } }
        public ICheckField WS_PART_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_PART_EOF_NO); } }
        public ICheckField WS_PART_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_PART_EOF_YES); } }
        public IField WS_SYSPART_EOF_SW { get { return GetElementByName<IField>(Names.WS_SYSPART_EOF_SW); } }
        public ICheckField WS_SYSPART_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_SYSPART_EOF_NO); } }
        public ICheckField WS_SYSPART_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_SYSPART_EOF_YES); } }
        public IField WS_CASEC_1ST_SW { get { return GetElementByName<IField>(Names.WS_CASEC_1ST_SW); } }
        public ICheckField WS_CASEC_1ST_NO { get { return GetElementByName<ICheckField>(Names.WS_CASEC_1ST_NO); } }
        public ICheckField WS_CASEC_1ST_YES { get { return GetElementByName<ICheckField>(Names.WS_CASEC_1ST_YES); } }
        public IField WS_CLIENT_1ST_SW { get { return GetElementByName<IField>(Names.WS_CLIENT_1ST_SW); } }
        public ICheckField WS_CLIENT_1ST_NO { get { return GetElementByName<ICheckField>(Names.WS_CLIENT_1ST_NO); } }
        public ICheckField WS_CLIENT_1ST_YES { get { return GetElementByName<ICheckField>(Names.WS_CLIENT_1ST_YES); } }
        public IField WS_PART_1ST_SW { get { return GetElementByName<IField>(Names.WS_PART_1ST_SW); } }
        public ICheckField WS_PART_1ST_NO { get { return GetElementByName<ICheckField>(Names.WS_PART_1ST_NO); } }
        public ICheckField WS_PART_1ST_YES { get { return GetElementByName<ICheckField>(Names.WS_PART_1ST_YES); } }
        public IGroup WS_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.WS_CLIENT_POINTER); } }
        public IField WS_CLIPTR_CLIENT_ID { get { return GetElementByName<IField>(Names.WS_CLIPTR_CLIENT_ID); } }
        public IField WS_CLIPTR_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.WS_CLIPTR_VERIFIED_SSN_FLAG); } }
        public IGroup WS_CLIPTR_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.WS_CLIPTR_SYSTEM_PARTICIPATION); } }
        public IField WS_CLIPTR_SYSPART_AE { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_AE); } }
        public IField WS_CLIPTR_SYSPART_CS { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_CS); } }
        public IField WS_CLIPTR_SYSPART_KA { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_KA); } }
        public IField WS_CLIPTR_SYSPART_KS { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_KS); } }
        public IField WS_CLIPTR_SYSPART_FA { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_FA); } }
        public IField WS_CLIPTR_SYSPART_KM { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_KM); } }
        public IField WS_CLIPTR_FILL { get { return GetElementByName<IField>(Names.WS_CLIPTR_FILL); } }
        public IGroup WS_UPD_UNIQUE_KEY { get { return GetElementByName<IGroup>(Names.WS_UPD_UNIQUE_KEY); } }
        public IField WS_UUK_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.WS_UUK_CLIENT_NUMBER); } }
        public IGroup WS_UUK_CLIENT_NAME { get { return GetElementByName<IGroup>(Names.WS_UUK_CLIENT_NAME); } }
        public IField WS_UUK_CLI_LAST_NAME { get { return GetElementByName<IField>(Names.WS_UUK_CLI_LAST_NAME); } }
        public IField WS_UUK_CLI_FIRST_NAME { get { return GetElementByName<IField>(Names.WS_UUK_CLI_FIRST_NAME); } }
        public IField WS_UUK_CLI_INITIAL { get { return GetElementByName<IField>(Names.WS_UUK_CLI_INITIAL); } }
        public IField WS_UUK_SSN { get { return GetElementByName<IField>(Names.WS_UUK_SSN); } }
        public IField WS_UUK_DOB { get { return GetElementByName<IField>(Names.WS_UUK_DOB); } }
        public IField WS_UUK_SEX { get { return GetElementByName<IField>(Names.WS_UUK_SEX); } }
        public IField WS_UUK_VERIFY_FLAG { get { return GetElementByName<IField>(Names.WS_UUK_VERIFY_FLAG); } }
        public IGroup WS_UUK_CLIPTR_SYSTEM_PART { get { return GetElementByName<IGroup>(Names.WS_UUK_CLIPTR_SYSTEM_PART); } }
        public IField WS_UUK_AE_FLAG { get { return GetElementByName<IField>(Names.WS_UUK_AE_FLAG); } }
        public IField WS_UUK_CS_FLAG { get { return GetElementByName<IField>(Names.WS_UUK_CS_FLAG); } }
        public IField WS_UUK_KC_FLAG { get { return GetElementByName<IField>(Names.WS_UUK_KC_FLAG); } }
        public IField WS_UUK_KP_FLAG { get { return GetElementByName<IField>(Names.WS_UUK_KP_FLAG); } }
        public IField WS_UUK_FA_FLAG { get { return GetElementByName<IField>(Names.WS_UUK_FA_FLAG); } }
        public IField WS_UUK_PART_FILL { get { return GetElementByName<IField>(Names.WS_UUK_PART_FILL); } }
        public IField WS_UUK_FILL { get { return GetElementByName<IField>(Names.WS_UUK_FILL); } }
        public IField WS_SYS_PART_CNT { get { return GetElementByName<IField>(Names.WS_SYS_PART_CNT); } }
        public IField WS_INS_PART_CNT { get { return GetElementByName<IField>(Names.WS_INS_PART_CNT); } }
        public IGroup WS_DB2_SYSTEM_PART_TABLE { get { return GetElementByName<IGroup>(Names.WS_DB2_SYSTEM_PART_TABLE); } }
        public IArrayElementAccessor<IGroup> WS_DB2_SYSTEM_PART { get { return GetArrayElementAccessor<IGroup>(Names.WS_DB2_SYSTEM_PART); } }
        public IArrayElementAccessor<IField> WS_DB2_SYSTEM_CODE { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_SYSTEM_CODE); } }
        public IArrayElementAccessor<IField> WS_DB2_PARTICIPATION_FLAG { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_PARTICIPATION_FLAG); } }
        public IArrayElementAccessor<IField> WS_DB2_CREATED_TIMESTAMP { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_CREATED_TIMESTAMP); } }
        public IArrayElementAccessor<IField> WS_DB2_CREATED_BY { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_CREATED_BY); } }
        public IArrayElementAccessor<IField> WS_DB2_LAST_MODIFIED_BY { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_LAST_MODIFIED_BY); } }
        public IArrayElementAccessor<IField> WS_DB2_LAST_MODIFIED_TMST { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_LAST_MODIFIED_TMST); } }
        public IArrayElementAccessor<IField> WS_DB2_FK_CLB_CLIENT_NO { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_FK_CLB_CLIENT_NO); } }
        public IArrayElementAccessor<IField> WS_DB2_FK_CLI_CLIENT_NAME { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_FK_CLI_CLIENT_NAME); } }
        public IArrayElementAccessor<IField> WS_DB2_FK_CLI_SSN { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_FK_CLI_SSN); } }
        public IField WS_DUP_CLT_CNT { get { return GetElementByName<IField>(Names.WS_DUP_CLT_CNT); } }
        public IField WS_CHK_CLT_NO { get { return GetElementByName<IField>(Names.WS_CHK_CLT_NO); } }
        public IField WS_CHK_CLT_SSN { get { return GetElementByName<IField>(Names.WS_CHK_CLT_SSN); } }
        public IGroup CONTROL_BLOCK { get { return GetElementByName<IGroup>(Names.CONTROL_BLOCK); } }
        public IField COMMAND_CODE { get { return GetElementByName<IField>(Names.COMMAND_CODE); } }
        public IField COMMAND_ID { get { return GetElementByName<IField>(Names.COMMAND_ID); } }
        public IField FILE_NUMBER { get { return GetElementByName<IField>(Names.FILE_NUMBER); } }
        public IField RESPONSE_CODE { get { return GetElementByName<IField>(Names.RESPONSE_CODE); } }
        public IField ISN { get { return GetElementByName<IField>(Names.ISN); } }
        public IField ISN_LOWER_LIMIT { get { return GetElementByName<IField>(Names.ISN_LOWER_LIMIT); } }
        public IField ISN_QUANTITY { get { return GetElementByName<IField>(Names.ISN_QUANTITY); } }
        public IField FORMAT_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.FORMAT_BUFFER_LENGTH); } }
        public IField RECORD_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.RECORD_BUFFER_LENGTH); } }
        public IField SEARCH_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.SEARCH_BUFFER_LENGTH); } }
        public IField VALUE_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.VALUE_BUFFER_LENGTH); } }
        public IField ISN_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.ISN_BUFFER_LENGTH); } }
        public IField COMMAND_OPTION_1 { get { return GetElementByName<IField>(Names.COMMAND_OPTION_1); } }
        public IField COMMAND_OPTION_2 { get { return GetElementByName<IField>(Names.COMMAND_OPTION_2); } }
        public IField ADDITIONS_1 { get { return GetElementByName<IField>(Names.ADDITIONS_1); } }
        public IField ADDITIONS_2 { get { return GetElementByName<IField>(Names.ADDITIONS_2); } }
        public IField ADDITIONS_3 { get { return GetElementByName<IField>(Names.ADDITIONS_3); } }
        public IField ADDITIONS_4 { get { return GetElementByName<IField>(Names.ADDITIONS_4); } }
        public IField COMMAND_TIME { get { return GetElementByName<IField>(Names.COMMAND_TIME); } }
        public IField USER_AREA { get { return GetElementByName<IField>(Names.USER_AREA); } }
        public IField PH_FNTIC_C1 { get { return GetElementByName<IField>(Names.PH_FNTIC_C1); } }
        public IField PH_FNTIC_C2 { get { return GetElementByName<IField>(Names.PH_FNTIC_C2); } }
        public IField PH_FNTIC_C3 { get { return GetElementByName<IField>(Names.PH_FNTIC_C3); } }
        public IField PH_FNTIC_CX { get { return GetElementByName<IField>(Names.PH_FNTIC_CX); } }
        public IField PH_SUSS_ID { get { return GetElementByName<IField>(Names.PH_SUSS_ID); } }
        public IField PH_HIT { get { return GetElementByName<IField>(Names.PH_HIT); } }
        public IField PH_ERR_NAME { get { return GetElementByName<IField>(Names.PH_ERR_NAME); } }
        public IField PH_COUNT_UP { get { return GetElementByName<IField>(Names.PH_COUNT_UP); } }
        public IField PH_COUNT_INQUIRY { get { return GetElementByName<IField>(Names.PH_COUNT_INQUIRY); } }
        public IField PH_COUNT_DB { get { return GetElementByName<IField>(Names.PH_COUNT_DB); } }
        public IField PH_L1 { get { return GetElementByName<IField>(Names.PH_L1); } }
        public IField PH_CR1_INDXX { get { return GetElementByName<IField>(Names.PH_CR1_INDXX); } }
        public IField PH_CR2_INDXX { get { return GetElementByName<IField>(Names.PH_CR2_INDXX); } }
        public IField PH_CF1_INDXX { get { return GetElementByName<IField>(Names.PH_CF1_INDXX); } }
        public IField PH_CF2_INDXX { get { return GetElementByName<IField>(Names.PH_CF2_INDXX); } }
        public IField PH_DEGREE { get { return GetElementByName<IField>(Names.PH_DEGREE); } }
        public IField PH_PERCENT { get { return GetElementByName<IField>(Names.PH_PERCENT); } }
        public IField PH_NAME_RAW_INQ { get { return GetElementByName<IField>(Names.PH_NAME_RAW_INQ); } }
        public IField PH_NAME_RAW_MSTR { get { return GetElementByName<IField>(Names.PH_NAME_RAW_MSTR); } }
        public IGroup PH_NAME_CRUNCH_INQ { get { return GetElementByName<IGroup>(Names.PH_NAME_CRUNCH_INQ); } }
        public IArrayElementAccessor<IField> PH_L_CRNCH { get { return GetArrayElementAccessor<IField>(Names.PH_L_CRNCH); } }
        public IGroup PH_NAME_REDUC_INQ { get { return GetElementByName<IGroup>(Names.PH_NAME_REDUC_INQ); } }
        public IArrayElementAccessor<IField> PH_L_REDUC { get { return GetArrayElementAccessor<IField>(Names.PH_L_REDUC); } }
        public IGroup PH_SAVE_REDUC_INQ { get { return GetElementByName<IGroup>(Names.PH_SAVE_REDUC_INQ); } }
        public IArrayElementAccessor<IField> PH_S_REDUC { get { return GetArrayElementAccessor<IField>(Names.PH_S_REDUC); } }
        public IGroup PH_NAME_PARTS { get { return GetElementByName<IGroup>(Names.PH_NAME_PARTS); } }
        public IGroup PH_THREE_LETTERS { get { return GetElementByName<IGroup>(Names.PH_THREE_LETTERS); } }
        public IArrayElementAccessor<IField> PH_LETTERS_3 { get { return GetArrayElementAccessor<IField>(Names.PH_LETTERS_3); } }
        public IField PH_TWO_LETTERS { get { return GetElementByName<IField>(Names.PH_TWO_LETTERS); } }
        public IField PH_ONE_LETTER { get { return GetElementByName<IField>(Names.PH_ONE_LETTER); } }
        public IGroup PH_NAME_34_NUMERIC { get { return GetElementByName<IGroup>(Names.PH_NAME_34_NUMERIC); } }
        public IArrayElementAccessor<IField> PH_NAME_NUM_34 { get { return GetArrayElementAccessor<IField>(Names.PH_NAME_NUM_34); } }
        public IGroup PH_NAME_17_NUMERIC { get { return GetElementByName<IGroup>(Names.PH_NAME_17_NUMERIC); } }
        public IArrayElementAccessor<IField> PH_NAME_NUM_17 { get { return GetArrayElementAccessor<IField>(Names.PH_NAME_NUM_17); } }
        public IGroup PH_REFMT_34_17 { get { return GetElementByName<IGroup>(Names.PH_REFMT_34_17); } }
        public IField PH_DIGIT_1 { get { return GetElementByName<IField>(Names.PH_DIGIT_1); } }
        public IField PH_DIGIT_2 { get { return GetElementByName<IField>(Names.PH_DIGIT_2); } }
        public IGroup PH_FIRST_2_TABLE { get { return GetElementByName<IGroup>(Names.PH_FIRST_2_TABLE); } }
        public IGroup PH_FIRST_2_TBL { get { return GetElementByName<IGroup>(Names.PH_FIRST_2_TBL); } }
        public IArrayElementAccessor<IGroup> PH_FR2_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_FR2_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPH2 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPH2); } }
        public IArrayElementAccessor<IField> PH_NUM2 { get { return GetArrayElementAccessor<IField>(Names.PH_NUM2); } }
        public IGroup PH_FIRST_1_TABLE { get { return GetElementByName<IGroup>(Names.PH_FIRST_1_TABLE); } }
        public IGroup PH_FIRST_1_TBL { get { return GetElementByName<IGroup>(Names.PH_FIRST_1_TBL); } }
        public IArrayElementAccessor<IGroup> PH_FR1_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_FR1_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPH1 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPH1); } }
        public IArrayElementAccessor<IField> PH_NUM1 { get { return GetArrayElementAccessor<IField>(Names.PH_NUM1); } }
        public IGroup PH_REMAIN_2_TABLE { get { return GetElementByName<IGroup>(Names.PH_REMAIN_2_TABLE); } }
        public IGroup PH_REMAIN_2_TBL { get { return GetElementByName<IGroup>(Names.PH_REMAIN_2_TBL); } }
        public IArrayElementAccessor<IGroup> PH_RR2_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_RR2_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPHR2 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPHR2); } }
        public IArrayElementAccessor<IField> PH_NUMR2 { get { return GetArrayElementAccessor<IField>(Names.PH_NUMR2); } }
        public IGroup PH_REMAIN_1_TABLE { get { return GetElementByName<IGroup>(Names.PH_REMAIN_1_TABLE); } }
        public IGroup PH_REMAIN_1_TBL { get { return GetElementByName<IGroup>(Names.PH_REMAIN_1_TBL); } }
        public IArrayElementAccessor<IGroup> PH_RR1_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_RR1_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPHR1 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPHR1); } }
        public IArrayElementAccessor<IField> PH_NUMR1 { get { return GetArrayElementAccessor<IField>(Names.PH_NUMR1); } }
        public IField PH_CF2_INDEX { get { return GetElementByName<IField>(Names.PH_CF2_INDEX); } }
        public IField PH_CF1_INDEX { get { return GetElementByName<IField>(Names.PH_CF1_INDEX); } }
        public IField PH_CR2_INDEX { get { return GetElementByName<IField>(Names.PH_CR2_INDEX); } }
        public IField PH_CR1_INDEX { get { return GetElementByName<IField>(Names.PH_CR1_INDEX); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.FUNC_0329176144_ESC_FLAG, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.EXTERNAL_ACTION_BLOCK_WS, (EXTERNAL_ACTION_BLOCK_WS) =>
           {
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.SRADALNK, FieldType.String, 8, "SWASZ990");
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.SRMODLNK, FieldType.String, 8, "SWEXIU10");
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_ABEND_FIELDS, (MV_ABEND_FIELDS) =>
               {
                   MV_ABEND_FIELDS.CreateNewField(Names.MV_ABEND_TYPE, FieldType.String, 1)
                       .NewCheckField(Names.MV_ABEND_TYPE_NONE, SPACE)
                       .NewCheckField(Names.MV_ABEND_TYPE_ADABAS, "A")
                       .NewCheckField(Names.MV_ABEND_TYPE_CICS, "C")
                       ;
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_ADABAS, (MV_ABEND_ADABAS) =>
                   {
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_ACTION, FieldType.String, 3);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
                   });
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_CICS, (MV_ABEND_CICS) =>
                   {
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_RESOURCE_NM, FieldType.String, 8);
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_FUNCTION_CD, FieldType.String, 2);
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_RESPONSE_CD, FieldType.String, 6);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_ABS_TIME, FieldType.PackedDecimal, 15);
               IGroup MV_CCYYMMDD_X8_local = (IGroup)EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CCYYMMDD_X8, (MV_CCYYMMDD_X8) =>
               {
                   MV_CCYYMMDD_X8.CreateNewField(Names.MV_CC, FieldType.UnsignedNumeric, 2);
                   IGroup MV_YYMMDD_X6_local = (IGroup)MV_CCYYMMDD_X8.CreateNewGroup(Names.MV_YYMMDD_X6, (MV_YYMMDD_X6) =>
                   {
                       MV_YYMMDD_X6.CreateNewField(Names.MV_YY, FieldType.UnsignedNumeric, 2);
                       MV_YYMMDD_X6.CreateNewField(Names.MV_MM, FieldType.UnsignedNumeric, 2);
                       MV_YYMMDD_X6.CreateNewField(Names.MV_DD, FieldType.UnsignedNumeric, 2);
                       MV_YYMMDD_X6.CreateNewFillerField(2, FillWith.Hashes);
                   });
                   MV_CCYYMMDD_X8.CreateNewGroupRedefine("FILLER_d2", MV_YYMMDD_X6_local, (FILLER_d2) =>
                   {
                       FILLER_d2.CreateNewField(Names.MV_YYMMDD, FieldType.UnsignedNumeric, 6);
                       FILLER_d2.CreateNewFillerField(2, FillWith.Hashes);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d4", MV_CCYYMMDD_X8_local, (FILLER_d4) =>
               {
                   FILLER_d4.CreateNewField(Names.MV_CURRENT_CCYY, FieldType.UnsignedNumeric, 4);
                   FILLER_d4.CreateNewField(Names.MV_CURRENT_MMDD, FieldType.UnsignedNumeric, 4);
                   FILLER_d4.CreateNewFillerField(2, FillWith.Hashes);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d6", MV_CCYYMMDD_X8_local, (FILLER_d6) =>
               {
                   FILLER_d6.CreateNewField(Names.MV_CCYYMMDD, FieldType.UnsignedNumeric, 8);
                   FILLER_d6.CreateNewFillerField(2, FillWith.Hashes);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_COMPLEMENT_DATE, FieldType.UnsignedPackedDecimal, 9);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_WRK_PTR, FieldType.CompShort, 4);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_ISN, FieldType.CompInt, 9);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_KCC_PTR, FieldType.CompShort, 4);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_CLIENT_INFO_NUMBER, FieldType.String, 10);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_CLIENT_FOUND_IND, FieldType.String, 1)
                   .NewCheckField(Names.MV_CLIENT_FOUND, "Y")
                   ;
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_POINTER_X31, (MV_CLIENT_POINTER_X31) =>
               {
                   MV_CLIENT_POINTER_X31.CreateNewField(Names.MV_CLIENT_POINTER_X10, FieldType.String, 10);
                   MV_CLIENT_POINTER_X31.CreateNewField(Names.MV_CLIENT_POINTER_X21, FieldType.String, 21);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_ID_KEY, (MV_CLIENT_ID_KEY) =>
               {
                   MV_CLIENT_ID_KEY.CreateNewField(Names.MV_CIK_CLIENT_POINTER_X10, FieldType.String, 10);
                   MV_CLIENT_ID_KEY.CreateNewField(Names.MV_CIK_CLIENT_NAME, FieldType.String, 30);
                   MV_CLIENT_ID_KEY.CreateNewField(Names.MV_CIK_SSN, FieldType.UnsignedNumeric, 9);

                   IField MV_CIK_DATE_OF_BIRTH_SEX_local = MV_CLIENT_ID_KEY.CreateNewField(Names.MV_CIK_DATE_OF_BIRTH_SEX, FieldType.String, 9);
                   MV_CLIENT_ID_KEY.CreateNewGroupRedefine("FILLER_d8", MV_CIK_DATE_OF_BIRTH_SEX_local, (FILLER_d8) =>
                   {
                       FILLER_d8.CreateNewField(Names.MV_CIK_DATE_OF_BIRTH, FieldType.String, 8);
                       FILLER_d8.CreateNewField(Names.MV_CIK_SEX, FieldType.String, 1);
                   });
                   MV_CLIENT_ID_KEY.CreateNewGroup(Names.MV_CIK_CLIENT_POINTER_X21, (MV_CIK_CLIENT_POINTER_X21) =>
                   {
                       MV_CIK_CLIENT_POINTER_X21.CreateNewField(Names.MV_CIK_VERIFIED_SSN_FLAG, FieldType.String, 1);
                       MV_CIK_CLIENT_POINTER_X21.CreateNewGroup(Names.MV_CIK_SYSTEM_PARTICIPATION, (MV_CIK_SYSTEM_PARTICIPATION) =>
                       {
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_AE, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_CSE, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_KANPAY, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_KSCARES, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_FACTS, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_KMIS, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewFillerField(14, FillWith.Hashes);
                       });
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_RECORD_NAME, (MV_RECORD_NAME) =>
               {
                   MV_RECORD_NAME.CreateNewField(Names.MV_RECORD_LAST_NAME, FieldType.String, 17);
                   MV_RECORD_NAME.CreateNewGroup(Names.MV_RECORD_FIRST_NAME, (MV_RECORD_FIRST_NAME) =>
                   {
                       MV_RECORD_FIRST_NAME.CreateNewField(Names.MV_RECORD_FIRST_NAME_1, FieldType.String, 1);
                       MV_RECORD_FIRST_NAME.CreateNewField(Names.MV_RECORD_FIRST_NAME_11, FieldType.String, 11);
                   });
                   MV_RECORD_NAME.CreateNewField(Names.MV_RECORD_INITIAL, FieldType.String, 1);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_PHONETIC_DATA, (MV_PHONETIC_DATA) =>
               {
                   MV_PHONETIC_DATA.CreateNewField(Names.MV_PHONETIC_1, FieldType.String, 1);
                   MV_PHONETIC_DATA.CreateNewField(Names.MV_PHONETIC_CODE, FieldType.String, 17);
                   MV_PHONETIC_DATA.CreateNewField(Names.MV_PHONETIC_3, FieldType.String, 3);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_DATE_OF_BIRTH_SEX, (MV_DATE_OF_BIRTH_SEX) =>
               {
                   MV_DATE_OF_BIRTH_SEX.CreateNewGroup(Names.MV_DATE_OF_BIRTH_X8, (MV_DATE_OF_BIRTH_X8) =>
                   {
                       MV_DATE_OF_BIRTH_X8.CreateNewField(Names.MV_DATE_OF_BIRTH, FieldType.UnsignedNumeric, 8);
                   });
                   MV_DATE_OF_BIRTH_SEX.CreateNewField(Names.MV_SEX, FieldType.String, 1);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_POINTER, (MV_CLIENT_POINTER) =>
               {
                   MV_CLIENT_POINTER.CreateNewGroup(Names.MV_CLIENT_ID, (MV_CLIENT_ID) =>
                   {
                       MV_CLIENT_ID.CreateNewField(Names.MV_CLIENT_ID_910, FieldType.UnsignedNumeric, 10);
                   });
                   MV_CLIENT_POINTER.CreateNewGroup(Names.MV_CLIENT_POINTER_FLAGS, (MV_CLIENT_POINTER_FLAGS) =>
                   {
                       MV_CLIENT_POINTER_FLAGS.CreateNewField(Names.MV_VERIFIED_SSN_FLAG, FieldType.String, 1);
                       MV_CLIENT_POINTER_FLAGS.CreateNewGroup(Names.MV_SYSTEM_PARTICIPATION, (MV_SYSTEM_PARTICIPATION) =>
                       {
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_AE, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_AE_YES, "Y")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_CSE, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_CSE_YES, "Y", "A")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_KANPAY, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_KANPAY_YES, "Y")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_KSCARES, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_KSCARES_YES, "Y")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_FACTS, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_FACTS_YES, "Y")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_KMIS, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_KMIS_YES, "Y")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewFillerField(14, FillWith.Hashes);
                       });
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_AE_CASE_BASIC_TABLE, (MV_AE_CASE_BASIC_TABLE) =>
               {
                   MV_AE_CASE_BASIC_TABLE.CreateNewGroupArray("FILLER_d11", 50, (FILLER_d11) =>
                   {
                       FILLER_d11.CreateNewGroup(Names.MV_AE_CASE_BASIC_NUMBER, (MV_AE_CASE_BASIC_NUMBER) =>
                       {
                           MV_AE_CASE_BASIC_NUMBER.CreateNewField(Names.MV_AE_CASE_BASIC_ISN, FieldType.UnsignedNumeric, 8);
                       });
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_ACB_PTR, FieldType.CompShort, 4);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MC_ACB_MAX, FieldType.CompShort, 4, 50);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.IMP_CLIENT_NUMBER_X10, (IMP_CLIENT_NUMBER_X10) =>
               {
                   IMP_CLIENT_NUMBER_X10.CreateNewField(Names.IMP_CLIENT_NUMBER, FieldType.UnsignedNumeric, 10);
               });

               IField IMP_CLIENT_KEY_local = EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.IMP_CLIENT_KEY, FieldType.String, 100);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine(Names.IMP_CLIENT_KEY_RED, IMP_CLIENT_KEY_local, (IMP_CLIENT_KEY_RED) =>
               {
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_CLIENT_NUMBER, FieldType.String, 10);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_CLIENT_NAME, FieldType.String, 30);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_SSN, FieldType.UnsignedNumeric, 9);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_DATE_OF_BIRTH, FieldType.String, 8);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_SEX, FieldType.String, 1);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_VERIFIED_SSN_FLAG, FieldType.String, 1);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_SYS_PART, FieldType.String, 20);
                   IMP_CLIENT_KEY_RED.CreateNewFillerField(21, FillWith.Hashes);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.IMP_CLIENT_INFO, (IMP_CLIENT_INFO) =>
               {
                   IMP_CLIENT_INFO.CreateNewGroup(Names.IMP_NAME, (IMP_NAME) =>
                   {
                       IMP_NAME.CreateNewField(Names.IMP_LAST_NAME, FieldType.String, 17);
                       IMP_NAME.CreateNewField(Names.IMP_FIRST_NAME, FieldType.String, 12);
                       IMP_NAME.CreateNewField(Names.IMP_INITIAL, FieldType.String, 1);
                   });
                   IMP_CLIENT_INFO.CreateNewGroup(Names.IMP_DATE_OF_BIRTH_SEX, (IMP_DATE_OF_BIRTH_SEX) =>
                   {
                       IMP_DATE_OF_BIRTH_SEX.CreateNewGroup(Names.IMP_DATE_OF_BIRTH_X8, (IMP_DATE_OF_BIRTH_X8) =>
                       {
                           IMP_DATE_OF_BIRTH_X8.CreateNewField(Names.IMP_DATE_OF_BIRTH, FieldType.UnsignedNumeric, 8);
                       });
                       IMP_DATE_OF_BIRTH_SEX.CreateNewField(Names.IMP_SEX, FieldType.String, 1);
                   });
                   IMP_CLIENT_INFO.CreateNewGroup(Names.IMP_SOC_SEC_NUM_X9, (IMP_SOC_SEC_NUM_X9) =>
                   {

                       IField IMP_SOC_SEC_NUM_local = IMP_SOC_SEC_NUM_X9.CreateNewField(Names.IMP_SOC_SEC_NUM, FieldType.UnsignedNumeric, 9);
                       IMP_SOC_SEC_NUM_X9.CreateNewGroupRedefine("FILLER_d13", IMP_SOC_SEC_NUM_local, (FILLER_d13) =>
                       {
                           FILLER_d13.CreateNewField(Names.IMP_SOC_SEC_NUM_3, FieldType.UnsignedNumeric, 3)
                               .NewCheckFieldRange(Names.IMP_SOC_SEC_NUM_3_VALID, 001, 665, 667, 899)
                               ;
                           FILLER_d13.CreateNewField(Names.IMP_SOC_SEC_NUM_2, FieldType.UnsignedNumeric, 2)
                               .NewCheckFieldRange(Names.IMP_SOC_SEC_NUM_2_VALID, 01, 99)
                               ;
                           FILLER_d13.CreateNewField(Names.IMP_SOC_SEC_NUM_4, FieldType.UnsignedNumeric, 4)
                               .NewCheckFieldRange(Names.IMP_SOC_SEC_NUM_4_VALID, 0001, 9999)
                               ;
                       });
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.CUR_CLIENT_INFO, (CUR_CLIENT_INFO) =>
               {
                   CUR_CLIENT_INFO.CreateNewGroup(Names.CUR_NAME, (CUR_NAME) =>
                   {
                       CUR_NAME.CreateNewField(Names.CUR_LAST_NAME, FieldType.String, 17);
                       CUR_NAME.CreateNewField(Names.CUR_FIRST_NAME, FieldType.String, 12);
                       CUR_NAME.CreateNewField(Names.CUR_INITIAL, FieldType.String, 1);
                   });
                   CUR_CLIENT_INFO.CreateNewGroup(Names.CUR_DATE_OF_BIRTH_SEX, (CUR_DATE_OF_BIRTH_SEX) =>
                   {
                       CUR_DATE_OF_BIRTH_SEX.CreateNewGroup(Names.CUR_DATE_OF_BIRTH_X8, (CUR_DATE_OF_BIRTH_X8) =>
                       {
                           CUR_DATE_OF_BIRTH_X8.CreateNewField(Names.CUR_DATE_OF_BIRTH, FieldType.UnsignedNumeric, 8);
                       });
                       CUR_DATE_OF_BIRTH_SEX.CreateNewField(Names.CUR_SEX, FieldType.String, 1);
                   });
                   CUR_CLIENT_INFO.CreateNewGroup(Names.CUR_SOC_SEC_NUM_X9, (CUR_SOC_SEC_NUM_X9) =>
                   {
                       CUR_SOC_SEC_NUM_X9.CreateNewField(Names.CUR_SOC_SEC_NUM, FieldType.UnsignedNumeric, 9);
                   });
               });
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT, (DCLKSD_CLIENT) =>
           {
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_PREVIOUS_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_PHONETIC_DATA, FieldType.String, 21);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_DT_OF_LAST_UPDATE, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_DATE_OF_BIRTH, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_VERIFIED_SSN_FLAG, FieldType.String, 1);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_CLIENT_NAME, FieldType.String, 30);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_CREATED_BY, FieldType.String, 8);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_FK_CLB_CLIENT_NO, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_NAME_TYPE, FieldType.String, 1, SPACES);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT_BASIC, (DCLKSD_CLIENT_BASIC) =>
           {
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_NUMBER, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_INITIALS, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_SURNAME, FieldType.String, 17);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CIS_REPL_IND, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_WORK_PHONE, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_PARENT_RGHTS_SEV, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_PRNT_RGHTS_SEV_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_LEGAL_STATUS, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INSURANCE_CODE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INITIAL_CUSTODY_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_HOME_PHONE, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_DATE_OF_BIRTH, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CURR_PLACEMNT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CURRENT_PLACEMENT, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_G_CAUSE_CODE, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_G_CAUSE_CL_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_COOP_CODE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_COUNTY_CRT_COMMIT, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MONTHS_ASST_AF, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MONTHS_ASST_GA, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MO_DEATH_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MO_PRT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_FA_DEATH_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_FA_PRT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MPI_ID, FieldType.String, 38);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MED_COVERAGE_IND, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INSURANCE_CARRIER, FieldType.String, 30);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INSURANCE_POLCY_NO, FieldType.String, 30);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SPOKEN_LANGUAGE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_WRITTEN_LANGUAGE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_STATE_OF_BIRTH, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SCHOOL_DISTRICT, FieldType.String, 3);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_ETHNIC_CLASS, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SUFFIX_NAME, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_EMPLOYER_NAME, FieldType.String, 28);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_EARNED_INCOME_AMT, FieldType.PackedDecimal, 8, null, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INCOME_FREQUENCY, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_KEES_ABMS_ID, FieldType.String, 38);
               DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLIENTB_EMAIL_ADDRESS, (CLIENTB_EMAIL_ADDRESS) =>
               {
                   CLIENTB_EMAIL_ADDRESS.CreateNewField(Names.CLIENTB_EMAIL_ADDRESS_LEN, FieldType.CompShort, 4);
                   CLIENTB_EMAIL_ADDRESS.CreateNewField(Names.CLIENTB_EMAIL_ADDRESS_TEXT, FieldType.String, 100);
               });
               DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLIENTB_OCCUPATION, (CLIENTB_OCCUPATION) =>
               {
                   CLIENTB_OCCUPATION.CreateNewField(Names.CLIENTB_OCCUPATION_LEN, FieldType.CompShort, 4);
                   CLIENTB_OCCUPATION.CreateNewField(Names.CLIENTB_OCCUPATION_TEXT, FieldType.String, 100);
               });
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CREATED_BY, FieldType.String, 8);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SENSITIVE_FLAG, FieldType.String, 1, SPACES);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CIS_PREFERRED_ID, FieldType.String, 10, SPACES);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_NAME_TYPE, FieldType.String, 1, SPACES);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CASE_BASIC, (DCLKSD_CASE_BASIC) =>
           {
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CASE_NUMBER, FieldType.String, 8);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_TELEPHONE, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CASE_STATUS, FieldType.String, 2);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CASE_STATUS_DATE, FieldType.String, 10);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CASE_SURNAME, FieldType.String, 17);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CASE_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CASE_INITIAL, FieldType.String, 1);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CASEWORKR_GIVN_NME, FieldType.String, 12);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CASEWORKR_SURNAME, FieldType.String, 17);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CASEWORKR_MI, FieldType.String, 1);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_AR_SURNAME, FieldType.String, 17);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_AR_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_AR_INITIAL, FieldType.String, 1);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_FILE_LOCATION, FieldType.String, 3);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_PAYEE_SURNAME, FieldType.String, 17);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_PAYEE_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_PAYEE_INITIAL, FieldType.String, 1);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_TELEPHONE_2_NUMBER, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_CREATED_BY, FieldType.String, 8);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CASEB_LAST_MODIFIED_TMST, FieldType.String, 26);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CASE_COMP, (DCLKSD_CASE_COMP) =>
           {
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_BENEFIT_MONTH, FieldType.CompInt, 9);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_PARTICIPATION_CODE, FieldType.String, 2);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_MEDICAL_SUBTYPE, FieldType.String, 2);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_POSITION_ON_APP, FieldType.CompShort, 4);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_CASE_OPEN_DT, FieldType.String, 10);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_CASE_CLOSE_DT, FieldType.String, 10);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_CREATED_BY, FieldType.String, 8);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_FK_CLB_CLIENT_NO, FieldType.String, 10);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_FK_CSB_CASE_NO, FieldType.String, 8);
               DCLKSD_CASE_COMP.CreateNewField(Names.CASEC_FK_PGB_PROG_TYPE, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_PARTICIPATION, (DCLKSD_PARTICIPATION) =>
           {
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_KESSEP_TIME_STMP, FieldType.String, 20);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_PART_END_DATE, FieldType.String, 10);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_PART_START_DATE, FieldType.String, 10);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_PART_CODE, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_PROGRAM_END_DATE, FieldType.String, 10);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_PROGRAM_SUBTYPE, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_RELATIONSHIP, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_CREATED_BY, FieldType.String, 8);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_FK_CSB_CASE_NO, FieldType.String, 8);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_FK_PGB_PROG_TYPE, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_SYSTEM_PART, (DCLKSD_SYSTEM_PART) =>
           {
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_SYSTEM_CODE, FieldType.String, 2);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_PARTICIPATION_FLAG, FieldType.String, 1);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_CREATED_BY, FieldType.String, 8);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_FK_CLB_CLIENT_NO, FieldType.String, 10);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_FK_CLI_CLIENT_NAME, FieldType.String, 30);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_FK_CLI_SSN, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_NEXT_CLIENT_ID, (DCLKSD_NEXT_CLIENT_ID) =>
           {
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_IDENT, FieldType.String, 10);
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_NEXT_CLIENT_ID, FieldType.String, 10);
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_CREATED_BY, FieldType.String, 8);
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_LAST_MODIFIED_TMST, FieldType.String, 26);
           });

            recordDef.CreateNewGroup(Names.WS_DB2_CONSTANT_AREAS, (WS_DB2_CONSTANT_AREAS) =>
           {
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_AE, FieldType.String, 2, "AE");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_CS, FieldType.String, 2, "CS");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_KA, FieldType.String, 2, "KA");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_KS, FieldType.String, 2, "KS");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_FA, FieldType.String, 2, "FA");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_KM, FieldType.String, 2, "KM");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_YES_Y, FieldType.String, 1, "Y");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_IDENT_0000000001, FieldType.String, 10, "0000000001");
           });

            recordDef.CreateNewGroup(Names.WS_DB2_WORK_AREAS, (WS_DB2_WORK_AREAS) =>
           {
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_CASE_NUMBER_NUM, FieldType.String, 9);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_OLD_CLB_SSN, FieldType.CompInt, 9, +0);
               WS_DB2_WORK_AREAS.CreateNewField(Names.PART_WS_END_DATE, FieldType.UnsignedNumeric, 8, 0);
               WS_DB2_WORK_AREAS.CreateNewField(Names.PART_WS_START_DATE, FieldType.UnsignedNumeric, 8, 0);
               WS_DB2_WORK_AREAS.CreateNewField(Names.CLIENT_WS_DATE_OF_BIRTH, FieldType.String, 8, SPACES);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_CLIENT_DATE_OF_BIRTH, FieldType.String, 10, SPACES);
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_DB2_SWITCHES, (WS_DB2_SWITCHES) =>
               {
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_CASE_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_CASE_EOF_NO, "N")
                       .NewCheckField(Names.WS_CASE_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_CASEC_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_CASEC_EOF_NO, "N")
                       .NewCheckField(Names.WS_CASEC_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_CLIENT_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_CLIENT_EOF_NO, "N")
                       .NewCheckField(Names.WS_CLIENT_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_CLIENTB_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_CLIENTB_EOF_NO, "N")
                       .NewCheckField(Names.WS_CLIENTB_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_PART_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_PART_EOF_NO, "N")
                       .NewCheckField(Names.WS_PART_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_SYSPART_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_SYSPART_EOF_NO, "N")
                       .NewCheckField(Names.WS_SYSPART_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_CASEC_1ST_SW, FieldType.String, 1, "Y")
                       .NewCheckField(Names.WS_CASEC_1ST_NO, "N")
                       .NewCheckField(Names.WS_CASEC_1ST_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_CLIENT_1ST_SW, FieldType.String, 1, "Y")
                       .NewCheckField(Names.WS_CLIENT_1ST_NO, "N")
                       .NewCheckField(Names.WS_CLIENT_1ST_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_PART_1ST_SW, FieldType.String, 1, "Y")
                       .NewCheckField(Names.WS_PART_1ST_NO, "N")
                       .NewCheckField(Names.WS_PART_1ST_YES, "Y")
                       ;
               });
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_CLIENT_POINTER, (WS_CLIENT_POINTER) =>
               {
                   WS_CLIENT_POINTER.CreateNewField(Names.WS_CLIPTR_CLIENT_ID, FieldType.String, 10, SPACES);
                   WS_CLIENT_POINTER.CreateNewField(Names.WS_CLIPTR_VERIFIED_SSN_FLAG, FieldType.String, 1, SPACES);
                   WS_CLIENT_POINTER.CreateNewGroup(Names.WS_CLIPTR_SYSTEM_PARTICIPATION, (WS_CLIPTR_SYSTEM_PARTICIPATION) =>
                   {
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_AE, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_CS, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_KA, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_KS, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_FA, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_KM, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_FILL, FieldType.String, 14, FillWith.LowValues);
                   });
               });
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_UPD_UNIQUE_KEY, (WS_UPD_UNIQUE_KEY) =>
               {
                   WS_UPD_UNIQUE_KEY.CreateNewField(Names.WS_UUK_CLIENT_NUMBER, FieldType.String, 10, SPACES);
                   WS_UPD_UNIQUE_KEY.CreateNewGroup(Names.WS_UUK_CLIENT_NAME, (WS_UUK_CLIENT_NAME) =>
                   {
                       WS_UUK_CLIENT_NAME.CreateNewField(Names.WS_UUK_CLI_LAST_NAME, FieldType.String, 17, SPACES);
                       WS_UUK_CLIENT_NAME.CreateNewField(Names.WS_UUK_CLI_FIRST_NAME, FieldType.String, 12, SPACES);
                       WS_UUK_CLIENT_NAME.CreateNewField(Names.WS_UUK_CLI_INITIAL, FieldType.String, 1, SPACES);
                   });
                   WS_UPD_UNIQUE_KEY.CreateNewField(Names.WS_UUK_SSN, FieldType.String, 9, ZEROES);
                   WS_UPD_UNIQUE_KEY.CreateNewField(Names.WS_UUK_DOB, FieldType.String, 8, ZEROES);
                   WS_UPD_UNIQUE_KEY.CreateNewField(Names.WS_UUK_SEX, FieldType.String, 1, SPACES);
                   WS_UPD_UNIQUE_KEY.CreateNewField(Names.WS_UUK_VERIFY_FLAG, FieldType.String, 1, SPACES);
                   WS_UPD_UNIQUE_KEY.CreateNewGroup(Names.WS_UUK_CLIPTR_SYSTEM_PART, (WS_UUK_CLIPTR_SYSTEM_PART) =>
                   {
                       WS_UUK_CLIPTR_SYSTEM_PART.CreateNewField(Names.WS_UUK_AE_FLAG, FieldType.String, 1, SPACES);
                       WS_UUK_CLIPTR_SYSTEM_PART.CreateNewField(Names.WS_UUK_CS_FLAG, FieldType.String, 1, SPACES);
                       WS_UUK_CLIPTR_SYSTEM_PART.CreateNewField(Names.WS_UUK_KC_FLAG, FieldType.String, 1, SPACES);
                       WS_UUK_CLIPTR_SYSTEM_PART.CreateNewField(Names.WS_UUK_KP_FLAG, FieldType.String, 1, SPACES);
                       WS_UUK_CLIPTR_SYSTEM_PART.CreateNewField(Names.WS_UUK_FA_FLAG, FieldType.String, 1, SPACES);
                       WS_UUK_CLIPTR_SYSTEM_PART.CreateNewField(Names.WS_UUK_PART_FILL, FieldType.String, 15, FillWith.LowValues);
                   });
                   WS_UPD_UNIQUE_KEY.CreateNewField(Names.WS_UUK_FILL, FieldType.String, 21, SPACES);
               });
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_SYS_PART_CNT, FieldType.UnsignedNumeric, 2, ZEROES);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_INS_PART_CNT, FieldType.UnsignedNumeric, 2, ZEROES);
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_DB2_SYSTEM_PART_TABLE, (WS_DB2_SYSTEM_PART_TABLE) =>
               {
                   WS_DB2_SYSTEM_PART_TABLE.CreateNewGroupArray(Names.WS_DB2_SYSTEM_PART, 10, (WS_DB2_SYSTEM_PART) =>
                   {
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_SYSTEM_CODE, FieldType.String, 2);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_PARTICIPATION_FLAG, FieldType.String, 1);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_CREATED_TIMESTAMP, FieldType.String, 26);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_CREATED_BY, FieldType.String, 8);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_LAST_MODIFIED_BY, FieldType.String, 8);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_LAST_MODIFIED_TMST, FieldType.String, 26);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_FK_CLB_CLIENT_NO, FieldType.String, 10);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_FK_CLI_CLIENT_NAME, FieldType.String, 30);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_FK_CLI_SSN, FieldType.CompInt, 9);
                   });
               });
           });
            recordDef.CreateNewField(Names.WS_DUP_CLT_CNT, FieldType.CompInt, 9, +0);
            recordDef.CreateNewField(Names.WS_CHK_CLT_NO, FieldType.String, 10);
            recordDef.CreateNewField(Names.WS_CHK_CLT_SSN, FieldType.CompInt, 9);

            recordDef.CreateNewGroup(Names.CONTROL_BLOCK, (CONTROL_BLOCK) =>
           {
               CONTROL_BLOCK.CreateNewFillerField(FieldType.String, 2, "AP");
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_CODE, FieldType.String, 2, "RC");
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_ID, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.FILE_NUMBER, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.RESPONSE_CODE, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_LOWER_LIMIT, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_QUANTITY, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.FORMAT_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.RECORD_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.SEARCH_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.VALUE_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_OPTION_1, FieldType.String, 1, SPACE);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_OPTION_2, FieldType.String, 1, SPACE);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_1, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_2, FieldType.String, 4, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_3, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_4, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewFillerField(FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_TIME, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.USER_AREA, FieldType.String, 4, SPACES);
           });
            recordDef.CreateNewField(Names.PH_FNTIC_C1, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_C2, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_C3, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_CX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_SUSS_ID, FieldType.String, 1);
            recordDef.CreateNewField(Names.PH_HIT, FieldType.String, 2);
            recordDef.CreateNewField(Names.PH_ERR_NAME, FieldType.String, 1);
            recordDef.CreateNewField(Names.PH_COUNT_UP, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_COUNT_INQUIRY, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_COUNT_DB, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_L1, FieldType.UnsignedNumeric, 1);
            recordDef.CreateNewField(Names.PH_CR1_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CR2_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CF1_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CF2_INDXX, FieldType.UnsignedNumeric, 2);

            IField PH_DEGREE_local = recordDef.CreateNewField(Names.PH_DEGREE, FieldType.UnsignedNumeric, 3, null, 2);
            recordDef.CreateNewFieldRedefine(Names.PH_PERCENT, FieldType.String, PH_DEGREE_local, 3);
            recordDef.CreateNewField(Names.PH_NAME_RAW_INQ, FieldType.String, 17);
            recordDef.CreateNewField(Names.PH_NAME_RAW_MSTR, FieldType.String, 17);

            recordDef.CreateNewGroup(Names.PH_NAME_CRUNCH_INQ, (PH_NAME_CRUNCH_INQ) =>
           {
               PH_NAME_CRUNCH_INQ.CreateNewFieldArray(Names.PH_L_CRNCH, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_REDUC_INQ, (PH_NAME_REDUC_INQ) =>
           {
               PH_NAME_REDUC_INQ.CreateNewFieldArray(Names.PH_L_REDUC, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_SAVE_REDUC_INQ, (PH_SAVE_REDUC_INQ) =>
           {
               PH_SAVE_REDUC_INQ.CreateNewFieldArray(Names.PH_S_REDUC, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_PARTS, (PH_NAME_PARTS) =>
           {
               PH_NAME_PARTS.CreateNewGroup(Names.PH_THREE_LETTERS, (PH_THREE_LETTERS) =>
               {
                   PH_THREE_LETTERS.CreateNewFieldArray(Names.PH_LETTERS_3, 3, FieldType.String, 1);
               });
               PH_NAME_PARTS.CreateNewField(Names.PH_TWO_LETTERS, FieldType.String, 2);
               PH_NAME_PARTS.CreateNewField(Names.PH_ONE_LETTER, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_34_NUMERIC, (PH_NAME_34_NUMERIC) =>
           {
               PH_NAME_34_NUMERIC.CreateNewFieldArray(Names.PH_NAME_NUM_34, 17, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_17_NUMERIC, (PH_NAME_17_NUMERIC) =>
           {
               PH_NAME_17_NUMERIC.CreateNewFieldArray(Names.PH_NAME_NUM_17, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_REFMT_34_17, (PH_REFMT_34_17) =>
           {
               PH_REFMT_34_17.CreateNewField(Names.PH_DIGIT_1, FieldType.String, 1);
               PH_REFMT_34_17.CreateNewField(Names.PH_DIGIT_2, FieldType.String, 1);
           });

            IGroup PH_FIRST_2_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_FIRST_2_TABLE, (PH_FIRST_2_TABLE) =>
           {
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 24, "DG07GF08GM03GN02KN02PH08");
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 24, "PF08PN02PS00SH06TS00TZ00");
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 20, "WR04CE00CH06CI00CY00");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_FIRST_2_TBL, PH_FIRST_2_TABLE_local, (PH_FIRST_2_TBL) =>
            {
                PH_FIRST_2_TBL.CreateNewGroupArray(Names.PH_FR2_NUM, 17, (PH_FR2_NUM) =>
                {
                    PH_FR2_NUM.CreateNewField(Names.PH_ALPH2, FieldType.String, 2);
                    PH_FR2_NUM.CreateNewField(Names.PH_NUM2, FieldType.String, 2);
                });
            });

            IGroup PH_FIRST_1_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_FIRST_1_TABLE, (PH_FIRST_1_TABLE) =>
           {
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "A 1B09C07D01E 1F08G07H 2");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "I 1J 3K07L05M03N02O 1P09");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "Q07R04S00T01U 1V08W 4X07");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 6, "Y 5Z00");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_FIRST_1_TBL, PH_FIRST_1_TABLE_local, (PH_FIRST_1_TBL) =>
            {
                PH_FIRST_1_TBL.CreateNewGroupArray(Names.PH_FR1_NUM, 26, (PH_FR1_NUM) =>
                {
                    PH_FR1_NUM.CreateNewField(Names.PH_ALPH1, FieldType.String, 1);
                    PH_FR1_NUM.CreateNewField(Names.PH_NUM1, FieldType.String, 2);
                });
            });

            IGroup PH_REMAIN_2_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_REMAIN_2_TABLE, (PH_REMAIN_2_TABLE) =>
           {
               PH_REMAIN_2_TABLE.CreateNewFillerField(FieldType.String, 24, "CE 0CI 0CH 6CY 0DG 7PH 8");
               PH_REMAIN_2_TABLE.CreateNewFillerField(FieldType.String, 16, "SH 6TS 0TZ 0    ");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_REMAIN_2_TBL, PH_REMAIN_2_TABLE_local, (PH_REMAIN_2_TBL) =>
            {
                PH_REMAIN_2_TBL.CreateNewGroupArray(Names.PH_RR2_NUM, 10, (PH_RR2_NUM) =>
                {
                    PH_RR2_NUM.CreateNewField(Names.PH_ALPHR2, FieldType.String, 2);
                    PH_RR2_NUM.CreateNewField(Names.PH_NUMR2, FieldType.String, 2);
                });
            });

            IGroup PH_REMAIN_1_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_REMAIN_1_TABLE, (PH_REMAIN_1_TABLE) =>
           {
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 24, "B 9C 7D 1F 8G 7J 6K 7L 5");
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 24, "M 3N 2P 9Q 7R 4S 0T 1V 8");
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 6, "X 7Z 0");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_REMAIN_1_TBL, PH_REMAIN_1_TABLE_local, (PH_REMAIN_1_TBL) =>
            {
                PH_REMAIN_1_TBL.CreateNewGroupArray(Names.PH_RR1_NUM, 18, (PH_RR1_NUM) =>
                {
                    PH_RR1_NUM.CreateNewField(Names.PH_ALPHR1, FieldType.String, 1);
                    PH_RR1_NUM.CreateNewField(Names.PH_NUMR1, FieldType.String, 2);
                });
            });
            recordDef.CreateNewField(Names.PH_CF2_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CF1_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CR2_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CR1_INDEX, FieldType.CompShort, 4);


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXIU10_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXIU10_ls_LinkageSection";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_0329176207_IA = "A_0329176207_IA";
            internal const string IMPORT_CURRENT_0001EV = "IMPORT_CURRENT_0001EV";
            internal const string DATE_WORK_AREA_0001ET = "DATE_WORK_AREA_0001ET";
            internal const string DATE_0001AS = "DATE_0001AS";
            internal const string DATE_0001 = "DATE_0001";
            internal const string DATE_0001XX = "DATE_0001XX";
            internal const string IMPORT_0002EV = "IMPORT_0002EV";
            internal const string CSE_PERSONS_WORK_SET_0002ET = "CSE_PERSONS_WORK_SET_0002ET";
            internal const string LAST_NAME_0002AS = "LAST_NAME_0002AS";
            internal const string LAST_NAME_0002 = "LAST_NAME_0002";
            internal const string LAST_NAME_0002XX = "LAST_NAME_0002XX";
            internal const string FIRST_NAME_0002AS = "FIRST_NAME_0002AS";
            internal const string FIRST_NAME_0002 = "FIRST_NAME_0002";
            internal const string FIRST_NAME_0002XX = "FIRST_NAME_0002XX";
            internal const string MIDDLE_INITIAL_0002AS = "MIDDLE_INITIAL_0002AS";
            internal const string MIDDLE_INITIAL_0002 = "MIDDLE_INITIAL_0002";
            internal const string MIDDLE_INITIAL_0002XX = "MIDDLE_INITIAL_0002XX";
            internal const string SSN_0002AS = "SSN_0002AS";
            internal const string SSN_0002 = "SSN_0002";
            internal const string SSN_0002XX = "SSN_0002XX";
            internal const string DOB_0002AS = "DOB_0002AS";
            internal const string DOB_0002 = "DOB_0002";
            internal const string DOB_0002XX = "DOB_0002XX";
            internal const string SEX_0002AS = "SEX_0002AS";
            internal const string SEX_0002 = "SEX_0002";
            internal const string SEX_0002XX = "SEX_0002XX";
            internal const string NUMBER_0002AS = "NUMBER_0002AS";
            internal const string NUMBER_0002 = "NUMBER_0002";
            internal const string NUMBER_0002XX = "NUMBER_0002XX";
            internal const string W_OA = "W_OA";
            internal const string A_0329176209_OA = "A_0329176209_OA";
            internal const string EXPORT_0003EV = "EXPORT_0003EV";
            internal const string ABEND_DATA_0003ET = "ABEND_DATA_0003ET";
            internal const string TYPE_0003AS = "TYPE_0003AS";
            internal const string TYPE_0003 = "TYPE_0003";
            internal const string TYPE_0003XX = "TYPE_0003XX";
            internal const string ADABAS_FILE_NUMBER_0003AS = "ADABAS_FILE_NUMBER_0003AS";
            internal const string ADABAS_FILE_NUMBER_0003 = "ADABAS_FILE_NUMBER_0003";
            internal const string ADABAS_FILE_NUMBER_0003XX = "ADABAS_FILE_NUMBER_0003XX";
            internal const string ADABAS_FILE_ACTION_0003AS = "ADABAS_FILE_ACTION_0003AS";
            internal const string ADABAS_FILE_ACTION_0003 = "ADABAS_FILE_ACTION_0003";
            internal const string ADABAS_FILE_ACTION_0003XX = "ADABAS_FILE_ACTION_0003XX";
            internal const string ADABAS_RESPONSE_CD_0003AS = "ADABAS_RESPONSE_CD_0003AS";
            internal const string ADABAS_RESPONSE_CD_0003 = "ADABAS_RESPONSE_CD_0003";
            internal const string ADABAS_RESPONSE_CD_0003XX = "ADABAS_RESPONSE_CD_0003XX";
            internal const string CICS_RESOURCE_NM_0003AS = "CICS_RESOURCE_NM_0003AS";
            internal const string CICS_RESOURCE_NM_0003 = "CICS_RESOURCE_NM_0003";
            internal const string CICS_RESOURCE_NM_0003XX = "CICS_RESOURCE_NM_0003XX";
            internal const string CICS_FUNCTION_CD_0003AS = "CICS_FUNCTION_CD_0003AS";
            internal const string CICS_FUNCTION_CD_0003 = "CICS_FUNCTION_CD_0003";
            internal const string CICS_FUNCTION_CD_0003XX = "CICS_FUNCTION_CD_0003XX";
            internal const string CICS_RESPONSE_CD_0003AS = "CICS_RESPONSE_CD_0003AS";
            internal const string CICS_RESPONSE_CD_0003 = "CICS_RESPONSE_CD_0003";
            internal const string CICS_RESPONSE_CD_0003XX = "CICS_RESPONSE_CD_0003XX";
            internal const string TWA = "TWA";
            internal const string TWA_ADABAS_PARMS = "TWA_ADABAS_PARMS";
            internal const string TWA_CICS_PARMS = "TWA_CICS_PARMS";
            internal const string TWA_PROGRAM_ID = "TWA_PROGRAM_ID";
            internal const string TWA_ADDR_LIST = "TWA_ADDR_LIST";
        }
        #endregion

        #region Direct-access element properties
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_0329176207_IA { get { return GetElementByName<IGroup>(Names.A_0329176207_IA); } }
        public IGroup IMPORT_CURRENT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_CURRENT_0001EV); } }
        public IGroup DATE_WORK_AREA_0001ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0001ET); } }
        public IField DATE_0001AS { get { return GetElementByName<IField>(Names.DATE_0001AS); } }
        public IField DATE_0001 { get { return GetElementByName<IField>(Names.DATE_0001); } }
        public IField DATE_0001XX { get { return GetElementByName<IField>(Names.DATE_0001XX); } }
        public IGroup IMPORT_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_0002EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0002ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0002ET); } }
        public IField LAST_NAME_0002AS { get { return GetElementByName<IField>(Names.LAST_NAME_0002AS); } }
        public IField LAST_NAME_0002 { get { return GetElementByName<IField>(Names.LAST_NAME_0002); } }
        public IField LAST_NAME_0002XX { get { return GetElementByName<IField>(Names.LAST_NAME_0002XX); } }
        public IField FIRST_NAME_0002AS { get { return GetElementByName<IField>(Names.FIRST_NAME_0002AS); } }
        public IField FIRST_NAME_0002 { get { return GetElementByName<IField>(Names.FIRST_NAME_0002); } }
        public IField FIRST_NAME_0002XX { get { return GetElementByName<IField>(Names.FIRST_NAME_0002XX); } }
        public IField MIDDLE_INITIAL_0002AS { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002AS); } }
        public IField MIDDLE_INITIAL_0002 { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002); } }
        public IField MIDDLE_INITIAL_0002XX { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002XX); } }
        public IField SSN_0002AS { get { return GetElementByName<IField>(Names.SSN_0002AS); } }
        public IField SSN_0002 { get { return GetElementByName<IField>(Names.SSN_0002); } }
        public IField SSN_0002XX { get { return GetElementByName<IField>(Names.SSN_0002XX); } }
        public IField DOB_0002AS { get { return GetElementByName<IField>(Names.DOB_0002AS); } }
        public IField DOB_0002 { get { return GetElementByName<IField>(Names.DOB_0002); } }
        public IField DOB_0002XX { get { return GetElementByName<IField>(Names.DOB_0002XX); } }
        public IField SEX_0002AS { get { return GetElementByName<IField>(Names.SEX_0002AS); } }
        public IField SEX_0002 { get { return GetElementByName<IField>(Names.SEX_0002); } }
        public IField SEX_0002XX { get { return GetElementByName<IField>(Names.SEX_0002XX); } }
        public IField NUMBER_0002AS { get { return GetElementByName<IField>(Names.NUMBER_0002AS); } }
        public IField NUMBER_0002 { get { return GetElementByName<IField>(Names.NUMBER_0002); } }
        public IField NUMBER_0002XX { get { return GetElementByName<IField>(Names.NUMBER_0002XX); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_0329176209_OA { get { return GetElementByName<IGroup>(Names.A_0329176209_OA); } }
        public IGroup EXPORT_0003EV { get { return GetElementByName<IGroup>(Names.EXPORT_0003EV); } }
        public IGroup ABEND_DATA_0003ET { get { return GetElementByName<IGroup>(Names.ABEND_DATA_0003ET); } }
        public IField TYPE_0003AS { get { return GetElementByName<IField>(Names.TYPE_0003AS); } }
        public IField TYPE_0003 { get { return GetElementByName<IField>(Names.TYPE_0003); } }
        public IField TYPE_0003XX { get { return GetElementByName<IField>(Names.TYPE_0003XX); } }
        public IField ADABAS_FILE_NUMBER_0003AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0003AS); } }
        public IField ADABAS_FILE_NUMBER_0003 { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0003); } }
        public IField ADABAS_FILE_NUMBER_0003XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0003XX); } }
        public IField ADABAS_FILE_ACTION_0003AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0003AS); } }
        public IField ADABAS_FILE_ACTION_0003 { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0003); } }
        public IField ADABAS_FILE_ACTION_0003XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0003XX); } }
        public IField ADABAS_RESPONSE_CD_0003AS { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0003AS); } }
        public IField ADABAS_RESPONSE_CD_0003 { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0003); } }
        public IField ADABAS_RESPONSE_CD_0003XX { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0003XX); } }
        public IField CICS_RESOURCE_NM_0003AS { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0003AS); } }
        public IField CICS_RESOURCE_NM_0003 { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0003); } }
        public IField CICS_RESOURCE_NM_0003XX { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0003XX); } }
        public IField CICS_FUNCTION_CD_0003AS { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0003AS); } }
        public IField CICS_FUNCTION_CD_0003 { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0003); } }
        public IField CICS_FUNCTION_CD_0003XX { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0003XX); } }
        public IField CICS_RESPONSE_CD_0003AS { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0003AS); } }
        public IField CICS_RESPONSE_CD_0003 { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0003); } }
        public IField CICS_RESPONSE_CD_0003XX { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0003XX); } }
        public IGroup TWA { get { return GetElementByName<IGroup>(Names.TWA); } }
        public IGroup TWA_ADABAS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_ADABAS_PARMS); } }
        public IGroup TWA_CICS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_CICS_PARMS); } }
        public IField TWA_PROGRAM_ID { get { return GetElementByName<IField>(Names.TWA_PROGRAM_ID); } }
        public IGroup TWA_ADDR_LIST { get { return GetElementByName<IGroup>(Names.TWA_ADDR_LIST); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_0329176207_IA, (A_0329176207_IA) =>
               {
                   A_0329176207_IA.CreateNewGroup(Names.IMPORT_CURRENT_0001EV, (IMPORT_CURRENT_0001EV) =>
                   {
                       IMPORT_CURRENT_0001EV.CreateNewGroup(Names.DATE_WORK_AREA_0001ET, (DATE_WORK_AREA_0001ET) =>
                       {
                           DATE_WORK_AREA_0001ET.CreateNewField(Names.DATE_0001AS, FieldType.String, 1);

                           IField DATE_0001_local = DATE_WORK_AREA_0001ET.CreateNewField(Names.DATE_0001, FieldType.SignedNumeric, 8);
                           DATE_WORK_AREA_0001ET.CreateNewFieldRedefine(Names.DATE_0001XX, FieldType.String, DATE_0001_local, 8);
                       });
                   });
                   A_0329176207_IA.CreateNewGroup(Names.IMPORT_0002EV, (IMPORT_0002EV) =>
                   {
                       IMPORT_0002EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0002ET, (CSE_PERSONS_WORK_SET_0002ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.LAST_NAME_0002AS, FieldType.String, 1);

                           IField LAST_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.LAST_NAME_0002, FieldType.String, 17);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.LAST_NAME_0002XX, FieldType.String, LAST_NAME_0002_local, 17);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FIRST_NAME_0002AS, FieldType.String, 1);

                           IField FIRST_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FIRST_NAME_0002, FieldType.String, 12);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.FIRST_NAME_0002XX, FieldType.String, FIRST_NAME_0002_local, 12);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.MIDDLE_INITIAL_0002AS, FieldType.String, 1);

                           IField MIDDLE_INITIAL_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.MIDDLE_INITIAL_0002, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0002XX, FieldType.String, MIDDLE_INITIAL_0002_local, 1);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SSN_0002AS, FieldType.String, 1);

                           IField SSN_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SSN_0002, FieldType.String, 9);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.SSN_0002XX, FieldType.String, SSN_0002_local, 9);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.DOB_0002AS, FieldType.String, 1);

                           IField DOB_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.DOB_0002, FieldType.SignedNumeric, 8);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.DOB_0002XX, FieldType.String, DOB_0002_local, 8);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SEX_0002AS, FieldType.String, 1);

                           IField SEX_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SEX_0002, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.SEX_0002XX, FieldType.String, SEX_0002_local, 1);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.NUMBER_0002AS, FieldType.String, 1);

                           IField NUMBER_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.NUMBER_0002, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.NUMBER_0002XX, FieldType.String, NUMBER_0002_local, 10);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_0329176209_OA, (A_0329176209_OA) =>
               {
                   A_0329176209_OA.CreateNewGroup(Names.EXPORT_0003EV, (EXPORT_0003EV) =>
                   {
                       EXPORT_0003EV.CreateNewGroup(Names.ABEND_DATA_0003ET, (ABEND_DATA_0003ET) =>
                       {
                           ABEND_DATA_0003ET.CreateNewField(Names.TYPE_0003AS, FieldType.String, 1);

                           IField TYPE_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.TYPE_0003, FieldType.String, 1);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.TYPE_0003XX, FieldType.String, TYPE_0003_local, 1);
                           ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0003AS, FieldType.String, 1);

                           IField ADABAS_FILE_NUMBER_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0003, FieldType.String, 4);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.ADABAS_FILE_NUMBER_0003XX, FieldType.String, ADABAS_FILE_NUMBER_0003_local, 4);
                           ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_ACTION_0003AS, FieldType.String, 1);

                           IField ADABAS_FILE_ACTION_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_ACTION_0003, FieldType.String, 3);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.ADABAS_FILE_ACTION_0003XX, FieldType.String, ADABAS_FILE_ACTION_0003_local, 3);
                           ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0003AS, FieldType.String, 1);

                           IField ADABAS_RESPONSE_CD_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0003, FieldType.String, 4);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.ADABAS_RESPONSE_CD_0003XX, FieldType.String, ADABAS_RESPONSE_CD_0003_local, 4);
                           ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESOURCE_NM_0003AS, FieldType.String, 1);

                           IField CICS_RESOURCE_NM_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESOURCE_NM_0003, FieldType.String, 8);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.CICS_RESOURCE_NM_0003XX, FieldType.String, CICS_RESOURCE_NM_0003_local, 8);
                           ABEND_DATA_0003ET.CreateNewField(Names.CICS_FUNCTION_CD_0003AS, FieldType.String, 1);

                           IField CICS_FUNCTION_CD_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.CICS_FUNCTION_CD_0003, FieldType.String, 2);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.CICS_FUNCTION_CD_0003XX, FieldType.String, CICS_FUNCTION_CD_0003_local, 2);
                           ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESPONSE_CD_0003AS, FieldType.String, 1);

                           IField CICS_RESPONSE_CD_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESPONSE_CD_0003, FieldType.String, 6);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.CICS_RESPONSE_CD_0003XX, FieldType.String, CICS_RESPONSE_CD_0003_local, 6);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.TWA, (TWA) =>
           {
               IGroup TWA_ADABAS_PARMS_local = (IGroup)TWA.CreateNewGroup(Names.TWA_ADABAS_PARMS, (TWA_ADABAS_PARMS) =>
               {
                   TWA_ADABAS_PARMS.CreateNewFieldArray("FILLER_d28", 7, FieldType.CompInt, 4);
               });
               TWA.CreateNewGroupRedefine(Names.TWA_CICS_PARMS, TWA_ADABAS_PARMS_local, (TWA_CICS_PARMS) =>
               {
                   TWA_CICS_PARMS.CreateNewField(Names.TWA_PROGRAM_ID, FieldType.String, 8);
                   TWA_CICS_PARMS.CreateNewGroup(Names.TWA_ADDR_LIST, (TWA_ADDR_LIST) =>
                   {
                       TWA_ADDR_LIST.CreateNewFieldArray("FILLER_d29", 5, FieldType.CompInt, 4);
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(W_IA, args, 0);
            SetPassedParm(W_OA, args, 1);
            SetPassedParm(PSMGR_EAB_DATA, args, 2);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(W_IA, args, 0);
            SetReturnParm(W_OA, args, 1);
            SetReturnParm(PSMGR_EAB_DATA, args, 2);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXIU10 : OnlineEABBase
    {

        #region Public Constructors
        public SWEXIU10()
            : base()
        {
            SetUpProgram();
        }

        public SWEXIU10(OnlineControl controlData) : base(controlData)
        {
            SetUpProgram();
        }

        private void SetUpProgram()
        {
            this.ProgramName = "SWEXIU10";

            WS = new SWEXIU10_ws();
            LS = new SWEXIU10_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryText("CLIENTCSR", "SELECT SSN, PREVIOUS_SSN, PHONETIC_DATA, DT_OF_LAST_UPDATE, DATE_OF_BIRTH, GENDER, VERIFIED_SSN_FLAG, CLIENT_NAME, CREATED_BY, CREATED_TIMESTAMP, LAST_MODIFIED_BY, LAST_MODIFIED_TMST, FK_CLB_CLIENT_NO, NAME_TYPE FROM KSD_CLIENT WHERE SSN = {0}  ORDER BY SSN, CLIENT_NAME, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE CLIENTCSR CURSOR FOR SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE FROM KSD_CLIENT WHERE SSN = :CLIENT-SSN ORDER BY SSN , CLIENT_NAME , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG END-EXEC
                                WS.CLIENT_SSN);

            DbConv.SetQueryText("CSRCLIENT", "SELECT SSN, PREVIOUS_SSN, PHONETIC_DATA, DT_OF_LAST_UPDATE, DATE_OF_BIRTH, GENDER, VERIFIED_SSN_FLAG, CLIENT_NAME, CREATED_BY, CREATED_TIMESTAMP, LAST_MODIFIED_BY, LAST_MODIFIED_TMST, FK_CLB_CLIENT_NO, NAME_TYPE FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = {0}  AND SSN = {1}  AND DATE_OF_BIRTH = {2}  AND GENDER = {3}  AND CLIENT_NAME = {4}  ORDER BY FK_CLB_CLIENT_NO, CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE CSRCLIENT CURSOR FOR SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO AND SSN = :CLIENT-SSN AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH AND GENDER = :CLIENT-GENDER AND CLIENT_NAME = :CLIENT-CLIENT-NAME ORDER BY FK_CLB_CLIENT_NO , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG END-EXEC
                                WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_CLIENT_NAME);

            DbConv.SetQueryText("CLICSR", "SELECT SSN, PREVIOUS_SSN, PHONETIC_DATA, DT_OF_LAST_UPDATE, DATE_OF_BIRTH, GENDER, VERIFIED_SSN_FLAG, CLIENT_NAME, CREATED_BY, CREATED_TIMESTAMP, LAST_MODIFIED_BY, LAST_MODIFIED_TMST, FK_CLB_CLIENT_NO, NAME_TYPE FROM KSD_CLIENT WHERE SSN = {0}  AND DATE_OF_BIRTH = {1}  AND CLIENT_NAME = {2}  ORDER BY CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE CLICSR CURSOR FOR SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE FROM KSD_CLIENT WHERE SSN = :CLIENT-SSN AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH AND CLIENT_NAME = :CLIENT-CLIENT-NAME ORDER BY CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG END-EXEC
                                WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_CLIENT_NAME);

            DbConv.SetQueryText("CASCMPCSR", "SELECT BENEFIT_MONTH, PARTICIPATION_CODE, MEDICAL_SUBTYPE, POSITION_ON_APP, CASE_OPEN_DT, CASE_CLOSE_DT, CREATED_TIMESTAMP, CREATED_BY, LAST_MODIFIED_BY, LAST_MODIFIED_TMST, FK_CLB_CLIENT_NO, FK_CSB_CASE_NO, FK_PGB_PROG_TYPE FROM KSD_CASE_COMP WHERE FK_CSB_CASE_NO = {0}  ORDER BY FK_CSB_CASE_NO, BENEFIT_MONTH, POSITION_ON_APP",  //COBOL==>EXEC SQL DECLARE CASCMPCSR CURSOR FOR SELECT BENEFIT_MONTH , PARTICIPATION_CODE , MEDICAL_SUBTYPE , POSITION_ON_APP , CASE_OPEN_DT , CASE_CLOSE_DT , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE FROM KSD_CASE_COMP WHERE FK_CSB_CASE_NO = :CASEC-FK-CSB-CASE-NO ORDER BY FK_CSB_CASE_NO , BENEFIT_MONTH , POSITION_ON_APP END-EXEC
                                WS.CASEC_FK_CSB_CASE_NO);

            DbConv.SetQueryText("PARTCSR", "SELECT KESSEP_TIME_STMP, PART_END_DATE, PART_START_DATE, PART_CODE, PROGRAM_END_DATE, PROGRAM_SUBTYPE, RELATIONSHIP, CREATED_BY, CREATED_TIMESTAMP, LAST_MODIFIED_BY, LAST_MODIFIED_TMST, FK_CSB_CASE_NO, FK_PGB_PROG_TYPE, FK_CLB_CLIENT_NO FROM KSD_PARTICIPATION WHERE FK_CLB_CLIENT_NO = {0}  AND PART_CODE = 'IN' ORDER BY FK_CLB_CLIENT_NO, PART_END_DATE",  //COBOL==>EXEC SQL DECLARE PARTCSR CURSOR FOR SELECT KESSEP_TIME_STMP , PART_END_DATE , PART_START_DATE , PART_CODE , PROGRAM_END_DATE , PROGRAM_SUBTYPE , RELATIONSHIP , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , FK_CLB_CLIENT_NO FROM KSD_PARTICIPATION WHERE FK_CLB_CLIENT_NO = :PART-FK-CLB-CLIENT-NO AND PART_CODE = 'IN' ORDER BY FK_CLB_CLIENT_NO , PART_END_DATE END-EXEC
                                WS.PART_FK_CLB_CLIENT_NO);

            DbConv.SetQueryText("SYSPART", "SELECT SYSTEM_CODE, PARTICIPATION_FLAG, CREATED_TIMESTAMP, CREATED_BY, LAST_MODIFIED_BY, LAST_MODIFIED_TMST, FK_CLB_CLIENT_NO, FK_CLI_CLIENT_NAME, FK_CLI_SSN FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {0}  AND FK_CLI_CLIENT_NAME = {1}  AND FK_CLI_SSN = {2}  ORDER BY FK_CLB_CLIENT_NO, FK_CLI_CLIENT_NAME, FK_CLI_SSN, SYSTEM_CODE",  //COBOL==>EXEC SQL DECLARE SYSPART CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :SYSPART-FK-CLB-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN ORDER BY FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN , SYSTEM_CODE END-EXEC
                                WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN);

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXIU10_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXIU10_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain(string.Empty, "Main");
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        protected override void RunMain(string startLabel, string returnLbl)
        {
            #region Perform Navigation
            string returnLabel = returnLbl;
            string handleCondition = "";
            switch (startLabel)
            {
                case "PARA-0329176144-INIT": goto L_PARA_0329176144_INIT; break;
                case "PARA-0329176144": goto L_PARA_0329176144; break;
                case "9999-CICS-ABEND": goto L_9999_CICS_ABEND; break;
                case "0500-COMMON-CLIENT-ROUTINE": goto L_0500_COMMON_CLIENT_ROUTINE; break;
                case "2000-UPDT-PRIMARY-CLIENT": goto L_2000_UPDT_PRIMARY_CLIENT; break;
                case "8999-END-ADABAS-TRANSACTION": goto L_8999_END_ADABAS_TRANSACTION; break;
                case "8410-SELECT-CLIENT": goto L_8410_SELECT_CLIENT; break;
                case "7900-BUILD-CLI-PTR-DATA": goto L_7900_BUILD_CLI_PTR_DATA; break;
                case "8154-READISN-CLIENT-BASIC-DBF": goto L_8154_READISN_CLIENT_BASIC_DBF; break;
                case "7920-BUILD-SYS-PART-CSS": goto L_7920_BUILD_SYS_PART_CSS; break;
                case "8240-INSERT-SYS-PART": goto L_8240_INSERT_SYS_PART; break;
                case "7100-CHECK-DUP-SSN": goto L_7100_CHECK_DUP_SSN; break;
                case "9000-CALCULATE-PHONETIC-NAME": goto L_9000_CALCULATE_PHONETIC_NAME; break;
                case "8149-READISN-CLIENT-DBF": goto L_8149_READISN_CLIENT_DBF; break;
                case "8149-UPDT-CLIENT-DBF": goto L_8149_UPDT_CLIENT_DBF; break;
                case "8154-ADD-CLIENT-BASIC-DBF": goto L_8154_ADD_CLIENT_BASIC_DBF; break;
                case "8149B-ADD-CLIENT-DBF": goto L_8149B_ADD_CLIENT_DBF; break;
                case "7000-CHECK-AE-PARTICIPATION": goto L_7000_CHECK_AE_PARTICIPATION; break;
                case "7300-MAKE-KNOWN-TO-CSE": goto L_7300_MAKE_KNOWN_TO_CSE; break;
                case "7500-CHECK-FOR-DUP-CLIENT-DBF": goto L_7500_CHECK_FOR_DUP_CLIENT_DBF; break;
                case "8154-UPDT-CLIENT-BASIC-DBF": goto L_8154_UPDT_CLIENT_BASIC_DBF; break;
                case "8149C-UPDT-CLIENT-DBF": goto L_8149C_UPDT_CLIENT_DBF; break;
                case "8420-SELECT-CLIENT": goto L_8420_SELECT_CLIENT; break;
                case "8149C-ADD-CLIENT-DBF": goto L_8149C_ADD_CLIENT_DBF; break;
                case "7930-BUILD-SYS-PART-KEES": goto L_7930_BUILD_SYS_PART_KEES; break;
                case "7940-BUILD-SYS-PART-KANPAY": goto L_7940_BUILD_SYS_PART_KANPAY; break;
                case "7950-BUILD-SYS-PART-KSCARE": goto L_7950_BUILD_SYS_PART_KSCARE; break;
                case "7953-BUILD-SYS-PART-FACTS": goto L_7953_BUILD_SYS_PART_FACTS; break;
                case "7956-BUILD-SYS-PART-KMIS": goto L_7956_BUILD_SYS_PART_KMIS; break;
                case "8280-DELETE-SYS-PART": goto L_8280_DELETE_SYS_PART; break;
                case "8149C-DEL-CLIENT-DBF": goto L_8149C_DEL_CLIENT_DBF; break;
                case "8400-SELECT-CLIENT": goto L_8400_SELECT_CLIENT; break;
                case "7200-UPDATE-AE-CASE-BASIC": goto L_7200_UPDATE_AE_CASE_BASIC; break;
                case "8149DF-READLOG-CLIENT-DBF": goto L_8149DF_READLOG_CLIENT_DBF; break;
                case "8149DO-OPEN-CLIENT-DBF": goto L_8149DO_OPEN_CLIENT_DBF; break;
                case "8149DN-READLOG-CLIENT-DBF": goto L_8149DN_READLOG_CLIENT_DBF; break;
                case "8149DC-CLOSE-CLIENT-DBF": goto L_8149DC_CLOSE_CLIENT_DBF; break;
                case "8149D-UPDT-CLIENT-DBF": goto L_8149D_UPDT_CLIENT_DBF; break;
                case "4000-ADD-ALIAS-CLIENT": goto L_4000_ADD_ALIAS_CLIENT; break;
                case "8161F-READLOG-PART-DBF": goto L_8161F_READLOG_PART_DBF; break;
                case "8161O-OPEN-PART-DBF": goto L_8161O_OPEN_PART_DBF; break;
                case "8161N-READLOG-PART-DBF": goto L_8161N_READLOG_PART_DBF; break;
                case "8161C-CLOSE-PART-DBF": goto L_8161C_CLOSE_PART_DBF; break;
                case "8153F-READLOG-CCOMP-DBF": goto L_8153F_READLOG_CCOMP_DBF; break;
                case "8153O-OPEN-CCOMP-DBF": goto L_8153O_OPEN_CCOMP_DBF; break;
                case "8153N-READLOG-CCOMP-DBF": goto L_8153N_READLOG_CCOMP_DBF; break;
                case "8153C-CLOSE-CCOMP-DBF": goto L_8153C_CLOSE_CCOMP_DBF; break;
                case "8300-SELECT-PART-REL": goto L_8300_SELECT_PART_REL; break;
                case "8152-READISN-CASE-BASIC-DBF": goto L_8152_READISN_CASE_BASIC_DBF; break;
                case "8152-UPDT-CASE-BASIC-DBF": goto L_8152_UPDT_CASE_BASIC_DBF; break;
                case "8149CN-READLOG-CLIENT-DBF": goto L_8149CN_READLOG_CLIENT_DBF; break;
                case "7960-INIT-SYSTEM-PART-TABLE": goto L_7960_INIT_SYSTEM_PART_TABLE; break;
                case "8200-DECLARE-SYSPART": goto L_8200_DECLARE_SYSPART; break;
                case "8210-OPEN-SYS-PART": goto L_8210_OPEN_SYS_PART; break;
                case "7910-CHK-SYS-CD": goto L_7910_CHK_SYS_CD; break;
                case "8230-CLOSE-SYS-PART": goto L_8230_CLOSE_SYS_PART; break;
                case "8220-FETCH-SYS-PART": goto L_8220_FETCH_SYS_PART; break;
                case "PH002-0000-CONVERT-NAME": goto L_PH002_0000_CONVERT_NAME; break;
                case "PH002-1000-INITIALIZE": goto L_PH002_1000_INITIALIZE; break;
                case "PH003-0000-CRUNCH-NAME": goto L_PH003_0000_CRUNCH_NAME; break;
                case "PH002-2000-REMAIN-NAME": goto L_PH002_2000_REMAIN_NAME; break;
                case "PH002-3000-FIRST-2-LETTERS": goto L_PH002_3000_FIRST_2_LETTERS; break;
                case "PH002-4000-FIRST-1-LETTER": goto L_PH002_4000_FIRST_1_LETTER; break;
                case "PH002-2010-FINISH-NAME": goto L_PH002_2010_FINISH_NAME; break;
                case "PH002-2020-WRAP-UP": goto L_PH002_2020_WRAP_UP; break;
                case "PH002-2011-LAST-LETTER": goto L_PH002_2011_LAST_LETTER; break;
                case "PH002-2901-BUILD-2-1": goto L_PH002_2901_BUILD_2_1; break;
                case "PH002-2012-CHECK-2-LETTERS": goto L_PH002_2012_CHECK_2_LETTERS; break;
                case "PH002-2014-MIDDLE-LETTERS": goto L_PH002_2014_MIDDLE_LETTERS; break;
                case "PH002-2011-1-RE-ONE": goto L_PH002_2011_1_RE_ONE; break;
                case "PH002-2011-2-CK-SU-ID": goto L_PH002_2011_2_CK_SU_ID; break;
                case "PH002-2903-REM-ONE": goto L_PH002_2903_REM_ONE; break;
                case "PH002-2902-REM-TWO": goto L_PH002_2902_REM_TWO; break;
                case "PH002-2900-BUILD-3-2-1": goto L_PH002_2900_BUILD_3_2_1; break;
                case "PH002-2021-DIGIT-1": goto L_PH002_2021_DIGIT_1; break;
                case "PH002-2022-DIGIT-2": goto L_PH002_2022_DIGIT_2; break;
                case "PH002-3010-FIRST-2": goto L_PH002_3010_FIRST_2; break;
                case "PH002-4010-FIRST-1": goto L_PH002_4010_FIRST_1; break;
                case "PH003-0500-REMOVE-SUFFIX": goto L_PH003_0500_REMOVE_SUFFIX; break;
                case "PH003-1000-CRUNCH-REM": goto L_PH003_1000_CRUNCH_REM; break;
                case "PH003-1020-CHECK-SPACE": goto L_PH003_1020_CHECK_SPACE; break;
                case "PH003-1010-CHECK-DUP": goto L_PH003_1010_CHECK_DUP; break;
                case "PH004-1000-CHECK-DEGREE": goto L_PH004_1000_CHECK_DEGREE; break;
                case "PH004-1100-PROCESS-DEGREE": goto L_PH004_1100_PROCESS_DEGREE; break;
                case "PH004-1200-COUNT-DIGITS": goto L_PH004_1200_COUNT_DIGITS; break;
                default: break;
            }
        #endregion

        #region MAIN-0329176144
        L_MAIN_0329176144:;
            Perform("PARA-0329176144-INIT", "PARA-0329176144-INIT-EXIT"); if (Control.ExitProgram) { return; }    //COBOL==> PERFORM PARA-0329176144-INIT THRU PARA-0329176144-INIT-EXIT
            Perform("PARA-0329176144", "PARA-0329176144-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM PARA-0329176144 THRU PARA-0329176144-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        #endregion MAIN-0329176144

        #region PARA-0329176144
        L_PARA_0329176144:;
            WS.FUNC_0329176144_ESC_FLAG.SetValue("N");                                                          //COBOL==> MOVE 'N' TO FUNC-0329176144-ESC-FLAG.
            ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
            ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            ///COMMENT: ****************************************************************
            ///COMMENT:                                                                *
            ///COMMENT:  INCLUDE NAME:  SWCSZG18.                                      *
            ///COMMENT:      EAB NAME:  SWEXIU10.                                      *
            ///COMMENT:   DESCRIPTION:  0000-ADABAS-ROUTINE.                           *
            ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                            *
            ///COMMENT:                                                                *
            ///COMMENT:      INCLUDES:  SWCSZG15  WORKING-STORAGE SECTION.             *
            ///COMMENT:                 SWCSZ053  WORKING-STORAGE SECTION.             *
            ///COMMENT:                 SWAPH001  WORKING-STORAGE SECTION.             *
            ///COMMENT:                 SWCTWA    LINKAGE SECTION.                     *
            ///COMMENT:                 SWCSZG23  PROCEDURE DIVISION.                  *
            ///COMMENT:                 SWAPH002  PROCEDURE DIVISION.                  *
            ///COMMENT:                 SWAPH003  PROCEDURE DIVISION.                  *
            ///COMMENT:                 SWAPH004  PROCEDURE DIVISION.                  *
            ///COMMENT:                                                                *
            ///COMMENT:       ACTIONS:  RECEIVE SEARCH-TYPE-INDICATOR                  *
            ///COMMENT:                         PERCENT-OF-MATCH                       *
            ///COMMENT:                         SEARCH-SURNAME                         *
            ///COMMENT:                         SEARCH-FIRST-NAME                      *
            ///COMMENT:                         SEARCH-MIDDLE-INITIAL                  *
            ///COMMENT:                         SEARCH-SEX                             *
            ///COMMENT:                         SEARCH-AGE                             *
            ///COMMENT:                         SEARCH-DATE-OF-BIRTH                   *
            ///COMMENT:                         SEARCH-SOCIAL-SECURITY-NUMBER          *
            ///COMMENT:                         NEXT-READLOGICAL-KEY.                  *
            ///COMMENT:                 READVALUE CLIENT-DBF USING                     *
            ///COMMENT: *** SOC SEC NUM ------- 1.  IF SEARCH-TYPE-INDICATOR = '1',    *
            ///COMMENT:                                 CLIENT-SSN-KEY.                *
            ///COMMENT: ** EXACT   NAME ------- 2.  IF SEARCH-TYPE-INDICATOR = '2'     *
            ///COMMENT:                                AND PERCENT-OF-MATCH  = 100,    *
            ///COMMENT:                                 CLIENT-NAME-KEY.               *
            ///COMMENT: * PHONETIC NAME ------- 3.  IF SEARCH-TYPE-INDICATOR = '2'     *
            ///COMMENT:                                AND PERCENT-OF-MATCH  < 100,    *
            ///COMMENT:                                 PHONETIC-KEY.                  *
            ///COMMENT:                 RETURN  UPTO 125 OCCURRANCES OF MATCHED        *
            ///COMMENT:                         CLIENT-SURNAME                         *
            ///COMMENT:                         CLIENT-FIRST-NAME                      *
            ///COMMENT:                         CLIENT-MIDDLE-INITIAL                  *
            ///COMMENT:                         CLIENT-SOCIAL-SECURITY-NUMBER          *
            ///COMMENT:                         CLIENT-DATE-OF-BIRTH                   *
            ///COMMENT:                         CLIENT-SEX                             *
            ///COMMENT:                         CLIENT-SYSTEM-PARTICIPATION-INDICATORS.*
            ///COMMENT:                                1 OCCURRANCE  OF                *
            ///COMMENT:                         ABEND-FIELDS                           *
            ///COMMENT:                         NEXT-READLOGICAL-KEY, IF AT LEAST      *
            ///COMMENT:                             1 MORE MATCH RECORD EXISTS.        *
            ///COMMENT:                 SAVE    IF A PHONETIC SEARCH AND               *
            ///COMMENT:                            AND NEXT-READLOGICAL-KEY IS VALID,  *
            ///COMMENT:                             SAVE THE PHONETIC CALCULATED DATA  *
            ///COMMENT:                             IN A CICS TEMPORARY STORAGE (TS)   *
            ///COMMENT:                             QUEUE, FOR RETRIEVAL AND USE IF    *
            ///COMMENT:                             A PAGE FORWARD IS REQUESTED.       *
            ///COMMENT:                                                                *
            ///COMMENT:       CREATED:  01-AUG-95.                                     *
            ///COMMENT:            BY:  CTG/CEB.                                       *
            ///COMMENT:                                                                *
            ///COMMENT: ** MAINTENANCE *************************************************
            ///COMMENT:                   CHANGE                                       *
            ///COMMENT:                   CONTRL                                       *
            ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
            ///COMMENT:  -------  ------  ------  ------------------------------------ *
            ///COMMENT:                                                                *
            ///COMMENT: ****************************************************************
            if (returnLabel == "PARA-0329176144") { return; }  //Check for pass through to next method
        #endregion PARA-0329176144

        #region 0000-ADABAS-ROUTINE
        L_0000_ADABAS_ROUTINE:;
            WS.MV_ABEND_FIELDS.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO MV-ABEND-FIELDS.
            SetHandleCondtions(HandleCondition.ERROR, "9999-CICS-ABEND");                                       //COBOL==> EXEC CICS HANDLE CONDITION ERROR ( 9999-CICS-ABEND ) END-EXEC.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: *** MOVE IMPORTED FIELDS TO IMP FIELDS IN WORKING-STORAGE.
                                                                                                                //COMMENT: ****************************************************************
            WS.IMP_CLIENT_NUMBER_X10.SetValue(LS.NUMBER_0002);                                                  //COBOL==> MOVE NUMBER-0002 TO IMP-CLIENT-NUMBER-X10.
            WS.IMP_CLIENT_INFO.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO IMP-CLIENT-INFO.
            WS.IMP_LAST_NAME.SetValue(LS.LAST_NAME_0002);                                                       //COBOL==> MOVE LAST-NAME-0002 TO IMP-LAST-NAME.
            WS.IMP_FIRST_NAME.SetValue(LS.FIRST_NAME_0002);                                                     //COBOL==> MOVE FIRST-NAME-0002 TO IMP-FIRST-NAME.
            WS.IMP_INITIAL.SetValue(LS.MIDDLE_INITIAL_0002);                                                    //COBOL==> MOVE MIDDLE-INITIAL-0002 TO IMP-INITIAL.
            WS.IMP_DATE_OF_BIRTH.SetValue(LS.DOB_0002);                                                         //COBOL==> MOVE DOB-0002 TO IMP-DATE-OF-BIRTH.
            if (WS.IMP_DATE_OF_BIRTH_X8.IsEqualTo(0))                                                           //COBOL==> IF IMP-DATE-OF-BIRTH-X8 = ZEROS
            {
                //COMMENT:        MOVE SPACES TO IMP-DATE-OF-BIRTH-X8
                WS.IMP_DATE_OF_BIRTH_X8.SetValue(00010101);                                                         //COBOL==> MOVE 00010101 TO IMP-DATE-OF-BIRTH-X8
            }                                                                                                   //COBOL==> END-IF
            WS.IMP_SEX.SetValue(LS.SEX_0002);                                                                   //COBOL==> MOVE SEX-0002 TO IMP-SEX.
            WS.IMP_SOC_SEC_NUM_X9.SetValue(LS.SSN_0002);                                                        //COBOL==> MOVE SSN-0002 TO IMP-SOC-SEC-NUM-X9.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: ****************************************************************
            Perform("0500-COMMON-CLIENT-ROUTINE", "0500-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM 0500-COMMON-CLIENT-ROUTINE THRU 0500-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_0000_ADABAS_EXIT;                                                                            //COBOL==> GO TO 0000-ADABAS-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_CCYYMMDD.SetValue(LS.DATE_0001);                                                              //COBOL==> MOVE DATE-0001 TO MV-CCYYMMDD.
            WS.MV_COMPLEMENT_DATE.SetComputeValue(99999999m - WS.MV_CCYYMMDD.AsDecimal());                      //COBOL==> COMPUTE MV-COMPLEMENT-DATE = 99999999 - MV-CCYYMMDD.
            Perform("2000-UPDT-PRIMARY-CLIENT", "2000-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 2000-UPDT-PRIMARY-CLIENT THRU 2000-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_0000_ADABAS_EXIT;                                                                            //COBOL==> GO TO 0000-ADABAS-EXIT
            }                                                                                                   //COBOL==> END-IF.
            Perform("8999-END-ADABAS-TRANSACTION", "8999-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM 8999-END-ADABAS-TRANSACTION THRU 8999-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_0000_ADABAS_EXIT;                                                                            //COBOL==> GO TO 0000-ADABAS-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: *** MOVE IMP FIELDS TO EXPORTED FIELDS IN LINKAGE.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT:     NONE.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: ****************************************************************
            goto L_0000_ADABAS_EXIT;                                                                            //COBOL==> GO TO 0000-ADABAS-EXIT.
        #endregion 0000-ADABAS-ROUTINE

        #region 9999-CICS-ABEND
        L_9999_CICS_ABEND:;
            WS.MV_ABEND_TYPE.SetValue("C");                                                                     //COBOL==> MOVE 'C' TO MV-ABEND-TYPE.
            WS.MV_CICS_RESOURCE_NM.SetValue(Control.EIBRSRCE);                                                  //COBOL==> MOVE EIBRSRCE TO MV-CICS-RESOURCE-NM.
            WS.MV_CICS_FUNCTION_CD.SetValue(Control.EIBFN);                                                     //COBOL==> MOVE EIBFN TO MV-CICS-FUNCTION-CD.
            WS.MV_CICS_RESPONSE_CD.SetValue(Control.EIBRCODE);                                                  //COBOL==> MOVE EIBRCODE TO MV-CICS-RESPONSE-CD.
            if (returnLabel == "9999-CICS-ABEND") { return; }  //Check for pass through to next method
        #endregion 9999-CICS-ABEND

        #region 0000-ADABAS-EXIT
        L_0000_ADABAS_EXIT:;
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                LS.TYPE_0003.SetValue(WS.MV_ABEND_TYPE);                                                            //COBOL==> MOVE MV-ABEND-TYPE TO TYPE-0003
                LS.ADABAS_FILE_NUMBER_0003.SetValue(WS.MV_ADA_FILE_NUMBER);                                         //COBOL==> MOVE MV-ADA-FILE-NUMBER TO ADABAS-FILE-NUMBER-0003
                LS.ADABAS_FILE_ACTION_0003.SetValue(WS.MV_ADA_FILE_ACTION);                                         //COBOL==> MOVE MV-ADA-FILE-ACTION TO ADABAS-FILE-ACTION-0003
                LS.ADABAS_RESPONSE_CD_0003.SetValue(WS.MV_ADA_RESPONSE_CD);                                         //COBOL==> MOVE MV-ADA-RESPONSE-CD TO ADABAS-RESPONSE-CD-0003
                LS.CICS_RESOURCE_NM_0003.SetValue(WS.MV_CICS_RESOURCE_NM);                                          //COBOL==> MOVE MV-CICS-RESOURCE-NM TO CICS-RESOURCE-NM-0003
                LS.CICS_FUNCTION_CD_0003.SetValue(WS.MV_CICS_FUNCTION_CD);                                          //COBOL==> MOVE MV-CICS-FUNCTION-CD TO CICS-FUNCTION-CD-0003
                LS.CICS_RESPONSE_CD_0003.SetValue(WS.MV_CICS_RESPONSE_CD);                                          //COBOL==> MOVE MV-CICS-RESPONSE-CD TO CICS-RESPONSE-CD-0003
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "0000-ADABAS-EXIT") { return; }  //Check for pass through to next method
        #endregion 0000-ADABAS-EXIT

        #region PARA-0329176144-EXIT
        L_PARA_0329176144_EXIT:;
            if (returnLabel == "PARA-0329176144-EXIT") { return; }                                              //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:                                                                 *
        ///COMMENT:  INCLUDE NAME:  SWCSZG23.                                       *
        ///COMMENT:      EAB NAME:  SWEXIC10,SWEXIC20,SWEXID10,SWEXIU10,SWEXIU20    *
        ///COMMENT:   DESCRIPTION:  0500-COMMON-CLIENT-ROUTINE                      *
        ///COMMENT:                 1000-ADD-PRIMARY-CLIENT                         *
        ///COMMENT:                 2000-UPDT-PRIMARY-CLIENT                        *
        ///COMMENT:                 3000-DELET-PRIMARY-CLIENT                       *
        ///COMMENT:                 4000-ADD-ALIAS-CLIENT                           *
        ///COMMENT:                 5000-UPDT-ALIAS-CLIENT                          *
        ///COMMENT:                 6000-DELET-ALIAS-CLIENT                         *
        ///COMMENT:                 8999-END-ADABAS-TRANSACTION.                    *
        ///COMMENT:                                                                 *
        ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                             *
        ///COMMENT:                                                                 *
        ///COMMENT:      INCLUDES:  SWCSZG15  WORKING-STORAGE SECTION.              *
        ///COMMENT:                 SWCSZ053  WORKING-STORAGE SECTION.              *
        ///COMMENT:                 SWAPH001  WORKING-STORAGE SECTION.              *
        ///COMMENT:                 SWCTWA    LINKAGE SECTION.                      *
        ///COMMENT:                                                                 *
        ///COMMENT:                 SWCSZG17  PROCEDURE DIVISION (EABCRCSE);        *
        ///COMMENT:              OR SWCSZG18  PROCEDURE DIVISION (EABUPCSE);        *
        ///COMMENT:              OR SWCSZG19  PROCEDURE DIVISION (EAB?????);        *
        ///COMMENT:              OR SWCSZG20  PROCEDURE DIVISION (EABADDAL);        *
        ///COMMENT:              OR SWCSZG21  PROCEDURE DIVISION (EABUPALI);        *
        ///COMMENT:              OR SWCSZG22  PROCEDURE DIVISION (EABDELAL).        *
        ///COMMENT:                                                                 *
        ///COMMENT:                 SWAPH002  PROCEDURE DIVISION.                   *
        ///COMMENT:                 SWAPH003  PROCEDURE DIVISION.                   *
        ///COMMENT:                 SWAPH004  PROCEDURE DIVISION.                   *
        ///COMMENT:                                                                 *
        ///COMMENT:       ACTIONS:  RECEIVE IMPORT FIELDS (W-IA).                   *
        ///COMMENT:                 PROCESS (DEPENDS ON REQUESTED ACTIVITY).        *
        ///COMMENT:                 RETURN  EXPORT FIELDS (W-OA).                   *
        ///COMMENT:                                                                 *
        ///COMMENT:       CREATED:  17-JAN-96.                                      *
        ///COMMENT:            BY:  CTG/CEB.                                        *
        ///COMMENT:                                                                 *
        ///COMMENT: ** MAINTENANCE **************************************************
        ///COMMENT:                   CHANGE                                        *
        ///COMMENT:                   CONTRL                                        *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                           *
        ///COMMENT:  -------- ------- ------- ------------------------------------- *
        ///COMMENT:  10/04/00 M.LACHOWICZ     FIX PR 103326.                        *
        ///COMMENT:  09/30/04 M. QUINN        FIX PR 208957.  7500 PARAGRAPHS       *
        ///COMMENT:  06/03/10 R.MATHEWS       CQ 17191   MISSING PHONETIC DATA      *
        ///COMMENT:  02/11/14 WBR     CQ35825 CHANGE ADABAS TO DB2 FOR KEES PHASE 3 *
        ///COMMENT:                           THE EA AND KSC DATA IS MERGED TOGETHER*
        ///COMMENT:                           THE ACCESING OF THE KSC TABLES HAVE   *
        ///COMMENT:                           TAKEN OUT.                            *
        ///COMMENT:                                                                 *
        ///COMMENT:  12/22/15 RAJ     CQ35825 MODIFIED TO INCORPORATE KEES PREFERRED*
        ///COMMENT:                           ID CHANGES. POPULATE PREFERRED ID     *
        ///COMMENT:                           VALUE DURING DB2 CLIENT-BASIC INSERT. *
        ///COMMENT:                                                                 *
        ///COMMENT:  12/29/16 RAJ     CQ35825 MODIFIED TO COMMENT OUT ADABAS RELATED*
        ///COMMENT:                           CALL TO AVOID ADABAS INITIALZATION    *
        ///COMMENT:                           RELATED ERROR MESSAGES.               *
        ///COMMENT:                                                                 *
        ///COMMENT:  01/11/17 RAJ     CQ35825 MODIFIED TO INITIALIZE THE SQL CODE   *
        ///COMMENT:                           WHERE REQUIRED IN ORDER TO AVOID      *
        ///COMMENT:                           EXCUTING EXCEPTION PROCESS.           *
        ///COMMENT:                                                                 *
        ///COMMENT:  01/12/17 RAJ     CQ35825 MODIFIED TO SET CIS REPLICATION IND   *
        ///COMMENT:                           VALUE TO 'P' WHILE ADDING NEW CLIENT  *
        ///COMMENT:                           THROUGH CSS APPLICATION.              *
        ///COMMENT:                                                                 *
        ///COMMENT:  07-05-17 RAJ     CQ35825 MODIFIED TO FIX SYSTEM PARTICIPATION  *
        ///COMMENT:                           ISSUES RELATED TO KMIS & FACTS SYSTEM.*
        ///COMMENT:                           1. ADDED CODE TO SAVE AND RE-ADD THE  *
        ///COMMENT:                              EXISTING SYSTEM PART INFORMATION   *
        ///COMMENT:                              FOR KMIS AND FACTS SYSTEMS.        *
        ///COMMENT:                                                                 *
        ///COMMENT:  10-25-17 RAJ     CQ35825 MODIFIED TO FIX PHONETIC-DATA UPDATE. *
        ///COMMENT:                           CLIENT PHONETIC DATA IS GETTING       *
        ///COMMENT:                           UPDATED WHEN THERE IS NO CHANGE IN    *
        ///COMMENT:                           THE NAME AND THOSE CASES PHONETIC     *
        ///COMMENT:                           DATA WAS NOT POPULATED.               *
        ///COMMENT:                                                                 *
        ///COMMENT:  06-27-18 RKM     CQ59900 CHECK FOR DUPLICATE SSN ON UPDATE OF  *
        ///COMMENT:                           PRIMARY CLIENT DATA                   *
        ///COMMENT:                                                                 *
        ///COMMENT:  06-28-18 RKM     CQ62296 CHECK PART_CODE OF PROGRAMS TO        *
        ///COMMENT:                           DETERMINE IF ACTIVE IN KEES           *
        ///COMMENT:                                                                 *
        ///COMMENT:  08-06-18 RKM     CQ63278 REVISE DUPLICATE SSN EDIT TO IGNORE   *
        ///COMMENT:                           SAME SSN ON SECONDARY CLIENT IDS      *
        ///COMMENT: *****************************************************************
        #endregion PARA-0329176144-EXIT

        #region 0500-COMMON-CLIENT-ROUTINE
        L_0500_COMMON_CLIENT_ROUTINE:;
            //COMMENT: *****************************************************************
            //COMMENT:                                                                 *
            //COMMENT:  INCLUDE NAME:  SWCSZ954 (FROM SWCSZ054).                       *
            //COMMENT:                                                                 *
            //COMMENT:      EAB NAME:  SWCSZ???.                                       *
            //COMMENT:                                                                 *
            //COMMENT:   DESCRIPTION:  ADABAS INITIALIZATION.                          *
            //COMMENT:                                                                 *
            //COMMENT:      LOCATION:  PROCEDURE DIVISION.                             *
            //COMMENT:                 MUST BE HARDCOPIED INTO EAB MAIN PROCEDURE      *
            //COMMENT:                   DIVISION INCLUDE SWCSZ???.                    *
            //COMMENT:                                                                 *
            //COMMENT:       ACTIONS:  RELEASES ANY OUTSTANDING COMMAND ID'S.          *
            //COMMENT:                 THIS ROUTINE REQUIRES INCLUDE SWCSZ053 IN THE   *
            //COMMENT:                   WORKING-STORAGE SECTION OF THIS PROGRAM.      *
            //COMMENT:                                                                 *
            //COMMENT:       CREATED:  21-AUG-95.                                      *
            //COMMENT:            BY:  CTG/CEB.                                        *
            //COMMENT:                                                                 *
            //COMMENT: ** MAINTENANCE **************************************************
            //COMMENT:                   CHANGE                                        *
            //COMMENT:                   CONTRL                                        *
            //COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                           *
            //COMMENT:  -------  ------  ------  ------------------------------------- *
            //COMMENT:                                                                 *
            //COMMENT: *****************************************************************
            //COMMENT:     CALL 'ADASTWA' USING TWA CONTROL-BLOCK.
            //COMMENT:     CALL SRADALNK  USING DFHEIBLK DFHCOMMAREA TWA SRMODLNK.
            //COMMENT:     IF RESPONSE-CODE > ZERO AND NOT = 9
            //COMMENT:         MOVE 'A'           TO MV-ABEND-TYPE
            //COMMENT:         MOVE ZERO          TO MV-ADA-FILE-NUMBER
            //COMMENT:         MOVE 'INI'         TO MV-ADA-FILE-ACTION
            //COMMENT:         MOVE RESPONSE-CODE TO MV-ADA-RESPONSE-CD
            //COMMENT:         GO TO 0500-EXIT
            //COMMENT:     END-IF.
            //COMMENT: *****************************************************************
            //COMMENT:  GET     SYSTEM DATE        *         YEAR/MONTH/DAY   (YYMMDD) *
            //COMMENT:                                                                 *
            //COMMENT:  APPEND  CENTURY            * CENTURY/YEAR/MONTH/DAY (CCYYMMDD) *
            //COMMENT:                                                                 *
            //COMMENT:  COMPUTE COMPLEMENTARY DATE *             (99999999 - CCYYMMDD) *
            //COMMENT: *****************************************************************
            Control.GetLatestDateTime(WS.MV_ABS_TIME);                                                          //COBOL==> EXEC CICS ASKTIME ABSTIME ( MV-ABS-TIME ) END-EXEC.
                                                                                                                //COMMENT: WBR START
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  MODIFIED THE FORMATTIME CICS COMMAND BECAUSE IT CAN CORRECTLY
                                                                                                                //COMMENT:  INCLUDE THE CENTURY IN THE DATE.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: WBR EXEC CICS FORMATTIME
                                                                                                                //COMMENT: WBR           ABSTIME (MV-ABS-TIME)
                                                                                                                //COMMENT: WBR           YYMMDD  (MV-YYMMDD-X6)
                                                                                                                //COMMENT: WBR END-EXEC.
            DateConverter.ConvertABSTime(WS.MV_ABS_TIME, DateTimeFormat.YYYYMMDD, WS.MV_CCYYMMDD_X8, "", null, "");  //COBOL==> EXEC CICS FORMATTIME ABSTIME ( MV-ABS-TIME ) YYYYMMDD ( MV-CCYYMMDD-X8 ) END-EXEC.
                                                                                                                     //COMMENT: *****************************************************************
                                                                                                                     //COMMENT:  THE FOLLOWING LOGIC IS NO LONGER NEEDED BECAUSE CICS CAN FORMAT
                                                                                                                     //COMMENT:  THE CENTURY IN THE DATE.
                                                                                                                     //COMMENT: *****************************************************************
                                                                                                                     //COMMENT:     IF MV-YY > 94
                                                                                                                     //COMMENT:         MOVE 19 TO MV-CC
                                                                                                                     //COMMENT:     ELSE
                                                                                                                     //COMMENT:         MOVE 20 TO MV-CC
                                                                                                                     //COMMENT:     END-IF.
                                                                                                                     //COMMENT: *****************************************************************
                                                                                                                     //COMMENT: WBR END
            WS.MV_COMPLEMENT_DATE.SetComputeValue(99999999m - WS.MV_CCYYMMDD.AsDecimal());                      //COBOL==> COMPUTE MV-COMPLEMENT-DATE = 99999999 - MV-CCYYMMDD.
            if (returnLabel == "0500-COMMON-CLIENT-ROUTINE") { return; }  //Check for pass through to next method
        #endregion 0500-COMMON-CLIENT-ROUTINE

        #region 0500-EXIT
        L_0500_EXIT:;
            if (returnLabel == "0500-EXIT") { return; }                                                         //COBOL==> EXIT.
        #endregion 0500-EXIT

        #region 1000-ADD-PRIMARY-CLIENT
        L_1000_ADD_PRIMARY_CLIENT:;
            //COMMENT: WBR START
            //COMMENT: *****************************************************************
            //COMMENT:   OLD                SUMMARY OF PROCESSING                      *
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
            //COMMENT:                                                                 *
            //COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
            //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
            //COMMENT:      MATCHING THOSE IMPORTED.                                   *
            //COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
            //COMMENT:    GET CLIENT-BASIC-DBF RECORD FOR CLIENT-NUMBER.               *
            //COMMENT:  CHECK CLIENT-DBF RECORD                                        *
            //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
            //COMMENT:      AGAINST THOSE OF CLIENT-BASIC-DBF RECORD.                  *
            //COMMENT:                                                                 *
            //COMMENT:  IF THE FIELDS MATCH, THE CLIENT-DBF RECORD IS NOT AN ALIAS,    *
            //COMMENT:    IF CSE SYSTEM PARTICIPATION FIELD IS NOT 'Y'                 *
            //COMMENT:      SET IT TO 'Y' AND UPDATE CLIENT-DBF RECORD                 *
            //COMMENT:    ELSE                                                         *
            //COMMENT:      EXIT ROUTINE                                               *
            //COMMENT:  ELSE, THE CLIENT-DBF RECORD IS AN ALIAS,                       *
            //COMMENT:    EXIT ROUTINE.                                                *
            //COMMENT:                                                                 *
            //COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
            //COMMENT:    SSN                                                          *
            //COMMENT:      MATCHING THE SSN IMPORTED.                                 *
            //COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
            //COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
            //COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
            //COMMENT:                                                                 *
            //COMMENT:  CALCULATE PHONETIC VALUE OF                                    *
            //COMMENT:    NAME.                                                        *
            //COMMENT:                                                                 *
            //COMMENT:  GET FIRST RECORD OF CLIENT-DBF TO OBTAIN NEXT CLIENT-NUMBER.   *
            //COMMENT:  ADD 1 TO CLIENT-NUMBER IN FIRST CLIENT-DBF RECORD AND UPDATE.  *
            //COMMENT:                                                                 *
            //COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-DBF.                        *
            //COMMENT:                                                                 *
            //COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-BASIC-DBF.                  *
            //COMMENT:                                                                 *
            //COMMENT:  BUILD AND ADD NEW ROW(S) TO KSD_SYSTEM_PART DB2 TABLE.         *
            //COMMENT: *****************************************************************
            //COMMENT: *****************************************************************
            //COMMENT:   NEW                SUMMARY OF PROCESSING                      *
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
            //COMMENT:                                                                 *
            //COMMENT:  CHECK FOR EXISTENT KSD_CLIENT ROW WITH                         *
            //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
            //COMMENT:      MATCHING THOSE IMPORTED.                                   *
            //COMMENT:                                                                 *
            //COMMENT:  IF MATCHING KSD_CLIENT ROW IS FOUND,                           *
            //COMMENT:    GET KSD_CLIENT_BASIC ROW FOR CLIENT-NUMBER.                  *
            //COMMENT:  CHECK KSD_CLIENT ROW                                           *
            //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
            //COMMENT:      AGAINST THOSE OF KSD_CLIENT_BASIC ROW.                     *
            //COMMENT:                                                                 *
            //COMMENT:  IF THE FIELDS MATCH, THE KSD_CLIENT ROW IS NOT AN ALIAS,       *
            //COMMENT:    FETCH SYSTEM PARTICIPATION DATA FROM THE KSD_SYSTEM_PART     *
            //COMMENT:          DB2 TABLE                                              *
            //COMMENT:    IF CSE SYSTEM PARTICIPATION FIELD IS NOT 'Y'                 *
            //COMMENT:      SET IT TO 'Y' AND INSERT A KSD_SYSTEM_PART ROW             *
            //COMMENT:    ELSE                                                         *
            //COMMENT:      EXIT ROUTINE                                               *
            //COMMENT:  ELSE, THE KSD_CLIENT ROW IS AN ALIAS,                          *
            //COMMENT:    EXIT ROUTINE.                                                *
            //COMMENT:                                                                 *
            //COMMENT:  CHECK FOR EXISTENT KSD_CLIENT ROW WITH                         *
            //COMMENT:    SSN                                                          *
            //COMMENT:      MATCHING THE SSN IMPORTED.                                 *
            //COMMENT:  IF MATCHING KSD_CLIENT ROW IS FOUND,                           *
            //COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
            //COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
            //COMMENT:                                                                 *
            //COMMENT:  CALCULATE PHONETIC VALUE OF                                    *
            //COMMENT:    NAME.                                                        *
            //COMMENT:                                                                 *
            //COMMENT:  SELECT ROW FROM THE KSD_NEXT_CLIENT_ID DB2 TABLE TO OBTAIN THE *
            //COMMENT:      NEXT CLIENT-NUMBER.                                        *
            //COMMENT:  ADD 1 TO CLIENT-NUMBER AND UPDATE THE ROW ON THE               *
            //COMMENT:      KSD_NEXT_CLIENT_ID DB2 TABLE                               *
            //COMMENT:                                                                 *
            //COMMENT:  BUILD AND ADD NEW ROW TO KSD_CLIENT DB2 TABLE.                 *
            //COMMENT:                                                                 *
            //COMMENT:  BUILD AND ADD NEW ROW TO KSD_CLIENT-BASIC DB2 TABLE.           *
            //COMMENT:                                                                 *
            //COMMENT:  BUILD AND ADD NEW ROW(S) TO KSD_SYSTEM_PART DB2 TABLE.         *
            //COMMENT: *****************************************************************
            //COMMENT: WBR END
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
            //COMMENT: *****************************************************************
            if (!(WS.IMP_SOC_SEC_NUM.IsEqualTo(0)))                                                             //COBOL==> IF IMP-SOC-SEC-NUM NOT = ZERO
            {
                if (((WS.IMP_SOC_SEC_NUM_3_VALID.Value)
             && (WS.IMP_SOC_SEC_NUM_2_VALID.Value))
             && (WS.IMP_SOC_SEC_NUM_4_VALID.Value))  //COBOL==> IF IMP-SOC-SEC-NUM-3-VALID AND IMP-SOC-SEC-NUM-2-VALID AND IMP-SOC-SEC-NUM-4-VALID
                {
                    goto EndOfSentence_1;                                                                               //COBOL==> NEXT SENTENCE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-FILE-NUMBER
                                                                                                                        //COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
                    WS.MV_ADA_FILE_ACTION.SetValue("SSN");                                                              //COBOL==> MOVE 'SSN' TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                    goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_1:;
            //COMMENT: WBR START
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
            //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
            //COMMENT:      MATCHING THOSE IMPORTED.                                   *
            //COMMENT: *****************************************************************
            //COMMENT:     MOVE IMP-NAME              TO V-CLIENT-NAME149D.
            //COMMENT:     MOVE IMP-SOC-SEC-NUM       TO V-SSN149D.
            //COMMENT:     MOVE IMP-DATE-OF-BIRTH-SEX TO V-DATE-OF-BIRTH-SEX149D.
            //COMMENT:     PERFORM 8149DF-READLOG-CLIENT-DBF
            //COMMENT:        THRU 8149DF-READLOG-EXIT.
            //COMMENT:     IF NOT MV-ABEND-TYPE-NONE
            //COMMENT:         GO TO 1000-EXIT
            //COMMENT:     END-IF.
            //COMMENT:     IF EOF149D
            //COMMENT:         NEXT SENTENCE
            //COMMENT:     ELSE
            //COMMENT:         IF CLIENT-NAME149D       = V-CLIENT-NAME149D AND
            //COMMENT:            SSN149D               = V-SSN149D         AND
            //COMMENT:            DATE-OF-BIRTH-SEX149D = V-DATE-OF-BIRTH-SEX149D
            //COMMENT: *****************************************************************
            //COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
            //COMMENT:    GET CLIENT-BASIC-DBF RECORD FOR CLIENT-NUMBER.               *
            //COMMENT: *****************************************************************
            //COMMENT:             PERFORM
            //COMMENT:                 MOVE CLIENT-POINTER149D TO MV-CLIENT-POINTER
            //COMMENT:                 MOVE MV-CLIENT-ID       TO IMP-CLIENT-NUMBER-X10
            //COMMENT:                 PERFORM 8154-READISN-CLIENT-BASIC-DBF
            //COMMENT:                    THRU 8154-READISN-EXIT
            //COMMENT:                 IF NOT MV-ABEND-TYPE-NONE
            //COMMENT:                     GO TO 1000-EXIT
            //COMMENT:                 END-IF
            //COMMENT: *****************************************************************
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK CLIENT-DBF RECORD                                        *
            //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
            //COMMENT:      AGAINST THOSE OF CLIENT-BASIC-DBF RECORD.                  *
            //COMMENT: *****************************************************************
            //COMMENT:                 MOVE CLIENT-INFO154   TO MV-RECORD-NAME
            //COMMENT:                 MOVE DATE-OF-BIRTH154 TO MV-DATE-OF-BIRTH-X8
            //COMMENT:                 MOVE SEX154           TO MV-SEX
            //COMMENT:                 IF MV-RECORD-NAME       = CLIENT-NAME149D AND
            //COMMENT:                    SSN154               = SSN149D         AND
            //COMMENT:                    MV-DATE-OF-BIRTH-SEX = DATE-OF-BIRTH-SEX149D
            //COMMENT: *****************************************************************
            //COMMENT:  IF THE FIELDS MATCH, THE CLIENT-DBF RECORD IS NOT AN ALIAS.    *
            //COMMENT: *****************************************************************
            //COMMENT:                     PERFORM 8154-RELISN-CLIENT-BASIC-DBF
            //COMMENT:                        THRU 8154-RELISN-EXIT
            //COMMENT:                     IF NOT MV-ABEND-TYPE-NONE
            //COMMENT:                         GO TO 1000-EXIT
            //COMMENT:                     END-IF
            //COMMENT:                     IF MV-SYS-PART-CSE-YES
            //COMMENT:                         PERFORM 8149D-RELISN-CLIENT-DBF
            //COMMENT:                            THRU 8149D-RELISN-EXIT
            //COMMENT: *****************************************************************
            //COMMENT:  IF CSE SYSTEM PARTICIPATION FIELD IS NOT 'Y'                   *
            //COMMENT:    SET IT TO 'Y'.                                               *
            //COMMENT: *****************************************************************
            //COMMENT:                     ELSE
            //COMMENT:                         MOVE 'Y'               TO MV-SYS-PART-CSE
            //COMMENT:                         MOVE MV-CLIENT-POINTER TO
            //COMMENT:                                                CLIENT-POINTER149D
            //COMMENT: *****************************************************************
            //COMMENT:  UPDATE CLIENT-DBF RECORD.                                      *
            //COMMENT: *****************************************************************
            //COMMENT:                         PERFORM 8149D-UPDT-CLIENT-DBF
            //COMMENT:                            THRU 8149D-UPDT-EXIT
            //COMMENT:                     END-IF
            //COMMENT: *****************************************************************
            //COMMENT:  ELSE, THE CLIENT-DBF RECORD IS AN ALIAS.                       *
            //COMMENT: *****************************************************************
            //COMMENT:                 ELSE
            //COMMENT:                     PERFORM 8154-RELISN-CLIENT-BASIC-DBF
            //COMMENT:                        THRU 8154-RELISN-EXIT
            //COMMENT:                     IF NOT MV-ABEND-TYPE-NONE
            //COMMENT:                         GO TO 1000-EXIT
            //COMMENT:                     END-IF
            //COMMENT:                     PERFORM 8149D-RELISN-CLIENT-DBF
            //COMMENT:                        THRU 8149D-RELISN-EXIT
            //COMMENT:                 END-IF
            //COMMENT:             END-PERFORM
            //COMMENT: *****************************************************************
            //COMMENT:  EXIT ROUTINE.                                                  *
            //COMMENT: *****************************************************************
            //COMMENT:             GO TO 1000-EXIT
            //COMMENT:         END-IF
            //COMMENT:     END-IF.
            //COMMENT: WBR START
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR EXISTENT KSD_CLIENT ROW WITH                         *
            //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
            //COMMENT:      MATCHING THOSE IMPORTED.                                   *
            //COMMENT: *****************************************************************
            WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) WS-CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.WS_CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) WS-CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.WS_CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) WS-CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.WS_CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) WS-CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.WS_CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) WS-CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.WS_CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());
            WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER.
            WS.WS_CLIENT_EOF_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-EOF-NO TO TRUE.
            Perform("8410-SELECT-CLIENT", "8410-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8410-SELECT-CLIENT THRU 8410-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_CLIENT_EOF_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-EOF-YES
            {
                goto EndOfSentence_2;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((((WS.CLIENT_CLIENT_NAME.IsEqualTo(WS.IMP_NAME))
             && (WS.CLIENT_SSN.IsEqualTo(WS.IMP_SOC_SEC_NUM)))
             && (WS.CLIENT_DATE_OF_BIRTH.IsEqualTo(WS.WS_CLIENT_DATE_OF_BIRTH)))
             && (WS.CLIENT_GENDER.IsEqualTo(WS.IMP_SEX)))  //COBOL==> IF CLIENT-CLIENT-NAME = IMP-NAME AND CLIENT-SSN = IMP-SOC-SEC-NUM AND CLIENT-DATE-OF-BIRTH = WS-CLIENT-DATE-OF-BIRTH AND CLIENT-GENDER = IMP-SEX
                {
                    Perform("7900-BUILD-CLI-PTR-DATA", "7900-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7900-BUILD-CLI-PTR-DATA THRU 7900-EXIT
                    WS.MV_CLIENT_POINTER.SetValue(WS.WS_CLIENT_POINTER);                                                //COBOL==> MOVE WS-CLIENT-POINTER TO MV-CLIENT-POINTER
                    WS.IMP_CLIENT_NUMBER_X10.SetValue(WS.MV_CLIENT_ID);                                                 //COBOL==> MOVE MV-CLIENT-ID TO IMP-CLIENT-NUMBER-X10
                    WS.CLIENTB_CLIENT_NUMBER.SetValue(WS.MV_CLIENT_ID);                                                 //COBOL==> MOVE MV-CLIENT-ID TO CLIENTB-CLIENT-NUMBER
                    Perform("8154-READISN-CLIENT-BASIC-DBF", "8154-READISN-EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM 8154-READISN-CLIENT-BASIC-DBF THRU 8154-READISN-EXIT
                    if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
                    {
                        goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
                    }                                                                                                   //COBOL==> END-IF
                                                                                                                        //COMMENT: *****************************************************************
                                                                                                                        //COMMENT:  CHECK KSD_CLIENT ROW                                           *
                                                                                                                        //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
                                                                                                                        //COMMENT:      AGAINST THOSE OF KSD_CLIENT_BASIC ROW.                     *
                                                                                                                        //COMMENT: *****************************************************************
                    WS.MV_RECORD_LAST_NAME.SetValue(WS.CLIENTB_CLIENT_SURNAME);                                         //COBOL==> MOVE CLIENTB-CLIENT-SURNAME TO MV-RECORD-LAST-NAME
                    WS.MV_RECORD_FIRST_NAME.SetValue(WS.CLIENTB_CLIENT_GIVEN_NAME);                                     //COBOL==> MOVE CLIENTB-CLIENT-GIVEN-NAME TO MV-RECORD-FIRST-NAME
                    WS.MV_RECORD_INITIAL.SetValue(WS.CLIENTB_CLIENT_INITIALS);                                          //COBOL==> MOVE CLIENTB-CLIENT-INITIALS TO MV-RECORD-INITIAL
                    WS.MV_DATE_OF_BIRTH_X8.SetValueOfSubstring(1, 4, WS.CLIENTB_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH ( 1:4 ) TO MV-DATE-OF-BIRTH-X8 ( 1:4 )
                    WS.MV_DATE_OF_BIRTH_X8.SetValueOfSubstring(5, 2, WS.CLIENTB_DATE_OF_BIRTH.GetSubstring(6, 2).AsString());  //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH ( 6:2 ) TO MV-DATE-OF-BIRTH-X8 ( 5:2 )
                    WS.MV_DATE_OF_BIRTH_X8.SetValueOfSubstring(7, 2, WS.CLIENTB_DATE_OF_BIRTH.GetSubstring(9, 2).AsString());  //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH ( 9:2 ) TO MV-DATE-OF-BIRTH-X8 ( 7:2 )
                    WS.MV_SEX.SetValue(WS.CLIENTB_GENDER);                                                              //COBOL==> MOVE CLIENTB-GENDER TO MV-SEX
                    if (((WS.MV_RECORD_NAME.IsEqualTo(WS.CLIENT_CLIENT_NAME))
             && (WS.CLIENTB_SSN.IsEqualTo(WS.CLIENT_SSN)))
             && (WS.CLIENTB_DATE_OF_BIRTH.IsEqualTo(WS.CLIENT_DATE_OF_BIRTH)))  //COBOL==> IF MV-RECORD-NAME = CLIENT-CLIENT-NAME AND CLIENTB-SSN = CLIENT-SSN AND CLIENTB-DATE-OF-BIRTH = CLIENT-DATE-OF-BIRTH
                    {
                        //COMMENT: *****************************************************************
                        //COMMENT:  IF THE FIELDS MATCH, THE CLIENT-DBF RECORD IS NOT AN ALIAS.    *
                        //COMMENT: *****************************************************************
                        //COMMENT:    SET IT TO 'Y'.                                               *
                        //COMMENT: *****************************************************************
                        //Continue                                                                                          //COBOL==> CONTINUE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.MV_SYS_PART_CSE.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO MV-SYS-PART-CSE
                        WS.WS_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                                //COBOL==> MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER
                                                                                                                            //COMMENT: *****************************************************************
                                                                                                                            //COMMENT:  INSERT THE KSD SYSTEM PARTICIPATION DB2 ROW FOR CSS            *
                                                                                                                            //COMMENT: *****************************************************************
                        Perform("7920-BUILD-SYS-PART-CSS", "7920-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT
                        Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                    }                                                                                                   //COBOL==> END-IF
                                                                                                                        //COMMENT: *****************************************************************
                                                                                                                        //COMMENT:  EXIT ROUTINE.                                                  *
                                                                                                                        //COMMENT: *****************************************************************
                    goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_2:;
            //COMMENT: *****************************************************************
            //COMMENT: WBR END
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
            //COMMENT:    SSN                                                          *
            //COMMENT:      MATCHING THE SSN IMPORTED.                                 *
            //COMMENT:  IF EXISTENT CLIENT-DBF RECORD IS FOUND,                        *
            //COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
            //COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
            //COMMENT: *****************************************************************
            Perform("7100-CHECK-DUP-SSN", "7100-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 7100-CHECK-DUP-SSN THRU 7100-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  CALCULATE PHONETIC VALUE OF NAME.                              *
                                                                                                                //COMMENT: *****************************************************************
            WS.MV_RECORD_NAME.SetValue(WS.IMP_NAME);                                                            //COBOL==> MOVE IMP-NAME TO MV-RECORD-NAME.
            Perform("9000-CALCULATE-PHONETIC-NAME", "9000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM 9000-CALCULATE-PHONETIC-NAME THRU 9000-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  OLD                                                            *
                                                                                                                //COMMENT:  GET FIRST RECORD OF CLIENT-DBF TO OBTAIN NEXT CLIENT-NUMBER.   *
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  NEW                                                            *
                                                                                                                //COMMENT:  SELECT ROW FROM KSD_NEXT_CLIENT_ID TO OBTAIN NEXT CLIENT-NUMBER*
                                                                                                                //COMMENT: *****************************************************************
            Perform("8149-READISN-CLIENT-DBF", "8149-READISN-EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM 8149-READISN-CLIENT-DBF THRU 8149-READISN-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: WBR START
                                                                                                                //COMMENT:     MOVE NEXT-CLIENT-ID149 TO IMP-CLIENT-NUMBER-X10,
                                                                                                                //COMMENT:                               MV-CLIENT-ID.
            WS.IMP_CLIENT_NUMBER_X10.SetValue(WS.NEXTCLI_NEXT_CLIENT_ID);                                       //COBOL==> MOVE NEXTCLI-NEXT-CLIENT-ID TO IMP-CLIENT-NUMBER-X10 , MV-CLIENT-ID.
            WS.MV_CLIENT_ID.SetValue(WS.NEXTCLI_NEXT_CLIENT_ID);
            //COMMENT: WBR END
            //COMMENT: *****************************************************************
            //COMMENT:  OLD                                                            *
            //COMMENT:  ADD 1 TO CLIENT-NUMBER IN FIRST CLIENT-DBF RECORD AND UPDATE.  *
            //COMMENT: *****************************************************************
            //COMMENT: *****************************************************************
            //COMMENT:  NEW                                                            *
            //COMMENT:  ADD 1 TO MV-CLIENT-ID-910                                      *
            //COMMENT: *****************************************************************
            WS.MV_CLIENT_ID_910.Add(1);                                                                         //COBOL==> ADD 1 TO MV-CLIENT-ID-910.
                                                                                                                //COMMENT: WBR START
                                                                                                                //COMMENT:     MOVE MV-CLIENT-ID      TO NEXT-CLIENT-ID149.
            WS.NEXTCLI_NEXT_CLIENT_ID.SetValue(WS.MV_CLIENT_ID);                                                //COBOL==> MOVE MV-CLIENT-ID TO NEXTCLI-NEXT-CLIENT-ID.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  UPDATE THE KSD_NEXT_CLIENT_ID DB2 TABLE                        *
                                                                                                                //COMMENT: *****************************************************************
            Perform("8149-UPDT-CLIENT-DBF", "8149-UPDT-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM 8149-UPDT-CLIENT-DBF THRU 8149-UPDT-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  INSERT KSD_CLIENT_BASIC DB2 TABLE                              *
                                                                                                                //COMMENT: *****************************************************************
            WS.DCLKSD_CLIENT_BASIC.ResetToInitialValue();                                                       //COBOL==> INITIALIZE DCLKSD-CLIENT-BASIC.
            WS.CLIENTB_CLIENT_NUMBER.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                        //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENTB-CLIENT-NUMBER.
            WS.CLIENTB_CLIENT_SURNAME.SetValue(WS.IMP_LAST_NAME);                                               //COBOL==> MOVE IMP-LAST-NAME TO CLIENTB-CLIENT-SURNAME.
            WS.CLIENTB_CLIENT_GIVEN_NAME.SetValue(WS.IMP_FIRST_NAME);                                           //COBOL==> MOVE IMP-FIRST-NAME TO CLIENTB-CLIENT-GIVEN-NAME.
            WS.CLIENTB_CLIENT_INITIALS.SetValue(WS.IMP_INITIAL);                                                //COBOL==> MOVE IMP-INITIAL TO CLIENTB-CLIENT-INITIALS.
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 1:4 ) TO CLIENTB-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                            //COBOL==> MOVE '-' TO CLIENTB-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 5:2 ) TO CLIENTB-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                            //COBOL==> MOVE '-' TO CLIENTB-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 7:2 ) TO CLIENTB-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENTB_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                        //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENTB-SSN.
            WS.CLIENTB_GENDER.SetValue(WS.IMP_SEX);                                                             //COBOL==> MOVE IMP-SEX TO CLIENTB-GENDER.
            WS.CLIENTB_EMAIL_ADDRESS_LEN.SetValue(ZEROES);                                                      //COBOL==> MOVE ZEROES TO CLIENTB-EMAIL-ADDRESS-LEN CLIENTB-OCCUPATION-LEN.
            WS.CLIENTB_OCCUPATION_LEN.SetValue(ZEROES);
            WS.CLIENTB_PRNT_RGHTS_SEV_DT.SetValue("0001-01-01");                                                //COBOL==> MOVE '0001-01-01' TO CLIENTB-PRNT-RGHTS-SEV-DT CLIENTB-INITIAL-CUSTODY-DT CLIENTB-CURR-PLACEMNT-DT CLIENTB-CSEA-G-CAUSE-CL-DT CLIENTB-MO-DEATH-DT CLIENTB-MO-PRT-DT CLIENTB-FA-DEATH-DT CLIENTB-FA-PRT-DT.
            WS.CLIENTB_INITIAL_CUSTODY_DT.SetValue("0001-01-01");
            WS.CLIENTB_CURR_PLACEMNT_DT.SetValue("0001-01-01");
            WS.CLIENTB_CSEA_G_CAUSE_CL_DT.SetValue("0001-01-01");
            WS.CLIENTB_MO_DEATH_DT.SetValue("0001-01-01");
            WS.CLIENTB_MO_PRT_DT.SetValue("0001-01-01");
            WS.CLIENTB_FA_DEATH_DT.SetValue("0001-01-01");
            WS.CLIENTB_FA_PRT_DT.SetValue("0001-01-01");
            Perform("8154-ADD-CLIENT-BASIC-DBF", "8154-ADD-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM 8154-ADD-CLIENT-BASIC-DBF THRU 8154-ADD-EXIT.
                                                                                                                  //COMMENT: WBR PERFORM 8999-END-ADABAS-TRANSACTION
                                                                                                                  //COMMENT: WBR    THRU 8999-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-DBF.                        *
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     MOVE IMP-NAME              TO CLIENT-NAME149B.
                                                                                                                //COMMENT:     MOVE IMP-SOC-SEC-NUM       TO SSN149B.
                                                                                                                //COMMENT:     MOVE IMP-DATE-OF-BIRTH-SEX TO DATE-OF-BIRTH-SEX149B.
                                                                                                                //COMMENT:     MOVE SPACES                TO MV-CLIENT-POINTER.
                                                                                                                //COMMENT:     MOVE IMP-CLIENT-NUMBER     TO MV-CLIENT-ID-910.
                                                                                                                //COMMENT:     MOVE 'Y'                   TO MV-SYS-PART-CSE.
                                                                                                                //COMMENT:     MOVE MV-CLIENT-POINTER     TO CLIENT-POINTER149B.
                                                                                                                //COMMENT:     MOVE MV-YYMMDD             TO DATE-OF-LAST-UPDATE149B.
                                                                                                                //COMMENT:     MOVE ZERO                  TO PREVIOUS-SSN149B.
                                                                                                                //COMMENT:     MOVE MV-PHONETIC-DATA      TO PHONETIC-DATA149B.
            WS.MV_CLIENT_POINTER.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO MV-CLIENT-POINTER.
            WS.MV_CLIENT_ID_910.SetValue(WS.IMP_CLIENT_NUMBER);                                                 //COBOL==> MOVE IMP-CLIENT-NUMBER TO MV-CLIENT-ID-910.
            WS.MV_SYS_PART_CSE.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO MV-SYS-PART-CSE.
            WS.DCLKSD_CLIENT.ResetToInitialValue();                                                             //COBOL==> INITIALIZE DCLKSD-CLIENT.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_SEX.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-SEX ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_SEX.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-SEX ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_SEX.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-SEX ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER.
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER);                                          //COBOL==> MOVE IMP-CLIENT-NUMBER TO CLIENT-FK-CLB-CLIENT-NO.
            WS.CLIENT_PREVIOUS_SSN.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO CLIENT-PREVIOUS-SSN.
            WS.CLIENT_PHONETIC_DATA.SetValue(WS.MV_PHONETIC_DATA);                                              //COBOL==> MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA.
            Perform("8149B-ADD-CLIENT-DBF", "8149B-ADD-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM 8149B-ADD-CLIENT-DBF THRU 8149B-ADD-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  INSERT THE KSD SYSTEM PARTICIPATION DB2 ROW FOR CSS            *
                                                                                                                //COMMENT: *****************************************************************
            WS.MV_SYS_PART_CSE.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO MV-SYS-PART-CSE.
            WS.WS_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                                //COBOL==> MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER.
            Perform("7920-BUILD-SYS-PART-CSS", "7920-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT.
            Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT.
                                                                                                                  //COMMENT: *****************************************************************
                                                                                                                  //COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-BASIC-DBF.                  *
                                                                                                                  //COMMENT: *****************************************************************
                                                                                                                  //COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-NUMBER154.
                                                                                                                  //COMMENT:     MOVE IMP-NAME              TO CLIENT-INFO154.
                                                                                                                  //COMMENT:     MOVE IMP-DATE-OF-BIRTH-X8  TO DATE-OF-BIRTH154.
                                                                                                                  //COMMENT:     MOVE IMP-SOC-SEC-NUM       TO SSN154.
                                                                                                                  //COMMENT:     MOVE IMP-SEX               TO SEX154.
            WS.DCLKSD_CLIENT_BASIC.ResetToInitialValue();                                                       //COBOL==> INITIALIZE DCLKSD-CLIENT-BASIC.
            WS.CLIENTB_CLIENT_NUMBER.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                        //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENTB-CLIENT-NUMBER.
            WS.CLIENTB_CLIENT_SURNAME.SetValue(WS.IMP_LAST_NAME);                                               //COBOL==> MOVE IMP-LAST-NAME TO CLIENTB-CLIENT-SURNAME.
            WS.CLIENTB_CLIENT_GIVEN_NAME.SetValue(WS.IMP_FIRST_NAME);                                           //COBOL==> MOVE IMP-FIRST-NAME TO CLIENTB-CLIENT-GIVEN-NAME.
            WS.CLIENTB_CLIENT_INITIALS.SetValue(WS.IMP_INITIAL);                                                //COBOL==> MOVE IMP-INITIAL TO CLIENTB-CLIENT-INITIALS.
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 1:4 ) TO CLIENTB-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                            //COBOL==> MOVE '-' TO CLIENTB-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 5:2 ) TO CLIENTB-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                            //COBOL==> MOVE '-' TO CLIENTB-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 7:2 ) TO CLIENTB-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENTB_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                        //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENTB-SSN.
            WS.CLIENTB_GENDER.SetValue(WS.IMP_SEX);                                                             //COBOL==> MOVE IMP-SEX TO CLIENTB-GENDER.
            WS.CLIENTB_EMAIL_ADDRESS_LEN.SetValue(ZEROES);                                                      //COBOL==> MOVE ZEROES TO CLIENTB-EMAIL-ADDRESS-LEN CLIENTB-OCCUPATION-LEN.
            WS.CLIENTB_OCCUPATION_LEN.SetValue(ZEROES);
            ///COMMENT: WBR PERFORM 8154-ADD-CLIENT-BASIC-DBF
            ///COMMENT: WBR    THRU 8154-ADD-EXIT.
            if (returnLabel == "1000-ADD-PRIMARY-CLIENT") { return; }  //Check for pass through to next method
        #endregion 1000-ADD-PRIMARY-CLIENT

        #region 1000-EXIT
        L_1000_EXIT:;
            if (returnLabel == "1000-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: WBR END
        ///COMMENT: 2000-UPDT-PRIMARY-CLIENT.
        ///COMMENT: *****************************************************************
        ///COMMENT:                      SUMMARY OF PROCESSING                      *
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
        ///COMMENT:                                                                 *
        ///COMMENT:  CHECK FOR EXISTENT PARTICIPATION-DBF RECORD WITH               *
        ///COMMENT:        CLIENT RELATIONSHIP OF 'PI'                              *
        ///COMMENT:    AND PARTICIPATION START DATE LESS    THAN TODAY'S DATE       *
        ///COMMENT:    AND PARTICIPATION   END DATE GREATER THAN TODAY'S DATE.      *
        ///COMMENT:  IF MATCHING PARTICIPATION-DBF RECORD IS FOUND,                 *
        ///COMMENT:    THE CLIENT IS CURRENTLY ACTIVE ON AN AE CASE,                *
        ///COMMENT:      SO, THE REQUESTED UPDATE WILL NOT BE MADE.                 *
        ///COMMENT:                                                                 *
        ///COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
        ///COMMENT:      AGAINST THOSE OF CLIENT-BASIC-DBF RECORD.                  *
        ///COMMENT:  IF THE FIELDS MATCH, THE CLIENT-DBF RECORD IS NOT AN ALIAS,    *
        ///COMMENT:    IF CSE SYSTEM PARTICIPATION FIELD IS BLANK                   *
        ///COMMENT:      SET IT TO 'Y' AND UPDATE CLIENT-DBF RECORD                 *
        ///COMMENT:    ELSE                                                         *
        ///COMMENT:      EXIT ROUTINE                                               *
        ///COMMENT:  ELSE, THE CLIENT-DBF RECORD IS AN ALIAS,                       *
        ///COMMENT:    EXIT ROUTINE.                                                *
        ///COMMENT:                                                                 *
        ///COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
        ///COMMENT:    SSN                                                          *
        ///COMMENT:      MATCHING THE SSN IMPORTED.                                 *
        ///COMMENT:  IF EXISTENT CLIENT-DBF RECORD IS FOUND,                        *
        ///COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
        ///COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
        ///COMMENT:                                                                 *
        ///COMMENT:  CALCULATE PHONETIC VALUE OF                                    *
        ///COMMENT:    NAME.                                                        *
        ///COMMENT:                                                                 *
        ///COMMENT:  GET FIRST RECORD OF CLIENT-DBF TO OBTAIN NEXT CLIENT-NUMBER.   *
        ///COMMENT:  ADD 1 TO CLIENT-NUMBER IN FIRST CLIENT-DBF RECORD AND UPDATE.  *
        ///COMMENT:                                                                 *
        ///COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-DBF.                        *
        ///COMMENT:                                                                 *
        ///COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-BASIC-DBF.                  *
        ///COMMENT: *****************************************************************
        ///COMMENT:     IF IMP-SOC-SEC-NUM   NOT =  ZERO
        ///COMMENT:       IF IMP-SOC-SEC-NUM-3-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-2-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-4-VALID
        ///COMMENT:           NEXT SENTENCE
        ///COMMENT:       ELSE
        ///COMMENT:           MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:           MOVE ZERO  TO MV-ADA-FILE-NUMBER
        ///COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
        ///COMMENT:           MOVE 'SSN' TO MV-ADA-FILE-ACTION
        ///COMMENT:           MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:           GO TO 2000-EXIT
        ///COMMENT:       END-IF
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 7000-CHECK-AE-PARTICIPATION
        ///COMMENT:        THRU 7000-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 7100-CHECK-DUP-SSN
        ///COMMENT:        THRU 7100-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-NAME TO MV-RECORD-NAME.
        ///COMMENT:     PERFORM 9000-CALCULATE-PHONETIC-NAME
        ///COMMENT:        THRU 9000-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 8154-READISN-CLIENT-BASIC-DBF
        ///COMMENT:        THRU 8154-READISN-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF CLIENT-NUMBER154 NOT = IMP-CLIENT-NUMBER-X10
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 154   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ************** NE = ISN NOT EQUAL CLIENT NUMBER *****************
        ///COMMENT:         MOVE ' NE' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-INFO154 TO CUR-CLIENT-INFO.
        ///COMMENT:     MOVE SEX154         TO CUR-SEX.
        ///COMMENT:     MOVE SSN154         TO CUR-SOC-SEC-NUM.
        ///COMMENT:     IF IMP-CLIENT-INFO = CUR-CLIENT-INFO
        ///COMMENT:         PERFORM 8154-RELISN-CLIENT-BASIC-DBF
        ///COMMENT:            THRU 8154-RELISN-EXIT
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 2000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:         PERFORM 7300-MAKE-KNOWN-TO-CSE
        ///COMMENT:            THRU 7300-EXIT
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 2000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:         GO TO 2000-UPDT-PRIMARY-CLIENT-CONT
        ///COMMENT:     END-IF.
        ///COMMENT: ***************************************************************
        ///COMMENT:   CHECK TO SEE IF THERE IS ALREADY AN ALIAS RECORD FOR THE    *
        ///COMMENT:   NEW INPUT INFORMATION                                       *
        ///COMMENT: ***************************************************************
        ///COMMENT:     PERFORM 7500-CHECK-FOR-DUP-CLIENT-DBF
        ///COMMENT:        THRU 7500-EXIT.
        ///COMMENT:     PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:        THRU 8149C-RELISN-EXIT.
        ///COMMENT: ***************************************************************
        ///COMMENT:   IF AN EXISTING ALIAS RECORD WAS FOUND THEN GO TO 2000-EXIT  *
        ///COMMENT: ***************************************************************
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-CLIENT-INFO TO CLIENT-INFO154.
        ///COMMENT:     MOVE IMP-SEX         TO SEX154.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM TO SSN154.
        ///COMMENT:     PERFORM 8154-UPDT-CLIENT-BASIC-DBF
        ///COMMENT:        THRU 8154-UPDT-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO V-CLIENT-ID-KEY149C.
        ///COMMENT:     MOVE IMP-NAME              TO V-CLIENT-NAME149C.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM       TO V-SSN149C.
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-SEX TO V-DATE-OF-BIRTH-SEX149C.
        ///COMMENT:     MOVE SPACES                TO MV-CLIENT-ID-KEY.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF NOT EOF149C
        ///COMMENT:         MOVE CLIENT-POINTER149C        TO MV-CLIENT-ID-KEY
        ///COMMENT:         MOVE CLIENT-NAME149C           TO MV-CIK-CLIENT-NAME
        ///COMMENT:         MOVE SSN149C                   TO MV-CIK-SSN
        ///COMMENT:         MOVE DATE-OF-BIRTH-SEX149C     TO
        ///COMMENT:                                        MV-CIK-DATE-OF-BIRTH-SEX
        ///COMMENT:         IF MV-CLIENT-ID-KEY = V-CLIENT-ID-KEY149C
        ///COMMENT:             MOVE CLIENT-POINTER149C    TO MV-CLIENT-POINTER-X31
        ///COMMENT:             MOVE MV-CLIENT-POINTER-X21 TO
        ///COMMENT:                                        MV-CIK-CLIENT-POINTER-X21
        ///COMMENT:         ELSE
        ///COMMENT:             MOVE SPACES                TO MV-CLIENT-ID-KEY
        ///COMMENT:         END-IF
        ///COMMENT:         PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:            THRU 8149C-RELISN-EXIT
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 2000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO V-CLIENT-ID-KEY149C.
        ///COMMENT:     MOVE CUR-NAME              TO V-CLIENT-NAME149C.
        ///COMMENT:     MOVE CUR-SOC-SEC-NUM       TO V-SSN149C.
        ///COMMENT:     MOVE CUR-DATE-OF-BIRTH-SEX TO V-DATE-OF-BIRTH-SEX149C.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-POINTER149C TO MV-CLIENT-POINTER.
        ///COMMENT:     IF NOT EOF149C AND
        ///COMMENT:        MV-CLIENT-ID          = V-CLIENT-POINTER-1-10149C AND
        ///COMMENT:        CLIENT-NAME149C       = CUR-NAME                  AND
        ///COMMENT:        SSN149C               = CUR-SOC-SEC-NUM           AND
        ///COMMENT:        DATE-OF-BIRTH-SEX149C = CUR-DATE-OF-BIRTH-SEX
        ///COMMENT:         NEXT SENTENCE
        ///COMMENT:     ELSE
        ///COMMENT:         IF NOT EOF149C
        ///COMMENT:             PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:                THRU 8149C-RELISN-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ******* FILE = C * NF = NOT FOUND *******************************
        ///COMMENT:         MOVE 'CNF' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF MV-CLIENT-ID-KEY = SPACES
        ///COMMENT:         MOVE IMP-NAME              TO CLIENT-NAME149C
        ///COMMENT:         MOVE IMP-SOC-SEC-NUM       TO SSN149C
        ///COMMENT:         MOVE IMP-DATE-OF-BIRTH-SEX TO DATE-OF-BIRTH-SEX149C
        ///COMMENT:         IF CUR-SOC-SEC-NUM NOT = IMP-SOC-SEC-NUM
        ///COMMENT:             MOVE SPACE               TO MV-VERIFIED-SSN-FLAG
        ///COMMENT:             IF PREVIOUS-SSN149C NOT > ZERO
        ///COMMENT:                 MOVE CUR-SOC-SEC-NUM TO PREVIOUS-SSN149C
        ///COMMENT:             END-IF
        ///COMMENT:         END-IF
        ///COMMENT:         MOVE 'Y'               TO MV-SYS-PART-CSE
        ///COMMENT:         MOVE MV-CLIENT-POINTER TO CLIENT-POINTER149C
        ///COMMENT:         MOVE MV-PHONETIC-DATA  TO PHONETIC-DATA149C
        ///COMMENT:         MOVE MV-YYMMDD         TO DATE-OF-LAST-UPDATE149C
        ///COMMENT:         PERFORM 8149C-UPDT-CLIENT-DBF
        ///COMMENT:            THRU 8149C-UPDT-EXIT
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 2000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:         GO TO 2000-UPDT-PRIMARY-CLIENT-CONT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:        THRU 8149C-RELISN-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE MV-CLIENT-ID-KEY TO V-CLIENT-ID-KEY149C.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF NOT EOF149C AND
        ///COMMENT:        MV-CLIENT-ID          = V-CLIENT-POINTER-1-10149C AND
        ///COMMENT:        CLIENT-NAME149C       = V-CLIENT-NAME149C         AND
        ///COMMENT:        SSN149C               = V-SSN149C                 AND
        ///COMMENT:        DATE-OF-BIRTH-SEX149C = V-DATE-OF-BIRTH-SEX149C
        ///COMMENT: ****** CLIENT-NAME149C       = CUR-NAME                  AND
        ///COMMENT: ****** SSN149C               = CUR-SOC-SEC-NUM           AND
        ///COMMENT: ****** DATE-OF-BIRTH-SEX149C = CUR-DATE-OF-BIRTH-SEX
        ///COMMENT:         NEXT SENTENCE
        ///COMMENT:     ELSE
        ///COMMENT:         IF NOT EOF149C
        ///COMMENT:             PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:                THRU 8149C-RELISN-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ******* FILE = C * NF = NOT FOUND *******************************
        ///COMMENT:         MOVE 'CNF' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF MV-SYS-PART-AE-YES
        ///COMMENT:         MOVE 'Y' TO MV-CIK-SYS-PART-AE
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE 'Y'     TO MV-CIK-SYS-PART-CSE.
        ///COMMENT:     IF MV-SYS-PART-KANPAY-YES
        ///COMMENT:         MOVE 'Y' TO MV-CIK-SYS-PART-KANPAY
        ///COMMENT:     END-IF.
        ///COMMENT:     IF MV-SYS-PART-KSCARES-YES
        ///COMMENT:         MOVE 'Y' TO MV-CIK-SYS-PART-KSCARES
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE MV-CIK-CLIENT-POINTER-X21 TO MV-CLIENT-POINTER-FLAGS.
        ///COMMENT:     MOVE MV-CLIENT-POINTER         TO CLIENT-POINTER149C.
        ///COMMENT:     MOVE MV-YYMMDD                 TO DATE-OF-LAST-UPDATE149C.
        ///COMMENT:     PERFORM 8149C-UPDT-CLIENT-DBF
        ///COMMENT:        THRU 8149C-UPDT-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: 2000-UPDT-PRIMARY-CLIENT-CONT.
        ///COMMENT:     PERFORM 7200-UPDATE-AE-CASE-BASIC
        ///COMMENT:        THRU 7200-EXIT.
        ///COMMENT: 2000-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: WBR START
        #endregion 1000-EXIT

        #region 2000-UPDT-PRIMARY-CLIENT
        L_2000_UPDT_PRIMARY_CLIENT:;
            //COMMENT: *****************************************************************
            //COMMENT:                      SUMMARY OF PROCESSING                      *
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
            //COMMENT:                                                                 *
            //COMMENT:  CHECK FOR EXISTENT PARTICIPATION-DBF RECORD WITH               *
            //COMMENT:        CLIENT RELATIONSHIP OF 'PI'                              *
            //COMMENT:    AND PARTICIPATION START DATE LESS    THAN TODAY'S DATE       *
            //COMMENT:    AND PARTICIPATION   END DATE GREATER THAN TODAY'S DATE.      *
            //COMMENT:  IF MATCHING PARTICIPATION-DBF RECORD IS FOUND,                 *
            //COMMENT:    THE CLIENT IS CURRENTLY ACTIVE ON AN AE CASE,                *
            //COMMENT:      SO, THE REQUESTED UPDATE WILL NOT BE MADE.                 *
            //COMMENT:                                                                 *
            //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
            //COMMENT:      AGAINST THOSE OF KSD_CLIENT-BASIC RECORD.                  *
            //COMMENT:  IF THE FIELDS MATCH, THE KSD_CLIENT RECORD IS NOT AN ALIAS,    *
            //COMMENT:    IF CSE SYSTEM PARTICIPATION FIELD IS BLANK                   *
            //COMMENT:      SET IT TO 'Y' AND UPDATE/ADD KSD_SYSTEM_PART RECORD        *
            //COMMENT:    ELSE                                                         *
            //COMMENT:      EXIT ROUTINE                                               *
            //COMMENT:  ELSE, THE KSD_CLIENT RECORD IS AN ALIAS,                       *
            //COMMENT:    EXIT ROUTINE.                                                *
            //COMMENT:                                                                 *
            //COMMENT:  CHECK FOR EXISTENT KSD_CLIENT RECORD WITH                      *
            //COMMENT:    SSN                                                          *
            //COMMENT:      MATCHING THE SSN IMPORTED.                                 *
            //COMMENT:  IF EXISTENT KSD_CLIENT RECORD IS FOUND,                        *
            //COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
            //COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
            //COMMENT:                                                                 *
            //COMMENT:  CALCULATE PHONETIC VALUE OF                                    *
            //COMMENT:    NAME.                                                        *
            //COMMENT:                                                                 *
            //COMMENT:  GET FIRST RECORD OF KSD_NEXT_F TO OBTAIN NEXT CLIENT-NUMBER.   *
            //COMMENT:  GET FIRST RECORD OF KSD_NEXT_F TO OBTAIN NEXT CLIENT-NUMBER.   *
            //COMMENT:  ADD 1 TO CLIENT-NUMBER IN FIRST CLIENT-DBF RECORD AND UPDATE.  *
            //COMMENT:                                                                 *
            //COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-DBF.                        *
            //COMMENT:                                                                 *
            //COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-BASIC-DBF.                  *
            //COMMENT: *****************************************************************
            if (!(WS.IMP_SOC_SEC_NUM.IsEqualTo(0)))                                                             //COBOL==> IF IMP-SOC-SEC-NUM NOT = ZERO
            {
                if (((WS.IMP_SOC_SEC_NUM_3_VALID.Value)
             && (WS.IMP_SOC_SEC_NUM_2_VALID.Value))
             && (WS.IMP_SOC_SEC_NUM_4_VALID.Value))  //COBOL==> IF IMP-SOC-SEC-NUM-3-VALID AND IMP-SOC-SEC-NUM-2-VALID AND IMP-SOC-SEC-NUM-4-VALID
                {
                    goto EndOfSentence_3;                                                                               //COBOL==> NEXT SENTENCE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-FILE-NUMBER
                                                                                                                        //COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
                    WS.MV_ADA_FILE_ACTION.SetValue("SSN");                                                              //COBOL==> MOVE 'SSN' TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                    goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_3:;
            Perform("7000-CHECK-AE-PARTICIPATION", "7000-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM 7000-CHECK-AE-PARTICIPATION THRU 7000-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  RAJ 01/12/2016 PREFERRED ID CHANGE START                       *
                                                                                                                //COMMENT:  COMMENTED OUT BELOW LISTED CODE TO INCORPORATE PREFERRED ID    *
                                                                                                                //COMMENT:  CHANGES, DURING CLIENT UPDATE DUPLICATE SSN CHECK WILL NOT BE  *
                                                                                                                //COMMENT:  PERFORMED ANYMORE DUE TO KEES SYSTEM ALLOWS DUPLICATE SSNS.    *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     PERFORM 7100-CHECK-DUP-SSN
                                                                                                                //COMMENT:        THRU 7100-EXIT.
                                                                                                                //COMMENT:     IF NOT MV-ABEND-TYPE-NONE
                                                                                                                //COMMENT:         GO TO 2000-EXIT
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  RAJ 01/12/2016 PREFERRED ID CHANGE END                         *
                                                                                                                //COMMENT:  PERFORMED ANYMORE DUE KEES ALLOWS DUPLICATE SSNS IN KEES ABMS. *
                                                                                                                //COMMENT: *****************************************************************
            WS.MV_RECORD_NAME.SetValue(WS.IMP_NAME);                                                            //COBOL==> MOVE IMP-NAME TO MV-RECORD-NAME.
            Perform("9000-CALCULATE-PHONETIC-NAME", "9000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM 9000-CALCULATE-PHONETIC-NAME THRU 9000-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.CLIENTB_CLIENT_NUMBER.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                        //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENTB-CLIENT-NUMBER.
            Perform("8154-READISN-CLIENT-BASIC-DBF", "8154-READISN-EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM 8154-READISN-CLIENT-BASIC-DBF THRU 8154-READISN-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.CLIENTB_CLIENT_NUMBER.IsEqualTo(WS.IMP_CLIENT_NUMBER_X10)))                                //COBOL==> IF CLIENTB-CLIENT-NUMBER NOT = IMP-CLIENT-NUMBER-X10
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                                                                                                                    //COMMENT: ************** NE = ISN NOT EQUAL CLIENT NUMBER *****************
                WS.MV_ADA_FILE_ACTION.SetValue(" NE");                                                              //COBOL==> MOVE ' NE' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *CQ59900 START
            if (WS.CLIENTB_CIS_REPL_IND.IsEqualTo("P"))                                                         //COBOL==> IF CLIENTB-CIS-REPL-IND = 'P'
            {
                Perform("7100-CHECK-DUP-SSN", "7100-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 7100-CHECK-DUP-SSN THRU 7100-EXIT
                if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
                {
                    goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *CQ59900 END
                                                                                                                //COMMENT: WBR MOVE CLIENT-INFO154 TO CUR-CLIENT-INFO.
            WS.CUR_LAST_NAME.SetValue(WS.CLIENTB_CLIENT_SURNAME);                                               //COBOL==> MOVE CLIENTB-CLIENT-SURNAME TO CUR-LAST-NAME.
            WS.CUR_FIRST_NAME.SetValue(WS.CLIENTB_CLIENT_GIVEN_NAME);                                           //COBOL==> MOVE CLIENTB-CLIENT-GIVEN-NAME TO CUR-FIRST-NAME.
            WS.CUR_INITIAL.SetValue(WS.CLIENTB_CLIENT_INITIALS);                                                //COBOL==> MOVE CLIENTB-CLIENT-INITIALS TO CUR-INITIAL.
            WS.CUR_DATE_OF_BIRTH_X8.SetValueOfSubstring(1, 4, WS.CLIENTB_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH ( 1:4 ) TO CUR-DATE-OF-BIRTH-X8 ( 1:4 ) .
            WS.CUR_DATE_OF_BIRTH_X8.SetValueOfSubstring(5, 2, WS.CLIENTB_DATE_OF_BIRTH.GetSubstring(6, 2).AsString());  //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH ( 6:2 ) TO CUR-DATE-OF-BIRTH-X8 ( 5:2 ) .
            WS.CUR_DATE_OF_BIRTH_X8.SetValueOfSubstring(7, 2, WS.CLIENTB_DATE_OF_BIRTH.GetSubstring(9, 2).AsString());  //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH ( 9:2 ) TO CUR-DATE-OF-BIRTH-X8 ( 7:2 ) .
            WS.CUR_SEX.SetValue(WS.CLIENTB_GENDER);                                                             //COBOL==> MOVE CLIENTB-GENDER TO CUR-SEX.
            WS.CUR_SOC_SEC_NUM.SetValue(WS.CLIENTB_SSN);                                                        //COBOL==> MOVE CLIENTB-SSN TO CUR-SOC-SEC-NUM.
            if (WS.IMP_CLIENT_INFO.IsEqualTo(WS.CUR_CLIENT_INFO))                                               //COBOL==> IF IMP-CLIENT-INFO = CUR-CLIENT-INFO
            {
                Perform("7300-MAKE-KNOWN-TO-CSE", "7300-EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 7300-MAKE-KNOWN-TO-CSE THRU 7300-EXIT
                if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
                {
                    goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
                }                                                                                                   //COBOL==> END-IF
                goto L_2000_UPDT_PRIMARY_CLIENT_CONT;                                                               //COBOL==> GO TO 2000-UPDT-PRIMARY-CLIENT-CONT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ***************************************************************
                                                                                                                //COMMENT:   CHECK TO SEE IF THERE IS ALREADY AN ALIAS RECORD FOR THE    *
                                                                                                                //COMMENT:   NEW INPUT INFORMATION                                       *
                                                                                                                //COMMENT: ***************************************************************
            Perform("7500-CHECK-FOR-DUP-CLIENT-DBF", "7500-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM 7500-CHECK-FOR-DUP-CLIENT-DBF THRU 7500-EXIT.
                                                                                                                  //COMMENT: ***************************************************************
                                                                                                                  //COMMENT:   IF AN EXISTING ALIAS RECORD WAS FOUND THEN GO TO 2000-EXIT  *
                                                                                                                  //COMMENT: ***************************************************************
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: WBR MOVE IMP-CLIENT-INFO TO CLIENT-INFO154.
            WS.CLIENTB_CLIENT_SURNAME.SetValue(WS.IMP_LAST_NAME);                                               //COBOL==> MOVE IMP-LAST-NAME TO CLIENTB-CLIENT-SURNAME.
            WS.CLIENTB_CLIENT_GIVEN_NAME.SetValue(WS.IMP_FIRST_NAME);                                           //COBOL==> MOVE IMP-FIRST-NAME TO CLIENTB-CLIENT-GIVEN-NAME.
            WS.CLIENTB_CLIENT_INITIALS.SetValue(WS.IMP_INITIAL);                                                //COBOL==> MOVE IMP-INITIAL TO CLIENTB-CLIENT-INITIALS.
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 1:4 ) TO CLIENTB-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                            //COBOL==> MOVE '-' TO CLIENTB-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 5:2 ) TO CLIENTB-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                            //COBOL==> MOVE '-' TO CLIENTB-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 7:2 ) TO CLIENTB-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENTB_GENDER.SetValue(WS.IMP_SEX);                                                             //COBOL==> MOVE IMP-SEX TO CLIENTB-GENDER.
            WS.CLIENTB_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                        //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENTB-SSN.
            WS.CLIENTB_CLIENT_NUMBER.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                        //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENTB-CLIENT-NUMBER.
            Perform("8154-UPDT-CLIENT-BASIC-DBF", "8154-UPDT-EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM 8154-UPDT-CLIENT-BASIC-DBF THRU 8154-UPDT-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: 0801MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-FK-CLB-CLIENT-NO.
                                                                                                                //COMMENT: 0801MOVE IMP-NAME TO CLIENT-CLIENT-NAME.
                                                                                                                //COMMENT: 0801MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
                                                                                                                //COMMENT: 0801MOVE IMP-DATE-OF-BIRTH-SEX(1:4) TO CLIENT-DATE-OF-BIRTH(1:4).
                                                                                                                //COMMENT: 0801MOVE '-' TO CLIENT-DATE-OF-BIRTH(5:1).
                                                                                                                //COMMENT: 0801MOVE IMP-DATE-OF-BIRTH-SEX(5:2) TO CLIENT-DATE-OF-BIRTH(6:2).
                                                                                                                //COMMENT: 0801MOVE '-' TO CLIENT-DATE-OF-BIRTH(8:1).
                                                                                                                //COMMENT: 0801MOVE IMP-DATE-OF-BIRTH-SEX(7:2) TO CLIENT-DATE-OF-BIRTH(9:2).
            if ((WS.IMP_NAME.IsEqualTo(WS.CUR_NAME))
             && (WS.IMP_SOC_SEC_NUM.IsEqualTo(WS.CUR_SOC_SEC_NUM)))  //COBOL==> IF IMP-NAME = CUR-NAME AND IMP-SOC-SEC-NUM = CUR-SOC-SEC-NUM
            {
                WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                      //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-FK-CLB-CLIENT-NO
                WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME
                WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_SEX.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-SEX ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_SEX.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-SEX ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_SEX.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-SEX ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 )
                WS.CLIENT_PHONETIC_DATA.SetValue(WS.MV_PHONETIC_DATA);                                              //COBOL==> MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA
                Perform("8149C-UPDT-CLIENT-DBF", "8149C-UPDT-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM 8149C-UPDT-CLIENT-DBF THRU 8149C-UPDT-EXIT
                goto L_2000_CONT;                                                                                   //COBOL==> GO TO 2000-CONT
            }                                                                                                   //COBOL==> END-IF.
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                      //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-FK-CLB-CLIENT-NO.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                        //COBOL==> MOVE CUR-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.CUR_SOC_SEC_NUM);                                                         //COBOL==> MOVE CUR-SOC-SEC-NUM TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.CUR_DATE_OF_BIRTH_SEX.GetSubstring(1, 4).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-SEX ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.CUR_DATE_OF_BIRTH_SEX.GetSubstring(5, 2).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-SEX ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.CUR_DATE_OF_BIRTH_SEX.GetSubstring(7, 2).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-SEX ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
                                                                                                                        //COMMENT: WBR0731A
            WS.WS_CLIENT_EOF_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-EOF-NO TO TRUE.
            WS.MV_ABEND_TYPE_NONE.SetValue(true);                                                               //COBOL==> SET MV-ABEND-TYPE-NONE TO TRUE.
            Perform("8420-SELECT-CLIENT", "8420-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8420-SELECT-CLIENT THRU 8420-EXIT.
                                                                                                                  //COMMENT: 0801
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                DisplayToLog("2000-UPDT-PRIMARY-CLIENT");                                                           //COBOL==> DISPLAY "2000-UPDT-PRIMARY-CLIENT"
                                                                                                                    //COMMENT: START CODE ADDED BY RAJ ON 07/06/2017
                Perform("7900-BUILD-CLI-PTR-DATA", "7900-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7900-BUILD-CLI-PTR-DATA THRU 7900-EXIT
                                                                                                                      //COMMENT: END   CODE ADDED BY RAJ ON 07/06/2017
                WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                      //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-FK-CLB-CLIENT-NO
                WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME
                WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_SEX.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-SEX ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_SEX.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-SEX ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_SEX.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-SEX ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 )
                WS.CLIENT_PHONETIC_DATA.SetValue(WS.MV_PHONETIC_DATA);                                              //COBOL==> MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA
                Perform("8149C-ADD-CLIENT-DBF", "8149C-ADD-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM 8149C-ADD-CLIENT-DBF THRU 8149C-ADD-EXIT
                if (WS.MV_SYS_PART_AE_YES.Value)                                                                    //COBOL==> IF MV-SYS-PART-AE-YES
                {
                    WS.MV_CIK_SYS_PART_AE.SetValue("Y");                                                                //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-AE WS-CLIPTR-SYSPART-AE
                    WS.WS_CLIPTR_SYSPART_AE.SetValue("Y");
                    Perform("7930-BUILD-SYS-PART-KEES", "7930-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 7930-BUILD-SYS-PART-KEES THRU 7930-EXIT
                    Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                }                                                                                                   //COBOL==> END-IF
                WS.MV_CIK_SYS_PART_CSE.SetValue("Y");                                                               //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-CSE WS-CLIPTR-SYSPART-CS
                WS.WS_CLIPTR_SYSPART_CS.SetValue("Y");
                Perform("7920-BUILD-SYS-PART-CSS", "7920-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT
                Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                if (WS.MV_SYS_PART_KANPAY_YES.Value)                                                                //COBOL==> IF MV-SYS-PART-KANPAY-YES
                {
                    WS.MV_CIK_SYS_PART_KANPAY.SetValue("Y");                                                            //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-KANPAY WS-CLIPTR-SYSPART-KA
                    WS.WS_CLIPTR_SYSPART_KA.SetValue("Y");
                    Perform("7940-BUILD-SYS-PART-KANPAY", "7940-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM 7940-BUILD-SYS-PART-KANPAY THRU 7940-EXIT
                    Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                }                                                                                                   //COBOL==> END-IF
                if (WS.MV_SYS_PART_KSCARES_YES.Value)                                                               //COBOL==> IF MV-SYS-PART-KSCARES-YES
                {
                    WS.MV_CIK_SYS_PART_KSCARES.SetValue("Y");                                                           //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-KSCARES WS-CLIPTR-SYSPART-KS
                    WS.WS_CLIPTR_SYSPART_KS.SetValue("Y");
                    Perform("7950-BUILD-SYS-PART-KSCARE", "7950-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM 7950-BUILD-SYS-PART-KSCARE THRU 7950-EXIT
                    Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                }                                                                                                   //COBOL==> END-IF
                                                                                                                    //COMMENT:  BELOW LISTED CODE WAS ADDED BY RAJ ON 7/6/2017 TO BUILD AND
                                                                                                                    //COMMENT:  UPDATE SYSTEM PART RECORDS FOR FACTS & KMIS SYSTEMS.
                                                                                                                    //COMMENT:  7953-BUILD-SYS-PART-FACTS & 7956-BUILD-SYS-PART-KMIS.
                if (WS.MV_SYS_PART_FACTS_YES.Value)                                                                 //COBOL==> IF MV-SYS-PART-FACTS-YES
                {
                    WS.MV_CIK_SYS_PART_FACTS.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-FACTS WS-CLIPTR-SYSPART-FA
                    WS.WS_CLIPTR_SYSPART_FA.SetValue("Y");
                    Perform("7953-BUILD-SYS-PART-FACTS", "7953-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM 7953-BUILD-SYS-PART-FACTS THRU 7953-EXIT
                    Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                    DisplayToLog("EXECUTED FACTS SYSTEM PART");                                                         //COBOL==> DISPLAY "EXECUTED FACTS SYSTEM PART"
                }                                                                                                   //COBOL==> END-IF
                if (WS.MV_SYS_PART_KMIS_YES.Value)                                                                  //COBOL==> IF MV-SYS-PART-KMIS-YES
                {
                    WS.MV_CIK_SYS_PART_KMIS.SetValue("Y");                                                              //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-KMIS WS-CLIPTR-SYSPART-KM
                    WS.WS_CLIPTR_SYSPART_KM.SetValue("Y");
                    Perform("7956-BUILD-SYS-PART-KMIS", "7956-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 7956-BUILD-SYS-PART-KMIS THRU 7956-EXIT
                    Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                    DisplayToLog("EXECUTED KMIS  SYSTEM PART");                                                         //COBOL==> DISPLAY "EXECUTED KMIS  SYSTEM PART"
                }                                                                                                   //COBOL==> END-IF
                                                                                                                    //COMMENT:  END CODE BY RAJ ON 7/6/2017
                WS.MV_CLIENT_POINTER_FLAGS.SetValue(WS.MV_CIK_CLIENT_POINTER_X21);                                  //COBOL==> MOVE MV-CIK-CLIENT-POINTER-X21 TO MV-CLIENT-POINTER-FLAGS
                WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                     //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO SYSPART-FK-CLB-CLIENT-NO
                WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                //COBOL==> MOVE CUR-NAME TO SYSPART-FK-CLI-CLIENT-NAME
                WS.SYSPART_FK_CLI_SSN.SetValue(WS.CUR_SOC_SEC_NUM);                                                 //COBOL==> MOVE CUR-SOC-SEC-NUM TO SYSPART-FK-CLI-SSN
                Perform("8280-DELETE-SYS-PART", "8280-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8280-DELETE-SYS-PART THRU 8280-EXIT
                WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                      //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-FK-CLB-CLIENT-NO
                WS.CLIENT_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                        //COBOL==> MOVE CUR-NAME TO CLIENT-CLIENT-NAME
                WS.CLIENT_SSN.SetValue(WS.CUR_SOC_SEC_NUM);                                                         //COBOL==> MOVE CUR-SOC-SEC-NUM TO CLIENT-SSN
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.CUR_DATE_OF_BIRTH_SEX.GetSubstring(1, 4).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-SEX ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.CUR_DATE_OF_BIRTH_SEX.GetSubstring(5, 2).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-SEX ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.CUR_DATE_OF_BIRTH_SEX.GetSubstring(7, 2).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-SEX ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 )
                WS.CLIENT_GENDER.SetValue(WS.CUR_SEX);                                                              //COBOL==> MOVE CUR-SEX TO CLIENT-GENDER
                Perform("8149C-DEL-CLIENT-DBF", "8149C-DEL-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM 8149C-DEL-CLIENT-DBF THRU 8149C-DEL-EXIT
            }                                                                                                   //COBOL==> END-IF.
            goto L_2000_UPDT_PRIMARY_CLIENT_CONT;                                                               //COBOL==> GO TO 2000-UPDT-PRIMARY-CLIENT-CONT.
                                                                                                                //COMMENT: 0801
            WS.MV_CLIENT_ID_KEY.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO MV-CLIENT-ID-KEY.
            WS.CLIENT_PHONETIC_DATA.SetValue(WS.MV_PHONETIC_DATA);                                              //COBOL==> MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA.
                                                                                                                //COMMENT: WBR0731A
                                                                                                                //COMMENT: 0731PERFORM 8149C-UPDT-CLIENT-DBF THRU
                                                                                                                //COMMENT: 0731        8149C-UPDT-EXIT
                                                                                                                //COMMENT: WBR
                                                                                                                //COMMENT: WBR PERFORM 8149CF-READLOG-CLIENT-DBF
                                                                                                                //COMMENT: WBR    THRU 8149CF-READLOG-EXIT.
            WS.WS_CLIENT_EOF_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-EOF-NO TO TRUE.
            WS.MV_ABEND_TYPE_NONE.SetValue(true);                                                               //COBOL==> SET MV-ABEND-TYPE-NONE TO TRUE.
            Perform("8400-SELECT-CLIENT", "8400-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8400-SELECT-CLIENT THRU 8400-EXIT.
            goto L_2000_CONT;                                                                                   //COBOL==> GO TO 2000-CONT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WS_CLIENT_EOF_YES.Value))                                                                 //COBOL==> IF NOT WS-CLIENT-EOF-YES
            {
                //COMMENT: WBR     MOVE CLIENT-POINTER149C        TO MV-CLIENT-ID-KEY
                //COMMENT: NOTE:   OLD CLIENT POINTER REPLACEMENT
                Perform("7900-BUILD-CLI-PTR-DATA", "7900-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7900-BUILD-CLI-PTR-DATA THRU 7900-EXIT
                WS.MV_CIK_CLIENT_POINTER_X10.SetValue(WS.WS_CLIPTR_CLIENT_ID);                                      //COBOL==> MOVE WS-CLIPTR-CLIENT-ID TO MV-CIK-CLIENT-POINTER-X10
                WS.MV_CIK_VERIFIED_SSN_FLAG.SetValue(WS.WS_CLIPTR_VERIFIED_SSN_FLAG);                               //COBOL==> MOVE WS-CLIPTR-VERIFIED-SSN-FLAG TO MV-CIK-VERIFIED-SSN-FLAG
                WS.MV_CIK_SYSTEM_PARTICIPATION.SetValue(WS.WS_CLIPTR_SYSTEM_PARTICIPATION);                         //COBOL==> MOVE WS-CLIPTR-SYSTEM-PARTICIPATION TO MV-CIK-SYSTEM-PARTICIPATION
                WS.MV_CIK_SEX.SetValue(WS.CLIENT_GENDER);                                                           //COBOL==> MOVE CLIENT-GENDER TO MV-CIK-SEX
                WS.MV_CIK_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                              //COBOL==> MOVE CLIENT-CLIENT-NAME TO MV-CIK-CLIENT-NAME
                WS.MV_CIK_SSN.SetValue(WS.CLIENT_SSN);                                                              //COBOL==> MOVE CLIENT-SSN TO MV-CIK-SSN
                WS.MV_CIK_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.CLIENT_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE CLIENT-DATE-OF-BIRTH ( 1:4 ) TO MV-CIK-DATE-OF-BIRTH ( 1:4 )
                WS.MV_CIK_DATE_OF_BIRTH.SetValueOfSubstring(5, 2, WS.CLIENT_DATE_OF_BIRTH.GetSubstring(6, 2).AsString());  //COBOL==> MOVE CLIENT-DATE-OF-BIRTH ( 6:2 ) TO MV-CIK-DATE-OF-BIRTH ( 5:2 )
                WS.MV_CIK_DATE_OF_BIRTH.SetValueOfSubstring(7, 2, WS.CLIENT_DATE_OF_BIRTH.GetSubstring(9, 2).AsString());  //COBOL==> MOVE CLIENT-DATE-OF-BIRTH ( 9:2 ) TO MV-CIK-DATE-OF-BIRTH ( 7:2 )
                                                                                                                           //COMMENT: WBR     IF MV-CLIENT-ID-KEY = V-CLIENT-ID-KEY149C
                if (((((((WS.MV_CIK_CLIENT_POINTER_X10.IsEqualTo(WS.CLIENT_FK_CLB_CLIENT_NO))
             && (WS.MV_CIK_CLIENT_NAME.IsEqualTo(WS.CLIENT_CLIENT_NAME)))
             && (WS.MV_CIK_SSN.IsEqualTo(WS.CLIENT_SSN)))
             && (WS.MV_CIK_SEX.IsEqualTo(WS.CLIENT_GENDER)))
             && (WS.MV_CIK_DATE_OF_BIRTH.IsEqualTo(WS.CLIENT_WS_DATE_OF_BIRTH)))
             && (WS.MV_CIK_VERIFIED_SSN_FLAG.IsEqualTo(WS.WS_CLIPTR_VERIFIED_SSN_FLAG)))
             && (WS.MV_CIK_SYSTEM_PARTICIPATION.IsEqualTo(WS.WS_CLIPTR_SYSTEM_PARTICIPATION)))  //COBOL==> IF MV-CIK-CLIENT-POINTER-X10 = CLIENT-FK-CLB-CLIENT-NO AND MV-CIK-CLIENT-NAME = CLIENT-CLIENT-NAME AND MV-CIK-SSN = CLIENT-SSN AND MV-CIK-SEX = CLIENT-GENDER AND MV-CIK-DATE-OF-BIRTH = CLIENT-WS-DATE-OF-BIRTH AND MV-CIK-VERIFIED-SSN-FLAG = WS-CLIPTR-VERIFIED-SSN-FLAG AND MV-CIK-SYSTEM-PARTICIPATION = WS-CLIPTR-SYSTEM-PARTICIPATION
                {
                    WS.MV_CLIENT_POINTER_X31.SetValue(WS.WS_CLIENT_POINTER);                                            //COBOL==> MOVE WS-CLIENT-POINTER TO MV-CLIENT-POINTER-X31
                    WS.MV_CIK_CLIENT_POINTER_X21.SetValue(WS.MV_CLIENT_POINTER_X21);                                    //COBOL==> MOVE MV-CLIENT-POINTER-X21 TO MV-CIK-CLIENT-POINTER-X21
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_CLIENT_ID_KEY.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO MV-CLIENT-ID-KEY
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                      //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-FK-CLB-CLIENT-NO.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                        //COBOL==> MOVE CUR-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.CUR_SOC_SEC_NUM);                                                         //COBOL==> MOVE CUR-SOC-SEC-NUM TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.CUR_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.CUR_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.CUR_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENT_GENDER.SetValue(WS.CUR_SEX);                                                              //COBOL==> MOVE CUR-SEX TO CLIENT-GENDER.
                                                                                                                //COMMENT: WBR PERFORM 8149CF-READLOG-CLIENT-DBF
                                                                                                                //COMMENT: WBR    THRU 8149CF-READLOG-EXIT.
            WS.WS_CLIENT_EOF_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-EOF-NO TO TRUE.
            WS.MV_ABEND_TYPE_NONE.SetValue(true);                                                               //COBOL==> SET MV-ABEND-TYPE-NONE TO TRUE.
            Perform("8400-SELECT-CLIENT", "8400-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8400-SELECT-CLIENT THRU 8400-EXIT.
                                                                                                                  //COMMENT: WBR
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: WBR MOVE CLIENT-POINTER149C TO MV-CLIENT-POINTER.
            Perform("7900-BUILD-CLI-PTR-DATA", "7900-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7900-BUILD-CLI-PTR-DATA THRU 7900-EXIT.
            WS.MV_CLIENT_POINTER.SetValue(WS.WS_CLIENT_POINTER);                                                //COBOL==> MOVE WS-CLIENT-POINTER TO MV-CLIENT-POINTER.
            if ((((((((!(WS.WS_CLIENT_EOF_YES.Value))
             && (WS.MV_CLIENT_ID.IsEqualTo(WS.CLIENT_FK_CLB_CLIENT_NO)))
             && (WS.CLIENT_CLIENT_NAME.IsEqualTo(WS.CUR_NAME)))
             && (WS.CLIENT_SSN.IsEqualTo(WS.CUR_SOC_SEC_NUM)))
             && (WS.CLIENT_DATE_OF_BIRTH.GetSubstring(1, 4).IsEqualTo(WS.CUR_DATE_OF_BIRTH_SEX.GetSubstring(1, 4))))
             && (WS.CLIENT_DATE_OF_BIRTH.GetSubstring(6, 2).IsEqualTo(WS.CUR_DATE_OF_BIRTH_SEX.GetSubstring(5, 2))))
             && (WS.CLIENT_DATE_OF_BIRTH.GetSubstring(9, 2).IsEqualTo(WS.CUR_DATE_OF_BIRTH_SEX.GetSubstring(7, 2))))
             && (WS.CLIENT_GENDER.IsEqualTo(WS.CUR_SEX)))  //COBOL==> IF NOT WS-CLIENT-EOF-YES AND MV-CLIENT-ID = CLIENT-FK-CLB-CLIENT-NO AND CLIENT-CLIENT-NAME = CUR-NAME AND CLIENT-SSN = CUR-SOC-SEC-NUM AND CLIENT-DATE-OF-BIRTH ( 1:4 ) = CUR-DATE-OF-BIRTH-SEX ( 1:4 ) AND CLIENT-DATE-OF-BIRTH ( 6:2 ) = CUR-DATE-OF-BIRTH-SEX ( 5:2 ) AND CLIENT-DATE-OF-BIRTH ( 9:2 ) = CUR-DATE-OF-BIRTH-SEX ( 7:2 ) AND CLIENT-GENDER = CUR-SEX
            {
                goto EndOfSentence_4;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (!(WS.WS_CLIENT_EOF_YES.Value))                                                                 //COBOL==> IF NOT WS-CLIENT-EOF-YES
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                                                                                                                        //COMMENT: ******* FILE = C * NF = NOT FOUND *******************************
                    WS.MV_ADA_FILE_ACTION.SetValue("CNF");                                                              //COBOL==> MOVE 'CNF' TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                    goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_4:;
            if (WS.MV_CLIENT_ID_KEY.IsSpaces())                                                                 //COBOL==> IF MV-CLIENT-ID-KEY = SPACES
            {
                WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME
                WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 )
                WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER
                if (!(WS.CUR_SOC_SEC_NUM.IsEqualTo(WS.IMP_SOC_SEC_NUM)))                                            //COBOL==> IF CUR-SOC-SEC-NUM NOT = IMP-SOC-SEC-NUM
                {
                    WS.MV_VERIFIED_SSN_FLAG.SetValueWithSpaces();                                                       //COBOL==> MOVE SPACE TO MV-VERIFIED-SSN-FLAG WS-CLIPTR-VERIFIED-SSN-FLAG CLIENT-VERIFIED-SSN-FLAG
                    WS.WS_CLIPTR_VERIFIED_SSN_FLAG.SetValueWithSpaces();
                    WS.CLIENT_VERIFIED_SSN_FLAG.SetValueWithSpaces();
                    if (WS.CLIENT_PREVIOUS_SSN.IsLessThanOrEqualTo(ZEROS))                                              //COBOL==> IF CLIENT-PREVIOUS-SSN NOT > ZERO
                    {
                        WS.CLIENT_PREVIOUS_SSN.SetValue(WS.CUR_SOC_SEC_NUM);                                                //COBOL==> MOVE CUR-SOC-SEC-NUM TO CLIENT-PREVIOUS-SSN
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.MV_SYS_PART_CSE.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO MV-SYS-PART-CSE
                                                                                                                    //COMMENT: WBR     MOVE MV-CLIENT-POINTER TO CLIENT-POINTER149C
                                                                                                                    //COMMENT: *****************************************************************
                                                                                                                    //COMMENT:  INSERT THE KSD SYSTEM PARTICIPATION DB2 ROW FOR CSS            *
                                                                                                                    //COMMENT: *****************************************************************
                WS.WS_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                                //COBOL==> MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER
                Perform("7920-BUILD-SYS-PART-CSS", "7920-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT
                Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                                                                                                                      //COMMENT: *****************************************************************
                WS.CLIENT_PHONETIC_DATA.SetValue(WS.MV_PHONETIC_DATA);                                              //COBOL==> MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA
                Perform("8149C-UPDT-CLIENT-DBF", "8149C-UPDT-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM 8149C-UPDT-CLIENT-DBF THRU 8149C-UPDT-EXIT
                if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
                {
                    goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
                }                                                                                                   //COBOL==> END-IF
                goto L_2000_UPDT_PRIMARY_CLIENT_CONT;                                                               //COBOL==> GO TO 2000-UPDT-PRIMARY-CLIENT-CONT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: WBR MOVE MV-CLIENT-ID-KEY TO V-CLIENT-ID-KEY149C.
                                                                                                                //COMMENT:     MOVE MV-CIK-CLIENT-POINTER-X10 TO CLIENT-FK-CLB-CLIENT-NO.
                                                                                                                //COMMENT:     MOVE MV-CIK-CLIENT-NAME TO CLIENT-CLIENT-NAME.
                                                                                                                //COMMENT:     MOVE MV-CIK-SSN TO CLIENT-SSN.
                                                                                                                //COMMENT:     MOVE MV-CIK-SEX TO CLIENT-GENDER.
                                                                                                                //COMMENT:     MOVE MV-CIK-DATE-OF-BIRTH(1:4) TO CLIENT-DATE-OF-BIRTH(1:4).
                                                                                                                //COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(5:1).
                                                                                                                //COMMENT:     MOVE MV-CIK-DATE-OF-BIRTH(5:2) TO CLIENT-DATE-OF-BIRTH(6:2).
                                                                                                                //COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(8:1).
                                                                                                                //COMMENT:     MOVE MV-CIK-DATE-OF-BIRTH(7:2) TO CLIENT-DATE-OF-BIRTH(9:2).
                                                                                                                //COMMENT:     MOVE MV-CIK-VERIFIED-SSN-FLAG TO CLIENT-VERIFIED-SSN-FLAG.
                                                                                                                //COMMENT: WBR PERFORM 8149CF-READLOG-CLIENT-DBF
                                                                                                                //COMMENT: WBR    THRU 8149CF-READLOG-EXIT.
            WS.WS_CLIENT_EOF_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-EOF-NO TO TRUE.
            Perform("8400-SELECT-CLIENT", "8400-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8400-SELECT-CLIENT THRU 8400-EXIT.
                                                                                                                  //COMMENT: WBR
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: WBR THE FOLLOWING CODE HAS BEEN COMMENTED OUT - DON'T NEED IT
                                                                                                                //COMMENT:     IF NOT EOF149 AND
                                                                                                                //COMMENT:        MV-CLIENT-ID          = V-CLIENT-POINTER-1-10149C AND
                                                                                                                //COMMENT:        CLIENT-NAME149C       = V-CLIENT-NAME149C         AND
                                                                                                                //COMMENT:        SSN149C               = V-SSN149C                 AND
                                                                                                                //COMMENT:        DATE-OF-BIRTH-SEX149C = V-DATE-OF-BIRTH-SEX149C
                                                                                                                //COMMENT:         NEXT SENTENCE
                                                                                                                //COMMENT:     ELSE
                                                                                                                //COMMENT:         IF NOT EOF149C
                                                                                                                //COMMENT:             PERFORM 8149C-RELISN-CLIENT-DBF
                                                                                                                //COMMENT:                THRU 8149C-RELISN-EXIT
                                                                                                                //COMMENT:             CONINTUE
                                                                                                                //COMMENT:         END-IF
            if (WS.WS_CLIENT_EOF_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-EOF-YES
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                                                                                                                    //COMMENT: ******* FILE = C * NF = NOT FOUND *******************************
                WS.MV_ADA_FILE_ACTION.SetValue("CNF");                                                              //COBOL==> MOVE 'CNF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
                                                                                                                    //COMMENT: *****************************************************************
                                                                                                                    //COMMENT: NOTE: IF ROW WAS FOUND GOT GET SYSTEM PARTICIPATION DATA
            }                                                                                                   //COBOL==> ELSE
            else
            {
                Perform("7900-BUILD-CLI-PTR-DATA", "7900-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7900-BUILD-CLI-PTR-DATA THRU 7900-EXIT
                WS.MV_CLIENT_POINTER.SetValue(WS.WS_CLIENT_POINTER);                                                //COBOL==> MOVE WS-CLIENT-POINTER TO MV-CLIENT-POINTER
                                                                                                                    //COMMENT: *****************************************************************
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "2000-UPDT-PRIMARY-CLIENT") { return; }  //Check for pass through to next method
        #endregion 2000-UPDT-PRIMARY-CLIENT

        #region 2000-CONT
        L_2000_CONT:;
            if (WS.MV_SYS_PART_AE_YES.Value)                                                                    //COBOL==> IF MV-SYS-PART-AE-YES
            {
                WS.MV_CIK_SYS_PART_AE.SetValue("Y");                                                                //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-AE WS-CLIPTR-SYSPART-AE
                WS.WS_CLIPTR_SYSPART_AE.SetValue("Y");
                Perform("7930-BUILD-SYS-PART-KEES", "7930-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 7930-BUILD-SYS-PART-KEES THRU 7930-EXIT
                Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_CIK_SYS_PART_CSE.SetValue("Y");                                                               //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-CSE WS-CLIPTR-SYSPART-CS.
            WS.WS_CLIPTR_SYSPART_CS.SetValue("Y");
            Perform("7920-BUILD-SYS-PART-CSS", "7920-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT.
            Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT.
            if (WS.MV_SYS_PART_KANPAY_YES.Value)                                                                //COBOL==> IF MV-SYS-PART-KANPAY-YES
            {
                WS.MV_CIK_SYS_PART_KANPAY.SetValue("Y");                                                            //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-KANPAY WS-CLIPTR-SYSPART-KA
                WS.WS_CLIPTR_SYSPART_KA.SetValue("Y");
                Perform("7940-BUILD-SYS-PART-KANPAY", "7940-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM 7940-BUILD-SYS-PART-KANPAY THRU 7940-EXIT
                Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.MV_SYS_PART_KSCARES_YES.Value)                                                               //COBOL==> IF MV-SYS-PART-KSCARES-YES
            {
                WS.MV_CIK_SYS_PART_KSCARES.SetValue("Y");                                                           //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-KSCARES WS-CLIPTR-SYSPART-KS
                WS.WS_CLIPTR_SYSPART_KS.SetValue("Y");
                Perform("7950-BUILD-SYS-PART-KSCARE", "7950-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM 7950-BUILD-SYS-PART-KSCARE THRU 7950-EXIT
                Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:  BELOW LISTED CODE WAS ADDED BY RAJ ON 7/6/2017 TO BUILD AND
                                                                                                                //COMMENT:  UPDATE SYSTEM PART RECORDS FOR FACTS & KMIS SYSTEMS.
                                                                                                                //COMMENT:  7953-BUILD-SYS-PART-FACTS & 7956-BUILD-SYS-PART-KMIS.
            if (WS.MV_SYS_PART_FACTS_YES.Value)                                                                 //COBOL==> IF MV-SYS-PART-FACTS-YES
            {
                WS.MV_CIK_SYS_PART_FACTS.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-FACTS WS-CLIPTR-SYSPART-FA
                WS.WS_CLIPTR_SYSPART_FA.SetValue("Y");
                Perform("7953-BUILD-SYS-PART-FACTS", "7953-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM 7953-BUILD-SYS-PART-FACTS THRU 7953-EXIT
                Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                DisplayToLog("EXECUTED FACTS SYSTEM PART");                                                         //COBOL==> DISPLAY "EXECUTED FACTS SYSTEM PART"
            }                                                                                                   //COBOL==> END-IF.
            if (WS.MV_SYS_PART_KMIS_YES.Value)                                                                  //COBOL==> IF MV-SYS-PART-KMIS-YES
            {
                WS.MV_CIK_SYS_PART_KMIS.SetValue("Y");                                                              //COBOL==> MOVE 'Y' TO MV-CIK-SYS-PART-KMIS WS-CLIPTR-SYSPART-KM
                WS.WS_CLIPTR_SYSPART_KM.SetValue("Y");
                Perform("7956-BUILD-SYS-PART-KMIS", "7956-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 7956-BUILD-SYS-PART-KMIS THRU 7956-EXIT
                Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                DisplayToLog("EXECUTED KMIS  SYSTEM PART");                                                         //COBOL==> DISPLAY "EXECUTED KMIS  SYSTEM PART"
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:  END CODE BY RAJ ON 7/6/2017
            WS.MV_CLIENT_POINTER_FLAGS.SetValue(WS.MV_CIK_CLIENT_POINTER_X21);                                  //COBOL==> MOVE MV-CIK-CLIENT-POINTER-X21 TO MV-CLIENT-POINTER-FLAGS.
                                                                                                                //COMMENT: WBR MOVE MV-CLIENT-POINTER         TO CLIENT-POINTER149C.
                                                                                                                //COMMENT: NOTE: UPDATE TO THIS FIELD IS DONE IN THE FOLLOWING PARAGRAPH
                                                                                                                //COMMENT: WBR MOVE MV-YYMMDD TO DATE-OF-LAST-UPDATE149C.
            Perform("8149C-UPDT-CLIENT-DBF", "8149C-UPDT-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM 8149C-UPDT-CLIENT-DBF THRU 8149C-UPDT-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_2000_EXIT;                                                                                   //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "2000-CONT") { return; }  //Check for pass through to next method
        #endregion 2000-CONT

        #region 2000-UPDT-PRIMARY-CLIENT-CONT
        L_2000_UPDT_PRIMARY_CLIENT_CONT:;
            Perform("7200-UPDATE-AE-CASE-BASIC", "7200-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM 7200-UPDATE-AE-CASE-BASIC THRU 7200-EXIT.
            if (returnLabel == "2000-UPDT-PRIMARY-CLIENT-CONT") { return; }  //Check for pass through to next method
        #endregion 2000-UPDT-PRIMARY-CLIENT-CONT

        #region 2000-EXIT
        L_2000_EXIT:;
            if (returnLabel == "2000-EXIT") { return; }                                                         //COBOL==> EXIT.
        #endregion 2000-EXIT

        #region 3000-DELET-PRIMARY-CLIENT
        L_3000_DELET_PRIMARY_CLIENT:;
            if (returnLabel == "3000-DELET-PRIMARY-CLIENT") { return; }  //Check for pass through to next method
        #endregion 3000-DELET-PRIMARY-CLIENT

        #region 3000-EXIT
        L_3000_EXIT:;
            if (returnLabel == "3000-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: 4000-ADD-ALIAS-CLIENT.
        ///COMMENT:     IF IMP-SOC-SEC-NUM   NOT =  ZERO
        ///COMMENT:       IF IMP-SOC-SEC-NUM-3-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-2-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-4-VALID
        ///COMMENT:           NEXT SENTENCE
        ///COMMENT:       ELSE
        ///COMMENT:           MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:           MOVE ZERO  TO MV-ADA-FILE-NUMBER
        ///COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
        ///COMMENT:           MOVE 'SSN' TO MV-ADA-FILE-ACTION
        ///COMMENT:           MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:           GO TO 4000-EXIT
        ///COMMENT:       END-IF
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO V-CLIENT-POINTER-1-10149C.
        ///COMMENT:     MOVE IMP-NAME              TO V-CLIENT-NAME149C.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM       TO V-SSN149C.
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-SEX TO V-DATE-OF-BIRTH-SEX149C.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 4000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF EOF149C
        ///COMMENT:         NEXT SENTENCE
        ///COMMENT:     ELSE
        ///COMMENT:         MOVE CLIENT-POINTER149C    TO MV-CLIENT-POINTER
        ///COMMENT:         IF MV-CLIENT-ID          = V-CLIENT-POINTER-1-10149C AND
        ///COMMENT:            CLIENT-NAME149C       = V-CLIENT-NAME149C         AND
        ///COMMENT:            SSN149C               = V-SSN149C                 AND
        ///COMMENT:            DATE-OF-BIRTH-SEX149C = V-DATE-OF-BIRTH-SEX149C
        ///COMMENT:             MOVE 'Y'               TO MV-SYS-PART-CSE
        ///COMMENT:             MOVE MV-CLIENT-POINTER TO CLIENT-POINTER149C
        ///COMMENT:             PERFORM 8149C-UPDT-CLIENT-DBF
        ///COMMENT:                THRU 8149C-UPDT-EXIT
        ///COMMENT:             GO TO 4000-EXIT
        ///COMMENT:         ELSE
        ///COMMENT:             PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:                THRU 8149C-RELISN-EXIT
        ///COMMENT:             IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:                 GO TO 4000-EXIT
        ///COMMENT:             END-IF
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 7100-CHECK-DUP-SSN
        ///COMMENT:        THRU 7100-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 4000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-NAME TO MV-RECORD-NAME.
        ///COMMENT:     PERFORM 9000-CALCULATE-PHONETIC-NAME
        ///COMMENT:        THRU 9000-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 4000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-NAME              TO   CLIENT-NAME149B,
        ///COMMENT:                                   V-CLIENT-NAME149C.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM       TO   SSN149B,
        ///COMMENT:                                   V-SSN149C.
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-SEX TO   DATE-OF-BIRTH-SEX149B,
        ///COMMENT:                                   V-DATE-OF-BIRTH-SEX149C.
        ///COMMENT:     MOVE SPACES                TO MV-CLIENT-POINTER.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER     TO MV-CLIENT-ID-910.
        ///COMMENT:     MOVE 'Y'                   TO MV-SYS-PART-CSE.
        ///COMMENT:     MOVE MV-CLIENT-POINTER     TO CLIENT-POINTER149B.
        ///COMMENT:     MOVE MV-CLIENT-ID          TO V-CLIENT-POINTER-1-10149C.
        ///COMMENT:     MOVE MV-CLIENT-POINTER-FLAGS
        ///COMMENT:                                TO V-CLIENT-POINTER-11-31149C.
        ///COMMENT:     MOVE MV-YYMMDD             TO DATE-OF-LAST-UPDATE149B.
        ///COMMENT:     MOVE ZERO                  TO PREVIOUS-SSN149B.
        ///COMMENT:     MOVE MV-PHONETIC-DATA      TO PHONETIC-DATA149B.
        ///COMMENT:     PERFORM 8149B-ADD-CLIENT-DBF
        ///COMMENT:        THRU 8149B-ADD-EXIT.
        ///COMMENT:     IF MV-ABEND-TYPE-NONE
        ///COMMENT:         MOVE V-CLIENT-ID-KEY149C
        ///COMMENT:                                TO IMP-CLIENT-KEY
        ///COMMENT:     END-IF.
        ///COMMENT: 4000-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: WBR START
        ///COMMENT: *****************************************************************
        ///COMMENT:  ADD ALIAS CLIENT ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 3000-EXIT

        #region 4000-ADD-ALIAS-CLIENT
        L_4000_ADD_ALIAS_CLIENT:;
            if (!(WS.IMP_SOC_SEC_NUM.IsEqualTo(0)))                                                             //COBOL==> IF IMP-SOC-SEC-NUM NOT = ZERO
            {
                if (((WS.IMP_SOC_SEC_NUM_3_VALID.Value)
             && (WS.IMP_SOC_SEC_NUM_2_VALID.Value))
             && (WS.IMP_SOC_SEC_NUM_4_VALID.Value))  //COBOL==> IF IMP-SOC-SEC-NUM-3-VALID AND IMP-SOC-SEC-NUM-2-VALID AND IMP-SOC-SEC-NUM-4-VALID
                {
                    goto EndOfSentence_5;                                                                               //COBOL==> NEXT SENTENCE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-FILE-NUMBER
                                                                                                                        //COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
                    WS.MV_ADA_FILE_ACTION.SetValue("SSN");                                                              //COBOL==> MOVE 'SSN' TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                    goto L_4000_EXIT;                                                                                   //COBOL==> GO TO 4000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_5:;
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                      //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-FK-CLB-CLIENT-NO.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER.
                                                                                                                //COMMENT: WBR PERFORM 8149CF-READLOG-CLIENT-DBF
                                                                                                                //COMMENT: WBR    THRU 8149CF-READLOG-EXIT.
            Perform("8400-SELECT-CLIENT", "8400-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8400-SELECT-CLIENT THRU 8400-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_4000_EXIT;                                                                                   //COBOL==> GO TO 4000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_CLIENT_EOF_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-EOF-YES
            {
                goto EndOfSentence_6;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.MV_SYS_PART_CSE.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO MV-SYS-PART-CSE
                WS.WS_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                                //COBOL==> MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER
                Perform("7920-BUILD-SYS-PART-CSS", "7920-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT
                Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                Perform("8149C-UPDT-CLIENT-DBF", "8149C-UPDT-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM 8149C-UPDT-CLIENT-DBF THRU 8149C-UPDT-EXIT
                goto L_4000_EXIT;                                                                                   //COBOL==> GO TO 4000-EXIT
                                                                                                                    //COMMENT: *****************************************************************
                                                                                                                    //COMMENT: NOTE    ELSE
                                                                                                                    //COMMENT: NOTE        PERFORM 8149C-RELISN-CLIENT-DBF
                                                                                                                    //COMMENT: NOTE           THRU 8149C-RELISN-EXIT
                                                                                                                    //COMMENT: NOTE
                                                                                                                    //COMMENT: NOTE        IF NOT MV-ABEND-TYPE-NONE
                                                                                                                    //COMMENT: NOTE            GO TO 4000-EXIT
                                                                                                                    //COMMENT: NOTE        END-IF
                                                                                                                    //COMMENT: NOTE    END-IF
                                                                                                                    //COMMENT: *****************************************************************
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_6:;
            //COMMENT: *****************************************************************
            //COMMENT:  RAJ 02/08/2016 PREFERRED ID CHANGE START                       *
            //COMMENT:  COMMENTED OUT BELOW LISTED CODE TO INCORPORATE PREFERRED ID    *
            //COMMENT:  CHANGES, DURING ALIAS CLIENT ADD DUPLICATE SSN CHECK WILL NOT  *
            //COMMENT:  BE PERFORMED ANYMORE DUE TO KEES SYSTEM ALLOWS DUPLICATE SSNS. *
            //COMMENT:                                                                 *
            //COMMENT: *****************************************************************
            //COMMENT:     PERFORM 7100-CHECK-DUP-SSN
            //COMMENT:        THRU 7100-EXIT.
            //COMMENT:     IF NOT MV-ABEND-TYPE-NONE
            //COMMENT:         GO TO 4000-EXIT
            //COMMENT:     END-IF.
            //COMMENT: *****************************************************************
            //COMMENT:  RAJ 02/08/2016 PREFERRED ID CHANGE END                         *
            //COMMENT:  PERFORMED ANYMORE DUE KEES ALLOWS DUPLICATE SSNS IN KEES ABMS. *
            //COMMENT: *****************************************************************
            WS.MV_RECORD_NAME.SetValue(WS.IMP_NAME);                                                            //COBOL==> MOVE IMP-NAME TO MV-RECORD-NAME.
            Perform("9000-CALCULATE-PHONETIC-NAME", "9000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM 9000-CALCULATE-PHONETIC-NAME THRU 9000-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_4000_EXIT;                                                                                   //COBOL==> GO TO 4000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.DCLKSD_CLIENT.ResetToInitialValue();                                                             //COBOL==> INITIALIZE DCLKSD-CLIENT.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER.
            WS.MV_CLIENT_POINTER.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO MV-CLIENT-POINTER.
            WS.MV_CLIENT_ID_910.SetValue(WS.IMP_CLIENT_NUMBER);                                                 //COBOL==> MOVE IMP-CLIENT-NUMBER TO MV-CLIENT-ID-910.
            WS.MV_SYS_PART_CSE.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO MV-SYS-PART-CSE.
            WS.WS_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                                //COBOL==> MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER.
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.MV_CLIENT_ID);                                               //COBOL==> MOVE MV-CLIENT-ID TO CLIENT-FK-CLB-CLIENT-NO.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  THE FOLLOWING STATEMENT IS COMMENTED OUT BECAUSE DON'T NEED IT
                                                                                                                //COMMENT:  THE POINTER FLAGS HAVE BEEN MOVE A SEPERATE DB2 TABLE
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     MOVE MV-CLIENT-POINTER-FLAGS
                                                                                                                //COMMENT:                                TO V-CLIENT-POINTER-11-31149C.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  THE FOLLOWING STATEMENT IS COMMENTED OUT BECAUSE IT BEEN ADDED
                                                                                                                //COMMENT:  TO THE DB2 INSERT
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     MOVE MV-YYMMDD             TO DATE-OF-LAST-UPDATE149B.
                                                                                                                //COMMENT: *****************************************************************
            WS.CLIENT_PREVIOUS_SSN.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO CLIENT-PREVIOUS-SSN.
            WS.CLIENT_PHONETIC_DATA.SetValue(WS.MV_PHONETIC_DATA);                                              //COBOL==> MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA.
            Perform("8149B-ADD-CLIENT-DBF", "8149B-ADD-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM 8149B-ADD-CLIENT-DBF THRU 8149B-ADD-EXIT.
            if (WS.MV_ABEND_TYPE_NONE.Value)                                                                    //COBOL==> IF MV-ABEND-TYPE-NONE
            {
                WS.IMP_CLIKEY_CLIENT_NUMBER.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                   //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO IMP-CLIKEY-CLIENT-NUMBER
                WS.IMP_CLIKEY_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                          //COBOL==> MOVE CLIENT-CLIENT-NAME TO IMP-CLIKEY-CLIENT-NAME
                WS.IMP_CLIKEY_SSN.SetValue(WS.CLIENT_SSN);                                                          //COBOL==> MOVE CLIENT-SSN TO IMP-CLIKEY-SSN
                WS.IMP_CLIKEY_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.CLIENT_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE CLIENT-DATE-OF-BIRTH ( 1:4 ) TO IMP-CLIKEY-DATE-OF-BIRTH ( 1:4 )
                WS.IMP_CLIKEY_DATE_OF_BIRTH.SetValueOfSubstring(5, 2, WS.CLIENT_DATE_OF_BIRTH.GetSubstring(6, 2).AsString());  //COBOL==> MOVE CLIENT-DATE-OF-BIRTH ( 6:2 ) TO IMP-CLIKEY-DATE-OF-BIRTH ( 5:2 )
                WS.IMP_CLIKEY_DATE_OF_BIRTH.SetValueOfSubstring(7, 2, WS.CLIENT_DATE_OF_BIRTH.GetSubstring(9, 2).AsString());  //COBOL==> MOVE CLIENT-DATE-OF-BIRTH ( 9:2 ) TO IMP-CLIKEY-DATE-OF-BIRTH ( 7:2 )
                WS.IMP_CLIKEY_SEX.SetValue(WS.CLIENT_GENDER);                                                       //COBOL==> MOVE CLIENT-GENDER TO IMP-CLIKEY-SEX
                WS.IMP_CLIKEY_VERIFIED_SSN_FLAG.SetValue(WS.CLIENT_VERIFIED_SSN_FLAG);                              //COBOL==> MOVE CLIENT-VERIFIED-SSN-FLAG TO IMP-CLIKEY-VERIFIED-SSN-FLAG
                WS.IMP_CLIKEY_SYS_PART.SetValue(WS.WS_CLIPTR_SYSTEM_PARTICIPATION);                                 //COBOL==> MOVE WS-CLIPTR-SYSTEM-PARTICIPATION TO IMP-CLIKEY-SYS-PART
                Perform("7920-BUILD-SYS-PART-CSS", "7920-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT
                Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "4000-ADD-ALIAS-CLIENT") { return; }  //Check for pass through to next method
        #endregion 4000-ADD-ALIAS-CLIENT

        #region 4000-EXIT
        L_4000_EXIT:;
            if (returnLabel == "4000-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: WBR END
        ///COMMENT: 5000-UPDT-ALIAS-CLIENT.
        ///COMMENT:     IF IMP-CLIENT-KEY = SPACES
        ///COMMENT:         PERFORM 5500-UPDT-ALIAS-CSE-FLAG
        ///COMMENT:            THRU 5500-EXIT
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF IMP-SOC-SEC-NUM   NOT =  ZERO
        ///COMMENT:       IF IMP-SOC-SEC-NUM-3-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-2-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-4-VALID
        ///COMMENT:           NEXT SENTENCE
        ///COMMENT:       ELSE
        ///COMMENT:           MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:           MOVE ZERO  TO MV-ADA-FILE-NUMBER
        ///COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
        ///COMMENT:           MOVE 'SSN' TO MV-ADA-FILE-ACTION
        ///COMMENT:           MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:           GO TO 5000-EXIT
        ///COMMENT:       END-IF
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-CLIENT-KEY        TO MV-CLIENT-ID-KEY.
        ///COMMENT:     IF IMP-SOC-SEC-NUM   NOT = MV-CIK-SSN
        ///COMMENT:         PERFORM 7100-CHECK-DUP-SSN
        ///COMMENT:            THRU 7100-EXIT
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 5000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT: **  IF IMP-NAME          NOT = MV-CIK-CLIENT-NAME
        ///COMMENT:         MOVE IMP-NAME          TO MV-RECORD-NAME.
        ///COMMENT:         PERFORM 9000-CALCULATE-PHONETIC-NAME
        ///COMMENT:            THRU 9000-EXIT.
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 5000-EXIT
        ///COMMENT:         END-IF.
        ///COMMENT: **  END-IF.
        ///COMMENT:     MOVE MV-CIK-CLIENT-POINTER-X10
        ///COMMENT:                                TO VALUE-BUF149C.
        ///COMMENT:     MOVE ZERO                  TO V-SSN149C.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT: 5000-UPDT-ALIAS-CLIENT-LOOP.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-POINTER149C    TO MV-CLIENT-POINTER.
        ///COMMENT:     IF EOF149C
        ///COMMENT:         GO TO 5000-UPDT-ALIAS-CLIENT-CONT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF MV-CLIENT-ID      NOT = V-CLIENT-POINTER-1-10149C
        ///COMMENT:         PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:            THRU 8149C-RELISN-EXIT
        ///COMMENT:         GO TO 5000-UPDT-ALIAS-CLIENT-CONT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF CLIENT-NAME149C       = IMP-NAME              AND
        ///COMMENT:        SSN149C               = IMP-SOC-SEC-NUM       AND
        ///COMMENT:        DATE-OF-BIRTH-SEX149C = IMP-DATE-OF-BIRTH-SEX
        ///COMMENT:         PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:            THRU 8149C-RELISN-EXIT
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ******* FILE = C * AE = ALREADY EXISTS **************************
        ///COMMENT:         MOVE 'CAE' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 8149CN-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CN-READLOG-EXIT.
        ///COMMENT:     GO TO 5000-UPDT-ALIAS-CLIENT-LOOP.
        ///COMMENT: 5000-UPDT-ALIAS-CLIENT-CONT.
        ///COMMENT:     MOVE IMP-CLIENT-KEY        TO V-CLIENT-ID-KEY149C.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-POINTER149C    TO MV-CLIENT-POINTER-X31.
        ///COMMENT:     MOVE MV-CLIENT-POINTER-X10 TO MV-CIK-CLIENT-POINTER-X10.
        ///COMMENT:     MOVE MV-CLIENT-POINTER-X21 TO MV-CIK-CLIENT-POINTER-X21.
        ///COMMENT:     MOVE CLIENT-NAME149C       TO MV-CIK-CLIENT-NAME.
        ///COMMENT:     MOVE SSN149C               TO MV-CIK-SSN.
        ///COMMENT:     MOVE DATE-OF-BIRTH-SEX149C TO MV-CIK-DATE-OF-BIRTH-SEX.
        ///COMMENT:     IF MV-CLIENT-ID-KEY  NOT = IMP-CLIENT-KEY
        ///COMMENT:         IF NOT EOF149C
        ///COMMENT:             PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:                THRU 8149C-RELISN-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ******* FILE = C * NF = NOT FOUND *******************************
        ///COMMENT:         MOVE 'CNF' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-NAME              TO CLIENT-NAME149C.
        ///COMMENT:     IF IMP-SOC-SEC-NUM   NOT = SSN149C
        ///COMMENT:         MOVE SSN149C           TO PREVIOUS-SSN149C
        ///COMMENT:         MOVE 'N'               TO MV-CIK-VERIFIED-SSN-FLAG
        ///COMMENT:         MOVE MV-CIK-CLIENT-POINTER-X21
        ///COMMENT:                                TO MV-CLIENT-POINTER-X21
        ///COMMENT:         MOVE MV-CLIENT-POINTER-X31
        ///COMMENT:                                TO CLIENT-POINTER149C
        ///COMMENT:         MOVE IMP-SOC-SEC-NUM   TO SSN149C
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-SEX TO DATE-OF-BIRTH-SEX149C.
        ///COMMENT:     MOVE MV-YYMMDD             TO DATE-OF-LAST-UPDATE149C.
        ///COMMENT:     MOVE MV-PHONETIC-DATA      TO PHONETIC-DATA149C.
        ///COMMENT:     PERFORM 8149C-UPDT-CLIENT-DBF
        ///COMMENT:        THRU 8149C-UPDT-EXIT.
        ///COMMENT: 5000-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: WBR START
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE ALIAS CLIENT ROUTINE
        ///COMMENT: *****************************************************************
        ///COMMENT: 5000-UPDT-ALIAS-CLIENT.
        ///COMMENT:     MOVE UNIQUE-KEY-0001 TO WS-UPD-UNIQUE-KEY.
        ///COMMENT:     IF WS-UUK-CLIENT-NUMBER = NUMBER-0001 AND
        ///COMMENT:        WS-UUK-CLI-LAST-NAME = LAST-NAME-0001 AND
        ///COMMENT:        WS-UUK-CLI-FIRST-NAME = FIRST-NAME-0001 AND
        ///COMMENT:        WS-UUK-CLI-INITIAL = MIDDLE-INITIAL-0001 AND
        ///COMMENT:        WS-UUK-SSN = SSN-0001 AND
        ///COMMENT:        WS-UUK-DOB = DOB-0001 AND
        ///COMMENT:        WS-UUK-SEX = SEX-0001
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ******* FILE = C * AE = ALREADY EXISTS **************************
        ///COMMENT:         MOVE 'CAE' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF IMP-CLIENT-KEY = SPACES
        ///COMMENT:         PERFORM 5500-UPDT-ALIAS-CSE-FLAG
        ///COMMENT:            THRU 5500-EXIT
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF IMP-SOC-SEC-NUM   NOT =  ZERO
        ///COMMENT:       IF IMP-SOC-SEC-NUM-3-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-2-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-4-VALID
        ///COMMENT:           NEXT SENTENCE
        ///COMMENT:       ELSE
        ///COMMENT:           MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:           MOVE ZERO  TO MV-ADA-FILE-NUMBER
        ///COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
        ///COMMENT:           MOVE 'SSN' TO MV-ADA-FILE-ACTION
        ///COMMENT:           MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:           GO TO 5000-EXIT
        ///COMMENT:       END-IF
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-CLIENT-KEY        TO MV-CLIENT-ID-KEY.
        ///COMMENT:     IF IMP-SOC-SEC-NUM   NOT = MV-CIK-SSN
        ///COMMENT:         PERFORM 7100-CHECK-DUP-SSN
        ///COMMENT:            THRU 7100-EXIT
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 5000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT: **  IF IMP-NAME          NOT = MV-CIK-CLIENT-NAME
        ///COMMENT:         MOVE IMP-NAME          TO MV-RECORD-NAME.
        ///COMMENT:         PERFORM 9000-CALCULATE-PHONETIC-NAME
        ///COMMENT:            THRU 9000-EXIT.
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 5000-EXIT
        ///COMMENT:         END-IF.
        ///COMMENT: **  END-IF.
        ///COMMENT:     MOVE MV-CIK-CLIENT-POINTER-X10 TO CLIENT-FK-CLB-CLIENT-NO.
        ///COMMENT:     MOVE ZERO TO CLIENT-SSN.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     MOVE IMP-CLIENT-KEY        TO MV-CLIENT-ID-KEY.
        ///COMMENT:     IF IMP-SOC-SEC-NUM   NOT = MV-CIK-SSN
        ///COMMENT:         PERFORM 7100-CHECK-DUP-SSN
        ///COMMENT:            THRU 7100-EXIT
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 5000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-NAME          TO MV-RECORD-NAME.
        ///COMMENT:     PERFORM 9000-CALCULATE-PHONETIC-NAME THRU
        ///COMMENT:             9000-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  MOVE EXISTING KEYS FIELDS TO DO SELECT TO OBTAIN THE
        ///COMMENT:  ORIGINAL CREATION ID AND TIMESTAMP
        ///COMMENT:  IN THE NEW WORLD - THE EXISTING DATA HAS TO BE DELETED AND
        ///COMMENT:  UPDATE INFORMATION HAS TO BE INSERTED
        ///COMMENT:  THIS FLAW WAS DETECTED BY WAYNE B. RICHARD WHILE TESTING
        ///COMMENT: ****************************************************************
        ///COMMENT:     MOVE WS-UUK-CLIENT-NUMBER TO CLIENT-FK-CLB-CLIENT-NO.
        ///COMMENT:     MOVE WS-UUK-SSN TO CLIENT-SSN.
        ///COMMENT:     MOVE WS-UUK-DOB(1:4) TO CLIENT-DATE-OF-BIRTH(1:4).
        ///COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(5:1).
        ///COMMENT:     MOVE WS-UUK-DOB(5:2) TO CLIENT-DATE-OF-BIRTH(6:2).
        ///COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(8:1).
        ///COMMENT:     MOVE WS-UUK-DOB(7:2) TO CLIENT-DATE-OF-BIRTH(9:2).
        ///COMMENT:     MOVE WS-UUK-SEX TO CLIENT-GENDER.
        ///COMMENT:     MOVE WS-UUK-CLIENT-NAME TO CLIENT-CLIENT-NAME.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5000-GO-DO-IT
        ///COMMENT:     ELSE
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE ALIAS CLIENT LOOP ROUTINE
        ///COMMENT: *****************************************************************
        ///COMMENT: 5000-UPDT-ALIAS-CLIENT-LOOP.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING STATEMENT HAS BEEN COMMENTED OUT AND REPLACED
        ///COMMENT:  WITH ROUTINE TO ACCESS THE SYSTEM PARTICIPATION DB2 TABLE.
        ///COMMENT: *****************************************************************
        ///COMMENT: WBR MOVE CLIENT-POINTER149C    TO MV-CLIENT-POINTER.
        ///COMMENT: *****************************************************************
        ///COMMENT:     IF WS-CLIENT-EOF-YES
        ///COMMENT:         GO TO 5000-UPDT-ALIAS-CLIENT-CONT
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING CODE HAS BEEN ADDED TO BUILD CLIENT POINTER DATA
        ///COMMENT: *****************************************************************
        ///COMMENT:     PERFORM 7900-BUILD-CLI-PTR-DATA THRU
        ///COMMENT:             7900-EXIT.
        ///COMMENT:     MOVE WS-CLIENT-POINTER TO MV-CLIENT-POINTER.
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE CLIENT-DATE-OF-BIRTH(1:4) TO
        ///COMMENT:          CLIENT-WS-DATE-OF-BIRTH(1:4).
        ///COMMENT:     MOVE CLIENT-DATE-OF-BIRTH(6:2) TO
        ///COMMENT:          CLIENT-WS-DATE-OF-BIRTH(5:2).
        ///COMMENT:     MOVE CLIENT-DATE-OF-BIRTH(9:2) TO
        ///COMMENT:          CLIENT-WS-DATE-OF-BIRTH(7:2).
        ///COMMENT:     IF MV-CLIENT-ID NOT = CLIENT-FK-CLB-CLIENT-NO
        ///COMMENT:         GO TO 5000-UPDT-ALIAS-CLIENT-CONT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF CLIENT-CLIENT-NAME = IMP-NAME AND
        ///COMMENT:        CLIENT-SSN = IMP-SOC-SEC-NUM AND
        ///COMMENT:        CLIENT-WS-DATE-OF-BIRTH = IMP-DATE-OF-BIRTH-X8 AND
        ///COMMENT:        CLIENT-GENDER = IMP-SEX
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ******* FILE = C * AE = ALREADY EXISTS **************************
        ///COMMENT:         MOVE 'CAE' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 8149CN-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CN-READLOG-EXIT.
        ///COMMENT:     GO TO 5000-UPDT-ALIAS-CLIENT-LOOP.
        ///COMMENT: 5000-UPDT-ALIAS-CLIENT-CONT.
        ///COMMENT: WBR MOVE IMP-CLIENT-KEY        TO V-CLIENT-ID-KEY149C.
        ///COMMENT:     MOVE IMP-CLIKEY-CLIENT-NUMBER TO
        ///COMMENT:          CLIENT-FK-CLB-CLIENT-NO.
        ///COMMENT:     MOVE IMP-CLIKEY-CLIENT-NAME TO
        ///COMMENT:          CLIENT-CLIENT-NAME.
        ///COMMENT:     MOVE IMP-CLIKEY-SSN TO
        ///COMMENT:          CLIENT-SSN.
        ///COMMENT:     MOVE IMP-CLIKEY-DATE-OF-BIRTH TO
        ///COMMENT:          CLIENT-DATE-OF-BIRTH
        ///COMMENT:     MOVE IMP-CLIKEY-SEX TO
        ///COMMENT:          CLIENT-GENDER.
        ///COMMENT:     MOVE IMP-CLIKEY-VERIFIED-SSN-FLAG TO
        ///COMMENT:          CLIENT-VERIFIED-SSN-FLAG.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING STATEMENT HAS BEEN COMMENTED OUT AND REPLACED
        ///COMMENT:  WITH ROUTINE TO ACCESS THE SYSTEM PARTICIPATION DB2 TABLE.
        ///COMMENT: *****************************************************************
        ///COMMENT: WBR MOVE CLIENT-POINTER149C    TO MV-CLIENT-POINTER-X31.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING CODE HAS BEEN ADDED TO BUILD CLIENT POINTER DATA
        ///COMMENT: *****************************************************************
        ///COMMENT:     PERFORM 7900-BUILD-CLI-PTR-DATA THRU
        ///COMMENT:             7900-EXIT.
        ///COMMENT:     MOVE WS-CLIENT-POINTER TO MV-CLIENT-POINTER.
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE MV-CLIENT-POINTER-X10 TO MV-CIK-CLIENT-POINTER-X10.
        ///COMMENT:     MOVE MV-CLIENT-POINTER-X21 TO MV-CIK-CLIENT-POINTER-X21.
        ///COMMENT:     MOVE CLIENT-CLIENT-NAME TO MV-CIK-CLIENT-NAME.
        ///COMMENT:     MOVE CLIENT-SSN TO MV-CIK-SSN.
        ///COMMENT:     MOVE CLIENT-DATE-OF-BIRTH(1:4) TO MV-CIK-DATE-OF-BIRTH(1:4).
        ///COMMENT:     MOVE CLIENT-DATE-OF-BIRTH(6:2) TO MV-CIK-DATE-OF-BIRTH(5:2).
        ///COMMENT:     MOVE CLIENT-DATE-OF-BIRTH(9:2) TO MV-CIK-DATE-OF-BIRTH(7:2).
        ///COMMENT:     MOVE CLIENT-GENDER TO MV-CIK-SEX.
        ///COMMENT:     IF MV-CLIENT-ID-KEY  NOT = IMP-CLIENT-KEY
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ******* FILE = C * NF = NOT FOUND *******************************
        ///COMMENT:         MOVE 'CNF' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-NAME TO CLIENT-CLIENT-NAME.
        ///COMMENT:     IF IMP-SOC-SEC-NUM NOT = CLIENT-SSN
        ///COMMENT:         MOVE CLIENT-SSN TO CLIENT-PREVIOUS-SSN
        ///COMMENT:         MOVE 'N' TO MV-CIK-VERIFIED-SSN-FLAG
        ///COMMENT:                     CLIENT-VERIFIED-SSN-FLAG
        ///COMMENT:         MOVE MV-CIK-CLIENT-POINTER-X21
        ///COMMENT:                                TO MV-CLIENT-POINTER-X21
        ///COMMENT:         MOVE MV-CLIENT-POINTER-X31 TO WS-CLIENT-POINTER
        ///COMMENT:         MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-X8(1:4) TO CLIENT-DATE-OF-BIRTH(1:4).
        ///COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(5:1).
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-X8(5:2) TO CLIENT-DATE-OF-BIRTH(6:2).
        ///COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(8:1).
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-X8(7:2) TO CLIENT-DATE-OF-BIRTH(9:2).
        ///COMMENT:     MOVE IMP-SEX TO CLIENT-GENDER.
        ///COMMENT: WBR MOVE MV-YYMMDD             TO DATE-OF-LAST-UPDATE149C.
        ///COMMENT:     MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA.
        ///COMMENT: WBR START
        ///COMMENT:     PERFORM 8149C-UPDT-CLIENT-DBF
        ///COMMENT:        THRU 8149C-UPDT-EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE EXISTING SYSTEM PARTICIPATION AND CLIENT DB2 DATA HAS TO
        ///COMMENT:  BE DELETED AND THE CHANGED DATA HAS TO BE INSERTED INTO THE
        ///COMMENT:  CORRECT TABLES
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE WS-UPD-UNIQUE-KEY     TO MV-CLIENT-ID-KEY.
        ///COMMENT:     MOVE MV-CIK-SYSTEM-PARTICIPATION
        ///COMMENT:                                TO MV-SYSTEM-PARTICIPATION.
        ///COMMENT:     MOVE WS-UUK-CLIENT-NUMBER TO
        ///COMMENT:          CLIENT-FK-CLB-CLIENT-NO.
        ///COMMENT:     MOVE WS-UUK-CLIENT-NAME TO
        ///COMMENT:          CLIENT-CLIENT-NAME.
        ///COMMENT:     MOVE WS-UUK-SSN TO
        ///COMMENT:          CLIENT-SSN.
        ///COMMENT:     MOVE WS-UUK-DOB(1:4) TO
        ///COMMENT:          CLIENT-DATE-OF-BIRTH(1:4).
        ///COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(5:1).
        ///COMMENT:     MOVE WS-UUK-DOB(5:2) TO
        ///COMMENT:          CLIENT-DATE-OF-BIRTH(6:2).
        ///COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(8:1).
        ///COMMENT:     MOVE WS-UUK-DOB(7:2) TO
        ///COMMENT:          CLIENT-DATE-OF-BIRTH(9:2).
        ///COMMENT:     MOVE WS-UUK-SEX TO
        ///COMMENT:          CLIENT-GENDER.
        ///COMMENT:     MOVE WS-UUK-VERIFY-FLAG TO
        ///COMMENT:          CLIENT-VERIFIED-SSN-FLAG.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: 5000-GO-DO-IT.
        ///COMMENT:     MOVE CLIENT-FK-CLB-CLIENT-NO TO SYSPART-FK-CLB-CLIENT-NO.
        ///COMMENT:     MOVE CLIENT-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME.
        ///COMMENT:     MOVE CLIENT-SSN TO SYSPART-FK-CLI-SSN.
        ///COMMENT:     MOVE WS-SYS-CD-CS TO SYSPART-SYSTEM-CODE.
        ///COMMENT:     PERFORM 8260-SELECT-SYS-PART THRU
        ///COMMENT:             8260-EXIT.
        ///COMMENT:     MOVE WS-UUK-CLIENT-NUMBER TO
        ///COMMENT:          SYSPART-FK-CLB-CLIENT-NO
        ///COMMENT:          CLIENT-FK-CLB-CLIENT-NO.
        ///COMMENT:     MOVE WS-UUK-CLIENT-NAME TO
        ///COMMENT:          SYSPART-FK-CLI-CLIENT-NAME
        ///COMMENT:          CLIENT-CLIENT-NAME.
        ///COMMENT:     MOVE WS-UUK-SSN TO
        ///COMMENT:          SYSPART-FK-CLI-SSN
        ///COMMENT:          CLIENT-SSN.
        ///COMMENT:     MOVE WS-UUK-DOB(1:4) TO
        ///COMMENT:          CLIENT-DATE-OF-BIRTH(1:4).
        ///COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(5:1).
        ///COMMENT:     MOVE WS-UUK-DOB(5:2) TO
        ///COMMENT:          CLIENT-DATE-OF-BIRTH(6:2).
        ///COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(8:1).
        ///COMMENT:     MOVE WS-UUK-DOB(7:2) TO
        ///COMMENT:          CLIENT-DATE-OF-BIRTH(9:2).
        ///COMMENT:     MOVE WS-UUK-SEX TO
        ///COMMENT:          CLIENT-GENDER.
        ///COMMENT:     MOVE WS-UUK-VERIFY-FLAG TO
        ///COMMENT:          CLIENT-VERIFIED-SSN-FLAG.
        ///COMMENT:     MOVE WS-SYS-CD-CS TO SYSPART-SYSTEM-CODE.
        ///COMMENT:     PERFORM 8250-DELETE-SYS-PART THRU
        ///COMMENT:             8250-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 8149C-DEL-CLIENT-DBF
        ///COMMENT:        THRU 8149C-DEL-EXIT.
        ///COMMENT:     MOVE IMP-NAME TO MV-RECORD-NAME.
        ///COMMENT:     PERFORM 9000-CALCULATE-PHONETIC-NAME
        ///COMMENT:        THRU 9000-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-NAME TO CLIENT-CLIENT-NAME
        ///COMMENT:                      SYSPART-FK-CLI-CLIENT-NAME.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN
        ///COMMENT:                             SYSPART-FK-CLI-SSN.
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-X8(1:4) TO CLIENT-DATE-OF-BIRTH(1:4).
        ///COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(5:1).
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-X8(5:2) TO CLIENT-DATE-OF-BIRTH(6:2).
        ///COMMENT:     MOVE '-' TO CLIENT-DATE-OF-BIRTH(8:1).
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-X8(7:2) TO CLIENT-DATE-OF-BIRTH(9:2).
        ///COMMENT:     MOVE IMP-SEX TO CLIENT-GENDER.
        ///COMMENT:     MOVE SPACES TO MV-CLIENT-POINTER.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER TO MV-CLIENT-ID-910.
        ///COMMENT:     MOVE 'Y' TO MV-SYS-PART-CSE.
        ///COMMENT:     MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER.
        ///COMMENT:     MOVE MV-CLIENT-ID TO CLIENT-FK-CLB-CLIENT-NO
        ///COMMENT:                          SYSPART-FK-CLB-CLIENT-NO.
        ///COMMENT: NOTE MIGHT HAVE TO CHANGE IF SSN IS UPDATED ON ALIAS
        ///COMMENT:     MOVE ZERO TO CLIENT-PREVIOUS-SSN.
        ///COMMENT:     MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA.
        ///COMMENT:     PERFORM 8149B-ADD-CLIENT-DBF
        ///COMMENT:        THRU 8149B-ADD-EXIT.
        ///COMMENT:     IF MV-ABEND-TYPE-NONE
        ///COMMENT:         MOVE CLIENT-FK-CLB-CLIENT-NO TO
        ///COMMENT:              IMP-CLIKEY-CLIENT-NUMBER
        ///COMMENT:         MOVE CLIENT-CLIENT-NAME TO
        ///COMMENT:              IMP-CLIKEY-CLIENT-NAME
        ///COMMENT:         MOVE CLIENT-SSN TO
        ///COMMENT:              IMP-CLIKEY-SSN
        ///COMMENT:         MOVE CLIENT-DATE-OF-BIRTH(1:4) TO
        ///COMMENT:              IMP-CLIKEY-DATE-OF-BIRTH(1:4)
        ///COMMENT:         MOVE CLIENT-DATE-OF-BIRTH(6:2) TO
        ///COMMENT:              IMP-CLIKEY-DATE-OF-BIRTH(5:2)
        ///COMMENT:         MOVE CLIENT-DATE-OF-BIRTH(9:2) TO
        ///COMMENT:              IMP-CLIKEY-DATE-OF-BIRTH(7:2)
        ///COMMENT:         MOVE CLIENT-GENDER TO
        ///COMMENT:              IMP-CLIKEY-SEX
        ///COMMENT:         MOVE CLIENT-VERIFIED-SSN-FLAG TO
        ///COMMENT:              IMP-CLIKEY-VERIFIED-SSN-FLAG
        ///COMMENT:         MOVE WS-CLIPTR-SYSTEM-PARTICIPATION TO
        ///COMMENT:              IMP-CLIKEY-SYS-PART
        ///COMMENT:         MOVE WS-YES-Y TO SYSPART-PARTICIPATION-FLAG
        ///COMMENT:         PERFORM 8270-INSERT-SYS-PART THRU
        ///COMMENT:                 8270-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: 5000-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: WBR END
        ///COMMENT: 5500-UPDT-ALIAS-CSE-FLAG.
        ///COMMENT:     MOVE SPACE                 TO MV-CLIENT-FOUND-IND.
        ///COMMENT:     MOVE IMP-NAME              TO V-CLIENT-NAME149D.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM       TO V-SSN149D.
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-SEX TO V-DATE-OF-BIRTH-SEX149D.
        ///COMMENT:     PERFORM 8149DF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149DF-READLOG-EXIT.
        ///COMMENT: 5500-UPDT-ALIAS-CSE-FLAG-CONT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5500-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF EOF149D
        ///COMMENT:         GO TO 5500-UPDT-ALIAS-CSE-FLAG-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF CLIENT-NAME149D       = V-CLIENT-NAME149D       AND
        ///COMMENT:        SSN149D               = V-SSN149D               AND
        ///COMMENT:        DATE-OF-BIRTH-SEX149D = V-DATE-OF-BIRTH-SEX149D
        ///COMMENT:         CONTINUE
        ///COMMENT:     ELSE
        ///COMMENT:         GO TO 5500-UPDT-ALIAS-CSE-FLAG-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-POINTER149D TO MV-CLIENT-POINTER.
        ///COMMENT:     MOVE 'Y'                TO MV-SYS-PART-CSE.
        ///COMMENT:     MOVE MV-CLIENT-POINTER  TO CLIENT-POINTER149D.
        ///COMMENT:     PERFORM 8149D-UPDT-CLIENT-DBF
        ///COMMENT:        THRU 8149D-UPDT-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 5500-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE 'Y'                TO MV-CLIENT-FOUND-IND.
        ///COMMENT:     PERFORM 8149DN-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149DN-READLOG-EXIT.
        ///COMMENT:     GO TO 5500-UPDT-ALIAS-CSE-FLAG-CONT.
        ///COMMENT: 5500-UPDT-ALIAS-CSE-FLAG-EXIT.
        ///COMMENT:     IF MV-CLIENT-FOUND
        ///COMMENT:         GO TO 5500-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 4000-ADD-ALIAS-CLIENT
        ///COMMENT:        THRU 4000-EXIT.
        ///COMMENT: 5500-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE ALIAS CSS FLAG FOR THE SYSTEM PARTICIPATION
        ///COMMENT: *****************************************************************
        #endregion 4000-EXIT

        #region 5500-UPDT-ALIAS-CSE-FLAG
        L_5500_UPDT_ALIAS_CSE_FLAG:;
            WS.MV_CLIENT_FOUND_IND.SetValueWithSpaces();                                                        //COBOL==> MOVE SPACE TO MV-CLIENT-FOUND-IND.
            WS.WS_CLIENT_EOF_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-EOF-NO TO TRUE
            WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER.
            Perform("8149DF-READLOG-CLIENT-DBF", "8149DF-READLOG-EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM 8149DF-READLOG-CLIENT-DBF THRU 8149DF-READLOG-EXIT.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                Perform("8149DO-OPEN-CLIENT-DBF", "8149DO-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 8149DO-OPEN-CLIENT-DBF THRU 8149DO-EXIT
                if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
                {
                    Perform("8149DN-READLOG-CLIENT-DBF", "8149DN-READLOG-EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM 8149DN-READLOG-CLIENT-DBF THRU 8149DN-READLOG-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "5500-UPDT-ALIAS-CSE-FLAG") { return; }  //Check for pass through to next method
        #endregion 5500-UPDT-ALIAS-CSE-FLAG

        #region 5500-UPDT-ALIAS-CSE-FLAG-CONT
        L_5500_UPDT_ALIAS_CSE_FLAG_CONT:;
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_5500_EXIT;                                                                                   //COBOL==> GO TO 5500-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_CLIENT_EOF_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-EOF-YES
            {
                Perform("8149DC-CLOSE-CLIENT-DBF", "8149DC-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM 8149DC-CLOSE-CLIENT-DBF THRU 8149DC-EXIT
                goto L_5500_UPDT_ALIAS_CSE_FLAG_EXIT;                                                               //COBOL==> GO TO 5500-UPDT-ALIAS-CSE-FLAG-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  THE FOLLOWING CODE HAS BEEN COMMENTED OUT BECAUSE IT IS NOT
                                                                                                                //COMMENT:  NEEDED
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     IF CLIENT-NAME149D       = V-CLIENT-NAME149D       AND
                                                                                                                //COMMENT:        SSN149D               = V-SSN149D               AND
                                                                                                                //COMMENT:        DATE-OF-BIRTH-SEX149D = V-DATE-OF-BIRTH-SEX149D
                                                                                                                //COMMENT:         CONTINUE
                                                                                                                //COMMENT:     ELSE
                                                                                                                //COMMENT:         GO TO 5500-UPDT-ALIAS-CSE-FLAG-EXIT
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: NOTE:   OLD CLIENT POINTER REPLACEMENT
                                                                                                                //COMMENT: *****************************************************************
            Perform("7900-BUILD-CLI-PTR-DATA", "7900-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7900-BUILD-CLI-PTR-DATA THRU 7900-EXIT.
            WS.MV_CLIENT_POINTER.SetValue(WS.WS_CLIENT_POINTER);                                                //COBOL==> MOVE WS-CLIENT-POINTER TO MV-CLIENT-POINTER.
            WS.MV_SYS_PART_CSE.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO MV-SYS-PART-CSE.
            WS.WS_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                                //COBOL==> MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  INSERT THE KSD SYSTEM PARTICIPATION DB2 ROW FOR CSS            *
                                                                                                                //COMMENT: *****************************************************************
            Perform("7920-BUILD-SYS-PART-CSS", "7920-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT.
            Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT.
            Perform("8149D-UPDT-CLIENT-DBF", "8149D-UPDT-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM 8149D-UPDT-CLIENT-DBF THRU 8149D-UPDT-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_5500_EXIT;                                                                                   //COBOL==> GO TO 5500-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_CLIENT_FOUND_IND.SetValue("Y");                                                               //COBOL==> MOVE 'Y' TO MV-CLIENT-FOUND-IND.
            Perform("8149DN-READLOG-CLIENT-DBF", "8149DN-READLOG-EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM 8149DN-READLOG-CLIENT-DBF THRU 8149DN-READLOG-EXIT.
            goto L_5500_UPDT_ALIAS_CSE_FLAG_CONT;                                                               //COBOL==> GO TO 5500-UPDT-ALIAS-CSE-FLAG-CONT.
        #endregion 5500-UPDT-ALIAS-CSE-FLAG-CONT

        #region 5500-UPDT-ALIAS-CSE-FLAG-EXIT
        L_5500_UPDT_ALIAS_CSE_FLAG_EXIT:;
            if (WS.MV_CLIENT_FOUND.Value)                                                                       //COBOL==> IF MV-CLIENT-FOUND
            {
                goto L_5500_EXIT;                                                                                   //COBOL==> GO TO 5500-EXIT
            }                                                                                                   //COBOL==> END-IF.
            Perform("4000-ADD-ALIAS-CLIENT", "4000-EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM 4000-ADD-ALIAS-CLIENT THRU 4000-EXIT.
            if (returnLabel == "5500-UPDT-ALIAS-CSE-FLAG-EXIT") { return; }  //Check for pass through to next method
        #endregion 5500-UPDT-ALIAS-CSE-FLAG-EXIT

        #region 5500-EXIT
        L_5500_EXIT:;
            if (returnLabel == "5500-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: 6000-DELET-ALIAS-CLIENT.
        ///COMMENT:     MOVE IMP-CLIENT-KEY        TO MV-CLIENT-ID-KEY.
        ///COMMENT:     MOVE MV-CIK-SYSTEM-PARTICIPATION
        ///COMMENT:                                TO MV-SYSTEM-PARTICIPATION.
        ///COMMENT:     IF MV-SYS-PART-AE-YES
        ///COMMENT:     OR MV-SYS-PART-KANPAY-YES
        ///COMMENT:     OR MV-SYS-PART-KSCARES-YES
        ///COMMENT:     OR MV-SYS-PART-FACTS-YES
        ///COMMENT:         GO TO 6000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF NOT MV-SYS-PART-CSE-YES
        ///COMMENT:         GO TO 6000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-CLIENT-KEY        TO V-CLIENT-ID-KEY149C.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 6000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-POINTER149C    TO MV-CLIENT-POINTER-X31.
        ///COMMENT:     MOVE MV-CLIENT-POINTER-X10 TO MV-CIK-CLIENT-POINTER-X10.
        ///COMMENT:     MOVE MV-CLIENT-POINTER-X21 TO MV-CIK-CLIENT-POINTER-X21.
        ///COMMENT:     MOVE CLIENT-NAME149C       TO MV-CIK-CLIENT-NAME.
        ///COMMENT:     MOVE SSN149C               TO MV-CIK-SSN.
        ///COMMENT:     MOVE DATE-OF-BIRTH-SEX149C TO MV-CIK-DATE-OF-BIRTH-SEX.
        ///COMMENT:     IF MV-CLIENT-ID-KEY NOT = IMP-CLIENT-KEY
        ///COMMENT:         IF NOT EOF149C
        ///COMMENT:             PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:                THRU 8149C-RELISN-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ******* FILE = C * NF = NOT FOUND *******************************
        ///COMMENT:         MOVE 'CNF' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 6000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 8149C-DEL-CLIENT-DBF
        ///COMMENT:        THRU 8149C-DEL-EXIT.
        ///COMMENT: 6000-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DELETE ALIAS CLIENT ROUINE
        ///COMMENT: *****************************************************************
        #endregion 5500-EXIT

        #region 6000-DELET-ALIAS-CLIENT
        L_6000_DELET_ALIAS_CLIENT:;
            WS.MV_CLIENT_ID_KEY.SetValue(WS.IMP_CLIENT_KEY);                                                    //COBOL==> MOVE IMP-CLIENT-KEY TO MV-CLIENT-ID-KEY.
            WS.MV_SYSTEM_PARTICIPATION.SetValue(WS.MV_CIK_SYSTEM_PARTICIPATION);                                //COBOL==> MOVE MV-CIK-SYSTEM-PARTICIPATION TO MV-SYSTEM-PARTICIPATION.
            if (((((WS.MV_SYS_PART_AE_YES.Value)
             || (WS.MV_SYS_PART_KANPAY_YES.Value))
             || (WS.MV_SYS_PART_KSCARES_YES.Value))
             || (WS.MV_SYS_PART_FACTS_YES.Value))
             || (WS.MV_SYS_PART_KMIS_YES.Value))  //COBOL==> IF MV-SYS-PART-AE-YES OR MV-SYS-PART-KANPAY-YES OR MV-SYS-PART-KSCARES-YES OR MV-SYS-PART-FACTS-YES OR MV-SYS-PART-KMIS-YES
            {
                goto L_6000_EXIT;                                                                                   //COBOL==> GO TO 6000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.MV_SYS_PART_CSE_YES.Value))                                                               //COBOL==> IF NOT MV-SYS-PART-CSE-YES
            {
                goto L_6000_EXIT;                                                                                   //COBOL==> GO TO 6000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: WBR MOVE IMP-CLIENT-KEY        TO V-CLIENT-ID-KEY149C.
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIKEY_CLIENT_NUMBER);                                   //COBOL==> MOVE IMP-CLIKEY-CLIENT-NUMBER TO CLIENT-FK-CLB-CLIENT-NO.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_CLIKEY_CLIENT_NAME);                                          //COBOL==> MOVE IMP-CLIKEY-CLIENT-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.IMP_CLIKEY_SSN);                                                          //COBOL==> MOVE IMP-CLIKEY-SSN TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_CLIKEY_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-CLIKEY-DATE-OF-BIRTH ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_CLIKEY_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-CLIKEY-DATE-OF-BIRTH ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_CLIKEY_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-CLIKEY-DATE-OF-BIRTH ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENT_GENDER.SetValue(WS.IMP_CLIKEY_SEX);                                                       //COBOL==> MOVE IMP-CLIKEY-SEX TO CLIENT-GENDER.
            WS.CLIENT_VERIFIED_SSN_FLAG.SetValue(WS.IMP_CLIKEY_VERIFIED_SSN_FLAG);                              //COBOL==> MOVE IMP-CLIKEY-VERIFIED-SSN-FLAG TO CLIENT-VERIFIED-SSN-FLAG.
                                                                                                                //COMMENT: WBR30
                                                                                                                //COMMENT: WBR PERFORM 8149CF-READLOG-CLIENT-DBF
                                                                                                                //COMMENT: WBR    THRU 8149CF-READLOG-EXIT.
            WS.WS_CLIENT_EOF_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-EOF-NO TO TRUE.
            WS.MV_ABEND_TYPE_NONE.SetValue(true);                                                               //COBOL==> SET MV-ABEND-TYPE-NONE TO TRUE.
            Perform("8400-SELECT-CLIENT", "8400-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8400-SELECT-CLIENT THRU 8400-EXIT.
                                                                                                                  //COMMENT: WBR30
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_6000_EXIT;                                                                                   //COBOL==> GO TO 6000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  THE FOLLOWING CODE HAS BEEN COMMENTED OUT
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     MOVE CLIENT-POINTER149C    TO MV-CLIENT-POINTER-X31.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: NOTE:   OLD CLIENT POINTER REPLACEMENT
                                                                                                                //COMMENT: *****************************************************************
            WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIKEY_CLIENT_NUMBER);                                  //COBOL==> MOVE IMP-CLIKEY-CLIENT-NUMBER TO SYSPART-FK-CLB-CLIENT-NO CLIENT-FK-CLB-CLIENT-NO.
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIKEY_CLIENT_NUMBER);
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.IMP_CLIKEY_CLIENT_NAME);                                  //COBOL==> MOVE IMP-CLIKEY-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME CLIENT-CLIENT-NAME.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_CLIKEY_CLIENT_NAME);
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.IMP_CLIKEY_SSN);                                                  //COBOL==> MOVE IMP-CLIKEY-SSN TO SYSPART-FK-CLI-SSN CLIENT-SSN.
            WS.CLIENT_SSN.SetValue(WS.IMP_CLIKEY_SSN);
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_CLIKEY_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-CLIKEY-DATE-OF-BIRTH ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_CLIKEY_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-CLIKEY-DATE-OF-BIRTH ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_CLIKEY_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-CLIKEY-DATE-OF-BIRTH ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENT_GENDER.SetValue(WS.IMP_CLIKEY_SEX);                                                       //COBOL==> MOVE IMP-CLIKEY-SEX TO CLIENT-GENDER.
            WS.CLIENT_VERIFIED_SSN_FLAG.SetValue(WS.IMP_CLIKEY_VERIFIED_SSN_FLAG);                              //COBOL==> MOVE IMP-CLIKEY-VERIFIED-SSN-FLAG TO CLIENT-VERIFIED-SSN-FLAG.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_CS);                                                   //COBOL==> MOVE WS-SYS-CD-CS TO SYSPART-SYSTEM-CODE.
                                                                                                                //COMMENT: 808 PERFORM 8250-DELETE-SYS-PART THRU
                                                                                                                //COMMENT: 808         8250-EXIT.
            Perform("8280-DELETE-SYS-PART", "8280-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8280-DELETE-SYS-PART THRU 8280-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_6000_EXIT;                                                                                   //COBOL==> GO TO 6000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            Perform("8149C-DEL-CLIENT-DBF", "8149C-DEL-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM 8149C-DEL-CLIENT-DBF THRU 8149C-DEL-EXIT.
            if (returnLabel == "6000-DELET-ALIAS-CLIENT") { return; }  //Check for pass through to next method
        #endregion 6000-DELET-ALIAS-CLIENT

        #region 6000-EXIT
        L_6000_EXIT:;
            if (returnLabel == "6000-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: 7000-CHECK-AE-PARTICIPATION.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO V-CLIENT-NUMBER161.
        ///COMMENT:     MOVE SPACES                TO MV-AE-CASE-BASIC-TABLE.
        ///COMMENT:     MOVE ZERO                  TO MV-ACB-PTR.
        ///COMMENT:     PERFORM 8161F-READLOG-PART-DBF
        ///COMMENT:        THRU 8161F-READLOG-EXIT.
        ///COMMENT: 7000-CHECK-AE-PART-LOOP.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF EOF161 OR
        ///COMMENT:        CLIENT-NUMBER161 NOT = V-CLIENT-NUMBER161
        ///COMMENT:         GO TO 7000-CHECK-KSC-CASE-COMP
        ///COMMENT:     END-IF.
        ///COMMENT:     IF RELATIONSHIP161 = 'PI'
        ///COMMENT:         PERFORM
        ///COMMENT:             VARYING MV-WRK-PTR FROM 1 BY 1
        ///COMMENT:               UNTIL MV-WRK-PTR > MC-ACB-MAX
        ///COMMENT:                  OR MV-WRK-PTR > MV-ACB-PTR
        ///COMMENT:                  OR MV-AE-CASE-BASIC-NUMBER (MV-WRK-PTR) =
        ///COMMENT:                     CASE-NUMBER161
        ///COMMENT:         END-PERFORM
        ///COMMENT:         IF MV-WRK-PTR > MV-ACB-PTR
        ///COMMENT:             ADD 1                   TO MV-ACB-PTR
        ///COMMENT:             IF MV-ACB-PTR > MC-ACB-MAX
        ///COMMENT:                 MOVE 'A'            TO MV-ABEND-TYPE
        ///COMMENT:                 MOVE MV-ACB-PTR     TO MV-ADA-FILE-NUMBER
        ///COMMENT: *************** AE TABLE OVERFLOW *******************************
        ///COMMENT:                 MOVE 'ATO'          TO MV-ADA-FILE-ACTION
        ///COMMENT:                 MOVE ZERO           TO MV-ADA-RESPONSE-CD
        ///COMMENT:             ELSE
        ///COMMENT:                 MOVE CASE-NUMBER161 TO
        ///COMMENT:                      MV-AE-CASE-BASIC-NUMBER (MV-ACB-PTR)
        ///COMMENT:             END-IF
        ///COMMENT:         ELSE
        ///COMMENT:             IF MV-ACB-PTR > MC-ACB-MAX
        ///COMMENT:                 ADD 1               TO MV-ACB-PTR
        ///COMMENT:             END-IF
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT: *************************** WILL OPEN   AFTER  TODAY ************
        ///COMMENT:     IF PART-START-DATE161 > MV-CCYYMMDD OR
        ///COMMENT: *************************** WAS  CLOSED BEFORE TODAY ************
        ///COMMENT:        PART-END-DATE161   < MV-CCYYMMDD
        ///COMMENT:         GO TO 7000-CHECK-AE-PART-CONT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE 'A'   TO MV-ABEND-TYPE.
        ///COMMENT:     MOVE 161   TO MV-ADA-FILE-NUMBER.
        ///COMMENT: *** AE PARTICIPATION OPEN PROGRAM *******************************
        ///COMMENT:     MOVE 'APO' TO MV-ADA-FILE-ACTION.
        ///COMMENT:     MOVE ZERO  TO MV-ADA-RESPONSE-CD.
        ///COMMENT:     GO TO 7000-EXIT.
        ///COMMENT: 7000-CHECK-AE-PART-CONT.
        ///COMMENT:     PERFORM 8161N-READLOG-PART-DBF
        ///COMMENT:        THRU 8161N-READLOG-EXIT.
        ///COMMENT:     GO TO 7000-CHECK-AE-PART-LOOP.
        ///COMMENT: 7000-CHECK-KSC-CASE-COMP.
        ///COMMENT: *****************************************************************
        ///COMMENT: *** REMOVE THE NEXT STATEMENT IF YOU NEED TO CHECK KSC OWNERSHIP.
        ///COMMENT:     GO TO 7000-EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO V-CLIENT-INFO114.
        ///COMMENT:     PERFORM 8114F-READLOG-KCC-DBF
        ///COMMENT:        THRU 8114F-READLOG-EXIT.
        ///COMMENT: 7000-CHECK-KSC-CASE-COMP-LOOP.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF EOF114 OR
        ///COMMENT: ****************************** WAS  CLOSED BEFORE TODAY *********
        ///COMMENT:        CASE-CLOSE-DT-COMP114 > MV-COMPLEMENT-DATE
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE SPACES TO MV-CLIENT-INFO-NUMBER.
        ///COMMENT:     PERFORM
        ///COMMENT:         VARYING MV-KCC-PTR FROM 1 BY 1
        ///COMMENT:           UNTIL MV-KCC-PTR > C-CLIENT-INFO114
        ///COMMENT:              OR MV-CLIENT-INFO-NUMBER =
        ///COMMENT:                 IMP-CLIENT-NUMBER-X10
        ///COMMENT:         MOVE CLIENT-INFO114 (MV-KCC-PTR) TO
        ///COMMENT:              MV-CLIENT-INFO-NUMBER
        ///COMMENT:     END-PERFORM.
        ///COMMENT:     IF MV-CLIENT-INFO-NUMBER NOT = IMP-CLIENT-NUMBER-X10
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: ************************ WILL OPEN   AFTER  TODAY ***************
        ///COMMENT:     IF CASE-OPEN-DT114 > MV-CCYYMMDD
        ///COMMENT:         GO TO 7000-CHECK-KSC-CASE-COMP-CONT
        ///COMMENT:     END-IF.
        ///COMMENT: WBR START
        ///COMMENT: *****************************************************************
        ///COMMENT:   CHECK KEES PARTICIPATION ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 6000-EXIT

        #region 7000-CHECK-AE-PARTICIPATION
        L_7000_CHECK_AE_PARTICIPATION:;
            WS.PART_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                        //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO PART-FK-CLB-CLIENT-NO.
            WS.MV_AE_CASE_BASIC_TABLE.SetValueWithSpaces();                                                     //COBOL==> MOVE SPACES TO MV-AE-CASE-BASIC-TABLE.
            WS.MV_ACB_PTR.SetValueWithZeroes();                                                                 //COBOL==> MOVE ZERO TO MV-ACB-PTR.
            Perform("8161F-READLOG-PART-DBF", "8161F-READLOG-EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM 8161F-READLOG-PART-DBF THRU 8161F-READLOG-EXIT.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                Perform("8161O-OPEN-PART-DBF", "8161O-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8161O-OPEN-PART-DBF THRU 8161O-EXIT
                if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
                {
                    Perform("8161N-READLOG-PART-DBF", "8161N-READLOG-EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM 8161N-READLOG-PART-DBF THRU 8161N-READLOG-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_PART_EOF_YES.SetValue(true);                                                                  //COBOL==> SET WS-PART-EOF-YES TO TRUE
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PART_EOF_YES.SetValue(true);                                                                  //COBOL==> SET WS-PART-EOF-YES TO TRUE
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_PART_EOF_YES.Value)                                                                       //COBOL==> IF WS-PART-EOF-YES
            {
                Perform("8161C-CLOSE-PART-DBF", "8161C-EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM 8161C-CLOSE-PART-DBF THRU 8161C-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "7000-CHECK-AE-PARTICIPATION") { return; }  //Check for pass through to next method
        #endregion 7000-CHECK-AE-PARTICIPATION

        #region 7000-CHECK-AE-PART-LOOP
        L_7000_CHECK_AE_PART_LOOP:;
            if ((!(WS.MV_ABEND_TYPE_NONE.Value))
             || (WS.WS_PART_EOF_YES.Value))                //COBOL==> IF NOT MV-ABEND-TYPE-NONE OR WS-PART-EOF-YES
            {
                goto L_7000_EXIT;                                                                                   //COBOL==> GO TO 7000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  THE FOLLOWING CODE WAS COMMENTED OUT BECAUSE KSC DATA WAS
                                                                                                                //COMMENT:  MERGED WITH AE DATA
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     IF WS-KCASECMP-EOF-YES
                                                                                                                //COMMENT:         GO TO 7000-CHECK-KSC-CASE-COMP
                                                                                                                //COMMENT:     END-IF.
            if (WS.PART_RELATIONSHIP.IsEqualTo("PI"))                                                           //COBOL==> IF PART-RELATIONSHIP = 'PI'
            {
                for (WS.MV_WRK_PTR.SetValue(1); (!(((WS.MV_WRK_PTR.IsGreaterThan(WS.MC_ACB_MAX)) || (WS.MV_WRK_PTR.IsGreaterThan(WS.MV_ACB_PTR))) || (WS.MV_AE_CASE_BASIC_NUMBER[WS.MV_WRK_PTR.AsInt()].IsEqualTo(WS.PART_FK_CSB_CASE_NO)))); WS.MV_WRK_PTR.Add(1))  //COBOL==> PERFORM VARYING MV-WRK-PTR FROM 1 BY 1 UNTIL MV-WRK-PTR > MC-ACB-MAX OR MV-WRK-PTR > MV-ACB-PTR OR MV-AE-CASE-BASIC-NUMBER ( MV-WRK-PTR ) = PART-FK-CSB-CASE-NO
                {
                }                                                                                                   //COBOL==> END-PERFORM
                if (WS.MV_WRK_PTR.IsGreaterThan(WS.MV_ACB_PTR))                                                     //COBOL==> IF MV-WRK-PTR > MV-ACB-PTR
                {
                    WS.MV_ACB_PTR.Add(1);                                                                               //COBOL==> ADD 1 TO MV-ACB-PTR
                    if (WS.MV_ACB_PTR.IsGreaterThan(WS.MC_ACB_MAX))                                                     //COBOL==> IF MV-ACB-PTR > MC-ACB-MAX
                    {
                        WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                        WS.MV_ADA_FILE_NUMBER.SetValue(WS.MV_ACB_PTR);                                                      //COBOL==> MOVE MV-ACB-PTR TO MV-ADA-FILE-NUMBER
                                                                                                                            //COMMENT: *************** AE TABLE OVERFLOW *******************************
                        WS.MV_ADA_FILE_ACTION.SetValue("ATO");                                                              //COBOL==> MOVE 'ATO' TO MV-ADA-FILE-ACTION
                        WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.MV_AE_CASE_BASIC_NUMBER[WS.MV_ACB_PTR.AsInt()].SetValue(WS.PART_FK_CSB_CASE_NO);                 //COBOL==> MOVE PART-FK-CSB-CASE-NO TO MV-AE-CASE-BASIC-NUMBER ( MV-ACB-PTR )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.MV_ACB_PTR.IsGreaterThan(WS.MC_ACB_MAX))                                                     //COBOL==> IF MV-ACB-PTR > MC-ACB-MAX
                    {
                        WS.MV_ACB_PTR.Add(1);                                                                               //COBOL==> ADD 1 TO MV-ACB-PTR
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.PART_WS_END_DATE.SetValueOfSubstring(1, 4, WS.PART_PART_END_DATE.GetSubstring(1, 4).AsString()); //COBOL==> MOVE PART-PART-END-DATE ( 1:4 ) TO PART-WS-END-DATE ( 1:4 ) .
            WS.PART_WS_END_DATE.SetValueOfSubstring(5, 2, WS.PART_PART_END_DATE.GetSubstring(6, 2).AsString()); //COBOL==> MOVE PART-PART-END-DATE ( 6:2 ) TO PART-WS-END-DATE ( 5:2 ) .
            WS.PART_WS_END_DATE.SetValueOfSubstring(7, 2, WS.PART_PART_END_DATE.GetSubstring(9, 2).AsString()); //COBOL==> MOVE PART-PART-END-DATE ( 9:2 ) TO PART-WS-END-DATE ( 7:2 ) .
            WS.PART_WS_START_DATE.SetValueOfSubstring(1, 4, WS.PART_PART_START_DATE.GetSubstring(1, 4).AsString());  //COBOL==> MOVE PART-PART-START-DATE ( 1:4 ) TO PART-WS-START-DATE ( 1:4 ) .
            WS.PART_WS_START_DATE.SetValueOfSubstring(5, 2, WS.PART_PART_START_DATE.GetSubstring(6, 2).AsString());  //COBOL==> MOVE PART-PART-START-DATE ( 6:2 ) TO PART-WS-START-DATE ( 5:2 ) .
            WS.PART_WS_START_DATE.SetValueOfSubstring(7, 2, WS.PART_PART_START_DATE.GetSubstring(9, 2).AsString());  //COBOL==> MOVE PART-PART-START-DATE ( 9:2 ) TO PART-WS-START-DATE ( 7:2 ) .
                                                                                                                     //COMMENT: *************************** WILL OPEN   AFTER  TODAY ************
            if ((WS.PART_WS_START_DATE.IsGreaterThan(WS.MV_CCYYMMDD))
             || (WS.PART_WS_END_DATE.IsLessThan(WS.MV_CCYYMMDD)))  //COBOL==> IF PART-WS-START-DATE > MV-CCYYMMDD OR PART-WS-END-DATE < MV-CCYYMMDD
            {
                goto L_7000_CHECK_AE_PART_CONT;                                                                     //COBOL==> GO TO 7000-CHECK-AE-PART-CONT
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE.
            WS.MV_ADA_FILE_NUMBER.SetValue(161);                                                                //COBOL==> MOVE 161 TO MV-ADA-FILE-NUMBER.
                                                                                                                //COMMENT: *** AE PARTICIPATION OPEN PROGRAM *******************************
            WS.MV_ADA_FILE_ACTION.SetValue("APO");                                                              //COBOL==> MOVE 'APO' TO MV-ADA-FILE-ACTION.
            WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD.
            goto L_7000_EXIT;                                                                                   //COBOL==> GO TO 7000-EXIT.
        #endregion 7000-CHECK-AE-PART-LOOP

        #region 7000-CHECK-AE-PART-CONT
        L_7000_CHECK_AE_PART_CONT:;
            Perform("8161N-READLOG-PART-DBF", "8161N-READLOG-EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM 8161N-READLOG-PART-DBF THRU 8161N-READLOG-EXIT.
            if (WS.WS_PART_EOF_YES.Value)                                                                       //COBOL==> IF WS-PART-EOF-YES
            {
                Perform("8161C-CLOSE-PART-DBF", "8161C-EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM 8161C-CLOSE-PART-DBF THRU 8161C-EXIT
            }                                                                                                   //COBOL==> END-IF.
            goto L_7000_CHECK_AE_PART_LOOP;                                                                     //COBOL==> GO TO 7000-CHECK-AE-PART-LOOP.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING CODE WAS COMMENTED OUT BECAUSE THE KSC CASE,
        ///COMMENT:  CASE COMP AND PARTICIPATION DATA WAS MERGED WITH AE CASE,
        ///COMMENT:  CASE COMP AND PARTICIPATION DATA.
        ///COMMENT: *****************************************************************
        ///COMMENT: 7000-CHECK-KSC-CASE-COMP.
        ///COMMENT: *****************************************************************
        ///COMMENT: *** REMOVE THE NEXT STATEMENT IF YOU NEED TO CHECK KSC OWNERSHIP.
        ///COMMENT:     GO TO 7000-EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO KPART-FK-CLB-CLIENT-NO.
        ///COMMENT:     PERFORM 8114F-READLOG-KCC-DBF
        ///COMMENT:        THRU 8114F-READLOG-EXIT.
        ///COMMENT:     IF SQLCODE = 0
        ///COMMENT:         PERFORM 8114O-OPEN-KCASE-COMP-DBF THRU
        ///COMMENT:                 81140-EXIT
        ///COMMENT:         IF SQLCODE = 0
        ///COMMENT:             PERFORM 8114N-READLOG-KCC-DBF THRU
        ///COMMENT:                     8114N-READLOG-EXIT
        ///COMMENT:             IF SQLCODE = 0
        ///COMMENT:                 CONTINUE
        ///COMMENT:             ELSE
        ///COMMENT:                 PERFORM 8114C-CLOSE-KCASE-COMP-DBF THRU
        ///COMMENT:                         8114C-EXIT
        ///COMMENT:             END-IF
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT: 7000-CHECK-KSC-CASE-COMP-LOOP.
        ///COMMENT:     MOVE KCASECMP-CASE-CLOSE-DT(1:4) TO
        ///COMMENT:          KCASECMP-WS-CLOSE-DT(1:4).
        ///COMMENT:     MOVE KCASECMP-CASE-CLOSE-DT(6:2) TO
        ///COMMENT:          KCASECMP-WS-CLOSE-DT(5:2).
        ///COMMENT:     MOVE KCASECMP-CASE-CLOSE-DT(9:2) TO
        ///COMMENT:          KCASECMP-WS-CLOSE-DT(7:2).
        ///COMMENT:     MOVE KCASECMP-CASE-OPEN-DT(1:4) TO
        ///COMMENT:          KCASECMP-WS-OPEN-DT(1:4).
        ///COMMENT:     MOVE KCASECMP-CASE-OPEN-DT(6:2) TO
        ///COMMENT:          KCASECMP-WS-OPEN-DT(5:2).
        ///COMMENT:     MOVE KCASECMP-CASE-OPEN-DT(9:2) TO
        ///COMMENT:          KCASECMP-WS-OPEN-DT(7:2).
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF WS-KCASECMP-EOF-YES OR
        ///COMMENT: ****************************** WAS  CLOSED BEFORE TODAY *********
        ///COMMENT:        KCASECMP-WS-CLOSE-DT > MV-COMPLEMENT-DATE
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE SPACES TO MV-CLIENT-INFO-NUMBER.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING LOGIC HAS BEEN COMMENTED OUT BECAUSE IT IS NOT
        ///COMMENT:  NEEDED ANY LONGER.
        ///COMMENT: *****************************************************************
        ///COMMENT:     PERFORM
        ///COMMENT:         VARYING MV-KCC-PTR FROM 1 BY 1
        ///COMMENT:           UNTIL MV-KCC-PTR > C-CLIENT-INFO114
        ///COMMENT:              OR MV-CLIENT-INFO-NUMBER =
        ///COMMENT:                 IMP-CLIENT-NUMBER-X10
        ///COMMENT:         MOVE CLIENT-INFO114 (MV-KCC-PTR) TO
        ///COMMENT:              MV-CLIENT-INFO-NUMBER
        ///COMMENT:     END-PERFORM.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING CODE WAS ADDED TO REPLACE THE CODE ABOVE
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE KCASECMP-FK-CLB-CLIENT-NO TO MV-CLIENT-INFO-NUMBER.
        ///COMMENT: *****************************************************************
        ///COMMENT:     IF MV-CLIENT-INFO-NUMBER NOT = IMP-CLIENT-NUMBER-X10
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: ************************ WILL OPEN   AFTER  TODAY ***************
        ///COMMENT:     IF KCASECMP-WS-OPEN-DT > MV-CCYYMMDD
        ///COMMENT:         GO TO 7000-CHECK-KSC-CASE-COMP-CONT
        ///COMMENT:     END-IF.
        ///COMMENT: 7000-CHECK-KSC-PARTICIPATION.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO V-CLIENT-ID113.
        ///COMMENT:     PERFORM 8113F-READLOG-KPART-DBF
        ///COMMENT:        THRU 8113F-READLOG-EXIT.
        ///COMMENT: 7000-CHECK-KSC-PART-LOOP.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF EOF113 OR
        ///COMMENT:        CLIENT-ID113 NOT = V-CLIENT-ID113
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: ************************* WILL OPEN   AFTER  TODAY **************
        ///COMMENT:     IF PART-OPEN-DT113  > MV-CCYYMMDD OR
        ///COMMENT: ************************* WAS  CLOSED BEFORE TODAY **************
        ///COMMENT:        PART-CLOSE-DT113 < MV-CCYYMMDD
        ///COMMENT:         GO TO 7000-CHECK-KSC-PART-CONT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE 'A'   TO MV-ABEND-TYPE.
        ///COMMENT:     MOVE 113   TO MV-ADA-FILE-NUMBER.
        ///COMMENT: *** KSC PARTICIPATION OPEN PROGRAM ******************************
        ///COMMENT:     MOVE 'KPO' TO MV-ADA-FILE-ACTION.
        ///COMMENT:     MOVE ZERO  TO MV-ADA-RESPONSE-CD.
        ///COMMENT:     GO TO 7000-EXIT.
        ///COMMENT: 7000-CHECK-KSC-PART-CONT.
        ///COMMENT:     PERFORM 8113N-READLOG-KPART-DBF
        ///COMMENT:        THRU 8113N-READLOG-EXIT.
        ///COMMENT:     GO TO 7000-CHECK-KSC-PART-LOOP.
        ///COMMENT: 7000-CHECK-KSC-CASE-COMP-CONT.
        ///COMMENT:     PERFORM 8114N-READLOG-KCC-DBF
        ///COMMENT:        THRU 8114N-READLOG-EXIT.
        ///COMMENT:     GO TO 7000-CHECK-KSC-CASE-COMP-LOOP.
        #endregion 7000-CHECK-AE-PART-CONT

        #region 7000-EXIT
        L_7000_EXIT:;
            if (returnLabel == "7000-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: WBR START
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING CODE WAS COMMENTED OUT BECAUSE THE KSC CASE,
        ///COMMENT:  CASE COMP AND PARTICIPATION DATA WAS MERGED WITH AE CASE,
        ///COMMENT:  CASE COMP AND PARTICIPATION DATA.
        ///COMMENT: *****************************************************************
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK KANSAS CARE PARTICIPATION
        ///COMMENT: *****************************************************************
        ///COMMENT: 7000-CHECK-KSC-PARTICIPATION.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO KPART-FK-CLB-CLIENT-NO.
        ///COMMENT:     PERFORM 8113F-READLOG-KPART-DBF
        ///COMMENT:        THRU 8113F-READLOG-EXIT.
        ///COMMENT:     IF SQLCODE = 0
        ///COMMENT:         PERFORM 8113O-OPEN-KPART-DBF THRU
        ///COMMENT:                 81130-EXIT
        ///COMMENT:         IF SQLCODE = 0
        ///COMMENT:             PERFORM 8113N-READLOG-KPART-DBF THRU
        ///COMMENT:                     8113N-READLOG-EXIT
        ///COMMENT:             IF SQLCODE = 0
        ///COMMENT:                 CONTINUE
        ///COMMENT:             ELSE
        ///COMMENT:                 PERFORM 8113C-CLOSE-KPART-DBF THRU
        ///COMMENT:                         8113C-EXIT
        ///COMMENT:             END-IF
        ///COMMENT:         ELSE
        ///COMMENT:             PERFORM 8113C-CLOSE-KPART-DBF THRU
        ///COMMENT:                     8113C-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT: 7000-CHECK-KSC-PART-LOOP.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF WS-KPART-EOF-YES OR
        ///COMMENT:        KPART-FK-CLB-CLIENT-NO NOT = IMP-CLIENT-NUMBER-X10
        ///COMMENT:         PERFORM 8113C-CLOSE-KPART-DBF THRU
        ///COMMENT:                 8113C-EXIT
        ///COMMENT:         GO TO 7000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE KPART-PART-CLOSE-DT(1:4) TO KPART-WS-CLOSE-DT(1:4).
        ///COMMENT:     MOVE KPART-PART-CLOSE-DT(6:2) TO KPART-WS-CLOSE-DT(5:2).
        ///COMMENT:     MOVE KPART-PART-CLOSE-DT(9:2) TO KPART-WS-CLOSE-DT(7:2).
        ///COMMENT:     MOVE KPART-PART-OPEN-DT(1:4) TO KPART-WS-OPEN-DT(1:4).
        ///COMMENT:     MOVE KPART-PART-OPEN-DT(6:2) TO KPART-WS-OPEN-DT(5:2).
        ///COMMENT:     MOVE KPART-PART-OPEN-DT(9:2) TO KPART-WS-OPEN-DT(7:2).
        ///COMMENT: ************************* WILL OPEN   AFTER  TODAY **************
        ///COMMENT:     IF KPART-WS-OPEN-DT > MV-CCYYMMDD OR
        ///COMMENT: ************************* WAS  CLOSED BEFORE TODAY **************
        ///COMMENT:        KPART-WS-CLOSE-DT < MV-CCYYMMDD
        ///COMMENT:         GO TO 7000-CHECK-KSC-PART-CONT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE 'A'   TO MV-ABEND-TYPE.
        ///COMMENT:     MOVE 113   TO MV-ADA-FILE-NUMBER.
        ///COMMENT: *** KSC PARTICIPATION OPEN PROGRAM ******************************
        ///COMMENT:     MOVE 'KPO' TO MV-ADA-FILE-ACTION.
        ///COMMENT:     MOVE ZERO  TO MV-ADA-RESPONSE-CD.
        ///COMMENT:     GO TO 7000-EXIT.
        ///COMMENT: 7000-CHECK-KSC-PART-CONT.
        ///COMMENT:     PERFORM 8113N-READLOG-KPART-DBF
        ///COMMENT:        THRU 8113N-READLOG-EXIT.
        ///COMMENT:     GO TO 7000-CHECK-KSC-PART-LOOP.
        ///COMMENT: 7000-CHECK-KSC-CASE-COMP-CONT.
        ///COMMENT:     PERFORM 8114N-READLOG-KCC-DBF
        ///COMMENT:        THRU 8114N-READLOG-EXIT.
        ///COMMENT:     GO TO 7000-CHECK-KSC-CASE-COMP-LOOP.
        ///COMMENT: 7000-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 7100-CHECK-DUP-SSN.
        ///COMMENT:     IF IMP-SOC-SEC-NUM      = 0
        ///COMMENT:       GO TO 7100-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM    TO V-SSN149A.
        ///COMMENT:     PERFORM 8149AF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149AF-READLOG-EXIT.
        ///COMMENT: 7100-CHECK-DUP-SSN-LOOP.
        ///COMMENT:     IF EOF149A OR
        ///COMMENT:        SSN149A NOT = V-SSN149A
        ///COMMENT:         GO TO 7100-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-POINTER149A TO MV-CLIENT-POINTER.
        ///COMMENT:     IF MV-CLIENT-ID NOT = IMP-CLIENT-NUMBER-X10
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'ADS' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 7100-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 8149AN-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149AN-READLOG-EXIT.
        ///COMMENT:     GO TO 7100-CHECK-DUP-SSN-LOOP.
        ///COMMENT: 7100-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR DUPLICATE SSN ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7000-EXIT

        #region 7100-CHECK-DUP-SSN
        L_7100_CHECK_DUP_SSN:;
            if (WS.IMP_SOC_SEC_NUM.IsEqualTo(0))                                                                //COBOL==> IF IMP-SOC-SEC-NUM = 0
            {
                goto L_7100_EXIT;                                                                                   //COBOL==> GO TO 7100-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *************************************************************
                                                                                                                //COMMENT:  CQ63278 PARAGRAPH 7100-CHECK-DUP-SSN REWRITTEN TO ALLOW    *
                                                                                                                //COMMENT:          SAME SSN ON SECONDARY CLIENT IDS       8/6/18      *
                                                                                                                //COMMENT: *************************************************************
                                                                                                                //COMMENT: RAJ 02/09/2016 RESET THE CLIETN EOF SW IN ORDER TO PERFORM THE
                                                                                                                //COMMENT: SSN CHECK.
                                                                                                                //COMMENT:     MOVE 'N'             TO WS-CLIENT-EOF-SW.
                                                                                                                //COMMENT:     MOVE +0              TO SQLCODE.
                                                                                                                //COMMENT:     MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  DECLARE CURSOR FOR CLIENT DB2 DATA
                                                                                                                //COMMENT:  OPEN CURSOR FOR CLIENT DB2 DATA IF DECLARE CURSOR WAS SUCESSFUL
                                                                                                                //COMMENT:  FETCH CURSOR FOR CLIENT DB2 DATA IF OPEN CURSOR WAS SUCESSFUL
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     PERFORM 8149AF-READLOG-CLIENT-DBF THRU
                                                                                                                //COMMENT:             8149AF-READLOG-EXIT.
                                                                                                                //COMMENT:     IF SQLCODE = 0
                                                                                                                //COMMENT:         PERFORM 8149AO-OPEN-CLIENT-DBF THRU
                                                                                                                //COMMENT:                 8149AO-EXIT
                                                                                                                //COMMENT:     ELSE
                                                                                                                //COMMENT:         SET WS-CLIENT-EOF-YES TO TRUE
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT:     IF SQLCODE = 0
                                                                                                                //COMMENT:         PERFORM 8149AN-READLOG-CLIENT-DBF THRU
                                                                                                                //COMMENT:                 8149AN-READLOG-EXIT
                                                                                                                //COMMENT:     ELSE
                                                                                                                //COMMENT:         SET WS-CLIENT-EOF-YES TO TRUE
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT: 7100-CHECK-DUP-SSN-LOOP.
                                                                                                                //COMMENT:     IF WS-CLIENT-EOF-YES
                                                                                                                //COMMENT:         PERFORM 8149AC-CLOSE-CLIENT-DBF THRU
                                                                                                                //COMMENT:                 8149AC-EXIT
                                                                                                                //COMMENT:         GO TO 7100-EXIT
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT:     PERFORM 7900-BUILD-CLI-PTR-DATA THRU
                                                                                                                //COMMENT:             7900-EXIT.
                                                                                                                //COMMENT:     MOVE WS-CLIENT-POINTER TO MV-CLIENT-POINTER.
                                                                                                                //COMMENT:     IF MV-CLIENT-ID NOT = IMP-CLIENT-NUMBER-X10
                                                                                                                //COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
                                                                                                                //COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
                                                                                                                //COMMENT:         MOVE 'ADS' TO MV-ADA-FILE-ACTION
                                                                                                                //COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
                                                                                                                //COMMENT:         GO TO 7100-EXIT
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT:     IF WS-CLIENT-EOF-YES
                                                                                                                //COMMENT:         GO TO 7100-EXIT
                                                                                                                //COMMENT:     ELSE
                                                                                                                //COMMENT:         PERFORM 8149AN-READLOG-CLIENT-DBF THRU
                                                                                                                //COMMENT:                 8149AN-READLOG-EXIT
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT:     GO TO 7100-CHECK-DUP-SSN-LOOP.
                                                                                                                //COMMENT:  CQ63278 NEW CODE STARTS HERE ****************************
            WS.WS_DUP_CLT_CNT.SetValue(+0);                                                                     //COBOL==> MOVE +0 TO WS-DUP-CLT-CNT.
            WS.WS_CHK_CLT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                     //COBOL==> MOVE IMP-SOC-SEC-NUM TO WS-CHK-CLT-SSN.
            if ((WS.IMP_CLIENT_NUMBER_X10.IsLessThan("0000000000"))
             || (WS.IMP_CLIENT_NUMBER_X10.IsGreaterThan("9999999999")))  //COBOL==> IF IMP-CLIENT-NUMBER-X10 < '0000000000' OR IMP-CLIENT-NUMBER-X10 > '9999999999'
            {
                WS.WS_CHK_CLT_NO.SetValue("0000000000");                                                            //COBOL==> MOVE '0000000000' TO WS-CHK-CLT-NO
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_CHK_CLT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                                //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO WS-CHK-CLT-NO
            }                                                                                                   //COBOL==> END-IF.
            DbConv.ExecuteSqlQueryWithUR("SELECT COUNT ( * ) INTO {0} FROM KSD_CLIENT_BASIC WHERE CIS_REPL_IND = 'P' AND SSN = {1} AND CLIENT_NUMBER <> {2} ",  //COBOL==> EXEC SQL SELECT COUNT ( * ) INTO :WS-DUP-CLT-CNT FROM KSD_CLIENT_BASIC WHERE CIS_REPL_IND = 'P' AND SSN = :WS-CHK-CLT-SSN AND CLIENT_NUMBER <> :WS-CHK-CLT-NO WITH UR END-EXEC.
                                 WS.WS_DUP_CLT_CNT, WS.WS_CHK_CLT_SSN, WS.WS_CHK_CLT_NO);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RHI");                                                              //COBOL==> MOVE 'RHI' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                goto L_7100_EXIT;                                                                                   //COBOL==> GO TO 7100-EXIT
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (WS.WS_DUP_CLT_CNT.IsGreaterThan(0))                                                             //COBOL==> IF WS-DUP-CLT-CNT > 0
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("ADS");                                                              //COBOL==> MOVE 'ADS' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "7100-CHECK-DUP-SSN") { return; }  //Check for pass through to next method
        #endregion 7100-CHECK-DUP-SSN

        #region 7100-EXIT
        L_7100_EXIT:;
            if (returnLabel == "7100-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: 7200-UPDATE-AE-CASE-BASIC.
        ///COMMENT:     MOVE ZERO TO MV-WRK-PTR.
        ///COMMENT: 7200-UPDATE-AE-CASE-BASIC-LOOP.
        ///COMMENT:     ADD 1     TO MV-WRK-PTR.
        ///COMMENT:     IF MV-WRK-PTR > MV-ACB-PTR
        ///COMMENT:         GO TO 7200-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE MV-AE-CASE-BASIC-NUMBER (MV-WRK-PTR)
        ///COMMENT:                 TO V-CASE-NUMBER153.
        ///COMMENT:     MOVE SPACES TO MV-CLIENT-INFO-NUMBER.
        ///COMMENT:     PERFORM 8153F-READLOG-CCOMP-DBF
        ///COMMENT:        THRU 8153F-READLOG-EXIT.
        ///COMMENT: 7200-CHECK-AE-CASE-COMP-LOOP.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 7200-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF EOF153 OR
        ///COMMENT:        CASE-NUMBER153        NOT = V-CASE-NUMBER153
        ///COMMENT:         GO TO 7200-CHECK-AE-CASE-COMP-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF RELATIONSHIP153           = 'PI'
        ///COMMENT:         MOVE CLIENT-NUMBER153
        ///COMMENT:                 TO MV-CLIENT-INFO-NUMBER
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 8153N-READLOG-CCOMP-DBF
        ///COMMENT:        THRU 8153N-READLOG-EXIT.
        ///COMMENT:     GO TO 7200-CHECK-AE-CASE-COMP-LOOP.
        ///COMMENT: 7200-CHECK-AE-CASE-COMP-EXIT.
        ///COMMENT:     IF IMP-CLIENT-NUMBER-X10 NOT = MV-CLIENT-INFO-NUMBER
        ///COMMENT:         GO TO 7200-UPDATE-AE-CASE-BASIC-LOOP
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE MV-AE-CASE-BASIC-ISN    (MV-WRK-PTR)
        ///COMMENT:                 TO MV-ISN.
        ///COMMENT:     PERFORM 8152-READISN-CASE-BASIC-DBF
        ///COMMENT:        THRU 8152-READISN-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 7200-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF IMP-NAME = CASE-NAME152
        ///COMMENT:         PERFORM 8152-RELISN-CASE-BASIC-DBF
        ///COMMENT:            THRU 8152-RELISN-EXIT
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 7200-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     ELSE
        ///COMMENT:         MOVE IMP-NAME TO CASE-NAME152
        ///COMMENT:         PERFORM 8152-UPDT-CASE-BASIC-DBF
        ///COMMENT:            THRU 8152-UPDT-EXIT
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 7200-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT:     GO TO 7200-UPDATE-AE-CASE-BASIC-LOOP.
        ///COMMENT: 7200-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE KEES CASE BASIC ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7100-EXIT

        #region 7200-UPDATE-AE-CASE-BASIC
        L_7200_UPDATE_AE_CASE_BASIC:;
            WS.MV_WRK_PTR.SetValueWithZeroes();                                                                 //COBOL==> MOVE ZERO TO MV-WRK-PTR.
            if (returnLabel == "7200-UPDATE-AE-CASE-BASIC") { return; }  //Check for pass through to next method
        #endregion 7200-UPDATE-AE-CASE-BASIC

        #region 7200-UPDATE-AE-CASE-BASIC-LOOP
        L_7200_UPDATE_AE_CASE_BASIC_LOOP:;
            WS.MV_WRK_PTR.Add(1);                                                                               //COBOL==> ADD 1 TO MV-WRK-PTR.
            if (WS.MV_WRK_PTR.IsGreaterThan(WS.MV_ACB_PTR))                                                     //COBOL==> IF MV-WRK-PTR > MV-ACB-PTR
            {
                goto L_7200_EXIT;                                                                                   //COBOL==> GO TO 7200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.CASEC_FK_CSB_CASE_NO.SetValue(WS.MV_AE_CASE_BASIC_NUMBER[WS.MV_WRK_PTR.AsInt()]);                //COBOL==> MOVE MV-AE-CASE-BASIC-NUMBER ( MV-WRK-PTR ) TO CASEC-FK-CSB-CASE-NO.
            WS.MV_CLIENT_INFO_NUMBER.SetValueWithSpaces();                                                      //COBOL==> MOVE SPACES TO MV-CLIENT-INFO-NUMBER.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  DECLARE CURSOR FOR CASE COMP DB1 DATA
                                                                                                                //COMMENT:  OPEN CURSOR FOR CASE COMP DB1 DATA IF DECLARE WAS SUCESSFUL
                                                                                                                //COMMENT:  FETCH CURSOR FOR CASE COMP DB1 DATA IF OPEN WAS SUCESSFUL
                                                                                                                //COMMENT: *****************************************************************
            Perform("8153F-READLOG-CCOMP-DBF", "8153F-READLOG-EXIT"); if (Control.ExitProgram) { return; }        //COBOL==> PERFORM 8153F-READLOG-CCOMP-DBF THRU 8153F-READLOG-EXIT.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                Perform("8153O-OPEN-CCOMP-DBF", "8153O-EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM 8153O-OPEN-CCOMP-DBF THRU 8153O-EXIT
                if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
                {
                    Perform("8153N-READLOG-CCOMP-DBF", "8153N-READLOG-EXIT"); if (Control.ExitProgram) { return; }        //COBOL==> PERFORM 8153N-READLOG-CCOMP-DBF THRU 8153N-READLOG-EXIT
                    if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
                    {
                        //Continue                                                                                          //COBOL==> CONTINUE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        Perform("8153C-CLOSE-CCOMP-DBF", "8153C-EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 8153C-CLOSE-CCOMP-DBF THRU 8153C-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "7200-UPDATE-AE-CASE-BASIC-LOOP") { return; }  //Check for pass through to next method
        #endregion 7200-UPDATE-AE-CASE-BASIC-LOOP

        #region 7200-CHECK-AE-CASE-COMP-LOOP
        L_7200_CHECK_AE_CASE_COMP_LOOP:;
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_7200_EXIT;                                                                                   //COBOL==> GO TO 7200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_CASEC_EOF_YES.Value)                                                                      //COBOL==> IF WS-CASEC-EOF-YES
            {
                Perform("8153C-CLOSE-CCOMP-DBF", "8153C-EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 8153C-CLOSE-CCOMP-DBF THRU 8153C-EXIT
                goto L_7200_CHECK_AE_CASE_COMP_EXIT;                                                                //COBOL==> GO TO 7200-CHECK-AE-CASE-COMP-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: NOTE: THE FOLLOWING CODE IS BEING COMMENTED OUT AND REPLACED
                                                                                                                //COMMENT: NOTE: WITH A PERFORM TO SELECT THE CLIENT WITH THE RELATIONSHIP
                                                                                                                //COMMENT: NOTE: OF 'PI' FROM THE PARTICIPATION DB2 TABLE
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     IF RELATIONSHIP153           = 'PI'
                                                                                                                //COMMENT:         MOVE CLIENT-NUMBER153
                                                                                                                //COMMENT:                 TO MV-CLIENT-INFO-NUMBER
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT: *****************************************************************
            WS.PART_FK_CLB_CLIENT_NO.SetValue(WS.CASEC_FK_CLB_CLIENT_NO);                                       //COBOL==> MOVE CASEC-FK-CLB-CLIENT-NO TO PART-FK-CLB-CLIENT-NO.
            WS.PART_RELATIONSHIP.SetValue("PI");                                                                //COBOL==> MOVE 'PI' TO PART-RELATIONSHIP.
            Perform("8300-SELECT-PART-REL", "8300-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8300-SELECT-PART-REL THRU 8300-EXIT.
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(0))
             || (DbConv.SQLCA.SQLCODE.IsEqualTo(-811)))  //COBOL==> IF SQLCODE = 0 OR SQLCODE = -811
            {
                WS.MV_CLIENT_INFO_NUMBER.SetValue(WS.CASEC_FK_CLB_CLIENT_NO);                                       //COBOL==> MOVE CASEC-FK-CLB-CLIENT-NO TO MV-CLIENT-INFO-NUMBER
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
            Perform("8153N-READLOG-CCOMP-DBF", "8153N-READLOG-EXIT"); if (Control.ExitProgram) { return; }        //COBOL==> PERFORM 8153N-READLOG-CCOMP-DBF THRU 8153N-READLOG-EXIT.
            goto L_7200_CHECK_AE_CASE_COMP_LOOP;                                                                //COBOL==> GO TO 7200-CHECK-AE-CASE-COMP-LOOP.
        #endregion 7200-CHECK-AE-CASE-COMP-LOOP

        #region 7200-CHECK-AE-CASE-COMP-EXIT
        L_7200_CHECK_AE_CASE_COMP_EXIT:;
            if (!(WS.IMP_CLIENT_NUMBER_X10.IsEqualTo(WS.MV_CLIENT_INFO_NUMBER)))                                //COBOL==> IF IMP-CLIENT-NUMBER-X10 NOT = MV-CLIENT-INFO-NUMBER
            {
                goto L_7200_UPDATE_AE_CASE_BASIC_LOOP;                                                              //COBOL==> GO TO 7200-UPDATE-AE-CASE-BASIC-LOOP
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_ISN.SetValue(WS.MV_AE_CASE_BASIC_ISN[WS.MV_WRK_PTR.AsInt()]);                                 //COBOL==> MOVE MV-AE-CASE-BASIC-ISN ( MV-WRK-PTR ) TO MV-ISN.
            WS.CASEB_CASE_NUMBER.SetValue(WS.MV_AE_CASE_BASIC_ISN[WS.MV_WRK_PTR.AsInt()]);                      //COBOL==> MOVE MV-AE-CASE-BASIC-ISN ( MV-WRK-PTR ) TO CASEB-CASE-NUMBER.
            Perform("8152-READISN-CASE-BASIC-DBF", "8152-READISN-EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM 8152-READISN-CASE-BASIC-DBF THRU 8152-READISN-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_7200_EXIT;                                                                                   //COBOL==> GO TO 7200-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: WBR IF IMP-NAME = CASE-NAME152
            if (((WS.IMP_LAST_NAME.IsEqualTo(WS.CASEB_CASE_SURNAME))
             && (WS.IMP_FIRST_NAME.IsEqualTo(WS.CASEB_CASE_GIVEN_NAME)))
             && (WS.IMP_INITIAL.IsEqualTo(WS.CASEB_CASE_INITIAL)))  //COBOL==> IF IMP-LAST-NAME = CASEB-CASE-SURNAME AND IMP-FIRST-NAME = CASEB-CASE-GIVEN-NAME AND IMP-INITIAL = CASEB-CASE-INITIAL
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                //COMMENT: WBR     MOVE IMP-NAME TO CASE-NAME152
                WS.CASEB_CASE_SURNAME.SetValue(WS.IMP_LAST_NAME);                                                   //COBOL==> MOVE IMP-LAST-NAME TO CASEB-CASE-SURNAME
                WS.CASEB_CASE_GIVEN_NAME.SetValue(WS.IMP_FIRST_NAME);                                               //COBOL==> MOVE IMP-FIRST-NAME TO CASEB-CASE-GIVEN-NAME
                WS.CASEB_CASE_INITIAL.SetValue(WS.IMP_INITIAL);                                                     //COBOL==> MOVE IMP-INITIAL TO CASEB-CASE-INITIAL
                Perform("8152-UPDT-CASE-BASIC-DBF", "8152-UPDT-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM 8152-UPDT-CASE-BASIC-DBF THRU 8152-UPDT-EXIT
                if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
                {
                    goto L_7200_EXIT;                                                                                   //COBOL==> GO TO 7200-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            goto L_7200_UPDATE_AE_CASE_BASIC_LOOP;                                                              //COBOL==> GO TO 7200-UPDATE-AE-CASE-BASIC-LOOP.
        #endregion 7200-CHECK-AE-CASE-COMP-EXIT

        #region 7200-EXIT
        L_7200_EXIT:;
            if (returnLabel == "7200-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: 7300-MAKE-KNOWN-TO-CSE.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO V-CLIENT-ID-KEY149C.
        ///COMMENT:     MOVE CUR-NAME              TO V-CLIENT-NAME149C.
        ///COMMENT:     MOVE CUR-SOC-SEC-NUM       TO V-SSN149C.
        ///COMMENT:     MOVE CUR-DATE-OF-BIRTH-SEX TO V-DATE-OF-BIRTH-SEX149C.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 7300-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-POINTER149C TO MV-CLIENT-POINTER.
        ///COMMENT:     IF NOT EOF149C AND
        ///COMMENT:        MV-CLIENT-ID          = V-CLIENT-POINTER-1-10149C AND
        ///COMMENT:        CLIENT-NAME149C       = CUR-NAME                  AND
        ///COMMENT:        SSN149C               = CUR-SOC-SEC-NUM           AND
        ///COMMENT:        DATE-OF-BIRTH-SEX149C = CUR-DATE-OF-BIRTH-SEX
        ///COMMENT:         NEXT SENTENCE
        ///COMMENT:     ELSE
        ///COMMENT:         IF NOT EOF149C
        ///COMMENT:             PERFORM 8149C-RELISN-CLIENT-DBF
        ///COMMENT:                THRU 8149C-RELISN-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ******* FILE = C * NF = NOT FOUND *******************************
        ///COMMENT:         MOVE 'CNF' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 7300-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE 'Y'               TO MV-SYS-PART-CSE.
        ///COMMENT:     MOVE MV-CLIENT-POINTER TO CLIENT-POINTER149C.
        ///COMMENT:     MOVE MV-YYMMDD         TO DATE-OF-LAST-UPDATE149C.
        ///COMMENT:     PERFORM 8149C-UPDT-CLIENT-DBF
        ///COMMENT:        THRU 8149C-UPDT-EXIT.
        ///COMMENT: 7300-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE CLIENT SYSTEM PARTICIPATION FOR CSS ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7200-EXIT

        #region 7300-MAKE-KNOWN-TO-CSE
        L_7300_MAKE_KNOWN_TO_CSE:;
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                      //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-FK-CLB-CLIENT-NO.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                        //COBOL==> MOVE CUR-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.CUR_SOC_SEC_NUM);                                                         //COBOL==> MOVE CUR-SOC-SEC-NUM TO CLIENT-SSN.
                                                                                                                //COMMENT: WBR MOVE CUR-DATE-OF-BIRTH-SEX TO V-DATE-OF-BIRTH-SEX149C.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.CUR_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-X8 ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) WS-CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.WS_CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.CUR_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) WS-CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.WS_CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.CUR_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-X8 ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) WS-CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.WS_CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.CUR_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) WS-CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.WS_CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.CUR_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-X8 ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) WS-CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.WS_CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.CUR_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());
            WS.CLIENT_GENDER.SetValue(WS.CUR_SEX);                                                              //COBOL==> MOVE CUR-SEX TO CLIENT-GENDER
                                                                                                                //COMMENT: WBR30
                                                                                                                //COMMENT: WBR PERFORM 8149CF-READLOG-CLIENT-DBF
                                                                                                                //COMMENT: WBR    THRU 8149CF-READLOG-EXIT.
            WS.WS_CLIENT_EOF_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-EOF-NO TO TRUE.
            WS.MV_ABEND_TYPE_NONE.SetValue(true);                                                               //COBOL==> SET MV-ABEND-TYPE-NONE TO TRUE.
            Perform("8400-SELECT-CLIENT", "8400-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8400-SELECT-CLIENT THRU 8400-EXIT.
                                                                                                                  //COMMENT: WBR30
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_7300_EXIT;                                                                                   //COBOL==> GO TO 7300-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: WBR MOVE CLIENT-POINTER149C TO MV-CLIENT-POINTER.
            Perform("7900-BUILD-CLI-PTR-DATA", "7900-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7900-BUILD-CLI-PTR-DATA THRU 7900-EXIT.
            WS.MV_CLIENT_POINTER.SetValue(WS.WS_CLIENT_POINTER);                                                //COBOL==> MOVE WS-CLIENT-POINTER TO MV-CLIENT-POINTER.
            if ((((((!(WS.WS_CLIENT_EOF_YES.Value))
             && (WS.MV_CLIENT_ID.IsEqualTo(WS.CLIENT_FK_CLB_CLIENT_NO)))
             && (WS.CLIENT_CLIENT_NAME.IsEqualTo(WS.CUR_NAME)))
             && (WS.CLIENT_SSN.IsEqualTo(WS.CUR_SOC_SEC_NUM)))
             && (WS.CLIENT_DATE_OF_BIRTH.IsEqualTo(WS.WS_CLIENT_DATE_OF_BIRTH)))
             && (WS.CLIENT_GENDER.IsEqualTo(WS.CUR_SEX)))  //COBOL==> IF NOT WS-CLIENT-EOF-YES AND MV-CLIENT-ID = CLIENT-FK-CLB-CLIENT-NO AND CLIENT-CLIENT-NAME = CUR-NAME AND CLIENT-SSN = CUR-SOC-SEC-NUM AND CLIENT-DATE-OF-BIRTH = WS-CLIENT-DATE-OF-BIRTH AND CLIENT-GENDER = CUR-SEX
            {
                goto EndOfSentence_7;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                                                                                                                    //COMMENT: ******* FILE = C * NF = NOT FOUND *******************************
                WS.MV_ADA_FILE_ACTION.SetValue("CNF");                                                              //COBOL==> MOVE 'CNF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                goto L_7300_EXIT;                                                                                   //COBOL==> GO TO 7300-EXIT
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_7:;
            //COMMENT: WBR REPLACED THE FOLLOWING
            //COMMENT:     MOVE MV-CLIENT-POINTER TO CLIENT-POINTER149C.
            //COMMENT:     MOVE MV-YYMMDD         TO DATE-OF-LAST-UPDATE149C.
            //COMMENT: *****************************************************************
            //COMMENT:  INSERT THE KSD SYSTEM PARTICIPATION DB2 ROW FOR CSS            *
            //COMMENT: *****************************************************************
            WS.MV_SYS_PART_CSE.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO MV-SYS-PART-CSE.
            WS.WS_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                                //COBOL==> MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER.
            Perform("7920-BUILD-SYS-PART-CSS", "7920-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT.
            Perform("8240-INSERT-SYS-PART", "8240-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT.
            Perform("8149C-UPDT-CLIENT-DBF", "8149C-UPDT-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM 8149C-UPDT-CLIENT-DBF THRU 8149C-UPDT-EXIT.
            if (returnLabel == "7300-MAKE-KNOWN-TO-CSE") { return; }  //Check for pass through to next method
        #endregion 7300-MAKE-KNOWN-TO-CSE

        #region 7300-EXIT
        L_7300_EXIT:;
            if (returnLabel == "7300-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: WBR END
        ///COMMENT: 7500-CHECK-FOR-DUP-CLIENT-DBF.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO V-CLIENT-ID-KEY149C.
        ///COMMENT:     MOVE IMP-NAME              TO V-CLIENT-NAME149C.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM       TO V-SSN149C.
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-SEX TO V-DATE-OF-BIRTH-SEX149C.
        ///COMMENT:     MOVE SPACES                TO MV-CLIENT-ID-KEY.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT: 7500-CHK-FOR-DUP-CLNT-DBF-LOOP.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 7500-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF EOF149
        ///COMMENT:          GO TO 7500-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-POINTER149C TO MV-CLIENT-POINTER.
        ///COMMENT:     IF MV-CLIENT-ID          = V-CLIENT-POINTER-1-10149C    AND
        ///COMMENT:        CLIENT-NAME149C       = V-CLIENT-NAME149C        AND
        ///COMMENT:        SSN149C               = V-SSN149C                AND
        ///COMMENT:        DATE-OF-BIRTH-SEX149C = V-DATE-OF-BIRTH-SEX149C
        ///COMMENT: * A CLIENT DBF RECORD ALREADY EXISTS FOR THIS INPUT DATA***
        ///COMMENT:           MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:           MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT:           MOVE 'DUP' TO MV-ADA-FILE-ACTION
        ///COMMENT:           MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:           GO TO 7500-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF MV-CLIENT-ID   NOT EQUAL  V-CLIENT-POINTER-1-10149C
        ///COMMENT:           GO TO 7500-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: 7500-CHK-FOR-DUP-CLNT-DBF-CONT.
        ///COMMENT:        PERFORM 8149CN-READLOG-CLIENT-DBF
        ///COMMENT:            THRU 8149CN-READLOG-EXIT.
        ///COMMENT:        GO TO 7500-CHK-FOR-DUP-CLNT-DBF-LOOP.
        ///COMMENT:  7500-EXIT.
        ///COMMENT:      EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR DUPLICATE CLIENT ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7300-EXIT

        #region 7500-CHECK-FOR-DUP-CLIENT-DBF
        L_7500_CHECK_FOR_DUP_CLIENT_DBF:;
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                      //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-FK-CLB-CLIENT-NO.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH-X8 ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER.
            WS.MV_CLIENT_ID_KEY.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO MV-CLIENT-ID-KEY.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  THE FOLLOWING CODE HAS BEEN REPLACE WITH A PARAGRAPH TO DO A
                                                                                                                //COMMENT:  SELECT ON THE CLIENT DB2 TABLE.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: WBR PERFORM 8149CF-READLOG-CLIENT-DBF
                                                                                                                //COMMENT: WBR    THRU 8149CF-READLOG-EXIT.
                                                                                                                //COMMENT: *****************************************************************
            Perform("8400-SELECT-CLIENT", "8400-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8400-SELECT-CLIENT THRU 8400-EXIT.
            ///COMMENT: *****************************************************************
            if (returnLabel == "7500-CHECK-FOR-DUP-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 7500-CHECK-FOR-DUP-CLIENT-DBF

        #region 7500-CHK-FOR-DUP-CLNT-DBF-LOOP
        L_7500_CHK_FOR_DUP_CLNT_DBF_LOOP:;
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_7500_EXIT;                                                                                   //COBOL==> GO TO 7500-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_CLIENT_EOF_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-EOF-YES
            {
                goto L_7500_EXIT;                                                                                   //COBOL==> GO TO 7500-EXIT
            }                                                                                                   //COBOL==> END-IF.
            Perform("7900-BUILD-CLI-PTR-DATA", "7900-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 7900-BUILD-CLI-PTR-DATA THRU 7900-EXIT.
            WS.MV_CLIENT_POINTER.SetValue(WS.WS_CLIENT_POINTER);                                                //COBOL==> MOVE WS-CLIENT-POINTER TO MV-CLIENT-POINTER.
            if ((((((!(WS.WS_CLIENT_EOF_YES.Value))
             && (WS.MV_CLIENT_ID.IsEqualTo(WS.CLIENT_FK_CLB_CLIENT_NO)))
             && (WS.CLIENT_CLIENT_NAME.IsEqualTo(WS.CUR_NAME)))
             && (WS.CLIENT_SSN.IsEqualTo(WS.CUR_SOC_SEC_NUM)))
             && (WS.CLIENT_DATE_OF_BIRTH.IsEqualTo(WS.WS_CLIENT_DATE_OF_BIRTH)))
             && (WS.CLIENT_GENDER.IsEqualTo(WS.CUR_SEX)))  //COBOL==> IF NOT WS-CLIENT-EOF-YES AND MV-CLIENT-ID = CLIENT-FK-CLB-CLIENT-NO AND CLIENT-CLIENT-NAME = CUR-NAME AND CLIENT-SSN = CUR-SOC-SEC-NUM AND CLIENT-DATE-OF-BIRTH = WS-CLIENT-DATE-OF-BIRTH AND CLIENT-GENDER = CUR-SEX
            {
                //COMMENT: * A CLIENT DBF RECORD ALREADY EXISTS FOR THIS INPUT DATA***
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("DUP");                                                              //COBOL==> MOVE 'DUP' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                goto L_7500_EXIT;                                                                                   //COBOL==> GO TO 7500-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.MV_CLIENT_ID.IsEqualTo(WS.CLIENT_FK_CLB_CLIENT_NO)))                                       //COBOL==> IF MV-CLIENT-ID NOT EQUAL CLIENT-FK-CLB-CLIENT-NO
            {
                goto L_7500_EXIT;                                                                                   //COBOL==> GO TO 7500-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "7500-CHK-FOR-DUP-CLNT-DBF-LOOP") { return; }  //Check for pass through to next method
        #endregion 7500-CHK-FOR-DUP-CLNT-DBF-LOOP

        #region 7500-CHK-FOR-DUP-CLNT-DBF-CONT
        L_7500_CHK_FOR_DUP_CLNT_DBF_CONT:;
            Perform("8149CN-READLOG-CLIENT-DBF", "8149CN-READLOG-EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM 8149CN-READLOG-CLIENT-DBF THRU 8149CN-READLOG-EXIT.
            goto L_7500_CHK_FOR_DUP_CLNT_DBF_LOOP;                                                              //COBOL==> GO TO 7500-CHK-FOR-DUP-CLNT-DBF-LOOP.
        #endregion 7500-CHK-FOR-DUP-CLNT-DBF-CONT

        #region 7500-EXIT
        L_7500_EXIT:;
            if (returnLabel == "7500-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD CLIENT POINTER DATA FROM SYSTEM PARTICIPATION DB2 TABLE
        ///COMMENT:  ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7500-EXIT

        #region 7900-BUILD-CLI-PTR-DATA
        L_7900_BUILD_CLI_PTR_DATA:;
            WS.WS_CLIENT_POINTER.ResetToInitialValue();                                                         //COBOL==> INITIALIZE WS-CLIENT-POINTER.
            WS.WS_CLIPTR_CLIENT_ID.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                        //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO WS-CLIPTR-CLIENT-ID SYSPART-FK-CLB-CLIENT-NO.
            WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);
            WS.WS_CLIPTR_VERIFIED_SSN_FLAG.SetValue(WS.CLIENT_VERIFIED_SSN_FLAG);                               //COBOL==> MOVE CLIENT-VERIFIED-SSN-FLAG TO WS-CLIPTR-VERIFIED-SSN-FLAG.
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                      //COBOL==> MOVE CLIENT-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME.
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.CLIENT_SSN);                                                      //COBOL==> MOVE CLIENT-SSN TO SYSPART-FK-CLI-SSN.
            WS.WS_SYSPART_EOF_NO.SetValue(true);                                                                //COBOL==> SET WS-SYSPART-EOF-NO TO TRUE.
                                                                                                                //COMMENT: 819 * LOGIC TO INITIALIZE SYSTEM PARTICIPATION WORK AREA
            for (WS.WS_SYS_PART_CNT.SetValue(1); (!(WS.WS_SYS_PART_CNT.IsGreaterThan(10))); WS.WS_SYS_PART_CNT.Add(1))  //COBOL==> PERFORM 7960-INIT-SYSTEM-PART-TABLE THRU 7960-EXIT VARYING WS-SYS-PART-CNT FROM 1 BY 1 UNTIL WS-SYS-PART-CNT > 10.
            {
                Perform("7960-INIT-SYSTEM-PART-TABLE", "7960-EXIT"); if (Control.ExitProgram) { return; }
            }
            WS.WS_SYS_PART_CNT.SetValue(ZEROES);                                                                //COBOL==> MOVE ZEROES TO WS-SYS-PART-CNT.
                                                                                                                //COMMENT: 819 * LOGIC TO INITIALIZE SYSTEM PARTICIPATION WORK AREA
            Perform("8200-DECLARE-SYSPART", "8200-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8200-DECLARE-SYSPART THRU 8200-EXIT.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                Perform("8210-OPEN-SYS-PART", "8210-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8210-OPEN-SYS-PART THRU 8210-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                while (!(WS.WS_SYSPART_EOF_YES.Value))                                                              //COBOL==> PERFORM 7910-CHK-SYS-CD THRU 7910-EXIT UNTIL WS-SYSPART-EOF-YES
                {
                    Perform("7910-CHK-SYS-CD", "7910-EXIT"); if (Control.ExitProgram) { return; }
                }
                DisplayToLog("AFTER 7910-CHK-SYS-CD");                                                              //COBOL==> DISPLAY "AFTER 7910-CHK-SYS-CD"
                DisplayToLog("WS CLIENT POINTER" + WS.WS_CLIENT_POINTER.AsString());                                //COBOL==> DISPLAY "WS CLIENT POINTER" WS-CLIENT-POINTER
                DisplayToLog("MV CLIENT POINTER" + WS.MV_CLIENT_POINTER.AsString());                                //COBOL==> DISPLAY "MV CLIENT POINTER" MV-CLIENT-POINTER
            }                                                                                                   //COBOL==> END-IF.
            Perform("8230-CLOSE-SYS-PART", "8230-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 8230-CLOSE-SYS-PART THRU 8230-EXIT.
            if (returnLabel == "7900-BUILD-CLI-PTR-DATA") { return; }  //Check for pass through to next method
        #endregion 7900-BUILD-CLI-PTR-DATA

        #region 7900-EXIT
        L_7900_EXIT:;
            if (returnLabel == "7900-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK SYSTEM CODE FOR PARTICIPATION ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7900-EXIT

        #region 7910-CHK-SYS-CD
        L_7910_CHK_SYS_CD:;
            Perform("8220-FETCH-SYS-PART", "8220-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 8220-FETCH-SYS-PART THRU 8220-EXIT.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                //COMMENT: 819 * LOGIC TO INITIALIZE SYSTEM PARTICIPATION WORK AREA
                WS.WS_SYS_PART_CNT.Add(1);                                                                          //COBOL==> ADD 1 TO WS-SYS-PART-CNT
                WS.WS_DB2_SYSTEM_PART[WS.WS_SYS_PART_CNT.AsInt()].SetValue(WS.DCLKSD_SYSTEM_PART);                  //COBOL==> MOVE DCLKSD-SYSTEM-PART TO WS-DB2-SYSTEM-PART ( WS-SYS-PART-CNT )
                                                                                                                    //COMMENT: 819 * LOGIC TO INITIALIZE SYSTEM PARTICIPATION WORK AREA
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_AE))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-AE
                {
                    WS.WS_CLIPTR_SYSPART_AE.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-AE MV-SYS-PART-AE
                    WS.MV_SYS_PART_AE.SetValue(WS.SYSPART_PARTICIPATION_FLAG);
                }                                                                                                   //COBOL==> END-IF
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_CS))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-CS
                {
                    WS.WS_CLIPTR_SYSPART_CS.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-CS MV-SYS-PART-CSE
                    WS.MV_SYS_PART_CSE.SetValue(WS.SYSPART_PARTICIPATION_FLAG);
                }                                                                                                   //COBOL==> END-IF
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_KA))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-KA
                {
                    WS.WS_CLIPTR_SYSPART_KA.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-KA MV-SYS-PART-KANPAY
                    WS.MV_SYS_PART_KANPAY.SetValue(WS.SYSPART_PARTICIPATION_FLAG);
                }                                                                                                   //COBOL==> END-IF
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_KS))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-KS
                {
                    WS.WS_CLIPTR_SYSPART_KS.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-KS MV-SYS-PART-KSCARES
                    WS.MV_SYS_PART_KSCARES.SetValue(WS.SYSPART_PARTICIPATION_FLAG);
                }                                                                                                   //COBOL==> END-IF
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_FA))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-FA
                {
                    WS.WS_CLIPTR_SYSPART_FA.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-FA MV-SYS-PART-FACTS
                    WS.MV_SYS_PART_FACTS.SetValue(WS.SYSPART_PARTICIPATION_FLAG);
                }                                                                                                   //COBOL==> END-IF
                                                                                                                    //COMMENT:  BELOW LISTED CODE ADDED BY RAJ ON 7/6/2017 TO HANDLE KMIS
                                                                                                                    //COMMENT:  SYSTEM PART RECORD.
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_KM))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-KM
                {
                    WS.WS_CLIPTR_SYSPART_KM.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-KM MV-SYS-PART-KMIS
                    WS.MV_SYS_PART_KMIS.SetValue(WS.SYSPART_PARTICIPATION_FLAG);
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "7910-CHK-SYS-CD") { return; }  //Check for pass through to next method
        #endregion 7910-CHK-SYS-CD

        #region 7910-EXIT
        L_7910_EXIT:;
            if (returnLabel == "7910-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD SYSTEM PARTICIPATION INFORMATION FOR CSS ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7910-EXIT

        #region 7920-BUILD-SYS-PART-CSS
        L_7920_BUILD_SYS_PART_CSS:;
            WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                   //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO SYSPART-FK-CLB-CLIENT-NO.
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                      //COBOL==> MOVE CLIENT-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME.
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.CLIENT_SSN);                                                      //COBOL==> MOVE CLIENT-SSN TO SYSPART-FK-CLI-SSN.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_CS);                                                   //COBOL==> MOVE WS-SYS-CD-CS TO SYSPART-SYSTEM-CODE.
            WS.SYSPART_PARTICIPATION_FLAG.SetValue(WS.WS_CLIPTR_SYSPART_CS);                                    //COBOL==> MOVE WS-CLIPTR-SYSPART-CS TO SYSPART-PARTICIPATION-FLAG.
            if (returnLabel == "7920-BUILD-SYS-PART-CSS") { return; }  //Check for pass through to next method
        #endregion 7920-BUILD-SYS-PART-CSS

        #region 7920-EXIT
        L_7920_EXIT:;
            if (returnLabel == "7920-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD SYSTEM PARTICIPATION INFORMATION FOR KEES ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7920-EXIT

        #region 7930-BUILD-SYS-PART-KEES
        L_7930_BUILD_SYS_PART_KEES:;
            WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                   //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO SYSPART-FK-CLB-CLIENT-NO.
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                      //COBOL==> MOVE CLIENT-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME.
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.CLIENT_SSN);                                                      //COBOL==> MOVE CLIENT-SSN TO SYSPART-FK-CLI-SSN.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_AE);                                                   //COBOL==> MOVE WS-SYS-CD-AE TO SYSPART-SYSTEM-CODE.
            WS.SYSPART_PARTICIPATION_FLAG.SetValue(WS.WS_CLIPTR_SYSPART_AE);                                    //COBOL==> MOVE WS-CLIPTR-SYSPART-AE TO SYSPART-PARTICIPATION-FLAG.
            if (returnLabel == "7930-BUILD-SYS-PART-KEES") { return; }  //Check for pass through to next method
        #endregion 7930-BUILD-SYS-PART-KEES

        #region 7930-EXIT
        L_7930_EXIT:;
            if (returnLabel == "7930-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD SYSTEM PARTICIPATION INFORMATION FOR KANPAY ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7930-EXIT

        #region 7940-BUILD-SYS-PART-KANPAY
        L_7940_BUILD_SYS_PART_KANPAY:;
            WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                   //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO SYSPART-FK-CLB-CLIENT-NO.
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                      //COBOL==> MOVE CLIENT-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME.
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.CLIENT_SSN);                                                      //COBOL==> MOVE CLIENT-SSN TO SYSPART-FK-CLI-SSN.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_KA);                                                   //COBOL==> MOVE WS-SYS-CD-KA TO SYSPART-SYSTEM-CODE.
            WS.SYSPART_PARTICIPATION_FLAG.SetValue(WS.WS_CLIPTR_SYSPART_KA);                                    //COBOL==> MOVE WS-CLIPTR-SYSPART-KA TO SYSPART-PARTICIPATION-FLAG.
            if (returnLabel == "7940-BUILD-SYS-PART-KANPAY") { return; }  //Check for pass through to next method
        #endregion 7940-BUILD-SYS-PART-KANPAY

        #region 7940-EXIT
        L_7940_EXIT:;
            if (returnLabel == "7940-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD SYSTEM PARTICIPATION INFORMATION FOR KSCARE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7940-EXIT

        #region 7950-BUILD-SYS-PART-KSCARE
        L_7950_BUILD_SYS_PART_KSCARE:;
            WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                   //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO SYSPART-FK-CLB-CLIENT-NO.
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                      //COBOL==> MOVE CLIENT-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME.
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.CLIENT_SSN);                                                      //COBOL==> MOVE CLIENT-SSN TO SYSPART-FK-CLI-SSN.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_KS);                                                   //COBOL==> MOVE WS-SYS-CD-KS TO SYSPART-SYSTEM-CODE.
            WS.SYSPART_PARTICIPATION_FLAG.SetValue(WS.WS_CLIPTR_SYSPART_KS);                                    //COBOL==> MOVE WS-CLIPTR-SYSPART-KS TO SYSPART-PARTICIPATION-FLAG.
            if (returnLabel == "7950-BUILD-SYS-PART-KSCARE") { return; }  //Check for pass through to next method
        #endregion 7950-BUILD-SYS-PART-KSCARE

        #region 7950-EXIT
        L_7950_EXIT:;
            if (returnLabel == "7950-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT:  BELOW LISTED TWO PARAGRAPHS ADDED BY RAJ ON 7/6/2017 TO
        ///COMMENT:  BUILD FACTS AND KMIS SYSTEM PART RECORDS.
        ///COMMENT:  7953-BUILD-SYS-PART-FACTS & 7956-BUILD-SYS-PART-KMIS.
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD SYSTEM PARTICIPATION INFORMATION FOR FACTS ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7950-EXIT

        #region 7953-BUILD-SYS-PART-FACTS
        L_7953_BUILD_SYS_PART_FACTS:;
            WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                   //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO SYSPART-FK-CLB-CLIENT-NO.
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                      //COBOL==> MOVE CLIENT-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME.
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.CLIENT_SSN);                                                      //COBOL==> MOVE CLIENT-SSN TO SYSPART-FK-CLI-SSN.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_FA);                                                   //COBOL==> MOVE WS-SYS-CD-FA TO SYSPART-SYSTEM-CODE.
            WS.SYSPART_PARTICIPATION_FLAG.SetValue(WS.WS_CLIPTR_SYSPART_FA);                                    //COBOL==> MOVE WS-CLIPTR-SYSPART-FA TO SYSPART-PARTICIPATION-FLAG.
            if (returnLabel == "7953-BUILD-SYS-PART-FACTS") { return; }  //Check for pass through to next method
        #endregion 7953-BUILD-SYS-PART-FACTS

        #region 7953-EXIT
        L_7953_EXIT:;
            if (returnLabel == "7953-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD SYSTEM PARTICIPATION INFORMATION FOR KMIS ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7953-EXIT

        #region 7956-BUILD-SYS-PART-KMIS
        L_7956_BUILD_SYS_PART_KMIS:;
            WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                   //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO SYSPART-FK-CLB-CLIENT-NO.
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                      //COBOL==> MOVE CLIENT-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME.
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.CLIENT_SSN);                                                      //COBOL==> MOVE CLIENT-SSN TO SYSPART-FK-CLI-SSN.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_KM);                                                   //COBOL==> MOVE WS-SYS-CD-KM TO SYSPART-SYSTEM-CODE.
            WS.SYSPART_PARTICIPATION_FLAG.SetValue(WS.WS_CLIPTR_SYSPART_KM);                                    //COBOL==> MOVE WS-CLIPTR-SYSPART-KM TO SYSPART-PARTICIPATION-FLAG.
            if (returnLabel == "7956-BUILD-SYS-PART-KMIS") { return; }  //Check for pass through to next method
        #endregion 7956-BUILD-SYS-PART-KMIS

        #region 7956-EXIT
        L_7956_EXIT:;
            if (returnLabel == "7956-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: 819 * LOGIC TO INITIALIZE SYSTEM PARTICIPATION WORK AREA
        ///COMMENT: *****************************************************************
        ///COMMENT:  INITIALIZE INTERNAL SYSTEM PARTICIPATION WORK TABLE AREA ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7956-EXIT

        #region 7960-INIT-SYSTEM-PART-TABLE
        L_7960_INIT_SYSTEM_PART_TABLE:;
            WS.WS_DB2_SYSTEM_PART[WS.WS_SYS_PART_CNT.AsInt()].ResetToInitialValue();                            //COBOL==> INITIALIZE WS-DB2-SYSTEM-PART ( WS-SYS-PART-CNT ) .
            if (returnLabel == "7960-INIT-SYSTEM-PART-TABLE") { return; }  //Check for pass through to next method
        #endregion 7960-INIT-SYSTEM-PART-TABLE

        #region 7960-EXIT
        L_7960_EXIT:;
            if (returnLabel == "7960-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: 819 * LOGIC TO INITIALIZE SYSTEM PARTICIPATION WORK AREA
        ///COMMENT: 8113F-READLOG-KPART-DBF.
        ///COMMENT:     @READLOGICAL113   FIRST.
        ///COMMENT:     IF RESPONSE-CODE113 > ZERO AND NOT EOF113
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 113               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RLF'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE113  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8113F-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DECLARE CURSOR FOR KSD KSC PARTICIPATION DB2 TABLE
        ///COMMENT:  NOTE THIS WAS COMMENTED OUT BECAUSE KSC AND AE DATA IS MERGED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8113F-READLOG-KPART-DBF.
        ///COMMENT:     EXEC SQL
        ///COMMENT:          DECLARE KPARTCSR CURSOR FOR
        ///COMMENT:           SELECT KESSEP_TIMESTAMP
        ///COMMENT:                , PART_CLOSE_DT
        ///COMMENT:                , PART_OPEN_DT
        ///COMMENT:                , PGM_TYPE
        ///COMMENT:                , PROGRAM_SUBTYPE
        ///COMMENT:                , CREATED_BY
        ///COMMENT:                , CREATED_TIMESTAMP
        ///COMMENT:                , LAST_MODIFIED_BY
        ///COMMENT:                , LAST_MODIFIED_TMST
        ///COMMENT:                , FK_KSC_CASE_NO
        ///COMMENT:                , FK_CLB_CLIENT_NO
        ///COMMENT:             FROM KSD_KSC_PARTICIPAT
        ///COMMENT:            WHERE FK_KSC_CASE_NO = :KPART-FK-KSC-CASE-NO
        ///COMMENT:              AND FK_CLB_CLIENT_NO = :KPART-FK-CLB-CLIENT-NO
        ///COMMENT:     END-EXEC.
        ///COMMENT:     EVALUATE SQLCODE
        ///COMMENT:         WHEN 0
        ///COMMENT:              CONTINUE
        ///COMMENT:         WHEN OTHER
        ///COMMENT:              MOVE 'A' TO MV-ABEND-TYPE
        ///COMMENT:              MOVE 113 TO MV-ADA-FILE-NUMBER
        ///COMMENT:              MOVE 'RLF' TO MV-ADA-FILE-ACTION
        ///COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-EVALUATE.
        ///COMMENT: 8113F-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 8113N-READLOG-KPART-DBF.
        ///COMMENT:     @READLOGICAL113.
        ///COMMENT:     IF RESPONSE-CODE113 > ZERO AND NOT EOF113
        ///COMMENT:         MOVE 'A'              TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 113              TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RL '            TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE113 TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8113N-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSD KSC PARTICIPATION DB2 TABLE
        ///COMMENT:  NOTE THIS WAS COMMENTED OUT BECAUSE KSC AND AE DATA IS MERGED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8113N-READLOG-KPART-DBF.
        ///COMMENT:     EXEC SQL
        ///COMMENT:          FETCH KPARTCSR
        ///COMMENT:           INTO :KPART-KESSEP-TIMESTAMP
        ///COMMENT:              , :KPART-PART-CLOSE-DT
        ///COMMENT:              , :KPART-PART-OPEN-DT
        ///COMMENT:              , :KPART-PGM-TYPE
        ///COMMENT:              , :KPART-PROGRAM-SUBTYPE
        ///COMMENT:              , :KPART-CREATED-BY
        ///COMMENT:              , :KPART-CREATED-TIMESTAMP
        ///COMMENT:              , :KPART-LAST-MODIFIED-BY
        ///COMMENT:              , :KPART-LAST-MODIFIED-TMST
        ///COMMENT:              , :KPART-FK-KSC-CASE-NO
        ///COMMENT:              , :KPART-FK-CLB-CLIENT-NO
        ///COMMENT:     END-EXEC.
        ///COMMENT:     EVALUATE SQLCODE
        ///COMMENT:         WHEN 0
        ///COMMENT:              CONTINUE
        ///COMMENT:         WHEN +100
        ///COMMENT:              SET WS-KPART-EOF-YES TO TRUE
        ///COMMENT:         WHEN OTHER
        ///COMMENT:              MOVE 'A' TO MV-ABEND-TYPE
        ///COMMENT:              MOVE 113 TO MV-ADA-FILE-NUMBER
        ///COMMENT:              MOVE 'RL ' TO MV-ADA-FILE-ACTION
        ///COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-EVALUATE.
        ///COMMENT: 8113N-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD KSC PARTICIPATION DB2 TABLE
        ///COMMENT:  NOTE THIS WAS COMMENTED OUT BECAUSE KSC AND AE DATA IS MERGED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8113O-OPEN-KPART-DBF.
        ///COMMENT:     EXEC SQL
        ///COMMENT:          OPEN KPARTCSR
        ///COMMENT:     END-EXEC.
        ///COMMENT:     EVALUATE SQLCODE
        ///COMMENT:         WHEN 0
        ///COMMENT:              CONTINUE
        ///COMMENT:         WHEN OTHER
        ///COMMENT:              MOVE 'A' TO MV-ABEND-TYPE
        ///COMMENT:              MOVE 113 TO MV-ADA-FILE-NUMBER
        ///COMMENT:              MOVE 'RLF' TO MV-ADA-FILE-ACTION
        ///COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-EVALUATE.
        ///COMMENT: 81130-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD KSC PARTICIPATION DB2 TABLE
        ///COMMENT:  NOTE THIS WAS COMMENTED OUT BECAUSE KSC AND AE DATA IS MERGED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8113C-CLOSE-KPART-DBF.
        ///COMMENT:     EXEC SQL
        ///COMMENT:          CLOSE KPARTCSR
        ///COMMENT:     END-EXEC.
        ///COMMENT:     EVALUATE SQLCODE
        ///COMMENT:         WHEN 0
        ///COMMENT:              CONTINUE
        ///COMMENT:         WHEN OTHER
        ///COMMENT:              MOVE 'A' TO MV-ABEND-TYPE
        ///COMMENT:              MOVE 113 TO MV-ADA-FILE-NUMBER
        ///COMMENT:              MOVE 'RL ' TO MV-ADA-FILE-ACTION
        ///COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-EVALUATE.
        ///COMMENT: 8113C-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 8114F-READLOG-KCC-DBF.
        ///COMMENT:     @READLOGICAL114   FIRST.
        ///COMMENT:     IF RESPONSE-CODE114 > ZERO AND NOT EOF114
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 114               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RLF'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE114  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8114F-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DECLARE CURSOR FOR KSD KSC CASE COMPOSITION DB2 TABLE
        ///COMMENT:  NOTE THIS WAS COMMENTED OUT BECAUSE KSC AND AE DATA IS MERGED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8114F-READLOG-KCC-DBF.
        ///COMMENT:     EXEC SQL
        ///COMMENT:          DECLARE KCCOMPCSR CURSOR FOR
        ///COMMENT:           SELECT CASE_CLOSE_DT
        ///COMMENT:                , CASE_OPEN_DT
        ///COMMENT:                , CREATED_BY
        ///COMMENT:                , CREATED_TIMESTAMP
        ///COMMENT:                , LAST_MODIFIED_BY
        ///COMMENT:                , LAST_MODIFIED_TMST
        ///COMMENT:                , FK_CLB_CLIENT_NO
        ///COMMENT:                , FK_KSC_CASE_CSE_NO
        ///COMMENT:             FROM KSD_KSC_CASE_COMP
        ///COMMENT:            WHERE FK_CLB_CLIENT_NO = :KCASECMP-FK-CLB-CLIENT-NO
        ///COMMENT:     END-EXEC.
        ///COMMENT:     EVALUATE SQLCODE
        ///COMMENT:         WHEN 0
        ///COMMENT:              CONTINUE
        ///COMMENT:         WHEN OTHER
        ///COMMENT:              MOVE 'A' TO MV-ABEND-TYPE
        ///COMMENT:              MOVE 114 TO MV-ADA-FILE-NUMBER
        ///COMMENT:              MOVE 'RLF' TO MV-ADA-FILE-ACTION
        ///COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-EVALUATE.
        ///COMMENT: 8114F-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 8114N-READLOG-KCC-DBF.
        ///COMMENT:     @READLOGICAL114.
        ///COMMENT:     IF RESPONSE-CODE114 > ZERO AND NOT EOF114
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 114               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RL '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE114  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8114N-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSD KSC CASE COMPOSITION DB2 TABLE
        ///COMMENT:  NOTE THIS WAS COMMENTED OUT BECAUSE KSC AND AE DATA IS MERGED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8114N-READLOG-KCC-DBF.
        ///COMMENT:     EXEC SQL
        ///COMMENT:          FETCH KCCOMPCSR
        ///COMMENT:           INTO :KCASECMP-CASE-CLOSE-DT
        ///COMMENT:              , :KCASECMP-CASE-OPEN-DT
        ///COMMENT:              , :KCASECMP-CREATED-BY
        ///COMMENT:              , :KCASECMP-CREATED-TIMESTAMP
        ///COMMENT:              , :KCASECMP-LAST-MODIFIED-BY
        ///COMMENT:              , :KCASECMP-LAST-MODIFIED-TMST
        ///COMMENT:              , :KCASECMP-FK-CLB-CLIENT-NO
        ///COMMENT:              , :KCASECMP-FK-KSC-CASE-CSE-NO
        ///COMMENT:     END-EXEC.
        ///COMMENT:     EVALUATE SQLCODE
        ///COMMENT:         WHEN 0
        ///COMMENT:              CONTINUE
        ///COMMENT:         WHEN +100
        ///COMMENT:              SET WS-KCASECMP-EOF-YES TO TRUE
        ///COMMENT:         WHEN OTHER
        ///COMMENT:              MOVE 'A' TO MV-ABEND-TYPE
        ///COMMENT:              MOVE 114 TO MV-ADA-FILE-NUMBER
        ///COMMENT:              MOVE 'RL ' TO MV-ADA-FILE-ACTION
        ///COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-EVALUATE.
        ///COMMENT: 8114N-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD KSC CASE COMPOSITION DB2 TABLE
        ///COMMENT:  NOTE THIS WAS COMMENTED OUT BECAUSE KSC AND AE DATA IS MERGED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8114O-OPEN-KCASE-COMP-DBF.
        ///COMMENT:     EXEC SQL
        ///COMMENT:          OPEN KCCOMPCSR
        ///COMMENT:     END-EXEC.
        ///COMMENT:     EVALUATE SQLCODE
        ///COMMENT:         WHEN 0
        ///COMMENT:              CONTINUE
        ///COMMENT:         WHEN OTHER
        ///COMMENT:              MOVE 'A' TO MV-ABEND-TYPE
        ///COMMENT:              MOVE 114 TO MV-ADA-FILE-NUMBER
        ///COMMENT:              MOVE 'RLF' TO MV-ADA-FILE-ACTION
        ///COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-EVALUATE.
        ///COMMENT: 81140-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD KSC CASE COMPOSITION DB2 TABLE
        ///COMMENT:  NOTE THIS WAS COMMENTED OUT BECAUSE KSC AND AE DATA IS MERGED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8114C-CLOSE-KCASE-COMP-DBF.
        ///COMMENT:     EXEC SQL
        ///COMMENT:          CLOSE KCCOMPCSR
        ///COMMENT:     END-EXEC.
        ///COMMENT:     EVALUATE SQLCODE
        ///COMMENT:         WHEN 0
        ///COMMENT:              CONTINUE
        ///COMMENT:         WHEN OTHER
        ///COMMENT:              MOVE 'A' TO MV-ABEND-TYPE
        ///COMMENT:              MOVE 114 TO MV-ADA-FILE-NUMBER
        ///COMMENT:              MOVE 'RL ' TO MV-ADA-FILE-ACTION
        ///COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-EVALUATE.
        ///COMMENT: 8114C-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM KSD NEXT CLIENT ID DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 7960-EXIT

        #region 8149-READISN-CLIENT-DBF
        L_8149_READISN_CLIENT_DBF:;
            DbConv.ExecuteSqlQuery("SELECT IDENT , NEXT_CLIENT_ID INTO {0} , {1} FROM KSD_NEXT_CLIENT_ID WHERE IDENT = {2} ",  //COBOL==> EXEC SQL SELECT IDENT , NEXT_CLIENT_ID INTO :NEXTCLI-IDENT , :NEXTCLI-NEXT-CLIENT-ID FROM KSD_NEXT_CLIENT_ID WHERE IDENT = :WS-IDENT-0000000001 END-EXEC.
                                 WS.NEXTCLI_IDENT, WS.NEXTCLI_NEXT_CLIENT_ID, WS.WS_IDENT_0000000001);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RH ");                                                              //COBOL==> MOVE 'RH ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149-READISN-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149-READISN-CLIENT-DBF

        #region 8149-READISN-EXIT
        L_8149_READISN_EXIT:;
            if (returnLabel == "8149-READISN-EXIT") { return; }                                                 //COBOL==> EXIT.
        ///COMMENT: 8149-READISN-CLIENT-DBF.
        ///COMMENT:     @READISN149  HOLD  ISN = 1.
        ///COMMENT:     IF RESPONSE-CODE149 > ZERO
        ///COMMENT:         MOVE 'A'              TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149              TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RH1'            TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149 TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149-READISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 8149-UPDT-CLIENT-DBF.
        ///COMMENT:     @UPDATE149.
        ///COMMENT:     IF RESPONSE-CODE149 > ZERO
        ///COMMENT:         MOVE 'A'              TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149              TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'U  '            TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149 TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149-UPDT-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM KSD NEXT CLIENT ID DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149-READISN-EXIT

        #region 8149-UPDT-CLIENT-DBF
        L_8149_UPDT_CLIENT_DBF:;
            WS.NEXTCLI_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                          //COBOL==> EXEC CICS ASSIGN USERID ( NEXTCLI-LAST-MODIFIED-BY ) END-EXEC.
            DbConv.ExecuteSql("UPDATE KSD_NEXT_CLIENT_ID SET NEXT_CLIENT_ID = {0},  LAST_MODIFIED_BY = {1},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE IDENT = {2}", WS.NEXTCLI_NEXT_CLIENT_ID, WS.NEXTCLI_LAST_MODIFIED_BY, WS.WS_IDENT_0000000001);  //COBOL==> EXEC SQL UPDATE KSD_NEXT_CLIENT_ID SET NEXT_CLIENT_ID = :NEXTCLI-NEXT-CLIENT-ID , LAST_MODIFIED_BY = :NEXTCLI-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE IDENT = :WS-IDENT-0000000001 END-EXEC.
                                                                                                                                                                                                                                                          // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("U  ");                                                              //COBOL==> MOVE 'U  ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149-UPDT-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149-UPDT-CLIENT-DBF

        #region 8149-UPDT-EXIT
        L_8149_UPDT_EXIT:;
            if (returnLabel == "8149-UPDT-EXIT") { return; }                                                    //COBOL==> EXIT.
        ///COMMENT: 8149AF-READLOG-CLIENT-DBF.
        ///COMMENT:     @READLOGICAL149A  FIRST.
        ///COMMENT:     IF RESPONSE-CODE149A > ZERO AND NOT EOF149A
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'ARF'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149A TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149AF-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DECLARE CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149-UPDT-EXIT

        #region 8149AF-READLOG-CLIENT-DBF
        L_8149AF_READLOG_CLIENT_DBF:;
            WS.WS_CLIENT_1ST_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-1ST-YES TO TRUE.
                                                                                                                // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE CLIENTCSR CURSOR FOR SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE FROM KSD_CLIENT WHERE SSN = :CLIENT-SSN ORDER BY SSN , CLIENT_NAME , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("ARF");                                                              //COBOL==> MOVE 'ARF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149AF-READLOG-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149AF-READLOG-CLIENT-DBF

        #region 8149AF-READLOG-EXIT
        L_8149AF_READLOG_EXIT:;
            if (returnLabel == "8149AF-READLOG-EXIT") { return; }                                               //COBOL==> EXIT.
        ///COMMENT: 8149AN-READLOG-CLIENT-DBF.
        ///COMMENT:     @READLOGICAL149A.
        ///COMMENT:     IF RESPONSE-CODE149A > ZERO AND NOT EOF149A
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'ARL'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149A TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149AN-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149AF-READLOG-EXIT

        #region 8149AN-READLOG-CLIENT-DBF
        L_8149AN_READLOG_CLIENT_DBF:;
            DbConv.FetchReaderRow("CLIENTCSR",                                                               //COBOL==> EXEC SQL FETCH CLIENTCSR INTO :CLIENT-SSN , :CLIENT-PREVIOUS-SSN , :CLIENT-PHONETIC-DATA , :CLIENT-DT-OF-LAST-UPDATE , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-VERIFIED-SSN-FLAG , :CLIENT-CLIENT-NAME , :CLIENT-CREATED-BY , :CLIENT-CREATED-TIMESTAMP , :CLIENT-LAST-MODIFIED-BY , :CLIENT-LAST-MODIFIED-TMST , :CLIENT-FK-CLB-CLIENT-NO , :CLIENT-NAME-TYPE END-EXEC.
                             WS.CLIENT_SSN, WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_PHONETIC_DATA, WS.CLIENT_DT_OF_LAST_UPDATE, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_CLIENT_NAME, WS.CLIENT_CREATED_BY, WS.CLIENT_CREATED_TIMESTAMP, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_LAST_MODIFIED_TMST, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_NAME_TYPE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                WS.WS_CLIENT_1ST_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-1ST-NO TO TRUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                if (WS.WS_CLIENT_1ST_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-1ST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("ARF");                                                              //COBOL==> MOVE 'ARF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("ARL");                                                              //COBOL==> MOVE 'ARL' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149AN-READLOG-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149AN-READLOG-CLIENT-DBF

        #region 8149AN-READLOG-EXIT
        L_8149AN_READLOG_EXIT:;
            if (returnLabel == "8149AN-READLOG-EXIT") { return; }                                               //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149AN-READLOG-EXIT

        #region 8149AO-OPEN-CLIENT-DBF
        L_8149AO_OPEN_CLIENT_DBF:;
            DbConv.OpenReader("CLIENTCSR");                                                                     //COBOL==> EXEC SQL OPEN CLIENTCSR END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("ARF");                                                              //COBOL==> MOVE 'ARF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149AO-OPEN-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149AO-OPEN-CLIENT-DBF

        #region 8149AO-EXIT
        L_8149AO_EXIT:;
            if (returnLabel == "8149AO-EXIT") { return; }                                                       //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149AO-EXIT

        #region 8149AC-CLOSE-CLIENT-DBF
        L_8149AC_CLOSE_CLIENT_DBF:;
            DbConv.CloseReader("CLIENTCSR");                                                                    //COBOL==> EXEC SQL CLOSE CLIENTCSR END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN -501
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(-501)))
            {
                DbConv.SQLCA.SQLCODE.SetValue(ZEROES);                                                              //COBOL==> MOVE ZEROES TO SQLCODE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                if (WS.WS_CLIENT_1ST_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-1ST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("ARF");                                                              //COBOL==> MOVE 'ARF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("ARL");                                                              //COBOL==> MOVE 'ARL' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149AC-CLOSE-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149AC-CLOSE-CLIENT-DBF

        #region 8149AC-EXIT
        L_8149AC_EXIT:;
            if (returnLabel == "8149AC-EXIT") { return; }                                                       //COBOL==> EXIT.
        ///COMMENT: 8149B-ADD-CLIENT-DBF.
        ///COMMENT:     @ADD149B.
        ///COMMENT:     IF RESPONSE-CODE149B > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'BA '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149B TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149B-ADD-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  INSERT ROW INTO THE KSD CLIENT DB2 TABLE
        ///COMMENT: *****************************************************************
        #endregion 8149AC-EXIT

        #region 8149B-ADD-CLIENT-DBF
        L_8149B_ADD_CLIENT_DBF:;
            WS.CLIENT_CREATED_BY.SetValue(Control.GetUserID());                                                 //COBOL==> EXEC CICS ASSIGN USERID ( CLIENT-CREATED-BY ) END-EXEC.
            WS.CLIENT_LAST_MODIFIED_BY.SetValue(WS.CLIENT_CREATED_BY);                                          //COBOL==> MOVE CLIENT-CREATED-BY TO CLIENT-LAST-MODIFIED-BY.
            DbConv.ExecuteSql("INSERT INTO KSD_CLIENT  ( SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE  ) VALUES  ( {0}, {1}, {2}, CONVERT (DATE, CURRENT_TIMESTAMP) , {3}, {4}, {5}, {6}, {7}, CURRENT_TIMESTAMP , {8}, CURRENT_TIMESTAMP , {9}, {10} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_CLIENT ( SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE ) VALUES ( :CLIENT-SSN , :CLIENT-PREVIOUS-SSN , :CLIENT-PHONETIC-DATA , CONVERT (DATE, CURRENT_TIMESTAMP) , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-VERIFIED-SSN-FLAG , :CLIENT-CLIENT-NAME , :CLIENT-CREATED-BY , CURRENT_TIMESTAMP , :CLIENT-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :CLIENT-FK-CLB-CLIENT-NO , :CLIENT-NAME-TYPE ) END-EXEC.       //Replacement Code: 3/3/2022
                                 WS.CLIENT_SSN, WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_PHONETIC_DATA, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_CLIENT_NAME, WS.CLIENT_CREATED_BY, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_NAME_TYPE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("BA ");                                                              //COBOL==> MOVE 'BA ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("ADD  CLIENT:" + WS.MV_ADA_RESPONSE_CD.AsString());                                    //COBOL==> DISPLAY "ADD  CLIENT:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149B-ADD-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149B-ADD-CLIENT-DBF

        #region 8149B-ADD-EXIT
        L_8149B_ADD_EXIT:;
            if (returnLabel == "8149B-ADD-EXIT") { return; }                                                    //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  INSERT ROW INTO THE KSD CLIENT DB2 TABLE
        ///COMMENT: *****************************************************************
        #endregion 8149B-ADD-EXIT

        #region 8149C-ADD-CLIENT-DBF
        L_8149C_ADD_CLIENT_DBF:;
            WS.CLIENT_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                           //COBOL==> EXEC CICS ASSIGN USERID ( CLIENT-LAST-MODIFIED-BY ) END-EXEC.
            DbConv.ExecuteSql("INSERT INTO KSD_CLIENT  ( SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE  ) VALUES  ( {0}, {1}, {2}, CONVERT (DATE, CURRENT_TIMESTAMP) , {3}, {4}, {5}, {6}, {7}, {8}, {9}, CURRENT_TIMESTAMP , {10}, {11} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_CLIENT ( SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE ) VALUES ( :CLIENT-SSN , :CLIENT-PREVIOUS-SSN , :CLIENT-PHONETIC-DATA , CONVERT (DATE, CURRENT_TIMESTAMP) , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-VERIFIED-SSN-FLAG , :CLIENT-CLIENT-NAME , :CLIENT-CREATED-BY , :CLIENT-CREATED-TIMESTAMP , :CLIENT-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :CLIENT-FK-CLB-CLIENT-NO , :CLIENT-NAME-TYPE ) END-EXEC.       //Replacement Code: 3/3/2022
                                 WS.CLIENT_SSN, WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_PHONETIC_DATA, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_CLIENT_NAME, WS.CLIENT_CREATED_BY, WS.CLIENT_CREATED_TIMESTAMP, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_NAME_TYPE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("CA ");                                                              //COBOL==> MOVE 'CA ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("8149C ADD  CLIENT:" + WS.MV_ADA_RESPONSE_CD.AsString());                              //COBOL==> DISPLAY "8149C ADD  CLIENT:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149C-ADD-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149C-ADD-CLIENT-DBF

        #region 8149C-ADD-EXIT
        L_8149C_ADD_EXIT:;
            if (returnLabel == "8149C-ADD-EXIT") { return; }                                                    //COBOL==> EXIT.
        ///COMMENT: 8149CF-READLOG-CLIENT-DBF.
        ///COMMENT:     @READLOGICAL149C  HOLD  FIRST.
        ///COMMENT:     IF RESPONSE-CODE149C > ZERO AND NOT EOF149C
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'CHF'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149C TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149CF-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DECLARE CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149C-ADD-EXIT

        #region 8149CF-READLOG-CLIENT-DBF
        L_8149CF_READLOG_CLIENT_DBF:;
            WS.WS_CLIENT_1ST_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-1ST-YES TO TRUE.
                                                                                                                // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE CSRCLIENT CURSOR FOR SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO AND SSN = :CLIENT-SSN AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH AND GENDER = :CLIENT-GENDER AND CLIENT_NAME = :CLIENT-CLIENT-NAME ORDER BY FK_CLB_CLIENT_NO , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("CHF");                                                              //COBOL==> MOVE 'CHF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149CF-READLOG-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149CF-READLOG-CLIENT-DBF

        #region 8149CF-READLOG-EXIT
        L_8149CF_READLOG_EXIT:;
            if (returnLabel == "8149CF-READLOG-EXIT") { return; }                                               //COBOL==> EXIT.
        ///COMMENT: 8149CN-READLOG-CLIENT-DBF.
        ///COMMENT:     @READLOGICAL149C  HOLD.
        ///COMMENT:     IF RESPONSE-CODE149C > ZERO AND NOT EOF149C
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'CH '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149C TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149CN-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149CF-READLOG-EXIT

        #region 8149CN-READLOG-CLIENT-DBF
        L_8149CN_READLOG_CLIENT_DBF:;
            DbConv.FetchReaderRow("CSRCLIENT",                                                               //COBOL==> EXEC SQL FETCH CSRCLIENT INTO :CLIENT-SSN , :CLIENT-PREVIOUS-SSN , :CLIENT-PHONETIC-DATA , :CLIENT-DT-OF-LAST-UPDATE , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-VERIFIED-SSN-FLAG , :CLIENT-CLIENT-NAME , :CLIENT-CREATED-BY , :CLIENT-CREATED-TIMESTAMP , :CLIENT-LAST-MODIFIED-BY , :CLIENT-LAST-MODIFIED-TMST , :CLIENT-FK-CLB-CLIENT-NO , :CLIENT-NAME-TYPE END-EXEC.
                             WS.CLIENT_SSN, WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_PHONETIC_DATA, WS.CLIENT_DT_OF_LAST_UPDATE, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_CLIENT_NAME, WS.CLIENT_CREATED_BY, WS.CLIENT_CREATED_TIMESTAMP, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_LAST_MODIFIED_TMST, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_NAME_TYPE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                WS.WS_CLIENT_1ST_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-1ST-NO TO TRUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                if (WS.WS_CLIENT_1ST_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-1ST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("CHF");                                                              //COBOL==> MOVE 'CHF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("CH ");                                                              //COBOL==> MOVE 'CH ' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149CN-READLOG-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149CN-READLOG-CLIENT-DBF

        #region 8149CN-READLOG-EXIT
        L_8149CN_READLOG_EXIT:;
            if (returnLabel == "8149CN-READLOG-EXIT") { return; }                                               //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149CN-READLOG-EXIT

        #region 8149CO-OPEN-CLIENT-DBF
        L_8149CO_OPEN_CLIENT_DBF:;
            DbConv.OpenReader("CSRCLIENT");                                                                     //COBOL==> EXEC SQL OPEN CSRCLIENT END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("CHF");                                                              //COBOL==> MOVE 'CHF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149CO-OPEN-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149CO-OPEN-CLIENT-DBF

        #region 8149CO-EXIT
        L_8149CO_EXIT:;
            if (returnLabel == "8149CO-EXIT") { return; }                                                       //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149CO-EXIT

        #region 8149CC-CLOSE-CLIENT-DBF
        L_8149CC_CLOSE_CLIENT_DBF:;
            DbConv.CloseReader("CSRCLIENT");                                                                    //COBOL==> EXEC SQL CLOSE CSRCLIENT END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                if (WS.WS_CLIENT_1ST_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-1ST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("CHF");                                                              //COBOL==> MOVE 'CHF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("CH ");                                                              //COBOL==> MOVE 'CH ' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149CC-CLOSE-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149CC-CLOSE-CLIENT-DBF

        #region 8149CC-EXIT
        L_8149CC_EXIT:;
            if (returnLabel == "8149CC-EXIT") { return; }                                                       //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THIS ROUTINE IS NO LONGER NEEDED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8149C-RELISN-CLIENT-DBF.
        ///COMMENT:     @RELISN149C.
        ///COMMENT:     IF RESPONSE-CODE149C > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'CRI'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149C TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149C-RELISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT: 8149C-UPDT-CLIENT-DBF.
        ///COMMENT:     @UPDATE149C.
        ///COMMENT:     IF RESPONSE-CODE149C > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'CU '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149C TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149C-UPDT-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE ROW ON KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149CC-EXIT

        #region 8149C-UPDT-CLIENT-DBF
        L_8149C_UPDT_CLIENT_DBF:;
            WS.CLIENT_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                           //COBOL==> EXEC CICS ASSIGN USERID ( CLIENT-LAST-MODIFIED-BY ) END-EXEC.
                                                                                                                //COMMENT:  RAJ 10/24/2017 PHONETIC-DATA FIEDL REMOVE FROM UPDATE STATEMENT
                                                                                                                //COMMENT:               , PHONETIC_DATA = :CLIENT-PHONETIC-DATA
            DbConv.ExecuteSql("UPDATE KSD_CLIENT SET PREVIOUS_SSN = {0},  DT_OF_LAST_UPDATE = CONVERT (DATE, CURRENT_TIMESTAMP),  DATE_OF_BIRTH = {1},  GENDER = {2},  VERIFIED_SSN_FLAG = {3},  LAST_MODIFIED_BY = {4},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE FK_CLB_CLIENT_NO = {5} AND CLIENT_NAME = {6} AND SSN = {7}", WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_CLIENT_NAME, WS.CLIENT_SSN);  //COBOL==> EXEC SQL UPDATE KSD_CLIENT SET PREVIOUS_SSN = :CLIENT-PREVIOUS-SSN , DT_OF_LAST_UPDATE = CONVERT (DATE, CURRENT_TIMESTAMP) , DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH , GENDER = :CLIENT-GENDER , VERIFIED_SSN_FLAG = :CLIENT-VERIFIED-SSN-FLAG , LAST_MODIFIED_BY = :CLIENT-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO AND CLIENT_NAME = :CLIENT-CLIENT-NAME AND SSN = :CLIENT-SSN END-EXEC.       //Replacement Code: 3/3/2022       //Replacement Code: 3/3/2022
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("CU ");                                                              //COBOL==> MOVE 'CU ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("8149C CLIENT UPDT:" + WS.MV_ADA_RESPONSE_CD.AsString());                              //COBOL==> DISPLAY "8149C CLIENT UPDT:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149C-UPDT-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149C-UPDT-CLIENT-DBF

        #region 8149C-UPDT-EXIT
        L_8149C_UPDT_EXIT:;
            if (returnLabel == "8149C-UPDT-EXIT") { return; }                                                   //COBOL==> EXIT.
        ///COMMENT: 8149C-DEL-CLIENT-DBF.
        ///COMMENT:     @DELETE149C.
        ///COMMENT:     IF RESPONSE-CODE149C > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'CD '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149C TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149C-DEL-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DELETE ROW FROM KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149C-UPDT-EXIT

        #region 8149C-DEL-CLIENT-DBF
        L_8149C_DEL_CLIENT_DBF:;
            DbConv.ExecuteSql("DELETE FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = {0} AND CLIENT_NAME = {1} AND SSN = {2} AND DATE_OF_BIRTH = {3} AND GENDER = {4}", WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_CLIENT_NAME, WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER);  //COBOL==> EXEC SQL DELETE FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO AND CLIENT_NAME = :CLIENT-CLIENT-NAME AND SSN = :CLIENT-SSN AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH AND GENDER = :CLIENT-GENDER END-EXEC.
                                                                                                                                                                                                                                                                                 // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
                                                                                                                                                                                                                                                                                 // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100))))                  //COBOL==> WHEN +100
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("CD ");                                                              //COBOL==> MOVE 'CD ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149C-DEL-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149C-DEL-CLIENT-DBF

        #region 8149C-DEL-EXIT
        L_8149C_DEL_EXIT:;
            if (returnLabel == "8149C-DEL-EXIT") { return; }                                                    //COBOL==> EXIT.
        ///COMMENT: 8149DF-READLOG-CLIENT-DBF.
        ///COMMENT:     @READLOGICAL149D  HOLD  FIRST.
        ///COMMENT:     IF RESPONSE-CODE149D > ZERO AND NOT EOF149D
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'DHF'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149D TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149DF-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DECLARE CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149C-DEL-EXIT

        #region 8149DF-READLOG-CLIENT-DBF
        L_8149DF_READLOG_CLIENT_DBF:;
            WS.WS_CLIENT_1ST_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-1ST-YES TO TRUE.
                                                                                                                // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE CLICSR CURSOR FOR SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE FROM KSD_CLIENT WHERE SSN = :CLIENT-SSN AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH AND CLIENT_NAME = :CLIENT-CLIENT-NAME ORDER BY CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("DHF");                                                              //COBOL==> MOVE 'DHF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("DECLARE CURSOR:" + WS.MV_ADA_RESPONSE_CD.AsString());                                 //COBOL==> DISPLAY "DECLARE CURSOR:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149DF-READLOG-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149DF-READLOG-CLIENT-DBF

        #region 8149DF-READLOG-EXIT
        L_8149DF_READLOG_EXIT:;
            if (returnLabel == "8149DF-READLOG-EXIT") { return; }                                               //COBOL==> EXIT.
        ///COMMENT: 8149DN-READLOG-CLIENT-DBF.
        ///COMMENT:     @READLOGICAL149D  HOLD.
        ///COMMENT:     IF RESPONSE-CODE149D > ZERO AND NOT EOF149D
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'DH '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149D TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149DN-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149DF-READLOG-EXIT

        #region 8149DN-READLOG-CLIENT-DBF
        L_8149DN_READLOG_CLIENT_DBF:;
            DbConv.FetchReaderRow("CLICSR",                                                                  //COBOL==> EXEC SQL FETCH CLICSR INTO :CLIENT-SSN , :CLIENT-PREVIOUS-SSN , :CLIENT-PHONETIC-DATA , :CLIENT-DT-OF-LAST-UPDATE , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-VERIFIED-SSN-FLAG , :CLIENT-CLIENT-NAME , :CLIENT-CREATED-BY , :CLIENT-CREATED-TIMESTAMP , :CLIENT-LAST-MODIFIED-BY , :CLIENT-LAST-MODIFIED-TMST , :CLIENT-FK-CLB-CLIENT-NO , :CLIENT-NAME-TYPE END-EXEC.
                             WS.CLIENT_SSN, WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_PHONETIC_DATA, WS.CLIENT_DT_OF_LAST_UPDATE, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_CLIENT_NAME, WS.CLIENT_CREATED_BY, WS.CLIENT_CREATED_TIMESTAMP, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_LAST_MODIFIED_TMST, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_NAME_TYPE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                WS.WS_CLIENT_1ST_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-1ST-NO TO TRUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                if (WS.WS_CLIENT_1ST_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-1ST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("DHF");                                                              //COBOL==> MOVE 'DHF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("DH ");                                                              //COBOL==> MOVE 'DH ' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("FETCH   CURSOR....:" + WS.MV_ADA_RESPONSE_CD.AsString());                             //COBOL==> DISPLAY "FETCH   CURSOR....:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149DN-READLOG-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149DN-READLOG-CLIENT-DBF

        #region 8149DN-READLOG-EXIT
        L_8149DN_READLOG_EXIT:;
            if (returnLabel == "8149DN-READLOG-EXIT") { return; }                                               //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149DN-READLOG-EXIT

        #region 8149DO-OPEN-CLIENT-DBF
        L_8149DO_OPEN_CLIENT_DBF:;
            DbConv.OpenReader("CLICSR");                                                                        //COBOL==> EXEC SQL OPEN CLICSR END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("DHF");                                                              //COBOL==> MOVE 'DHF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("OPEN CURSOR:" + WS.MV_ADA_RESPONSE_CD.AsString());                                    //COBOL==> DISPLAY "OPEN CURSOR:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149DO-OPEN-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149DO-OPEN-CLIENT-DBF

        #region 8149DO-EXIT
        L_8149DO_EXIT:;
            if (returnLabel == "8149DO-EXIT") { return; }                                                       //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149DO-EXIT

        #region 8149DC-CLOSE-CLIENT-DBF
        L_8149DC_CLOSE_CLIENT_DBF:;
            DbConv.CloseReader("CLICSR");                                                                       //COBOL==> EXEC SQL CLOSE CLICSR END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                if (WS.WS_CLIENT_1ST_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-1ST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("DHF");                                                              //COBOL==> MOVE 'DHF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("DH ");                                                              //COBOL==> MOVE 'DH ' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("CLOSE CURSOR:" + WS.MV_ADA_RESPONSE_CD.AsString());                                   //COBOL==> DISPLAY "CLOSE CURSOR:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149DC-CLOSE-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149DC-CLOSE-CLIENT-DBF

        #region 8149DC-EXIT
        L_8149DC_EXIT:;
            if (returnLabel == "8149DC-EXIT") { return; }                                                       //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THIS ROUTINE IS NO LONGER NEEDED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8149D-RELISN-CLIENT-DBF.
        ///COMMENT:     @RELISN149D.
        ///COMMENT:     IF RESPONSE-CODE149D > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'DRI'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149D TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149D-RELISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT: 8149D-UPDT-CLIENT-DBF.
        ///COMMENT:     @UPDATE149D.
        ///COMMENT:     IF RESPONSE-CODE149D > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'DU '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149D TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149D-UPDT-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE ROW ON KSD CLIENT DB2 TABLE
        ///COMMENT: *****************************************************************
        #endregion 8149DC-EXIT

        #region 8149D-UPDT-CLIENT-DBF
        L_8149D_UPDT_CLIENT_DBF:;
            WS.CLIENT_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                           //COBOL==> EXEC CICS ASSIGN USERID ( CLIENT-LAST-MODIFIED-BY ) END-EXEC.
                                                                                                                //COMMENT:  RAJ 10/24/2017 PHONETIC-DATA FIEDL REMOVE FROM UPDATE STATEMENT
                                                                                                                //COMMENT:               , PHONETIC_DATA = :CLIENT-PHONETIC-DATA
            DbConv.ExecuteSql("UPDATE KSD_CLIENT SET PREVIOUS_SSN = {0},  DT_OF_LAST_UPDATE = CONVERT (DATE, CURRENT_TIMESTAMP),  GENDER = {1},  VERIFIED_SSN_FLAG = {2},  LAST_MODIFIED_BY = {3},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE FK_CLB_CLIENT_NO = {4} AND SSN = {5} AND CLIENT_NAME = {6} AND DATE_OF_BIRTH = {7}", WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_SSN, WS.CLIENT_CLIENT_NAME, WS.CLIENT_DATE_OF_BIRTH);  //COBOL==> EXEC SQL UPDATE KSD_CLIENT SET PREVIOUS_SSN = :CLIENT-PREVIOUS-SSN , DT_OF_LAST_UPDATE = CONVERT (DATE, CURRENT_TIMESTAMP) , GENDER = :CLIENT-GENDER , VERIFIED_SSN_FLAG = :CLIENT-VERIFIED-SSN-FLAG , LAST_MODIFIED_BY = :CLIENT-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO AND SSN = :CLIENT-SSN AND CLIENT_NAME = :CLIENT-CLIENT-NAME AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH END-EXEC.       //Replacement Code: 3/3/2022       //Replacement Code: 3/3/2022
valuateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("DU ");                                                              //COBOL==> MOVE 'DU ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("8149D CLIENT UPDT:" + WS.MV_ADA_RESPONSE_CD.AsString());                              //COBOL==> DISPLAY "8149D CLIENT UPDT:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8149D-UPDT-CLIENT-DBF") { return; }  //Check for pass through to next method
        #endregion 8149D-UPDT-CLIENT-DBF

        #region 8149D-UPDT-EXIT
        L_8149D_UPDT_EXIT:;
            if (returnLabel == "8149D-UPDT-EXIT") { return; }                                                   //COBOL==> EXIT.
        ///COMMENT: 8152-READISN-CASE-BASIC-DBF.
        ///COMMENT:     @READISN152   HOLD  ISN = MV-ISN.
        ///COMMENT:     IF RESPONSE-CODE152 > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 152               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RHI'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE152  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8152-READISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM KSD_CASE_BASIC DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8149D-UPDT-EXIT

        #region 8152-READISN-CASE-BASIC-DBF
        L_8152_READISN_CASE_BASIC_DBF:;
            DbConv.ExecuteSqlQuery("SELECT CASE_NUMBER , TELEPHONE , CASE_STATUS , CASE_STATUS_DATE , CASE_SURNAME , CASE_GIVEN_NAME , CASE_INITIAL , CASEWORKR_GIVN_NME , CASEWORKR_SURNAME , CASEWORKR_MI , AR_SURNAME , AR_GIVEN_NAME , AR_INITIAL , FILE_LOCATION , PAYEE_SURNAME , PAYEE_GIVEN_NAME , PAYEE_INITIAL , TELEPHONE_2_NUMBER , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} , {10} , {11} , {12} , {13} , {14} , {15} , {16} , {17} , {18} , {19} , {20} , {21} FROM KSD_CASE_BASIC WHERE CASE_NUMBER = {22} ",  //COBOL==> EXEC SQL SELECT CASE_NUMBER , TELEPHONE , CASE_STATUS , CASE_STATUS_DATE , CASE_SURNAME , CASE_GIVEN_NAME , CASE_INITIAL , CASEWORKR_GIVN_NME , CASEWORKR_SURNAME , CASEWORKR_MI , AR_SURNAME , AR_GIVEN_NAME , AR_INITIAL , FILE_LOCATION , PAYEE_SURNAME , PAYEE_GIVEN_NAME , PAYEE_INITIAL , TELEPHONE_2_NUMBER , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST INTO :CASEB-CASE-NUMBER , :CASEB-TELEPHONE , :CASEB-CASE-STATUS , :CASEB-CASE-STATUS-DATE , :CASEB-CASE-SURNAME , :CASEB-CASE-GIVEN-NAME , :CASEB-CASE-INITIAL , :CASEB-CASEWORKR-GIVN-NME , :CASEB-CASEWORKR-SURNAME , :CASEB-CASEWORKR-MI , :CASEB-AR-SURNAME , :CASEB-AR-GIVEN-NAME , :CASEB-AR-INITIAL , :CASEB-FILE-LOCATION , :CASEB-PAYEE-SURNAME , :CASEB-PAYEE-GIVEN-NAME , :CASEB-PAYEE-INITIAL , :CASEB-TELEPHONE-2-NUMBER , :CASEB-CREATED-TIMESTAMP , :CASEB-CREATED-BY , :CASEB-LAST-MODIFIED-BY , :CASEB-LAST-MODIFIED-TMST FROM KSD_CASE_BASIC WHERE CASE_NUMBER = :CASEB-CASE-NUMBER END-EXEC.
                                 WS.CASEB_CASE_NUMBER, WS.CASEB_TELEPHONE, WS.CASEB_CASE_STATUS, WS.CASEB_CASE_STATUS_DATE, WS.CASEB_CASE_SURNAME, WS.CASEB_CASE_GIVEN_NAME, WS.CASEB_CASE_INITIAL, WS.CASEB_CASEWORKR_GIVN_NME, WS.CASEB_CASEWORKR_SURNAME, WS.CASEB_CASEWORKR_MI, WS.CASEB_AR_SURNAME, WS.CASEB_AR_GIVEN_NAME, WS.CASEB_AR_INITIAL, WS.CASEB_FILE_LOCATION, WS.CASEB_PAYEE_SURNAME, WS.CASEB_PAYEE_GIVEN_NAME, WS.CASEB_PAYEE_INITIAL, WS.CASEB_TELEPHONE_2_NUMBER, WS.CASEB_CREATED_TIMESTAMP, WS.CASEB_CREATED_BY, WS.CASEB_LAST_MODIFIED_BY, WS.CASEB_LAST_MODIFIED_TMST, WS.CASEB_CASE_NUMBER);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(152);                                                                //COBOL==> MOVE 152 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RHI");                                                              //COBOL==> MOVE 'RHI' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8152-READISN-CASE-BASIC-DBF") { return; }  //Check for pass through to next method
        #endregion 8152-READISN-CASE-BASIC-DBF

        #region 8152-READISN-EXIT
        L_8152_READISN_EXIT:;
            if (returnLabel == "8152-READISN-EXIT") { return; }                                                 //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THIS ROUTINE IS NO LONGER NEEDED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8152-RELISN-CASE-BASIC-DBF.
        ///COMMENT:     @RELISN152.
        ///COMMENT:     IF RESPONSE-CODE149C > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 152               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE ' RI'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE152  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8152-RELISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT: 8152-UPDT-CASE-BASIC-DBF.
        ///COMMENT:     @UPDATE152   ISN = MV-ISN.
        ///COMMENT:     IF RESPONSE-CODE152 > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 152               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'UI '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE152  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8152-UPDT-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE ROW ON KSD CASE BASIC DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8152-READISN-EXIT

        #region 8152-UPDT-CASE-BASIC-DBF
        L_8152_UPDT_CASE_BASIC_DBF:;
            DbConv.ExecuteSql("UPDATE KSD_CASE_BASIC SET CASE_SURNAME = {0},  CASE_GIVEN_NAME = {1},  CASE_INITIAL = {2},  LAST_MODIFIED_BY = {3},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE CASE_NUMBER = {4}", WS.CASEB_CASE_SURNAME, WS.CASEB_CASE_GIVEN_NAME, WS.CASEB_CASE_INITIAL, WS.CASEB_LAST_MODIFIED_BY, WS.CASEB_CASE_NUMBER);  //COBOL==> EXEC SQL UPDATE KSD_CASE_BASIC SET CASE_SURNAME = :CASEB-CASE-SURNAME , CASE_GIVEN_NAME = :CASEB-CASE-GIVEN-NAME , CASE_INITIAL = :CASEB-CASE-INITIAL , LAST_MODIFIED_BY = :CASEB-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE CASE_NUMBER = :CASEB-CASE-NUMBER END-EXEC.
                                                                                                                                                                                                                                                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(152);                                                                //COBOL==> MOVE 152 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("UI ");                                                              //COBOL==> MOVE 'UI ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("8152  CB UPDATE  :" + WS.MV_ADA_RESPONSE_CD.AsString());                              //COBOL==> DISPLAY "8152  CB UPDATE  :" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8152-UPDT-CASE-BASIC-DBF") { return; }  //Check for pass through to next method
        #endregion 8152-UPDT-CASE-BASIC-DBF

        #region 8152-UPDT-EXIT
        L_8152_UPDT_EXIT:;
            if (returnLabel == "8152-UPDT-EXIT") { return; }                                                    //COBOL==> EXIT.
        ///COMMENT: 8153F-READLOG-CCOMP-DBF.
        ///COMMENT:     @READLOGICAL153   FIRST.
        ///COMMENT:     IF RESPONSE-CODE153 > ZERO AND NOT EOF153
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 153               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RLF'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE153  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8153F-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DECLARE CURSOR FOR KSD CASE COMPOSITION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8152-UPDT-EXIT

        #region 8153F-READLOG-CCOMP-DBF
        L_8153F_READLOG_CCOMP_DBF:;
            WS.WS_CASEC_1ST_YES.SetValue(true);                                                                 //COBOL==> SET WS-CASEC-1ST-YES TO TRUE.
                                                                                                                // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE CASCMPCSR CURSOR FOR SELECT BENEFIT_MONTH , PARTICIPATION_CODE , MEDICAL_SUBTYPE , POSITION_ON_APP , CASE_OPEN_DT , CASE_CLOSE_DT , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE FROM KSD_CASE_COMP WHERE FK_CSB_CASE_NO = :CASEC-FK-CSB-CASE-NO ORDER BY FK_CSB_CASE_NO , BENEFIT_MONTH , POSITION_ON_APP END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8153F-READLOG-CCOMP-DBF") { return; }  //Check for pass through to next method
        #endregion 8153F-READLOG-CCOMP-DBF

        #region 8153F-READLOG-EXIT
        L_8153F_READLOG_EXIT:;
            if (returnLabel == "8153F-READLOG-EXIT") { return; }                                                //COBOL==> EXIT.
        ///COMMENT: 8153N-READLOG-CCOMP-DBF.
        ///COMMENT:     @READLOGICAL153.
        ///COMMENT:     IF RESPONSE-CODE153 > ZERO AND NOT EOF153
        ///COMMENT:         MOVE 'A'              TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 153              TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RL '            TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE153 TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8153N-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSD CASE COMPOSITION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8153F-READLOG-EXIT

        #region 8153N-READLOG-CCOMP-DBF
        L_8153N_READLOG_CCOMP_DBF:;
            DbConv.FetchReaderRow("CASCMPCSR",                                                               //COBOL==> EXEC SQL FETCH CASCMPCSR INTO :CASEC-BENEFIT-MONTH , :CASEC-PARTICIPATION-CODE , :CASEC-MEDICAL-SUBTYPE , :CASEC-POSITION-ON-APP , :CASEC-CASE-OPEN-DT , :CASEC-CASE-CLOSE-DT , :CASEC-CREATED-TIMESTAMP , :CASEC-CREATED-BY , :CASEC-LAST-MODIFIED-BY , :CASEC-LAST-MODIFIED-TMST , :CASEC-FK-CLB-CLIENT-NO , :CASEC-FK-CSB-CASE-NO , :CASEC-FK-PGB-PROG-TYPE END-EXEC.
                             WS.CASEC_BENEFIT_MONTH, WS.CASEC_PARTICIPATION_CODE, WS.CASEC_MEDICAL_SUBTYPE, WS.CASEC_POSITION_ON_APP, WS.CASEC_CASE_OPEN_DT, WS.CASEC_CASE_CLOSE_DT, WS.CASEC_CREATED_TIMESTAMP, WS.CASEC_CREATED_BY, WS.CASEC_LAST_MODIFIED_BY, WS.CASEC_LAST_MODIFIED_TMST, WS.CASEC_FK_CLB_CLIENT_NO, WS.CASEC_FK_CSB_CASE_NO, WS.CASEC_FK_PGB_PROG_TYPE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                WS.WS_CASEC_1ST_NO.SetValue(true);                                                                  //COBOL==> SET WS-CASEC-1ST-NO TO TRUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CASEC_EOF_YES.SetValue(true);                                                                 //COBOL==> SET WS-CASEC-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                if (WS.WS_CASEC_1ST_YES.Value)                                                                      //COBOL==> IF WS-CASEC-1ST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8153N-READLOG-CCOMP-DBF") { return; }  //Check for pass through to next method
        #endregion 8153N-READLOG-CCOMP-DBF

        #region 8153N-READLOG-EXIT
        L_8153N_READLOG_EXIT:;
            if (returnLabel == "8153N-READLOG-EXIT") { return; }                                                //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD CASE COMPOSITION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8153N-READLOG-EXIT

        #region 8153O-OPEN-CCOMP-DBF
        L_8153O_OPEN_CCOMP_DBF:;
            DbConv.OpenReader("CASCMPCSR");                                                                     //COBOL==> EXEC SQL OPEN CASCMPCSR END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8153O-OPEN-CCOMP-DBF") { return; }  //Check for pass through to next method
        #endregion 8153O-OPEN-CCOMP-DBF

        #region 8153O-EXIT
        L_8153O_EXIT:;
            if (returnLabel == "8153O-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD CASE COMPOSITION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8153O-EXIT

        #region 8153C-CLOSE-CCOMP-DBF
        L_8153C_CLOSE_CCOMP_DBF:;
            DbConv.CloseReader("CASCMPCSR");                                                                    //COBOL==> EXEC SQL CLOSE CASCMPCSR END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                if (WS.WS_CASEC_1ST_YES.Value)                                                                      //COBOL==> IF WS-CASEC-1ST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8153C-CLOSE-CCOMP-DBF") { return; }  //Check for pass through to next method
        #endregion 8153C-CLOSE-CCOMP-DBF

        #region 8153C-EXIT
        L_8153C_EXIT:;
            if (returnLabel == "8153C-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: 8154-ADD-CLIENT-BASIC-DBF.
        ///COMMENT:     @ADD154   ISN = IMP-CLIENT-NUMBER.
        ///COMMENT:     IF RESPONSE-CODE154 > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 154               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'AI '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE154  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8154-ADD-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  INSERT ROW INTO KSD CLIENT BASIC DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8153C-EXIT

        #region 8154-ADD-CLIENT-BASIC-DBF
        L_8154_ADD_CLIENT_BASIC_DBF:;
            WS.CLIENTB_CREATED_BY.SetValue(Control.GetUserID());                                                //COBOL==> EXEC CICS ASSIGN USERID ( CLIENTB-CREATED-BY ) END-EXEC.
            WS.CLIENTB_LAST_MODIFIED_BY.SetValue(WS.CLIENTB_CREATED_BY);                                        //COBOL==> MOVE CLIENTB-CREATED-BY TO CLIENTB-LAST-MODIFIED-BY.
            WS.CLIENTB_CIS_PREFERRED_ID.SetValue(WS.CLIENTB_CLIENT_NUMBER);                                     //COBOL==> MOVE CLIENTB-CLIENT-NUMBER TO CLIENTB-CIS-PREFERRED-ID.
            WS.CLIENTB_CIS_REPL_IND.SetValue("P");                                                              //COBOL==> MOVE 'P' TO CLIENTB-CIS-REPL-IND.
            DbConv.ExecuteSql("INSERT INTO KSD_CLIENT_BASIC  ( CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , SENSITIVE_FLAG , CIS_PREFERRED_ID , NAME_TYPE  ) VALUES  ( {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, CURRENT_TIMESTAMP , {44}, CURRENT_TIMESTAMP , {45}, {46}, {47} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_CLIENT_BASIC ( CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , SENSITIVE_FLAG , CIS_PREFERRED_ID , NAME_TYPE ) VALUES ( :CLIENTB-CLIENT-NUMBER , :CLIENTB-CLIENT-GIVEN-NAME , :CLIENTB-CLIENT-INITIALS , :CLIENTB-CLIENT-SURNAME , :CLIENTB-CIS-REPL-IND , :CLIENTB-WORK-PHONE , :CLIENTB-SSN , :CLIENTB-GENDER , :CLIENTB-PARENT-RGHTS-SEV , :CLIENTB-PRNT-RGHTS-SEV-DT , :CLIENTB-LEGAL-STATUS , :CLIENTB-INSURANCE-CODE , :CLIENTB-INITIAL-CUSTODY-DT , :CLIENTB-HOME-PHONE , :CLIENTB-DATE-OF-BIRTH , :CLIENTB-CURR-PLACEMNT-DT , :CLIENTB-CURRENT-PLACEMENT , :CLIENTB-CSEA-G-CAUSE-CODE , :CLIENTB-CSEA-G-CAUSE-CL-DT , :CLIENTB-CSEA-COOP-CODE , :CLIENTB-COUNTY-CRT-COMMIT , :CLIENTB-MONTHS-ASST-AF , :CLIENTB-MONTHS-ASST-GA , :CLIENTB-MO-DEATH-DT , :CLIENTB-MO-PRT-DT , :CLIENTB-FA-DEATH-DT , :CLIENTB-FA-PRT-DT , :CLIENTB-MPI-ID , :CLIENTB-MED-COVERAGE-IND , :CLIENTB-INSURANCE-CARRIER , :CLIENTB-INSURANCE-POLCY-NO , :CLIENTB-SPOKEN-LANGUAGE , :CLIENTB-WRITTEN-LANGUAGE , :CLIENTB-STATE-OF-BIRTH , :CLIENTB-SCHOOL-DISTRICT , :CLIENTB-ETHNIC-CLASS , :CLIENTB-SUFFIX-NAME , :CLIENTB-EMPLOYER-NAME , :CLIENTB-EARNED-INCOME-AMT , :CLIENTB-INCOME-FREQUENCY , :CLIENTB-KEES-ABMS-ID , :CLIENTB-EMAIL-ADDRESS , :CLIENTB-OCCUPATION , :CLIENTB-CREATED-BY , CURRENT_TIMESTAMP , :CLIENTB-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :CLIENTB-SENSITIVE-FLAG , :CLIENTB-CIS-PREFERRED-ID , :CLIENTB-NAME-TYPE ) END-EXEC.
                                 WS.CLIENTB_CLIENT_NUMBER, WS.CLIENTB_CLIENT_GIVEN_NAME, WS.CLIENTB_CLIENT_INITIALS, WS.CLIENTB_CLIENT_SURNAME, WS.CLIENTB_CIS_REPL_IND, WS.CLIENTB_WORK_PHONE, WS.CLIENTB_SSN, WS.CLIENTB_GENDER, WS.CLIENTB_PARENT_RGHTS_SEV, WS.CLIENTB_PRNT_RGHTS_SEV_DT, WS.CLIENTB_LEGAL_STATUS, WS.CLIENTB_INSURANCE_CODE, WS.CLIENTB_INITIAL_CUSTODY_DT, WS.CLIENTB_HOME_PHONE, WS.CLIENTB_DATE_OF_BIRTH, WS.CLIENTB_CURR_PLACEMNT_DT, WS.CLIENTB_CURRENT_PLACEMENT, WS.CLIENTB_CSEA_G_CAUSE_CODE, WS.CLIENTB_CSEA_G_CAUSE_CL_DT, WS.CLIENTB_CSEA_COOP_CODE, WS.CLIENTB_COUNTY_CRT_COMMIT, WS.CLIENTB_MONTHS_ASST_AF, WS.CLIENTB_MONTHS_ASST_GA, WS.CLIENTB_MO_DEATH_DT, WS.CLIENTB_MO_PRT_DT, WS.CLIENTB_FA_DEATH_DT, WS.CLIENTB_FA_PRT_DT, WS.CLIENTB_MPI_ID, WS.CLIENTB_MED_COVERAGE_IND, WS.CLIENTB_INSURANCE_CARRIER, WS.CLIENTB_INSURANCE_POLCY_NO, WS.CLIENTB_SPOKEN_LANGUAGE, WS.CLIENTB_WRITTEN_LANGUAGE, WS.CLIENTB_STATE_OF_BIRTH, WS.CLIENTB_SCHOOL_DISTRICT, WS.CLIENTB_ETHNIC_CLASS, WS.CLIENTB_SUFFIX_NAME, WS.CLIENTB_EMPLOYER_NAME, WS.CLIENTB_EARNED_INCOME_AMT, WS.CLIENTB_INCOME_FREQUENCY, WS.CLIENTB_KEES_ABMS_ID, WS.CLIENTB_EMAIL_ADDRESS, WS.CLIENTB_OCCUPATION, WS.CLIENTB_CREATED_BY, WS.CLIENTB_LAST_MODIFIED_BY, WS.CLIENTB_SENSITIVE_FLAG, WS.CLIENTB_CIS_PREFERRED_ID, WS.CLIENTB_NAME_TYPE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("AI ");                                                              //COBOL==> MOVE 'AI ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("8154 ADD CB:" + WS.MV_ADA_RESPONSE_CD.AsString());                                    //COBOL==> DISPLAY "8154 ADD CB:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8154-ADD-CLIENT-BASIC-DBF") { return; }  //Check for pass through to next method
        #endregion 8154-ADD-CLIENT-BASIC-DBF

        #region 8154-ADD-EXIT
        L_8154_ADD_EXIT:;
            if (returnLabel == "8154-ADD-EXIT") { return; }                                                     //COBOL==> EXIT.
        ///COMMENT: 8154-READISN-CLIENT-BASIC-DBF.
        ///COMMENT:     @READISN154   HOLD  ISN = IMP-CLIENT-NUMBER.
        ///COMMENT:     IF RESPONSE-CODE154 > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 154               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RHI'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE154  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8154-READISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW ON KSD CLIENT BASIC DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8154-ADD-EXIT

        #region 8154-READISN-CLIENT-BASIC-DBF
        L_8154_READISN_CLIENT_BASIC_DBF:;
            DbConv.ExecuteSqlQuery("SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , SENSITIVE_FLAG , CIS_PREFERRED_ID , NAME_TYPE INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} , {10} , {11} , {12} , {13} , {14} , {15} , {16} , {17} , {18} , {19} , {20} , {21} , {22} , {23} , {24} , {25} , {26} , {27} , {28} , {29} , {30} , {31} , {32} , {33} , {34} , {35} , {36} , {37} , {38} , {39} , {40} , {41} , {42} , {43} , {44} , {45} , {46} , {47} , {48} , {49} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {50} ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , SENSITIVE_FLAG , CIS_PREFERRED_ID , NAME_TYPE INTO :CLIENTB-CLIENT-NUMBER , :CLIENTB-CLIENT-GIVEN-NAME , :CLIENTB-CLIENT-INITIALS , :CLIENTB-CLIENT-SURNAME , :CLIENTB-CIS-REPL-IND , :CLIENTB-WORK-PHONE , :CLIENTB-SSN , :CLIENTB-GENDER , :CLIENTB-PARENT-RGHTS-SEV , :CLIENTB-PRNT-RGHTS-SEV-DT , :CLIENTB-LEGAL-STATUS , :CLIENTB-INSURANCE-CODE , :CLIENTB-INITIAL-CUSTODY-DT , :CLIENTB-HOME-PHONE , :CLIENTB-DATE-OF-BIRTH , :CLIENTB-CURR-PLACEMNT-DT , :CLIENTB-CURRENT-PLACEMENT , :CLIENTB-CSEA-G-CAUSE-CODE , :CLIENTB-CSEA-G-CAUSE-CL-DT , :CLIENTB-CSEA-COOP-CODE , :CLIENTB-COUNTY-CRT-COMMIT , :CLIENTB-MONTHS-ASST-AF , :CLIENTB-MONTHS-ASST-GA , :CLIENTB-MO-DEATH-DT , :CLIENTB-MO-PRT-DT , :CLIENTB-FA-DEATH-DT , :CLIENTB-FA-PRT-DT , :CLIENTB-MPI-ID , :CLIENTB-MED-COVERAGE-IND , :CLIENTB-INSURANCE-CARRIER , :CLIENTB-INSURANCE-POLCY-NO , :CLIENTB-SPOKEN-LANGUAGE , :CLIENTB-WRITTEN-LANGUAGE , :CLIENTB-STATE-OF-BIRTH , :CLIENTB-SCHOOL-DISTRICT , :CLIENTB-ETHNIC-CLASS , :CLIENTB-SUFFIX-NAME , :CLIENTB-EMPLOYER-NAME , :CLIENTB-EARNED-INCOME-AMT , :CLIENTB-INCOME-FREQUENCY , :CLIENTB-KEES-ABMS-ID , :CLIENTB-EMAIL-ADDRESS , :CLIENTB-OCCUPATION , :CLIENTB-CREATED-BY , :CLIENTB-CREATED-TIMESTAMP , :CLIENTB-LAST-MODIFIED-BY , :CLIENTB-LAST-MODIFIED-TMST , :CLIENTB-SENSITIVE-FLAG , :CLIENTB-CIS-PREFERRED-ID , :CLIENTB-NAME-TYPE FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :CLIENTB-CLIENT-NUMBER END-EXEC.
                                 WS.CLIENTB_CLIENT_NUMBER, WS.CLIENTB_CLIENT_GIVEN_NAME, WS.CLIENTB_CLIENT_INITIALS, WS.CLIENTB_CLIENT_SURNAME, WS.CLIENTB_CIS_REPL_IND, WS.CLIENTB_WORK_PHONE, WS.CLIENTB_SSN, WS.CLIENTB_GENDER, WS.CLIENTB_PARENT_RGHTS_SEV, WS.CLIENTB_PRNT_RGHTS_SEV_DT, WS.CLIENTB_LEGAL_STATUS, WS.CLIENTB_INSURANCE_CODE, WS.CLIENTB_INITIAL_CUSTODY_DT, WS.CLIENTB_HOME_PHONE, WS.CLIENTB_DATE_OF_BIRTH, WS.CLIENTB_CURR_PLACEMNT_DT, WS.CLIENTB_CURRENT_PLACEMENT, WS.CLIENTB_CSEA_G_CAUSE_CODE, WS.CLIENTB_CSEA_G_CAUSE_CL_DT, WS.CLIENTB_CSEA_COOP_CODE, WS.CLIENTB_COUNTY_CRT_COMMIT, WS.CLIENTB_MONTHS_ASST_AF, WS.CLIENTB_MONTHS_ASST_GA, WS.CLIENTB_MO_DEATH_DT, WS.CLIENTB_MO_PRT_DT, WS.CLIENTB_FA_DEATH_DT, WS.CLIENTB_FA_PRT_DT, WS.CLIENTB_MPI_ID, WS.CLIENTB_MED_COVERAGE_IND, WS.CLIENTB_INSURANCE_CARRIER, WS.CLIENTB_INSURANCE_POLCY_NO, WS.CLIENTB_SPOKEN_LANGUAGE, WS.CLIENTB_WRITTEN_LANGUAGE, WS.CLIENTB_STATE_OF_BIRTH, WS.CLIENTB_SCHOOL_DISTRICT, WS.CLIENTB_ETHNIC_CLASS, WS.CLIENTB_SUFFIX_NAME, WS.CLIENTB_EMPLOYER_NAME, WS.CLIENTB_EARNED_INCOME_AMT, WS.CLIENTB_INCOME_FREQUENCY, WS.CLIENTB_KEES_ABMS_ID, WS.CLIENTB_EMAIL_ADDRESS, WS.CLIENTB_OCCUPATION, WS.CLIENTB_CREATED_BY, WS.CLIENTB_CREATED_TIMESTAMP, WS.CLIENTB_LAST_MODIFIED_BY, WS.CLIENTB_LAST_MODIFIED_TMST, WS.CLIENTB_SENSITIVE_FLAG, WS.CLIENTB_CIS_PREFERRED_ID, WS.CLIENTB_NAME_TYPE, WS.CLIENTB_CLIENT_NUMBER);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENTB_EOF_YES.SetValue(true);                                                               //COBOL==> SET WS-CLIENTB-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RHI");                                                              //COBOL==> MOVE 'RHI' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8154-READISN-CLIENT-BASIC-DBF") { return; }  //Check for pass through to next method
        #endregion 8154-READISN-CLIENT-BASIC-DBF

        #region 8154-READISN-EXIT
        L_8154_READISN_EXIT:;
            if (returnLabel == "8154-READISN-EXIT") { return; }                                                 //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  THIS ROUTINE IS NO LONGER NEEDED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8154-RELISN-CLIENT-BASIC-DBF.
        ///COMMENT:     @RELISN154.
        ///COMMENT:     IF RESPONSE-CODE154 > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 154               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE ' RI'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE154  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8154-RELISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 8154-UPDT-CLIENT-BASIC-DBF.
        ///COMMENT:     @UPDATE154   ISN = IMP-CLIENT-NUMBER.
        ///COMMENT:     IF RESPONSE-CODE154 > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 154               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'UI '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE154  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8154-UPDT-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE ROW ON KSD CLIENT BASIC DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8154-READISN-EXIT

        #region 8154-UPDT-CLIENT-BASIC-DBF
        L_8154_UPDT_CLIENT_BASIC_DBF:;
            WS.CLIENTB_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                          //COBOL==> EXEC CICS ASSIGN USERID ( CLIENTB-LAST-MODIFIED-BY ) END-EXEC.
            DbConv.ExecuteSql("UPDATE KSD_CLIENT_BASIC SET CLIENT_GIVEN_NAME = {0},  CLIENT_INITIALS = {1},  CLIENT_SURNAME = {2},  SSN = {3},  GENDER = {4},  DATE_OF_BIRTH = {5},  LAST_MODIFIED_BY = {6},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE CLIENT_NUMBER = {7}", WS.CLIENTB_CLIENT_GIVEN_NAME, WS.CLIENTB_CLIENT_INITIALS, WS.CLIENTB_CLIENT_SURNAME, WS.CLIENTB_SSN, WS.CLIENTB_GENDER, WS.CLIENTB_DATE_OF_BIRTH, WS.CLIENTB_LAST_MODIFIED_BY, WS.CLIENTB_CLIENT_NUMBER);  //COBOL==> EXEC SQL UPDATE KSD_CLIENT_BASIC SET CLIENT_GIVEN_NAME = :CLIENTB-CLIENT-GIVEN-NAME , CLIENT_INITIALS = :CLIENTB-CLIENT-INITIALS , CLIENT_SURNAME = :CLIENTB-CLIENT-SURNAME , SSN = :CLIENTB-SSN , GENDER = :CLIENTB-GENDER , DATE_OF_BIRTH = :CLIENTB-DATE-OF-BIRTH , LAST_MODIFIED_BY = :CLIENTB-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE CLIENT_NUMBER = :CLIENTB-CLIENT-NUMBER END-EXEC.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("UI ");                                                              //COBOL==> MOVE 'UI ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("8154  CB UPDATE  :" + WS.MV_ADA_RESPONSE_CD.AsString());                              //COBOL==> DISPLAY "8154  CB UPDATE  :" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8154-UPDT-CLIENT-BASIC-DBF") { return; }  //Check for pass through to next method
        #endregion 8154-UPDT-CLIENT-BASIC-DBF

        #region 8154-UPDT-EXIT
        L_8154_UPDT_EXIT:;
            if (returnLabel == "8154-UPDT-EXIT") { return; }                                                    //COBOL==> EXIT.
        ///COMMENT: 8161F-READLOG-PART-DBF.
        ///COMMENT:     @READLOGICAL161   FIRST.
        ///COMMENT:     IF RESPONSE-CODE161 > ZERO AND NOT EOF161
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 161               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RLF'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE161  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8161F-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DELCARE CURSOR FOR KSD PARTICIPATION DB2 TABLE
        ///COMMENT: *****************************************************************
        #endregion 8154-UPDT-EXIT

        #region 8161F-READLOG-PART-DBF
        L_8161F_READLOG_PART_DBF:;
            WS.WS_PART_1ST_YES.SetValue(true);                                                                  //COBOL==> SET WS-PART-1ST-YES TO TRUE.
                                                                                                                //COMMENT: **CQ#62296 ADD CHECK FOR ACTIVE PART_CODE
                                                                                                                // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE PARTCSR CURSOR FOR SELECT KESSEP_TIME_STMP , PART_END_DATE , PART_START_DATE , PART_CODE , PROGRAM_END_DATE , PROGRAM_SUBTYPE , RELATIONSHIP , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , FK_CLB_CLIENT_NO FROM KSD_PARTICIPATION WHERE FK_CLB_CLIENT_NO = :PART-FK-CLB-CLIENT-NO AND PART_CODE = 'IN' ORDER BY FK_CLB_CLIENT_NO , PART_END_DATE END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(161);                                                                //COBOL==> MOVE 161 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8161F-READLOG-PART-DBF") { return; }  //Check for pass through to next method
        #endregion 8161F-READLOG-PART-DBF

        #region 8161F-READLOG-EXIT
        L_8161F_READLOG_EXIT:;
            if (returnLabel == "8161F-READLOG-EXIT") { return; }                                                //COBOL==> EXIT.
        ///COMMENT: 8161N-READLOG-PART-DBF.
        ///COMMENT:     @READLOGICAL161.
        ///COMMENT:     IF RESPONSE-CODE161 > ZERO AND NOT EOF161
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 161               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RL '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE161  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8161N-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSD PARTICIPATION DB2 TABLE
        ///COMMENT: *****************************************************************
        #endregion 8161F-READLOG-EXIT

        #region 8161N-READLOG-PART-DBF
        L_8161N_READLOG_PART_DBF:;
            DbConv.FetchReaderRow("PARTCSR",                                                                 //COBOL==> EXEC SQL FETCH PARTCSR INTO :PART-KESSEP-TIME-STMP , :PART-PART-END-DATE , :PART-PART-START-DATE , :PART-PART-CODE , :PART-PROGRAM-END-DATE , :PART-PROGRAM-SUBTYPE , :PART-RELATIONSHIP , :PART-CREATED-BY , :PART-CREATED-TIMESTAMP , :PART-LAST-MODIFIED-BY , :PART-LAST-MODIFIED-TMST , :PART-FK-CSB-CASE-NO , :PART-FK-PGB-PROG-TYPE , :PART-FK-CLB-CLIENT-NO END-EXEC.
                             WS.PART_KESSEP_TIME_STMP, WS.PART_PART_END_DATE, WS.PART_PART_START_DATE, WS.PART_PART_CODE, WS.PART_PROGRAM_END_DATE, WS.PART_PROGRAM_SUBTYPE, WS.PART_RELATIONSHIP, WS.PART_CREATED_BY, WS.PART_CREATED_TIMESTAMP, WS.PART_LAST_MODIFIED_BY, WS.PART_LAST_MODIFIED_TMST, WS.PART_FK_CSB_CASE_NO, WS.PART_FK_PGB_PROG_TYPE, WS.PART_FK_CLB_CLIENT_NO);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                WS.WS_PART_1ST_NO.SetValue(true);                                                                   //COBOL==> SET WS-PART-1ST-NO TO TRUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_PART_EOF_YES.SetValue(true);                                                                  //COBOL==> SET WS-PART-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(161);                                                                //COBOL==> MOVE 161 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                if (WS.WS_PART_1ST_YES.Value)                                                                       //COBOL==> IF WS-PART-1ST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8161N-READLOG-PART-DBF") { return; }  //Check for pass through to next method
        #endregion 8161N-READLOG-PART-DBF

        #region 8161N-READLOG-EXIT
        L_8161N_READLOG_EXIT:;
            if (returnLabel == "8161N-READLOG-EXIT") { return; }                                                //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD PARTICIPATION DB2 TABLE
        ///COMMENT: *****************************************************************
        #endregion 8161N-READLOG-EXIT

        #region 8161O-OPEN-PART-DBF
        L_8161O_OPEN_PART_DBF:;
            DbConv.OpenReader("PARTCSR");                                                                       //COBOL==> EXEC SQL OPEN PARTCSR END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(161);                                                                //COBOL==> MOVE 161 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8161O-OPEN-PART-DBF") { return; }  //Check for pass through to next method
        #endregion 8161O-OPEN-PART-DBF

        #region 8161O-EXIT
        L_8161O_EXIT:;
            if (returnLabel == "8161O-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD PARTICIPATION DB2 TABLE
        ///COMMENT: *****************************************************************
        #endregion 8161O-EXIT

        #region 8161C-CLOSE-PART-DBF
        L_8161C_CLOSE_PART_DBF:;
            DbConv.CloseReader("PARTCSR");                                                                      //COBOL==> EXEC SQL CLOSE PARTCSR END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(161);                                                                //COBOL==> MOVE 161 TO MV-ADA-FILE-NUMBER
                if (WS.WS_PART_1ST_YES.Value)                                                                       //COBOL==> IF WS-PART-1ST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8161C-CLOSE-PART-DBF") { return; }  //Check for pass through to next method
        #endregion 8161C-CLOSE-PART-DBF

        #region 8161C-EXIT
        L_8161C_EXIT:;
            if (returnLabel == "8161C-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DECLARE CURSOR FOR KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8161C-EXIT

        #region 8200-DECLARE-SYSPART
        L_8200_DECLARE_SYSPART:;
            // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE SYSPART CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :SYSPART-FK-CLB-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN ORDER BY FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN , SYSTEM_CODE END-EXEC.
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8200-DECLARE-SYSPART") { return; }  //Check for pass through to next method
        #endregion 8200-DECLARE-SYSPART

        #region 8200-EXIT
        L_8200_EXIT:;
            if (returnLabel == "8200-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8200-EXIT

        #region 8210-OPEN-SYS-PART
        L_8210_OPEN_SYS_PART:;
            DbConv.OpenReader("SYSPART");                                                                       //COBOL==> EXEC SQL OPEN SYSPART END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8210-OPEN-SYS-PART") { return; }  //Check for pass through to next method
        #endregion 8210-OPEN-SYS-PART

        #region 8210-EXIT
        L_8210_EXIT:;
            if (returnLabel == "8210-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8210-EXIT

        #region 8220-FETCH-SYS-PART
        L_8220_FETCH_SYS_PART:;
            DbConv.FetchReaderRow("SYSPART",                                                                 //COBOL==> EXEC SQL FETCH SYSPART INTO :SYSPART-SYSTEM-CODE , :SYSPART-PARTICIPATION-FLAG , :SYSPART-CREATED-TIMESTAMP , :SYSPART-CREATED-BY , :SYSPART-LAST-MODIFIED-BY , :SYSPART-LAST-MODIFIED-TMST , :SYSPART-FK-CLB-CLIENT-NO , :SYSPART-FK-CLI-CLIENT-NAME , :SYSPART-FK-CLI-SSN END-EXEC.
                             WS.SYSPART_SYSTEM_CODE, WS.SYSPART_PARTICIPATION_FLAG, WS.SYSPART_CREATED_TIMESTAMP, WS.SYSPART_CREATED_BY, WS.SYSPART_LAST_MODIFIED_BY, WS.SYSPART_LAST_MODIFIED_TMST, WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_SYSPART_EOF_YES.SetValue(true);                                                               //COBOL==> SET WS-SYSPART-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8220-FETCH-SYS-PART") { return; }  //Check for pass through to next method
        #endregion 8220-FETCH-SYS-PART

        #region 8220-EXIT
        L_8220_EXIT:;
            if (returnLabel == "8220-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8220-EXIT

        #region 8230-CLOSE-SYS-PART
        L_8230_CLOSE_SYS_PART:;
            DbConv.CloseReader("SYSPART");                                                                      //COBOL==> EXEC SQL CLOSE SYSPART END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8230-CLOSE-SYS-PART") { return; }  //Check for pass through to next method
        #endregion 8230-CLOSE-SYS-PART

        #region 8230-EXIT
        L_8230_EXIT:;
            if (returnLabel == "8230-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  INSERT ROW INTO KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8230-EXIT

        #region 8240-INSERT-SYS-PART
        L_8240_INSERT_SYS_PART:;
            WS.SYSPART_CREATED_BY.SetValue(Control.GetUserID());                                                //COBOL==> EXEC CICS ASSIGN USERID ( SYSPART-CREATED-BY ) END-EXEC.
            WS.SYSPART_LAST_MODIFIED_BY.SetValue(WS.SYSPART_CREATED_BY);                                        //COBOL==> MOVE SYSPART-CREATED-BY TO SYSPART-LAST-MODIFIED-BY.
            DbConv.ExecuteSql("INSERT INTO KSD_SYSTEM_PART  ( SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN  ) VALUES  ( {0}, {1}, CURRENT_TIMESTAMP , {2}, {3}, CURRENT_TIMESTAMP , {4}, {5}, {6} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_SYSTEM_PART ( SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN ) VALUES ( :SYSPART-SYSTEM-CODE , :SYSPART-PARTICIPATION-FLAG , CURRENT_TIMESTAMP , :SYSPART-CREATED-BY , :SYSPART-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :SYSPART-FK-CLB-CLIENT-NO , :SYSPART-FK-CLI-CLIENT-NAME , :SYSPART-FK-CLI-SSN ) END-EXEC.
                                 WS.SYSPART_SYSTEM_CODE, WS.SYSPART_PARTICIPATION_FLAG, WS.SYSPART_CREATED_BY, WS.SYSPART_LAST_MODIFIED_BY, WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(-803))))                  //COBOL==> WHEN -803
            {
                //COMMENT:              CONTINUE
                DbConv.SQLCA.SQLCODE.SetValue(ZEROES);                                                              //COBOL==> MOVE ZEROES TO SQLCODE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("ASP");                                                              //COBOL==> MOVE 'ASP' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("8420 ADD SYSPART:" + WS.MV_ADA_RESPONSE_CD.AsString());                               //COBOL==> DISPLAY "8420 ADD SYSPART:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8240-INSERT-SYS-PART") { return; }  //Check for pass through to next method
        #endregion 8240-INSERT-SYS-PART

        #region 8240-EXIT
        L_8240_EXIT:;
            if (returnLabel == "8240-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DELETE ROW FROM KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8240-EXIT

        #region 8250-DELETE-SYS-PART
        L_8250_DELETE_SYS_PART:;
            DbConv.ExecuteSql("DELETE FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {0} AND FK_CLI_CLIENT_NAME = {1} AND FK_CLI_SSN = {2} AND SYSTEM_CODE = {3}", WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN, WS.SYSPART_SYSTEM_CODE);  //COBOL==> EXEC SQL DELETE FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :SYSPART-FK-CLB-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN AND SYSTEM_CODE = :SYSPART-SYSTEM-CODE END-EXEC.
                                                                                                                                                                                                                                                                               // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
                                                                                                                                                                                                                                                                               // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100))))                  //COBOL==> WHEN +100
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("CD ");                                                              //COBOL==> MOVE 'CD ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8250-DELETE-SYS-PART") { return; }  //Check for pass through to next method
        #endregion 8250-DELETE-SYS-PART

        #region 8250-EXIT
        L_8250_EXIT:;
            if (returnLabel == "8250-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8250-EXIT

        #region 8260-SELECT-SYS-PART
        L_8260_SELECT_SYS_PART:;
            DbConv.ExecuteSqlQuery("SELECT SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {9} AND FK_CLI_CLIENT_NAME = {10} AND FK_CLI_SSN = {11} AND SYSTEM_CODE = {12} ",  //COBOL==> EXEC SQL SELECT SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN INTO :SYSPART-SYSTEM-CODE , :SYSPART-PARTICIPATION-FLAG , :SYSPART-CREATED-TIMESTAMP , :SYSPART-CREATED-BY , :SYSPART-LAST-MODIFIED-BY , :SYSPART-LAST-MODIFIED-TMST , :SYSPART-FK-CLB-CLIENT-NO , :SYSPART-FK-CLI-CLIENT-NAME , :SYSPART-FK-CLI-SSN FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :SYSPART-FK-CLB-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN AND SYSTEM_CODE = :SYSPART-SYSTEM-CODE END-EXEC.
                                 WS.SYSPART_SYSTEM_CODE, WS.SYSPART_PARTICIPATION_FLAG, WS.SYSPART_CREATED_TIMESTAMP, WS.SYSPART_CREATED_BY, WS.SYSPART_LAST_MODIFIED_BY, WS.SYSPART_LAST_MODIFIED_TMST, WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN, WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN, WS.SYSPART_SYSTEM_CODE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_SYSPART_EOF_YES.SetValue(true);                                                               //COBOL==> SET WS-SYSPART-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8260-SELECT-SYS-PART") { return; }  //Check for pass through to next method
        #endregion 8260-SELECT-SYS-PART

        #region 8260-EXIT
        L_8260_EXIT:;
            if (returnLabel == "8260-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  INSERT ROW INTO KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT:  SPECIAL INSERT FOR ALIAS UPDATE
        ///COMMENT: *****************************************************************
        #endregion 8260-EXIT

        #region 8270-INSERT-SYS-PART
        L_8270_INSERT_SYS_PART:;
            WS.SYSPART_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                          //COBOL==> EXEC CICS ASSIGN USERID ( SYSPART-LAST-MODIFIED-BY ) END-EXEC.
            DbConv.ExecuteSql("INSERT INTO KSD_SYSTEM_PART  ( SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN  ) VALUES  ( {0}, {1}, {2}, {3}, {4}, CURRENT_TIMESTAMP , {5}, {6}, {7} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_SYSTEM_PART ( SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN ) VALUES ( :SYSPART-SYSTEM-CODE , :SYSPART-PARTICIPATION-FLAG , :SYSPART-CREATED-TIMESTAMP , :SYSPART-CREATED-BY , :SYSPART-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :SYSPART-FK-CLB-CLIENT-NO , :SYSPART-FK-CLI-CLIENT-NAME , :SYSPART-FK-CLI-SSN ) END-EXEC.
                                 WS.SYSPART_SYSTEM_CODE, WS.SYSPART_PARTICIPATION_FLAG, WS.SYSPART_CREATED_TIMESTAMP, WS.SYSPART_CREATED_BY, WS.SYSPART_LAST_MODIFIED_BY, WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(-803))))                  //COBOL==> WHEN -803
            {
                //COMMENT:              CONTINUE
                DbConv.SQLCA.SQLCODE.SetValue(ZEROES);                                                              //COBOL==> MOVE ZEROES TO SQLCODE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("ASP");                                                              //COBOL==> MOVE 'ASP' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                DisplayToLog("8270 INSERT SYSP:" + WS.MV_ADA_RESPONSE_CD.AsString());                               //COBOL==> DISPLAY "8270 INSERT SYSP:" MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8270-INSERT-SYS-PART") { return; }  //Check for pass through to next method
        #endregion 8270-INSERT-SYS-PART

        #region 8270-EXIT
        L_8270_EXIT:;
            if (returnLabel == "8270-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  DELETE ROWS FROM KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8270-EXIT

        #region 8280-DELETE-SYS-PART
        L_8280_DELETE_SYS_PART:;
            DbConv.ExecuteSql("DELETE FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {0} AND FK_CLI_CLIENT_NAME = {1} AND FK_CLI_SSN = {2}", WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN);  //COBOL==> EXEC SQL DELETE FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :SYSPART-FK-CLB-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN END-EXEC.
                                                                                                                                                                                                                                 // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
                                                                                                                                                                                                                                 // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100))))                  //COBOL==> WHEN +100
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("CD ");                                                              //COBOL==> MOVE 'CD ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8280-DELETE-SYS-PART") { return; }  //Check for pass through to next method
        #endregion 8280-DELETE-SYS-PART

        #region 8280-EXIT
        L_8280_EXIT:;
            if (returnLabel == "8280-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT PARTICIPATION ROW WITH CLIENT NUMBER AND RELATIONSHIP
        ///COMMENT:  ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8280-EXIT

        #region 8300-SELECT-PART-REL
        L_8300_SELECT_PART_REL:;
            DbConv.ExecuteSqlQuery("SELECT RELATIONSHIP , FK_CLB_CLIENT_NO INTO {0} , {1} FROM KSD_PARTICIPATION WHERE FK_CLB_CLIENT_NO = {2} AND RELATIONSHIP = {3} ",  //COBOL==> EXEC SQL SELECT RELATIONSHIP , FK_CLB_CLIENT_NO INTO :PART-RELATIONSHIP , :PART-FK-CLB-CLIENT-NO FROM KSD_PARTICIPATION WHERE FK_CLB_CLIENT_NO = :PART-FK-CLB-CLIENT-NO AND RELATIONSHIP = :PART-RELATIONSHIP END-EXEC.
                                 WS.PART_RELATIONSHIP, WS.PART_FK_CLB_CLIENT_NO, WS.PART_FK_CLB_CLIENT_NO, WS.PART_RELATIONSHIP);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN +100
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || (DbConv.SQLCA.SQLCODE.IsEqualTo(+100)) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(-811))))  //COBOL==> WHEN -811
            {
                //COMMENT:              CONTINUE
                DbConv.SQLCA.SQLCODE.SetValue(ZEROES);                                                              //COBOL==> MOVE ZEROES TO SQLCODE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(161);                                                                //COBOL==> MOVE 161 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8300-SELECT-PART-REL") { return; }  //Check for pass through to next method
        #endregion 8300-SELECT-PART-REL

        #region 8300-EXIT
        L_8300_EXIT:;
            if (returnLabel == "8300-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8300-EXIT

        #region 8400-SELECT-CLIENT
        L_8400_SELECT_CLIENT:;
            DbConv.ExecuteSqlQuery("SELECT FK_CLB_CLIENT_NO , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER INTO {0} , {1} , {2} , {3} , {4} FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = {5} AND CLIENT_NAME = {6} AND SSN = {7} AND DATE_OF_BIRTH = {8} AND GENDER = {9} ",  //COBOL==> EXEC SQL SELECT FK_CLB_CLIENT_NO , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER INTO :CLIENT-FK-CLB-CLIENT-NO , :CLIENT-CLIENT-NAME , :CLIENT-SSN , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO AND CLIENT_NAME = :CLIENT-CLIENT-NAME AND SSN = :CLIENT-SSN AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH AND GENDER = :CLIENT-GENDER END-EXEC.
                                 WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_CLIENT_NAME, WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_CLIENT_NAME, WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(-811))))                  //COBOL==> WHEN -811
            {
                //COMMENT:              CONTINUE
                DbConv.SQLCA.SQLCODE.SetValue(ZEROES);                                                              //COBOL==> MOVE ZEROES TO SQLCODE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLS");                                                              //COBOL==> MOVE 'RLS' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8400-SELECT-CLIENT") { return; }  //Check for pass through to next method
        #endregion 8400-SELECT-CLIENT

        #region 8400-EXIT
        L_8400_EXIT:;
            if (returnLabel == "8400-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8400-EXIT

        #region 8410-SELECT-CLIENT
        L_8410_SELECT_CLIENT:;
            DbConv.ExecuteSqlQuery("SELECT TOP (1) FK_CLB_CLIENT_NO , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER INTO {0} , {1} , {2} , {3} , {4} FROM KSD_CLIENT WHERE CLIENT_NAME = {5} AND SSN = {6} AND DATE_OF_BIRTH = {7} AND GENDER = {8} ",  //COBOL==> EXEC SQL SELECT FK_CLB_CLIENT_NO , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER INTO :CLIENT-FK-CLB-CLIENT-NO , :CLIENT-CLIENT-NAME , :CLIENT-SSN , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER FROM KSD_CLIENT WHERE CLIENT_NAME = :CLIENT-CLIENT-NAME AND SSN = :CLIENT-SSN AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH AND GENDER = :CLIENT-GENDER FETCH FIRST ROW ONLY END-EXEC.
                                 WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_CLIENT_NAME, WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_CLIENT_NAME, WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(-811))))                  //COBOL==> WHEN -811
            {
                //COMMENT:              CONTINUE
                DbConv.SQLCA.SQLCODE.SetValue(ZEROES);                                                              //COBOL==> MOVE ZEROES TO SQLCODE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8410-SELECT-CLIENT") { return; }  //Check for pass through to next method
        #endregion 8410-SELECT-CLIENT

        #region 8410-EXIT
        L_8410_EXIT:;
            if (returnLabel == "8410-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8410-EXIT

        #region 8420-SELECT-CLIENT
        L_8420_SELECT_CLIENT:;
            DbConv.ExecuteSqlQuery("SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} , {10} , {11} , {12} , {13} FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = {14} AND CLIENT_NAME = {15} AND SSN = {16} AND DATE_OF_BIRTH = {17} AND GENDER = {18} ",  //COBOL==> EXEC SQL SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE INTO :CLIENT-SSN , :CLIENT-PREVIOUS-SSN , :CLIENT-PHONETIC-DATA , :CLIENT-DT-OF-LAST-UPDATE , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-VERIFIED-SSN-FLAG , :CLIENT-CLIENT-NAME , :CLIENT-CREATED-BY , :CLIENT-CREATED-TIMESTAMP , :CLIENT-LAST-MODIFIED-BY , :CLIENT-LAST-MODIFIED-TMST , :CLIENT-FK-CLB-CLIENT-NO , :CLIENT-NAME-TYPE FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO AND CLIENT_NAME = :CLIENT-CLIENT-NAME AND SSN = :CLIENT-SSN AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH AND GENDER = :CLIENT-GENDER END-EXEC.
                                 WS.CLIENT_SSN, WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_PHONETIC_DATA, WS.CLIENT_DT_OF_LAST_UPDATE, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_CLIENT_NAME, WS.CLIENT_CREATED_BY, WS.CLIENT_CREATED_TIMESTAMP, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_LAST_MODIFIED_TMST, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_NAME_TYPE, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_CLIENT_NAME, WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(-811))))                  //COBOL==> WHEN -811
            {
                //COMMENT:              CONTINUE
                DbConv.SQLCA.SQLCODE.SetValue(ZEROES);                                                              //COBOL==> MOVE ZEROES TO SQLCODE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLS");                                                              //COBOL==> MOVE 'RLS' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "8420-SELECT-CLIENT") { return; }  //Check for pass through to next method
        #endregion 8420-SELECT-CLIENT

        #region 8420-EXIT
        L_8420_EXIT:;
            if (returnLabel == "8420-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  END UNIT OF WORK ROUTINE
        ///COMMENT: *****************************************************************
        #endregion 8420-EXIT

        #region 8999-END-ADABAS-TRANSACTION
        L_8999_END_ADABAS_TRANSACTION:;
            if (WS.MV_ABEND_TYPE_NONE.Value)                                                                    //COBOL==> IF MV-ABEND-TYPE-NONE
            {
                WS.MV_ABEND_FIELDS.ResetToInitialValue();                                                           //COBOL==> INITIALIZE MV-ABEND-FIELDS
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("EAT");                                                              //COBOL==> MOVE 'EAT' TO MV-ADA-FILE-ACTION
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "8999-END-ADABAS-TRANSACTION") { return; }  //Check for pass through to next method
        #endregion 8999-END-ADABAS-TRANSACTION

        #region 8999-EXIT
        L_8999_EXIT:;
            if (returnLabel == "8999-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: WBR END
        ///COMMENT: 8999-END-ADABAS-TRANSACTION.
        ///COMMENT:     @END-TRANSACTION.
        ///COMMENT:     IF RESPONSE-CODEOPN > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE ZERO              TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'EAT'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODEOPN  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8999-EXIT.
        ///COMMENT:     EXIT.
        #endregion 8999-EXIT

        #region 9000-CALCULATE-PHONETIC-NAME
        L_9000_CALCULATE_PHONETIC_NAME:;
            WS.PH_NAME_RAW_INQ.SetValue(WS.MV_RECORD_LAST_NAME);                                                //COBOL==> MOVE MV-RECORD-LAST-NAME TO PH-NAME-RAW-INQ.
            Perform("PH002-0000-CONVERT-NAME", "PH002-0000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PH002-0000-CONVERT-NAME THRU PH002-0000-EXIT.
            if (WS.PH_ERR_NAME.IsEqualTo("1"))                                                                  //COBOL==> IF PH-ERR-NAME = '1'
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                                                                                                                    //COMMENT: ******* CALCULATE PRIMARY LAST NAME *****************************
                WS.MV_ADA_FILE_ACTION.SetValue("CPL");                                                              //COBOL==> MOVE 'CPL' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((WS.MV_RECORD_FIRST_NAME_1.IsAlphaUpper())
             && (!(WS.MV_RECORD_FIRST_NAME_1.IsSpaces())))  //COBOL==> IF MV-RECORD-FIRST-NAME-1 ALPHABETIC-UPPER AND MV-RECORD-FIRST-NAME-1 NOT = SPACE
                {
                    WS.MV_PHONETIC_1.SetValue(WS.MV_RECORD_FIRST_NAME);                                                 //COBOL==> MOVE MV-RECORD-FIRST-NAME TO MV-PHONETIC-1
                    WS.MV_PHONETIC_CODE.SetValue(WS.PH_NAME_17_NUMERIC);                                                //COBOL==> MOVE PH-NAME-17-NUMERIC TO MV-PHONETIC-CODE
                    WS.MV_PHONETIC_3.SetValue(WS.MV_RECORD_FIRST_NAME);                                                 //COBOL==> MOVE MV-RECORD-FIRST-NAME TO MV-PHONETIC-3
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                                                                                                                        //COMMENT: *********** PHONETIC PRIMARY FIRST NAME *************************
                    WS.MV_ADA_FILE_ACTION.SetValue("PPF");                                                              //COBOL==> MOVE 'PPF' TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "9000-CALCULATE-PHONETIC-NAME") { return; }  //Check for pass through to next method
        #endregion 9000-CALCULATE-PHONETIC-NAME

        #region 9000-EXIT
        L_9000_EXIT:;
            if (returnLabel == "9000-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH002                                       *
        ///COMMENT:   DESCRIPTION:  CONVERT LAST NAME TO PHONETIC VALUE            *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:                                                                *
        ///COMMENT: ****************************************************************
        #endregion 9000-EXIT

        #region PH002-0000-CONVERT-NAME
        L_PH002_0000_CONVERT_NAME:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   CONVERT LAST NAME TO A PHONETIC VALUE                        *
            //COMMENT: ---------------------------------------------------------------*
            Perform("PH002-1000-INITIALIZE", "PH002-1000-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PH002-1000-INITIALIZE THRU PH002-1000-EXIT.
            WS.PH_THREE_LETTERS.SetValue(WS.PH_NAME_RAW_INQ);                                                   //COBOL==> MOVE PH-NAME-RAW-INQ TO PH-THREE-LETTERS.
            WS.PH_TWO_LETTERS.SetValue(WS.PH_THREE_LETTERS);                                                    //COBOL==> MOVE PH-THREE-LETTERS TO PH-TWO-LETTERS.
            WS.PH_ONE_LETTER.SetValue(WS.PH_THREE_LETTERS);                                                     //COBOL==> MOVE PH-THREE-LETTERS TO PH-ONE-LETTER.
            WS.PH_NAME_CRUNCH_INQ.SetValue(WS.PH_NAME_RAW_INQ);                                                 //COBOL==> MOVE PH-NAME-RAW-INQ TO PH-NAME-CRUNCH-INQ.
            Perform("PH003-0000-CRUNCH-NAME", "PH003-0000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH003-0000-CRUNCH-NAME THRU PH003-0000-EXIT.
            WS.PH_FNTIC_CX.SetValue(01);                                                                        //COBOL==> MOVE 01 TO PH-FNTIC-CX.
                                                                                                                //COMMENT: ---------------------------------------------------------------*
                                                                                                                //COMMENT:   CHECKING FIRST THREE,TWO, OR 1 LETTER THEN CONVERT           *
                                                                                                                //COMMENT:      THE REMAINDER OF THE NAME                                 *
                                                                                                                //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_THREE_LETTERS.IsEqualTo("SCH"))                                                           //COBOL==> IF PH-THREE-LETTERS = 'SCH'
            {
                WS.PH_FNTIC_C3.SetValue(04);                                                                        //COBOL==> MOVE 04 TO PH-FNTIC-C3
                WS.PH_NAME_NUM_34[1].SetValue("06");                                                                //COBOL==> MOVE '06' TO PH-NAME-NUM-34 ( 1 )
                Perform("PH002-2000-REMAIN-NAME", "PH002-2000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                goto L_PH002_0000_EXIT;                                                                             //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_CF2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CF2-INDEX TO 1.
            WS.PH_CF2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CF2-INDXX.
            Perform("PH002-3000-FIRST-2-LETTERS", "PH002-3000-EXIT"); if (Control.ExitProgram) { return; }        //COBOL==> PERFORM PH002-3000-FIRST-2-LETTERS THRU PH002-3000-EXIT.
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_C3.SetValue(03);                                                                        //COBOL==> MOVE 03 TO PH-FNTIC-C3
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_NAME_NUM_34[1].SetValue(WS.PH_HIT);                                                           //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( 1 )
                Perform("PH002-2000-REMAIN-NAME", "PH002-2000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                goto L_PH002_0000_EXIT;                                                                             //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_CF1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CF1-INDEX TO 1.
            WS.PH_CF1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CF1-INDXX.
            Perform("PH002-4000-FIRST-1-LETTER", "PH002-4000-EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PH002-4000-FIRST-1-LETTER THRU PH002-4000-EXIT.
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_C3.SetValue(02);                                                                        //COBOL==> MOVE 02 TO PH-FNTIC-C3
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_NAME_NUM_34[1].SetValue(WS.PH_HIT);                                                           //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( 1 )
                Perform("PH002-2000-REMAIN-NAME", "PH002-2000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                goto L_PH002_0000_EXIT;                                                                             //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_ERR_NAME.SetValue("1");                                                                       //COBOL==> MOVE '1' TO PH-ERR-NAME.
            if (returnLabel == "PH002-0000-CONVERT-NAME") { return; }  //Check for pass through to next method
        #endregion PH002-0000-CONVERT-NAME

        #region PH002-0000-EXIT
        L_PH002_0000_EXIT:;
            if (returnLabel == "PH002-0000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-0000-EXIT

        #region PH002-1000-INITIALIZE
        L_PH002_1000_INITIALIZE:;
            WS.PH_NAME_CRUNCH_INQ.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO PH-NAME-CRUNCH-INQ.
            WS.PH_NAME_REDUC_INQ.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO PH-NAME-REDUC-INQ.
            WS.PH_NAME_PARTS.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACES TO PH-NAME-PARTS.
            WS.PH_NAME_34_NUMERIC.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO PH-NAME-34-NUMERIC.
            WS.PH_HIT.SetValueWithSpaces();                                                                     //COBOL==> MOVE SPACES TO PH-HIT.
            WS.PH_NAME_17_NUMERIC.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO PH-NAME-17-NUMERIC.
            WS.PH_FNTIC_C1.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C2.
            WS.PH_FNTIC_C3.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C3.
            WS.PH_FNTIC_CX.SetValue(01);                                                                        //COBOL==> MOVE 01 TO PH-FNTIC-CX.
            WS.PH_SUSS_ID.SetValueWithZeroes();                                                                 //COBOL==> MOVE ZEROS TO PH-SUSS-ID.
            WS.PH_ERR_NAME.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-ERR-NAME.
            if (returnLabel == "PH002-1000-INITIALIZE") { return; }  //Check for pass through to next method
        #endregion PH002-1000-INITIALIZE

        #region PH002-1000-EXIT
        L_PH002_1000_EXIT:;
            if (returnLabel == "PH002-1000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-1000-EXIT

        #region PH002-2000-REMAIN-NAME
        L_PH002_2000_REMAIN_NAME:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     CONVERT REMAINDER OF NAME                                  *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_FNTIC_C3.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH002-2010-FINISH-NAME THRU PH002-2010-EXIT UNTIL PH-FNTIC-C3 > 17.
            {
                Perform("PH002-2010-FINISH-NAME", "PH002-2010-EXIT"); if (Control.ExitProgram) { return; }
            }
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C2.
            while (!(WS.PH_FNTIC_C1.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH002-2020-WRAP-UP THRU PH002-2020-EXIT UNTIL PH-FNTIC-C1 > 17.
            {
                Perform("PH002-2020-WRAP-UP", "PH002-2020-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnLabel == "PH002-2000-REMAIN-NAME") { return; }  //Check for pass through to next method
        #endregion PH002-2000-REMAIN-NAME

        #region PH002-2000-EXIT
        L_PH002_2000_EXIT:;
            if (returnLabel == "PH002-2000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2000-EXIT

        #region PH002-2010-FINISH-NAME
        L_PH002_2010_FINISH_NAME:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    IF ON THE LAST 2 CHARACTERS OF THE NAME THEN HANDLE         *
            //COMMENT:    SPERATELY.                                                  *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C3.IsEqualTo(17))                                                                   //COBOL==> IF PH-FNTIC-C3 = 17
            {
                Perform("PH002-2011-LAST-LETTER", "PH002-2011-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH002-2011-LAST-LETTER THRU PH002-2011-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                // next                                                                                             //COBOL==> NEXT SENTENCE.
            }
            if (WS.PH_FNTIC_C3.IsEqualTo(16))                                                                   //COBOL==> IF PH-FNTIC-C3 = 16
            {
                Perform("PH002-2901-BUILD-2-1", "PH002-2901-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM PH002-2901-BUILD-2-1 THRU PH002-2901-EXIT
                Perform("PH002-2012-CHECK-2-LETTERS", "PH002-2012-EXIT"); if (Control.ExitProgram) { return; }        //COBOL==> PERFORM PH002-2012-CHECK-2-LETTERS THRU PH002-2012-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                Perform("PH002-2014-MIDDLE-LETTERS", "PH002-2014-EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PH002-2014-MIDDLE-LETTERS THRU PH002-2014-EXIT.
            }
            if (returnLabel == "PH002-2010-FINISH-NAME") { return; }  //Check for pass through to next method
        #endregion PH002-2010-FINISH-NAME

        #region PH002-2010-EXIT
        L_PH002_2010_EXIT:;
            if (returnLabel == "PH002-2010-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2010-EXIT

        #region PH002-2011-LAST-LETTER
        L_PH002_2011_LAST_LETTER:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CONVERT LAST LETTER OF THE NAME                             *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_REDUC[17].IsSpaces())                                                                   //COBOL==> IF PH-L-REDUC ( 17 ) = SPACE
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_ONE_LETTER.SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C3.AsInt()]);                                   //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C3 ) TO PH-ONE-LETTER
                WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1
                WS.PH_SUSS_ID.SetValueWithZeroes();                                                                 //COBOL==> MOVE 0 TO PH-SUSS-ID
                WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX
                Perform("PH002-2011-1-RE-ONE", "PH002-2011-1-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PH002-2011-1-RE-ONE THRU PH002-2011-1-EXIT
                Perform("PH002-2011-2-CK-SU-ID", "PH002-2011-2-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PH002-2011-2-CK-SU-ID THRU PH002-2011-2-EXIT.
            }
            if (returnLabel == "PH002-2011-LAST-LETTER") { return; }  //Check for pass through to next method
        #endregion PH002-2011-LAST-LETTER

        #region PH002-2011-EXIT
        L_PH002_2011_EXIT:;
            if (returnLabel == "PH002-2011-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2011-EXIT

        #region PH002-2011-1-RE-ONE
        L_PH002_2011_1_RE_ONE:;
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                Perform("PH002-2903-REM-ONE", "PH002-2903-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnLabel == "PH002-2011-1-RE-ONE") { return; }  //Check for pass through to next method
        #endregion PH002-2011-1-RE-ONE

        #region PH002-2011-1-EXIT
        L_PH002_2011_1_EXIT:;
            if (returnLabel == "PH002-2011-1-EXIT") { return; }                                                 //COBOL==> EXIT.
        #endregion PH002-2011-1-EXIT

        #region PH002-2011-2-CK-SU-ID
        L_PH002_2011_2_CK_SU_ID:;
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX ) .
            }
            if (returnLabel == "PH002-2011-2-CK-SU-ID") { return; }  //Check for pass through to next method
        #endregion PH002-2011-2-CK-SU-ID

        #region PH002-2011-2-EXIT
        L_PH002_2011_2_EXIT:;
            if (returnLabel == "PH002-2011-2-EXIT") { return; }                                                 //COBOL==> EXIT.
        #endregion PH002-2011-2-EXIT

        #region PH002-2012-CHECK-2-LETTERS
        L_PH002_2012_CHECK_2_LETTERS:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   CONVERT LAST 2 LETTERS OF NAME.                              *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_TWO_LETTERS.IsSpaces())                                                                   //COBOL==> IF PH-TWO-LETTERS = SPACES
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                goto L_PH002_2012_EXIT;                                                                             //COBOL==> GO TO PH002-2012-EXIT.
            }
            WS.PH_CR2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR2-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR2-INDXX.
            while (!(WS.PH_CR2_INDXX.IsGreaterThan(9)))                                                         //COBOL==> PERFORM PH002-2902-REM-TWO THRU PH002-2902-EXIT UNTIL PH-CR2-INDXX > 9.
            {
                Perform("PH002-2902-REM-TWO", "PH002-2902-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                goto L_PH002_2012_EXIT;                                                                             //COBOL==> GO TO PH002-2012-EXIT.
            }
            WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX.
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                Perform("PH002-2903-REM-ONE", "PH002-2903-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3.
            }
            if (returnLabel == "PH002-2012-CHECK-2-LETTERS") { return; }  //Check for pass through to next method
        #endregion PH002-2012-CHECK-2-LETTERS

        #region PH002-2012-EXIT
        L_PH002_2012_EXIT:;
            if (returnLabel == "PH002-2012-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2012-EXIT

        #region PH002-2014-MIDDLE-LETTERS
        L_PH002_2014_MIDDLE_LETTERS:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    THE FOLLOWING WILL CONVERT THE MIDDLE CHARATERS OF THE NAME.*
            //COMMENT: ---------------------------------------------------------------*
            Perform("PH002-2900-BUILD-3-2-1", "PH002-2900-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH002-2900-BUILD-3-2-1 THRU PH002-2900-EXIT.
            if (WS.PH_THREE_LETTERS.IsSpaces())                                                                 //COBOL==> IF PH-THREE-LETTERS = SPACES
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                goto L_PH002_2014_EXIT;                                                                             //COBOL==> GO TO PH002-2014-EXIT.
            }
            if (WS.PH_THREE_LETTERS.IsEqualTo("SCH"))                                                           //COBOL==> IF PH-THREE-LETTERS = 'SCH'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue("06");                                           //COBOL==> MOVE '06' TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(3);                                                                              //COBOL==> ADD 3 TO PH-FNTIC-C3
                goto L_PH002_2014_EXIT;                                                                             //COBOL==> GO TO PH002-2014-EXIT.
            }
            WS.PH_CR2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR2-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR2-INDXX.
            while (!(WS.PH_CR2_INDXX.IsGreaterThan(9)))                                                         //COBOL==> PERFORM PH002-2902-REM-TWO THRU PH002-2902-EXIT UNTIL PH-CR2-INDXX > 9.
            {
                Perform("PH002-2902-REM-TWO", "PH002-2902-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(2);                                                                              //COBOL==> ADD 2 TO PH-FNTIC-C3
                goto L_PH002_2014_EXIT;                                                                             //COBOL==> GO TO PH002-2014-EXIT.
            }
            WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX.
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                Perform("PH002-2903-REM-ONE", "PH002-2903-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3.
            }
            if (returnLabel == "PH002-2014-MIDDLE-LETTERS") { return; }  //Check for pass through to next method
        #endregion PH002-2014-MIDDLE-LETTERS

        #region PH002-2014-EXIT
        L_PH002_2014_EXIT:;
            if (returnLabel == "PH002-2014-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2014-EXIT

        #region PH002-2020-WRAP-UP
        L_PH002_2020_WRAP_UP:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   REDUCES THE 34 BYTE PHONETIC VALUE NAME TO A 17 BYTE         *
            //COMMENT:   PHONETIC VALUE.                                              *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_REFMT_34_17.SetValue(WS.PH_NAME_NUM_34[WS.PH_FNTIC_C1.AsInt()]);                              //COBOL==> MOVE PH-NAME-NUM-34 ( PH-FNTIC-C1 ) TO PH-REFMT-34-17.
            if (WS.PH_DIGIT_1.IsSpaces())                                                                       //COBOL==> IF PH-DIGIT-1 = SPACE
            {
                Perform("PH002-2021-DIGIT-1", "PH002-2021-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM PH002-2021-DIGIT-1 THRU PH002-2021-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_1);                                  //COBOL==> MOVE PH-DIGIT-1 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 )
                Perform("PH002-2022-DIGIT-2", "PH002-2022-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM PH002-2022-DIGIT-2 THRU PH002-2022-EXIT.
            }
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (returnLabel == "PH002-2020-WRAP-UP") { return; }  //Check for pass through to next method
        #endregion PH002-2020-WRAP-UP

        #region PH002-2020-EXIT
        L_PH002_2020_EXIT:;
            if (returnLabel == "PH002-2020-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2020-EXIT

        #region PH002-2021-DIGIT-1
        L_PH002_2021_DIGIT_1:;
            if (WS.PH_DIGIT_2.IsSpaces())                                                                       //COBOL==> IF PH-DIGIT-2 = SPACE
            {
                WS.PH_FNTIC_C1.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C1
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_2);                                  //COBOL==> MOVE PH-DIGIT-2 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 ) .
            }
            if (returnLabel == "PH002-2021-DIGIT-1") { return; }  //Check for pass through to next method
        #endregion PH002-2021-DIGIT-1

        #region PH002-2021-EXIT
        L_PH002_2021_EXIT:;
            if (returnLabel == "PH002-2021-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2021-EXIT

        #region PH002-2022-DIGIT-2
        L_PH002_2022_DIGIT_2:;
            if (!(WS.PH_DIGIT_2.IsSpaces()))                                                                    //COBOL==> IF PH-DIGIT-2 NOT EQUAL SPACE
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_2);                                  //COBOL==> MOVE PH-DIGIT-2 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 ) .
            }
            if (returnLabel == "PH002-2022-DIGIT-2") { return; }  //Check for pass through to next method
        #endregion PH002-2022-DIGIT-2

        #region PH002-2022-EXIT
        L_PH002_2022_EXIT:;
            if (returnLabel == "PH002-2022-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2022-EXIT

        #region PH002-3000-FIRST-2-LETTERS
        L_PH002_3000_FIRST_2_LETTERS:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST 2 LETTERS OF NAME                *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_CF2_INDXX.IsGreaterThan(17)))                                                        //COBOL==> PERFORM PH002-3010-FIRST-2 THRU PH002-3010-EXIT UNTIL PH-CF2-INDXX > 17.
            {
                Perform("PH002-3010-FIRST-2", "PH002-3010-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnLabel == "PH002-3000-FIRST-2-LETTERS") { return; }  //Check for pass through to next method
        #endregion PH002-3000-FIRST-2-LETTERS

        #region PH002-3000-EXIT
        L_PH002_3000_EXIT:;
            if (returnLabel == "PH002-3000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-3000-EXIT

        #region PH002-3010-FIRST-2
        L_PH002_3010_FIRST_2:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST 2 LETTERS OF NAME.               *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPH2[WS.PH_CF2_INDEX.AsInt()].IsEqualTo(WS.PH_TWO_LETTERS))                              //COBOL==> IF PH-ALPH2 ( PH-CF2-INDEX ) = PH-TWO-LETTERS
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUM2[WS.PH_CF2_INDEX.AsInt()]);                                            //COBOL==> MOVE PH-NUM2 ( PH-CF2-INDEX ) TO PH-HIT
                WS.PH_CF2_INDXX.SetValue(18);                                                                       //COBOL==> MOVE 18 TO PH-CF2-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CF2_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CF2-INDXX
                WS.PH_CF2_INDEX.Add(1);                                                                             //COBOL==> SET PH-CF2-INDEX UP BY 1.
            }
            if (returnLabel == "PH002-3010-FIRST-2") { return; }  //Check for pass through to next method
        #endregion PH002-3010-FIRST-2

        #region PH002-3010-EXIT
        L_PH002_3010_EXIT:;
            if (returnLabel == "PH002-3010-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-3010-EXIT

        #region PH002-4000-FIRST-1-LETTER
        L_PH002_4000_FIRST_1_LETTER:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR 1ST LETTER OF NAME                     *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_CF1_INDXX.IsGreaterThan(26)))                                                        //COBOL==> PERFORM PH002-4010-FIRST-1 THRU PH002-4010-EXIT UNTIL PH-CF1-INDXX > 26.
            {
                Perform("PH002-4010-FIRST-1", "PH002-4010-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnLabel == "PH002-4000-FIRST-1-LETTER") { return; }  //Check for pass through to next method
        #endregion PH002-4000-FIRST-1-LETTER

        #region PH002-4000-EXIT
        L_PH002_4000_EXIT:;
            if (returnLabel == "PH002-4000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-4000-EXIT

        #region PH002-4010-FIRST-1
        L_PH002_4010_FIRST_1:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST LETTER OF NAME                   *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPH1[WS.PH_CF1_INDEX.AsInt()].IsEqualTo(WS.PH_ONE_LETTER))                               //COBOL==> IF PH-ALPH1 ( PH-CF1-INDEX ) = PH-ONE-LETTER
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUM1[WS.PH_CF1_INDEX.AsInt()]);                                            //COBOL==> MOVE PH-NUM1 ( PH-CF1-INDEX ) TO PH-HIT
                WS.PH_CF1_INDXX.SetValue(27);                                                                       //COBOL==> MOVE 27 TO PH-CF1-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CF1_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CF1-INDXX
                WS.PH_CF1_INDEX.Add(1);                                                                             //COBOL==> SET PH-CF1-INDEX UP BY 1.
            }
            if (returnLabel == "PH002-4010-FIRST-1") { return; }  //Check for pass through to next method
        #endregion PH002-4010-FIRST-1

        #region PH002-4010-EXIT
        L_PH002_4010_EXIT:;
            if (returnLabel == "PH002-4010-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-4010-EXIT

        #region PH002-2900-BUILD-3-2-1
        L_PH002_2900_BUILD_3_2_1:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     SETS UP THE 3 LETTER FIELD                                 *
            //COMMENT: ---------------------------------------------------------------*
            Perform("PH002-2901-BUILD-2-1", "PH002-2901-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM PH002-2901-BUILD-2-1 THRU PH002-2901-EXIT.
            WS.PH_FNTIC_C2.SetValue(2 + WS.PH_FNTIC_C3.AsDecimal());                                            //COBOL==> ADD 2 PH-FNTIC-C3 GIVING PH-FNTIC-C2.
            WS.PH_LETTERS_3[3].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C2 ) TO PH-LETTERS-3 ( 3 ) .
            if (returnLabel == "PH002-2900-BUILD-3-2-1") { return; }  //Check for pass through to next method
        #endregion PH002-2900-BUILD-3-2-1

        #region PH002-2900-EXIT
        L_PH002_2900_EXIT:;
            if (returnLabel == "PH002-2900-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2900-EXIT

        #region PH002-2901-BUILD-2-1
        L_PH002_2901_BUILD_2_1:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    SETS UP FIELDS TO CHECK 2 LETTERS AND 1 LETTER              *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_LETTERS_3[1].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C3.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C3 ) TO PH-LETTERS-3 ( 1 ) .
            WS.PH_FNTIC_C2.SetValue(1 + WS.PH_FNTIC_C3.AsDecimal());                                            //COBOL==> ADD 1 PH-FNTIC-C3 GIVING PH-FNTIC-C2.
            WS.PH_LETTERS_3[2].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C2 ) TO PH-LETTERS-3 ( 2 ) .
            WS.PH_LETTERS_3[3].SetValueWithSpaces();                                                            //COBOL==> MOVE SPACE TO PH-LETTERS-3 ( 3 ) .
            WS.PH_TWO_LETTERS.SetValue(WS.PH_THREE_LETTERS);                                                    //COBOL==> MOVE PH-THREE-LETTERS TO PH-TWO-LETTERS.
            WS.PH_ONE_LETTER.SetValue(WS.PH_THREE_LETTERS);                                                     //COBOL==> MOVE PH-THREE-LETTERS TO PH-ONE-LETTER.
            if (returnLabel == "PH002-2901-BUILD-2-1") { return; }  //Check for pass through to next method
        #endregion PH002-2901-BUILD-2-1

        #region PH002-2901-EXIT
        L_PH002_2901_EXIT:;
            if (returnLabel == "PH002-2901-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2901-EXIT

        #region PH002-2902-REM-TWO
        L_PH002_2902_REM_TWO:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    SEARCHES REMAINING 2 LETTER TABLE                           *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPHR2[WS.PH_CR2_INDEX.AsInt()].IsEqualTo(WS.PH_TWO_LETTERS))                             //COBOL==> IF PH-ALPHR2 ( PH-CR2-INDEX ) = PH-TWO-LETTERS
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUMR2[WS.PH_CR2_INDEX.AsInt()]);                                           //COBOL==> MOVE PH-NUMR2 ( PH-CR2-INDEX ) TO PH-HIT
                WS.PH_CR2_INDXX.SetValue(10);                                                                       //COBOL==> MOVE 10 TO PH-CR2-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CR2_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CR2-INDXX
                WS.PH_CR2_INDEX.Add(1);                                                                             //COBOL==> SET PH-CR2-INDEX UP BY 1.
            }
            if (returnLabel == "PH002-2902-REM-TWO") { return; }  //Check for pass through to next method
        #endregion PH002-2902-REM-TWO

        #region PH002-2902-EXIT
        L_PH002_2902_EXIT:;
            if (returnLabel == "PH002-2902-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2902-EXIT

        #region PH002-2903-REM-ONE
        L_PH002_2903_REM_ONE:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     SEARCHES REMAINING 1 LETTER TABLE                          *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPHR1[WS.PH_CR1_INDEX.AsInt()].IsEqualTo(WS.PH_ONE_LETTER))                              //COBOL==> IF PH-ALPHR1 ( PH-CR1-INDEX ) = PH-ONE-LETTER
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUMR1[WS.PH_CR1_INDEX.AsInt()]);                                           //COBOL==> MOVE PH-NUMR1 ( PH-CR1-INDEX ) TO PH-HIT
                WS.PH_CR1_INDXX.SetValue(19);                                                                       //COBOL==> MOVE 19 TO PH-CR1-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CR1_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CR1-INDXX
                WS.PH_CR1_INDEX.Add(1);                                                                             //COBOL==> SET PH-CR1-INDEX UP BY 1.
            }
            if (returnLabel == "PH002-2903-REM-ONE") { return; }  //Check for pass through to next method
        #endregion PH002-2903-REM-ONE

        #region PH002-2903-EXIT
        L_PH002_2903_EXIT:;
            if (returnLabel == "PH002-2903-EXIT") { return; }                                                   //COBOL==> EXIT.
        ///COMMENT: ********************************************
        ///COMMENT: ***  THIS IS THE END OF MODULE SWAPH002   **
        ///COMMENT: ********************************************
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH003                                       *
        ///COMMENT:   DESCRIPTION:  REMOVE DUPLICATE LETTERS AND EMBEDDED BLANKS   *
        ///COMMENT:                 AND SPECIAL CHARACTERS (INCLUDING NUMBERS).    *
        ///COMMENT:                 ALSO REMOVE ANY NAME SUFFIX (JR, SR, ETC).     *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:  12/12/03 PAM LEAK I21982 UPDATE PHOENTIC SEARCH TO INCLUDE    *
        ///COMMENT:                           SUFFIX I,III,V,VI,VII,VIII,DR,RN,MD, *
        ///COMMENT:                           PHD                                  *
        ///COMMENT: ****************************************************************
        #endregion PH002-2903-EXIT

        #region PH003-0000-CRUNCH-NAME
        L_PH003_0000_CRUNCH_NAME:;
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE 0 TO PH-FNTIC-C2.
            Perform("PH003-0500-REMOVE-SUFFIX", "PH003-0500-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM PH003-0500-REMOVE-SUFFIX THRU PH003-0500-EXIT.
            while (!(WS.PH_FNTIC_C1.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH003-1000-CRUNCH-REM THRU PH003-1000-EXIT UNTIL PH-FNTIC-C1 > 17.
            {
                Perform("PH003-1000-CRUNCH-REM", "PH003-1000-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnLabel == "PH003-0000-CRUNCH-NAME") { return; }  //Check for pass through to next method
        #endregion PH003-0000-CRUNCH-NAME

        #region PH003-0000-EXIT
        L_PH003_0000_EXIT:;
            if (returnLabel == "PH003-0000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH003-0000-EXIT

        #region PH003-0500-REMOVE-SUFFIX
        L_PH003_0500_REMOVE_SUFFIX:;
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " JR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' JR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",JR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',JR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " SR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' SR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",SR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',SR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " DR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' DR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",DR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',DR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " RN", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' RN' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",RN", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',RN' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " MD", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' MD' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",MD", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',MD' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " PHD", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' PHD' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",PHD", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',PHD' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " III", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' III' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",III", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',III' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " II", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' II' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",II", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',II' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " I", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' I' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",I", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',I' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " IV", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' IV' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",IV", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',IV' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VIII", "     ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VIII' BY '     '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VIII", "     ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VIII' BY '     '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VII", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VII' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VII", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VII' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VI", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VI' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VI", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VI' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " V", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' V' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",V", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',V' BY '  '.
            if (returnLabel == "PH003-0500-REMOVE-SUFFIX") { return; }  //Check for pass through to next method
        #endregion PH003-0500-REMOVE-SUFFIX

        #region PH003-0500-EXIT
        L_PH003_0500_EXIT:;
            if (returnLabel == "PH003-0500-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH003-0500-EXIT

        #region PH003-1000-CRUNCH-REM
        L_PH003_1000_CRUNCH_REM:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    REMOVE BLANKS, DOUBLE LETTERS, NUMBERS, AND SPECIAL         *
            //COMMENT:    CHARACTERS.                                                 *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C1.IsEqualTo(17))                                                                   //COBOL==> IF PH-FNTIC-C1 = 17
            {
                Perform("PH003-1020-CHECK-SPACE", "PH003-1020-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH003-1020-CHECK-SPACE THRU PH003-1020-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_CX.SetValue(1 + WS.PH_FNTIC_C1.AsDecimal());                                            //COBOL==> ADD 1 PH-FNTIC-C1 GIVING PH-FNTIC-CX
                Perform("PH003-1010-CHECK-DUP", "PH003-1010-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM PH003-1010-CHECK-DUP THRU PH003-1010-EXIT.
            }
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (returnLabel == "PH003-1000-CRUNCH-REM") { return; }  //Check for pass through to next method
        #endregion PH003-1000-CRUNCH-REM

        #region PH003-1000-EXIT
        L_PH003_1000_EXIT:;
            if (returnLabel == "PH003-1000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH003-1000-EXIT

        #region PH003-1010-CHECK-DUP
        L_PH003_1010_CHECK_DUP:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CHECK FOR DUPLICATE LETTERS                                 *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_CRNCH[WS.PH_FNTIC_CX.AsInt()]))         //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) = PH-L-CRNCH ( PH-FNTIC-CX )
            {
                goto EndOfSentence_8;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                Perform("PH003-1020-CHECK-SPACE", "PH003-1020-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH003-1020-CHECK-SPACE THRU PH003-1020-EXIT.
            }
        EndOfSentence_8:;
            if (returnLabel == "PH003-1010-CHECK-DUP") { return; }  //Check for pass through to next method
        #endregion PH003-1010-CHECK-DUP

        #region PH003-1010-EXIT
        L_PH003_1010_EXIT:;
            if (returnLabel == "PH003-1010-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH003-1010-EXIT

        #region PH003-1020-CHECK-SPACE
        L_PH003_1020_CHECK_SPACE:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CHECK A SPACE, A NUMBER, OR A SPECIAL CHARACTER IN          *
            //COMMENT:    A GIVEN POSITION.                                           *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) = SPACE
            {
                goto EndOfSentence_9;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsAlphabetic())                                           //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) IS ALPHABETIC
                {
                    WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                    WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()]);              //COBOL==> MOVE PH-L-CRNCH ( PH-FNTIC-C1 ) TO PH-L-REDUC ( PH-FNTIC-C2 )
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    // next                                                                                             //COBOL==> NEXT SENTENCE.
                }
            }
        EndOfSentence_9:;
            if (returnLabel == "PH003-1020-CHECK-SPACE") { return; }  //Check for pass through to next method
        #endregion PH003-1020-CHECK-SPACE

        #region PH003-1020-EXIT
        L_PH003_1020_EXIT:;
            if (returnLabel == "PH003-1020-EXIT") { return; }                                                   //COBOL==> EXIT.
        ///COMMENT: ********************************
        ///COMMENT: ***   END MODULE SWAPH003   ****
        ///COMMENT: ********************************
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH004                                       *
        ///COMMENT:   DESCRIPTION:  COMPUTE PERCENTAGE OF LIKENESS BETWEEN THE     *
        ///COMMENT:                 INQUIRY NAME AND THE DATABASE NAME. BOTH NAMES *
        ///COMMENT:                 HAVE HAD DUPLICATE LETTERS AND EMBEDDED BLANKS *
        ///COMMENT:                 REMOVED.                                       *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:                                                                *
        ///COMMENT: ****************************************************************
        #endregion PH003-1020-EXIT

        #region PH004-0000-LIKENESS
        L_PH004_0000_LIKENESS:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      REMOVE DUPLICATE LETTERS AND EMBEDDED BLANKS FROM THE     *
            //COMMENT:      DATABASE NAME.                                            *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_NAME_CRUNCH_INQ.SetValue(WS.PH_NAME_RAW_MSTR);                                                //COBOL==> MOVE PH-NAME-RAW-MSTR TO PH-NAME-CRUNCH-INQ.
            WS.PH_NAME_REDUC_INQ.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO PH-NAME-REDUC-INQ.
            Perform("PH003-0000-CRUNCH-NAME", "PH003-0000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH003-0000-CRUNCH-NAME THRU PH003-0000-EXIT.
                                                                                                                  //COMMENT: ---------------------------------------------------------------*
                                                                                                                  //COMMENT:      INITIALIZE FIELDS.                                        *
                                                                                                                  //COMMENT: ---------------------------------------------------------------*
            WS.PH_COUNT_UP.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-COUNT-UP.
            WS.PH_DEGREE.SetValueWithZeroes();                                                                  //COBOL==> MOVE ZEROS TO PH-DEGREE.
            WS.PH_L1.SetValueWithZeroes();                                                                      //COBOL==> MOVE ZEROS TO PH-L1.
            WS.PH_COUNT_INQUIRY.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO PH-COUNT-INQUIRY.
            WS.PH_COUNT_DB.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-COUNT-DB.
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                Perform("PH004-1000-CHECK-DEGREE", "PH004-1000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT
                goto L_PH004_0000_EXIT;                                                                             //COBOL==> GO TO PH004-0000-EXIT.
            }
            WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                Perform("PH004-1000-CHECK-DEGREE", "PH004-1000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT
                goto L_PH004_0000_EXIT;                                                                             //COBOL==> GO TO PH004-0000-EXIT.
            }
            Perform("PH004-1000-CHECK-DEGREE", "PH004-1000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT.
            if (returnLabel == "PH004-0000-LIKENESS") { return; }  //Check for pass through to next method
        #endregion PH004-0000-LIKENESS

        #region PH004-0000-EXIT
        L_PH004_0000_EXIT:;
            if (returnLabel == "PH004-0000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH004-0000-EXIT

        #region PH004-1000-CHECK-DEGREE
        L_PH004_1000_CHECK_DEGREE:;
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            while (!(WS.PH_L1.IsEqualTo(1)))                                                                    //COBOL==> PERFORM PH004-1100-PROCESS-DEGREE THRU PH004-1100-EXIT UNTIL PH-L1 = 1.
            {
                Perform("PH004-1100-PROCESS-DEGREE", "PH004-1100-EXIT"); if (Control.ExitProgram) { return; }
            }
            WS.PH_L1.SetValueWithZeroes();                                                                      //COBOL==> MOVE 0 TO PH-L1.
            WS.PH_FNTIC_C1.SetValueWithZeroes();                                                                //COBOL==> MOVE 0 TO PH-FNTIC-C1.
            while (!(WS.PH_L1.IsEqualTo(1)))                                                                    //COBOL==> PERFORM PH004-1200-COUNT-DIGITS THRU PH004-1200-EXIT UNTIL PH-L1 = 1.
            {
                Perform("PH004-1200-COUNT-DIGITS", "PH004-1200-EXIT"); if (Control.ExitProgram) { return; }
            }
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COMPUTE DEGREE OF LIKENESS.                               *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_COUNT_INQUIRY.IsGreaterThan(WS.PH_COUNT_DB))                                              //COBOL==> IF PH-COUNT-INQUIRY > PH-COUNT-DB
            {
                WS.PH_DEGREE.SetValue(Math.Round(WS.PH_COUNT_UP.AsDecimal() / WS.PH_COUNT_INQUIRY.AsDecimal(), WS.PH_DEGREE.DecimalDigits, MidpointRounding.AwayFromZero));  //COBOL==> DIVIDE PH-COUNT-UP BY PH-COUNT-INQUIRY GIVING PH-DEGREE ROUNDED
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_DEGREE.SetValue(Math.Round(WS.PH_COUNT_UP.AsDecimal() / WS.PH_COUNT_DB.AsDecimal(), WS.PH_DEGREE.DecimalDigits, MidpointRounding.AwayFromZero));  //COBOL==> DIVIDE PH-COUNT-UP BY PH-COUNT-DB GIVING PH-DEGREE ROUNDED.
            }
            if (returnLabel == "PH004-1000-CHECK-DEGREE") { return; }  //Check for pass through to next method
        #endregion PH004-1000-CHECK-DEGREE

        #region PH004-1000-EXIT
        L_PH004_1000_EXIT:;
            if (returnLabel == "PH004-1000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH004-1000-EXIT

        #region PH004-1100-PROCESS-DEGREE
        L_PH004_1100_PROCESS_DEGREE:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COMPARE LETTERS IN THE INQUIRY NAME TO LETTERS IN THE     *
            //COMMENT:      DATABASE NAME.                                            *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C1.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C1 > 17
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C1);                                                            //COBOL==> MOVE PH-FNTIC-C1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = SPACE
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
            }
            if (WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C2 ) = SPACE
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
            if (WS.PH_FNTIC_C2.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C2 > 17
            {
                WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C2.AsInt() - 2);                                                //COBOL==> SUBTRACT 2 FROM PH-FNTIC-C2
                if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
                {
                    WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                    WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                    goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                    goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
                }
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C2.AsInt() - 2);                                                //COBOL==> SUBTRACT 2 FROM PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            }
            if (returnLabel == "PH004-1100-PROCESS-DEGREE") { return; }  //Check for pass through to next method
        #endregion PH004-1100-PROCESS-DEGREE

        #region PH004-1100-EXIT
        L_PH004_1100_EXIT:;
            if (returnLabel == "PH004-1100-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH004-1100-EXIT

        #region PH004-1200-COUNT-DIGITS
        L_PH004_1200_COUNT_DIGITS:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COUNT THE DIGITS IN THE INQUIRY AND DATABASE NAMES.       *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (WS.PH_FNTIC_C1.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C1 > 17
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                goto L_PH004_1200_EXIT;                                                                             //COBOL==> GO TO PH004-1200-EXIT.
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = SPACES
            {
                if (WS.PH_L_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C1 ) = SPACES
                {
                    WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.PH_COUNT_DB.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-DB
                }                                                                                                   //COBOL==> ELSE
            }
            else
            {
                WS.PH_COUNT_INQUIRY.Add(1);                                                                         //COBOL==> ADD 1 TO PH-COUNT-INQUIRY
                if (WS.PH_L_REDUC[WS.PH_FNTIC_C1.AsInt()].IsGreaterThan(SPACES))                                    //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C1 ) > SPACES
                {
                    WS.PH_COUNT_DB.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-DB.
                }
            }
            if (returnLabel == "PH004-1200-COUNT-DIGITS") { return; }  //Check for pass through to next method
        #endregion PH004-1200-COUNT-DIGITS

        #region PH004-1200-EXIT
        L_PH004_1200_EXIT:;
            if (returnLabel == "PH004-1200-EXIT") { return; }                                                   //COBOL==> EXIT.
        ///COMMENT: ************************
        ///COMMENT: **  END OF SWAPH004  ***
        ///COMMENT: ************************
        #endregion PH004-1200-EXIT

        #region PARA-0329176144-INIT
        L_PARA_0329176144_INIT:;
            LS.EXPORT_0003EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0003EV .
            if (returnLabel == "PARA-0329176144-INIT") { return; }  //Check for pass through to next method
        #endregion PARA-0329176144-INIT

        #region PARA-0329176144-INIT-EXIT
        L_PARA_0329176144_INIT_EXIT:;
            if (returnLabel == "PARA-0329176144-INIT-EXIT") { return; }                                         //COBOL==> EXIT.
            #endregion PARA-0329176144-INIT-EXIT
        }
        #endregion
    }
    #endregion
}
