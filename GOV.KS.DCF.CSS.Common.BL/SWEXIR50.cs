#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:51:32 PM
   **        *   FROM COBOL PGM   :  SWEXIR50
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                   INFORMATION ENGINEERING FACILITY (TM)
                       TEXAS INSTRUMENTS INC.
                COPYRIGHT (C) TEXAS INSTRUMENTS INC. 1997
       NAME: SI_EAB_RETRIEVE_ADABAS_PRSN_PGMS DATE: 97/06/20
       TARGET OS:   MVS                       TIME: 12:28:55
       TARGET DBMS: DB2                       USER: SWMTSXC
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
   **************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Control.CICS;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXIR50_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXIR50_ws_WorkingStorage";
            internal const string ADIM1 = "ADIM1";
            internal const string ADIM2 = "ADIM2";
            internal const string ADIM3 = "ADIM3";
            internal const string EXPORT_GROUP_0001FL = "EXPORT_GROUP_0001FL";
            internal const string EXPORT_GROUP_0001PS = "EXPORT_GROUP_0001PS";
            internal const string EXPORT_GROUP_0001RF = "EXPORT_GROUP_0001RF";
            internal const string FUNC_0726937745_ESC_FLAG = "FUNC_0726937745_ESC_FLAG";
            internal const string SRADALNK = "SRADALNK";
            internal const string SRMODLNK = "SRMODLNK";
            internal const string MV_ABEND_FIELDS_KEES = "MV_ABEND_FIELDS_KEES";
            internal const string MV_ABEND_FIELDS = "MV_ABEND_FIELDS";
            internal const string MV_ABEND_TYPE = "MV_ABEND_TYPE";
            internal const string MV_ABEND_TYPE_NONE = "MV_ABEND_TYPE_NONE";
            internal const string MV_ABEND_TYPE_ADABAS = "MV_ABEND_TYPE_ADABAS";
            internal const string MV_ABEND_TYPE_CICS = "MV_ABEND_TYPE_CICS";
            internal const string MV_ABEND_ADABAS = "MV_ABEND_ADABAS";
            internal const string MV_ADA_FILE_NUMBER = "MV_ADA_FILE_NUMBER";
            internal const string MV_ADA_FILE_ACTION = "MV_ADA_FILE_ACTION";
            internal const string MV_ADA_RESPONSE_CD = "MV_ADA_RESPONSE_CD";
            internal const string MV_ABEND_CICS = "MV_ABEND_CICS";
            internal const string MV_CICS_RESOURCE_NM = "MV_CICS_RESOURCE_NM";
            internal const string MV_CICS_FUNCTION_CD = "MV_CICS_FUNCTION_CD";
            internal const string MV_CICS_RESPONSE_CD = "MV_CICS_RESPONSE_CD";
            internal const string WRK_PGM_ERR = "WRK_PGM_ERR";
            internal const string WRK_ERR_TYP = "WRK_ERR_TYP";
            internal const string WRK_ADA_ERR = "WRK_ADA_ERR";
            internal const string WRK_ENV_ERR = "WRK_ENV_ERR";
            internal const string WRK_ADA_ACT = "WRK_ADA_ACT";
            internal const string WRK_ADD_ERR = "WRK_ADD_ERR";
            internal const string WRK_BEG_ERR = "WRK_BEG_ERR";
            internal const string WRK_END_ERR = "WRK_END_ERR";
            internal const string WRK_REL_ERR = "WRK_REL_ERR";
            internal const string WRK_RIN_ERR = "WRK_RIN_ERR";
            internal const string WRK_RLF_ERR = "WRK_RLF_ERR";
            internal const string WRK_RLN_ERR = "WRK_RLN_ERR";
            internal const string WRK_UPD_ERR = "WRK_UPD_ERR";
            internal const string WRK_ADA_CD = "WRK_ADA_CD";
            internal const string WRK_ADA_NBR = "WRK_ADA_NBR";
            internal const string WRK_RES_NM = "WRK_RES_NM";
            internal const string WRK_FUN_CD = "WRK_FUN_CD";
            internal const string WRK_ERR_CD = "WRK_ERR_CD";
            internal const string WRK_CUR_TM = "WRK_CUR_TM";
            internal const string WRK_CUR_DT = "WRK_CUR_DT";
            internal const string WRK_CUR_CC = "WRK_CUR_CC";
            internal const string WRK_CUR_YMD = "WRK_CUR_YMD";
            internal const string WRK_CUR_CY = "WRK_CUR_CY";
            internal const string WRK_JJA_DT = "WRK_JJA_DT";
            internal const string WRK_CLT_FND_CHK = "WRK_CLT_FND_CHK";
            internal const string WRK_CLT_FND = "WRK_CLT_FND";
            internal const string WRK_PRT_CMP_CHK = "WRK_PRT_CMP_CHK";
            internal const string WRK_PRT_CMP = "WRK_PRT_CMP";
            internal const string WRK_PRT_EOF_CHK = "WRK_PRT_EOF_CHK";
            internal const string WRK_PRT_EOF = "WRK_PRT_EOF";
            internal const string WRK_PRT_ERR_CHK = "WRK_PRT_ERR_CHK";
            internal const string WRK_PRT_ERR = "WRK_PRT_ERR";
            internal const string X = "X";
            internal const string Y = "Y";
            internal const string PRT_TBL = "PRT_TBL";
            internal const string PRT_REC = "PRT_REC";
            internal const string PRT_CSE_NBR = "PRT_CSE_NBR";
            internal const string PRT_PGM_TYP = "PRT_PGM_TYP";
            internal const string PRT_CD = "PRT_CD";
            internal const string PRT_BEG_DT = "PRT_BEG_DT";
            internal const string PRT_END_DT = "PRT_END_DT";
            internal const string PRT_PGM_DT = "PRT_PGM_DT";
            internal const string PRT_FND_CD = "PRT_FND_CD";
            internal const string DUP_MSG = "DUP_MSG";
            internal const string PRC_MSG = "PRC_MSG";
            internal const string WRK_MSG = "WRK_MSG";
            internal const string WRK_REC = "WRK_REC";
            internal const string WRK_CLT_NBR = "WRK_CLT_NBR";
            internal const string WRK_CSE_NBR = "WRK_CSE_NBR";
            internal const string WRK_PGM_TYP = "WRK_PGM_TYP";
            internal const string WRK_VAL_PGM_TYP = "WRK_VAL_PGM_TYP";
            internal const string WRK_PRT_CD = "WRK_PRT_CD";
            internal const string WRK_VAL_PRT_CD = "WRK_VAL_PRT_CD";
            internal const string WRK_VAL_MED_CD = "WRK_VAL_MED_CD";
            internal const string WRK_BEG_DT = "WRK_BEG_DT";
            internal const string WRK_END_DT = "WRK_END_DT";
            internal const string WRK_PGM_DT = "WRK_PGM_DT";
            internal const string WRK_FND_CD = "WRK_FND_CD";
            internal const string WRK_LEG_CD = "WRK_LEG_CD";
            internal const string WRK_JJA_CD = "WRK_JJA_CD";
            internal const string WRK_PGM_CD = "WRK_PGM_CD";
            internal const string WRK_INV_PGM_CD = "WRK_INV_PGM_CD";
            internal const string WRK_OPN_DT = "WRK_OPN_DT";
            internal const string WRK_MAX_CY = "WRK_MAX_CY";
            internal const string WRK_PLC_DT = "WRK_PLC_DT";
            internal const string WRK_CHK_DT = "WRK_CHK_DT";
            internal const string WRK_CHK_CY = "WRK_CHK_CY";
            internal const string WS_CHK_CC = "WS_CHK_CC";
            internal const string WRK_VAL_CC = "WRK_VAL_CC";
            internal const string WS_CHK_YY = "WS_CHK_YY";
            internal const string WRK_VAL_YY = "WRK_VAL_YY";
            internal const string WRK_CHK_MM = "WRK_CHK_MM";
            internal const string WRK_VAL_MM = "WRK_VAL_MM";
            internal const string WRK_VAL_MM_30 = "WRK_VAL_MM_30";
            internal const string WRK_CHK_DD = "WRK_CHK_DD";
            internal const string WRK_VAL_DD = "WRK_VAL_DD";
            internal const string WRK_DIV = "WRK_DIV";
            internal const string WRK_REM = "WRK_REM";
            internal const string WS_VARIABLE = "WS_VARIABLE";
            internal const string WS_SQLCODE = "WS_SQLCODE";
            internal const string CL154_SWITCHES = "CL154_SWITCHES";
            internal const string CL154_EOF_SW = "CL154_EOF_SW";
            internal const string CL154_EOF_NOT_FOUND = "CL154_EOF_NOT_FOUND";
            internal const string CL154_EOF_NO = "CL154_EOF_NO";
            internal const string CL154_EOF_YES = "CL154_EOF_YES";
            internal const string CL154_ERR_SW = "CL154_ERR_SW";
            internal const string CL154_ERR_NO = "CL154_ERR_NO";
            internal const string CL154_ERR_YES = "CL154_ERR_YES";
            internal const string CL160_SWITCHES = "CL160_SWITCHES";
            internal const string CL160_EOF_SW = "CL160_EOF_SW";
            internal const string CL160_EOF_NOT_FOUND = "CL160_EOF_NOT_FOUND";
            internal const string CL160_EOF_NO = "CL160_EOF_NO";
            internal const string CL160_EOF_YES = "CL160_EOF_YES";
            internal const string CL160_ERR_SW = "CL160_ERR_SW";
            internal const string CL160_ERR_NO = "CL160_ERR_NO";
            internal const string CL160_ERR_YES = "CL160_ERR_YES";
            internal const string CL161_SWITCHES = "CL161_SWITCHES";
            internal const string CL161_EOF_SW = "CL161_EOF_SW";
            internal const string CL161_EOF_NOT_FOUND = "CL161_EOF_NOT_FOUND";
            internal const string CL161_EOF_NO = "CL161_EOF_NO";
            internal const string CL161_EOF_YES = "CL161_EOF_YES";
            internal const string CL161_ERR_SW = "CL161_ERR_SW";
            internal const string CL161_ERR_NO = "CL161_ERR_NO";
            internal const string CL161_ERR_YES = "CL161_ERR_YES";
            internal const string CL162_SWITCHES = "CL162_SWITCHES";
            internal const string CL162_EOF_SW = "CL162_EOF_SW";
            internal const string CL162_EOF_NOT_FOUND = "CL162_EOF_NOT_FOUND";
            internal const string CL162_EOF_NO = "CL162_EOF_NO";
            internal const string CL162_EOF_YES = "CL162_EOF_YES";
            internal const string CL162_ERR_SW = "CL162_ERR_SW";
            internal const string CL162_ERR_NO = "CL162_ERR_NO";
            internal const string CL162_ERR_YES = "CL162_ERR_YES";
            internal const string LST_PGM_TYP = "LST_PGM_TYP";
            internal const string DBK1_KEYS = "DBK1_KEYS";
            internal const string DBK1_CLIENT_NUMBER = "DBK1_CLIENT_NUMBER";
            internal const string DBK1_COUNT = "DBK1_COUNT";
            internal const string DCLKSD_CLIENT_BASIC = "DCLKSD_CLIENT_BASIC";
            internal const string CLIENTB_CLIENT_NUMBER = "CLIENTB_CLIENT_NUMBER";
            internal const string CLIENTB_CLIENT_GIVEN_NAME = "CLIENTB_CLIENT_GIVEN_NAME";
            internal const string CLIENTB_CLIENT_INITIALS = "CLIENTB_CLIENT_INITIALS";
            internal const string CLIENTB_CLIENT_SURNAME = "CLIENTB_CLIENT_SURNAME";
            internal const string CLIENTB_CIS_REPL_IND = "CLIENTB_CIS_REPL_IND";
            internal const string CLIENTB_WORK_PHONE = "CLIENTB_WORK_PHONE";
            internal const string CLIENTB_SSN = "CLIENTB_SSN";
            internal const string CLIENTB_GENDER = "CLIENTB_GENDER";
            internal const string CLIENTB_PARENT_RGHTS_SEV = "CLIENTB_PARENT_RGHTS_SEV";
            internal const string CLIENTB_PRNT_RGHTS_SEV_DT = "CLIENTB_PRNT_RGHTS_SEV_DT";
            internal const string CLIENTB_LEGAL_STATUS = "CLIENTB_LEGAL_STATUS";
            internal const string CLIENTB_INSURANCE_CODE = "CLIENTB_INSURANCE_CODE";
            internal const string CLIENTB_INITIAL_CUSTODY_DT = "CLIENTB_INITIAL_CUSTODY_DT";
            internal const string CLIENTB_HOME_PHONE = "CLIENTB_HOME_PHONE";
            internal const string CLIENTB_DATE_OF_BIRTH = "CLIENTB_DATE_OF_BIRTH";
            internal const string CLIENTB_CURR_PLACEMNT_DT = "CLIENTB_CURR_PLACEMNT_DT";
            internal const string CLIENTB_CURRENT_PLACEMENT = "CLIENTB_CURRENT_PLACEMENT";
            internal const string CLIENTB_CSEA_G_CAUSE_CODE = "CLIENTB_CSEA_G_CAUSE_CODE";
            internal const string CLIENTB_CSEA_G_CAUSE_CL_DT = "CLIENTB_CSEA_G_CAUSE_CL_DT";
            internal const string CLIENTB_CSEA_COOP_CODE = "CLIENTB_CSEA_COOP_CODE";
            internal const string CLIENTB_COUNTY_CRT_COMMIT = "CLIENTB_COUNTY_CRT_COMMIT";
            internal const string CLIENTB_MONTHS_ASST_AF = "CLIENTB_MONTHS_ASST_AF";
            internal const string CLIENTB_MONTHS_ASST_GA = "CLIENTB_MONTHS_ASST_GA";
            internal const string CLIENTB_MO_DEATH_DT = "CLIENTB_MO_DEATH_DT";
            internal const string CLIENTB_MO_PRT_DT = "CLIENTB_MO_PRT_DT";
            internal const string CLIENTB_FA_DEATH_DT = "CLIENTB_FA_DEATH_DT";
            internal const string CLIENTB_FA_PRT_DT = "CLIENTB_FA_PRT_DT";
            internal const string CLIENTB_MPI_ID = "CLIENTB_MPI_ID";
            internal const string CLIENTB_MED_COVERAGE_IND = "CLIENTB_MED_COVERAGE_IND";
            internal const string DCLKSD_INVOLVEMENT = "DCLKSD_INVOLVEMENT";
            internal const string INVOLVE_DENIAL_CL_REASON = "INVOLVE_DENIAL_CL_REASON";
            internal const string INVOLVE_KESSEP_TIME_STMP = "INVOLVE_KESSEP_TIME_STMP";
            internal const string INVOLVE_PROGRAM_START_DATE = "INVOLVE_PROGRAM_START_DATE";
            internal const string INVOLVE_PROGRAM_END_DATE = "INVOLVE_PROGRAM_END_DATE";
            internal const string INVOLVE_PROGRAM_STATUS = "INVOLVE_PROGRAM_STATUS";
            internal const string INVOLVE_PROGRAM_STATUS_DT = "INVOLVE_PROGRAM_STATUS_DT";
            internal const string INVOLVE_CREATED_BY = "INVOLVE_CREATED_BY";
            internal const string INVOLVE_CREATED_TIMESTAMP = "INVOLVE_CREATED_TIMESTAMP";
            internal const string INVOLVE_LAST_MODIFIED_BY = "INVOLVE_LAST_MODIFIED_BY";
            internal const string INVOLVE_LAST_MODIFIED_TMST = "INVOLVE_LAST_MODIFIED_TMST";
            internal const string INVOLVE_FK_CSB_CASE_NO = "INVOLVE_FK_CSB_CASE_NO";
            internal const string INVOLVE_FK_PGB_PROG_TYPE = "INVOLVE_FK_PGB_PROG_TYPE";
            internal const string DCLKSD_PROGRAM_BASIC = "DCLKSD_PROGRAM_BASIC";
            internal const string PGMBASIC_PROGRAM_TYPE = "PGMBASIC_PROGRAM_TYPE";
            internal const string PGMBASIC_SOURCE_OF_FUNDING = "PGMBASIC_SOURCE_OF_FUNDING";
            internal const string PGMBASIC_CASE_CLOSE_RSN_CD = "PGMBASIC_CASE_CLOSE_RSN_CD";
            internal const string PGMBASIC_BEN_PRORATION_DATE = "PGMBASIC_BEN_PRORATION_DATE";
            internal const string PGMBASIC_REVIEW_MONTH_DUE = "PGMBASIC_REVIEW_MONTH_DUE";
            internal const string PGMBASIC_CREATED_BY = "PGMBASIC_CREATED_BY";
            internal const string PGMBASIC_CREATED_TIMESTAMP = "PGMBASIC_CREATED_TIMESTAMP";
            internal const string PGMBASIC_LAST_MODIFIED_BY = "PGMBASIC_LAST_MODIFIED_BY";
            internal const string PGMBASIC_LAST_MODIFIED_TMST = "PGMBASIC_LAST_MODIFIED_TMST";
            internal const string PGMBASIC_FK_CSB_CASE_NO = "PGMBASIC_FK_CSB_CASE_NO";
            internal const string DCLKSD_PERSON_PGM_REQ = "DCLKSD_PERSON_PGM_REQ";
            internal const string PRPGMREQ_PROGRAM_KEY = "PRPGMREQ_PROGRAM_KEY";
            internal const string PRPGMREQ_CREATED_BY = "PRPGMREQ_CREATED_BY";
            internal const string PRPGMREQ_CREATED_TIMESTAMP = "PRPGMREQ_CREATED_TIMESTAMP";
            internal const string PRPGMREQ_LAST_MODIFIED_BY = "PRPGMREQ_LAST_MODIFIED_BY";
            internal const string PRPGMREQ_LAST_MODIFIED_TMST = "PRPGMREQ_LAST_MODIFIED_TMST";
            internal const string PRPGMREQ_FK_CLB_CLIENT_NO = "PRPGMREQ_FK_CLB_CLIENT_NO";
            internal const string DCLKSD_PARTICIPATION = "DCLKSD_PARTICIPATION";
            internal const string PART_KESSEP_TIME_STMP = "PART_KESSEP_TIME_STMP";
            internal const string PART_PART_END_DATE = "PART_PART_END_DATE";
            internal const string PART_PART_START_DATE = "PART_PART_START_DATE";
            internal const string PART_PART_CODE = "PART_PART_CODE";
            internal const string PART_PROGRAM_END_DATE = "PART_PROGRAM_END_DATE";
            internal const string PART_PROGRAM_SUBTYPE = "PART_PROGRAM_SUBTYPE";
            internal const string PART_RELATIONSHIP = "PART_RELATIONSHIP";
            internal const string PART_CREATED_BY = "PART_CREATED_BY";
            internal const string PART_CREATED_TIMESTAMP = "PART_CREATED_TIMESTAMP";
            internal const string PART_LAST_MODIFIED_BY = "PART_LAST_MODIFIED_BY";
            internal const string PART_LAST_MODIFIED_TMST = "PART_LAST_MODIFIED_TMST";
            internal const string PART_FK_CSB_CASE_NO = "PART_FK_CSB_CASE_NO";
            internal const string PART_FK_PGB_PROG_TYPE = "PART_FK_PGB_PROG_TYPE";
            internal const string PART_FK_CLB_CLIENT_NO = "PART_FK_CLB_CLIENT_NO";
            internal const string CONTROL_BLOCK = "CONTROL_BLOCK";
            internal const string COMMAND_CODE = "COMMAND_CODE";
            internal const string COMMAND_ID = "COMMAND_ID";
            internal const string FILE_NUMBER = "FILE_NUMBER";
            internal const string RESPONSE_CODE = "RESPONSE_CODE";
            internal const string ISN = "ISN";
            internal const string ISN_LOWER_LIMIT = "ISN_LOWER_LIMIT";
            internal const string ISN_QUANTITY = "ISN_QUANTITY";
            internal const string FORMAT_BUFFER_LENGTH = "FORMAT_BUFFER_LENGTH";
            internal const string RECORD_BUFFER_LENGTH = "RECORD_BUFFER_LENGTH";
            internal const string SEARCH_BUFFER_LENGTH = "SEARCH_BUFFER_LENGTH";
            internal const string VALUE_BUFFER_LENGTH = "VALUE_BUFFER_LENGTH";
            internal const string ISN_BUFFER_LENGTH = "ISN_BUFFER_LENGTH";
            internal const string COMMAND_OPTION_1 = "COMMAND_OPTION_1";
            internal const string COMMAND_OPTION_2 = "COMMAND_OPTION_2";
            internal const string ADDITIONS_1 = "ADDITIONS_1";
            internal const string ADDITIONS_2 = "ADDITIONS_2";
            internal const string ADDITIONS_3 = "ADDITIONS_3";
            internal const string ADDITIONS_4 = "ADDITIONS_4";
            internal const string COMMAND_TIME = "COMMAND_TIME";
            internal const string USER_AREA = "USER_AREA";
        }
        #endregion

        #region Direct-access element properties
        public IField ADIM1 { get { return GetElementByName<IField>(Names.ADIM1); } }
        public IField ADIM2 { get { return GetElementByName<IField>(Names.ADIM2); } }
        public IField ADIM3 { get { return GetElementByName<IField>(Names.ADIM3); } }
        public IField EXPORT_GROUP_0001FL { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001FL); } }
        public IField EXPORT_GROUP_0001PS { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001PS); } }
        public IField EXPORT_GROUP_0001RF { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001RF); } }
        public IField FUNC_0726937745_ESC_FLAG { get { return GetElementByName<IField>(Names.FUNC_0726937745_ESC_FLAG); } }
        public IField SRADALNK { get { return GetElementByName<IField>(Names.SRADALNK); } }
        public IField SRMODLNK { get { return GetElementByName<IField>(Names.SRMODLNK); } }
        public IGroup MV_ABEND_FIELDS_KEES { get { return GetElementByName<IGroup>(Names.MV_ABEND_FIELDS_KEES); } }
        public IGroup MV_ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.MV_ABEND_FIELDS); } }
        public IField MV_ABEND_TYPE { get { return GetElementByName<IField>(Names.MV_ABEND_TYPE); } }
        public ICheckField MV_ABEND_TYPE_NONE { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_NONE); } }
        public ICheckField MV_ABEND_TYPE_ADABAS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_ADABAS); } }
        public ICheckField MV_ABEND_TYPE_CICS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_CICS); } }
        public IGroup MV_ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.MV_ABEND_ADABAS); } }
        public IField MV_ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.MV_ADA_FILE_NUMBER); } }
        public IField MV_ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.MV_ADA_FILE_ACTION); } }
        public IField MV_ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_ADA_RESPONSE_CD); } }
        public IGroup MV_ABEND_CICS { get { return GetElementByName<IGroup>(Names.MV_ABEND_CICS); } }
        public IField MV_CICS_RESOURCE_NM { get { return GetElementByName<IField>(Names.MV_CICS_RESOURCE_NM); } }
        public IField MV_CICS_FUNCTION_CD { get { return GetElementByName<IField>(Names.MV_CICS_FUNCTION_CD); } }
        public IField MV_CICS_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_CICS_RESPONSE_CD); } }
        public IGroup WRK_PGM_ERR { get { return GetElementByName<IGroup>(Names.WRK_PGM_ERR); } }
        public IField WRK_ERR_TYP { get { return GetElementByName<IField>(Names.WRK_ERR_TYP); } }
        public ICheckField WRK_ADA_ERR { get { return GetElementByName<ICheckField>(Names.WRK_ADA_ERR); } }
        public ICheckField WRK_ENV_ERR { get { return GetElementByName<ICheckField>(Names.WRK_ENV_ERR); } }
        public IField WRK_ADA_ACT { get { return GetElementByName<IField>(Names.WRK_ADA_ACT); } }
        public ICheckField WRK_ADD_ERR { get { return GetElementByName<ICheckField>(Names.WRK_ADD_ERR); } }
        public ICheckField WRK_BEG_ERR { get { return GetElementByName<ICheckField>(Names.WRK_BEG_ERR); } }
        public ICheckField WRK_END_ERR { get { return GetElementByName<ICheckField>(Names.WRK_END_ERR); } }
        public ICheckField WRK_REL_ERR { get { return GetElementByName<ICheckField>(Names.WRK_REL_ERR); } }
        public ICheckField WRK_RIN_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RIN_ERR); } }
        public ICheckField WRK_RLF_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RLF_ERR); } }
        public ICheckField WRK_RLN_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RLN_ERR); } }
        public ICheckField WRK_UPD_ERR { get { return GetElementByName<ICheckField>(Names.WRK_UPD_ERR); } }
        public IField WRK_ADA_CD { get { return GetElementByName<IField>(Names.WRK_ADA_CD); } }
        public IField WRK_ADA_NBR { get { return GetElementByName<IField>(Names.WRK_ADA_NBR); } }
        public IField WRK_RES_NM { get { return GetElementByName<IField>(Names.WRK_RES_NM); } }
        public IField WRK_FUN_CD { get { return GetElementByName<IField>(Names.WRK_FUN_CD); } }
        public IField WRK_ERR_CD { get { return GetElementByName<IField>(Names.WRK_ERR_CD); } }
        public IField WRK_CUR_TM { get { return GetElementByName<IField>(Names.WRK_CUR_TM); } }
        public IField WRK_CUR_DT { get { return GetElementByName<IField>(Names.WRK_CUR_DT); } }
        public IField WRK_CUR_CC { get { return GetElementByName<IField>(Names.WRK_CUR_CC); } }
        public IField WRK_CUR_YMD { get { return GetElementByName<IField>(Names.WRK_CUR_YMD); } }
        public IField WRK_CUR_CY { get { return GetElementByName<IField>(Names.WRK_CUR_CY); } }
        public IField WRK_JJA_DT { get { return GetElementByName<IField>(Names.WRK_JJA_DT); } }
        public IField WRK_CLT_FND_CHK { get { return GetElementByName<IField>(Names.WRK_CLT_FND_CHK); } }
        public ICheckField WRK_CLT_FND { get { return GetElementByName<ICheckField>(Names.WRK_CLT_FND); } }
        public IField WRK_PRT_CMP_CHK { get { return GetElementByName<IField>(Names.WRK_PRT_CMP_CHK); } }
        public ICheckField WRK_PRT_CMP { get { return GetElementByName<ICheckField>(Names.WRK_PRT_CMP); } }
        public IField WRK_PRT_EOF_CHK { get { return GetElementByName<IField>(Names.WRK_PRT_EOF_CHK); } }
        public ICheckField WRK_PRT_EOF { get { return GetElementByName<ICheckField>(Names.WRK_PRT_EOF); } }
        public IField WRK_PRT_ERR_CHK { get { return GetElementByName<IField>(Names.WRK_PRT_ERR_CHK); } }
        public ICheckField WRK_PRT_ERR { get { return GetElementByName<ICheckField>(Names.WRK_PRT_ERR); } }
        public IField X { get { return GetElementByName<IField>(Names.X); } }
        public IField Y { get { return GetElementByName<IField>(Names.Y); } }
        public IGroup PRT_TBL { get { return GetElementByName<IGroup>(Names.PRT_TBL); } }
        public IArrayElementAccessor<IGroup> PRT_REC { get { return GetArrayElementAccessor<IGroup>(Names.PRT_REC); } }
        public IArrayElementAccessor<IField> PRT_CSE_NBR { get { return GetArrayElementAccessor<IField>(Names.PRT_CSE_NBR); } }
        public IArrayElementAccessor<IField> PRT_PGM_TYP { get { return GetArrayElementAccessor<IField>(Names.PRT_PGM_TYP); } }
        public IArrayElementAccessor<IField> PRT_CD { get { return GetArrayElementAccessor<IField>(Names.PRT_CD); } }
        public IArrayElementAccessor<IField> PRT_BEG_DT { get { return GetArrayElementAccessor<IField>(Names.PRT_BEG_DT); } }
        public IArrayElementAccessor<IField> PRT_END_DT { get { return GetArrayElementAccessor<IField>(Names.PRT_END_DT); } }
        public IArrayElementAccessor<IField> PRT_PGM_DT { get { return GetArrayElementAccessor<IField>(Names.PRT_PGM_DT); } }
        public IArrayElementAccessor<IField> PRT_FND_CD { get { return GetArrayElementAccessor<IField>(Names.PRT_FND_CD); } }
        public IField DUP_MSG { get { return GetElementByName<IField>(Names.DUP_MSG); } }
        public IField PRC_MSG { get { return GetElementByName<IField>(Names.PRC_MSG); } }
        public IField WRK_MSG { get { return GetElementByName<IField>(Names.WRK_MSG); } }
        public IGroup WRK_REC { get { return GetElementByName<IGroup>(Names.WRK_REC); } }
        public IField WRK_CLT_NBR { get { return GetElementByName<IField>(Names.WRK_CLT_NBR); } }
        public IField WRK_CSE_NBR { get { return GetElementByName<IField>(Names.WRK_CSE_NBR); } }
        public IField WRK_PGM_TYP { get { return GetElementByName<IField>(Names.WRK_PGM_TYP); } }
        public ICheckField WRK_VAL_PGM_TYP { get { return GetElementByName<ICheckField>(Names.WRK_VAL_PGM_TYP); } }
        public IField WRK_PRT_CD { get { return GetElementByName<IField>(Names.WRK_PRT_CD); } }
        public ICheckField WRK_VAL_PRT_CD { get { return GetElementByName<ICheckField>(Names.WRK_VAL_PRT_CD); } }
        public ICheckField WRK_VAL_MED_CD { get { return GetElementByName<ICheckField>(Names.WRK_VAL_MED_CD); } }
        public IField WRK_BEG_DT { get { return GetElementByName<IField>(Names.WRK_BEG_DT); } }
        public IField WRK_END_DT { get { return GetElementByName<IField>(Names.WRK_END_DT); } }
        public IField WRK_PGM_DT { get { return GetElementByName<IField>(Names.WRK_PGM_DT); } }
        public IField WRK_FND_CD { get { return GetElementByName<IField>(Names.WRK_FND_CD); } }
        public IField WRK_LEG_CD { get { return GetElementByName<IField>(Names.WRK_LEG_CD); } }
        public ICheckField WRK_JJA_CD { get { return GetElementByName<ICheckField>(Names.WRK_JJA_CD); } }
        public IField WRK_PGM_CD { get { return GetElementByName<IField>(Names.WRK_PGM_CD); } }
        public ICheckField WRK_INV_PGM_CD { get { return GetElementByName<ICheckField>(Names.WRK_INV_PGM_CD); } }
        public IField WRK_OPN_DT { get { return GetElementByName<IField>(Names.WRK_OPN_DT); } }
        public IField WRK_MAX_CY { get { return GetElementByName<IField>(Names.WRK_MAX_CY); } }
        public IField WRK_PLC_DT { get { return GetElementByName<IField>(Names.WRK_PLC_DT); } }
        public IField WRK_CHK_DT { get { return GetElementByName<IField>(Names.WRK_CHK_DT); } }
        public IField WRK_CHK_CY { get { return GetElementByName<IField>(Names.WRK_CHK_CY); } }
        public IField WS_CHK_CC { get { return GetElementByName<IField>(Names.WS_CHK_CC); } }
        public ICheckField WRK_VAL_CC { get { return GetElementByName<ICheckField>(Names.WRK_VAL_CC); } }
        public IField WS_CHK_YY { get { return GetElementByName<IField>(Names.WS_CHK_YY); } }
        public ICheckField WRK_VAL_YY { get { return GetElementByName<ICheckField>(Names.WRK_VAL_YY); } }
        public IField WRK_CHK_MM { get { return GetElementByName<IField>(Names.WRK_CHK_MM); } }
        public ICheckField WRK_VAL_MM { get { return GetElementByName<ICheckField>(Names.WRK_VAL_MM); } }
        public ICheckField WRK_VAL_MM_30 { get { return GetElementByName<ICheckField>(Names.WRK_VAL_MM_30); } }
        public IField WRK_CHK_DD { get { return GetElementByName<IField>(Names.WRK_CHK_DD); } }
        public ICheckField WRK_VAL_DD { get { return GetElementByName<ICheckField>(Names.WRK_VAL_DD); } }
        public IField WRK_DIV { get { return GetElementByName<IField>(Names.WRK_DIV); } }
        public IField WRK_REM { get { return GetElementByName<IField>(Names.WRK_REM); } }
        public IGroup WS_VARIABLE { get { return GetElementByName<IGroup>(Names.WS_VARIABLE); } }
        public IField WS_SQLCODE { get { return GetElementByName<IField>(Names.WS_SQLCODE); } }
        public IGroup CL154_SWITCHES { get { return GetElementByName<IGroup>(Names.CL154_SWITCHES); } }
        public IField CL154_EOF_SW { get { return GetElementByName<IField>(Names.CL154_EOF_SW); } }
        public ICheckField CL154_EOF_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.CL154_EOF_NOT_FOUND); } }
        public ICheckField CL154_EOF_NO { get { return GetElementByName<ICheckField>(Names.CL154_EOF_NO); } }
        public ICheckField CL154_EOF_YES { get { return GetElementByName<ICheckField>(Names.CL154_EOF_YES); } }
        public IField CL154_ERR_SW { get { return GetElementByName<IField>(Names.CL154_ERR_SW); } }
        public ICheckField CL154_ERR_NO { get { return GetElementByName<ICheckField>(Names.CL154_ERR_NO); } }
        public ICheckField CL154_ERR_YES { get { return GetElementByName<ICheckField>(Names.CL154_ERR_YES); } }
        public IGroup CL160_SWITCHES { get { return GetElementByName<IGroup>(Names.CL160_SWITCHES); } }
        public IField CL160_EOF_SW { get { return GetElementByName<IField>(Names.CL160_EOF_SW); } }
        public ICheckField CL160_EOF_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.CL160_EOF_NOT_FOUND); } }
        public ICheckField CL160_EOF_NO { get { return GetElementByName<ICheckField>(Names.CL160_EOF_NO); } }
        public ICheckField CL160_EOF_YES { get { return GetElementByName<ICheckField>(Names.CL160_EOF_YES); } }
        public IField CL160_ERR_SW { get { return GetElementByName<IField>(Names.CL160_ERR_SW); } }
        public ICheckField CL160_ERR_NO { get { return GetElementByName<ICheckField>(Names.CL160_ERR_NO); } }
        public ICheckField CL160_ERR_YES { get { return GetElementByName<ICheckField>(Names.CL160_ERR_YES); } }
        public IGroup CL161_SWITCHES { get { return GetElementByName<IGroup>(Names.CL161_SWITCHES); } }
        public IField CL161_EOF_SW { get { return GetElementByName<IField>(Names.CL161_EOF_SW); } }
        public ICheckField CL161_EOF_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.CL161_EOF_NOT_FOUND); } }
        public ICheckField CL161_EOF_NO { get { return GetElementByName<ICheckField>(Names.CL161_EOF_NO); } }
        public ICheckField CL161_EOF_YES { get { return GetElementByName<ICheckField>(Names.CL161_EOF_YES); } }
        public IField CL161_ERR_SW { get { return GetElementByName<IField>(Names.CL161_ERR_SW); } }
        public ICheckField CL161_ERR_NO { get { return GetElementByName<ICheckField>(Names.CL161_ERR_NO); } }
        public ICheckField CL161_ERR_YES { get { return GetElementByName<ICheckField>(Names.CL161_ERR_YES); } }
        public IGroup CL162_SWITCHES { get { return GetElementByName<IGroup>(Names.CL162_SWITCHES); } }
        public IField CL162_EOF_SW { get { return GetElementByName<IField>(Names.CL162_EOF_SW); } }
        public ICheckField CL162_EOF_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.CL162_EOF_NOT_FOUND); } }
        public ICheckField CL162_EOF_NO { get { return GetElementByName<ICheckField>(Names.CL162_EOF_NO); } }
        public ICheckField CL162_EOF_YES { get { return GetElementByName<ICheckField>(Names.CL162_EOF_YES); } }
        public IField CL162_ERR_SW { get { return GetElementByName<IField>(Names.CL162_ERR_SW); } }
        public ICheckField CL162_ERR_NO { get { return GetElementByName<ICheckField>(Names.CL162_ERR_NO); } }
        public ICheckField CL162_ERR_YES { get { return GetElementByName<ICheckField>(Names.CL162_ERR_YES); } }
        public IField LST_PGM_TYP { get { return GetElementByName<IField>(Names.LST_PGM_TYP); } }
        public IGroup DBK1_KEYS { get { return GetElementByName<IGroup>(Names.DBK1_KEYS); } }
        public IField DBK1_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.DBK1_CLIENT_NUMBER); } }
        public IField DBK1_COUNT { get { return GetElementByName<IField>(Names.DBK1_COUNT); } }
        public IGroup DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT_BASIC); } }
        public IField CLIENTB_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_NUMBER); } }
        public IField CLIENTB_CLIENT_GIVEN_NAME { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_GIVEN_NAME); } }
        public IField CLIENTB_CLIENT_INITIALS { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_INITIALS); } }
        public IField CLIENTB_CLIENT_SURNAME { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_SURNAME); } }
        public IField CLIENTB_CIS_REPL_IND { get { return GetElementByName<IField>(Names.CLIENTB_CIS_REPL_IND); } }
        public IField CLIENTB_WORK_PHONE { get { return GetElementByName<IField>(Names.CLIENTB_WORK_PHONE); } }
        public IField CLIENTB_SSN { get { return GetElementByName<IField>(Names.CLIENTB_SSN); } }
        public IField CLIENTB_GENDER { get { return GetElementByName<IField>(Names.CLIENTB_GENDER); } }
        public IField CLIENTB_PARENT_RGHTS_SEV { get { return GetElementByName<IField>(Names.CLIENTB_PARENT_RGHTS_SEV); } }
        public IField CLIENTB_PRNT_RGHTS_SEV_DT { get { return GetElementByName<IField>(Names.CLIENTB_PRNT_RGHTS_SEV_DT); } }
        public IField CLIENTB_LEGAL_STATUS { get { return GetElementByName<IField>(Names.CLIENTB_LEGAL_STATUS); } }
        public IField CLIENTB_INSURANCE_CODE { get { return GetElementByName<IField>(Names.CLIENTB_INSURANCE_CODE); } }
        public IField CLIENTB_INITIAL_CUSTODY_DT { get { return GetElementByName<IField>(Names.CLIENTB_INITIAL_CUSTODY_DT); } }
        public IField CLIENTB_HOME_PHONE { get { return GetElementByName<IField>(Names.CLIENTB_HOME_PHONE); } }
        public IField CLIENTB_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENTB_DATE_OF_BIRTH); } }
        public IField CLIENTB_CURR_PLACEMNT_DT { get { return GetElementByName<IField>(Names.CLIENTB_CURR_PLACEMNT_DT); } }
        public IField CLIENTB_CURRENT_PLACEMENT { get { return GetElementByName<IField>(Names.CLIENTB_CURRENT_PLACEMENT); } }
        public IField CLIENTB_CSEA_G_CAUSE_CODE { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_G_CAUSE_CODE); } }
        public IField CLIENTB_CSEA_G_CAUSE_CL_DT { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_G_CAUSE_CL_DT); } }
        public IField CLIENTB_CSEA_COOP_CODE { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_COOP_CODE); } }
        public IField CLIENTB_COUNTY_CRT_COMMIT { get { return GetElementByName<IField>(Names.CLIENTB_COUNTY_CRT_COMMIT); } }
        public IField CLIENTB_MONTHS_ASST_AF { get { return GetElementByName<IField>(Names.CLIENTB_MONTHS_ASST_AF); } }
        public IField CLIENTB_MONTHS_ASST_GA { get { return GetElementByName<IField>(Names.CLIENTB_MONTHS_ASST_GA); } }
        public IField CLIENTB_MO_DEATH_DT { get { return GetElementByName<IField>(Names.CLIENTB_MO_DEATH_DT); } }
        public IField CLIENTB_MO_PRT_DT { get { return GetElementByName<IField>(Names.CLIENTB_MO_PRT_DT); } }
        public IField CLIENTB_FA_DEATH_DT { get { return GetElementByName<IField>(Names.CLIENTB_FA_DEATH_DT); } }
        public IField CLIENTB_FA_PRT_DT { get { return GetElementByName<IField>(Names.CLIENTB_FA_PRT_DT); } }
        public IField CLIENTB_MPI_ID { get { return GetElementByName<IField>(Names.CLIENTB_MPI_ID); } }
        public IField CLIENTB_MED_COVERAGE_IND { get { return GetElementByName<IField>(Names.CLIENTB_MED_COVERAGE_IND); } }
        public IGroup DCLKSD_INVOLVEMENT { get { return GetElementByName<IGroup>(Names.DCLKSD_INVOLVEMENT); } }
        public IField INVOLVE_DENIAL_CL_REASON { get { return GetElementByName<IField>(Names.INVOLVE_DENIAL_CL_REASON); } }
        public IField INVOLVE_KESSEP_TIME_STMP { get { return GetElementByName<IField>(Names.INVOLVE_KESSEP_TIME_STMP); } }
        public IField INVOLVE_PROGRAM_START_DATE { get { return GetElementByName<IField>(Names.INVOLVE_PROGRAM_START_DATE); } }
        public IField INVOLVE_PROGRAM_END_DATE { get { return GetElementByName<IField>(Names.INVOLVE_PROGRAM_END_DATE); } }
        public IField INVOLVE_PROGRAM_STATUS { get { return GetElementByName<IField>(Names.INVOLVE_PROGRAM_STATUS); } }
        public IField INVOLVE_PROGRAM_STATUS_DT { get { return GetElementByName<IField>(Names.INVOLVE_PROGRAM_STATUS_DT); } }
        public IField INVOLVE_CREATED_BY { get { return GetElementByName<IField>(Names.INVOLVE_CREATED_BY); } }
        public IField INVOLVE_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.INVOLVE_CREATED_TIMESTAMP); } }
        public IField INVOLVE_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.INVOLVE_LAST_MODIFIED_BY); } }
        public IField INVOLVE_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.INVOLVE_LAST_MODIFIED_TMST); } }
        public IField INVOLVE_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.INVOLVE_FK_CSB_CASE_NO); } }
        public IField INVOLVE_FK_PGB_PROG_TYPE { get { return GetElementByName<IField>(Names.INVOLVE_FK_PGB_PROG_TYPE); } }
        public IGroup DCLKSD_PROGRAM_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_PROGRAM_BASIC); } }
        public IField PGMBASIC_PROGRAM_TYPE { get { return GetElementByName<IField>(Names.PGMBASIC_PROGRAM_TYPE); } }
        public IField PGMBASIC_SOURCE_OF_FUNDING { get { return GetElementByName<IField>(Names.PGMBASIC_SOURCE_OF_FUNDING); } }
        public IField PGMBASIC_CASE_CLOSE_RSN_CD { get { return GetElementByName<IField>(Names.PGMBASIC_CASE_CLOSE_RSN_CD); } }
        public IField PGMBASIC_BEN_PRORATION_DATE { get { return GetElementByName<IField>(Names.PGMBASIC_BEN_PRORATION_DATE); } }
        public IField PGMBASIC_REVIEW_MONTH_DUE { get { return GetElementByName<IField>(Names.PGMBASIC_REVIEW_MONTH_DUE); } }
        public IField PGMBASIC_CREATED_BY { get { return GetElementByName<IField>(Names.PGMBASIC_CREATED_BY); } }
        public IField PGMBASIC_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.PGMBASIC_CREATED_TIMESTAMP); } }
        public IField PGMBASIC_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.PGMBASIC_LAST_MODIFIED_BY); } }
        public IField PGMBASIC_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.PGMBASIC_LAST_MODIFIED_TMST); } }
        public IField PGMBASIC_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.PGMBASIC_FK_CSB_CASE_NO); } }
        public IGroup DCLKSD_PERSON_PGM_REQ { get { return GetElementByName<IGroup>(Names.DCLKSD_PERSON_PGM_REQ); } }
        public IField PRPGMREQ_PROGRAM_KEY { get { return GetElementByName<IField>(Names.PRPGMREQ_PROGRAM_KEY); } }
        public IField PRPGMREQ_CREATED_BY { get { return GetElementByName<IField>(Names.PRPGMREQ_CREATED_BY); } }
        public IField PRPGMREQ_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.PRPGMREQ_CREATED_TIMESTAMP); } }
        public IField PRPGMREQ_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.PRPGMREQ_LAST_MODIFIED_BY); } }
        public IField PRPGMREQ_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.PRPGMREQ_LAST_MODIFIED_TMST); } }
        public IField PRPGMREQ_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.PRPGMREQ_FK_CLB_CLIENT_NO); } }
        public IGroup DCLKSD_PARTICIPATION { get { return GetElementByName<IGroup>(Names.DCLKSD_PARTICIPATION); } }
        public IField PART_KESSEP_TIME_STMP { get { return GetElementByName<IField>(Names.PART_KESSEP_TIME_STMP); } }
        public IField PART_PART_END_DATE { get { return GetElementByName<IField>(Names.PART_PART_END_DATE); } }
        public IField PART_PART_START_DATE { get { return GetElementByName<IField>(Names.PART_PART_START_DATE); } }
        public IField PART_PART_CODE { get { return GetElementByName<IField>(Names.PART_PART_CODE); } }
        public IField PART_PROGRAM_END_DATE { get { return GetElementByName<IField>(Names.PART_PROGRAM_END_DATE); } }
        public IField PART_PROGRAM_SUBTYPE { get { return GetElementByName<IField>(Names.PART_PROGRAM_SUBTYPE); } }
        public IField PART_RELATIONSHIP { get { return GetElementByName<IField>(Names.PART_RELATIONSHIP); } }
        public IField PART_CREATED_BY { get { return GetElementByName<IField>(Names.PART_CREATED_BY); } }
        public IField PART_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.PART_CREATED_TIMESTAMP); } }
        public IField PART_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.PART_LAST_MODIFIED_BY); } }
        public IField PART_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.PART_LAST_MODIFIED_TMST); } }
        public IField PART_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.PART_FK_CSB_CASE_NO); } }
        public IField PART_FK_PGB_PROG_TYPE { get { return GetElementByName<IField>(Names.PART_FK_PGB_PROG_TYPE); } }
        public IField PART_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.PART_FK_CLB_CLIENT_NO); } }
        public IGroup CONTROL_BLOCK { get { return GetElementByName<IGroup>(Names.CONTROL_BLOCK); } }
        public IField COMMAND_CODE { get { return GetElementByName<IField>(Names.COMMAND_CODE); } }
        public IField COMMAND_ID { get { return GetElementByName<IField>(Names.COMMAND_ID); } }
        public IField FILE_NUMBER { get { return GetElementByName<IField>(Names.FILE_NUMBER); } }
        public IField RESPONSE_CODE { get { return GetElementByName<IField>(Names.RESPONSE_CODE); } }
        public IField ISN { get { return GetElementByName<IField>(Names.ISN); } }
        public IField ISN_LOWER_LIMIT { get { return GetElementByName<IField>(Names.ISN_LOWER_LIMIT); } }
        public IField ISN_QUANTITY { get { return GetElementByName<IField>(Names.ISN_QUANTITY); } }
        public IField FORMAT_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.FORMAT_BUFFER_LENGTH); } }
        public IField RECORD_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.RECORD_BUFFER_LENGTH); } }
        public IField SEARCH_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.SEARCH_BUFFER_LENGTH); } }
        public IField VALUE_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.VALUE_BUFFER_LENGTH); } }
        public IField ISN_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.ISN_BUFFER_LENGTH); } }
        public IField COMMAND_OPTION_1 { get { return GetElementByName<IField>(Names.COMMAND_OPTION_1); } }
        public IField COMMAND_OPTION_2 { get { return GetElementByName<IField>(Names.COMMAND_OPTION_2); } }
        public IField ADDITIONS_1 { get { return GetElementByName<IField>(Names.ADDITIONS_1); } }
        public IField ADDITIONS_2 { get { return GetElementByName<IField>(Names.ADDITIONS_2); } }
        public IField ADDITIONS_3 { get { return GetElementByName<IField>(Names.ADDITIONS_3); } }
        public IField ADDITIONS_4 { get { return GetElementByName<IField>(Names.ADDITIONS_4); } }
        public IField COMMAND_TIME { get { return GetElementByName<IField>(Names.COMMAND_TIME); } }
        public IField USER_AREA { get { return GetElementByName<IField>(Names.USER_AREA); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup("FILLER", (FILLER) =>
           {
               FILLER.CreateNewField(Names.ADIM1, FieldType.CompInt, 8);
               FILLER.CreateNewField(Names.ADIM2, FieldType.CompInt, 8);
               FILLER.CreateNewField(Names.ADIM3, FieldType.CompInt, 8);
           });

            recordDef.CreateNewGroup("FILLER_d2", (FILLER_d2) =>
           {
               FILLER_d2.CreateNewField(Names.EXPORT_GROUP_0001FL, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.EXPORT_GROUP_0001PS, FieldType.CompShort, 4);
               FILLER_d2.CreateNewField(Names.EXPORT_GROUP_0001RF, FieldType.String, 1);
           });
            recordDef.CreateNewField(Names.FUNC_0726937745_ESC_FLAG, FieldType.String, 1);
            recordDef.CreateNewField(Names.SRADALNK, FieldType.String, 8, "SWASZ990");
            recordDef.CreateNewField(Names.SRMODLNK, FieldType.String, 8, "SWEXIR50");

            recordDef.CreateNewGroup(Names.MV_ABEND_FIELDS_KEES, (MV_ABEND_FIELDS_KEES) =>
           {
               MV_ABEND_FIELDS_KEES.CreateNewGroup(Names.MV_ABEND_FIELDS, (MV_ABEND_FIELDS) =>
               {
                   MV_ABEND_FIELDS.CreateNewField(Names.MV_ABEND_TYPE, FieldType.String, 1)
                       .NewCheckField(Names.MV_ABEND_TYPE_NONE, SPACE)
                       .NewCheckField(Names.MV_ABEND_TYPE_ADABAS, "A")
                       .NewCheckField(Names.MV_ABEND_TYPE_CICS, "C")
                       ;
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_ADABAS, (MV_ABEND_ADABAS) =>
                   {
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_ACTION, FieldType.String, 3);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
                   });
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_CICS, (MV_ABEND_CICS) =>
                   {
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_RESOURCE_NM, FieldType.String, 8);
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_FUNCTION_CD, FieldType.String, 2);
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_RESPONSE_CD, FieldType.String, 6);
                   });
               });
           });

            recordDef.CreateNewGroup(Names.WRK_PGM_ERR, (WRK_PGM_ERR) =>
           {
               WRK_PGM_ERR.CreateNewField(Names.WRK_ERR_TYP, FieldType.String, 1)
                   .NewCheckField(Names.WRK_ADA_ERR, "A")
                   .NewCheckField(Names.WRK_ENV_ERR, "C")
                   ;
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_ACT, FieldType.String, 3)
                   .NewCheckField(Names.WRK_ADD_ERR, "ADD")
                   .NewCheckField(Names.WRK_BEG_ERR, "INI")
                   .NewCheckField(Names.WRK_END_ERR, "EAT")
                   .NewCheckField(Names.WRK_REL_ERR, "REL")
                   .NewCheckField(Names.WRK_RIN_ERR, "RI ")
                   .NewCheckField(Names.WRK_RLF_ERR, "RLF")
                   .NewCheckField(Names.WRK_RLN_ERR, "RL ")
                   .NewCheckField(Names.WRK_UPD_ERR, "UPD")
                   ;
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_CD, FieldType.UnsignedNumeric, 4);
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_NBR, FieldType.UnsignedNumeric, 4);
               WRK_PGM_ERR.CreateNewField(Names.WRK_RES_NM, FieldType.String, 8);
               WRK_PGM_ERR.CreateNewField(Names.WRK_FUN_CD, FieldType.String, 2);
               WRK_PGM_ERR.CreateNewField(Names.WRK_ERR_CD, FieldType.String, 6);
           });
            recordDef.CreateNewField(Names.WRK_CUR_TM, FieldType.PackedDecimal, 15);

            IField WRK_CUR_DT_local = recordDef.CreateNewField(Names.WRK_CUR_DT, FieldType.UnsignedNumeric, 8);
            recordDef.CreateNewGroupRedefine("FILLER_d3", WRK_CUR_DT_local, (FILLER_d3) =>
            {
                FILLER_d3.CreateNewField(Names.WRK_CUR_CC, FieldType.UnsignedNumeric, 2);
                FILLER_d3.CreateNewField(Names.WRK_CUR_YMD, FieldType.UnsignedNumeric, 6);
            });
            recordDef.CreateNewGroupRedefine("FILLER_d4", WRK_CUR_DT_local, (FILLER_d4) =>
            {
                FILLER_d4.CreateNewField(Names.WRK_CUR_CY, FieldType.UnsignedNumeric, 4);
                FILLER_d4.CreateNewFillerField(4, FillWith.Hashes);
            });
            recordDef.CreateNewField(Names.WRK_JJA_DT, FieldType.UnsignedNumeric, 8, 19960701);
            recordDef.CreateNewField(Names.WRK_CLT_FND_CHK, FieldType.String, 1)
                .NewCheckField(Names.WRK_CLT_FND, "Y")
                ;
            recordDef.CreateNewField(Names.WRK_PRT_CMP_CHK, FieldType.String, 1)
                .NewCheckField(Names.WRK_PRT_CMP, "Y")
                ;
            recordDef.CreateNewField(Names.WRK_PRT_EOF_CHK, FieldType.String, 1)
                .NewCheckField(Names.WRK_PRT_EOF, "Y")
                ;
            recordDef.CreateNewField(Names.WRK_PRT_ERR_CHK, FieldType.String, 1)
                .NewCheckField(Names.WRK_PRT_ERR, "Y")
                ;
            recordDef.CreateNewField(Names.X, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.Y, FieldType.UnsignedNumeric, 2);

            recordDef.CreateNewGroup(Names.PRT_TBL, (PRT_TBL) =>
           {
               PRT_TBL.CreateNewGroupArray(Names.PRT_REC, 2, (PRT_REC) =>
               {
                   PRT_REC.CreateNewField(Names.PRT_CSE_NBR, FieldType.String, 8);
                   PRT_REC.CreateNewField(Names.PRT_PGM_TYP, FieldType.String, 2);
                   PRT_REC.CreateNewField(Names.PRT_CD, FieldType.String, 2);
                   PRT_REC.CreateNewField(Names.PRT_BEG_DT, FieldType.UnsignedNumeric, 8);
                   PRT_REC.CreateNewField(Names.PRT_END_DT, FieldType.UnsignedNumeric, 8);
                   PRT_REC.CreateNewField(Names.PRT_PGM_DT, FieldType.UnsignedNumeric, 8);
                   PRT_REC.CreateNewField(Names.PRT_FND_CD, FieldType.String, 2);
               });
           });
            recordDef.CreateNewField(Names.DUP_MSG, FieldType.String, 27, "SYNC REQUEST ALREADY EXISTS");
            recordDef.CreateNewField(Names.PRC_MSG, FieldType.String, 35, "SYNC REQUEST SUCCESSFULLY PROCESSED");
            recordDef.CreateNewField(Names.WRK_MSG, FieldType.String, 80);

            recordDef.CreateNewGroup(Names.WRK_REC, (WRK_REC) =>
           {
               WRK_REC.CreateNewField(Names.WRK_CLT_NBR, FieldType.String, 10);
               WRK_REC.CreateNewField(Names.WRK_CSE_NBR, FieldType.String, 8);
               WRK_REC.CreateNewField(Names.WRK_PGM_TYP, FieldType.String, 2)
                   .NewCheckField(Names.WRK_VAL_PGM_TYP, "AF", "CC", "CI", "FC", "FS", "MA", "MK", "MP", "MS", "SI")
                   ;
               WRK_REC.CreateNewField(Names.WRK_PRT_CD, FieldType.String, 2)
                   .NewCheckField(Names.WRK_VAL_PRT_CD, "EP", "IN", "NP", "SH")
                   .NewCheckField(Names.WRK_VAL_MED_CD, "EM", "WT")
                   ;
               WRK_REC.CreateNewField(Names.WRK_BEG_DT, FieldType.UnsignedNumeric, 8);
               WRK_REC.CreateNewField(Names.WRK_END_DT, FieldType.UnsignedNumeric, 8);
               WRK_REC.CreateNewField(Names.WRK_PGM_DT, FieldType.String, 10);
           });
            recordDef.CreateNewField(Names.WRK_FND_CD, FieldType.String, 2);
            recordDef.CreateNewField(Names.WRK_LEG_CD, FieldType.String, 2)
                .NewCheckField(Names.WRK_JJA_CD, "02", "04", "09")
                ;
            recordDef.CreateNewField(Names.WRK_PGM_CD, FieldType.String, 2)
                .NewCheckField(Names.WRK_INV_PGM_CD, "DE", "PE", "RE")
                ;
            recordDef.CreateNewField(Names.WRK_OPN_DT, FieldType.UnsignedNumeric, 8, 99999999);
            recordDef.CreateNewField(Names.WRK_MAX_CY, FieldType.UnsignedNumeric, 4);
            recordDef.CreateNewField(Names.WRK_PLC_DT, FieldType.UnsignedNumeric, 8);

            IField WRK_CHK_DT_local = recordDef.CreateNewField(Names.WRK_CHK_DT, FieldType.UnsignedNumeric, 8);
            recordDef.CreateNewGroupRedefine("FILLER_d6", WRK_CHK_DT_local, (FILLER_d6) =>
            {

                IField WRK_CHK_CY_local = FILLER_d6.CreateNewField(Names.WRK_CHK_CY, FieldType.UnsignedNumeric, 4);
                FILLER_d6.CreateNewGroupRedefine("FILLER_d7", WRK_CHK_CY_local, (FILLER_d7) =>
                {
                    FILLER_d7.CreateNewField(Names.WS_CHK_CC, FieldType.UnsignedNumeric, 2)
                        .NewCheckField(Names.WRK_VAL_CC, 19, 20)
                        ;
                    FILLER_d7.CreateNewField(Names.WS_CHK_YY, FieldType.UnsignedNumeric, 2)
                        .NewCheckFieldRange(Names.WRK_VAL_YY, 00, 99)
                        ;
                });
                FILLER_d6.CreateNewField(Names.WRK_CHK_MM, FieldType.UnsignedNumeric, 2)
                    .NewCheckFieldRange(Names.WRK_VAL_MM, 01, 12)
                    .NewCheckField(Names.WRK_VAL_MM_30, 04, 06, 09, 11)
                    ;
                FILLER_d6.CreateNewField(Names.WRK_CHK_DD, FieldType.UnsignedNumeric, 2)
                    .NewCheckFieldRange(Names.WRK_VAL_DD, 01, 31)
                    ;
            });
            recordDef.CreateNewField(Names.WRK_DIV, FieldType.UnsignedNumeric, 3);
            recordDef.CreateNewField(Names.WRK_REM, FieldType.UnsignedNumeric, 3);

            recordDef.CreateNewGroup(Names.WS_VARIABLE, (WS_VARIABLE) =>
           {
               WS_VARIABLE.CreateNewField(Names.WS_SQLCODE, FieldType.SignedNumeric, 9, ZEROES);
           });

            recordDef.CreateNewGroup(Names.CL154_SWITCHES, (CL154_SWITCHES) =>
           {
               CL154_SWITCHES.CreateNewField(Names.CL154_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.CL154_EOF_NOT_FOUND, SPACE)
                   .NewCheckField(Names.CL154_EOF_NO, "N")
                   .NewCheckField(Names.CL154_EOF_YES, "Y")
                   ;
               CL154_SWITCHES.CreateNewField(Names.CL154_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.CL154_ERR_NO, "N")
                   .NewCheckField(Names.CL154_ERR_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.CL160_SWITCHES, (CL160_SWITCHES) =>
           {
               CL160_SWITCHES.CreateNewField(Names.CL160_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.CL160_EOF_NOT_FOUND, SPACE)
                   .NewCheckField(Names.CL160_EOF_NO, "N")
                   .NewCheckField(Names.CL160_EOF_YES, "Y")
                   ;
               CL160_SWITCHES.CreateNewField(Names.CL160_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.CL160_ERR_NO, "N")
                   .NewCheckField(Names.CL160_ERR_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.CL161_SWITCHES, (CL161_SWITCHES) =>
           {
               CL161_SWITCHES.CreateNewField(Names.CL161_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.CL161_EOF_NOT_FOUND, SPACE)
                   .NewCheckField(Names.CL161_EOF_NO, "N")
                   .NewCheckField(Names.CL161_EOF_YES, "Y")
                   ;
               CL161_SWITCHES.CreateNewField(Names.CL161_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.CL161_ERR_NO, "N")
                   .NewCheckField(Names.CL161_ERR_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.CL162_SWITCHES, (CL162_SWITCHES) =>
           {
               CL162_SWITCHES.CreateNewField(Names.CL162_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.CL162_EOF_NOT_FOUND, SPACE)
                   .NewCheckField(Names.CL162_EOF_NO, "N")
                   .NewCheckField(Names.CL162_EOF_YES, "Y")
                   ;
               CL162_SWITCHES.CreateNewField(Names.CL162_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.CL162_ERR_NO, "N")
                   .NewCheckField(Names.CL162_ERR_YES, "Y")
                   ;
           });
            recordDef.CreateNewField(Names.LST_PGM_TYP, FieldType.String, 2);

            recordDef.CreateNewGroup(Names.DBK1_KEYS, (DBK1_KEYS) =>
           {
               DBK1_KEYS.CreateNewField(Names.DBK1_CLIENT_NUMBER, FieldType.String, 10);
               DBK1_KEYS.CreateNewField(Names.DBK1_COUNT, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT_BASIC, (DCLKSD_CLIENT_BASIC) =>
           {
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_NUMBER, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_INITIALS, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_SURNAME, FieldType.String, 17);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CIS_REPL_IND, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_WORK_PHONE, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_PARENT_RGHTS_SEV, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_PRNT_RGHTS_SEV_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_LEGAL_STATUS, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INSURANCE_CODE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INITIAL_CUSTODY_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_HOME_PHONE, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_DATE_OF_BIRTH, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CURR_PLACEMNT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CURRENT_PLACEMENT, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_G_CAUSE_CODE, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_G_CAUSE_CL_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_COOP_CODE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_COUNTY_CRT_COMMIT, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MONTHS_ASST_AF, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MONTHS_ASST_GA, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MO_DEATH_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MO_PRT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_FA_DEATH_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_FA_PRT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MPI_ID, FieldType.String, 38);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MED_COVERAGE_IND, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_INVOLVEMENT, (DCLKSD_INVOLVEMENT) =>
           {
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_DENIAL_CL_REASON, FieldType.String, 2);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_KESSEP_TIME_STMP, FieldType.String, 20);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_PROGRAM_START_DATE, FieldType.String, 10);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_PROGRAM_END_DATE, FieldType.String, 10);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_PROGRAM_STATUS, FieldType.String, 2);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_PROGRAM_STATUS_DT, FieldType.String, 10);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_CREATED_BY, FieldType.String, 8);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_FK_CSB_CASE_NO, FieldType.String, 8);
               DCLKSD_INVOLVEMENT.CreateNewField(Names.INVOLVE_FK_PGB_PROG_TYPE, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_PROGRAM_BASIC, (DCLKSD_PROGRAM_BASIC) =>
           {
               DCLKSD_PROGRAM_BASIC.CreateNewField(Names.PGMBASIC_PROGRAM_TYPE, FieldType.String, 2);
               DCLKSD_PROGRAM_BASIC.CreateNewField(Names.PGMBASIC_SOURCE_OF_FUNDING, FieldType.String, 2);
               DCLKSD_PROGRAM_BASIC.CreateNewField(Names.PGMBASIC_CASE_CLOSE_RSN_CD, FieldType.String, 1);
               DCLKSD_PROGRAM_BASIC.CreateNewField(Names.PGMBASIC_BEN_PRORATION_DATE, FieldType.String, 10);
               DCLKSD_PROGRAM_BASIC.CreateNewField(Names.PGMBASIC_REVIEW_MONTH_DUE, FieldType.CompInt, 9);
               DCLKSD_PROGRAM_BASIC.CreateNewField(Names.PGMBASIC_CREATED_BY, FieldType.String, 8);
               DCLKSD_PROGRAM_BASIC.CreateNewField(Names.PGMBASIC_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_PROGRAM_BASIC.CreateNewField(Names.PGMBASIC_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_PROGRAM_BASIC.CreateNewField(Names.PGMBASIC_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_PROGRAM_BASIC.CreateNewField(Names.PGMBASIC_FK_CSB_CASE_NO, FieldType.String, 8);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_PERSON_PGM_REQ, (DCLKSD_PERSON_PGM_REQ) =>
           {
               DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PRPGMREQ_PROGRAM_KEY, FieldType.String, 28);
               DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PRPGMREQ_CREATED_BY, FieldType.String, 8);
               DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PRPGMREQ_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PRPGMREQ_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PRPGMREQ_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PRPGMREQ_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_PARTICIPATION, (DCLKSD_PARTICIPATION) =>
           {
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_KESSEP_TIME_STMP, FieldType.String, 20);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_PART_END_DATE, FieldType.String, 10);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_PART_START_DATE, FieldType.String, 10);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_PART_CODE, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_PROGRAM_END_DATE, FieldType.String, 10);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_PROGRAM_SUBTYPE, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_RELATIONSHIP, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_CREATED_BY, FieldType.String, 8);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_FK_CSB_CASE_NO, FieldType.String, 8);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_FK_PGB_PROG_TYPE, FieldType.String, 2);
               DCLKSD_PARTICIPATION.CreateNewField(Names.PART_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.CONTROL_BLOCK, (CONTROL_BLOCK) =>
           {
               CONTROL_BLOCK.CreateNewFillerField(FieldType.String, 2, "AP");
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_CODE, FieldType.String, 2, "RC");
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_ID, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.FILE_NUMBER, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.RESPONSE_CODE, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_LOWER_LIMIT, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_QUANTITY, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.FORMAT_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.RECORD_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.SEARCH_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.VALUE_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_OPTION_1, FieldType.String, 1, SPACE);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_OPTION_2, FieldType.String, 1, SPACE);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_1, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_2, FieldType.String, 4, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_3, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_4, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewFillerField(FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_TIME, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.USER_AREA, FieldType.String, 4, SPACES);
           });


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXIR50_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXIR50_ls_LinkageSection";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_0726937748_IA = "A_0726937748_IA";
            internal const string IMPORT_CURRENT_0001EV = "IMPORT_CURRENT_0001EV";
            internal const string DATE_WORK_AREA_0001ET = "DATE_WORK_AREA_0001ET";
            internal const string DATE_0001AS = "DATE_0001AS";
            internal const string DATE_0001 = "DATE_0001";
            internal const string DATE_0001XX = "DATE_0001XX";
            internal const string IMPORT_0002EV = "IMPORT_0002EV";
            internal const string CSE_PERSON_0002ET = "CSE_PERSON_0002ET";
            internal const string NUMBER_0002AS = "NUMBER_0002AS";
            internal const string NUMBER_0002 = "NUMBER_0002";
            internal const string NUMBER_0002XX = "NUMBER_0002XX";
            internal const string NUMBER_0002N = "NUMBER_0002N";
            internal const string W_OA = "W_OA";
            internal const string A_0726937749_OA = "A_0726937749_OA";
            internal const string EXPORT_GROUP_0001RG = "EXPORT_GROUP_0001RG";
            internal const string EXPORT_GROUP_0001MA = "EXPORT_GROUP_0001MA";
            internal const string EXPORT_GROUP_0001MX = "EXPORT_GROUP_0001MX";
            internal const string EXPORT_GROUP_0001 = "EXPORT_GROUP_0001";
            internal const string EXPORT_GROUP_0001AC = "EXPORT_GROUP_0001AC";
            internal const string EXPORT_GRP_DET_0003EV = "EXPORT_GRP_DET_0003EV";
            internal const string INTERFACE_PERSON_PROGRA_0003ET = "INTERFACE_PERSON_PROGRA_0003ET";
            internal const string SOURCE_OF_FUNDS_0003AS = "SOURCE_OF_FUNDS_0003AS";
            internal const string SOURCE_OF_FUNDS_0003 = "SOURCE_OF_FUNDS_0003";
            internal const string SOURCE_OF_FUNDS_0003XX = "SOURCE_OF_FUNDS_0003XX";
            internal const string PROGRAM_CODE_0003AS = "PROGRAM_CODE_0003AS";
            internal const string PROGRAM_CODE_0003 = "PROGRAM_CODE_0003";
            internal const string PROGRAM_CODE_0003XX = "PROGRAM_CODE_0003XX";
            internal const string PROG_EFFECTIVE_DATE_0003AS = "PROG_EFFECTIVE_DATE_0003AS";
            internal const string PROG_EFFECTIVE_DATE_0003 = "PROG_EFFECTIVE_DATE_0003";
            internal const string PROG_EFFECTIVE_DATE_0003XX = "PROG_EFFECTIVE_DATE_0003XX";
            internal const string PROGRAM_END_DATE_0003AS = "PROGRAM_END_DATE_0003AS";
            internal const string PROGRAM_END_DATE_0003 = "PROGRAM_END_DATE_0003";
            internal const string PROGRAM_END_DATE_0003XX = "PROGRAM_END_DATE_0003XX";
            internal const string AE_PROGRAM_SUBTYPE_0003AS = "AE_PROGRAM_SUBTYPE_0003AS";
            internal const string AE_PROGRAM_SUBTYPE_0003 = "AE_PROGRAM_SUBTYPE_0003";
            internal const string AE_PROGRAM_SUBTYPE_0003XX = "AE_PROGRAM_SUBTYPE_0003XX";
            internal const string S0849351691_0004EV = "S0849351691_0004EV";
            internal const string ABEND_DATA_0004ET = "ABEND_DATA_0004ET";
            internal const string TYPE_0004AS = "TYPE_0004AS";
            internal const string TYPE_0004 = "TYPE_0004";
            internal const string TYPE_0004XX = "TYPE_0004XX";
            internal const string ADABAS_FILE_NUMBER_0004AS = "ADABAS_FILE_NUMBER_0004AS";
            internal const string ADABAS_FILE_NUMBER_0004 = "ADABAS_FILE_NUMBER_0004";
            internal const string ADABAS_FILE_NUMBER_0004XX = "ADABAS_FILE_NUMBER_0004XX";
            internal const string ADABAS_FILE_ACTION_0004AS = "ADABAS_FILE_ACTION_0004AS";
            internal const string ADABAS_FILE_ACTION_0004 = "ADABAS_FILE_ACTION_0004";
            internal const string ADABAS_FILE_ACTION_0004XX = "ADABAS_FILE_ACTION_0004XX";
            internal const string ADABAS_RESPONSE_CD_0004AS = "ADABAS_RESPONSE_CD_0004AS";
            internal const string ADABAS_RESPONSE_CD_0004 = "ADABAS_RESPONSE_CD_0004";
            internal const string ADABAS_RESPONSE_CD_0004XX = "ADABAS_RESPONSE_CD_0004XX";
            internal const string CICS_RESOURCE_NM_0004AS = "CICS_RESOURCE_NM_0004AS";
            internal const string CICS_RESOURCE_NM_0004 = "CICS_RESOURCE_NM_0004";
            internal const string CICS_RESOURCE_NM_0004XX = "CICS_RESOURCE_NM_0004XX";
            internal const string CICS_FUNCTION_CD_0004AS = "CICS_FUNCTION_CD_0004AS";
            internal const string CICS_FUNCTION_CD_0004 = "CICS_FUNCTION_CD_0004";
            internal const string CICS_FUNCTION_CD_0004XX = "CICS_FUNCTION_CD_0004XX";
            internal const string CICS_RESPONSE_CD_0004AS = "CICS_RESPONSE_CD_0004AS";
            internal const string CICS_RESPONSE_CD_0004 = "CICS_RESPONSE_CD_0004";
            internal const string CICS_RESPONSE_CD_0004XX = "CICS_RESPONSE_CD_0004XX";
            internal const string TWA = "TWA";
            internal const string TWA_ADABAS_PARMS = "TWA_ADABAS_PARMS";
            internal const string TWA_CICS_PARMS = "TWA_CICS_PARMS";
            internal const string TWA_PROGRAM_ID = "TWA_PROGRAM_ID";
            internal const string TWA_ADDR_LIST = "TWA_ADDR_LIST";
        }
        #endregion

        #region Direct-access element properties
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_0726937748_IA { get { return GetElementByName<IGroup>(Names.A_0726937748_IA); } }
        public IGroup IMPORT_CURRENT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_CURRENT_0001EV); } }
        public IGroup DATE_WORK_AREA_0001ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0001ET); } }
        public IField DATE_0001AS { get { return GetElementByName<IField>(Names.DATE_0001AS); } }
        public IField DATE_0001 { get { return GetElementByName<IField>(Names.DATE_0001); } }
        public IField DATE_0001XX { get { return GetElementByName<IField>(Names.DATE_0001XX); } }
        public IGroup IMPORT_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_0002EV); } }
        public IGroup CSE_PERSON_0002ET { get { return GetElementByName<IGroup>(Names.CSE_PERSON_0002ET); } }
        public IField NUMBER_0002AS { get { return GetElementByName<IField>(Names.NUMBER_0002AS); } }
        public IField NUMBER_0002 { get { return GetElementByName<IField>(Names.NUMBER_0002); } }
        public IField NUMBER_0002XX { get { return GetElementByName<IField>(Names.NUMBER_0002XX); } }
        public IField NUMBER_0002N { get { return GetElementByName<IField>(Names.NUMBER_0002N); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_0726937749_OA { get { return GetElementByName<IGroup>(Names.A_0726937749_OA); } }
        public IGroup EXPORT_GROUP_0001RG { get { return GetElementByName<IGroup>(Names.EXPORT_GROUP_0001RG); } }
        public IField EXPORT_GROUP_0001MA { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001MA); } }
        public IField EXPORT_GROUP_0001MX { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001MX); } }
        public IArrayElementAccessor<IGroup> EXPORT_GROUP_0001 { get { return GetArrayElementAccessor<IGroup>(Names.EXPORT_GROUP_0001); } }
        public IArrayElementAccessor<IField> EXPORT_GROUP_0001AC { get { return GetArrayElementAccessor<IField>(Names.EXPORT_GROUP_0001AC); } }
        public IArrayElementAccessor<IGroup> EXPORT_GRP_DET_0003EV { get { return GetArrayElementAccessor<IGroup>(Names.EXPORT_GRP_DET_0003EV); } }
        public IArrayElementAccessor<IGroup> INTERFACE_PERSON_PROGRA_0003ET { get { return GetArrayElementAccessor<IGroup>(Names.INTERFACE_PERSON_PROGRA_0003ET); } }
        public IArrayElementAccessor<IField> SOURCE_OF_FUNDS_0003AS { get { return GetArrayElementAccessor<IField>(Names.SOURCE_OF_FUNDS_0003AS); } }
        public IArrayElementAccessor<IField> SOURCE_OF_FUNDS_0003 { get { return GetArrayElementAccessor<IField>(Names.SOURCE_OF_FUNDS_0003); } }
        public IArrayElementAccessor<IField> SOURCE_OF_FUNDS_0003XX { get { return GetArrayElementAccessor<IField>(Names.SOURCE_OF_FUNDS_0003XX); } }
        public IArrayElementAccessor<IField> PROGRAM_CODE_0003AS { get { return GetArrayElementAccessor<IField>(Names.PROGRAM_CODE_0003AS); } }
        public IArrayElementAccessor<IField> PROGRAM_CODE_0003 { get { return GetArrayElementAccessor<IField>(Names.PROGRAM_CODE_0003); } }
        public IArrayElementAccessor<IField> PROGRAM_CODE_0003XX { get { return GetArrayElementAccessor<IField>(Names.PROGRAM_CODE_0003XX); } }
        public IArrayElementAccessor<IField> PROG_EFFECTIVE_DATE_0003AS { get { return GetArrayElementAccessor<IField>(Names.PROG_EFFECTIVE_DATE_0003AS); } }
        public IArrayElementAccessor<IField> PROG_EFFECTIVE_DATE_0003 { get { return GetArrayElementAccessor<IField>(Names.PROG_EFFECTIVE_DATE_0003); } }
        public IArrayElementAccessor<IField> PROG_EFFECTIVE_DATE_0003XX { get { return GetArrayElementAccessor<IField>(Names.PROG_EFFECTIVE_DATE_0003XX); } }
        public IArrayElementAccessor<IField> PROGRAM_END_DATE_0003AS { get { return GetArrayElementAccessor<IField>(Names.PROGRAM_END_DATE_0003AS); } }
        public IArrayElementAccessor<IField> PROGRAM_END_DATE_0003 { get { return GetArrayElementAccessor<IField>(Names.PROGRAM_END_DATE_0003); } }
        public IArrayElementAccessor<IField> PROGRAM_END_DATE_0003XX { get { return GetArrayElementAccessor<IField>(Names.PROGRAM_END_DATE_0003XX); } }
        public IArrayElementAccessor<IField> AE_PROGRAM_SUBTYPE_0003AS { get { return GetArrayElementAccessor<IField>(Names.AE_PROGRAM_SUBTYPE_0003AS); } }
        public IArrayElementAccessor<IField> AE_PROGRAM_SUBTYPE_0003 { get { return GetArrayElementAccessor<IField>(Names.AE_PROGRAM_SUBTYPE_0003); } }
        public IArrayElementAccessor<IField> AE_PROGRAM_SUBTYPE_0003XX { get { return GetArrayElementAccessor<IField>(Names.AE_PROGRAM_SUBTYPE_0003XX); } }
        public IGroup S0849351691_0004EV { get { return GetElementByName<IGroup>(Names.S0849351691_0004EV); } }
        public IGroup ABEND_DATA_0004ET { get { return GetElementByName<IGroup>(Names.ABEND_DATA_0004ET); } }
        public IField TYPE_0004AS { get { return GetElementByName<IField>(Names.TYPE_0004AS); } }
        public IField TYPE_0004 { get { return GetElementByName<IField>(Names.TYPE_0004); } }
        public IField TYPE_0004XX { get { return GetElementByName<IField>(Names.TYPE_0004XX); } }
        public IField ADABAS_FILE_NUMBER_0004AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0004AS); } }
        public IField ADABAS_FILE_NUMBER_0004 { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0004); } }
        public IField ADABAS_FILE_NUMBER_0004XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0004XX); } }
        public IField ADABAS_FILE_ACTION_0004AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0004AS); } }
        public IField ADABAS_FILE_ACTION_0004 { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0004); } }
        public IField ADABAS_FILE_ACTION_0004XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0004XX); } }
        public IField ADABAS_RESPONSE_CD_0004AS { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0004AS); } }
        public IField ADABAS_RESPONSE_CD_0004 { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0004); } }
        public IField ADABAS_RESPONSE_CD_0004XX { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0004XX); } }
        public IField CICS_RESOURCE_NM_0004AS { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0004AS); } }
        public IField CICS_RESOURCE_NM_0004 { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0004); } }
        public IField CICS_RESOURCE_NM_0004XX { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0004XX); } }
        public IField CICS_FUNCTION_CD_0004AS { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0004AS); } }
        public IField CICS_FUNCTION_CD_0004 { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0004); } }
        public IField CICS_FUNCTION_CD_0004XX { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0004XX); } }
        public IField CICS_RESPONSE_CD_0004AS { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0004AS); } }
        public IField CICS_RESPONSE_CD_0004 { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0004); } }
        public IField CICS_RESPONSE_CD_0004XX { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0004XX); } }
        public IGroup TWA { get { return GetElementByName<IGroup>(Names.TWA); } }
        public IGroup TWA_ADABAS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_ADABAS_PARMS); } }
        public IGroup TWA_CICS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_CICS_PARMS); } }
        public IField TWA_PROGRAM_ID { get { return GetElementByName<IField>(Names.TWA_PROGRAM_ID); } }
        public IGroup TWA_ADDR_LIST { get { return GetElementByName<IGroup>(Names.TWA_ADDR_LIST); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_0726937748_IA, (A_0726937748_IA) =>
               {
                   A_0726937748_IA.CreateNewGroup(Names.IMPORT_CURRENT_0001EV, (IMPORT_CURRENT_0001EV) =>
                   {
                       IMPORT_CURRENT_0001EV.CreateNewGroup(Names.DATE_WORK_AREA_0001ET, (DATE_WORK_AREA_0001ET) =>
                       {
                           DATE_WORK_AREA_0001ET.CreateNewField(Names.DATE_0001AS, FieldType.String, 1);

                           IField DATE_0001_local = DATE_WORK_AREA_0001ET.CreateNewField(Names.DATE_0001, FieldType.SignedNumeric, 8);
                           DATE_WORK_AREA_0001ET.CreateNewFieldRedefine(Names.DATE_0001XX, FieldType.String, DATE_0001_local, 8);
                       });
                   });
                   A_0726937748_IA.CreateNewGroup(Names.IMPORT_0002EV, (IMPORT_0002EV) =>
                   {
                       IMPORT_0002EV.CreateNewGroup(Names.CSE_PERSON_0002ET, (CSE_PERSON_0002ET) =>
                       {
                           CSE_PERSON_0002ET.CreateNewField(Names.NUMBER_0002AS, FieldType.String, 1);

                           IField NUMBER_0002_local = CSE_PERSON_0002ET.CreateNewField(Names.NUMBER_0002, FieldType.String, 10);
                           CSE_PERSON_0002ET.CreateNewFieldRedefine(Names.NUMBER_0002XX, FieldType.String, NUMBER_0002_local, 10);
                           CSE_PERSON_0002ET.CreateNewFieldRedefine(Names.NUMBER_0002N, FieldType.UnsignedNumeric, NUMBER_0002_local, 10);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_0726937749_OA, (A_0726937749_OA) =>
               {
                   A_0726937749_OA.CreateNewGroup(Names.EXPORT_GROUP_0001RG, (EXPORT_GROUP_0001RG) =>
                   {

                       IField EXPORT_GROUP_0001MA_local = EXPORT_GROUP_0001RG.CreateNewField(Names.EXPORT_GROUP_0001MA, FieldType.SignedNumeric, 4);
                       EXPORT_GROUP_0001RG.CreateNewFieldRedefine(Names.EXPORT_GROUP_0001MX, FieldType.String, EXPORT_GROUP_0001MA_local, 4);
                       EXPORT_GROUP_0001RG.CreateNewGroupArray(Names.EXPORT_GROUP_0001, 15, (EXPORT_GROUP_0001) =>
                       {
                           EXPORT_GROUP_0001.CreateNewField(Names.EXPORT_GROUP_0001AC, FieldType.String, 1);
                           EXPORT_GROUP_0001.CreateNewGroup(Names.EXPORT_GRP_DET_0003EV, (EXPORT_GRP_DET_0003EV) =>
                           {
                               EXPORT_GRP_DET_0003EV.CreateNewGroup(Names.INTERFACE_PERSON_PROGRA_0003ET, (INTERFACE_PERSON_PROGRA_0003ET) =>
                               {
                                   INTERFACE_PERSON_PROGRA_0003ET.CreateNewField(Names.SOURCE_OF_FUNDS_0003AS, FieldType.String, 1);

                                   IField SOURCE_OF_FUNDS_0003_local = INTERFACE_PERSON_PROGRA_0003ET.CreateNewField(Names.SOURCE_OF_FUNDS_0003, FieldType.String, 3);
                                   INTERFACE_PERSON_PROGRA_0003ET.CreateNewFieldRedefine(Names.SOURCE_OF_FUNDS_0003XX, FieldType.String, SOURCE_OF_FUNDS_0003_local, 3);
                                   INTERFACE_PERSON_PROGRA_0003ET.CreateNewField(Names.PROGRAM_CODE_0003AS, FieldType.String, 1);

                                   IField PROGRAM_CODE_0003_local = INTERFACE_PERSON_PROGRA_0003ET.CreateNewField(Names.PROGRAM_CODE_0003, FieldType.String, 3);
                                   INTERFACE_PERSON_PROGRA_0003ET.CreateNewFieldRedefine(Names.PROGRAM_CODE_0003XX, FieldType.String, PROGRAM_CODE_0003_local, 3);
                                   INTERFACE_PERSON_PROGRA_0003ET.CreateNewField(Names.PROG_EFFECTIVE_DATE_0003AS, FieldType.String, 1);

                                   IField PROG_EFFECTIVE_DATE_0003_local = INTERFACE_PERSON_PROGRA_0003ET.CreateNewField(Names.PROG_EFFECTIVE_DATE_0003, FieldType.SignedNumeric, 8);
                                   INTERFACE_PERSON_PROGRA_0003ET.CreateNewFieldRedefine(Names.PROG_EFFECTIVE_DATE_0003XX, FieldType.String, PROG_EFFECTIVE_DATE_0003_local, 8);
                                   INTERFACE_PERSON_PROGRA_0003ET.CreateNewField(Names.PROGRAM_END_DATE_0003AS, FieldType.String, 1);

                                   IField PROGRAM_END_DATE_0003_local = INTERFACE_PERSON_PROGRA_0003ET.CreateNewField(Names.PROGRAM_END_DATE_0003, FieldType.SignedNumeric, 8);
                                   INTERFACE_PERSON_PROGRA_0003ET.CreateNewFieldRedefine(Names.PROGRAM_END_DATE_0003XX, FieldType.String, PROGRAM_END_DATE_0003_local, 8);
                                   INTERFACE_PERSON_PROGRA_0003ET.CreateNewField(Names.AE_PROGRAM_SUBTYPE_0003AS, FieldType.String, 1);

                                   IField AE_PROGRAM_SUBTYPE_0003_local = INTERFACE_PERSON_PROGRA_0003ET.CreateNewField(Names.AE_PROGRAM_SUBTYPE_0003, FieldType.String, 2);
                                   INTERFACE_PERSON_PROGRA_0003ET.CreateNewFieldRedefine(Names.AE_PROGRAM_SUBTYPE_0003XX, FieldType.String, AE_PROGRAM_SUBTYPE_0003_local, 2);
                               });
                           });
                       });
                   });
                   A_0726937749_OA.CreateNewGroup(Names.S0849351691_0004EV, (S0849351691_0004EV) =>
                   {
                       S0849351691_0004EV.CreateNewGroup(Names.ABEND_DATA_0004ET, (ABEND_DATA_0004ET) =>
                       {
                           ABEND_DATA_0004ET.CreateNewField(Names.TYPE_0004AS, FieldType.String, 1);

                           IField TYPE_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.TYPE_0004, FieldType.String, 1);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.TYPE_0004XX, FieldType.String, TYPE_0004_local, 1);
                           ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0004AS, FieldType.String, 1);

                           IField ADABAS_FILE_NUMBER_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0004, FieldType.String, 4);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.ADABAS_FILE_NUMBER_0004XX, FieldType.String, ADABAS_FILE_NUMBER_0004_local, 4);
                           ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_ACTION_0004AS, FieldType.String, 1);

                           IField ADABAS_FILE_ACTION_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_ACTION_0004, FieldType.String, 3);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.ADABAS_FILE_ACTION_0004XX, FieldType.String, ADABAS_FILE_ACTION_0004_local, 3);
                           ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0004AS, FieldType.String, 1);

                           IField ADABAS_RESPONSE_CD_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0004, FieldType.String, 4);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.ADABAS_RESPONSE_CD_0004XX, FieldType.String, ADABAS_RESPONSE_CD_0004_local, 4);
                           ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESOURCE_NM_0004AS, FieldType.String, 1);

                           IField CICS_RESOURCE_NM_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESOURCE_NM_0004, FieldType.String, 8);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.CICS_RESOURCE_NM_0004XX, FieldType.String, CICS_RESOURCE_NM_0004_local, 8);
                           ABEND_DATA_0004ET.CreateNewField(Names.CICS_FUNCTION_CD_0004AS, FieldType.String, 1);

                           IField CICS_FUNCTION_CD_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.CICS_FUNCTION_CD_0004, FieldType.String, 2);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.CICS_FUNCTION_CD_0004XX, FieldType.String, CICS_FUNCTION_CD_0004_local, 2);
                           ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESPONSE_CD_0004AS, FieldType.String, 1);

                           IField CICS_RESPONSE_CD_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESPONSE_CD_0004, FieldType.String, 6);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.CICS_RESPONSE_CD_0004XX, FieldType.String, CICS_RESPONSE_CD_0004_local, 6);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.TWA, (TWA) =>
           {
               IGroup TWA_ADABAS_PARMS_local = (IGroup)TWA.CreateNewGroup(Names.TWA_ADABAS_PARMS, (TWA_ADABAS_PARMS) =>
               {
                   TWA_ADABAS_PARMS.CreateNewFieldArray("FILLER_d10", 7, FieldType.CompInt, 4);
               });
               TWA.CreateNewGroupRedefine(Names.TWA_CICS_PARMS, TWA_ADABAS_PARMS_local, (TWA_CICS_PARMS) =>
               {
                   TWA_CICS_PARMS.CreateNewField(Names.TWA_PROGRAM_ID, FieldType.String, 8);
                   TWA_CICS_PARMS.CreateNewGroup(Names.TWA_ADDR_LIST, (TWA_ADDR_LIST) =>
                   {
                       TWA_ADDR_LIST.CreateNewFieldArray("FILLER_d11", 5, FieldType.CompInt, 4);
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(W_IA, args, 0);
            SetPassedParm(W_OA, args, 1);
            SetPassedParm(PSMGR_EAB_DATA, args, 2);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(W_IA, args, 0);
            SetReturnParm(W_OA, args, 1);
            SetReturnParm(PSMGR_EAB_DATA, args, 2);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXIR50 : OnlineEABBase
    {

        #region Public Constructors
        public SWEXIR50()
            : base()
        {
            SetUpProgram();
        }

        public SWEXIR50(OnlineControl controlData) : base(controlData)
        {
            SetUpProgram();
        }

        private void SetUpProgram()
        {
            this.ProgramName = "SWEXIR50";

            WS = new SWEXIR50_ws();
            LS = new SWEXIR50_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryTextWithUR("SPA-VIEW", "SELECT KESSEP_TIME_STMP, PART_END_DATE, PART_START_DATE, PART_CODE, PROGRAM_END_DATE, PROGRAM_SUBTYPE, RELATIONSHIP, CREATED_BY, CREATED_TIMESTAMP, LAST_MODIFIED_BY, LAST_MODIFIED_TMST, FK_CSB_CASE_NO, FK_PGB_PROG_TYPE, FK_CLB_CLIENT_NO FROM KSD_PARTICIPATION WHERE {0}  = FK_CLB_CLIENT_NO ORDER BY FK_CLB_CLIENT_NO, FK_PGB_PROG_TYPE, PART_START_DATE, FK_CSB_CASE_NO",  //COBOL==>EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT KESSEP_TIME_STMP , PART_END_DATE , PART_START_DATE , PART_CODE , PROGRAM_END_DATE , PROGRAM_SUBTYPE , RELATIONSHIP , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , FK_CLB_CLIENT_NO FROM KSD_PARTICIPATION WHERE :WRK-CLT-NBR = FK_CLB_CLIENT_NO ORDER BY FK_CLB_CLIENT_NO , FK_PGB_PROG_TYPE , PART_START_DATE , FK_CSB_CASE_NO WITH UR END-EXEC
                                WS.WRK_CLT_NBR);

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXIR50_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXIR50_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_0726937745(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_0726937745
        /// </summary>
        private void M_MAIN_0726937745(string returnMethod = "")
        {
            M_PARA_0726937745_INIT("M_PARA_0726937745_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-0726937745-INIT THRU PARA-0726937745-INIT-EXIT
            M_PARA_0726937745("M_PARA_0726937745_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-0726937745 THRU PARA-0726937745-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_0726937745
        /// </summary>
        private void M_PARA_0726937745(string returnMethod = "")
        {
            WS.FUNC_0726937745_ESC_FLAG.SetValue("N");                                                          //COBOL==> MOVE 'N' TO FUNC-0726937745-ESC-FLAG.
            if (returnMethod != "" && returnMethod != "M_PARA_0726937745") { M_0000_BEG_PGM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_BEG_PGM
        /// </summary>
        /// <remarks>
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT: *****************************************************************
        ///COMMENT:  INCLUDE NAME:  SWCSZG47
        ///COMMENT:      EAB NAME:  SWEXIR50
        ///COMMENT:   DESCRIPTION:  RETRIEVE ACTIVE PARTICIPATIONS FROM KAE/KSC
        ///COMMENT: *****************************************************************
        ///COMMENT:  10-10-00  MLS  REWRITTEN
        ///COMMENT:  05-01-14  MAT  CHANGING ADABAS TO DB2 FOR KEES PHASE 3.
        ///COMMENT:  08-04-17  RKM  CORRECTIONS TO PARTICIPATION PROCESSING
        ///COMMENT:  08-29-17  RKM  ADDED WITH UR TO QUERIES
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_0000_BEG_PGM(string returnMethod = "")
        {
            WS.WRK_PGM_ERR.ResetToInitialValue();                                                               //COBOL==> INITIALIZE WRK-PGM-ERR.
            SetHandleCondtions(HandleCondition.ERROR, "M_9600_ERR_PGM");                                        //COBOL==> EXEC CICS HANDLE CONDITION ERROR ( 9600-ERR-PGM ) END-EXEC.
                                                                                                                //COMMENT:     CALL 'ADASTWA' USING TWA CONTROL-BLOCK.
                                                                                                                //COMMENT:     CALL SRADALNK  USING DFHEIBLK DFHCOMMAREA TWA SRMODLNK.
                                                                                                                //COMMENT:     IF  RESPONSE-CODE     > 0
                                                                                                                //COMMENT:     AND RESPONSE-CODE NOT = 9
                                                                                                                //COMMENT:         SET  WRK-ADA-ERR   TO TRUE
                                                                                                                //COMMENT:         SET  WRK-BEG-ERR   TO TRUE
                                                                                                                //COMMENT:         MOVE RESPONSE-CODE TO WRK-ADA-CD
                                                                                                                //COMMENT:         PERFORM 9800-END-PGM
                                                                                                                //COMMENT:     END-IF.
            Control.GetLatestDateTime(WS.WRK_CUR_TM);                                                           //COBOL==> EXEC CICS ASKTIME ABSTIME ( WRK-CUR-TM ) END-EXEC.
            DateConverter.ConvertABSTime(WS.WRK_CUR_TM, DateTimeFormat.YYMMDD, WS.WRK_CUR_YMD, "", null, "");   //COBOL==> EXEC CICS FORMATTIME ABSTIME ( WRK-CUR-TM ) YYMMDD ( WRK-CUR-YMD ) END-EXEC.
            WS.WRK_CUR_CC.SetValue(20);                                                                         //COBOL==> MOVE 20 TO WRK-CUR-CC.
            WS.WRK_MAX_CY.SetComputeValue(WS.WRK_CUR_CY.AsDecimal() + 1m);                                      //COBOL==> COMPUTE WRK-MAX-CY = WRK-CUR-CY + 1.
            M_1000_GET_PRT_REC("M_1000_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 1000-GET-PRT-REC THRU 1000-EXIT.
                                                                                                                  //COMMENT:  NO LONGER GET KSC RECORD.
                                                                                                                  //COMMENT:  MAT
                                                                                                                  //COMMENT:     PERFORM 6000-GET-KSC-REC.
            LS.EXPORT_GROUP_0001MA.SetValue(WS.Y);                                                              //COBOL==> MOVE Y TO EXPORT-GROUP-0001MA.
            M_9000_CHK_REQ_REC("M_9000_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 9000-CHK-REQ-REC THRU 9000-EXIT.
            M_9800_END_PGM(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM 9800-END-PGM.
            if (returnMethod != "" && returnMethod != "M_0000_BEG_PGM") { M_0000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_EXIT
        /// </summary>
        private void M_0000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_0000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_0000_EXIT") { M_1000_GET_PRT_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1000_GET_PRT_REC
        /// </summary>
        private void M_1000_GET_PRT_REC(string returnMethod = "")
        {
            WS.WRK_CLT_NBR.SetValue(LS.NUMBER_0002N);                                                           //COBOL==> MOVE NUMBER-0002N TO WRK-CLT-NBR.
            M_1010_DECLARE_SPA_VIEW("M_1010_EXIT"); if (Control.ExitProgram) { return; }                          //COBOL==> PERFORM 1010-DECLARE-SPA-VIEW THRU 1010-EXIT.
            if (WS.CL161_ERR_YES.Value)                                                                         //COBOL==> IF CL161-ERR-YES
            {
                M_0000_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            M_1020_OPEN_SPA_VIEW("M_1020_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 1020-OPEN-SPA-VIEW THRU 1020-EXIT.
            if (WS.CL161_ERR_YES.Value)                                                                         //COBOL==> IF CL161-ERR-YES
            {
                M_0000_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: * 8/4/17 - ADDED 'UNTIL' TO PROCESS ALL PARTICIPATIONS
            while (!(WS.WRK_PRT_CMP.Value))                                                                     //COBOL==> PERFORM 1030-FETCH-SPA-VIEW THRU 1030-EXIT UNTIL WRK-PRT-CMP.
            {
                M_1030_FETCH_SPA_VIEW("M_1030_EXIT"); if (Control.ExitProgram) { return; }
            }
            M_1050_CLOSE_SPA_VIEW("M_1050_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 1050-CLOSE-SPA-VIEW THRU 1050-EXIT.
            if (WS.CL161_ERR_YES.Value)                                                                         //COBOL==> IF CL161-ERR-YES
            {
                M_0000_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1000_GET_PRT_REC") { M_1000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1000_EXIT
        /// </summary>
        private void M_1000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1000_EXIT") { M_1010_DECLARE_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1010_DECLARE_SPA_VIEW
        /// </summary>
        private void M_1010_DECLARE_SPA_VIEW(string returnMethod = "")
        {
            // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT KESSEP_TIME_STMP , PART_END_DATE , PART_START_DATE , PART_CODE , PROGRAM_END_DATE , PROGRAM_SUBTYPE , RELATIONSHIP , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , FK_CLB_CLIENT_NO FROM KSD_PARTICIPATION WHERE :WRK-CLT-NBR = FK_CLB_CLIENT_NO ORDER BY FK_CLB_CLIENT_NO , FK_PGB_PROG_TYPE , PART_START_DATE , FK_CSB_CASE_NO WITH UR END-EXEC.
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(161);                                                                //COBOL==> MOVE 161 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL161_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL161-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_1010_DECLARE_SPA_VIEW") { M_1010_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1010_EXIT
        /// </summary>
        private void M_1010_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1010_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1010_EXIT") { M_1020_OPEN_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1020_OPEN_SPA_VIEW
        /// </summary>
        private void M_1020_OPEN_SPA_VIEW(string returnMethod = "")
        {
            DbConv.OpenReader("SPA-VIEW");                                                                      //COBOL==> EXEC SQL OPEN SPA-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(161);                                                                //COBOL==> MOVE 161 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL161_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL161-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_1020_OPEN_SPA_VIEW") { M_1020_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1020_EXIT
        /// </summary>
        private void M_1020_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1020_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1020_EXIT") { M_1030_FETCH_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1030_FETCH_SPA_VIEW
        /// </summary>
        private void M_1030_FETCH_SPA_VIEW(string returnMethod = "")
        {
            DbConv.FetchReaderRow("SPA-VIEW",                                                                //COBOL==> EXEC SQL FETCH SPA-VIEW INTO :PART-KESSEP-TIME-STMP , :PART-PART-END-DATE , :PART-PART-START-DATE , :PART-PART-CODE , :PART-PROGRAM-END-DATE , :PART-PROGRAM-SUBTYPE , :PART-RELATIONSHIP , :PART-CREATED-BY , :PART-CREATED-TIMESTAMP , :PART-LAST-MODIFIED-BY , :PART-LAST-MODIFIED-TMST , :PART-FK-CSB-CASE-NO , :PART-FK-PGB-PROG-TYPE , :PART-FK-CLB-CLIENT-NO END-EXEC
                             WS.PART_KESSEP_TIME_STMP, WS.PART_PART_END_DATE, WS.PART_PART_START_DATE, WS.PART_PART_CODE, WS.PART_PROGRAM_END_DATE, WS.PART_PROGRAM_SUBTYPE, WS.PART_RELATIONSHIP, WS.PART_CREATED_BY, WS.PART_CREATED_TIMESTAMP, WS.PART_LAST_MODIFIED_BY, WS.PART_LAST_MODIFIED_TMST, WS.PART_FK_CSB_CASE_NO, WS.PART_FK_PGB_PROG_TYPE, WS.PART_FK_CLB_CLIENT_NO);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //COMMENT: * 8/4/17 - COMMENTED OUT NEXT LINE
                //COMMENT:          SET WRK-PRT-CMP TO TRUE
                M_2000_TBL_WRK_PRT("M_2000_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 2000-TBL-WRK-PRT THRU 2000-EXIT
                M_1200_PRC_PRT_REC("M_1200_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 1200-PRC-PRT-REC THRU 1200-EXIT
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WRK_PRT_CMP.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-CMP TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(161);                                                                //COBOL==> MOVE 161 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLN");                                                              //COBOL==> MOVE 'RLN' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL161_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL161-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_1030_FETCH_SPA_VIEW") { M_1030_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1030_EXIT
        /// </summary>
        private void M_1030_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1030_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1030_EXIT") { M_1050_CLOSE_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1050_CLOSE_SPA_VIEW
        /// </summary>
        /// <remarks>
        ///COMMENT:      INITIALIZE WRK-REC.
        ///COMMENT:      INITIALIZE PRT-TBL.
        ///COMMENT:      MOVE 'N'          TO WRK-PRT-CMP-CHK.
        ///COMMENT:      MOVE 'N'          TO WRK-PRT-EOF-CHK.
        ///COMMENT:      MOVE 0            TO Y.
        ///COMMENT:      MOVE SPACES       TO LST-PGM-TYP.
        ///COMMENT:      MOVE NUMBER-0002N TO WRK-CLT-NBR.
        ///COMMENT:      PERFORM 8000-GET-FST-PRT.
        ///COMMENT:      PERFORM 1200-PRC-PRT-REC
        ///COMMENT:        UNTIL WRK-PRT-CMP.
        /// </remarks>
        private void M_1050_CLOSE_SPA_VIEW(string returnMethod = "")
        {
            DbConv.CloseReader("SPA-VIEW");                                                                     //COBOL==> EXEC SQL CLOSE SPA-VIEW END-EXEC.
            if (WS.CL161_ERR_YES.Value)                                                                         //COBOL==> IF CL161-ERR-YES
            {
                M_0000_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(161);                                                                //COBOL==> MOVE 161 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLN");                                                              //COBOL==> MOVE 'RLN' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL161_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL161-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_1050_CLOSE_SPA_VIEW") { M_1050_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1050_EXIT
        /// </summary>
        private void M_1050_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1050_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1050_EXIT") { M_1200_PRC_PRT_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1200_PRC_PRT_REC
        /// </summary>
        private void M_1200_PRC_PRT_REC(string returnMethod = "")
        {
            if ((WS.WRK_PRT_EOF.Value)
             || (!(WS.WRK_PGM_TYP.IsEqualTo(WS.LST_PGM_TYP))))        //COBOL==> IF WRK-PRT-EOF OR WRK-PGM-TYP NOT = LST-PGM-TYP
            {
                WS.LST_PGM_TYP.SetValue(WS.WRK_PGM_TYP);                                                            //COBOL==> MOVE WRK-PGM-TYP TO LST-PGM-TYP
                if (WS.PRT_PGM_TYP[1].IsGreaterThan(SPACES))                                                        //COBOL==> IF PRT-PGM-TYP ( 1 ) > SPACES
                {
                    if (WS.PRT_PGM_TYP[1].IsEqualTo("AF"))                                                              //COBOL==> IF PRT-PGM-TYP ( 1 ) = 'AF'
                    {
                        M_3000_PRC_AF_PRT("M_3000_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 3000-PRC-AF-PRT THRU 3000-EXIT
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if (WS.PRT_PGM_TYP[1].IsEqualTo("FC"))                                                              //COBOL==> IF PRT-PGM-TYP ( 1 ) = 'FC'
                        {
                            M_4000_PRC_FC_PRT("M_4000_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 4000-PRC-FC-PRT THRU 4000-EXIT
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.X.SetValue(1);                                                                                   //COBOL==> MOVE 1 TO X
                            M_5000_EXT_PRT_REC("M_5000_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 5000-EXT-PRT-REC THRU 5000-EXIT
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.PRT_TBL.ResetToInitialValue();                                                                   //COBOL==> INITIALIZE PRT-TBL
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WRK_PRT_EOF.Value)                                                                           //COBOL==> IF WRK-PRT-EOF
            {
                WS.WRK_PRT_CMP.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-CMP TO TRUE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_2200_CHK_PRT_REC("M_2200_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 2200-CHK-PRT-REC THRU 2200-EXIT
                if (!(WS.WRK_PRT_ERR.Value))                                                                       //COBOL==> IF NOT WRK-PRT-ERR
                {
                    if ((WS.WRK_PGM_TYP.IsEqualTo("AF"))
             && (WS.WRK_VAL_MED_CD.Value))                  //COBOL==> IF WRK-PGM-TYP = 'AF' AND WRK-VAL-MED-CD
                    {
                        WS.X.SetValue(2);                                                                                   //COBOL==> MOVE 2 TO X
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.X.SetValue(1);                                                                                   //COBOL==> MOVE 1 TO X
                    }                                                                                                   //COBOL==> END-IF
                    M_2600_TBL_PRT_REC("M_2600_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 2600-TBL-PRT-REC THRU 2600-EXIT
                }                                                                                                   //COBOL==> END-IF
                                                                                                                    //COMMENT:          PERFORM 8200-GET-NXT-PRT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1200_PRC_PRT_REC") { M_1200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1200_EXIT
        /// </summary>
        private void M_1200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1200_EXIT") { M_2000_TBL_WRK_PRT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_TBL_WRK_PRT
        /// </summary>
        private void M_2000_TBL_WRK_PRT(string returnMethod = "")
        {
            WS.WRK_CSE_NBR.SetValue(WS.PART_FK_CSB_CASE_NO);                                                    //COBOL==> MOVE PART-FK-CSB-CASE-NO TO WRK-CSE-NBR.
            WS.WRK_PGM_TYP.SetValue(WS.PART_FK_PGB_PROG_TYPE);                                                  //COBOL==> MOVE PART-FK-PGB-PROG-TYPE TO WRK-PGM-TYP.
            WS.WRK_PRT_CD.SetValue(WS.PART_PART_CODE);                                                          //COBOL==> MOVE PART-PART-CODE TO WRK-PRT-CD.
            WS.WRK_BEG_DT.SetValue(WS.PART_PART_START_DATE);                                                    //COBOL==> MOVE PART-PART-START-DATE TO WRK-BEG-DT.
            WS.WRK_END_DT.SetValue(WS.PART_PART_END_DATE);                                                      //COBOL==> MOVE PART-PART-END-DATE TO WRK-END-DT.
            WS.WRK_PGM_DT.SetValue(WS.PART_PROGRAM_END_DATE);                                                   //COBOL==> MOVE PART-PROGRAM-END-DATE TO WRK-PGM-DT.
            if (returnMethod != "" && returnMethod != "M_2000_TBL_WRK_PRT") { M_2000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_EXIT
        /// </summary>
        private void M_2000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2000_EXIT") { M_2200_CHK_PRT_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2200_CHK_PRT_REC
        /// </summary>
        private void M_2200_CHK_PRT_REC(string returnMethod = "")
        {
            WS.WRK_PRT_ERR_CHK.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO WRK-PRT-ERR-CHK.
            if (!(WS.WRK_VAL_PGM_TYP.Value))                                                                   //COBOL==> IF NOT WRK-VAL-PGM-TYP
            {
                WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WRK_PRT_ERR.Value))                                                                       //COBOL==> IF NOT WRK-PRT-ERR
            {
                if ((WS.WRK_VAL_PRT_CD.Value)
             || (WS.WRK_VAL_MED_CD.Value))                         //COBOL==> IF WRK-VAL-PRT-CD OR WRK-VAL-MED-CD
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WRK_PRT_ERR.Value))                                                                       //COBOL==> IF NOT WRK-PRT-ERR
            {
                if (WS.WRK_BEG_DT.IsGreaterThan(WS.WRK_CUR_DT))                                                     //COBOL==> IF WRK-BEG-DT > WRK-CUR-DT
                {
                    WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WRK_CHK_DT.SetValue(WS.WRK_BEG_DT);                                                              //COBOL==> MOVE WRK-BEG-DT TO WRK-CHK-DT
                    M_7000_CHK_VAL_DT("M_7000_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 7000-CHK-VAL-DT THRU 7000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WRK_PRT_ERR.Value))                                                                       //COBOL==> IF NOT WRK-PRT-ERR
            {
                if (WS.WRK_END_DT.IsLessThanOrEqualTo(WS.WRK_BEG_DT))                                               //COBOL==> IF WRK-END-DT NOT > WRK-BEG-DT
                {
                    WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WRK_PRT_ERR.Value))                                                                       //COBOL==> IF NOT WRK-PRT-ERR
            {
                if (WS.WRK_END_DT.IsEqualTo(WS.WRK_OPN_DT))                                                         //COBOL==> IF WRK-END-DT = WRK-OPN-DT
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.WRK_END_DT.IsGreaterThanOrEqualTo(WS.WRK_CUR_DT))                                            //COBOL==> IF WRK-END-DT >= WRK-CUR-DT
                    {
                        WS.WRK_CHK_DT.SetValue(WS.WRK_END_DT);                                                              //COBOL==> MOVE WRK-END-DT TO WRK-CHK-DT
                        M_7000_CHK_VAL_DT("M_7000_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 7000-CHK-VAL-DT THRU 7000-EXIT
                        if (!(WS.WRK_PRT_ERR.Value))                                                                       //COBOL==> IF NOT WRK-PRT-ERR
                        {
                            WS.WRK_END_DT.SetValue(WS.WRK_OPN_DT);                                                              //COBOL==> MOVE WRK-OPN-DT TO WRK-END-DT
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if (WS.WRK_PGM_TYP.IsEqualTo("AF"))                                                                 //COBOL==> IF WRK-PGM-TYP = 'AF'
                        {
                            if (WS.WRK_VAL_MED_CD.Value)                                                                        //COBOL==> IF WRK-VAL-MED-CD
                            {
                                WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.WRK_CHK_DT.SetValue(WS.WRK_END_DT);                                                              //COBOL==> MOVE WRK-END-DT TO WRK-CHK-DT
                                M_7000_CHK_VAL_DT("M_7000_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 7000-CHK-VAL-DT THRU 7000-EXIT
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WRK_PRT_ERR.Value))                                                                       //COBOL==> IF NOT WRK-PRT-ERR
            {
                M_2400_GET_INV_REC("M_2400_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 2400-GET-INV-REC THRU 2400-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_2200_CHK_PRT_REC") { M_2200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2200_EXIT
        /// </summary>
        private void M_2200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2200_EXIT") { M_2400_GET_INV_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2400_GET_INV_REC
        /// </summary>
        private void M_2400_GET_INV_REC(string returnMethod = "")
        {
            DbConv.ExecuteSqlQueryWithUR("SELECT DENIAL_CL_REASON , KESSEP_TIME_STMP , PROGRAM_START_DATE , PROGRAM_END_DATE , PROGRAM_STATUS , PROGRAM_STATUS_DT , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} , {10} , {11} FROM KSD_INVOLVEMENT WHERE FK_CSB_CASE_NO = {12} AND FK_PGB_PROG_TYPE = {13} AND PROGRAM_END_DATE = {14} ",  //COBOL==> EXEC SQL SELECT DENIAL_CL_REASON , KESSEP_TIME_STMP , PROGRAM_START_DATE , PROGRAM_END_DATE , PROGRAM_STATUS , PROGRAM_STATUS_DT , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE INTO :INVOLVE-DENIAL-CL-REASON , :INVOLVE-KESSEP-TIME-STMP , :INVOLVE-PROGRAM-START-DATE , :INVOLVE-PROGRAM-END-DATE , :INVOLVE-PROGRAM-STATUS , :INVOLVE-PROGRAM-STATUS-DT , :INVOLVE-CREATED-BY , :INVOLVE-CREATED-TIMESTAMP , :INVOLVE-LAST-MODIFIED-BY , :INVOLVE-LAST-MODIFIED-TMST , :INVOLVE-FK-CSB-CASE-NO , :INVOLVE-FK-PGB-PROG-TYPE FROM KSD_INVOLVEMENT WHERE FK_CSB_CASE_NO = :WRK-CSE-NBR AND FK_PGB_PROG_TYPE = :WRK-PGM-TYP AND PROGRAM_END_DATE = :WRK-PGM-DT WITH UR END-EXEC.
                                 WS.INVOLVE_DENIAL_CL_REASON, WS.INVOLVE_KESSEP_TIME_STMP, WS.INVOLVE_PROGRAM_START_DATE, WS.INVOLVE_PROGRAM_END_DATE, WS.INVOLVE_PROGRAM_STATUS, WS.INVOLVE_PROGRAM_STATUS_DT, WS.INVOLVE_CREATED_BY, WS.INVOLVE_CREATED_TIMESTAMP, WS.INVOLVE_LAST_MODIFIED_BY, WS.INVOLVE_LAST_MODIFIED_TMST, WS.INVOLVE_FK_CSB_CASE_NO, WS.INVOLVE_FK_PGB_PROG_TYPE, WS.WRK_CSE_NBR, WS.WRK_PGM_TYP, WS.WRK_PGM_DT);
            //COMMENT: * 8/4/17 - COMMENTED OUT NEXT LINE
            //COMMENT:     MOVE INVOLVE-FK-PGB-PROG-TYPE TO WRK-PGM-CD.
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.WRK_PGM_CD.SetValue(WS.INVOLVE_PROGRAM_STATUS);                                                  //COBOL==> MOVE INVOLVE-PROGRAM-STATUS TO WRK-PGM-CD
                if (WS.WRK_INV_PGM_CD.Value)                                                                        //COBOL==> IF WRK-INV-PGM-CD
                {
                    WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(160);                                                                //COBOL==> MOVE 160 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL160_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL160-ERR-YES TO TRUE
                M_9800_END_PGM(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM 9800-END-PGM
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_2400_GET_INV_REC") { M_2400_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2400_EXIT
        /// </summary>
        /// <remarks>
        ///COMMENT:      MOVE WRK-CSE-NBR TO V-CASE-NUMBER160.
        ///COMMENT:      MOVE WRK-PGM-TYP TO V-PROGRAM-TYPE160.
        ///COMMENT:      MOVE WRK-PGM-DT  TO V-PROGRAM-END-DATE160.
        ///COMMENT:      @READLOGICAL160 FIRST.
        ///COMMENT:      IF  RESPONSE-CODE160 = 0
        ///COMMENT:          IF  CASE-NUMBER160      = WRK-CSE-NBR
        ///COMMENT:          AND PROGRAM-TYPE160     = WRK-PGM-TYP
        ///COMMENT:          AND PROGRAM-END-DATE160 = WRK-PGM-DT
        ///COMMENT:              MOVE PROGRAM-STATUS160-1 TO WRK-PGM-CD
        ///COMMENT:              IF  WRK-INV-PGM-CD
        ///COMMENT:                  SET WRK-PRT-ERR TO TRUE
        ///COMMENT:              END-IF
        ///COMMENT:          ELSE
        ///COMMENT:              SET WRK-PRT-ERR TO TRUE
        ///COMMENT:          END-IF
        ///COMMENT:      ELSE
        ///COMMENT:          IF  EOF160
        ///COMMENT:              SET  WRK-PRT-ERR      TO TRUE
        ///COMMENT:          ELSE
        ///COMMENT:              SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:              SET  WRK-RLF-ERR      TO TRUE
        ///COMMENT:              MOVE 160              TO WRK-ADA-NBR
        ///COMMENT:              MOVE RESPONSE-CODE160 TO WRK-ADA-CD
        ///COMMENT:              PERFORM 9800-END-PGM
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        /// </remarks>
        private void M_2400_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2400_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2400_EXIT") { M_2600_TBL_PRT_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2600_TBL_PRT_REC
        /// </summary>
        private void M_2600_TBL_PRT_REC(string returnMethod = "")
        {
            WS.PRT_CSE_NBR[WS.X.AsInt()].SetValue(WS.WRK_CSE_NBR);                                              //COBOL==> MOVE WRK-CSE-NBR TO PRT-CSE-NBR ( X ) .
            WS.PRT_PGM_TYP[WS.X.AsInt()].SetValue(WS.WRK_PGM_TYP);                                              //COBOL==> MOVE WRK-PGM-TYP TO PRT-PGM-TYP ( X ) .
            WS.PRT_CD[WS.X.AsInt()].SetValue(WS.WRK_PRT_CD);                                                    //COBOL==> MOVE WRK-PRT-CD TO PRT-CD ( X ) .
            WS.PRT_BEG_DT[WS.X.AsInt()].SetValue(WS.WRK_BEG_DT);                                                //COBOL==> MOVE WRK-BEG-DT TO PRT-BEG-DT ( X ) .
            WS.PRT_END_DT[WS.X.AsInt()].SetValue(WS.WRK_END_DT);                                                //COBOL==> MOVE WRK-END-DT TO PRT-END-DT ( X ) .
            WS.PRT_PGM_DT[WS.X.AsInt()].SetValue(WS.WRK_PGM_DT);                                                //COBOL==> MOVE WRK-PGM-DT TO PRT-PGM-DT ( X ) .
            if (returnMethod != "" && returnMethod != "M_2600_TBL_PRT_REC") { M_2600_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2600_EXIT
        /// </summary>
        private void M_2600_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2600_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2600_EXIT") { M_3000_PRC_AF_PRT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3000_PRC_AF_PRT
        /// </summary>
        private void M_3000_PRC_AF_PRT(string returnMethod = "")
        {
            if (WS.PRT_END_DT[1].IsEqualTo(WS.WRK_OPN_DT))                                                      //COBOL==> IF PRT-END-DT ( 1 ) = WRK-OPN-DT
            {
                WS.X.SetValue(1);                                                                                   //COBOL==> MOVE 1 TO X
                M_5000_EXT_PRT_REC("M_5000_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 5000-EXT-PRT-REC THRU 5000-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((WS.PRT_PGM_TYP[1].IsEqualTo("AF"))
             && (WS.PRT_PGM_TYP[2].IsEqualTo("AF")))     //COBOL==> IF ( PRT-PGM-TYP ( 1 ) = 'AF' AND PRT-PGM-TYP ( 2 ) = 'AF' )
                {
                    if (WS.PRT_BEG_DT[2].IsGreaterThan(WS.PRT_END_DT[1]))                                               //COBOL==> IF PRT-BEG-DT ( 2 ) > PRT-END-DT ( 1 )
                    {
                        WS.WRK_CHK_DT.SetValue(WS.PRT_BEG_DT[2]);                                                           //COBOL==> MOVE PRT-BEG-DT ( 2 ) TO WRK-CHK-DT
                        WS.WRK_CHK_CY.SetValue(WS.WRK_CHK_CY.AsInt() - 1);                                                  //COBOL==> SUBTRACT 1 FROM WRK-CHK-CY
                        if (WS.WRK_CHK_DT.IsGreaterThan(WS.PRT_END_DT[1]))                                                  //COBOL==> IF WRK-CHK-DT > PRT-END-DT ( 1 )
                        {
                            //Continue                                                                                          //COBOL==> CONTINUE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.X.SetValue(1);                                                                                   //COBOL==> MOVE 1 TO X
                            WS.PRT_CD[1].SetValue("WT");                                                                        //COBOL==> MOVE 'WT' TO PRT-CD ( 1 )
                            M_5000_EXT_PRT_REC("M_5000_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 5000-EXT-PRT-REC THRU 5000-EXIT
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_3000_PRC_AF_PRT") { M_3000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3000_EXIT
        /// </summary>
        private void M_3000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_3000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_3000_EXIT") { M_4000_PRC_FC_PRT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4000_PRC_FC_PRT
        /// </summary>
        private void M_4000_PRC_FC_PRT(string returnMethod = "")
        {
            M_4200_GET_FND_CD("M_4200_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 4200-GET-FND-CD THRU 4200-EXIT.
            M_4400_GET_LEG_CD("M_4400_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 4400-GET-LEG-CD THRU 4400-EXIT.
            WS.PRT_FND_CD[1].SetValue(WS.WRK_FND_CD);                                                           //COBOL==> MOVE WRK-FND-CD TO PRT-FND-CD ( 1 ) .
            if (WS.WRK_JJA_CD.Value)                                                                            //COBOL==> IF WRK-JJA-CD
            {
                if (WS.WRK_PLC_DT.IsGreaterThan(WS.WRK_CUR_DT))                                                     //COBOL==> IF WRK-PLC-DT > WRK-CUR-DT
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.WRK_PLC_DT.IsEqualTo(0))                                                                     //COBOL==> IF WRK-PLC-DT = 0
                    {
                        WS.PRT_FND_CD[1].SetValue("JJ");                                                                    //COBOL==> MOVE 'JJ' TO PRT-FND-CD ( 1 )
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if (WS.WRK_PLC_DT.IsLessThan(WS.PRT_BEG_DT[1]))                                                     //COBOL==> IF WRK-PLC-DT < PRT-BEG-DT ( 1 )
                        {
                            //Continue                                                                                          //COBOL==> CONTINUE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.PRT_FND_CD[1].SetValue("JJ");                                                                    //COBOL==> MOVE 'JJ' TO PRT-FND-CD ( 1 )
                            if (WS.WRK_PLC_DT.IsLessThan(WS.WRK_JJA_DT))                                                        //COBOL==> IF WRK-PLC-DT < WRK-JJA-DT
                            {
                                WS.PRT_BEG_DT[1].SetValue(WS.WRK_JJA_DT);                                                           //COBOL==> MOVE WRK-JJA-DT TO PRT-BEG-DT ( 1 )
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.WRK_PRT_ERR_CHK.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO WRK-PRT-ERR-CHK
                                WS.WRK_CHK_DT.SetValue(WS.WRK_PLC_DT);                                                              //COBOL==> MOVE WRK-PLC-DT TO WRK-CHK-DT
                                M_7000_CHK_VAL_DT("M_7000_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 7000-CHK-VAL-DT THRU 7000-EXIT
                                if (!(WS.WRK_PRT_ERR.Value))                                                                       //COBOL==> IF NOT WRK-PRT-ERR
                                {
                                    WS.PRT_BEG_DT[1].SetValue(WS.WRK_PLC_DT);                                                           //COBOL==> MOVE WRK-PLC-DT TO PRT-BEG-DT ( 1 )
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.X.SetValue(1);                                                                                   //COBOL==> MOVE 1 TO X.
            M_5000_EXT_PRT_REC("M_5000_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 5000-EXT-PRT-REC THRU 5000-EXIT.
            if (returnMethod != "" && returnMethod != "M_4000_PRC_FC_PRT") { M_4000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4000_EXIT
        /// </summary>
        private void M_4000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4000_EXIT") { M_4200_GET_FND_CD(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4200_GET_FND_CD
        /// </summary>
        private void M_4200_GET_FND_CD(string returnMethod = "")
        {
            DbConv.ExecuteSqlQueryWithUR("SELECT PROGRAM_TYPE , SOURCE_OF_FUNDING , CASE_CLOSE_RSN_CD , BEN_PRORATION_DATE , REVIEW_MONTH_DUE , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CSB_CASE_NO INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} FROM KSD_PROGRAM_BASIC WHERE PROGRAM_TYPE = {10} AND FK_CSB_CASE_NO = {11} ",  //COBOL==> EXEC SQL SELECT PROGRAM_TYPE , SOURCE_OF_FUNDING , CASE_CLOSE_RSN_CD , BEN_PRORATION_DATE , REVIEW_MONTH_DUE , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CSB_CASE_NO INTO :PGMBASIC-PROGRAM-TYPE , :PGMBASIC-SOURCE-OF-FUNDING , :PGMBASIC-CASE-CLOSE-RSN-CD , :PGMBASIC-BEN-PRORATION-DATE , :PGMBASIC-REVIEW-MONTH-DUE , :PGMBASIC-CREATED-BY , :PGMBASIC-CREATED-TIMESTAMP , :PGMBASIC-LAST-MODIFIED-BY , :PGMBASIC-LAST-MODIFIED-TMST , :PGMBASIC-FK-CSB-CASE-NO FROM KSD_PROGRAM_BASIC WHERE PROGRAM_TYPE = :WRK-PGM-CD AND FK_CSB_CASE_NO = :WRK-CSE-NBR WITH UR END-EXEC.
                                 WS.PGMBASIC_PROGRAM_TYPE, WS.PGMBASIC_SOURCE_OF_FUNDING, WS.PGMBASIC_CASE_CLOSE_RSN_CD, WS.PGMBASIC_BEN_PRORATION_DATE, WS.PGMBASIC_REVIEW_MONTH_DUE, WS.PGMBASIC_CREATED_BY, WS.PGMBASIC_CREATED_TIMESTAMP, WS.PGMBASIC_LAST_MODIFIED_BY, WS.PGMBASIC_LAST_MODIFIED_TMST, WS.PGMBASIC_FK_CSB_CASE_NO, WS.WRK_PGM_CD, WS.WRK_CSE_NBR);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.WRK_FND_CD.SetValue(WS.PGMBASIC_SOURCE_OF_FUNDING);                                              //COBOL==> MOVE PGMBASIC-SOURCE-OF-FUNDING TO WRK-FND-CD
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(162);                                                                //COBOL==> MOVE 162 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL162_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL162-ERR-YES TO TRUE
                M_9800_END_PGM(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM 9800-END-PGM
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (!(WS.WRK_FND_CD.IsEqualTo("AF")))                                                               //COBOL==> IF WRK-FND-CD NOT = 'AF'
            {
                WS.WRK_FND_CD.SetValue("GA");                                                                       //COBOL==> MOVE 'GA' TO WRK-FND-CD
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_4200_GET_FND_CD") { M_4200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4200_EXIT
        /// </summary>
        /// <remarks>
        ///COMMENT:      MOVE SPACES          TO WRK-FND-CD.
        ///COMMENT:      MOVE PRT-CSE-NBR (1) TO V-CASE-NUMBER162.
        ///COMMENT:      MOVE PRT-PGM-TYP (1) TO V-PROGRAM-TYPE162.
        ///COMMENT:      @READLOGICAL162 FIRST.
        ///COMMENT:      IF  RESPONSE-CODE162 = 0
        ///COMMENT:          IF  CASE-NUMBER162  = PRT-CSE-NBR (1)
        ///COMMENT:          AND PROGRAM-TYPE162 = PRT-PGM-TYP (1)
        ///COMMENT:              MOVE SOURCE-OF-FUNDING162 TO WRK-FND-CD
        ///COMMENT:          END-IF
        ///COMMENT:      ELSE
        ///COMMENT:          IF  EOF162
        ///COMMENT:              CONTINUE
        ///COMMENT:          ELSE
        ///COMMENT:              SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:              SET  WRK-RLF-ERR      TO TRUE
        ///COMMENT:              MOVE 162              TO WRK-ADA-NBR
        ///COMMENT:              MOVE RESPONSE-CODE162 TO WRK-ADA-CD
        ///COMMENT:              PERFORM 9800-END-PGM
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        /// </remarks>
        private void M_4200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4200_EXIT") { M_4400_GET_LEG_CD(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4400_GET_LEG_CD
        /// </summary>
        private void M_4400_GET_LEG_CD(string returnMethod = "")
        {
            //COMMENT:      PERFORM 8400-GET-CLT-REC THRU 8400-EXIT.
            WS.WRK_CLT_FND_CHK.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO WRK-CLT-FND-CHK.
            DbConv.ExecuteSqlQueryWithUR("SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} , {10} , {11} , {12} , {13} , {14} , {15} , {16} , {17} , {18} , {19} , {20} , {21} , {22} , {23} , {24} , {25} , {26} , {27} , {28} FROM KSD_CLIENT_BASIC WHERE {29} = CLIENT_NUMBER ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST INTO :CLIENTB-CLIENT-NUMBER , :CLIENTB-CLIENT-GIVEN-NAME , :CLIENTB-CLIENT-INITIALS , :CLIENTB-CLIENT-SURNAME , :CLIENTB-CIS-REPL-IND , :CLIENTB-WORK-PHONE , :CLIENTB-SSN , :CLIENTB-GENDER , :CLIENTB-PARENT-RGHTS-SEV , :CLIENTB-PRNT-RGHTS-SEV-DT , :CLIENTB-LEGAL-STATUS , :CLIENTB-INSURANCE-CODE , :CLIENTB-INITIAL-CUSTODY-DT , :CLIENTB-HOME-PHONE , :CLIENTB-DATE-OF-BIRTH , :CLIENTB-CURR-PLACEMNT-DT , :CLIENTB-CURRENT-PLACEMENT , :CLIENTB-CSEA-G-CAUSE-CODE , :CLIENTB-CSEA-G-CAUSE-CL-DT , :CLIENTB-CSEA-COOP-CODE , :CLIENTB-COUNTY-CRT-COMMIT , :CLIENTB-MONTHS-ASST-AF , :CLIENTB-MONTHS-ASST-GA , :CLIENTB-MO-DEATH-DT , :CLIENTB-MO-PRT-DT , :CLIENTB-FA-DEATH-DT , :CLIENTB-FA-PRT-DT , :CLIENTB-MPI-ID , :CLIENTB-MED-COVERAGE-IND FROM KSD_CLIENT_BASIC WHERE :WRK-CLT-NBR = CLIENT_NUMBER WITH UR END-EXEC.
                                 WS.CLIENTB_CLIENT_NUMBER, WS.CLIENTB_CLIENT_GIVEN_NAME, WS.CLIENTB_CLIENT_INITIALS, WS.CLIENTB_CLIENT_SURNAME, WS.CLIENTB_CIS_REPL_IND, WS.CLIENTB_WORK_PHONE, WS.CLIENTB_SSN, WS.CLIENTB_GENDER, WS.CLIENTB_PARENT_RGHTS_SEV, WS.CLIENTB_PRNT_RGHTS_SEV_DT, WS.CLIENTB_LEGAL_STATUS, WS.CLIENTB_INSURANCE_CODE, WS.CLIENTB_INITIAL_CUSTODY_DT, WS.CLIENTB_HOME_PHONE, WS.CLIENTB_DATE_OF_BIRTH, WS.CLIENTB_CURR_PLACEMNT_DT, WS.CLIENTB_CURRENT_PLACEMENT, WS.CLIENTB_CSEA_G_CAUSE_CODE, WS.CLIENTB_CSEA_G_CAUSE_CL_DT, WS.CLIENTB_CSEA_COOP_CODE, WS.CLIENTB_COUNTY_CRT_COMMIT, WS.CLIENTB_MONTHS_ASST_AF, WS.CLIENTB_MONTHS_ASST_GA, WS.CLIENTB_MO_DEATH_DT, WS.CLIENTB_MO_PRT_DT, WS.CLIENTB_FA_DEATH_DT, WS.CLIENTB_FA_PRT_DT, WS.CLIENTB_MPI_ID, WS.CLIENTB_MED_COVERAGE_IND, WS.WRK_CLT_NBR);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.WRK_CLT_FND.SetValue(true);                                                                      //COBOL==> SET WRK-CLT-FND TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_RIN_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-RIN-ERR TO TRUE
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL154_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL154-ERR-YES TO TRUE
                M_9800_END_PGM(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM 9800-END-PGM
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (WS.WRK_CLT_FND.Value)                                                                           //COBOL==> IF WRK-CLT-FND
            {
                WS.WRK_LEG_CD.SetValue(WS.CLIENTB_LEGAL_STATUS);                                                    //COBOL==> MOVE CLIENTB-LEGAL-STATUS TO WRK-LEG-CD
                WS.WRK_PLC_DT.SetValue(WS.CLIENTB_CURR_PLACEMNT_DT);                                                //COBOL==> MOVE CLIENTB-CURR-PLACEMNT-DT TO WRK-PLC-DT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WRK_LEG_CD.SetValueWithSpaces();                                                                 //COBOL==> MOVE SPACES TO WRK-LEG-CD
                WS.WRK_PLC_DT.SetValueWithZeroes();                                                                 //COBOL==> MOVE ZERO TO WRK-PLC-DT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_4400_GET_LEG_CD") { M_4400_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4400_EXIT
        /// </summary>
        private void M_4400_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4400_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4400_EXIT") { M_5000_EXT_PRT_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_5000_EXT_PRT_REC
        /// </summary>
        private void M_5000_EXT_PRT_REC(string returnMethod = "")
        {
            WS.Y.Add(1);                                                                                        //COBOL==> ADD 1 TO Y.
            LS.SOURCE_OF_FUNDS_0003[WS.Y.AsInt()].SetValue(WS.PRT_FND_CD[WS.X.AsInt()]);                        //COBOL==> MOVE PRT-FND-CD ( X ) TO SOURCE-OF-FUNDS-0003 ( Y ) .
            LS.PROGRAM_CODE_0003[WS.Y.AsInt()].SetValue(WS.PRT_PGM_TYP[WS.X.AsInt()]);                          //COBOL==> MOVE PRT-PGM-TYP ( X ) TO PROGRAM-CODE-0003 ( Y ) .
            LS.PROG_EFFECTIVE_DATE_0003[WS.Y.AsInt()].SetValue(WS.PRT_BEG_DT[WS.X.AsInt()]);                    //COBOL==> MOVE PRT-BEG-DT ( X ) TO PROG-EFFECTIVE-DATE-0003 ( Y ) .
            LS.AE_PROGRAM_SUBTYPE_0003[WS.Y.AsInt()].SetValue(WS.PRT_CD[WS.X.AsInt()]);                         //COBOL==> MOVE PRT-CD ( X ) TO AE-PROGRAM-SUBTYPE-0003 ( Y ) .
            if (WS.PRT_END_DT[WS.X.AsInt()].IsEqualTo(WS.WRK_OPN_DT))                                           //COBOL==> IF PRT-END-DT ( X ) = WRK-OPN-DT
            {
                LS.PROGRAM_END_DATE_0003[WS.Y.AsInt()].SetValue(20991231);                                          //COBOL==> MOVE 20991231 TO PROGRAM-END-DATE-0003 ( Y )
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.PROGRAM_END_DATE_0003[WS.Y.AsInt()].SetValue(WS.PRT_END_DT[WS.X.AsInt()]);                       //COBOL==> MOVE PRT-END-DT ( X ) TO PROGRAM-END-DATE-0003 ( Y )
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_5000_EXT_PRT_REC") { M_5000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_5000_EXIT
        /// </summary>
        private void M_5000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_5000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_5000_EXIT") { M_7000_CHK_VAL_DT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7000_CHK_VAL_DT
        /// </summary>
        /// <remarks>
        ///COMMENT: 6000-GET-KSC-REC.
        ///COMMENT:      INITIALIZE PRT-TBL.
        ///COMMENT:      MOVE 'N' TO WRK-PRT-CMP-CHK.
        ///COMMENT:      MOVE 'N' TO WRK-PRT-EOF-CHK.
        ///COMMENT:      PERFORM 8600-GET-FST-KSC.
        ///COMMENT:      PERFORM 6400-PRC-KSC-REC
        ///COMMENT:        UNTIL WRK-PRT-CMP.
        ///COMMENT: 6000-EXIT. EXIT.
        ///COMMENT: 6200-TBL-WRK-KSC.
        ///COMMENT:      MOVE PGM-TYPE113      TO WRK-PGM-TYP.
        ///COMMENT:      MOVE PART-OPEN-DT113  TO WRK-BEG-DT.
        ///COMMENT:      MOVE PART-CLOSE-DT113 TO WRK-END-DT.
        ///COMMENT: 6200-EXIT. EXIT.
        ///COMMENT: 6400-PRC-KSC-REC.
        ///COMMENT:      IF  WRK-PRT-EOF
        ///COMMENT:          IF  PRT-PGM-TYP (1) > SPACES
        ///COMMENT:              PERFORM 6800-EXT-KSC-REC
        ///COMMENT:          END-IF
        ///COMMENT:          SET WRK-PRT-CMP TO TRUE
        ///COMMENT:      ELSE
        ///COMMENT:          PERFORM 6600-CHK-KSC-REC
        ///COMMENT:          IF  NOT WRK-PRT-ERR
        ///COMMENT:              PERFORM 8400-GET-CLT-REC
        ///COMMENT:              IF  WRK-CLT-FND
        ///COMMENT:              AND KSC-CC-STATUS154 NOT = 'WL'
        ///COMMENT:                  MOVE WRK-PGM-TYP TO PRT-PGM-TYP (1)
        ///COMMENT:                  MOVE 'IN'        TO PRT-CD      (1)
        ///COMMENT:                  MOVE WRK-BEG-DT  TO PRT-BEG-DT  (1)
        ///COMMENT:                  MOVE 20991231    TO PRT-END-DT  (1)
        ///COMMENT:              END-IF
        ///COMMENT:          END-IF
        ///COMMENT:          PERFORM 8800-GET-NXT-KSC
        ///COMMENT:      END-IF.
        ///COMMENT: 6600-CHK-KSC-REC.
        ///COMMENT:      MOVE 'N' TO WRK-PRT-ERR-CHK.
        ///COMMENT:      IF  WRK-BEG-DT > WRK-CUR-DT
        ///COMMENT:          SET  WRK-PRT-ERR TO TRUE
        ///COMMENT:      ELSE
        ///COMMENT:          MOVE WRK-BEG-DT  TO WRK-CHK-DT
        ///COMMENT:          PERFORM 7000-CHK-VAL-DT
        ///COMMENT:      END-IF.
        ///COMMENT:      IF  NOT WRK-PRT-ERR
        ///COMMENT:          IF  WRK-END-DT NOT = WRK-OPN-DT
        ///COMMENT:          AND WRK-END-DT NOT = WRK-CUR-DT
        ///COMMENT:              SET WRK-PRT-ERR TO TRUE
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        ///COMMENT: 6800-EXT-KSC-REC.
        ///COMMENT:      ADD  1               TO Y.
        ///COMMENT:      MOVE PRT-PGM-TYP (1) TO PROGRAM-CODE-0003        (Y).
        ///COMMENT:      MOVE PRT-BEG-DT  (1) TO PROG-EFFECTIVE-DATE-0003 (Y).
        ///COMMENT:      MOVE PRT-END-DT  (1) TO PROGRAM-END-DATE-0003    (Y).
        /// </remarks>
        private void M_7000_CHK_VAL_DT(string returnMethod = "")
        {
            if (((((WS.WRK_VAL_CC.Value)
             && (WS.WRK_VAL_YY.Value))
             && (WS.WRK_VAL_MM.Value))
             && (WS.WRK_VAL_DD.Value))
             && (WS.WRK_CHK_CY.IsLessThanOrEqualTo(WS.WRK_MAX_CY)))  //COBOL==> IF WRK-VAL-CC AND WRK-VAL-YY AND WRK-VAL-MM AND WRK-VAL-DD AND WRK-CHK-CY <= WRK-MAX-CY
            {
                if (WS.WRK_VAL_MM_30.Value)                                                                         //COBOL==> IF WRK-VAL-MM-30
                {
                    if (WS.WRK_CHK_DD.IsGreaterThan(30))                                                                //COBOL==> IF WRK-CHK-DD > 30
                    {
                        WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.WRK_CHK_MM.IsEqualTo(2))                                                                     //COBOL==> IF WRK-CHK-MM = 2
                    {
                        WS.WRK_DIV.SetValue(WS.WRK_CHK_CY.AsDecimal() / 4m);                                                //COBOL==> DIVIDE WRK-CHK-CY BY 4 GIVING WRK-DIV REMAINDER WRK-REM
                        WS.WRK_REM.SetValue(WS.WRK_CHK_CY.AsDecimal() % 4m);
                        //                                                                                                  //COBOL==> END-DIVIDE
                        if ((WS.WRK_REM.IsGreaterThan(0))
             && (WS.WRK_CHK_DD.IsGreaterThan(28)))             //COBOL==> IF WRK-REM > 0 AND WRK-CHK-DD > 28
                        {
                            WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WRK_PRT_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-PRT-ERR TO TRUE
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_7000_CHK_VAL_DT") { M_7000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7000_EXIT
        /// </summary>
        private void M_7000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7000_EXIT") { M_9000_CHK_REQ_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9000_CHK_REQ_REC
        /// </summary>
        /// <remarks>
        ///COMMENT: 8000-GET-FST-PRT.
        ///COMMENT:      MOVE WRK-CLT-NBR TO V-CLIENT-NUMBER161.
        ///COMMENT:      MOVE SPACES      TO V-PROGRAM-TYPE161.
        ///COMMENT:      MOVE ZERO        TO V-PART-START-DATE161.
        ///COMMENT:      MOVE SPACES      TO V-CASE-NUMBER161.
        ///COMMENT:      @READLOGICAL161 FIRST.
        ///COMMENT:      IF  RESPONSE-CODE161 = 0
        ///COMMENT:          IF  CLIENT-NUMBER161 = WRK-CLT-NBR
        ///COMMENT:              PERFORM 2000-TBL-WRK-PRT THRU 2000-EXIT
        ///COMMENT:          ELSE
        ///COMMENT:              SET WRK-PRT-CMP TO TRUE
        ///COMMENT:          END-IF
        ///COMMENT:      ELSE
        ///COMMENT:          IF  EOF161
        ///COMMENT:              SET  WRK-PRT-CMP      TO TRUE
        ///COMMENT:          ELSE
        ///COMMENT:              SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:              SET  WRK-RLF-ERR      TO TRUE
        ///COMMENT:              MOVE RESPONSE-CODE161 TO WRK-ADA-CD
        ///COMMENT:              MOVE 161              TO WRK-ADA-NBR
        ///COMMENT:              PERFORM 9800-END-PGM
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        ///COMMENT: 8000-EXIT. EXIT.
        ///COMMENT: 8200-GET-NXT-PRT.
        ///COMMENT:      @READLOGICAL161.
        ///COMMENT:      IF  RESPONSE-CODE161 = 0
        ///COMMENT:          IF  CLIENT-NUMBER161 = WRK-CLT-NBR
        ///COMMENT:              PERFORM 2000-TBL-WRK-PRT THRU 2000-EXIT
        ///COMMENT:          ELSE
        ///COMMENT:              SET WRK-PRT-EOF TO TRUE
        ///COMMENT:          END-IF
        ///COMMENT:      ELSE
        ///COMMENT:          IF  EOF161
        ///COMMENT:              SET  WRK-PRT-EOF      TO TRUE
        ///COMMENT:          ELSE
        ///COMMENT:              SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:              SET  WRK-RLN-ERR      TO TRUE
        ///COMMENT:              MOVE RESPONSE-CODE161 TO WRK-ADA-CD
        ///COMMENT:              MOVE 161              TO WRK-ADA-NBR
        ///COMMENT:              PERFORM 9800-END-PGM
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        ///COMMENT: 8200-EXIT. EXIT.
        ///COMMENT: 8400-GET-CLT-REC.
        ///COMMENT:      MOVE 'N' TO WRK-CLT-FND-CHK.
        ///COMMENT:      @READISN154 ISN = WRK-CLT-NBR.
        ///COMMENT:      IF  RESPONSE-CODE154 = 0
        ///COMMENT:          IF  CLIENT-NUMBER154 = WRK-CLT-NBR
        ///COMMENT:              SET WRK-CLT-FND TO TRUE
        ///COMMENT:          END-IF
        ///COMMENT:      ELSE
        ///COMMENT:          SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:          SET  WRK-RIN-ERR      TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODE154 TO WRK-ADA-CD
        ///COMMENT:          MOVE 154              TO WRK-ADA-NBR
        ///COMMENT:          PERFORM 9800-END-PGM
        ///COMMENT:      END-IF.
        ///COMMENT: 8400-EXIT. EXIT.
        ///COMMENT: ***************************************************************
        ///COMMENT:  FOLLOWING CALL REMOVED FOR KEES PHASE 3.
        ///COMMENT:  MAT
        ///COMMENT: ***************************************************************
        ///COMMENT: 8600-GET-FST-KSC.
        ///COMMENT:      MOVE WRK-CLT-NBR TO V-CLIENT-ID113.
        ///COMMENT:      MOVE 'CC'        TO V-PGM-TYPE113.
        ///COMMENT:      MOVE SPACES      TO V-KESSEP-TIME-STMP113.
        ///COMMENT:      @READLOGICAL113 FIRST.
        ///COMMENT:      IF  RESPONSE-CODE113 = 0
        ///COMMENT:          IF  CLIENT-ID113 = WRK-CLT-NBR
        ///COMMENT:          AND PGM-TYPE113  = 'CC'
        ///COMMENT:              PERFORM 6200-TBL-WRK-KSC
        ///COMMENT:          ELSE
        ///COMMENT:              SET WRK-PRT-CMP TO TRUE
        ///COMMENT:          END-IF
        ///COMMENT:      ELSE
        ///COMMENT:          IF  EOF113
        ///COMMENT:              SET  WRK-PRT-CMP      TO TRUE
        ///COMMENT:          ELSE
        ///COMMENT:              SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:              SET  WRK-RLF-ERR      TO TRUE
        ///COMMENT:              MOVE RESPONSE-CODE113 TO WRK-ADA-CD
        ///COMMENT:              MOVE 113              TO WRK-ADA-NBR
        ///COMMENT:              PERFORM 9800-END-PGM
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        ///COMMENT: 8800-GET-NXT-KSC.
        ///COMMENT:      @READLOGICAL113.
        ///COMMENT:      IF  RESPONSE-CODE113 = 0
        ///COMMENT:          IF  CLIENT-ID113 = WRK-CLT-NBR
        ///COMMENT:          AND PGM-TYPE113  = 'CC'
        ///COMMENT:              PERFORM 6200-TBL-WRK-KSC THRU 6200-EXIT
        ///COMMENT:          ELSE
        ///COMMENT:              SET WRK-PRT-EOF TO TRUE
        ///COMMENT:          END-IF
        ///COMMENT:      ELSE
        ///COMMENT:          IF  EOF113
        ///COMMENT:              SET  WRK-PRT-EOF      TO TRUE
        ///COMMENT:          ELSE
        ///COMMENT:              SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:              SET  WRK-RLN-ERR      TO TRUE
        ///COMMENT:              MOVE RESPONSE-CODE113 TO WRK-ADA-CD
        ///COMMENT:              MOVE 113              TO WRK-ADA-NBR
        ///COMMENT:              PERFORM 9800-END-PGM
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        ///COMMENT: 8800-EXIT. EXIT.
        ///COMMENT: * 8/4/17 - REVISED REQUEST TABLE UPDATE LOGIC BELOW
        /// </remarks>
        private void M_9000_CHK_REQ_REC(string returnMethod = "")
        {
            WS.DBK1_CLIENT_NUMBER.SetValue(WS.WRK_CLT_NBR);                                                     //COBOL==> MOVE WRK-CLT-NBR TO DBK1-CLIENT-NUMBER.
            DbConv.ExecuteSqlQueryWithUR("SELECT PROGRAM_KEY INTO {0} FROM KSD_PERSON_PGM_REQ WHERE FK_CLB_CLIENT_NO = {1} ",  //COBOL==> EXEC SQL SELECT PROGRAM_KEY INTO :PRPGMREQ-PROGRAM-KEY FROM KSD_PERSON_PGM_REQ WHERE FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER WITH UR END-EXEC.
                                 WS.PRPGMREQ_PROGRAM_KEY, WS.DBK1_CLIENT_NUMBER);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                M_9300_UPD_REQ_REC("M_9300_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 9300-UPD-REQ-REC THRU 9300-EXIT
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                M_9400_ADD_REQ_REC("M_9400_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 9400-ADD-REQ-REC THRU 9400-EXIT
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_RLF_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-RLF-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(043);                                                                       //COBOL==> MOVE 043 TO WRK-ADA-NBR
                M_9800_END_PGM(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM 9800-END-PGM
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_9000_CHK_REQ_REC") { M_9000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9000_EXIT
        /// </summary>
        private void M_9000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_9000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9000_EXIT") { M_9300_UPD_REQ_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9300_UPD_REQ_REC
        /// </summary>
        private void M_9300_UPD_REQ_REC(string returnMethod = "")
        {
            //COMMENT:     IF SUBSTR(PRPGMREQ-PROGRAM-KEY,1,4) = 'HIST'
            if (WS.PRPGMREQ_PROGRAM_KEY.GetSubstring(1, 4).IsEqualTo("HIST"))                                   //COBOL==> IF PRPGMREQ-PROGRAM-KEY ( 1:4 ) = 'HIST'
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PRPGMREQ_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                         //COBOL==> EXEC CICS ASSIGN USERID ( PRPGMREQ-LAST-MODIFIED-BY ) END-EXEC
                WS.PRPGMREQ_PROGRAM_KEY.SetValue("HIST");                                                           //COBOL==> MOVE 'HIST' TO PRPGMREQ-PROGRAM-KEY
                DbConv.ExecuteSql("UPDATE KSD_PERSON_PGM_REQ SET PROGRAM_KEY = {0},  LAST_MODIFIED_BY = {1},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE FK_CLB_CLIENT_NO = {2}", WS.PRPGMREQ_PROGRAM_KEY, WS.PRPGMREQ_LAST_MODIFIED_BY, WS.DBK1_CLIENT_NUMBER);  //COBOL==> EXEC SQL UPDATE KSD_PERSON_PGM_REQ SET PROGRAM_KEY = :PRPGMREQ-PROGRAM-KEY , LAST_MODIFIED_BY = :PRPGMREQ-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER END-EXEC
                                                                                                                                                                                                                                                                    // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
                if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                //COBOL==> WHEN OTHER
                else
                {
                    WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                    WS.WRK_UPD_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-UPD-ERR TO TRUE
                    WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                    WS.WRK_ADA_NBR.SetValue(043);                                                                       //COBOL==> MOVE 043 TO WRK-ADA-NBR
                    M_9800_END_PGM(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM 9800-END-PGM
                }                                                                                                   //COBOL==> END-EVALUATE
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_9300_UPD_REQ_REC") { M_9300_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9300_EXIT
        /// </summary>
        private void M_9300_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_9300_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9300_EXIT") { M_9400_ADD_REQ_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9400_ADD_REQ_REC
        /// </summary>
        private void M_9400_ADD_REQ_REC(string returnMethod = "")
        {
            WS.PRPGMREQ_FK_CLB_CLIENT_NO.SetValue(WS.DBK1_CLIENT_NUMBER);                                       //COBOL==> MOVE DBK1-CLIENT-NUMBER TO PRPGMREQ-FK-CLB-CLIENT-NO.
            WS.PRPGMREQ_CREATED_BY.SetValue(Control.GetUserID());                                               //COBOL==> EXEC CICS ASSIGN USERID ( PRPGMREQ-CREATED-BY ) END-EXEC.
            WS.PRPGMREQ_LAST_MODIFIED_BY.SetValue(WS.PRPGMREQ_CREATED_BY);                                      //COBOL==> MOVE PRPGMREQ-CREATED-BY TO PRPGMREQ-LAST-MODIFIED-BY.
            WS.PRPGMREQ_PROGRAM_KEY.SetValue("HIST");                                                           //COBOL==> MOVE 'HIST' TO PRPGMREQ-PROGRAM-KEY.
            DbConv.ExecuteSql("INSERT INTO KSD_PERSON_PGM_REQ  ( PROGRAM_KEY , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO  ) VALUES  ( {0}, {1}, CURRENT_TIMESTAMP , {2}, CURRENT_TIMESTAMP , {3} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_PERSON_PGM_REQ ( PROGRAM_KEY , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO ) VALUES ( :PRPGMREQ-PROGRAM-KEY , :PRPGMREQ-CREATED-BY , CURRENT_TIMESTAMP , :PRPGMREQ-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :PRPGMREQ-FK-CLB-CLIENT-NO ) END-EXEC.
                                 WS.PRPGMREQ_PROGRAM_KEY, WS.PRPGMREQ_CREATED_BY, WS.PRPGMREQ_LAST_MODIFIED_BY, WS.PRPGMREQ_FK_CLB_CLIENT_NO);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_ADD_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADD-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(043);                                                                       //COBOL==> MOVE 043 TO WRK-ADA-NBR
                M_9800_END_PGM(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM 9800-END-PGM
                                                                                                                      //COMMENT:      END-IF.
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_9400_ADD_REQ_REC") { M_9400_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9400_EXIT
        /// </summary>
        private void M_9400_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_9400_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9400_EXIT") { M_9600_ERR_PGM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9600_ERR_PGM
        /// </summary>
        /// <remarks>
        ///COMMENT: 9000-CHK-REQ-REC.
        ///COMMENT:      MOVE WRK-CLT-NBR TO V-CLIENT-NUMBER043.
        ///COMMENT:      @READLOGICAL043 HOLD FIRST.
        ///COMMENT:      IF  RESPONSE-CODE043 = 0
        ///COMMENT:          IF  CLIENT-NUMBER043 = WRK-CLT-NBR
        ///COMMENT:              IF  PROGRAM-KEY043-1 = 'HIST'
        ///COMMENT:                  PERFORM 9200-REL-REQ-REC THRU 9200-EXIT
        ///COMMENT:              ELSE
        ///COMMENT:                  PERFORM 9300-UPD-REQ-REC THRU 9300-EXIT
        ///COMMENT:              END-IF
        ///COMMENT:          ELSE
        ///COMMENT:              PERFORM 9400-ADD-REQ-REC THRU 9400-EXIT
        ///COMMENT:          END-IF
        ///COMMENT:      ELSE
        ///COMMENT:          IF  EOF043
        ///COMMENT:              PERFORM 9400-ADD-REQ-REC THRU 9400-EXIT
        ///COMMENT:          ELSE
        ///COMMENT:              SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:              SET  WRK-RLF-ERR      TO TRUE
        ///COMMENT:              MOVE RESPONSE-CODE043 TO WRK-ADA-CD
        ///COMMENT:              MOVE 043              TO WRK-ADA-NBR
        ///COMMENT:              PERFORM 9800-END-PGM
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        ///COMMENT: 9000-EXIT. EXIT.
        ///COMMENT: 9200-REL-REQ-REC.
        ///COMMENT:      @RELISN161.
        ///COMMENT:      IF  RESPONSE-CODE043 > 0
        ///COMMENT:          SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:          SET  WRK-REL-ERR      TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODE043 TO WRK-ADA-CD
        ///COMMENT:          MOVE 043              TO WRK-ADA-NBR
        ///COMMENT:          PERFORM 9800-END-PGM
        ///COMMENT:      END-IF.
        ///COMMENT:      PERFORM 9500-END-REQ-REC THRU 9500-EXIT.
        ///COMMENT: 9200-EXIT. EXIT.
        ///COMMENT: 9300-UPD-REQ-REC.
        ///COMMENT:      MOVE 'HIST' TO PROGRAM-KEY043-1.
        ///COMMENT:      @UPDATE043.
        ///COMMENT:      IF  RESPONSE-CODE043 > 0
        ///COMMENT:          SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:          SET  WRK-UPD-ERR      TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODE043 TO WRK-ADA-CD
        ///COMMENT:          MOVE 043              TO WRK-ADA-NBR
        ///COMMENT:          PERFORM 9800-END-PGM
        ///COMMENT:      END-IF.
        ///COMMENT:      PERFORM 9500-END-REQ-REC THRU 9500-EXIT.
        ///COMMENT: 9300-EXIT. EXIT.
        ///COMMENT: 9400-ADD-REQ-REC.
        ///COMMENT:      MOVE WRK-CLT-NBR TO CLIENT-NUMBER043.
        ///COMMENT:      MOVE 'HIST'      TO PROGRAM-KEY043-1.
        ///COMMENT:      @ADD043.
        ///COMMENT:      IF  RESPONSE-CODE043 > 0
        ///COMMENT:          SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:          SET  WRK-ADD-ERR      TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODE043 TO WRK-ADA-CD
        ///COMMENT:          MOVE 043              TO WRK-ADA-NBR
        ///COMMENT:          PERFORM 9800-END-PGM
        ///COMMENT:      END-IF.
        ///COMMENT:      PERFORM 9500-END-REQ-REC THRU 9500-EXIT.
        ///COMMENT: 9400-EXIT. EXIT.
        ///COMMENT: 9500-END-REQ-REC.
        ///COMMENT:      @END-TRANSACTION.
        ///COMMENT:      IF  RESPONSE-CODEOPN > 0
        ///COMMENT:          SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:          SET  WRK-END-ERR      TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODEOPN TO WRK-ADA-CD
        ///COMMENT:          PERFORM 9800-END-PGM
        ///COMMENT:      END-IF.
        ///COMMENT: 9500-EXIT. EXIT.
        /// </remarks>
        private void M_9600_ERR_PGM(string returnMethod = "")
        {
            WS.WRK_ENV_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ENV-ERR TO TRUE.
            WS.WRK_RES_NM.SetValue(Control.EIBRSRCE);                                                           //COBOL==> MOVE EIBRSRCE TO WRK-RES-NM.
            WS.WRK_FUN_CD.SetValue(Control.EIBFN);                                                              //COBOL==> MOVE EIBFN TO WRK-FUN-CD.
            WS.WRK_ERR_CD.SetValue(Control.EIBRCODE);                                                           //COBOL==> MOVE EIBRCODE TO WRK-ERR-CD.
            M_9800_END_PGM(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM 9800-END-PGM.
            if (returnMethod != "" && returnMethod != "M_9600_ERR_PGM") { M_9600_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9600_EXIT
        /// </summary>
        private void M_9600_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_9600_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9600_EXIT") { M_9800_END_PGM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9800_END_PGM
        /// </summary>
        private void M_9800_END_PGM(string returnMethod = "")
        {
            if ((WS.WRK_ADA_ERR.Value)
             || (WS.WRK_ENV_ERR.Value))                               //COBOL==> IF WRK-ADA-ERR OR WRK-ENV-ERR
            {
                LS.TYPE_0004.SetValue(WS.WRK_ERR_TYP);                                                              //COBOL==> MOVE WRK-ERR-TYP TO TYPE-0004
                LS.ADABAS_FILE_ACTION_0004.SetValue(WS.WRK_ADA_ACT);                                                //COBOL==> MOVE WRK-ADA-ACT TO ADABAS-FILE-ACTION-0004
                LS.ADABAS_FILE_NUMBER_0004.SetValue(WS.WRK_ADA_NBR);                                                //COBOL==> MOVE WRK-ADA-NBR TO ADABAS-FILE-NUMBER-0004
                LS.ADABAS_RESPONSE_CD_0004.SetValue(WS.WRK_ADA_CD);                                                 //COBOL==> MOVE WRK-ADA-CD TO ADABAS-RESPONSE-CD-0004
                LS.CICS_RESOURCE_NM_0004.SetValue(WS.WRK_RES_NM);                                                   //COBOL==> MOVE WRK-RES-NM TO CICS-RESOURCE-NM-0004
                LS.CICS_FUNCTION_CD_0004.SetValue(WS.WRK_FUN_CD);                                                   //COBOL==> MOVE WRK-FUN-CD TO CICS-FUNCTION-CD-0004
                LS.CICS_RESPONSE_CD_0004.SetValue(WS.WRK_ERR_CD);                                                   //COBOL==> MOVE WRK-ERR-CD TO CICS-RESPONSE-CD-0004
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: * 8/4/17 - COMMENTED OUT DISPLAYS
                                                                                                                //COMMENT:      DISPLAY "**** START SWEXIR50 *****"
                                                                                                                //COMMENT:      DISPLAY "INPUT  INFO. :" A-0726937748-IA
                                                                                                                //COMMENT:      DISPLAY "OUTPUT INFO. :" EXPORT-GROUP-0001RG
                                                                                                                //COMMENT:      DISPLAY "ABEND  INFO. :" ABEND-DATA-0004ET
                                                                                                                //COMMENT:      DISPLAY "****  END  SWEXIR50 *****"
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_0000_DATABASE_EXIT
        /// </summary>
        /// <remarks>
        ///COMMENT: 9800-EXIT. EXIT.
        /// </remarks>
        private void M_0000_DATABASE_EXIT(string returnMethod = "")
        {
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                LS.TYPE_0004.SetValue(WS.MV_ABEND_TYPE);                                                            //COBOL==> MOVE MV-ABEND-TYPE TO TYPE-0004
                LS.ADABAS_FILE_NUMBER_0004.SetValue(WS.MV_ADA_FILE_NUMBER);                                         //COBOL==> MOVE MV-ADA-FILE-NUMBER TO ADABAS-FILE-NUMBER-0004
                LS.ADABAS_FILE_ACTION_0004.SetValue(WS.MV_ADA_FILE_ACTION);                                         //COBOL==> MOVE MV-ADA-FILE-ACTION TO ADABAS-FILE-ACTION-0004
                LS.ADABAS_RESPONSE_CD_0004.SetValue(WS.MV_ADA_RESPONSE_CD);                                         //COBOL==> MOVE MV-ADA-RESPONSE-CD TO ADABAS-RESPONSE-CD-0004
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_0000_DATABASE_EXIT") { M_0000_EXITDuplicate1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_EXITDuplicate1
        /// </summary>
        /// <remarks>
        ///COMMENT: * 8/4/17 - COMMENTED OUT DISPLAYS
        ///COMMENT:     DISPLAY "**** START SWEXIR50 *****"
        ///COMMENT:     DISPLAY ABEND-DATA-0004ET
        ///COMMENT:     DISPLAY "****  END  SWEXIR50 *****".
        /// </remarks>
        private void M_0000_EXITDuplicate1(string returnMethod = "")
        {
            if (returnMethod == "M_0000_EXITDuplicate1") { return; }                                            //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_0000_EXITDuplicate1") { M_PARA_0726937745_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0726937745_EXIT
        /// </summary>
        private void M_PARA_0726937745_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0726937745_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_0726937745_EXIT") { M_PARA_0726937745_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0726937745_INIT
        /// </summary>
        private void M_PARA_0726937745_INIT(string returnMethod = "")
        {
            WS.EXPORT_GROUP_0001PS.SetValue(1);                                                                 //COBOL==> MOVE 1 TO EXPORT-GROUP-0001PS
            LS.EXPORT_GROUP_0001RG.ResetToInitialValue();                                                       //COBOL==> INITIALIZE EXPORT-GROUP-0001RG
            LS.S0849351691_0004EV.ResetToInitialValue();                                                        //COBOL==> INITIALIZE S0849351691-0004EV .
            if (returnMethod != "" && returnMethod != "M_PARA_0726937745_INIT") { M_PARA_0726937745_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0726937745_INIT_EXIT
        /// </summary>
        private void M_PARA_0726937745_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0726937745_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
