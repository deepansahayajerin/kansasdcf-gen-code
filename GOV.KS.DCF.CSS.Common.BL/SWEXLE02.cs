#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2021
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2021-12-07 03:21:49 PM
   **        *   FROM COBOL PGM   :  SWEXLE02
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   ***************************************************************
                       SOURCE CODE GENERATED BY
                              CA GEN R8
             COPYRIGHT (C) 2014 CA. ALL RIGHTS RESERVED.
       NAME: EXT_WRITE_SDSO_TO_TAPE           DATE: 2014/11/03
       TARGET OS:   MVS                       TIME: 17:02:01
       TARGET DBMS: DB2                       USER: SWSRGAV
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING NOT SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
       DYNAMIC LINK (Z/OS) USED BUS SYS DEFAULT OF "Yes"
   ***************************************************************
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.IO.Common;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
using MDSY.Framework.IO.Common;
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region File Section Class
    internal class SWEXLE02_fd : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string FileSection = "SWEXLE02_fd_FileSection";
            internal const string EXTFILE = "EXTFILE";
            internal const string EXTFILE_RECORD = "EXTFILE_RECORD";
            internal const string EXT_SDSO_INSERTS = "EXT_SDSO_INSERTS";
            internal const string EXT_CA_NUMBER = "EXT_CA_NUMBER";
            internal const string EXT_DEBTOR_ID_CODE = "EXT_DEBTOR_ID_CODE";
            internal const string EXT_SSN = "EXT_SSN";
            internal const string EXT_FIRST_NAME = "EXT_FIRST_NAME";
            internal const string EXT_MIDDLE_INITIAL = "EXT_MIDDLE_INITIAL";
            internal const string EXT_LAST_NAME = "EXT_LAST_NAME";
            internal const string EXT_ACCOUNT_ID_CODE = "EXT_ACCOUNT_ID_CODE";
            internal const string EXT_ACCOUNT_ID_NUMBER = "EXT_ACCOUNT_ID_NUMBER";
            internal const string EXT_DEBT_CODE_TYPE = "EXT_DEBT_CODE_TYPE";
            internal const string EXT_DEBT_DESCRIPTION = "EXT_DEBT_DESCRIPTION";
            internal const string EXT_DEBT_AMOUNT = "EXT_DEBT_AMOUNT";
            internal const string EXT_FILLER = "EXT_FILLER";
            internal const string EXT_KS_DL_NUMBER = "EXT_KS_DL_NUMBER";
            internal const string TEMPFILE = "TEMPFILE";
            internal const string TEMPFILE_RECORD = "TEMPFILE_RECORD";
        }
        #endregion

        #region Direct-access element properties
        public IFileLink EXTFILE { get; set; }
        public IGroup EXTFILE_RECORD { get { return GetElementByName<IGroup>(Names.EXTFILE_RECORD); } }
        public IGroup EXT_SDSO_INSERTS { get { return GetElementByName<IGroup>(Names.EXT_SDSO_INSERTS); } }
        public IField EXT_CA_NUMBER { get { return GetElementByName<IField>(Names.EXT_CA_NUMBER); } }
        public IField EXT_DEBTOR_ID_CODE { get { return GetElementByName<IField>(Names.EXT_DEBTOR_ID_CODE); } }
        public IField EXT_SSN { get { return GetElementByName<IField>(Names.EXT_SSN); } }
        public IField EXT_FIRST_NAME { get { return GetElementByName<IField>(Names.EXT_FIRST_NAME); } }
        public IField EXT_MIDDLE_INITIAL { get { return GetElementByName<IField>(Names.EXT_MIDDLE_INITIAL); } }
        public IField EXT_LAST_NAME { get { return GetElementByName<IField>(Names.EXT_LAST_NAME); } }
        public IField EXT_ACCOUNT_ID_CODE { get { return GetElementByName<IField>(Names.EXT_ACCOUNT_ID_CODE); } }
        public IField EXT_ACCOUNT_ID_NUMBER { get { return GetElementByName<IField>(Names.EXT_ACCOUNT_ID_NUMBER); } }
        public IField EXT_DEBT_CODE_TYPE { get { return GetElementByName<IField>(Names.EXT_DEBT_CODE_TYPE); } }
        public IField EXT_DEBT_DESCRIPTION { get { return GetElementByName<IField>(Names.EXT_DEBT_DESCRIPTION); } }
        public IField EXT_DEBT_AMOUNT { get { return GetElementByName<IField>(Names.EXT_DEBT_AMOUNT); } }
        public IField EXT_FILLER { get { return GetElementByName<IField>(Names.EXT_FILLER); } }
        public IField EXT_KS_DL_NUMBER { get { return GetElementByName<IField>(Names.EXT_KS_DL_NUMBER); } }
        public IFileLink TEMPFILE { get; set; }
        public IField TEMPFILE_RECORD { get { return GetElementByName<IField>(Names.TEMPFILE_RECORD); } }


        internal SWEXLE02_ws WS;
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the FileSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.EXTFILE_RECORD, (EXTFILE_RECORD) =>
           {
               EXTFILE_RECORD.CreateNewGroup(Names.EXT_SDSO_INSERTS, (EXT_SDSO_INSERTS) =>
               {
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_CA_NUMBER, FieldType.String, 11);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_DEBTOR_ID_CODE, FieldType.String, 1);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_SSN, FieldType.UnsignedNumeric, 9);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_FIRST_NAME, FieldType.String, 35);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_MIDDLE_INITIAL, FieldType.String, 1);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_LAST_NAME, FieldType.String, 35);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_ACCOUNT_ID_CODE, FieldType.String, 1);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_ACCOUNT_ID_NUMBER, FieldType.String, 18);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_DEBT_CODE_TYPE, FieldType.String, 1);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_DEBT_DESCRIPTION, FieldType.String, 30);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_DEBT_AMOUNT, FieldType.UnsignedNumeric, 13, null, 2);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_FILLER, FieldType.String, 12);
                   EXT_SDSO_INSERTS.CreateNewField(Names.EXT_KS_DL_NUMBER, FieldType.String, 15);
               });
           });
            recordDef.CreateNewField(Names.TEMPFILE_RECORD, FieldType.String, 182);

        }

        protected override string GetRecordName()
        {
            return Names.FileSection;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            IFileHandler FileHandler = InversionContainer.GetImplementingObject<IFileHandler>();

            EXTFILE = FileHandler.GetFile("EXTFILE1");
            EXTFILE.StatusField = WS.EXTFILE_STAT;
            EXTFILE.AssociatedBuffer = EXTFILE_RECORD;
            EXTFILE.RecordLength = 182;

            TEMPFILE = FileHandler.GetFile("TEMPFILE");
            TEMPFILE.StatusField = WS.TEMPFILE_STAT;
            TEMPFILE.AssociatedBuffer = TEMPFILE_RECORD;
            TEMPFILE.RecordLength = 182;
        }
        #endregion

        #region Constructors
        public SWEXLE02_fd(SWEXLE02_ws ws)
            : base()
        {
            this.WS = ws;
            Initialize();

        }
        #endregion
    }
    #endregion File Section Class
    #region Working Storage Class
    internal class SWEXLE02_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXLE02_ws_WorkingStorage";
            internal const string EXTFILE_STAT = "EXTFILE_STAT";
            internal const string TEMPFILE_STAT = "TEMPFILE_STAT";
            internal const string EXTFILE_SWITCHES = "EXTFILE_SWITCHES";
            internal const string NO_MORE_RECORDS_SWITCH = "NO_MORE_RECORDS_SWITCH";
            internal const string NO_MORE_RECORDS = "NO_MORE_RECORDS";
            internal const string EXT_SDSO_INSERTS_WS = "EXT_SDSO_INSERTS_WS";
            internal const string EXT_CA_NUMBER_WS = "EXT_CA_NUMBER_WS";
            internal const string EXT_DEBTOR_ID_CODE_WS = "EXT_DEBTOR_ID_CODE_WS";
            internal const string EXT_SSN_WS = "EXT_SSN_WS";
            internal const string EXT_FIRST_NAME_WS = "EXT_FIRST_NAME_WS";
            internal const string EXT_MIDDLE_INITIAL_WS = "EXT_MIDDLE_INITIAL_WS";
            internal const string EXT_LAST_NAME_WS = "EXT_LAST_NAME_WS";
            internal const string EXT_ACCOUNT_ID_CODE_WS = "EXT_ACCOUNT_ID_CODE_WS";
            internal const string EXT_ACCOUNT_ID_NUMBER_WS = "EXT_ACCOUNT_ID_NUMBER_WS";
            internal const string EXT_DEBT_CODE_TYPE_WS = "EXT_DEBT_CODE_TYPE_WS";
            internal const string EXT_DEBT_DESCRIPTION_WS = "EXT_DEBT_DESCRIPTION_WS";
            internal const string EXT_DEBT_AMOUNT_WS = "EXT_DEBT_AMOUNT_WS";
            internal const string EXT_DEBT_AMT_DOLLARS = "EXT_DEBT_AMT_DOLLARS";
            internal const string EXT_DEBT_AMT_CENTS = "EXT_DEBT_AMT_CENTS";
            internal const string EXT_FILLER_WS = "EXT_FILLER_WS";
            internal const string EXT_KS_DL_NUMBER_WS = "EXT_KS_DL_NUMBER_WS";
            internal const string FUNC_0645148408_ESC_FLAG = "FUNC_0645148408_ESC_FLAG";
        }
        #endregion

        #region Direct-access element properties
        public IField EXTFILE_STAT { get { return GetExternalElementByName<IField>(Names.EXTFILE_STAT); } }
        public IField TEMPFILE_STAT { get { return GetExternalElementByName<IField>(Names.TEMPFILE_STAT); } }
        public IGroup EXTFILE_SWITCHES { get { return GetElementByName<IGroup>(Names.EXTFILE_SWITCHES); } }
        public IField NO_MORE_RECORDS_SWITCH { get { return GetElementByName<IField>(Names.NO_MORE_RECORDS_SWITCH); } }
        public ICheckField NO_MORE_RECORDS { get { return GetElementByName<ICheckField>(Names.NO_MORE_RECORDS); } }
        public IGroup EXT_SDSO_INSERTS_WS { get { return GetElementByName<IGroup>(Names.EXT_SDSO_INSERTS_WS); } }
        public IField EXT_CA_NUMBER_WS { get { return GetElementByName<IField>(Names.EXT_CA_NUMBER_WS); } }
        public IField EXT_DEBTOR_ID_CODE_WS { get { return GetElementByName<IField>(Names.EXT_DEBTOR_ID_CODE_WS); } }
        public IField EXT_SSN_WS { get { return GetElementByName<IField>(Names.EXT_SSN_WS); } }
        public IField EXT_FIRST_NAME_WS { get { return GetElementByName<IField>(Names.EXT_FIRST_NAME_WS); } }
        public IField EXT_MIDDLE_INITIAL_WS { get { return GetElementByName<IField>(Names.EXT_MIDDLE_INITIAL_WS); } }
        public IField EXT_LAST_NAME_WS { get { return GetElementByName<IField>(Names.EXT_LAST_NAME_WS); } }
        public IField EXT_ACCOUNT_ID_CODE_WS { get { return GetElementByName<IField>(Names.EXT_ACCOUNT_ID_CODE_WS); } }
        public IField EXT_ACCOUNT_ID_NUMBER_WS { get { return GetElementByName<IField>(Names.EXT_ACCOUNT_ID_NUMBER_WS); } }
        public IField EXT_DEBT_CODE_TYPE_WS { get { return GetElementByName<IField>(Names.EXT_DEBT_CODE_TYPE_WS); } }
        public IField EXT_DEBT_DESCRIPTION_WS { get { return GetElementByName<IField>(Names.EXT_DEBT_DESCRIPTION_WS); } }
        public IField EXT_DEBT_AMOUNT_WS { get { return GetElementByName<IField>(Names.EXT_DEBT_AMOUNT_WS); } }
        public IField EXT_DEBT_AMT_DOLLARS { get { return GetElementByName<IField>(Names.EXT_DEBT_AMT_DOLLARS); } }
        public IField EXT_DEBT_AMT_CENTS { get { return GetElementByName<IField>(Names.EXT_DEBT_AMT_CENTS); } }
        public IField EXT_FILLER_WS { get { return GetElementByName<IField>(Names.EXT_FILLER_WS); } }
        public IField EXT_KS_DL_NUMBER_WS { get { return GetElementByName<IField>(Names.EXT_KS_DL_NUMBER_WS); } }
        public IField FUNC_0645148408_ESC_FLAG { get { return GetElementByName<IField>(Names.FUNC_0645148408_ESC_FLAG); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            WsExternals.Instance.CreateNewField(Names.EXTFILE_STAT, FieldType.UnsignedNumeric, 2);
            WsExternals.Instance.CreateNewField(Names.TEMPFILE_STAT, FieldType.UnsignedNumeric, 2);

            recordDef.CreateNewGroup(Names.EXTFILE_SWITCHES, (EXTFILE_SWITCHES) =>
           {
               EXTFILE_SWITCHES.CreateNewField(Names.NO_MORE_RECORDS_SWITCH, FieldType.String, 1)
                   .NewCheckField(Names.NO_MORE_RECORDS, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.EXT_SDSO_INSERTS_WS, (EXT_SDSO_INSERTS_WS) =>
           {
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_CA_NUMBER_WS, FieldType.String, 11);
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_DEBTOR_ID_CODE_WS, FieldType.String, 1);
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_SSN_WS, FieldType.UnsignedNumeric, 9);
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_FIRST_NAME_WS, FieldType.String, 35);
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_MIDDLE_INITIAL_WS, FieldType.String, 1);
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_LAST_NAME_WS, FieldType.String, 35);
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_ACCOUNT_ID_CODE_WS, FieldType.String, 1);
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_ACCOUNT_ID_NUMBER_WS, FieldType.String, 18);
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_DEBT_CODE_TYPE_WS, FieldType.String, 1);
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_DEBT_DESCRIPTION_WS, FieldType.String, 30);

               IField EXT_DEBT_AMOUNT_WS_local = EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_DEBT_AMOUNT_WS, FieldType.UnsignedNumeric, 13);
               EXT_SDSO_INSERTS_WS.CreateNewGroupRedefine("FILLER", EXT_DEBT_AMOUNT_WS_local, (FILLER) =>
               {
                   FILLER.CreateNewField(Names.EXT_DEBT_AMT_DOLLARS, FieldType.UnsignedNumeric, 11);
                   FILLER.CreateNewField(Names.EXT_DEBT_AMT_CENTS, FieldType.UnsignedNumeric, 2);
               });
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_FILLER_WS, FieldType.String, 12);
               EXT_SDSO_INSERTS_WS.CreateNewField(Names.EXT_KS_DL_NUMBER_WS, FieldType.String, 15);
           });
            recordDef.CreateNewField(Names.FUNC_0645148408_ESC_FLAG, FieldType.String, 1);

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXLE02_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXLE02_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_0298648849_IA = "A_0298648849_IA";
            internal const string IMPORT_0001EV = "IMPORT_0001EV";
            internal const string EXTERNAL_0001ET = "EXTERNAL_0001ET";
            internal const string FILE_INSTRUCTION_0001AS = "FILE_INSTRUCTION_0001AS";
            internal const string FILE_INSTRUCTION_0001 = "FILE_INSTRUCTION_0001";
            internal const string FILE_INSTRUCTION_0001XX = "FILE_INSTRUCTION_0001XX";
            internal const string IMPORT_0002EV = "IMPORT_0002EV";
            internal const string SDSO_CERTIFICATION_TAPE_0002ET = "SDSO_CERTIFICATION_TAPE_0002ET";
            internal const string CERTIFICATION_RECORD_0002AS = "CERTIFICATION_RECORD_0002AS";
            internal const string CERTIFICATION_RECORD_0002 = "CERTIFICATION_RECORD_0002";
            internal const string CERTIFICATION_RECORD_0002XX = "CERTIFICATION_RECORD_0002XX";
            internal const string W_OA = "W_OA";
            internal const string A_0298648851_OA = "A_0298648851_OA";
            internal const string EXPORT_0003EV = "EXPORT_0003EV";
            internal const string EXTERNAL_0003ET = "EXTERNAL_0003ET";
            internal const string NUMERIC_RETURN_CODE_0003AS = "NUMERIC_RETURN_CODE_0003AS";
            internal const string NUMERIC_RETURN_CODE_0003 = "NUMERIC_RETURN_CODE_0003";
            internal const string NUMERIC_RETURN_CODE_0003XX = "NUMERIC_RETURN_CODE_0003XX";
            internal const string TEXT_RETURN_CODE_0003AS = "TEXT_RETURN_CODE_0003AS";
            internal const string TEXT_RETURN_CODE_0003 = "TEXT_RETURN_CODE_0003";
            internal const string TEXT_RETURN_CODE_0003XX = "TEXT_RETURN_CODE_0003XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_0298648849_IA { get { return GetElementByName<IGroup>(Names.A_0298648849_IA); } }
        public IGroup IMPORT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_0001EV); } }
        public IGroup EXTERNAL_0001ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0001ET); } }
        public IField FILE_INSTRUCTION_0001AS { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0001AS); } }
        public IField FILE_INSTRUCTION_0001 { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0001); } }
        public IField FILE_INSTRUCTION_0001XX { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0001XX); } }
        public IGroup IMPORT_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_0002EV); } }
        public IGroup SDSO_CERTIFICATION_TAPE_0002ET { get { return GetElementByName<IGroup>(Names.SDSO_CERTIFICATION_TAPE_0002ET); } }
        public IField CERTIFICATION_RECORD_0002AS { get { return GetElementByName<IField>(Names.CERTIFICATION_RECORD_0002AS); } }
        public IField CERTIFICATION_RECORD_0002 { get { return GetElementByName<IField>(Names.CERTIFICATION_RECORD_0002); } }
        public IField CERTIFICATION_RECORD_0002XX { get { return GetElementByName<IField>(Names.CERTIFICATION_RECORD_0002XX); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_0298648851_OA { get { return GetElementByName<IGroup>(Names.A_0298648851_OA); } }
        public IGroup EXPORT_0003EV { get { return GetElementByName<IGroup>(Names.EXPORT_0003EV); } }
        public IGroup EXTERNAL_0003ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0003ET); } }
        public IField NUMERIC_RETURN_CODE_0003AS { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0003AS); } }
        public IField NUMERIC_RETURN_CODE_0003 { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0003); } }
        public IField NUMERIC_RETURN_CODE_0003XX { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0003XX); } }
        public IField TEXT_RETURN_CODE_0003AS { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0003AS); } }
        public IField TEXT_RETURN_CODE_0003 { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0003); } }
        public IField TEXT_RETURN_CODE_0003XX { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0003XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_0298648849_IA, (A_0298648849_IA) =>
               {
                   A_0298648849_IA.CreateNewGroup(Names.IMPORT_0001EV, (IMPORT_0001EV) =>
                   {
                       IMPORT_0001EV.CreateNewGroup(Names.EXTERNAL_0001ET, (EXTERNAL_0001ET) =>
                       {
                           EXTERNAL_0001ET.CreateNewField(Names.FILE_INSTRUCTION_0001AS, FieldType.String, 1);

                           IField FILE_INSTRUCTION_0001_local = EXTERNAL_0001ET.CreateNewField(Names.FILE_INSTRUCTION_0001, FieldType.String, 10);
                           EXTERNAL_0001ET.CreateNewFieldRedefine(Names.FILE_INSTRUCTION_0001XX, FieldType.String, FILE_INSTRUCTION_0001_local, 10);
                       });
                   });
                   A_0298648849_IA.CreateNewGroup(Names.IMPORT_0002EV, (IMPORT_0002EV) =>
                   {
                       IMPORT_0002EV.CreateNewGroup(Names.SDSO_CERTIFICATION_TAPE_0002ET, (SDSO_CERTIFICATION_TAPE_0002ET) =>
                       {
                           SDSO_CERTIFICATION_TAPE_0002ET.CreateNewField(Names.CERTIFICATION_RECORD_0002AS, FieldType.String, 1);

                           IField CERTIFICATION_RECORD_0002_local = SDSO_CERTIFICATION_TAPE_0002ET.CreateNewField(Names.CERTIFICATION_RECORD_0002, FieldType.String, 182);
                           SDSO_CERTIFICATION_TAPE_0002ET.CreateNewFieldRedefine(Names.CERTIFICATION_RECORD_0002XX, FieldType.String, CERTIFICATION_RECORD_0002_local, 182);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_0298648851_OA, (A_0298648851_OA) =>
               {
                   A_0298648851_OA.CreateNewGroup(Names.EXPORT_0003EV, (EXPORT_0003EV) =>
                   {
                       EXPORT_0003EV.CreateNewGroup(Names.EXTERNAL_0003ET, (EXTERNAL_0003ET) =>
                       {
                           EXTERNAL_0003ET.CreateNewField(Names.NUMERIC_RETURN_CODE_0003AS, FieldType.String, 1);

                           IField NUMERIC_RETURN_CODE_0003_local = EXTERNAL_0003ET.CreateNewField(Names.NUMERIC_RETURN_CODE_0003, FieldType.SignedNumeric, 2);
                           EXTERNAL_0003ET.CreateNewFieldRedefine(Names.NUMERIC_RETURN_CODE_0003XX, FieldType.String, NUMERIC_RETURN_CODE_0003_local, 2);
                           EXTERNAL_0003ET.CreateNewField(Names.TEXT_RETURN_CODE_0003AS, FieldType.String, 1);

                           IField TEXT_RETURN_CODE_0003_local = EXTERNAL_0003ET.CreateNewField(Names.TEXT_RETURN_CODE_0003, FieldType.String, 2);
                           EXTERNAL_0003ET.CreateNewFieldRedefine(Names.TEXT_RETURN_CODE_0003XX, FieldType.String, TEXT_RETURN_CODE_0003_local, 2);
                       });
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(W_IA, args, 2);
            SetPassedParm(W_OA, args, 3);
            SetPassedParm(PSMGR_EAB_DATA, args, 4);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(W_IA, args, 2);
            SetReturnParm(W_OA, args, 3);
            SetReturnParm(PSMGR_EAB_DATA, args, 4);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXLE02 : EABBase
    {

        #region Public Constructors
        public SWEXLE02()
            : base()
        {
            this.ProgramName.SetValue("SWEXLE02");

            WS = new SWEXLE02_ws();
            FD = new SWEXLE02_fd(WS);
            LS = new SWEXLE02_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXLE02_ws WS;

        //==== File Data Class ========================================
        private SWEXLE02_fd FD;

        //==== Linkage Section Data Class ========================================
        private SWEXLE02_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_0298648157(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_0298648157
        /// </summary>
        private void M_MAIN_0298648157(string returnMethod = "")
        {
            M_PARA_0298648157_INIT("M_PARA_0298648157_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-0298648157-INIT THRU PARA-0298648157-INIT-EXIT
            M_PARA_0298648157("M_PARA_0298648157_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-0298648157 THRU PARA-0298648157-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_0298648157
        /// </summary>
        private void M_PARA_0298648157(string returnMethod = "")
        {
            if (returnMethod != "" && returnMethod != "M_PARA_0298648157") { M_1000_EAB_CODE_MAIN(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1000_EAB_CODE_MAIN
        /// </summary>
        /// <remarks>
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        /// </remarks>
        private void M_1000_EAB_CODE_MAIN(string returnMethod = "")
        {
            if (LS.FILE_INSTRUCTION_0001.IsEqualTo("OPEN"))                                                     //COBOL==> IF FILE-INSTRUCTION-0001 = 'OPEN'
            {
                M_1100_OPEN_FILES("M_1100_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 1100-OPEN-FILES THRU 1100-EXIT
                M_9999_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 9999-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (LS.FILE_INSTRUCTION_0001.IsEqualTo("EXTEND"))                                                   //COBOL==> IF FILE-INSTRUCTION-0001 = 'EXTEND'
            {
                M_1200_EXTEND_FILES("M_1200_EXIT"); if (Control.ExitProgram) { return; }                              //COBOL==> PERFORM 1200-EXTEND-FILES THRU 1200-EXIT
                M_9999_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 9999-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (LS.FILE_INSTRUCTION_0001.IsEqualTo("WRITE"))                                                    //COBOL==> IF FILE-INSTRUCTION-0001 = 'WRITE'
            {
                M_1300_WRITE_REC("M_1300_EXIT"); if (Control.ExitProgram) { return; }                                 //COBOL==> PERFORM 1300-WRITE-REC THRU 1300-EXIT
                M_9999_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 9999-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (LS.FILE_INSTRUCTION_0001.IsEqualTo("CLOSE"))                                                    //COBOL==> IF FILE-INSTRUCTION-0001 = 'CLOSE'
            {
                M_1400_CLOSE_FILES("M_1400_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 1400-CLOSE-FILES THRU 1400-EXIT
                M_9999_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 9999-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (LS.FILE_INSTRUCTION_0001.IsEqualTo("COMMIT"))                                                   //COBOL==> IF FILE-INSTRUCTION-0001 = 'COMMIT'
            {
                M_1500_COMMIT_FILE("M_1500_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 1500-COMMIT-FILE THRU 1500-EXIT
                M_9999_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 9999-EXIT
            }                                                                                                   //COBOL==> END-IF.
            LS.TEXT_RETURN_CODE_0003.SetValue("FN");                                                            //COBOL==> MOVE 'FN' TO TEXT-RETURN-CODE-0003
            LS.NUMERIC_RETURN_CODE_0003.SetValue(1);                                                            //COBOL==> MOVE 1 TO NUMERIC-RETURN-CODE-0003.
            M_9999_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 9999-EXIT.
        }
        /// <summary>
        /// Method M_1100_OPEN_FILES
        /// </summary>
        /// <remarks>
        ///COMMENT:    OPEN THE FILES
        /// </remarks>
        private void M_1100_OPEN_FILES(string returnMethod = "")
        {
            FD.TEMPFILE.OpenFile(FileAccessMode.Write);                                                         //COBOL==> OPEN OUTPUT TEMPFILE.
            if (!(WS.TEMPFILE_STAT.IsEqualTo(0)))                                                               //COBOL==> IF TEMPFILE-STAT NOT = 0
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("O1");                                                            //COBOL==> MOVE 'O1' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.TEMPFILE_STAT);                                             //COBOL==> MOVE TEMPFILE-STAT TO NUMERIC-RETURN-CODE-0003
                M_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1100-EXIT
            }                                                                                                   //COBOL==> END-IF.
            FD.EXTFILE.OpenFile(FileAccessMode.Write);                                                          //COBOL==> OPEN OUTPUT EXTFILE.
            if (!(WS.EXTFILE_STAT.IsEqualTo(0)))                                                                //COBOL==> IF EXTFILE-STAT NOT = 0
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("O2");                                                            //COBOL==> MOVE 'O2' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.EXTFILE_STAT);                                              //COBOL==> MOVE EXTFILE-STAT TO NUMERIC-RETURN-CODE-0003
                M_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1100-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1100_OPEN_FILES") { M_1100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1100_EXIT
        /// </summary>
        private void M_1100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1100_EXIT") { M_1200_EXTEND_FILES(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1200_EXTEND_FILES
        /// </summary>
        /// <remarks>
        ///COMMENT:    APPEND THE FILES
        /// </remarks>
        private void M_1200_EXTEND_FILES(string returnMethod = "")
        {
            FD.TEMPFILE.OpenFile(FileAccessMode.Write);                                                         //COBOL==> OPEN OUTPUT TEMPFILE.
            if (!(WS.TEMPFILE_STAT.IsEqualTo(0)))                                                               //COBOL==> IF TEMPFILE-STAT NOT = 0
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("X1");                                                            //COBOL==> MOVE 'X1' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.TEMPFILE_STAT);                                             //COBOL==> MOVE TEMPFILE-STAT TO NUMERIC-RETURN-CODE-0003
                M_1200_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            FD.EXTFILE.OpenFile(FileAccessMode.WriteExtend);                                                    //COBOL==> OPEN EXTEND EXTFILE.
            if (!(WS.EXTFILE_STAT.IsEqualTo(0)))                                                                //COBOL==> IF EXTFILE-STAT NOT = 0
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("X2");                                                            //COBOL==> MOVE 'X2' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.EXTFILE_STAT);                                              //COBOL==> MOVE EXTFILE-STAT TO NUMERIC-RETURN-CODE-0003
                M_1200_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1200_EXTEND_FILES") { M_1200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1200_EXIT
        /// </summary>
        private void M_1200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1200_EXIT") { M_1300_WRITE_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1300_WRITE_REC
        /// </summary>
        /// <remarks>
        ///COMMENT:    WRITE THE RECORD.
        /// </remarks>
        private void M_1300_WRITE_REC(string returnMethod = "")
        {
            FD.TEMPFILE_RECORD.SetValue(LS.CERTIFICATION_RECORD_0002);                                          //COBOL==> MOVE CERTIFICATION-RECORD-0002 TO TEMPFILE-RECORD.
            FD.TEMPFILE.WriteLine(FD.TEMPFILE_RECORD.AsBytes);                                                  //COBOL==> WRITE TEMPFILE-RECORD.
            if (!(WS.TEMPFILE_STAT.IsEqualTo(0)))                                                               //COBOL==> IF TEMPFILE-STAT NOT = 0
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("W1");                                                            //COBOL==> MOVE 'W1' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.TEMPFILE_STAT);                                             //COBOL==> MOVE TEMPFILE-STAT TO NUMERIC-RETURN-CODE-0003
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1300_WRITE_REC") { M_1300_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1300_EXIT
        /// </summary>
        private void M_1300_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1300_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1300_EXIT") { M_1400_CLOSE_FILES(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1400_CLOSE_FILES
        /// </summary>
        /// <remarks>
        ///COMMENT:    CLOSE THE FILES
        /// </remarks>
        private void M_1400_CLOSE_FILES(string returnMethod = "")
        {
            FD.EXTFILE.CloseFile();                                                                             //COBOL==> CLOSE EXTFILE
            if (!(WS.EXTFILE_STAT.IsEqualTo(0)))                                                                //COBOL==> IF EXTFILE-STAT NOT = 0
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("C1");                                                            //COBOL==> MOVE 'C1' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.EXTFILE_STAT);                                              //COBOL==> MOVE EXTFILE-STAT TO NUMERIC-RETURN-CODE-0003
                M_1400_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1400-EXIT
            }                                                                                                   //COBOL==> END-IF.
            FD.TEMPFILE.CloseFile();                                                                            //COBOL==> CLOSE TEMPFILE.
            if (!(WS.TEMPFILE_STAT.IsEqualTo(0)))                                                               //COBOL==> IF TEMPFILE-STAT NOT = 0
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("C2");                                                            //COBOL==> MOVE 'C2' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.TEMPFILE_STAT);                                             //COBOL==> MOVE TEMPFILE-STAT TO NUMERIC-RETURN-CODE-0003
                M_1400_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1400-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1400_CLOSE_FILES") { M_1400_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1400_EXIT
        /// </summary>
        private void M_1400_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1400_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1400_EXIT") { M_1500_COMMIT_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1500_COMMIT_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT:    COMMIT-FILE LOGIC CONSISTS OF:
        ///COMMENT:    CLOSE TEMPORARY OUTPUT FILE.
        ///COMMENT:    OPEN TEMPORARY OUTPUT FILE AS INPUT.
        ///COMMENT:    WRITE RECORDS TO PERMANENT OUTPUT FILE.
        ///COMMENT:    CLOSE TEMPORARY OUTPUT FILE.
        ///COMMENT:    OPEN TEMPORARY OUTPUT FILE AS OUTPUT.
        /// </remarks>
        private void M_1500_COMMIT_FILE(string returnMethod = "")
        {
            M_1600_CLOSE_TEMPORARY_FILE("M_1600_EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 1600-CLOSE-TEMPORARY-FILE THRU 1600-EXIT.
            if (!(LS.TEXT_RETURN_CODE_0003.IsSpaces()))                                                         //COBOL==> IF TEXT-RETURN-CODE-0003 NOT = SPACES
            {
                M_1500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1500-EXIT.
            }
            M_1700_OPEN_INPUT_TEMP_FILE("M_1700_EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 1700-OPEN-INPUT-TEMP-FILE THRU 1700-EXIT.
            if (!(LS.TEXT_RETURN_CODE_0003.IsSpaces()))                                                         //COBOL==> IF TEXT-RETURN-CODE-0003 NOT = SPACES
            {
                M_1500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1500-EXIT.
            }
            M_1800_WRITE_PERMANENT_FILE("M_1800_EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 1800-WRITE-PERMANENT-FILE THRU 1800-EXIT.
            if (!(LS.TEXT_RETURN_CODE_0003.IsSpaces()))                                                         //COBOL==> IF TEXT-RETURN-CODE-0003 NOT = SPACES
            {
                M_1500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1500-EXIT.
            }
            M_1600_CLOSE_TEMPORARY_FILE("M_1600_EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 1600-CLOSE-TEMPORARY-FILE THRU 1600-EXIT.
            if (!(LS.TEXT_RETURN_CODE_0003.IsSpaces()))                                                         //COBOL==> IF TEXT-RETURN-CODE-0003 NOT = SPACES
            {
                M_1500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1500-EXIT.
            }
            M_1900_OPEN_OUTPUT_TMP_FILE("M_1900_EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 1900-OPEN-OUTPUT-TMP-FILE THRU 1900-EXIT.
            if (!(LS.TEXT_RETURN_CODE_0003.IsSpaces()))                                                         //COBOL==> IF TEXT-RETURN-CODE-0003 NOT = SPACES
            {
                M_1500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1500-EXIT.
            }
            if (returnMethod != "" && returnMethod != "M_1500_COMMIT_FILE") { M_1500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1500_EXIT
        /// </summary>
        private void M_1500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1500_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1500_EXIT") { M_1600_CLOSE_TEMPORARY_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1600_CLOSE_TEMPORARY_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT:    CLOSE THE TEMPORARY FILE.
        /// </remarks>
        private void M_1600_CLOSE_TEMPORARY_FILE(string returnMethod = "")
        {
            FD.TEMPFILE.CloseFile();                                                                            //COBOL==> CLOSE TEMPFILE.
            if (!(WS.TEMPFILE_STAT.IsEqualTo(0)))                                                               //COBOL==> IF TEMPFILE-STAT NOT = 0
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("C3");                                                            //COBOL==> MOVE 'C3' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.TEMPFILE_STAT);                                             //COBOL==> MOVE TEMPFILE-STAT TO NUMERIC-RETURN-CODE-0003
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1600_CLOSE_TEMPORARY_FILE") { M_1600_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1600_EXIT
        /// </summary>
        private void M_1600_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1600_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1600_EXIT") { M_1700_OPEN_INPUT_TEMP_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1700_OPEN_INPUT_TEMP_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT:    OPEN THE TEMPORARY FILE AS INPUT.
        /// </remarks>
        private void M_1700_OPEN_INPUT_TEMP_FILE(string returnMethod = "")
        {
            FD.TEMPFILE.OpenFile(FileAccessMode.Read);                                                          //COBOL==> OPEN INPUT TEMPFILE.
            if (!(WS.TEMPFILE_STAT.IsEqualTo(0)))                                                               //COBOL==> IF TEMPFILE-STAT NOT = 0
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("O3");                                                            //COBOL==> MOVE 'O3' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.TEMPFILE_STAT);                                             //COBOL==> MOVE TEMPFILE-STAT TO NUMERIC-RETURN-CODE-0003
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1700_OPEN_INPUT_TEMP_FILE") { M_1700_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1700_EXIT
        /// </summary>
        private void M_1700_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1700_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1700_EXIT") { M_1800_WRITE_PERMANENT_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1800_WRITE_PERMANENT_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT:    WRITE RECORDS TO PERMANENT OUTPUT FILE
        /// </remarks>
        private void M_1800_WRITE_PERMANENT_FILE(string returnMethod = "")
        {
            WS.NO_MORE_RECORDS_SWITCH.SetValue("N");                                                            //COBOL==> MOVE 'N' TO NO-MORE-RECORDS-SWITCH.
            FD.TEMPFILE.ReadLine();                                                                             //COBOL==> READ TEMPFILE
            if (FD.TEMPFILE.FileStatus == FileStatus.End_of_file)                                               //COBOL==> AT END
            {
                WS.NO_MORE_RECORDS_SWITCH.SetValue("Y");                                                            //COBOL==> MOVE 'Y' TO NO-MORE-RECORDS-SWITCH
            }                                                                                                   //COBOL==> END-READ.
            if ((!(WS.TEMPFILE_STAT.IsEqualTo(0)))
             && (WS.NO_MORE_RECORDS_SWITCH.IsEqualTo("N")))  //COBOL==> IF ( TEMPFILE-STAT NOT = 0 AND NO-MORE-RECORDS-SWITCH = 'N' )
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("RD");                                                            //COBOL==> MOVE 'RD' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.TEMPFILE_STAT);                                             //COBOL==> MOVE TEMPFILE-STAT TO NUMERIC-RETURN-CODE-0003
                M_1800_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1800-EXIT
            }                                                                                                   //COBOL==> END-IF.
            while (!(WS.NO_MORE_RECORDS.Value))                                                                 //COBOL==> PERFORM UNTIL NO-MORE-RECORDS
            {
                M_2000_MOVE_TEMPFILE_FIELDS("M_2000_EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 2000-MOVE-TEMPFILE-FIELDS THRU 2000-EXIT
                FD.EXTFILE.WriteLine(FD.EXTFILE_RECORD.AsBytes);                                                    //COBOL==> WRITE EXTFILE-RECORD
                if (!(WS.EXTFILE_STAT.IsEqualTo(0)))                                                                //COBOL==> IF EXTFILE-STAT NOT = 0
                {
                    LS.TEXT_RETURN_CODE_0003.SetValue("W2");                                                            //COBOL==> MOVE 'W2' TO TEXT-RETURN-CODE-0003
                    LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.EXTFILE_STAT);                                              //COBOL==> MOVE EXTFILE-STAT TO NUMERIC-RETURN-CODE-0003
                    M_1800_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1800-EXIT
                }                                                                                                   //COBOL==> END-IF
                FD.TEMPFILE.ReadLine();                                                                             //COBOL==> READ TEMPFILE
                if (FD.TEMPFILE.FileStatus == FileStatus.End_of_file)                                               //COBOL==> AT END
                {
                    WS.NO_MORE_RECORDS_SWITCH.SetValue("Y");                                                            //COBOL==> MOVE 'Y' TO NO-MORE-RECORDS-SWITCH
                }                                                                                                   //COBOL==> END-READ
                if ((!(WS.TEMPFILE_STAT.IsEqualTo(0)))
             && (WS.NO_MORE_RECORDS_SWITCH.IsEqualTo("N")))  //COBOL==> IF ( TEMPFILE-STAT NOT = 0 AND NO-MORE-RECORDS-SWITCH = 'N' )
                {
                    LS.TEXT_RETURN_CODE_0003.SetValue("RD");                                                            //COBOL==> MOVE 'RD' TO TEXT-RETURN-CODE-0003
                    LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.TEMPFILE_STAT);                                             //COBOL==> MOVE TEMPFILE-STAT TO NUMERIC-RETURN-CODE-0003
                    M_1800_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1800-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            if (returnMethod != "" && returnMethod != "M_1800_WRITE_PERMANENT_FILE") { M_1800_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1800_EXIT
        /// </summary>
        private void M_1800_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1800_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1800_EXIT") { M_1900_OPEN_OUTPUT_TMP_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1900_OPEN_OUTPUT_TMP_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT:    OPEN THE TEMPORARY FILE AS OUTPUT
        /// </remarks>
        private void M_1900_OPEN_OUTPUT_TMP_FILE(string returnMethod = "")
        {
            FD.TEMPFILE.OpenFile(FileAccessMode.Write);                                                         //COBOL==> OPEN OUTPUT TEMPFILE.
            if (!(WS.TEMPFILE_STAT.IsEqualTo(0)))                                                               //COBOL==> IF TEMPFILE-STAT NOT = 0
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("O4");                                                            //COBOL==> MOVE 'O4' TO TEXT-RETURN-CODE-0003
                LS.NUMERIC_RETURN_CODE_0003.SetValue(WS.TEMPFILE_STAT);                                             //COBOL==> MOVE TEMPFILE-STAT TO NUMERIC-RETURN-CODE-0003
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1900_OPEN_OUTPUT_TMP_FILE") { M_1900_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1900_EXIT
        /// </summary>
        private void M_1900_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1900_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1900_EXIT") { M_2000_MOVE_TEMPFILE_FIELDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_MOVE_TEMPFILE_FIELDS
        /// </summary>
        /// <remarks>
        ///COMMENT:    MOVE THE TEMPORARY RECORD FIELDS TO PERMANENT RECORD FIELDS.
        /// </remarks>
        private void M_2000_MOVE_TEMPFILE_FIELDS(string returnMethod = "")
        {
            WS.EXT_SDSO_INSERTS_WS.SetValue(FD.TEMPFILE_RECORD);                                                //COBOL==> MOVE TEMPFILE-RECORD TO EXT-SDSO-INSERTS-WS.
            FD.EXT_CA_NUMBER.SetValue(WS.EXT_CA_NUMBER_WS);                                                     //COBOL==> MOVE EXT-CA-NUMBER-WS TO EXT-CA-NUMBER.
            FD.EXT_DEBTOR_ID_CODE.SetValue(WS.EXT_DEBTOR_ID_CODE_WS);                                           //COBOL==> MOVE EXT-DEBTOR-ID-CODE-WS TO EXT-DEBTOR-ID-CODE.
            FD.EXT_SSN.SetValue(WS.EXT_SSN_WS);                                                                 //COBOL==> MOVE EXT-SSN-WS TO EXT-SSN.
            FD.EXT_FIRST_NAME.SetValue(WS.EXT_FIRST_NAME_WS);                                                   //COBOL==> MOVE EXT-FIRST-NAME-WS TO EXT-FIRST-NAME.
            FD.EXT_MIDDLE_INITIAL.SetValue(WS.EXT_MIDDLE_INITIAL_WS);                                           //COBOL==> MOVE EXT-MIDDLE-INITIAL-WS TO EXT-MIDDLE-INITIAL.
            FD.EXT_LAST_NAME.SetValue(WS.EXT_LAST_NAME_WS);                                                     //COBOL==> MOVE EXT-LAST-NAME-WS TO EXT-LAST-NAME.
            FD.EXT_ACCOUNT_ID_CODE.SetValue(WS.EXT_ACCOUNT_ID_CODE_WS);                                         //COBOL==> MOVE EXT-ACCOUNT-ID-CODE-WS TO EXT-ACCOUNT-ID-CODE.
            FD.EXT_ACCOUNT_ID_NUMBER.SetValue(WS.EXT_ACCOUNT_ID_NUMBER_WS);                                     //COBOL==> MOVE EXT-ACCOUNT-ID-NUMBER-WS TO EXT-ACCOUNT-ID-NUMBER.
            FD.EXT_DEBT_CODE_TYPE.SetValue(WS.EXT_DEBT_CODE_TYPE_WS);                                           //COBOL==> MOVE EXT-DEBT-CODE-TYPE-WS TO EXT-DEBT-CODE-TYPE.
            FD.EXT_DEBT_DESCRIPTION.SetValue(WS.EXT_DEBT_DESCRIPTION_WS);                                       //COBOL==> MOVE EXT-DEBT-DESCRIPTION-WS TO EXT-DEBT-DESCRIPTION.
            FD.EXT_DEBT_AMOUNT.SetComputeValue(WS.EXT_DEBT_AMT_DOLLARS.AsDecimal() + (WS.EXT_DEBT_AMT_CENTS.AsDecimal() / 100m));  //COBOL==> COMPUTE EXT-DEBT-AMOUNT = EXT-DEBT-AMT-DOLLARS + ( EXT-DEBT-AMT-CENTS / 100 )
                                                                                                                                   //                                                                                                  //COBOL==> END-COMPUTE.
            FD.EXT_FILLER.SetValue(WS.EXT_FILLER_WS);                                                           //COBOL==> MOVE EXT-FILLER-WS TO EXT-FILLER.
            FD.EXT_KS_DL_NUMBER.SetValue(WS.EXT_KS_DL_NUMBER_WS);                                               //COBOL==> MOVE EXT-KS-DL-NUMBER-WS TO EXT-KS-DL-NUMBER.
            if (returnMethod != "" && returnMethod != "M_2000_MOVE_TEMPFILE_FIELDS") { M_2000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_EXIT
        /// </summary>
        private void M_2000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2000_EXIT") { M_9999_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9999_EXIT
        /// </summary>
        /// <remarks>
        ///COMMENT:    END OF USER-WRITTEN CODE. NOTE THAT THIS EXIT DOES
        ///COMMENT:    FUNCTION AS AN EXIT/RETURN. CONTROL JUST FALLS THROUGH.
        /// </remarks>
        private void M_9999_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_9999_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9999_EXIT") { M_PARA_0298648157_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0298648157_EXIT
        /// </summary>
        private void M_PARA_0298648157_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0298648157_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_0298648157_EXIT") { M_PARA_0298648157_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0298648157_INIT
        /// </summary>
        private void M_PARA_0298648157_INIT(string returnMethod = "")
        {
            LS.EXPORT_0003EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0003EV .
            if (returnMethod != "" && returnMethod != "M_PARA_0298648157_INIT") { M_PARA_0298648157_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0298648157_INIT_EXIT
        /// </summary>
        private void M_PARA_0298648157_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0298648157_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
