#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2021
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2021-12-07 03:11:42 PM
   **        *   FROM COBOL PGM   :  SWEXFE39
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                              COOL:GEN
               COPYRIGHT 1999, STERLING SOFTWARE, INC.
       NAME: FN_EXT_WRITE_AR_STATEMENT_FILE   DATE: 1999/03/23
       TARGET OS:   MVS                       TIME: 16:46:59
       TARGET DBMS: DB2                       USER: SWIBMRK
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
   **************************************************************
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.IO.Common;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region File Section Class
    internal class SWEXFE39_fd : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string FileSection = "SWEXFE39_fd_FileSection";
            internal const string TEMP_FILE = "TEMP_FILE";
            internal const string TEMP_REC = "TEMP_REC";
            internal const string TEMP_REC_DATA = "TEMP_REC_DATA";
            internal const string PERM_FILE = "PERM_FILE";
            internal const string PERM_REC = "PERM_REC";
            internal const string PERM_REC_DATA = "PERM_REC_DATA";
            internal const string STARS_FILE = "STARS_FILE";
            internal const string STARS_REC = "STARS_REC";
        }
        #endregion

        #region Direct-access element properties
        public IFileLink TEMP_FILE { get; set; }
        public IGroup TEMP_REC { get { return GetElementByName<IGroup>(Names.TEMP_REC); } }
        public IField TEMP_REC_DATA { get { return GetElementByName<IField>(Names.TEMP_REC_DATA); } }
        public IFileLink PERM_FILE { get; set; }
        public IGroup PERM_REC { get { return GetElementByName<IGroup>(Names.PERM_REC); } }
        public IField PERM_REC_DATA { get { return GetElementByName<IField>(Names.PERM_REC_DATA); } }
        public IFileLink STARS_FILE { get; set; }
        public IField STARS_REC { get { return GetElementByName<IField>(Names.STARS_REC); } }


        internal SWEXFE39_ws WS;
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the FileSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.TEMP_REC, (TEMP_REC) =>
           {
               TEMP_REC.CreateNewField(Names.TEMP_REC_DATA, FieldType.String, 125);
               TEMP_REC.CreateNewFillerField(1, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.PERM_REC, (PERM_REC) =>
           {
               PERM_REC.CreateNewField(Names.PERM_REC_DATA, FieldType.String, 125);
           });
            recordDef.CreateNewField(Names.STARS_REC, FieldType.String, 131);

        }

        protected override string GetRecordName()
        {
            return Names.FileSection;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            IFileHandler FileHandler = InversionContainer.GetImplementingObject<IFileHandler>();

            TEMP_FILE = FileHandler.GetFile("TEMPFL");
            TEMP_FILE.StatusField = WS.FSTAT_1;
            TEMP_FILE.AssociatedBuffer = TEMP_REC;

            PERM_FILE = FileHandler.GetFile("DOAFL");
            PERM_FILE.StatusField = WS.FSTAT_2;
            PERM_FILE.AssociatedBuffer = PERM_REC;

            STARS_FILE = FileHandler.GetFile("STARSFL");
            STARS_FILE.StatusField = WS.FSTAT_3;
            STARS_FILE.AssociatedBuffer = STARS_REC;
        }
        #endregion

        #region Constructors
        public SWEXFE39_fd(SWEXFE39_ws ws)
            : base()
        {
            this.WS = ws;
            Initialize();

        }
        #endregion
    }
    #endregion File Section Class
    #region Working Storage Class
    internal class SWEXFE39_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXFE39_ws_WorkingStorage";
            internal const string WS_WORK_VARIABLES = "WS_WORK_VARIABLES";
            internal const string WS_BEG_FY = "WS_BEG_FY";
            internal const string WS_BLANK_LINE = "WS_BLANK_LINE";
            internal const string WS_MAX_LINE_PER_PAGE = "WS_MAX_LINE_PER_PAGE";
            internal const string WS_NO_OF_PAGES_IN_STMT = "WS_NO_OF_PAGES_IN_STMT";
            internal const string WS_MAX_NO_OF_PAGES_PER_MAIL = "WS_MAX_NO_OF_PAGES_PER_MAIL";
            internal const string WS_CURRENT_PAGE_NUMBER = "WS_CURRENT_PAGE_NUMBER";
            internal const string WS_TEMP_DATE = "WS_TEMP_DATE";
            internal const string WS_REC_PRQ_ID_N = "WS_REC_PRQ_ID_N";
            internal const string ADVANCE_COUNTER = "ADVANCE_COUNTER";
            internal const string PAGE_COUNT = "PAGE_COUNT";
            internal const string LINE_COUNT = "LINE_COUNT";
            internal const string FIRST_TIME_FLAG = "FIRST_TIME_FLAG";
            internal const string NEW_COUPON_FLAG = "NEW_COUPON_FLAG";
            internal const string PREVIOUS_REC = "PREVIOUS_REC";
            internal const string CURRENT_REC = "CURRENT_REC";
            internal const string STARS_COUNTER = "STARS_COUNTER";
            internal const string IS_PERM_FILE_EMPTY = "IS_PERM_FILE_EMPTY";
            internal const string FILE_STATUS = "FILE_STATUS";
            internal const string FSTAT_1 = "FSTAT_1";
            internal const string FSTAT_2 = "FSTAT_2";
            internal const string FSTAT_3 = "FSTAT_3";
            internal const string WS_MVS_DATE = "WS_MVS_DATE";
            internal const string WS_MVS_DATE_YY = "WS_MVS_DATE_YY";
            internal const string WS_MVS_DATE_MM = "WS_MVS_DATE_MM";
            internal const string WS_MVS_DATE_DD = "WS_MVS_DATE_DD";
            internal const string WS_MVS_FORMATTED_DATE = "WS_MVS_FORMATTED_DATE";
            internal const string WS_MVS_FORMATTED_DATE_N = "WS_MVS_FORMATTED_DATE_N";
            internal const string WS_MVS_FORMATTED_DATE_CC = "WS_MVS_FORMATTED_DATE_CC";
            internal const string WS_MVS_FORMATTED_DATE_YY = "WS_MVS_FORMATTED_DATE_YY";
            internal const string WS_MVS_FORMATTED_DATE_MM = "WS_MVS_FORMATTED_DATE_MM";
            internal const string WS_MVS_FORMATTED_DATE_DD = "WS_MVS_FORMATTED_DATE_DD";
            internal const string WS_MVS_FORMATTED_DATE_X = "WS_MVS_FORMATTED_DATE_X";
            internal const string WS_TEMP_DATE_d2 = "WS_TEMP_DATE_d2";
            internal const string WS_TEMP_DATE_MM = "WS_TEMP_DATE_MM";
            internal const string WS_TEMP_DATE_DD = "WS_TEMP_DATE_DD";
            internal const string WS_TEMP_DATE_CC = "WS_TEMP_DATE_CC";
            internal const string WS_TEMP_DATE_YY = "WS_TEMP_DATE_YY";
            internal const string WS_TEMP_OUTPUT_DATE = "WS_TEMP_OUTPUT_DATE";
            internal const string WS_FORMATTED_DATE_NX = "WS_FORMATTED_DATE_NX";
            internal const string WS_FORMATTED_DATE_N = "WS_FORMATTED_DATE_N";
            internal const string WS_FORMATTED_DATE_CC = "WS_FORMATTED_DATE_CC";
            internal const string WS_FORMATTED_DATE_YY = "WS_FORMATTED_DATE_YY";
            internal const string WS_FORMATTED_DATE_MM = "WS_FORMATTED_DATE_MM";
            internal const string WS_FORMATTED_DATE_DD = "WS_FORMATTED_DATE_DD";
            internal const string WS_FORMATTED_DATE_X = "WS_FORMATTED_DATE_X";
            internal const string WS_MESSAGE_AREA = "WS_MESSAGE_AREA";
            internal const string WS_OVERFLOW_MSG_LINE1 = "WS_OVERFLOW_MSG_LINE1";
            internal const string WS_OVERFLOW_MSG_LINE2 = "WS_OVERFLOW_MSG_LINE2";
            internal const string WS_AR_OVERFLOW_MSG = "WS_AR_OVERFLOW_MSG";
            internal const string WS_FDSO_COLL_MSGS = "WS_FDSO_COLL_MSGS";
            internal const string WS_FDSO_MSG_LINE1 = "WS_FDSO_MSG_LINE1";
            internal const string WS_FDSO_MSG_LINE2 = "WS_FDSO_MSG_LINE2";
            internal const string WS_FDSO_MSG_LINE3 = "WS_FDSO_MSG_LINE3";
            internal const string WS_FDSO_MSG_LINE4 = "WS_FDSO_MSG_LINE4";
            internal const string WS_FDSO_MSG_LINE5 = "WS_FDSO_MSG_LINE5";
            internal const string WS_MSG = "WS_MSG";
            internal const string FSTAT_T1 = "FSTAT_T1";
            internal const string FSTAT_P1 = "FSTAT_P1";
            internal const string WS_CONTROL_FIELDS = "WS_CONTROL_FIELDS";
            internal const string EOF_FLAG = "EOF_FLAG";
            internal const string MAX_INDEX = "MAX_INDEX";
            internal const string ARRAY_INDEX = "ARRAY_INDEX";
            internal const string WS_RES = "WS_RES";
            internal const string WS_REC = "WS_REC";
            internal const string WS_REC_CONTROL = "WS_REC_CONTROL";
            internal const string WS_REC_TYPE = "WS_REC_TYPE";
            internal const string WS_REC_PMNT_REQ_ID = "WS_REC_PMNT_REQ_ID";
            internal const string WS_REC_DATA = "WS_REC_DATA";
            internal const string WS_FORMAT = "WS_FORMAT";
            internal const string WS_FORMAT_B = "WS_FORMAT_B";
            internal const string WS_FORMAT_DATA = "WS_FORMAT_DATA";
            internal const string WS_REC_HEADER = "WS_REC_HEADER";
            internal const string WS_HEADER_ID = "WS_HEADER_ID";
            internal const string WS_HEADER_PROCESS_DATE = "WS_HEADER_PROCESS_DATE";
            internal const string WS_HEADER_WARRANT_DATE = "WS_HEADER_WARRANT_DATE";
            internal const string WS_HEADER_VOUCHER_NO = "WS_HEADER_VOUCHER_NO";
            internal const string WS_HEADER_VOUCHER_NO_RCVD = "WS_HEADER_VOUCHER_NO_RCVD";
            internal const string WS_REC_WARDET_LINE = "WS_REC_WARDET_LINE";
            internal const string WS_REC_WARDET_PAYEE_NAME = "WS_REC_WARDET_PAYEE_NAME";
            internal const string WS_REC_WARDET_PMNT_AMT = "WS_REC_WARDET_PMNT_AMT";
            internal const string WS_REC_WARDET_PRN_DT = "WS_REC_WARDET_PRN_DT";
            internal const string WS_REC_WARDET_WAR_NUM = "WS_REC_WARDET_WAR_NUM";
            internal const string WS_REC_WARDET_AGENCY_NUMBER = "WS_REC_WARDET_AGENCY_NUMBER";
            internal const string WS_REC_WARDET_FUND_NUMBER = "WS_REC_WARDET_FUND_NUMBER";
            internal const string WS_REC_STUB_LINE1 = "WS_REC_STUB_LINE1";
            internal const string WS_REC1_PAYEE_NAME = "WS_REC1_PAYEE_NAME";
            internal const string WS_REC1_PAYEE_NUM = "WS_REC1_PAYEE_NUM";
            internal const string WS_REC1_AMT = "WS_REC1_AMT";
            internal const string WS_REC_STUB_LINE1_1 = "WS_REC_STUB_LINE1_1";
            internal const string WS_REC11_PAYEE_NAME = "WS_REC11_PAYEE_NAME";
            internal const string WS_REC11_PAYEE_NUM = "WS_REC11_PAYEE_NUM";
            internal const string WS_REC_STUB_LINE2 = "WS_REC_STUB_LINE2";
            internal const string WS_DES_NAME = "WS_DES_NAME";
            internal const string WS_REC2_DESIG_NAME = "WS_REC2_DESIG_NAME";
            internal const string WS_REC2_DESIG_NUM = "WS_REC2_DESIG_NUM";
            internal const string WS_REC2_FIPS_CODE = "WS_REC2_FIPS_CODE";
            internal const string WS_MED_DESC = "WS_MED_DESC";
            internal const string WS_MED_SUPPORT_FLAG = "WS_MED_SUPPORT_FLAG";
            internal const string WS_INTERSTATE_LINE = "WS_INTERSTATE_LINE";
            internal const string WS_AP_NAME = "WS_AP_NAME";
            internal const string WS_AP_SSN = "WS_AP_SSN";
            internal const string WS_CASE_NO = "WS_CASE_NO";
            internal const string WS_INT_COURT_NO = "WS_INT_COURT_NO";
            internal const string WS_REC_STUB_LINE3 = "WS_REC_STUB_LINE3";
            internal const string WS_REC_STUB_LINE4 = "WS_REC_STUB_LINE4";
            internal const string WS_REC_STUB_LINE5 = "WS_REC_STUB_LINE5";
            internal const string WS_REC5_PAYOR = "WS_REC5_PAYOR";
            internal const string WS_REC5_PAYOR_NAME = "WS_REC5_PAYOR_NAME";
            internal const string WS_REC5_NUM = "WS_REC5_NUM";
            internal const string WS_REC5_ORD_NUM = "WS_REC5_ORD_NUM";
            internal const string WS_REC_STUB_LINE5_STORE = "WS_REC_STUB_LINE5_STORE";
            internal const string WS_REC_STUB_LINE6 = "WS_REC_STUB_LINE6";
            internal const string WS_REC6_REC_TYPE = "WS_REC6_REC_TYPE";
            internal const string WS_REC6_TRN_NAME = "WS_REC6_TRN_NAME";
            internal const string WS_REC6_TRN_DATE = "WS_REC6_TRN_DATE";
            internal const string WS_REC6_TRN_AMOUNT = "WS_REC6_TRN_AMOUNT";
            internal const string WS_REC6_TRN_CREDIT_AMT = "WS_REC6_TRN_CREDIT_AMT";
            internal const string WS_REC6_TRN_DEBIT_AMT = "WS_REC6_TRN_DEBIT_AMT";
            internal const string WS_REC6_DOLLAR_SIGN = "WS_REC6_DOLLAR_SIGN";
            internal const string WS_REC6_TRN_NET_AMT = "WS_REC6_TRN_NET_AMT";
            internal const string WS_REC_STUB_LINE7 = "WS_REC_STUB_LINE7";
            internal const string WS_REC7_STUB_LINE = "WS_REC7_STUB_LINE";
            internal const string WS_REC_STUB_LINE8 = "WS_REC_STUB_LINE8";
            internal const string WS_REC8_STUB_LINE = "WS_REC8_STUB_LINE";
            internal const string WS_REC8_PAGE_COUNT = "WS_REC8_PAGE_COUNT";
            internal const string WS_REFUND_REASON = "WS_REFUND_REASON";
            internal const string WS_REFUND_REASON_LINE1 = "WS_REFUND_REASON_LINE1";
            internal const string WS_REFUND_REASON_LINE2 = "WS_REFUND_REASON_LINE2";
            internal const string WS_REFUND_REASON_LINE3 = "WS_REFUND_REASON_LINE3";
            internal const string WS_STMT_DATE_LINE = "WS_STMT_DATE_LINE";
            internal const string WS_STATEMENT_DATE = "WS_STATEMENT_DATE";
            internal const string WS_REC_ADDRESS_LINE = "WS_REC_ADDRESS_LINE";
            internal const string DOMESTIC_ADDR = "DOMESTIC_ADDR";
            internal const string WS_D_ADDRESS_TYPE = "WS_D_ADDRESS_TYPE";
            internal const string D_STREET_1 = "D_STREET_1";
            internal const string D_STREET_2 = "D_STREET_2";
            internal const string D_ADDR_LINE5 = "D_ADDR_LINE5";
            internal const string D_CITY = "D_CITY";
            internal const string D_STATE = "D_STATE";
            internal const string D_ZIP_CODE1 = "D_ZIP_CODE1";
            internal const string D_ZIP_CODE2 = "D_ZIP_CODE2";
            internal const string FOREIGN_ADDR = "FOREIGN_ADDR";
            internal const string WS_F_ADDRESS_TYPE = "WS_F_ADDRESS_TYPE";
            internal const string F_STREET_1 = "F_STREET_1";
            internal const string F_STREET_2 = "F_STREET_2";
            internal const string F_STREET_3 = "F_STREET_3";
            internal const string F_ADDR_LINE6 = "F_ADDR_LINE6";
            internal const string F_CITY = "F_CITY";
            internal const string F_PROVINCE = "F_PROVINCE";
            internal const string F_POSTAL_CODE = "F_POSTAL_CODE";
            internal const string F_COUNTRY = "F_COUNTRY";
            internal const string FROM_ADDRESS = "FROM_ADDRESS";
            internal const string FROM_ADDRESS_LINE = "FROM_ADDRESS_LINE";
            internal const string FROM_ADDRESS_d2 = "FROM_ADDRESS_d2";
            internal const string FROM_CITY = "FROM_CITY";
            internal const string FROM_DELIMETER1 = "FROM_DELIMETER1";
            internal const string FROM_STATE = "FROM_STATE";
            internal const string FROM_DELIMETER2 = "FROM_DELIMETER2";
            internal const string FROM_ZIP_5 = "FROM_ZIP_5";
            internal const string FROM_DELIMETER3 = "FROM_DELIMETER3";
            internal const string FROM_ZIP_4 = "FROM_ZIP_4";
            internal const string WS_PHONE_NUMBER = "WS_PHONE_NUMBER";
            internal const string WS_PHONE_WORK = "WS_PHONE_WORK";
            internal const string PHONE_3 = "PHONE_3";
            internal const string PHONE_4 = "PHONE_4";
            internal const string SP_TELE = "SP_TELE";
            internal const string SP_TELE_AREA_CODE = "SP_TELE_AREA_CODE";
            internal const string HYPHEN_1 = "HYPHEN_1";
            internal const string SP_TELE_THREE_DIGIT = "SP_TELE_THREE_DIGIT";
            internal const string HYPHEN_2 = "HYPHEN_2";
            internal const string SP_TELE_FOUR_DIGIT = "SP_TELE_FOUR_DIGIT";
            internal const string EXT_LITERAL = "EXT_LITERAL";
            internal const string SP_TELE_EXTENSION = "SP_TELE_EXTENSION";
            internal const string AR_ADDRESS = "AR_ADDRESS";
            internal const string AR_ADDRESS_LINE = "AR_ADDRESS_LINE";
            internal const string AR_ADDRESS_D = "AR_ADDRESS_D";
            internal const string AR_D_CITY = "AR_D_CITY";
            internal const string AR_D_DELIMETER1 = "AR_D_DELIMETER1";
            internal const string AR_D_STATE = "AR_D_STATE";
            internal const string AR_D_DELIMETER2 = "AR_D_DELIMETER2";
            internal const string AR_D_ZIP_5 = "AR_D_ZIP_5";
            internal const string AR_D_DELIMETER3 = "AR_D_DELIMETER3";
            internal const string AR_D_ZIP_4 = "AR_D_ZIP_4";
            internal const string AR_ADDRESS_F = "AR_ADDRESS_F";
            internal const string AR_F_CITY = "AR_F_CITY";
            internal const string AR_F_DELIMETER1 = "AR_F_DELIMETER1";
            internal const string AR_F_PROVINCE = "AR_F_PROVINCE";
            internal const string AR_F_DELIMETER1_d2 = "AR_F_DELIMETER1_d2";
            internal const string AR_F_POSTAL_CODE = "AR_F_POSTAL_CODE";
            internal const string AR_F_DELIMETER2 = "AR_F_DELIMETER2";
            internal const string AR_F_COUNTRY = "AR_F_COUNTRY";
            internal const string WS_WORK_AREA = "WS_WORK_AREA";
            internal const string WS_WORK_REC = "WS_WORK_REC";
            internal const string WS_STARSREC_LINES = "WS_STARSREC_LINES";
            internal const string WS_STARS_LINE0_1 = "WS_STARS_LINE0_1";
            internal const string STARS_PG_NO = "STARS_PG_NO";
            internal const string WS_STARS_LINE0_2 = "WS_STARS_LINE0_2";
            internal const string DOC_PREFIX = "DOC_PREFIX";
            internal const string DOC_NO = "DOC_NO";
            internal const string WS_STARS_LINE1 = "WS_STARS_LINE1";
            internal const string DOC_DATE = "DOC_DATE";
            internal const string EFFECTIVE_DATE = "EFFECTIVE_DATE";
            internal const string WS_STARS_DET_LINE = "WS_STARS_DET_LINE";
            internal const string VOUCHER_NO = "VOUCHER_NO";
            internal const string FINANCIAL_YEAR = "FINANCIAL_YEAR";
            internal const string SFX1 = "SFX1";
            internal const string TRAN_CODE = "TRAN_CODE";
            internal const string REF_DOC_NO = "REF_DOC_NO";
            internal const string SFX2 = "SFX2";
            internal const string M_WHAT = "M_WHAT";
            internal const string AGENCY = "AGENCY";
            internal const string FUND = "FUND";
            internal const string BEG_FY = "BEG_FY";
            internal const string STARS_INDEX = "STARS_INDEX";
            internal const string PCA = "PCA";
            internal const string EXP_SUB_OB = "EXP_SUB_OB";
            internal const string REV_SUB_OB = "REV_SUB_OB";
            internal const string DET = "DET";
            internal const string R_WHAT = "R_WHAT";
            internal const string AMOUNT = "AMOUNT";
            internal const string WS_STARS_LINE3 = "WS_STARS_LINE3";
            internal const string USER_ID = "USER_ID";
            internal const string STARS_TOT_AMT = "STARS_TOT_AMT";
            internal const string STUFFING_MC_LINE = "STUFFING_MC_LINE";
            internal const string DASHES = "DASHES";
            internal const string ADIM1 = "ADIM1";
            internal const string ADIM2 = "ADIM2";
            internal const string ADIM3 = "ADIM3";
            internal const string IMPORT_DETLINE_0001FL = "IMPORT_DETLINE_0001FL";
            internal const string IMPORT_DETLINE_0001PS = "IMPORT_DETLINE_0001PS";
            internal const string IMPORT_DETLINE_0001RF = "IMPORT_DETLINE_0001RF";
            internal const string IMPORT_DETLINE_0001MM = "IMPORT_DETLINE_0001MM";
            internal const string IMPORT_GROUP_0002FL = "IMPORT_GROUP_0002FL";
            internal const string IMPORT_GROUP_0002PS = "IMPORT_GROUP_0002PS";
            internal const string IMPORT_GROUP_0002RF = "IMPORT_GROUP_0002RF";
            internal const string IMPORT_GROUP_0002MM = "IMPORT_GROUP_0002MM";
        }
        #endregion

        #region Direct-access element properties
        public IGroup WS_WORK_VARIABLES { get { return GetElementByName<IGroup>(Names.WS_WORK_VARIABLES); } }
        public IField WS_BEG_FY { get { return GetElementByName<IField>(Names.WS_BEG_FY); } }
        public IField WS_BLANK_LINE { get { return GetElementByName<IField>(Names.WS_BLANK_LINE); } }
        public IField WS_MAX_LINE_PER_PAGE { get { return GetElementByName<IField>(Names.WS_MAX_LINE_PER_PAGE); } }
        public IField WS_NO_OF_PAGES_IN_STMT { get { return GetElementByName<IField>(Names.WS_NO_OF_PAGES_IN_STMT); } }
        public IField WS_MAX_NO_OF_PAGES_PER_MAIL { get { return GetElementByName<IField>(Names.WS_MAX_NO_OF_PAGES_PER_MAIL); } }
        public IField WS_CURRENT_PAGE_NUMBER { get { return GetElementByName<IField>(Names.WS_CURRENT_PAGE_NUMBER); } }
        public IField WS_TEMP_DATE { get { return GetElementByName<IField>(Names.WS_TEMP_DATE); } }
        public IField WS_REC_PRQ_ID_N { get { return GetElementByName<IField>(Names.WS_REC_PRQ_ID_N); } }
        public IField ADVANCE_COUNTER { get { return GetElementByName<IField>(Names.ADVANCE_COUNTER); } }
        public IField PAGE_COUNT { get { return GetElementByName<IField>(Names.PAGE_COUNT); } }
        public IField LINE_COUNT { get { return GetElementByName<IField>(Names.LINE_COUNT); } }
        public IField FIRST_TIME_FLAG { get { return GetElementByName<IField>(Names.FIRST_TIME_FLAG); } }
        public IField NEW_COUPON_FLAG { get { return GetElementByName<IField>(Names.NEW_COUPON_FLAG); } }
        public IField PREVIOUS_REC { get { return GetElementByName<IField>(Names.PREVIOUS_REC); } }
        public IField CURRENT_REC { get { return GetElementByName<IField>(Names.CURRENT_REC); } }
        public IField STARS_COUNTER { get { return GetElementByName<IField>(Names.STARS_COUNTER); } }
        public IField IS_PERM_FILE_EMPTY { get { return GetElementByName<IField>(Names.IS_PERM_FILE_EMPTY); } }
        public IGroup FILE_STATUS { get { return GetElementByName<IGroup>(Names.FILE_STATUS); } }
        public IField FSTAT_1 { get { return GetElementByName<IField>(Names.FSTAT_1); } }
        public IField FSTAT_2 { get { return GetElementByName<IField>(Names.FSTAT_2); } }
        public IField FSTAT_3 { get { return GetElementByName<IField>(Names.FSTAT_3); } }
        public IGroup WS_MVS_DATE { get { return GetElementByName<IGroup>(Names.WS_MVS_DATE); } }
        public IField WS_MVS_DATE_YY { get { return GetElementByName<IField>(Names.WS_MVS_DATE_YY); } }
        public IField WS_MVS_DATE_MM { get { return GetElementByName<IField>(Names.WS_MVS_DATE_MM); } }
        public IField WS_MVS_DATE_DD { get { return GetElementByName<IField>(Names.WS_MVS_DATE_DD); } }
        public IGroup WS_MVS_FORMATTED_DATE { get { return GetElementByName<IGroup>(Names.WS_MVS_FORMATTED_DATE); } }
        public IGroup WS_MVS_FORMATTED_DATE_N { get { return GetElementByName<IGroup>(Names.WS_MVS_FORMATTED_DATE_N); } }
        public IField WS_MVS_FORMATTED_DATE_CC { get { return GetElementByName<IField>(Names.WS_MVS_FORMATTED_DATE_CC); } }
        public IField WS_MVS_FORMATTED_DATE_YY { get { return GetElementByName<IField>(Names.WS_MVS_FORMATTED_DATE_YY); } }
        public IField WS_MVS_FORMATTED_DATE_MM { get { return GetElementByName<IField>(Names.WS_MVS_FORMATTED_DATE_MM); } }
        public IField WS_MVS_FORMATTED_DATE_DD { get { return GetElementByName<IField>(Names.WS_MVS_FORMATTED_DATE_DD); } }
        public IField WS_MVS_FORMATTED_DATE_X { get { return GetElementByName<IField>(Names.WS_MVS_FORMATTED_DATE_X); } }
        public IGroup WS_TEMP_DATE_d2 { get { return GetElementByName<IGroup>(Names.WS_TEMP_DATE_d2); } }
        public IField WS_TEMP_DATE_MM { get { return GetElementByName<IField>(Names.WS_TEMP_DATE_MM); } }
        public IField WS_TEMP_DATE_DD { get { return GetElementByName<IField>(Names.WS_TEMP_DATE_DD); } }
        public IField WS_TEMP_DATE_CC { get { return GetElementByName<IField>(Names.WS_TEMP_DATE_CC); } }
        public IField WS_TEMP_DATE_YY { get { return GetElementByName<IField>(Names.WS_TEMP_DATE_YY); } }
        public IField WS_TEMP_OUTPUT_DATE { get { return GetElementByName<IField>(Names.WS_TEMP_OUTPUT_DATE); } }
        public IGroup WS_FORMATTED_DATE_NX { get { return GetElementByName<IGroup>(Names.WS_FORMATTED_DATE_NX); } }
        public IGroup WS_FORMATTED_DATE_N { get { return GetElementByName<IGroup>(Names.WS_FORMATTED_DATE_N); } }
        public IField WS_FORMATTED_DATE_CC { get { return GetElementByName<IField>(Names.WS_FORMATTED_DATE_CC); } }
        public IField WS_FORMATTED_DATE_YY { get { return GetElementByName<IField>(Names.WS_FORMATTED_DATE_YY); } }
        public IField WS_FORMATTED_DATE_MM { get { return GetElementByName<IField>(Names.WS_FORMATTED_DATE_MM); } }
        public IField WS_FORMATTED_DATE_DD { get { return GetElementByName<IField>(Names.WS_FORMATTED_DATE_DD); } }
        public IField WS_FORMATTED_DATE_X { get { return GetElementByName<IField>(Names.WS_FORMATTED_DATE_X); } }
        public IGroup WS_MESSAGE_AREA { get { return GetElementByName<IGroup>(Names.WS_MESSAGE_AREA); } }
        public IField WS_OVERFLOW_MSG_LINE1 { get { return GetElementByName<IField>(Names.WS_OVERFLOW_MSG_LINE1); } }
        public IField WS_OVERFLOW_MSG_LINE2 { get { return GetElementByName<IField>(Names.WS_OVERFLOW_MSG_LINE2); } }
        public IField WS_AR_OVERFLOW_MSG { get { return GetElementByName<IField>(Names.WS_AR_OVERFLOW_MSG); } }
        public IGroup WS_FDSO_COLL_MSGS { get { return GetElementByName<IGroup>(Names.WS_FDSO_COLL_MSGS); } }
        public IField WS_FDSO_MSG_LINE1 { get { return GetElementByName<IField>(Names.WS_FDSO_MSG_LINE1); } }
        public IField WS_FDSO_MSG_LINE2 { get { return GetElementByName<IField>(Names.WS_FDSO_MSG_LINE2); } }
        public IField WS_FDSO_MSG_LINE3 { get { return GetElementByName<IField>(Names.WS_FDSO_MSG_LINE3); } }
        public IField WS_FDSO_MSG_LINE4 { get { return GetElementByName<IField>(Names.WS_FDSO_MSG_LINE4); } }
        public IField WS_FDSO_MSG_LINE5 { get { return GetElementByName<IField>(Names.WS_FDSO_MSG_LINE5); } }
        public IField WS_MSG { get { return GetElementByName<IField>(Names.WS_MSG); } }
        public IField FSTAT_T1 { get { return GetExternalElementByName<IField>(Names.FSTAT_T1); } }
        public IField FSTAT_P1 { get { return GetExternalElementByName<IField>(Names.FSTAT_P1); } }
        public IGroup WS_CONTROL_FIELDS { get { return GetElementByName<IGroup>(Names.WS_CONTROL_FIELDS); } }
        public IField EOF_FLAG { get { return GetElementByName<IField>(Names.EOF_FLAG); } }
        public IField MAX_INDEX { get { return GetElementByName<IField>(Names.MAX_INDEX); } }
        public IField ARRAY_INDEX { get { return GetElementByName<IField>(Names.ARRAY_INDEX); } }
        public IField WS_RES { get { return GetElementByName<IField>(Names.WS_RES); } }
        public IGroup WS_REC { get { return GetElementByName<IGroup>(Names.WS_REC); } }
        public IGroup WS_REC_CONTROL { get { return GetElementByName<IGroup>(Names.WS_REC_CONTROL); } }
        public IField WS_REC_TYPE { get { return GetElementByName<IField>(Names.WS_REC_TYPE); } }
        public IField WS_REC_PMNT_REQ_ID { get { return GetElementByName<IField>(Names.WS_REC_PMNT_REQ_ID); } }
        public IField WS_REC_DATA { get { return GetElementByName<IField>(Names.WS_REC_DATA); } }
        public IGroup WS_FORMAT { get { return GetElementByName<IGroup>(Names.WS_FORMAT); } }
        public IField WS_FORMAT_B { get { return GetElementByName<IField>(Names.WS_FORMAT_B); } }
        public IField WS_FORMAT_DATA { get { return GetElementByName<IField>(Names.WS_FORMAT_DATA); } }
        public IGroup WS_REC_HEADER { get { return GetElementByName<IGroup>(Names.WS_REC_HEADER); } }
        public IField WS_HEADER_ID { get { return GetElementByName<IField>(Names.WS_HEADER_ID); } }
        public IField WS_HEADER_PROCESS_DATE { get { return GetElementByName<IField>(Names.WS_HEADER_PROCESS_DATE); } }
        public IField WS_HEADER_WARRANT_DATE { get { return GetElementByName<IField>(Names.WS_HEADER_WARRANT_DATE); } }
        public IGroup WS_HEADER_VOUCHER_NO { get { return GetElementByName<IGroup>(Names.WS_HEADER_VOUCHER_NO); } }
        public IField WS_HEADER_VOUCHER_NO_RCVD { get { return GetElementByName<IField>(Names.WS_HEADER_VOUCHER_NO_RCVD); } }
        public IGroup WS_REC_WARDET_LINE { get { return GetElementByName<IGroup>(Names.WS_REC_WARDET_LINE); } }
        public IField WS_REC_WARDET_PAYEE_NAME { get { return GetElementByName<IField>(Names.WS_REC_WARDET_PAYEE_NAME); } }
        public IField WS_REC_WARDET_PMNT_AMT { get { return GetElementByName<IField>(Names.WS_REC_WARDET_PMNT_AMT); } }
        public IField WS_REC_WARDET_PRN_DT { get { return GetElementByName<IField>(Names.WS_REC_WARDET_PRN_DT); } }
        public IField WS_REC_WARDET_WAR_NUM { get { return GetElementByName<IField>(Names.WS_REC_WARDET_WAR_NUM); } }
        public IField WS_REC_WARDET_AGENCY_NUMBER { get { return GetElementByName<IField>(Names.WS_REC_WARDET_AGENCY_NUMBER); } }
        public IField WS_REC_WARDET_FUND_NUMBER { get { return GetElementByName<IField>(Names.WS_REC_WARDET_FUND_NUMBER); } }
        public IGroup WS_REC_STUB_LINE1 { get { return GetElementByName<IGroup>(Names.WS_REC_STUB_LINE1); } }
        public IField WS_REC1_PAYEE_NAME { get { return GetElementByName<IField>(Names.WS_REC1_PAYEE_NAME); } }
        public IField WS_REC1_PAYEE_NUM { get { return GetElementByName<IField>(Names.WS_REC1_PAYEE_NUM); } }
        public IField WS_REC1_AMT { get { return GetElementByName<IField>(Names.WS_REC1_AMT); } }
        public IGroup WS_REC_STUB_LINE1_1 { get { return GetElementByName<IGroup>(Names.WS_REC_STUB_LINE1_1); } }
        public IField WS_REC11_PAYEE_NAME { get { return GetElementByName<IField>(Names.WS_REC11_PAYEE_NAME); } }
        public IField WS_REC11_PAYEE_NUM { get { return GetElementByName<IField>(Names.WS_REC11_PAYEE_NUM); } }
        public IGroup WS_REC_STUB_LINE2 { get { return GetElementByName<IGroup>(Names.WS_REC_STUB_LINE2); } }
        public IField WS_DES_NAME { get { return GetElementByName<IField>(Names.WS_DES_NAME); } }
        public IField WS_REC2_DESIG_NAME { get { return GetElementByName<IField>(Names.WS_REC2_DESIG_NAME); } }
        public IField WS_REC2_DESIG_NUM { get { return GetElementByName<IField>(Names.WS_REC2_DESIG_NUM); } }
        public IField WS_REC2_FIPS_CODE { get { return GetElementByName<IField>(Names.WS_REC2_FIPS_CODE); } }
        public IField WS_MED_DESC { get { return GetElementByName<IField>(Names.WS_MED_DESC); } }
        public IField WS_MED_SUPPORT_FLAG { get { return GetElementByName<IField>(Names.WS_MED_SUPPORT_FLAG); } }
        public IGroup WS_INTERSTATE_LINE { get { return GetElementByName<IGroup>(Names.WS_INTERSTATE_LINE); } }
        public IField WS_AP_NAME { get { return GetElementByName<IField>(Names.WS_AP_NAME); } }
        public IField WS_AP_SSN { get { return GetElementByName<IField>(Names.WS_AP_SSN); } }
        public IField WS_CASE_NO { get { return GetElementByName<IField>(Names.WS_CASE_NO); } }
        public IField WS_INT_COURT_NO { get { return GetElementByName<IField>(Names.WS_INT_COURT_NO); } }
        public IGroup WS_REC_STUB_LINE3 { get { return GetElementByName<IGroup>(Names.WS_REC_STUB_LINE3); } }
        public IGroup WS_REC_STUB_LINE4 { get { return GetElementByName<IGroup>(Names.WS_REC_STUB_LINE4); } }
        public IGroup WS_REC_STUB_LINE5 { get { return GetElementByName<IGroup>(Names.WS_REC_STUB_LINE5); } }
        public IField WS_REC5_PAYOR { get { return GetElementByName<IField>(Names.WS_REC5_PAYOR); } }
        public IField WS_REC5_PAYOR_NAME { get { return GetElementByName<IField>(Names.WS_REC5_PAYOR_NAME); } }
        public IField WS_REC5_NUM { get { return GetElementByName<IField>(Names.WS_REC5_NUM); } }
        public IField WS_REC5_ORD_NUM { get { return GetElementByName<IField>(Names.WS_REC5_ORD_NUM); } }
        public IField WS_REC_STUB_LINE5_STORE { get { return GetElementByName<IField>(Names.WS_REC_STUB_LINE5_STORE); } }
        public IGroup WS_REC_STUB_LINE6 { get { return GetElementByName<IGroup>(Names.WS_REC_STUB_LINE6); } }
        public IField WS_REC6_REC_TYPE { get { return GetElementByName<IField>(Names.WS_REC6_REC_TYPE); } }
        public IField WS_REC6_TRN_NAME { get { return GetElementByName<IField>(Names.WS_REC6_TRN_NAME); } }
        public IField WS_REC6_TRN_DATE { get { return GetElementByName<IField>(Names.WS_REC6_TRN_DATE); } }
        public IGroup WS_REC6_TRN_AMOUNT { get { return GetElementByName<IGroup>(Names.WS_REC6_TRN_AMOUNT); } }
        public IField WS_REC6_TRN_CREDIT_AMT { get { return GetElementByName<IField>(Names.WS_REC6_TRN_CREDIT_AMT); } }
        public IField WS_REC6_TRN_DEBIT_AMT { get { return GetElementByName<IField>(Names.WS_REC6_TRN_DEBIT_AMT); } }
        public IField WS_REC6_DOLLAR_SIGN { get { return GetElementByName<IField>(Names.WS_REC6_DOLLAR_SIGN); } }
        public IField WS_REC6_TRN_NET_AMT { get { return GetElementByName<IField>(Names.WS_REC6_TRN_NET_AMT); } }
        public IGroup WS_REC_STUB_LINE7 { get { return GetElementByName<IGroup>(Names.WS_REC_STUB_LINE7); } }
        public IField WS_REC7_STUB_LINE { get { return GetElementByName<IField>(Names.WS_REC7_STUB_LINE); } }
        public IGroup WS_REC_STUB_LINE8 { get { return GetElementByName<IGroup>(Names.WS_REC_STUB_LINE8); } }
        public IField WS_REC8_STUB_LINE { get { return GetElementByName<IField>(Names.WS_REC8_STUB_LINE); } }
        public IField WS_REC8_PAGE_COUNT { get { return GetElementByName<IField>(Names.WS_REC8_PAGE_COUNT); } }
        public IGroup WS_REFUND_REASON { get { return GetElementByName<IGroup>(Names.WS_REFUND_REASON); } }
        public IField WS_REFUND_REASON_LINE1 { get { return GetElementByName<IField>(Names.WS_REFUND_REASON_LINE1); } }
        public IField WS_REFUND_REASON_LINE2 { get { return GetElementByName<IField>(Names.WS_REFUND_REASON_LINE2); } }
        public IField WS_REFUND_REASON_LINE3 { get { return GetElementByName<IField>(Names.WS_REFUND_REASON_LINE3); } }
        public IGroup WS_STMT_DATE_LINE { get { return GetElementByName<IGroup>(Names.WS_STMT_DATE_LINE); } }
        public IField WS_STATEMENT_DATE { get { return GetElementByName<IField>(Names.WS_STATEMENT_DATE); } }
        public IGroup WS_REC_ADDRESS_LINE { get { return GetElementByName<IGroup>(Names.WS_REC_ADDRESS_LINE); } }
        public IGroup DOMESTIC_ADDR { get { return GetElementByName<IGroup>(Names.DOMESTIC_ADDR); } }
        public IField WS_D_ADDRESS_TYPE { get { return GetElementByName<IField>(Names.WS_D_ADDRESS_TYPE); } }
        public IField D_STREET_1 { get { return GetElementByName<IField>(Names.D_STREET_1); } }
        public IField D_STREET_2 { get { return GetElementByName<IField>(Names.D_STREET_2); } }
        public IGroup D_ADDR_LINE5 { get { return GetElementByName<IGroup>(Names.D_ADDR_LINE5); } }
        public IField D_CITY { get { return GetElementByName<IField>(Names.D_CITY); } }
        public IField D_STATE { get { return GetElementByName<IField>(Names.D_STATE); } }
        public IField D_ZIP_CODE1 { get { return GetElementByName<IField>(Names.D_ZIP_CODE1); } }
        public IField D_ZIP_CODE2 { get { return GetElementByName<IField>(Names.D_ZIP_CODE2); } }
        public IGroup FOREIGN_ADDR { get { return GetElementByName<IGroup>(Names.FOREIGN_ADDR); } }
        public IField WS_F_ADDRESS_TYPE { get { return GetElementByName<IField>(Names.WS_F_ADDRESS_TYPE); } }
        public IField F_STREET_1 { get { return GetElementByName<IField>(Names.F_STREET_1); } }
        public IField F_STREET_2 { get { return GetElementByName<IField>(Names.F_STREET_2); } }
        public IField F_STREET_3 { get { return GetElementByName<IField>(Names.F_STREET_3); } }
        public IGroup F_ADDR_LINE6 { get { return GetElementByName<IGroup>(Names.F_ADDR_LINE6); } }
        public IField F_CITY { get { return GetElementByName<IField>(Names.F_CITY); } }
        public IField F_PROVINCE { get { return GetElementByName<IField>(Names.F_PROVINCE); } }
        public IField F_POSTAL_CODE { get { return GetElementByName<IField>(Names.F_POSTAL_CODE); } }
        public IField F_COUNTRY { get { return GetElementByName<IField>(Names.F_COUNTRY); } }
        public IGroup FROM_ADDRESS { get { return GetElementByName<IGroup>(Names.FROM_ADDRESS); } }
        public IGroup FROM_ADDRESS_LINE { get { return GetElementByName<IGroup>(Names.FROM_ADDRESS_LINE); } }
        public IGroup FROM_ADDRESS_d2 { get { return GetElementByName<IGroup>(Names.FROM_ADDRESS_d2); } }
        public IField FROM_CITY { get { return GetElementByName<IField>(Names.FROM_CITY); } }
        public IField FROM_DELIMETER1 { get { return GetElementByName<IField>(Names.FROM_DELIMETER1); } }
        public IField FROM_STATE { get { return GetElementByName<IField>(Names.FROM_STATE); } }
        public IField FROM_DELIMETER2 { get { return GetElementByName<IField>(Names.FROM_DELIMETER2); } }
        public IField FROM_ZIP_5 { get { return GetElementByName<IField>(Names.FROM_ZIP_5); } }
        public IField FROM_DELIMETER3 { get { return GetElementByName<IField>(Names.FROM_DELIMETER3); } }
        public IField FROM_ZIP_4 { get { return GetElementByName<IField>(Names.FROM_ZIP_4); } }
        public IField WS_PHONE_NUMBER { get { return GetElementByName<IField>(Names.WS_PHONE_NUMBER); } }
        public IGroup WS_PHONE_WORK { get { return GetElementByName<IGroup>(Names.WS_PHONE_WORK); } }
        public IField PHONE_3 { get { return GetElementByName<IField>(Names.PHONE_3); } }
        public IField PHONE_4 { get { return GetElementByName<IField>(Names.PHONE_4); } }
        public IGroup SP_TELE { get { return GetElementByName<IGroup>(Names.SP_TELE); } }
        public IField SP_TELE_AREA_CODE { get { return GetElementByName<IField>(Names.SP_TELE_AREA_CODE); } }
        public IField HYPHEN_1 { get { return GetElementByName<IField>(Names.HYPHEN_1); } }
        public IField SP_TELE_THREE_DIGIT { get { return GetElementByName<IField>(Names.SP_TELE_THREE_DIGIT); } }
        public IField HYPHEN_2 { get { return GetElementByName<IField>(Names.HYPHEN_2); } }
        public IField SP_TELE_FOUR_DIGIT { get { return GetElementByName<IField>(Names.SP_TELE_FOUR_DIGIT); } }
        public IField EXT_LITERAL { get { return GetElementByName<IField>(Names.EXT_LITERAL); } }
        public IField SP_TELE_EXTENSION { get { return GetElementByName<IField>(Names.SP_TELE_EXTENSION); } }
        public IGroup AR_ADDRESS { get { return GetElementByName<IGroup>(Names.AR_ADDRESS); } }
        public IGroup AR_ADDRESS_LINE { get { return GetElementByName<IGroup>(Names.AR_ADDRESS_LINE); } }
        public IGroup AR_ADDRESS_D { get { return GetElementByName<IGroup>(Names.AR_ADDRESS_D); } }
        public IField AR_D_CITY { get { return GetElementByName<IField>(Names.AR_D_CITY); } }
        public IField AR_D_DELIMETER1 { get { return GetElementByName<IField>(Names.AR_D_DELIMETER1); } }
        public IField AR_D_STATE { get { return GetElementByName<IField>(Names.AR_D_STATE); } }
        public IField AR_D_DELIMETER2 { get { return GetElementByName<IField>(Names.AR_D_DELIMETER2); } }
        public IField AR_D_ZIP_5 { get { return GetElementByName<IField>(Names.AR_D_ZIP_5); } }
        public IField AR_D_DELIMETER3 { get { return GetElementByName<IField>(Names.AR_D_DELIMETER3); } }
        public IField AR_D_ZIP_4 { get { return GetElementByName<IField>(Names.AR_D_ZIP_4); } }
        public IGroup AR_ADDRESS_F { get { return GetElementByName<IGroup>(Names.AR_ADDRESS_F); } }
        public IField AR_F_CITY { get { return GetElementByName<IField>(Names.AR_F_CITY); } }
        public IField AR_F_DELIMETER1 { get { return GetElementByName<IField>(Names.AR_F_DELIMETER1); } }
        public IField AR_F_PROVINCE { get { return GetElementByName<IField>(Names.AR_F_PROVINCE); } }
        public IField AR_F_DELIMETER1_d2 { get { return GetElementByName<IField>(Names.AR_F_DELIMETER1_d2); } }
        public IField AR_F_POSTAL_CODE { get { return GetElementByName<IField>(Names.AR_F_POSTAL_CODE); } }
        public IField AR_F_DELIMETER2 { get { return GetElementByName<IField>(Names.AR_F_DELIMETER2); } }
        public IField AR_F_COUNTRY { get { return GetElementByName<IField>(Names.AR_F_COUNTRY); } }
        public IGroup WS_WORK_AREA { get { return GetElementByName<IGroup>(Names.WS_WORK_AREA); } }
        public IField WS_WORK_REC { get { return GetElementByName<IField>(Names.WS_WORK_REC); } }
        public IGroup WS_STARSREC_LINES { get { return GetElementByName<IGroup>(Names.WS_STARSREC_LINES); } }
        public IGroup WS_STARS_LINE0_1 { get { return GetElementByName<IGroup>(Names.WS_STARS_LINE0_1); } }
        public IField STARS_PG_NO { get { return GetElementByName<IField>(Names.STARS_PG_NO); } }
        public IGroup WS_STARS_LINE0_2 { get { return GetElementByName<IGroup>(Names.WS_STARS_LINE0_2); } }
        public IField DOC_PREFIX { get { return GetElementByName<IField>(Names.DOC_PREFIX); } }
        public IField DOC_NO { get { return GetElementByName<IField>(Names.DOC_NO); } }
        public IGroup WS_STARS_LINE1 { get { return GetElementByName<IGroup>(Names.WS_STARS_LINE1); } }
        public IField DOC_DATE { get { return GetElementByName<IField>(Names.DOC_DATE); } }
        public IField EFFECTIVE_DATE { get { return GetElementByName<IField>(Names.EFFECTIVE_DATE); } }
        public IGroup WS_STARS_DET_LINE { get { return GetElementByName<IGroup>(Names.WS_STARS_DET_LINE); } }
        public IField VOUCHER_NO { get { return GetElementByName<IField>(Names.VOUCHER_NO); } }
        public IField FINANCIAL_YEAR { get { return GetElementByName<IField>(Names.FINANCIAL_YEAR); } }
        public IField SFX1 { get { return GetElementByName<IField>(Names.SFX1); } }
        public IField TRAN_CODE { get { return GetElementByName<IField>(Names.TRAN_CODE); } }
        public IField REF_DOC_NO { get { return GetElementByName<IField>(Names.REF_DOC_NO); } }
        public IField SFX2 { get { return GetElementByName<IField>(Names.SFX2); } }
        public IField M_WHAT { get { return GetElementByName<IField>(Names.M_WHAT); } }
        public IField AGENCY { get { return GetElementByName<IField>(Names.AGENCY); } }
        public IField FUND { get { return GetElementByName<IField>(Names.FUND); } }
        public IField BEG_FY { get { return GetElementByName<IField>(Names.BEG_FY); } }
        public IField STARS_INDEX { get { return GetElementByName<IField>(Names.STARS_INDEX); } }
        public IField PCA { get { return GetElementByName<IField>(Names.PCA); } }
        public IField EXP_SUB_OB { get { return GetElementByName<IField>(Names.EXP_SUB_OB); } }
        public IField REV_SUB_OB { get { return GetElementByName<IField>(Names.REV_SUB_OB); } }
        public IField DET { get { return GetElementByName<IField>(Names.DET); } }
        public IField R_WHAT { get { return GetElementByName<IField>(Names.R_WHAT); } }
        public IField AMOUNT { get { return GetElementByName<IField>(Names.AMOUNT); } }
        public IGroup WS_STARS_LINE3 { get { return GetElementByName<IGroup>(Names.WS_STARS_LINE3); } }
        public IField USER_ID { get { return GetElementByName<IField>(Names.USER_ID); } }
        public IField STARS_TOT_AMT { get { return GetElementByName<IField>(Names.STARS_TOT_AMT); } }
        public IGroup STUFFING_MC_LINE { get { return GetElementByName<IGroup>(Names.STUFFING_MC_LINE); } }
        public IField DASHES { get { return GetElementByName<IField>(Names.DASHES); } }
        public IField ADIM1 { get { return GetElementByName<IField>(Names.ADIM1); } }
        public IField ADIM2 { get { return GetElementByName<IField>(Names.ADIM2); } }
        public IField ADIM3 { get { return GetElementByName<IField>(Names.ADIM3); } }
        public IField IMPORT_DETLINE_0001FL { get { return GetElementByName<IField>(Names.IMPORT_DETLINE_0001FL); } }
        public IField IMPORT_DETLINE_0001PS { get { return GetElementByName<IField>(Names.IMPORT_DETLINE_0001PS); } }
        public IField IMPORT_DETLINE_0001RF { get { return GetElementByName<IField>(Names.IMPORT_DETLINE_0001RF); } }
        public IField IMPORT_DETLINE_0001MM { get { return GetElementByName<IField>(Names.IMPORT_DETLINE_0001MM); } }
        public IField IMPORT_GROUP_0002FL { get { return GetElementByName<IField>(Names.IMPORT_GROUP_0002FL); } }
        public IField IMPORT_GROUP_0002PS { get { return GetElementByName<IField>(Names.IMPORT_GROUP_0002PS); } }
        public IField IMPORT_GROUP_0002RF { get { return GetElementByName<IField>(Names.IMPORT_GROUP_0002RF); } }
        public IField IMPORT_GROUP_0002MM { get { return GetElementByName<IField>(Names.IMPORT_GROUP_0002MM); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.WS_WORK_VARIABLES, (WS_WORK_VARIABLES) =>
           {
               WS_WORK_VARIABLES.CreateNewField(Names.WS_BEG_FY, FieldType.UnsignedNumeric, 2, ZERO);
               WS_WORK_VARIABLES.CreateNewField(Names.WS_BLANK_LINE, FieldType.String, 125, SPACES);
               WS_WORK_VARIABLES.CreateNewField(Names.WS_MAX_LINE_PER_PAGE, FieldType.UnsignedNumeric, 2, 51);
               WS_WORK_VARIABLES.CreateNewField(Names.WS_NO_OF_PAGES_IN_STMT, FieldType.UnsignedNumeric, 2, 0);
               WS_WORK_VARIABLES.CreateNewField(Names.WS_MAX_NO_OF_PAGES_PER_MAIL, FieldType.UnsignedNumeric, 1, 4);
               WS_WORK_VARIABLES.CreateNewField(Names.WS_CURRENT_PAGE_NUMBER, FieldType.UnsignedNumeric, 1, ZERO);

               IField WS_TEMP_DATE_local = WS_WORK_VARIABLES.CreateNewField(Names.WS_TEMP_DATE, FieldType.String, 8, SPACES);
               WS_WORK_VARIABLES.CreateNewField(Names.WS_REC_PRQ_ID_N, FieldType.UnsignedNumeric, 9);
               WS_WORK_VARIABLES.CreateNewField(Names.ADVANCE_COUNTER, FieldType.UnsignedNumeric, 2);
               WS_WORK_VARIABLES.CreateNewField(Names.PAGE_COUNT, FieldType.UnsignedNumeric, 1, ZERO);
               WS_WORK_VARIABLES.CreateNewField(Names.LINE_COUNT, FieldType.UnsignedNumeric, 2, ZERO);
               WS_WORK_VARIABLES.CreateNewField(Names.FIRST_TIME_FLAG, FieldType.String, 1, SPACE);
               WS_WORK_VARIABLES.CreateNewField(Names.NEW_COUPON_FLAG, FieldType.String, 1, SPACE);
               WS_WORK_VARIABLES.CreateNewField(Names.PREVIOUS_REC, FieldType.String, 126);
               WS_WORK_VARIABLES.CreateNewField(Names.CURRENT_REC, FieldType.String, 126);
               WS_WORK_VARIABLES.CreateNewField(Names.STARS_COUNTER, FieldType.UnsignedNumeric, 2, 0);
               WS_WORK_VARIABLES.CreateNewField(Names.IS_PERM_FILE_EMPTY, FieldType.String, 1, SPACE);
           });

            recordDef.CreateNewGroup(Names.FILE_STATUS, (FILE_STATUS) =>
           {
               FILE_STATUS.CreateNewField(Names.FSTAT_1, FieldType.String, 2);
               FILE_STATUS.CreateNewField(Names.FSTAT_2, FieldType.String, 2);
               FILE_STATUS.CreateNewField(Names.FSTAT_3, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.WS_MVS_DATE, (WS_MVS_DATE) =>
           {
               WS_MVS_DATE.CreateNewField(Names.WS_MVS_DATE_YY, FieldType.UnsignedNumeric, 2);
               WS_MVS_DATE.CreateNewField(Names.WS_MVS_DATE_MM, FieldType.UnsignedNumeric, 2);
               WS_MVS_DATE.CreateNewField(Names.WS_MVS_DATE_DD, FieldType.UnsignedNumeric, 2);
           });

            recordDef.CreateNewGroup(Names.WS_MVS_FORMATTED_DATE, (WS_MVS_FORMATTED_DATE) =>
           {
               IGroup WS_MVS_FORMATTED_DATE_N_local = (IGroup)WS_MVS_FORMATTED_DATE.CreateNewGroup(Names.WS_MVS_FORMATTED_DATE_N, (WS_MVS_FORMATTED_DATE_N) =>
               {
                   WS_MVS_FORMATTED_DATE_N.CreateNewField(Names.WS_MVS_FORMATTED_DATE_CC, FieldType.UnsignedNumeric, 2);
                   WS_MVS_FORMATTED_DATE_N.CreateNewField(Names.WS_MVS_FORMATTED_DATE_YY, FieldType.UnsignedNumeric, 2);
                   WS_MVS_FORMATTED_DATE_N.CreateNewField(Names.WS_MVS_FORMATTED_DATE_MM, FieldType.UnsignedNumeric, 2);
                   WS_MVS_FORMATTED_DATE_N.CreateNewField(Names.WS_MVS_FORMATTED_DATE_DD, FieldType.UnsignedNumeric, 2);
               });
               WS_MVS_FORMATTED_DATE.CreateNewFieldRedefine(Names.WS_MVS_FORMATTED_DATE_X, FieldType.String, WS_MVS_FORMATTED_DATE_N_local, 8);
               IGroup WS_TEMP_DATE_d2_local = (IGroup)WS_MVS_FORMATTED_DATE.CreateNewGroup(Names.WS_TEMP_DATE_d2, (WS_TEMP_DATE_d2) =>
               {
                   WS_TEMP_DATE_d2.CreateNewField(Names.WS_TEMP_DATE_MM, FieldType.UnsignedNumeric, 2);
                   WS_TEMP_DATE_d2.CreateNewFillerField(FieldType.String, 1, "/");
                   WS_TEMP_DATE_d2.CreateNewField(Names.WS_TEMP_DATE_DD, FieldType.UnsignedNumeric, 2);
                   WS_TEMP_DATE_d2.CreateNewFillerField(FieldType.String, 1, "/");
                   WS_TEMP_DATE_d2.CreateNewField(Names.WS_TEMP_DATE_CC, FieldType.UnsignedNumeric, 2);
                   WS_TEMP_DATE_d2.CreateNewField(Names.WS_TEMP_DATE_YY, FieldType.UnsignedNumeric, 2);
               });
               WS_MVS_FORMATTED_DATE.CreateNewFieldRedefine(Names.WS_TEMP_OUTPUT_DATE, FieldType.String, WS_TEMP_DATE_d2_local, 10);
           });

            recordDef.CreateNewGroup(Names.WS_FORMATTED_DATE_NX, (WS_FORMATTED_DATE_NX) =>
           {
               IGroup WS_FORMATTED_DATE_N_local = (IGroup)WS_FORMATTED_DATE_NX.CreateNewGroup(Names.WS_FORMATTED_DATE_N, (WS_FORMATTED_DATE_N) =>
               {
                   WS_FORMATTED_DATE_N.CreateNewField(Names.WS_FORMATTED_DATE_CC, FieldType.UnsignedNumeric, 2);
                   WS_FORMATTED_DATE_N.CreateNewField(Names.WS_FORMATTED_DATE_YY, FieldType.UnsignedNumeric, 2);
                   WS_FORMATTED_DATE_N.CreateNewField(Names.WS_FORMATTED_DATE_MM, FieldType.UnsignedNumeric, 2);
                   WS_FORMATTED_DATE_N.CreateNewField(Names.WS_FORMATTED_DATE_DD, FieldType.UnsignedNumeric, 2);
               });
               WS_FORMATTED_DATE_NX.CreateNewFieldRedefine(Names.WS_FORMATTED_DATE_X, FieldType.String, WS_FORMATTED_DATE_N_local, 8);
           });

            recordDef.CreateNewGroup(Names.WS_MESSAGE_AREA, (WS_MESSAGE_AREA) =>
           {
               WS_MESSAGE_AREA.CreateNewField(Names.WS_OVERFLOW_MSG_LINE1, FieldType.String, 80, "MORE DETAILS EXIST THAN CAN BE PRINTED. IF YOU HAVE QUESTIONS,");
               WS_MESSAGE_AREA.CreateNewField(Names.WS_OVERFLOW_MSG_LINE2, FieldType.String, 80, "PLEASE CONTACT YOUR LOCAL CHILD SUPPORT OFFICE.");
           });
            recordDef.CreateNewField(Names.WS_AR_OVERFLOW_MSG, FieldType.String, 60, "ADDITIONAL STATEMENT DETAILS FOLLOW IN ANOTHER ENVELOPE");

            recordDef.CreateNewGroup(Names.WS_FDSO_COLL_MSGS, (WS_FDSO_COLL_MSGS) =>
           {
               WS_FDSO_COLL_MSGS.CreateNewField(Names.WS_FDSO_MSG_LINE1, FieldType.String, 115, "THIS CHILD SUPPORT CHECK CONTAINS A COLLECTION FROM AN IRS TAX REFUND. IF THIS COLLECTION WAS MADE FROM A JOINT ");
               WS_FDSO_COLL_MSGS.CreateNewField(Names.WS_FDSO_MSG_LINE2, FieldType.String, 115, "RETURN, THE SPOUSE OF THE ABSENT PARENT HAS UP TO SIX (6) YEARS TO RECEIVE ALL OR PART OF THE TAX REFUND THAT ");
               WS_FDSO_COLL_MSGS.CreateNewField(Names.WS_FDSO_MSG_LINE3, FieldType.String, 115, "BELONGS TO THEM. IT IS THE POLICY OF THE SRS CHILD SUPPORT ENFORCEMENT PROGRAM TO RELEASE THE PAYMENT TO YOU AS");
               WS_FDSO_COLL_MSGS.CreateNewField(Names.WS_FDSO_MSG_LINE4, FieldType.String, 115, "AN ADVANCE AND NOT HOLD THE PAYMENT UNTIL THE SIX-YEAR FILING PERIOD IS OVER. BECAUSE OF THIS POLICY, ANY      ");
               WS_FDSO_COLL_MSGS.CreateNewField(Names.WS_FDSO_MSG_LINE5, FieldType.String, 115, "OVERPAYMENT YOU MAY RECEIVE IS SUBJECT TO RECOVERY BY SRS.");
           });
            recordDef.CreateNewField(Names.WS_MSG, FieldType.String, 125, SPACES);
            WsExternals.Instance.CreateNewField(Names.FSTAT_T1, FieldType.String, 2);
            WsExternals.Instance.CreateNewField(Names.FSTAT_P1, FieldType.String, 2);

            recordDef.CreateNewGroup(Names.WS_CONTROL_FIELDS, (WS_CONTROL_FIELDS) =>
           {
               WS_CONTROL_FIELDS.CreateNewField(Names.EOF_FLAG, FieldType.String, 1, SPACE);
               WS_CONTROL_FIELDS.CreateNewField(Names.MAX_INDEX, FieldType.UnsignedNumeric, 2, 15);
               WS_CONTROL_FIELDS.CreateNewField(Names.ARRAY_INDEX, FieldType.UnsignedNumeric, 2, 0);
           });
            recordDef.CreateNewField(Names.WS_RES, FieldType.String, 6, SPACE);

            recordDef.CreateNewGroup(Names.WS_REC, (WS_REC) =>
           {
               WS_REC.CreateNewGroup(Names.WS_REC_CONTROL, (WS_REC_CONTROL) =>
               {
                   WS_REC_CONTROL.CreateNewField(Names.WS_REC_TYPE, FieldType.String, 1, SPACE);
                   WS_REC_CONTROL.CreateNewField(Names.WS_REC_PMNT_REQ_ID, FieldType.String, 9, SPACE);
               });
               WS_REC.CreateNewField(Names.WS_REC_DATA, FieldType.String, 115, SPACE);
           });

            recordDef.CreateNewGroup(Names.WS_FORMAT, (WS_FORMAT) =>
           {
               WS_FORMAT.CreateNewField(Names.WS_FORMAT_B, FieldType.String, 8, SPACE);
               WS_FORMAT.CreateNewField(Names.WS_FORMAT_DATA, FieldType.String, 117, SPACE);
           });

            recordDef.CreateNewGroup(Names.WS_REC_HEADER, (WS_REC_HEADER) =>
           {
               WS_REC_HEADER.CreateNewField(Names.WS_HEADER_ID, FieldType.String, 3, "521");
               WS_REC_HEADER.CreateNewField(Names.WS_HEADER_PROCESS_DATE, FieldType.String, 8, SPACE);
               WS_REC_HEADER.CreateNewField(Names.WS_HEADER_WARRANT_DATE, FieldType.String, 8, SPACE);
               WS_REC_HEADER.CreateNewGroup(Names.WS_HEADER_VOUCHER_NO, (WS_HEADER_VOUCHER_NO) =>
               {
                   WS_HEADER_VOUCHER_NO.CreateNewField(Names.WS_HEADER_VOUCHER_NO_RCVD, FieldType.String, 5, SPACES);
               });
               WS_REC_HEADER.CreateNewFillerField(FieldType.String, 91, SPACES);
           });

            recordDef.CreateNewGroup(Names.WS_REC_WARDET_LINE, (WS_REC_WARDET_LINE) =>
           {
               WS_REC_WARDET_LINE.CreateNewField(Names.WS_REC_WARDET_PAYEE_NAME, FieldType.String, 33);
               WS_REC_WARDET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
               WS_REC_WARDET_LINE.CreateNewField(Names.WS_REC_WARDET_PMNT_AMT, FieldType.NumericEdited, "Z(6)9.99", 10, null, 2);
               WS_REC_WARDET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
               WS_REC_WARDET_LINE.CreateNewField(Names.WS_REC_WARDET_PRN_DT, FieldType.String, 8);
               WS_REC_WARDET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
               WS_REC_WARDET_LINE.CreateNewField(Names.WS_REC_WARDET_WAR_NUM, FieldType.String, 9);
               WS_REC_WARDET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
               WS_REC_WARDET_LINE.CreateNewField(Names.WS_REC_WARDET_AGENCY_NUMBER, FieldType.String, 3, SPACES);
               WS_REC_WARDET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
               WS_REC_WARDET_LINE.CreateNewField(Names.WS_REC_WARDET_FUND_NUMBER, FieldType.String, 5, "9218 ");
               WS_REC_WARDET_LINE.CreateNewFillerField(FieldType.String, 42, SPACES);
           });

            recordDef.CreateNewGroup(Names.WS_REC_STUB_LINE1, (WS_REC_STUB_LINE1) =>
           {
               WS_REC_STUB_LINE1.CreateNewField(Names.WS_REC1_PAYEE_NAME, FieldType.String, 33);
               WS_REC_STUB_LINE1.CreateNewFillerField(FieldType.String, 1, SPACES);
               WS_REC_STUB_LINE1.CreateNewField(Names.WS_REC1_PAYEE_NUM, FieldType.String, 10);
               WS_REC_STUB_LINE1.CreateNewFillerField(FieldType.String, 1, SPACES);
               WS_REC_STUB_LINE1.CreateNewField(Names.WS_REC1_AMT, FieldType.NumericEdited, "$(6)9.99", 10, null, 2);
           });

            recordDef.CreateNewGroup(Names.WS_REC_STUB_LINE1_1, (WS_REC_STUB_LINE1_1) =>
           {
               WS_REC_STUB_LINE1_1.CreateNewFillerField(FieldType.String, 17, "PAYEE ");
               WS_REC_STUB_LINE1_1.CreateNewField(Names.WS_REC11_PAYEE_NAME, FieldType.String, 33);
               WS_REC_STUB_LINE1_1.CreateNewFillerField(FieldType.String, 5, SPACES);
               WS_REC_STUB_LINE1_1.CreateNewField(Names.WS_REC11_PAYEE_NUM, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.WS_REC_STUB_LINE2, (WS_REC_STUB_LINE2) =>
           {
               WS_REC_STUB_LINE2.CreateNewField(Names.WS_DES_NAME, FieldType.String, 17, "DESIGNATED PAYEE ");
               WS_REC_STUB_LINE2.CreateNewField(Names.WS_REC2_DESIG_NAME, FieldType.String, 33, SPACE);
               WS_REC_STUB_LINE2.CreateNewFillerField(FieldType.String, 5, SPACES);
               WS_REC_STUB_LINE2.CreateNewField(Names.WS_REC2_DESIG_NUM, FieldType.String, 10, SPACE);
               WS_REC_STUB_LINE2.CreateNewFillerField(FieldType.String, 4, SPACES);
               WS_REC_STUB_LINE2.CreateNewFillerField(FieldType.String, 5, "FIPS ");
               WS_REC_STUB_LINE2.CreateNewField(Names.WS_REC2_FIPS_CODE, FieldType.String, 8, SPACE);
               WS_REC_STUB_LINE2.CreateNewFillerField(FieldType.String, 5, SPACE);
               WS_REC_STUB_LINE2.CreateNewField(Names.WS_MED_DESC, FieldType.String, 16, "MEDICAL SUPPORT ");
               WS_REC_STUB_LINE2.CreateNewField(Names.WS_MED_SUPPORT_FLAG, FieldType.String, 1, SPACE);
           });

            recordDef.CreateNewGroup(Names.WS_INTERSTATE_LINE, (WS_INTERSTATE_LINE) =>
           {
               WS_INTERSTATE_LINE.CreateNewFillerField(FieldType.String, 17, "AP NAME          ");
               WS_INTERSTATE_LINE.CreateNewField(Names.WS_AP_NAME, FieldType.String, 12, SPACE);
               WS_INTERSTATE_LINE.CreateNewFillerField(FieldType.String, 8, " AP SSN ");
               WS_INTERSTATE_LINE.CreateNewField(Names.WS_AP_SSN, FieldType.String, 11, SPACE);
               WS_INTERSTATE_LINE.CreateNewFillerField(FieldType.String, 12, "       CASE ");
               WS_INTERSTATE_LINE.CreateNewField(Names.WS_CASE_NO, FieldType.String, 20, SPACE);
               WS_INTERSTATE_LINE.CreateNewFillerField(FieldType.String, 16, "    COURT ORDER ");
               WS_INTERSTATE_LINE.CreateNewField(Names.WS_INT_COURT_NO, FieldType.String, 12, SPACE);
           });

            recordDef.CreateNewGroup(Names.WS_REC_STUB_LINE3, (WS_REC_STUB_LINE3) =>
           {
               WS_REC_STUB_LINE3.CreateNewFillerField(FieldType.String, 11, "PAYOR NAME/");
               WS_REC_STUB_LINE3.CreateNewFillerField(FieldType.String, 30, SPACES);
               WS_REC_STUB_LINE3.CreateNewFillerField(FieldType.String, 25, SPACES);
               WS_REC_STUB_LINE3.CreateNewFillerField(FieldType.String, 5, SPACES);
               WS_REC_STUB_LINE3.CreateNewFillerField(FieldType.String, 43, SPACES);
           });

            recordDef.CreateNewGroup(Names.WS_REC_STUB_LINE4, (WS_REC_STUB_LINE4) =>
           {
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 30, "     ACTIVITY DESCRIPTION     ");
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 11, SPACES);
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 10, "PERSON NBR");
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 3, SPACES);
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 12, "COURT ORDER");
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 3, SPACES);
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 8, "DATE    ");
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 3, SPACES);
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 9, "$ ADDED  ");
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 2, SPACES);
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 12, "$ SUBTRACTED");
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 2, SPACES);
               WS_REC_STUB_LINE4.CreateNewFillerField(FieldType.String, 12, "$ PAYMENT   ");
           });

            recordDef.CreateNewGroup(Names.WS_REC_STUB_LINE5, (WS_REC_STUB_LINE5) =>
           {
               WS_REC_STUB_LINE5.CreateNewField(Names.WS_REC5_PAYOR, FieldType.String, 6, "PAYOR ");
               WS_REC_STUB_LINE5.CreateNewField(Names.WS_REC5_PAYOR_NAME, FieldType.String, 31);
               WS_REC_STUB_LINE5.CreateNewFillerField(FieldType.String, 4, SPACES);
               WS_REC_STUB_LINE5.CreateNewField(Names.WS_REC5_NUM, FieldType.String, 10);
               WS_REC_STUB_LINE5.CreateNewFillerField(FieldType.String, 3, SPACES);
               WS_REC_STUB_LINE5.CreateNewField(Names.WS_REC5_ORD_NUM, FieldType.String, 12);
           });
            recordDef.CreateNewField(Names.WS_REC_STUB_LINE5_STORE, FieldType.String, 66, SPACES);

            recordDef.CreateNewGroup(Names.WS_REC_STUB_LINE6, (WS_REC_STUB_LINE6) =>
           {
               WS_REC_STUB_LINE6.CreateNewField(Names.WS_REC6_REC_TYPE, FieldType.String, 1, SPACES);
               WS_REC_STUB_LINE6.CreateNewFillerField(FieldType.String, 4, SPACES);
               WS_REC_STUB_LINE6.CreateNewField(Names.WS_REC6_TRN_NAME, FieldType.String, 40);
               WS_REC_STUB_LINE6.CreateNewFillerField(FieldType.String, 24, SPACES);
               WS_REC_STUB_LINE6.CreateNewField(Names.WS_REC6_TRN_DATE, FieldType.String, 10);
               WS_REC_STUB_LINE6.CreateNewGroup(Names.WS_REC6_TRN_AMOUNT, (WS_REC6_TRN_AMOUNT) =>
               {
                   WS_REC6_TRN_AMOUNT.CreateNewField(Names.WS_REC6_TRN_CREDIT_AMT, FieldType.NumericEdited, "Z(7).ZZ-", 11, null, 2);
                   WS_REC6_TRN_AMOUNT.CreateNewFillerField(FieldType.String, 2, SPACES);
                   WS_REC6_TRN_AMOUNT.CreateNewField(Names.WS_REC6_TRN_DEBIT_AMT, FieldType.NumericEdited, "Z(7).ZZ-", 11, null, 2);
               });
               WS_REC_STUB_LINE6.CreateNewField(Names.WS_REC6_DOLLAR_SIGN, FieldType.String, 1, SPACES);
               WS_REC_STUB_LINE6.CreateNewField(Names.WS_REC6_TRN_NET_AMT, FieldType.NumericEdited, "ZZZZ9.99-", 9, null, 2);
           });

            recordDef.CreateNewGroup(Names.WS_REC_STUB_LINE7, (WS_REC_STUB_LINE7) =>
           {
               WS_REC_STUB_LINE7.CreateNewFillerField(FieldType.String, 103, SPACES);
               WS_REC_STUB_LINE7.CreateNewField(Names.WS_REC7_STUB_LINE, FieldType.String, 12, "------------");
           });

            recordDef.CreateNewGroup(Names.WS_REC_STUB_LINE8, (WS_REC_STUB_LINE8) =>
           {
               WS_REC_STUB_LINE8.CreateNewFillerField(FieldType.String, 103, SPACES);
               WS_REC_STUB_LINE8.CreateNewField(Names.WS_REC8_STUB_LINE, FieldType.String, 9, "PAGE NO. ");
               WS_REC_STUB_LINE8.CreateNewField(Names.WS_REC8_PAGE_COUNT, FieldType.NumericEdited, "ZZ9", 3);
           });

            recordDef.CreateNewGroup(Names.WS_REFUND_REASON, (WS_REFUND_REASON) =>
           {
               WS_REFUND_REASON.CreateNewField(Names.WS_REFUND_REASON_LINE1, FieldType.String, 80, SPACES);
               WS_REFUND_REASON.CreateNewField(Names.WS_REFUND_REASON_LINE2, FieldType.String, 80, SPACES);
               WS_REFUND_REASON.CreateNewField(Names.WS_REFUND_REASON_LINE3, FieldType.String, 80, SPACES);
           });

            recordDef.CreateNewGroup(Names.WS_STMT_DATE_LINE, (WS_STMT_DATE_LINE) =>
           {
               WS_STMT_DATE_LINE.CreateNewFillerField(FieldType.String, 100, SPACES);
               WS_STMT_DATE_LINE.CreateNewField(Names.WS_STATEMENT_DATE, FieldType.String, 10, SPACES);
           });

            recordDef.CreateNewGroup(Names.WS_REC_ADDRESS_LINE, (WS_REC_ADDRESS_LINE) =>
           {
               WS_REC_ADDRESS_LINE.CreateNewGroup(Names.DOMESTIC_ADDR, (DOMESTIC_ADDR) =>
               {
                   DOMESTIC_ADDR.CreateNewField(Names.WS_D_ADDRESS_TYPE, FieldType.String, 1, SPACES);
                   DOMESTIC_ADDR.CreateNewFillerField(FieldType.String, 1, SPACES);
                   DOMESTIC_ADDR.CreateNewField(Names.D_STREET_1, FieldType.String, 25);
                   DOMESTIC_ADDR.CreateNewFillerField(FieldType.String, 1, SPACES);
                   DOMESTIC_ADDR.CreateNewField(Names.D_STREET_2, FieldType.String, 25);
                   DOMESTIC_ADDR.CreateNewFillerField(FieldType.String, 1, SPACES);
                   DOMESTIC_ADDR.CreateNewGroup(Names.D_ADDR_LINE5, (D_ADDR_LINE5) =>
                   {
                       D_ADDR_LINE5.CreateNewField(Names.D_CITY, FieldType.String, 15, SPACES);
                       D_ADDR_LINE5.CreateNewFillerField(FieldType.String, 1, SPACES);
                       D_ADDR_LINE5.CreateNewField(Names.D_STATE, FieldType.String, 2, SPACES);
                       D_ADDR_LINE5.CreateNewFillerField(FieldType.String, 1, SPACES);
                       D_ADDR_LINE5.CreateNewField(Names.D_ZIP_CODE1, FieldType.String, 5, SPACES);
                       D_ADDR_LINE5.CreateNewFillerField(FieldType.String, 1, SPACES);
                       D_ADDR_LINE5.CreateNewField(Names.D_ZIP_CODE2, FieldType.String, 4, SPACES);
                   });
               });
               WS_REC_ADDRESS_LINE.CreateNewGroup(Names.FOREIGN_ADDR, (FOREIGN_ADDR) =>
               {
                   FOREIGN_ADDR.CreateNewField(Names.WS_F_ADDRESS_TYPE, FieldType.String, 1, SPACES);
                   FOREIGN_ADDR.CreateNewFillerField(FieldType.String, 1, SPACES);
                   FOREIGN_ADDR.CreateNewField(Names.F_STREET_1, FieldType.String, 25);
                   FOREIGN_ADDR.CreateNewFillerField(FieldType.String, 1, SPACES);
                   FOREIGN_ADDR.CreateNewField(Names.F_STREET_2, FieldType.String, 25);
                   FOREIGN_ADDR.CreateNewFillerField(FieldType.String, 1, SPACES);
                   FOREIGN_ADDR.CreateNewField(Names.F_STREET_3, FieldType.String, 25);
                   FOREIGN_ADDR.CreateNewGroup(Names.F_ADDR_LINE6, (F_ADDR_LINE6) =>
                   {
                       F_ADDR_LINE6.CreateNewField(Names.F_CITY, FieldType.String, 15);
                       F_ADDR_LINE6.CreateNewFillerField(FieldType.String, 1, SPACES);
                       F_ADDR_LINE6.CreateNewField(Names.F_PROVINCE, FieldType.String, 5, SPACES);
                       F_ADDR_LINE6.CreateNewFillerField(FieldType.String, 1, SPACES);
                       F_ADDR_LINE6.CreateNewField(Names.F_POSTAL_CODE, FieldType.String, 10, SPACES);
                       F_ADDR_LINE6.CreateNewFillerField(FieldType.String, 1, SPACES);
                       F_ADDR_LINE6.CreateNewField(Names.F_COUNTRY, FieldType.String, 10, SPACES);
                   });
               });
           });

            recordDef.CreateNewGroup(Names.FROM_ADDRESS, (FROM_ADDRESS) =>
           {
               FROM_ADDRESS.CreateNewFillerField(FieldType.String, 30, SPACES);
               FROM_ADDRESS.CreateNewGroup(Names.FROM_ADDRESS_LINE, (FROM_ADDRESS_LINE) =>
               {
                   FROM_ADDRESS_LINE.CreateNewGroup(Names.FROM_ADDRESS_d2, (FROM_ADDRESS_d2) =>
                   {
                       FROM_ADDRESS_d2.CreateNewField(Names.FROM_CITY, FieldType.String, 15);
                       FROM_ADDRESS_d2.CreateNewField(Names.FROM_DELIMETER1, FieldType.String, 1);
                       FROM_ADDRESS_d2.CreateNewField(Names.FROM_STATE, FieldType.String, 2);
                       FROM_ADDRESS_d2.CreateNewField(Names.FROM_DELIMETER2, FieldType.String, 1);
                       FROM_ADDRESS_d2.CreateNewField(Names.FROM_ZIP_5, FieldType.String, 5);
                       FROM_ADDRESS_d2.CreateNewField(Names.FROM_DELIMETER3, FieldType.String, 1);
                       FROM_ADDRESS_d2.CreateNewField(Names.FROM_ZIP_4, FieldType.String, 4);
                       FROM_ADDRESS_d2.CreateNewFillerField(11, FillWith.Hashes);
                   });
               });
           });

            IField WS_PHONE_NUMBER_local = recordDef.CreateNewField(Names.WS_PHONE_NUMBER, FieldType.UnsignedNumeric, 7);
            recordDef.CreateNewGroupRedefine(Names.WS_PHONE_WORK, WS_PHONE_NUMBER_local, (WS_PHONE_WORK) =>
            {
                WS_PHONE_WORK.CreateNewField(Names.PHONE_3, FieldType.UnsignedNumeric, 3);
                WS_PHONE_WORK.CreateNewField(Names.PHONE_4, FieldType.UnsignedNumeric, 4);
            });

            recordDef.CreateNewGroup(Names.SP_TELE, (SP_TELE) =>
           {
               SP_TELE.CreateNewFillerField(FieldType.String, 31, SPACES);
               SP_TELE.CreateNewField(Names.SP_TELE_AREA_CODE, FieldType.UnsignedNumeric, 3);
               SP_TELE.CreateNewField(Names.HYPHEN_1, FieldType.String, 1, "-");
               SP_TELE.CreateNewField(Names.SP_TELE_THREE_DIGIT, FieldType.UnsignedNumeric, 3);
               SP_TELE.CreateNewField(Names.HYPHEN_2, FieldType.String, 1, "-");
               SP_TELE.CreateNewField(Names.SP_TELE_FOUR_DIGIT, FieldType.UnsignedNumeric, 4);
               SP_TELE.CreateNewField(Names.EXT_LITERAL, FieldType.String, 5, " EXT ");
               SP_TELE.CreateNewField(Names.SP_TELE_EXTENSION, FieldType.UnsignedNumeric, 5);
           });

            recordDef.CreateNewGroup(Names.AR_ADDRESS, (AR_ADDRESS) =>
           {
               AR_ADDRESS.CreateNewFillerField(FieldType.String, 30, SPACES);
               AR_ADDRESS.CreateNewGroup(Names.AR_ADDRESS_LINE, (AR_ADDRESS_LINE) =>
               {
                   IGroup AR_ADDRESS_D_local = (IGroup)AR_ADDRESS_LINE.CreateNewGroup(Names.AR_ADDRESS_D, (AR_ADDRESS_D) =>
                   {
                       AR_ADDRESS_D.CreateNewField(Names.AR_D_CITY, FieldType.String, 15);
                       AR_ADDRESS_D.CreateNewField(Names.AR_D_DELIMETER1, FieldType.String, 1);
                       AR_ADDRESS_D.CreateNewField(Names.AR_D_STATE, FieldType.String, 2);
                       AR_ADDRESS_D.CreateNewField(Names.AR_D_DELIMETER2, FieldType.String, 1);
                       AR_ADDRESS_D.CreateNewField(Names.AR_D_ZIP_5, FieldType.String, 5);
                       AR_ADDRESS_D.CreateNewField(Names.AR_D_DELIMETER3, FieldType.String, 1);
                       AR_ADDRESS_D.CreateNewField(Names.AR_D_ZIP_4, FieldType.String, 4);
                       AR_ADDRESS_D.CreateNewFillerField(14, FillWith.Hashes);
                   });
                   AR_ADDRESS_LINE.CreateNewGroupRedefine(Names.AR_ADDRESS_F, AR_ADDRESS_D_local, (AR_ADDRESS_F) =>
                   {
                       AR_ADDRESS_F.CreateNewField(Names.AR_F_CITY, FieldType.String, 15);
                       AR_ADDRESS_F.CreateNewField(Names.AR_F_DELIMETER1, FieldType.String, 1);
                       AR_ADDRESS_F.CreateNewField(Names.AR_F_PROVINCE, FieldType.String, 15);
                       AR_ADDRESS_F.CreateNewField(Names.AR_F_DELIMETER1_d2, FieldType.String, 1);
                       AR_ADDRESS_F.CreateNewField(Names.AR_F_POSTAL_CODE, FieldType.String, 8);
                       AR_ADDRESS_F.CreateNewField(Names.AR_F_DELIMETER2, FieldType.String, 1);
                       AR_ADDRESS_F.CreateNewField(Names.AR_F_COUNTRY, FieldType.String, 2);
                   });
               });
           });

            recordDef.CreateNewGroup(Names.WS_WORK_AREA, (WS_WORK_AREA) =>
           {
               WS_WORK_AREA.CreateNewFillerField(1, FillWith.Hashes);
               WS_WORK_AREA.CreateNewField(Names.WS_WORK_REC, FieldType.String, 125);
           });

            recordDef.CreateNewGroup(Names.WS_STARSREC_LINES, (WS_STARSREC_LINES) =>
           {
               WS_STARSREC_LINES.CreateNewGroup(Names.WS_STARS_LINE0_1, (WS_STARS_LINE0_1) =>
               {
                   WS_STARS_LINE0_1.CreateNewFillerField(FieldType.String, 93, SPACES);
                   WS_STARS_LINE0_1.CreateNewField(Names.STARS_PG_NO, FieldType.String, 2, "01");
               });
               WS_STARSREC_LINES.CreateNewGroup(Names.WS_STARS_LINE0_2, (WS_STARS_LINE0_2) =>
               {
                   WS_STARS_LINE0_2.CreateNewFillerField(FieldType.String, 112, SPACES);
                   WS_STARS_LINE0_2.CreateNewField(Names.DOC_PREFIX, FieldType.String, 3, "J00");
                   WS_STARS_LINE0_2.CreateNewField(Names.DOC_NO, FieldType.String, 5);
               });
               WS_STARSREC_LINES.CreateNewGroup(Names.WS_STARS_LINE1, (WS_STARS_LINE1) =>
               {
                   WS_STARS_LINE1.CreateNewFillerField(FieldType.String, 90, SPACES);
                   WS_STARS_LINE1.CreateNewField(Names.DOC_DATE, FieldType.String, 8);
                   WS_STARS_LINE1.CreateNewFillerField(FieldType.String, 19, SPACES);
                   WS_STARS_LINE1.CreateNewField(Names.EFFECTIVE_DATE, FieldType.String, 8);
               });
               WS_STARSREC_LINES.CreateNewGroup(Names.WS_STARS_DET_LINE, (WS_STARS_DET_LINE) =>
               {
                   WS_STARS_DET_LINE.CreateNewField(Names.VOUCHER_NO, FieldType.String, 7);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.FINANCIAL_YEAR, FieldType.String, 2);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 4, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.SFX1, FieldType.String, 3);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.TRAN_CODE, FieldType.String, 3);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.REF_DOC_NO, FieldType.String, 8);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 4, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.SFX2, FieldType.String, 3);
                   WS_STARS_DET_LINE.CreateNewField(Names.M_WHAT, FieldType.String, 1);
                   WS_STARS_DET_LINE.CreateNewField(Names.AGENCY, FieldType.String, 3);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.FUND, FieldType.String, 4);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 2, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.BEG_FY, FieldType.String, 2);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.STARS_INDEX, FieldType.String, 4);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 1, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.PCA, FieldType.String, 5);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 2, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.EXP_SUB_OB, FieldType.String, 4);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 3, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.REV_SUB_OB, FieldType.String, 4);
                   WS_STARS_DET_LINE.CreateNewField(Names.DET, FieldType.String, 3);
                   WS_STARS_DET_LINE.CreateNewField(Names.R_WHAT, FieldType.String, 1);
                   WS_STARS_DET_LINE.CreateNewFillerField(FieldType.String, 2, SPACE);
                   WS_STARS_DET_LINE.CreateNewField(Names.AMOUNT, FieldType.NumericEdited, "ZZZZ,ZZ9.99", 11, null, 2);
               });
               WS_STARSREC_LINES.CreateNewGroup(Names.WS_STARS_LINE3, (WS_STARS_LINE3) =>
               {
                   WS_STARS_LINE3.CreateNewFillerField(FieldType.String, 5, SPACE);
                   WS_STARS_LINE3.CreateNewField(Names.USER_ID, FieldType.String, 8);
                   WS_STARS_LINE3.CreateNewFillerField(FieldType.String, 67, SPACES);
                   WS_STARS_LINE3.CreateNewField(Names.STARS_TOT_AMT, FieldType.NumericEdited, "ZZZZ,ZZ9.99", 11, null, 2);
               });
           });

            recordDef.CreateNewGroup(Names.STUFFING_MC_LINE, (STUFFING_MC_LINE) =>
           {
               STUFFING_MC_LINE.CreateNewFillerField(FieldType.String, 9, SPACES);
               STUFFING_MC_LINE.CreateNewField(Names.DASHES, FieldType.String, 3, SPACES);
               STUFFING_MC_LINE.CreateNewFillerField(FieldType.String, 3, SPACES);
           });

            recordDef.CreateNewGroup("FILLER_d87", (FILLER_d87) =>
           {
               FILLER_d87.CreateNewField(Names.ADIM1, FieldType.CompInt, 8);
               FILLER_d87.CreateNewField(Names.ADIM2, FieldType.CompInt, 8);
               FILLER_d87.CreateNewField(Names.ADIM3, FieldType.CompInt, 8);
           });

            recordDef.CreateNewGroup("FILLER_d88", (FILLER_d88) =>
           {
               FILLER_d88.CreateNewField(Names.IMPORT_DETLINE_0001FL, FieldType.String, 1);
               FILLER_d88.CreateNewField(Names.IMPORT_DETLINE_0001PS, FieldType.CompShort, 4);
               FILLER_d88.CreateNewField(Names.IMPORT_DETLINE_0001RF, FieldType.String, 1);
               FILLER_d88.CreateNewField(Names.IMPORT_DETLINE_0001MM, FieldType.CompInt, 9, 500);
               FILLER_d88.CreateNewField(Names.IMPORT_GROUP_0002FL, FieldType.String, 1);
               FILLER_d88.CreateNewField(Names.IMPORT_GROUP_0002PS, FieldType.CompShort, 4);
               FILLER_d88.CreateNewField(Names.IMPORT_GROUP_0002RF, FieldType.String, 1);
               FILLER_d88.CreateNewField(Names.IMPORT_GROUP_0002MM, FieldType.CompInt, 9, 20);
           });

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXFE39_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXFE39_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string IMPORT_PASS_AREA_0001EV = "IMPORT_PASS_AREA_0001EV";
            internal const string EXTERNAL_0001ET = "EXTERNAL_0001ET";
            internal const string FILE_INSTRUCTION_0001AS = "FILE_INSTRUCTION_0001AS";
            internal const string FILE_INSTRUCTION_0001 = "FILE_INSTRUCTION_0001";
            internal const string FILE_INSTRUCTION_0001XX = "FILE_INSTRUCTION_0001XX";
            internal const string IMPORT_WARLINE_PAYEE_0002EV = "IMPORT_WARLINE_PAYEE_0002EV";
            internal const string CSE_PERSONS_WORK_SET_0002ET = "CSE_PERSONS_WORK_SET_0002ET";
            internal const string FORMATTED_NAME_0002AS = "FORMATTED_NAME_0002AS";
            internal const string FORMATTED_NAME_0002 = "FORMATTED_NAME_0002";
            internal const string FORMATTED_NAME_0002XX = "FORMATTED_NAME_0002XX";
            internal const string NUMBER_0002AS = "NUMBER_0002AS";
            internal const string NUMBER_0002 = "NUMBER_0002";
            internal const string NUMBER_0002XX = "NUMBER_0002XX";
            internal const string IMPORT_WARLINE_DESIG_0003EV = "IMPORT_WARLINE_DESIG_0003EV";
            internal const string CSE_PERSONS_WORK_SET_0003ET = "CSE_PERSONS_WORK_SET_0003ET";
            internal const string FORMATTED_NAME_0003AS = "FORMATTED_NAME_0003AS";
            internal const string FORMATTED_NAME_0003 = "FORMATTED_NAME_0003";
            internal const string FORMATTED_NAME_0003XX = "FORMATTED_NAME_0003XX";
            internal const string NUMBER_0003AS = "NUMBER_0003AS";
            internal const string NUMBER_0003 = "NUMBER_0003";
            internal const string NUMBER_0003XX = "NUMBER_0003XX";
            internal const string IMPORT_0004EV = "IMPORT_0004EV";
            internal const string CSE_PERSON_ADDRESS_0004ET = "CSE_PERSON_ADDRESS_0004ET";
            internal const string LOCATION_TYPE_0004AS = "LOCATION_TYPE_0004AS";
            internal const string LOCATION_TYPE_0004 = "LOCATION_TYPE_0004";
            internal const string LOCATION_TYPE_0004XX = "LOCATION_TYPE_0004XX";
            internal const string STREET_1_0004AS = "STREET_1_0004AS";
            internal const string STREET_1_0004 = "STREET_1_0004";
            internal const string STREET_1_0004XX = "STREET_1_0004XX";
            internal const string STREET_2_0004AS = "STREET_2_0004AS";
            internal const string STREET_2_0004 = "STREET_2_0004";
            internal const string STREET_2_0004XX = "STREET_2_0004XX";
            internal const string CITY_0004AS = "CITY_0004AS";
            internal const string CITY_0004 = "CITY_0004";
            internal const string CITY_0004XX = "CITY_0004XX";
            internal const string COUNTY_0004AS = "COUNTY_0004AS";
            internal const string COUNTY_0004 = "COUNTY_0004";
            internal const string COUNTY_0004XX = "COUNTY_0004XX";
            internal const string STATE_0004AS = "STATE_0004AS";
            internal const string STATE_0004 = "STATE_0004";
            internal const string STATE_0004XX = "STATE_0004XX";
            internal const string ZIP_CODE_0004AS = "ZIP_CODE_0004AS";
            internal const string ZIP_CODE_0004 = "ZIP_CODE_0004";
            internal const string ZIP_CODE_0004XX = "ZIP_CODE_0004XX";
            internal const string ZIP4_0004AS = "ZIP4_0004AS";
            internal const string ZIP4_0004 = "ZIP4_0004";
            internal const string ZIP4_0004XX = "ZIP4_0004XX";
            internal const string STREET_3_0004AS = "STREET_3_0004AS";
            internal const string STREET_3_0004 = "STREET_3_0004";
            internal const string STREET_3_0004XX = "STREET_3_0004XX";
            internal const string STREET_4_0004AS = "STREET_4_0004AS";
            internal const string STREET_4_0004 = "STREET_4_0004";
            internal const string STREET_4_0004XX = "STREET_4_0004XX";
            internal const string PROVINCE_0004AS = "PROVINCE_0004AS";
            internal const string PROVINCE_0004 = "PROVINCE_0004";
            internal const string PROVINCE_0004XX = "PROVINCE_0004XX";
            internal const string POSTAL_CODE_0004AS = "POSTAL_CODE_0004AS";
            internal const string POSTAL_CODE_0004 = "POSTAL_CODE_0004";
            internal const string POSTAL_CODE_0004XX = "POSTAL_CODE_0004XX";
            internal const string COUNTRY_0004AS = "COUNTRY_0004AS";
            internal const string COUNTRY_0004 = "COUNTRY_0004";
            internal const string COUNTRY_0004XX = "COUNTRY_0004XX";
            internal const string IMPORT_WARLINE_0005EV = "IMPORT_WARLINE_0005EV";
            internal const string WARRANT_0005ET = "WARRANT_0005ET";
            internal const string AMOUNT_0005AS = "AMOUNT_0005AS";
            internal const string AMOUNT_0005 = "AMOUNT_0005";
            internal const string AMOUNT_0005XX = "AMOUNT_0005XX";
            internal const string NUMBER_0005AS = "NUMBER_0005AS";
            internal const string NUMBER_0005 = "NUMBER_0005";
            internal const string NUMBER_0005XX = "NUMBER_0005XX";
            internal const string PRINT_DATE_0005AS = "PRINT_DATE_0005AS";
            internal const string PRINT_DATE_0005 = "PRINT_DATE_0005";
            internal const string PRINT_DATE_0005XX = "PRINT_DATE_0005XX";
            internal const string SYSTEM_GENERATED_IDENTI_0006AS = "SYSTEM_GENERATED_IDENTI_0006AS";
            internal const string SYSTEM_GENERATED_IDENTIFI_0006 = "SYSTEM_GENERATED_IDENTIFI_0006";
            internal const string SYSTEM_GENERATED_IDENTI_0006XX = "SYSTEM_GENERATED_IDENTI_0006XX";
            internal const string IMPORT_DETLINE_0001RG = "IMPORT_DETLINE_0001RG";
            internal const string IMPORT_DETLINE_0001MA = "IMPORT_DETLINE_0001MA";
            internal const string IMPORT_DETLINE_0001MX = "IMPORT_DETLINE_0001MX";
            internal const string IMPORT_DETLINE_0001 = "IMPORT_DETLINE_0001";
            internal const string IMPORT_DETLINE_0001AC = "IMPORT_DETLINE_0001AC";
            internal const string GR_IMPORT_DETLINE_PAYOR_0007EV = "GR_IMPORT_DETLINE_PAYOR_0007EV";
            internal const string CSE_PERSONS_WORK_SET_0007ET = "CSE_PERSONS_WORK_SET_0007ET";
            internal const string FORMATTED_NAME_0007AS = "FORMATTED_NAME_0007AS";
            internal const string FORMATTED_NAME_0007 = "FORMATTED_NAME_0007";
            internal const string FORMATTED_NAME_0007XX = "FORMATTED_NAME_0007XX";
            internal const string NUMBER_0007AS = "NUMBER_0007AS";
            internal const string NUMBER_0007 = "NUMBER_0007";
            internal const string NUMBER_0007XX = "NUMBER_0007XX";
            internal const string GR_IMPORT_DETLINE_ORD_0008EV = "GR_IMPORT_DETLINE_ORD_0008EV";
            internal const string LEGAL_ACTION_0008ET = "LEGAL_ACTION_0008ET";
            internal const string COURT_CASE_NUMBER_0008AS = "COURT_CASE_NUMBER_0008AS";
            internal const string COURT_CASE_NUMBER_0008 = "COURT_CASE_NUMBER_0008";
            internal const string COURT_CASE_NUMBER_0008XX = "COURT_CASE_NUMBER_0008XX";
            internal const string GR_IMPORT_DETLINE_TYPE_0009EV = "GR_IMPORT_DETLINE_TYPE_0009EV";
            internal const string DISBURSEMENT_TYPE_0009ET = "DISBURSEMENT_TYPE_0009ET";
            internal const string NAME_0009AS = "NAME_0009AS";
            internal const string NAME_0009 = "NAME_0009";
            internal const string NAME_0009XX = "NAME_0009XX";
            internal const string GR_IMPORT_DETLINE_0010EV = "GR_IMPORT_DETLINE_0010EV";
            internal const string LOCAL_FINANCE_WORK_AREA_0010ET = "LOCAL_FINANCE_WORK_AREA_0010ET";
            internal const string DISB_DATE_0010AS = "DISB_DATE_0010AS";
            internal const string DISB_DATE_0010 = "DISB_DATE_0010";
            internal const string DISB_DATE_0010XX = "DISB_DATE_0010XX";
            internal const string GR_IMPORT_DETLINE_TRANS_0011EV = "GR_IMPORT_DETLINE_TRANS_0011EV";
            internal const string IEF_SUPPLIED_0011ET = "IEF_SUPPLIED_0011ET";
            internal const string FLAG_0011AS = "FLAG_0011AS";
            internal const string FLAG_0011 = "FLAG_0011";
            internal const string FLAG_0011XX = "FLAG_0011XX";
            internal const string GR_IMPORT_DETLINE_TRAN__0012EV = "GR_IMPORT_DETLINE_TRAN__0012EV";
            internal const string DISBURSEMENT_TRANSACTIO_0012ET = "DISBURSEMENT_TRANSACTIO_0012ET";
            internal const string AMOUNT_0012AS = "AMOUNT_0012AS";
            internal const string AMOUNT_0012 = "AMOUNT_0012";
            internal const string AMOUNT_0012XX = "AMOUNT_0012XX";
            internal const string GR_IMPORT_DETLINE_0013EV = "GR_IMPORT_DETLINE_0013EV";
            internal const string DISBURSEMENT_TRANSACTIO_0013ET = "DISBURSEMENT_TRANSACTIO_0013ET";
            internal const string REFERENCE_NUMBER_0013AS = "REFERENCE_NUMBER_0013AS";
            internal const string REFERENCE_NUMBER_0013 = "REFERENCE_NUMBER_0013";
            internal const string REFERENCE_NUMBER_0013DL = "REFERENCE_NUMBER_0013DL";
            internal const string REFERENCE_NUMBER_0013XL = "REFERENCE_NUMBER_0013XL";
            internal const string REFERENCE_NUMBER_0013DV = "REFERENCE_NUMBER_0013DV";
            internal const string REFERENCE_NUMBER_0013XV = "REFERENCE_NUMBER_0013XV";
            internal const string REFERENCE_NUMBER_0013XX = "REFERENCE_NUMBER_0013XX";
            internal const string IMPORT_REPORT_TYPE_0014EV = "IMPORT_REPORT_TYPE_0014EV";
            internal const string CSE_PERSONS_WORK_SET_0014ET = "CSE_PERSONS_WORK_SET_0014ET";
            internal const string CHAR_2_0014AS = "CHAR_2_0014AS";
            internal const string CHAR_2_0014 = "CHAR_2_0014";
            internal const string CHAR_2_0014XX = "CHAR_2_0014XX";
            internal const string IMPORT_STATEMENT_DATE_0015EV = "IMPORT_STATEMENT_DATE_0015EV";
            internal const string DATE_WORK_AREA_0015ET = "DATE_WORK_AREA_0015ET";
            internal const string DATE_0015AS = "DATE_0015AS";
            internal const string DATE_0015 = "DATE_0015";
            internal const string DATE_0015XX = "DATE_0015XX";
            internal const string IMPORT_FIPS_CODE_0016EV = "IMPORT_FIPS_CODE_0016EV";
            internal const string TEXT_WORK_AREA_0016ET = "TEXT_WORK_AREA_0016ET";
            internal const string TEXT_8_0016AS = "TEXT_8_0016AS";
            internal const string TEXT_8_0016 = "TEXT_8_0016";
            internal const string TEXT_8_0016XX = "TEXT_8_0016XX";
            internal const string IMPORT_FILE_OPEN_MODE_0017EV = "IMPORT_FILE_OPEN_MODE_0017EV";
            internal const string IEF_SUPPLIED_0017ET = "IEF_SUPPLIED_0017ET";
            internal const string FLAG_0017AS = "FLAG_0017AS";
            internal const string FLAG_0017 = "FLAG_0017";
            internal const string FLAG_0017XX = "FLAG_0017XX";
            internal const string IMPORT_FDSO_IND_0018EV = "IMPORT_FDSO_IND_0018EV";
            internal const string IEF_SUPPLIED_0018ET = "IEF_SUPPLIED_0018ET";
            internal const string FLAG_0018AS = "FLAG_0018AS";
            internal const string FLAG_0018 = "FLAG_0018";
            internal const string FLAG_0018XX = "FLAG_0018XX";
            internal const string IMPORT_NET_WAR_DIST_AMT_0019EV = "IMPORT_NET_WAR_DIST_AMT_0019EV";
            internal const string IEF_SUPPLIED_0019ET = "IEF_SUPPLIED_0019ET";
            internal const string AVERAGE_CURRENCY_0019AS = "AVERAGE_CURRENCY_0019AS";
            internal const string AVERAGE_CURRENCY_0019 = "AVERAGE_CURRENCY_0019";
            internal const string AVERAGE_CURRENCY_0019XX = "AVERAGE_CURRENCY_0019XX";
            internal const string IMPORT_AGENCY_NUMBER_0020EV = "IMPORT_AGENCY_NUMBER_0020EV";
            internal const string TEXT_WORK_AREA_0020ET = "TEXT_WORK_AREA_0020ET";
            internal const string TEXT_4_0020AS = "TEXT_4_0020AS";
            internal const string TEXT_4_0020 = "TEXT_4_0020";
            internal const string TEXT_4_0020XX = "TEXT_4_0020XX";
            internal const string IMPORT_0021EV = "IMPORT_0021EV";
            internal const string FUND_0021ET = "FUND_0021ET";
            internal const string NUMBER_0021AS = "NUMBER_0021AS";
            internal const string NUMBER_0021 = "NUMBER_0021";
            internal const string NUMBER_0021XX = "NUMBER_0021XX";
            internal const string IMPORT_OVERFLOW_INDICAT_0022EV = "IMPORT_OVERFLOW_INDICAT_0022EV";
            internal const string IEF_SUPPLIED_0022ET = "IEF_SUPPLIED_0022ET";
            internal const string FLAG_0022AS = "FLAG_0022AS";
            internal const string FLAG_0022 = "FLAG_0022";
            internal const string FLAG_0022XX = "FLAG_0022XX";
            internal const string IMPORT_LINES_WRITTEN_IN_0023EV = "IMPORT_LINES_WRITTEN_IN_0023EV";
            internal const string IEF_SUPPLIED_0023ET = "IEF_SUPPLIED_0023ET";
            internal const string COUNT_0023AS = "COUNT_0023AS";
            internal const string COUNT_0023 = "COUNT_0023";
            internal const string COUNT_0023XX = "COUNT_0023XX";
            internal const string IMPORT_0024EV = "IMPORT_0024EV";
            internal const string PAY_TAPE_0024ET = "PAY_TAPE_0024ET";
            internal const string VOUCHER_NUMBER_0024AS = "VOUCHER_NUMBER_0024AS";
            internal const string VOUCHER_NUMBER_0024 = "VOUCHER_NUMBER_0024";
            internal const string VOUCHER_NUMBER_0024XX = "VOUCHER_NUMBER_0024XX";
            internal const string PROCESS_DATE_0024AS = "PROCESS_DATE_0024AS";
            internal const string PROCESS_DATE_0024 = "PROCESS_DATE_0024";
            internal const string PROCESS_DATE_0024XX = "PROCESS_DATE_0024XX";
            internal const string IMPORT_STARS_NON_ADC_0025EV = "IMPORT_STARS_NON_ADC_0025EV";
            internal const string IEF_SUPPLIED_0025ET = "IEF_SUPPLIED_0025ET";
            internal const string AVERAGE_CURRENCY_0025AS = "AVERAGE_CURRENCY_0025AS";
            internal const string AVERAGE_CURRENCY_0025 = "AVERAGE_CURRENCY_0025";
            internal const string AVERAGE_CURRENCY_0025XX = "AVERAGE_CURRENCY_0025XX";
            internal const string IMPORT_STARS_PASSTHRU_0026EV = "IMPORT_STARS_PASSTHRU_0026EV";
            internal const string IEF_SUPPLIED_0026ET = "IEF_SUPPLIED_0026ET";
            internal const string AVERAGE_CURRENCY_0026AS = "AVERAGE_CURRENCY_0026AS";
            internal const string AVERAGE_CURRENCY_0026 = "AVERAGE_CURRENCY_0026";
            internal const string AVERAGE_CURRENCY_0026XX = "AVERAGE_CURRENCY_0026XX";
            internal const string IMPORT_STARS_REFUND_0027EV = "IMPORT_STARS_REFUND_0027EV";
            internal const string IEF_SUPPLIED_0027ET = "IEF_SUPPLIED_0027ET";
            internal const string AVERAGE_CURRENCY_0027AS = "AVERAGE_CURRENCY_0027AS";
            internal const string AVERAGE_CURRENCY_0027 = "AVERAGE_CURRENCY_0027";
            internal const string AVERAGE_CURRENCY_0027XX = "AVERAGE_CURRENCY_0027XX";
            internal const string IMPORT_STARS_BADCHK_0028EV = "IMPORT_STARS_BADCHK_0028EV";
            internal const string IEF_SUPPLIED_0028ET = "IEF_SUPPLIED_0028ET";
            internal const string AVERAGE_CURRENCY_0028AS = "AVERAGE_CURRENCY_0028AS";
            internal const string AVERAGE_CURRENCY_0028 = "AVERAGE_CURRENCY_0028";
            internal const string AVERAGE_CURRENCY_0028XX = "AVERAGE_CURRENCY_0028XX";
            internal const string IMPORT_STARS_INT_ST_0029EV = "IMPORT_STARS_INT_ST_0029EV";
            internal const string IEF_SUPPLIED_0029ET = "IEF_SUPPLIED_0029ET";
            internal const string AVERAGE_CURRENCY_0029AS = "AVERAGE_CURRENCY_0029AS";
            internal const string AVERAGE_CURRENCY_0029 = "AVERAGE_CURRENCY_0029";
            internal const string AVERAGE_CURRENCY_0029XX = "AVERAGE_CURRENCY_0029XX";
            internal const string IMPORT_STARS_CRT_FEE_0030EV = "IMPORT_STARS_CRT_FEE_0030EV";
            internal const string IEF_SUPPLIED_0030ET = "IEF_SUPPLIED_0030ET";
            internal const string AVERAGE_CURRENCY_0030AS = "AVERAGE_CURRENCY_0030AS";
            internal const string AVERAGE_CURRENCY_0030 = "AVERAGE_CURRENCY_0030";
            internal const string AVERAGE_CURRENCY_0030XX = "AVERAGE_CURRENCY_0030XX";
            internal const string IMPORT_STARS_EXC_CS_0031EV = "IMPORT_STARS_EXC_CS_0031EV";
            internal const string IEF_SUPPLIED_0031ET = "IEF_SUPPLIED_0031ET";
            internal const string AVERAGE_CURRENCY_0031AS = "AVERAGE_CURRENCY_0031AS";
            internal const string AVERAGE_CURRENCY_0031 = "AVERAGE_CURRENCY_0031";
            internal const string AVERAGE_CURRENCY_0031XX = "AVERAGE_CURRENCY_0031XX";
            internal const string IMPORT_STARS_WAR_0032EV = "IMPORT_STARS_WAR_0032EV";
            internal const string PAYMENT_REQUEST_0032ET = "PAYMENT_REQUEST_0032ET";
            internal const string AMOUNT_0032AS = "AMOUNT_0032AS";
            internal const string AMOUNT_0032 = "AMOUNT_0032";
            internal const string AMOUNT_0032XX = "AMOUNT_0032XX";
            internal const string IMPORT_FROM_0033EV = "IMPORT_FROM_0033EV";
            internal const string CSE_PERSONS_WORK_SET_0033ET = "CSE_PERSONS_WORK_SET_0033ET";
            internal const string FORMATTED_NAME_0033AS = "FORMATTED_NAME_0033AS";
            internal const string FORMATTED_NAME_0033 = "FORMATTED_NAME_0033";
            internal const string FORMATTED_NAME_0033XX = "FORMATTED_NAME_0033XX";
            internal const string IMPORT_FROM_0034EV = "IMPORT_FROM_0034EV";
            internal const string OFFICE_0034ET = "OFFICE_0034ET";
            internal const string NAME_0034AS = "NAME_0034AS";
            internal const string NAME_0034 = "NAME_0034";
            internal const string NAME_0034XX = "NAME_0034XX";
            internal const string IMPORT_FROM_0035EV = "IMPORT_FROM_0035EV";
            internal const string OFFICE_ADDRESS_0035ET = "OFFICE_ADDRESS_0035ET";
            internal const string STREET_1_0035AS = "STREET_1_0035AS";
            internal const string STREET_1_0035 = "STREET_1_0035";
            internal const string STREET_1_0035XX = "STREET_1_0035XX";
            internal const string STREET_2_0035AS = "STREET_2_0035AS";
            internal const string STREET_2_0035 = "STREET_2_0035";
            internal const string STREET_2_0035XX = "STREET_2_0035XX";
            internal const string CITY_0035AS = "CITY_0035AS";
            internal const string CITY_0035 = "CITY_0035";
            internal const string CITY_0035XX = "CITY_0035XX";
            internal const string STATE_PROVINCE_0035AS = "STATE_PROVINCE_0035AS";
            internal const string STATE_PROVINCE_0035 = "STATE_PROVINCE_0035";
            internal const string STATE_PROVINCE_0035XX = "STATE_PROVINCE_0035XX";
            internal const string ZIP_0035AS = "ZIP_0035AS";
            internal const string ZIP_0035 = "ZIP_0035";
            internal const string ZIP_0035XX = "ZIP_0035XX";
            internal const string ZIP4_0035AS = "ZIP4_0035AS";
            internal const string ZIP4_0035 = "ZIP4_0035";
            internal const string ZIP4_0035XX = "ZIP4_0035XX";
            internal const string COUNTRY_0035AS = "COUNTRY_0035AS";
            internal const string COUNTRY_0035 = "COUNTRY_0035";
            internal const string COUNTRY_0035XX = "COUNTRY_0035XX";
            internal const string IMPORT_GROUP_0002RG = "IMPORT_GROUP_0002RG";
            internal const string IMPORT_GROUP_0002MA = "IMPORT_GROUP_0002MA";
            internal const string IMPORT_GROUP_0002MX = "IMPORT_GROUP_0002MX";
            internal const string IMPORT_GROUP_0002 = "IMPORT_GROUP_0002";
            internal const string IMPORT_GROUP_0002AC = "IMPORT_GROUP_0002AC";
            internal const string GR_IMPORT_0036EV = "GR_IMPORT_0036EV";
            internal const string STARS_TRANSACTION_ENTRY_0036ET = "STARS_TRANSACTION_ENTRY_0036ET";
            internal const string STARS_CLASS_TYPE_0036AS = "STARS_CLASS_TYPE_0036AS";
            internal const string STARS_CLASS_TYPE_0036 = "STARS_CLASS_TYPE_0036";
            internal const string STARS_CLASS_TYPE_0036XX = "STARS_CLASS_TYPE_0036XX";
            internal const string VOUCHER_NUMBER_0036AS = "VOUCHER_NUMBER_0036AS";
            internal const string VOUCHER_NUMBER_0036 = "VOUCHER_NUMBER_0036";
            internal const string VOUCHER_NUMBER_0036XX = "VOUCHER_NUMBER_0036XX";
            internal const string FIN_YR_0036AS = "FIN_YR_0036AS";
            internal const string FIN_YR_0036 = "FIN_YR_0036";
            internal const string FIN_YR_0036XX = "FIN_YR_0036XX";
            internal const string SUFFIX_1_0036AS = "SUFFIX_1_0036AS";
            internal const string SUFFIX_1_0036 = "SUFFIX_1_0036";
            internal const string SUFFIX_1_0036XX = "SUFFIX_1_0036XX";
            internal const string TRAN_CODE_0036AS = "TRAN_CODE_0036AS";
            internal const string TRAN_CODE_0036 = "TRAN_CODE_0036";
            internal const string TRAN_CODE_0036XX = "TRAN_CODE_0036XX";
            internal const string AGENCY_CODE_0036AS = "AGENCY_CODE_0036AS";
            internal const string AGENCY_CODE_0036 = "AGENCY_CODE_0036";
            internal const string AGENCY_CODE_0036XX = "AGENCY_CODE_0036XX";
            internal const string FUND_CODE_0036AS = "FUND_CODE_0036AS";
            internal const string FUND_CODE_0036 = "FUND_CODE_0036";
            internal const string FUND_CODE_0036XX = "FUND_CODE_0036XX";
            internal const string INDEX_0036AS = "INDEX_0036AS";
            internal const string INDEX_0036 = "INDEX_0036";
            internal const string INDEX_0036XX = "INDEX_0036XX";
            internal const string PCA_CODE_0036AS = "PCA_CODE_0036AS";
            internal const string PCA_CODE_0036 = "PCA_CODE_0036";
            internal const string PCA_CODE_0036XX = "PCA_CODE_0036XX";
            internal const string EXPEND_SUB_OB_0036AS = "EXPEND_SUB_OB_0036AS";
            internal const string EXPEND_SUB_OB_0036 = "EXPEND_SUB_OB_0036";
            internal const string EXPEND_SUB_OB_0036XX = "EXPEND_SUB_OB_0036XX";
            internal const string REV_SUB_OB_0036AS = "REV_SUB_OB_0036AS";
            internal const string REV_SUB_OB_0036 = "REV_SUB_OB_0036";
            internal const string REV_SUB_OB_0036XX = "REV_SUB_OB_0036XX";
            internal const string IMPORT_HEADER_REC_WRITT_0037EV = "IMPORT_HEADER_REC_WRITT_0037EV";
            internal const string IEF_SUPPLIED_0037ET = "IEF_SUPPLIED_0037ET";
            internal const string FLAG_0037AS = "FLAG_0037AS";
            internal const string FLAG_0037 = "FLAG_0037";
            internal const string FLAG_0037XX = "FLAG_0037XX";
            internal const string IMPORT_0038EV = "IMPORT_0038EV";
            internal const string RECEIPT_REFUND_0038ET = "RECEIPT_REFUND_0038ET";
            internal const string REASON_TEXT_0038AS = "REASON_TEXT_0038AS";
            internal const string REASON_TEXT_0038 = "REASON_TEXT_0038";
            internal const string REASON_TEXT_0038DL = "REASON_TEXT_0038DL";
            internal const string REASON_TEXT_0038XL = "REASON_TEXT_0038XL";
            internal const string REASON_TEXT_0038DV = "REASON_TEXT_0038DV";
            internal const string REASON_TEXT_0038XV = "REASON_TEXT_0038XV";
            internal const string REASON_TEXT_0038XX = "REASON_TEXT_0038XX";
            internal const string IMPORT_CURRENT_PAGE_NUM_0039EV = "IMPORT_CURRENT_PAGE_NUM_0039EV";
            internal const string IEF_SUPPLIED_0039ET = "IEF_SUPPLIED_0039ET";
            internal const string COUNT_0039AS = "COUNT_0039AS";
            internal const string COUNT_0039 = "COUNT_0039";
            internal const string COUNT_0039XX = "COUNT_0039XX";
            internal const string IMPORT_WAR_MAILING_ADDR_0040EV = "IMPORT_WAR_MAILING_ADDR_0040EV";
            internal const string CSE_PERSONS_WORK_SET_0040ET = "CSE_PERSONS_WORK_SET_0040ET";
            internal const string FORMATTED_NAME_0040AS = "FORMATTED_NAME_0040AS";
            internal const string FORMATTED_NAME_0040 = "FORMATTED_NAME_0040";
            internal const string FORMATTED_NAME_0040XX = "FORMATTED_NAME_0040XX";
            internal const string IMPORT_0041EV = "IMPORT_0041EV";
            internal const string INTERSTAT_WARRANT_0041ET = "INTERSTAT_WARRANT_0041ET";
            internal const string INTERSTATE_IND_0041AS = "INTERSTATE_IND_0041AS";
            internal const string INTERSTATE_IND_0041 = "INTERSTATE_IND_0041";
            internal const string INTERSTATE_IND_0041XX = "INTERSTATE_IND_0041XX";
            internal const string SHORT_AR_NAME_0041AS = "SHORT_AR_NAME_0041AS";
            internal const string SHORT_AR_NAME_0041 = "SHORT_AR_NAME_0041";
            internal const string SHORT_AR_NAME_0041XX = "SHORT_AR_NAME_0041XX";
            internal const string FIPS_0041AS = "FIPS_0041AS";
            internal const string FIPS_0041 = "FIPS_0041";
            internal const string FIPS_0041XX = "FIPS_0041XX";
            internal const string MEDICAL_IND_0041AS = "MEDICAL_IND_0041AS";
            internal const string MEDICAL_IND_0041 = "MEDICAL_IND_0041";
            internal const string MEDICAL_IND_0041XX = "MEDICAL_IND_0041XX";
            internal const string SHORT_AP_NAME_0041AS = "SHORT_AP_NAME_0041AS";
            internal const string SHORT_AP_NAME_0041 = "SHORT_AP_NAME_0041";
            internal const string SHORT_AP_NAME_0041XX = "SHORT_AP_NAME_0041XX";
            internal const string AP_SSN_0041AS = "AP_SSN_0041AS";
            internal const string AP_SSN_0041 = "AP_SSN_0041";
            internal const string AP_SSN_0041XX = "AP_SSN_0041XX";
            internal const string OTHER_STATE_CASE_NO_0041AS = "OTHER_STATE_CASE_NO_0041AS";
            internal const string OTHER_STATE_CASE_NO_0041 = "OTHER_STATE_CASE_NO_0041";
            internal const string OTHER_STATE_CASE_NO_0041XX = "OTHER_STATE_CASE_NO_0041XX";
            internal const string COURT_ORDER_NO_0041AS = "COURT_ORDER_NO_0041AS";
            internal const string COURT_ORDER_NO_0041 = "COURT_ORDER_NO_0041";
            internal const string COURT_ORDER_NO_0041XX = "COURT_ORDER_NO_0041XX";
            internal const string IMPORT_SERVICE_PROVIDER_0042EV = "IMPORT_SERVICE_PROVIDER_0042EV";
            internal const string OFFICE_SERVICE_PROVIDER_0042ET = "OFFICE_SERVICE_PROVIDER_0042ET";
            internal const string WORK_PHONE_EXTENSION_0042AS = "WORK_PHONE_EXTENSION_0042AS";
            internal const string WORK_PHONE_EXTENSION_0042 = "WORK_PHONE_EXTENSION_0042";
            internal const string WORK_PHONE_EXTENSION_0042XX = "WORK_PHONE_EXTENSION_0042XX";
            internal const string WORK_PHONE_AREA_CODE_0042AS = "WORK_PHONE_AREA_CODE_0042AS";
            internal const string WORK_PHONE_AREA_CODE_0042 = "WORK_PHONE_AREA_CODE_0042";
            internal const string WORK_PHONE_AREA_CODE_0042XX = "WORK_PHONE_AREA_CODE_0042XX";
            internal const string WORK_PHONE_NUMBER_0042AS = "WORK_PHONE_NUMBER_0042AS";
            internal const string WORK_PHONE_NUMBER_0042 = "WORK_PHONE_NUMBER_0042";
            internal const string WORK_PHONE_NUMBER_0042XX = "WORK_PHONE_NUMBER_0042XX";
            internal const string EXPORT_PASS_AREA1_0043EV = "EXPORT_PASS_AREA1_0043EV";
            internal const string EXTERNAL_0043ET = "EXTERNAL_0043ET";
            internal const string FILE_INSTRUCTION_0043AS = "FILE_INSTRUCTION_0043AS";
            internal const string FILE_INSTRUCTION_0043 = "FILE_INSTRUCTION_0043";
            internal const string FILE_INSTRUCTION_0043XX = "FILE_INSTRUCTION_0043XX";
            internal const string NUMERIC_RETURN_CODE_0043AS = "NUMERIC_RETURN_CODE_0043AS";
            internal const string NUMERIC_RETURN_CODE_0043 = "NUMERIC_RETURN_CODE_0043";
            internal const string NUMERIC_RETURN_CODE_0043XX = "NUMERIC_RETURN_CODE_0043XX";
            internal const string TEXT_RETURN_CODE_0043AS = "TEXT_RETURN_CODE_0043AS";
            internal const string TEXT_RETURN_CODE_0043 = "TEXT_RETURN_CODE_0043";
            internal const string TEXT_RETURN_CODE_0043XX = "TEXT_RETURN_CODE_0043XX";
            internal const string TEXT_LINE_80_0043AS = "TEXT_LINE_80_0043AS";
            internal const string TEXT_LINE_80_0043 = "TEXT_LINE_80_0043";
            internal const string TEXT_LINE_80_0043XX = "TEXT_LINE_80_0043XX";
            internal const string EXPORT_PASS_AREA2_0044EV = "EXPORT_PASS_AREA2_0044EV";
            internal const string EXTERNAL_0044ET = "EXTERNAL_0044ET";
            internal const string FILE_INSTRUCTION_0044AS = "FILE_INSTRUCTION_0044AS";
            internal const string FILE_INSTRUCTION_0044 = "FILE_INSTRUCTION_0044";
            internal const string FILE_INSTRUCTION_0044XX = "FILE_INSTRUCTION_0044XX";
            internal const string NUMERIC_RETURN_CODE_0044AS = "NUMERIC_RETURN_CODE_0044AS";
            internal const string NUMERIC_RETURN_CODE_0044 = "NUMERIC_RETURN_CODE_0044";
            internal const string NUMERIC_RETURN_CODE_0044XX = "NUMERIC_RETURN_CODE_0044XX";
            internal const string TEXT_RETURN_CODE_0044AS = "TEXT_RETURN_CODE_0044AS";
            internal const string TEXT_RETURN_CODE_0044 = "TEXT_RETURN_CODE_0044";
            internal const string TEXT_RETURN_CODE_0044XX = "TEXT_RETURN_CODE_0044XX";
            internal const string TEXT_LINE_80_0044AS = "TEXT_LINE_80_0044AS";
            internal const string TEXT_LINE_80_0044 = "TEXT_LINE_80_0044";
            internal const string TEXT_LINE_80_0044XX = "TEXT_LINE_80_0044XX";
            internal const string EXPORT_LINES_WRITTEN_IN_0045EV = "EXPORT_LINES_WRITTEN_IN_0045EV";
            internal const string IEF_SUPPLIED_0045ET = "IEF_SUPPLIED_0045ET";
            internal const string COUNT_0045AS = "COUNT_0045AS";
            internal const string COUNT_0045 = "COUNT_0045";
            internal const string COUNT_0045XX = "COUNT_0045XX";
            internal const string EXPORT_OVERFLOW_INDICAT_0046EV = "EXPORT_OVERFLOW_INDICAT_0046EV";
            internal const string IEF_SUPPLIED_0046ET = "IEF_SUPPLIED_0046ET";
            internal const string FLAG_0046AS = "FLAG_0046AS";
            internal const string FLAG_0046 = "FLAG_0046";
            internal const string FLAG_0046XX = "FLAG_0046XX";
            internal const string EXPORT_CURRENT_PAGE_NUM_0047EV = "EXPORT_CURRENT_PAGE_NUM_0047EV";
            internal const string IEF_SUPPLIED_0047ET = "IEF_SUPPLIED_0047ET";
            internal const string COUNT_0047AS = "COUNT_0047AS";
            internal const string COUNT_0047 = "COUNT_0047";
            internal const string COUNT_0047XX = "COUNT_0047XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup IMPORT_PASS_AREA_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_PASS_AREA_0001EV); } }
        public IGroup EXTERNAL_0001ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0001ET); } }
        public IField FILE_INSTRUCTION_0001AS { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0001AS); } }
        public IField FILE_INSTRUCTION_0001 { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0001); } }
        public IField FILE_INSTRUCTION_0001XX { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0001XX); } }
        public IGroup IMPORT_WARLINE_PAYEE_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_WARLINE_PAYEE_0002EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0002ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0002ET); } }
        public IField FORMATTED_NAME_0002AS { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0002AS); } }
        public IField FORMATTED_NAME_0002 { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0002); } }
        public IField FORMATTED_NAME_0002XX { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0002XX); } }
        public IField NUMBER_0002AS { get { return GetElementByName<IField>(Names.NUMBER_0002AS); } }
        public IField NUMBER_0002 { get { return GetElementByName<IField>(Names.NUMBER_0002); } }
        public IField NUMBER_0002XX { get { return GetElementByName<IField>(Names.NUMBER_0002XX); } }
        public IGroup IMPORT_WARLINE_DESIG_0003EV { get { return GetElementByName<IGroup>(Names.IMPORT_WARLINE_DESIG_0003EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0003ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0003ET); } }
        public IField FORMATTED_NAME_0003AS { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0003AS); } }
        public IField FORMATTED_NAME_0003 { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0003); } }
        public IField FORMATTED_NAME_0003XX { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0003XX); } }
        public IField NUMBER_0003AS { get { return GetElementByName<IField>(Names.NUMBER_0003AS); } }
        public IField NUMBER_0003 { get { return GetElementByName<IField>(Names.NUMBER_0003); } }
        public IField NUMBER_0003XX { get { return GetElementByName<IField>(Names.NUMBER_0003XX); } }
        public IGroup IMPORT_0004EV { get { return GetElementByName<IGroup>(Names.IMPORT_0004EV); } }
        public IGroup CSE_PERSON_ADDRESS_0004ET { get { return GetElementByName<IGroup>(Names.CSE_PERSON_ADDRESS_0004ET); } }
        public IField LOCATION_TYPE_0004AS { get { return GetElementByName<IField>(Names.LOCATION_TYPE_0004AS); } }
        public IField LOCATION_TYPE_0004 { get { return GetElementByName<IField>(Names.LOCATION_TYPE_0004); } }
        public IField LOCATION_TYPE_0004XX { get { return GetElementByName<IField>(Names.LOCATION_TYPE_0004XX); } }
        public IField STREET_1_0004AS { get { return GetElementByName<IField>(Names.STREET_1_0004AS); } }
        public IField STREET_1_0004 { get { return GetElementByName<IField>(Names.STREET_1_0004); } }
        public IField STREET_1_0004XX { get { return GetElementByName<IField>(Names.STREET_1_0004XX); } }
        public IField STREET_2_0004AS { get { return GetElementByName<IField>(Names.STREET_2_0004AS); } }
        public IField STREET_2_0004 { get { return GetElementByName<IField>(Names.STREET_2_0004); } }
        public IField STREET_2_0004XX { get { return GetElementByName<IField>(Names.STREET_2_0004XX); } }
        public IField CITY_0004AS { get { return GetElementByName<IField>(Names.CITY_0004AS); } }
        public IField CITY_0004 { get { return GetElementByName<IField>(Names.CITY_0004); } }
        public IField CITY_0004XX { get { return GetElementByName<IField>(Names.CITY_0004XX); } }
        public IField COUNTY_0004AS { get { return GetElementByName<IField>(Names.COUNTY_0004AS); } }
        public IField COUNTY_0004 { get { return GetElementByName<IField>(Names.COUNTY_0004); } }
        public IField COUNTY_0004XX { get { return GetElementByName<IField>(Names.COUNTY_0004XX); } }
        public IField STATE_0004AS { get { return GetElementByName<IField>(Names.STATE_0004AS); } }
        public IField STATE_0004 { get { return GetElementByName<IField>(Names.STATE_0004); } }
        public IField STATE_0004XX { get { return GetElementByName<IField>(Names.STATE_0004XX); } }
        public IField ZIP_CODE_0004AS { get { return GetElementByName<IField>(Names.ZIP_CODE_0004AS); } }
        public IField ZIP_CODE_0004 { get { return GetElementByName<IField>(Names.ZIP_CODE_0004); } }
        public IField ZIP_CODE_0004XX { get { return GetElementByName<IField>(Names.ZIP_CODE_0004XX); } }
        public IField ZIP4_0004AS { get { return GetElementByName<IField>(Names.ZIP4_0004AS); } }
        public IField ZIP4_0004 { get { return GetElementByName<IField>(Names.ZIP4_0004); } }
        public IField ZIP4_0004XX { get { return GetElementByName<IField>(Names.ZIP4_0004XX); } }
        public IField STREET_3_0004AS { get { return GetElementByName<IField>(Names.STREET_3_0004AS); } }
        public IField STREET_3_0004 { get { return GetElementByName<IField>(Names.STREET_3_0004); } }
        public IField STREET_3_0004XX { get { return GetElementByName<IField>(Names.STREET_3_0004XX); } }
        public IField STREET_4_0004AS { get { return GetElementByName<IField>(Names.STREET_4_0004AS); } }
        public IField STREET_4_0004 { get { return GetElementByName<IField>(Names.STREET_4_0004); } }
        public IField STREET_4_0004XX { get { return GetElementByName<IField>(Names.STREET_4_0004XX); } }
        public IField PROVINCE_0004AS { get { return GetElementByName<IField>(Names.PROVINCE_0004AS); } }
        public IField PROVINCE_0004 { get { return GetElementByName<IField>(Names.PROVINCE_0004); } }
        public IField PROVINCE_0004XX { get { return GetElementByName<IField>(Names.PROVINCE_0004XX); } }
        public IField POSTAL_CODE_0004AS { get { return GetElementByName<IField>(Names.POSTAL_CODE_0004AS); } }
        public IField POSTAL_CODE_0004 { get { return GetElementByName<IField>(Names.POSTAL_CODE_0004); } }
        public IField POSTAL_CODE_0004XX { get { return GetElementByName<IField>(Names.POSTAL_CODE_0004XX); } }
        public IField COUNTRY_0004AS { get { return GetElementByName<IField>(Names.COUNTRY_0004AS); } }
        public IField COUNTRY_0004 { get { return GetElementByName<IField>(Names.COUNTRY_0004); } }
        public IField COUNTRY_0004XX { get { return GetElementByName<IField>(Names.COUNTRY_0004XX); } }
        public IGroup IMPORT_WARLINE_0005EV { get { return GetElementByName<IGroup>(Names.IMPORT_WARLINE_0005EV); } }
        public IGroup WARRANT_0005ET { get { return GetElementByName<IGroup>(Names.WARRANT_0005ET); } }
        public IField AMOUNT_0005AS { get { return GetElementByName<IField>(Names.AMOUNT_0005AS); } }
        public IField AMOUNT_0005 { get { return GetElementByName<IField>(Names.AMOUNT_0005); } }
        public IField AMOUNT_0005XX { get { return GetElementByName<IField>(Names.AMOUNT_0005XX); } }
        public IField NUMBER_0005AS { get { return GetElementByName<IField>(Names.NUMBER_0005AS); } }
        public IField NUMBER_0005 { get { return GetElementByName<IField>(Names.NUMBER_0005); } }
        public IField NUMBER_0005XX { get { return GetElementByName<IField>(Names.NUMBER_0005XX); } }
        public IField PRINT_DATE_0005AS { get { return GetElementByName<IField>(Names.PRINT_DATE_0005AS); } }
        public IField PRINT_DATE_0005 { get { return GetElementByName<IField>(Names.PRINT_DATE_0005); } }
        public IField PRINT_DATE_0005XX { get { return GetElementByName<IField>(Names.PRINT_DATE_0005XX); } }
        public IField SYSTEM_GENERATED_IDENTI_0006AS { get { return GetElementByName<IField>(Names.SYSTEM_GENERATED_IDENTI_0006AS); } }
        public IField SYSTEM_GENERATED_IDENTIFI_0006 { get { return GetElementByName<IField>(Names.SYSTEM_GENERATED_IDENTIFI_0006); } }
        public IField SYSTEM_GENERATED_IDENTI_0006XX { get { return GetElementByName<IField>(Names.SYSTEM_GENERATED_IDENTI_0006XX); } }
        public IGroup IMPORT_DETLINE_0001RG { get { return GetElementByName<IGroup>(Names.IMPORT_DETLINE_0001RG); } }
        public IField IMPORT_DETLINE_0001MA { get { return GetElementByName<IField>(Names.IMPORT_DETLINE_0001MA); } }
        public IField IMPORT_DETLINE_0001MX { get { return GetElementByName<IField>(Names.IMPORT_DETLINE_0001MX); } }
        public IArrayElementAccessor<IGroup> IMPORT_DETLINE_0001 { get { return GetArrayElementAccessor<IGroup>(Names.IMPORT_DETLINE_0001); } }
        public IArrayElementAccessor<IField> IMPORT_DETLINE_0001AC { get { return GetArrayElementAccessor<IField>(Names.IMPORT_DETLINE_0001AC); } }
        public IArrayElementAccessor<IGroup> GR_IMPORT_DETLINE_PAYOR_0007EV { get { return GetArrayElementAccessor<IGroup>(Names.GR_IMPORT_DETLINE_PAYOR_0007EV); } }
        public IArrayElementAccessor<IGroup> CSE_PERSONS_WORK_SET_0007ET { get { return GetArrayElementAccessor<IGroup>(Names.CSE_PERSONS_WORK_SET_0007ET); } }
        public IArrayElementAccessor<IField> FORMATTED_NAME_0007AS { get { return GetArrayElementAccessor<IField>(Names.FORMATTED_NAME_0007AS); } }
        public IArrayElementAccessor<IField> FORMATTED_NAME_0007 { get { return GetArrayElementAccessor<IField>(Names.FORMATTED_NAME_0007); } }
        public IArrayElementAccessor<IField> FORMATTED_NAME_0007XX { get { return GetArrayElementAccessor<IField>(Names.FORMATTED_NAME_0007XX); } }
        public IArrayElementAccessor<IField> NUMBER_0007AS { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0007AS); } }
        public IArrayElementAccessor<IField> NUMBER_0007 { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0007); } }
        public IArrayElementAccessor<IField> NUMBER_0007XX { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0007XX); } }
        public IArrayElementAccessor<IGroup> GR_IMPORT_DETLINE_ORD_0008EV { get { return GetArrayElementAccessor<IGroup>(Names.GR_IMPORT_DETLINE_ORD_0008EV); } }
        public IArrayElementAccessor<IGroup> LEGAL_ACTION_0008ET { get { return GetArrayElementAccessor<IGroup>(Names.LEGAL_ACTION_0008ET); } }
        public IArrayElementAccessor<IField> COURT_CASE_NUMBER_0008AS { get { return GetArrayElementAccessor<IField>(Names.COURT_CASE_NUMBER_0008AS); } }
        public IArrayElementAccessor<IField> COURT_CASE_NUMBER_0008 { get { return GetArrayElementAccessor<IField>(Names.COURT_CASE_NUMBER_0008); } }
        public IArrayElementAccessor<IField> COURT_CASE_NUMBER_0008XX { get { return GetArrayElementAccessor<IField>(Names.COURT_CASE_NUMBER_0008XX); } }
        public IArrayElementAccessor<IGroup> GR_IMPORT_DETLINE_TYPE_0009EV { get { return GetArrayElementAccessor<IGroup>(Names.GR_IMPORT_DETLINE_TYPE_0009EV); } }
        public IArrayElementAccessor<IGroup> DISBURSEMENT_TYPE_0009ET { get { return GetArrayElementAccessor<IGroup>(Names.DISBURSEMENT_TYPE_0009ET); } }
        public IArrayElementAccessor<IField> NAME_0009AS { get { return GetArrayElementAccessor<IField>(Names.NAME_0009AS); } }
        public IArrayElementAccessor<IField> NAME_0009 { get { return GetArrayElementAccessor<IField>(Names.NAME_0009); } }
        public IArrayElementAccessor<IField> NAME_0009XX { get { return GetArrayElementAccessor<IField>(Names.NAME_0009XX); } }
        public IArrayElementAccessor<IGroup> GR_IMPORT_DETLINE_0010EV { get { return GetArrayElementAccessor<IGroup>(Names.GR_IMPORT_DETLINE_0010EV); } }
        public IArrayElementAccessor<IGroup> LOCAL_FINANCE_WORK_AREA_0010ET { get { return GetArrayElementAccessor<IGroup>(Names.LOCAL_FINANCE_WORK_AREA_0010ET); } }
        public IArrayElementAccessor<IField> DISB_DATE_0010AS { get { return GetArrayElementAccessor<IField>(Names.DISB_DATE_0010AS); } }
        public IArrayElementAccessor<IField> DISB_DATE_0010 { get { return GetArrayElementAccessor<IField>(Names.DISB_DATE_0010); } }
        public IArrayElementAccessor<IField> DISB_DATE_0010XX { get { return GetArrayElementAccessor<IField>(Names.DISB_DATE_0010XX); } }
        public IArrayElementAccessor<IGroup> GR_IMPORT_DETLINE_TRANS_0011EV { get { return GetArrayElementAccessor<IGroup>(Names.GR_IMPORT_DETLINE_TRANS_0011EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0011ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0011ET); } }
        public IArrayElementAccessor<IField> FLAG_0011AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0011AS); } }
        public IArrayElementAccessor<IField> FLAG_0011 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0011); } }
        public IArrayElementAccessor<IField> FLAG_0011XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0011XX); } }
        public IArrayElementAccessor<IGroup> GR_IMPORT_DETLINE_TRAN__0012EV { get { return GetArrayElementAccessor<IGroup>(Names.GR_IMPORT_DETLINE_TRAN__0012EV); } }
        public IArrayElementAccessor<IGroup> DISBURSEMENT_TRANSACTIO_0012ET { get { return GetArrayElementAccessor<IGroup>(Names.DISBURSEMENT_TRANSACTIO_0012ET); } }
        public IArrayElementAccessor<IField> AMOUNT_0012AS { get { return GetArrayElementAccessor<IField>(Names.AMOUNT_0012AS); } }
        public IArrayElementAccessor<IField> AMOUNT_0012 { get { return GetArrayElementAccessor<IField>(Names.AMOUNT_0012); } }
        public IArrayElementAccessor<IField> AMOUNT_0012XX { get { return GetArrayElementAccessor<IField>(Names.AMOUNT_0012XX); } }
        public IArrayElementAccessor<IGroup> GR_IMPORT_DETLINE_0013EV { get { return GetArrayElementAccessor<IGroup>(Names.GR_IMPORT_DETLINE_0013EV); } }
        public IArrayElementAccessor<IGroup> DISBURSEMENT_TRANSACTIO_0013ET { get { return GetArrayElementAccessor<IGroup>(Names.DISBURSEMENT_TRANSACTIO_0013ET); } }
        public IArrayElementAccessor<IField> REFERENCE_NUMBER_0013AS { get { return GetArrayElementAccessor<IField>(Names.REFERENCE_NUMBER_0013AS); } }
        public IArrayElementAccessor<IGroup> REFERENCE_NUMBER_0013 { get { return GetArrayElementAccessor<IGroup>(Names.REFERENCE_NUMBER_0013); } }
        public IArrayElementAccessor<IField> REFERENCE_NUMBER_0013DL { get { return GetArrayElementAccessor<IField>(Names.REFERENCE_NUMBER_0013DL); } }
        public IArrayElementAccessor<IField> REFERENCE_NUMBER_0013XL { get { return GetArrayElementAccessor<IField>(Names.REFERENCE_NUMBER_0013XL); } }
        public IArrayElementAccessor<IField> REFERENCE_NUMBER_0013DV { get { return GetArrayElementAccessor<IField>(Names.REFERENCE_NUMBER_0013DV); } }
        public IArrayElementAccessor<IField> REFERENCE_NUMBER_0013XV { get { return GetArrayElementAccessor<IField>(Names.REFERENCE_NUMBER_0013XV); } }
        public IArrayElementAccessor<IField> REFERENCE_NUMBER_0013XX { get { return GetArrayElementAccessor<IField>(Names.REFERENCE_NUMBER_0013XX); } }
        public IGroup IMPORT_REPORT_TYPE_0014EV { get { return GetElementByName<IGroup>(Names.IMPORT_REPORT_TYPE_0014EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0014ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0014ET); } }
        public IField CHAR_2_0014AS { get { return GetElementByName<IField>(Names.CHAR_2_0014AS); } }
        public IField CHAR_2_0014 { get { return GetElementByName<IField>(Names.CHAR_2_0014); } }
        public IField CHAR_2_0014XX { get { return GetElementByName<IField>(Names.CHAR_2_0014XX); } }
        public IGroup IMPORT_STATEMENT_DATE_0015EV { get { return GetElementByName<IGroup>(Names.IMPORT_STATEMENT_DATE_0015EV); } }
        public IGroup DATE_WORK_AREA_0015ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0015ET); } }
        public IField DATE_0015AS { get { return GetElementByName<IField>(Names.DATE_0015AS); } }
        public IField DATE_0015 { get { return GetElementByName<IField>(Names.DATE_0015); } }
        public IField DATE_0015XX { get { return GetElementByName<IField>(Names.DATE_0015XX); } }
        public IGroup IMPORT_FIPS_CODE_0016EV { get { return GetElementByName<IGroup>(Names.IMPORT_FIPS_CODE_0016EV); } }
        public IGroup TEXT_WORK_AREA_0016ET { get { return GetElementByName<IGroup>(Names.TEXT_WORK_AREA_0016ET); } }
        public IField TEXT_8_0016AS { get { return GetElementByName<IField>(Names.TEXT_8_0016AS); } }
        public IField TEXT_8_0016 { get { return GetElementByName<IField>(Names.TEXT_8_0016); } }
        public IField TEXT_8_0016XX { get { return GetElementByName<IField>(Names.TEXT_8_0016XX); } }
        public IGroup IMPORT_FILE_OPEN_MODE_0017EV { get { return GetElementByName<IGroup>(Names.IMPORT_FILE_OPEN_MODE_0017EV); } }
        public IGroup IEF_SUPPLIED_0017ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0017ET); } }
        public IField FLAG_0017AS { get { return GetElementByName<IField>(Names.FLAG_0017AS); } }
        public IField FLAG_0017 { get { return GetElementByName<IField>(Names.FLAG_0017); } }
        public IField FLAG_0017XX { get { return GetElementByName<IField>(Names.FLAG_0017XX); } }
        public IGroup IMPORT_FDSO_IND_0018EV { get { return GetElementByName<IGroup>(Names.IMPORT_FDSO_IND_0018EV); } }
        public IGroup IEF_SUPPLIED_0018ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0018ET); } }
        public IField FLAG_0018AS { get { return GetElementByName<IField>(Names.FLAG_0018AS); } }
        public IField FLAG_0018 { get { return GetElementByName<IField>(Names.FLAG_0018); } }
        public IField FLAG_0018XX { get { return GetElementByName<IField>(Names.FLAG_0018XX); } }
        public IGroup IMPORT_NET_WAR_DIST_AMT_0019EV { get { return GetElementByName<IGroup>(Names.IMPORT_NET_WAR_DIST_AMT_0019EV); } }
        public IGroup IEF_SUPPLIED_0019ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0019ET); } }
        public IField AVERAGE_CURRENCY_0019AS { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0019AS); } }
        public IField AVERAGE_CURRENCY_0019 { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0019); } }
        public IField AVERAGE_CURRENCY_0019XX { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0019XX); } }
        public IGroup IMPORT_AGENCY_NUMBER_0020EV { get { return GetElementByName<IGroup>(Names.IMPORT_AGENCY_NUMBER_0020EV); } }
        public IGroup TEXT_WORK_AREA_0020ET { get { return GetElementByName<IGroup>(Names.TEXT_WORK_AREA_0020ET); } }
        public IField TEXT_4_0020AS { get { return GetElementByName<IField>(Names.TEXT_4_0020AS); } }
        public IField TEXT_4_0020 { get { return GetElementByName<IField>(Names.TEXT_4_0020); } }
        public IField TEXT_4_0020XX { get { return GetElementByName<IField>(Names.TEXT_4_0020XX); } }
        public IGroup IMPORT_0021EV { get { return GetElementByName<IGroup>(Names.IMPORT_0021EV); } }
        public IGroup FUND_0021ET { get { return GetElementByName<IGroup>(Names.FUND_0021ET); } }
        public IField NUMBER_0021AS { get { return GetElementByName<IField>(Names.NUMBER_0021AS); } }
        public IField NUMBER_0021 { get { return GetElementByName<IField>(Names.NUMBER_0021); } }
        public IField NUMBER_0021XX { get { return GetElementByName<IField>(Names.NUMBER_0021XX); } }
        public IGroup IMPORT_OVERFLOW_INDICAT_0022EV { get { return GetElementByName<IGroup>(Names.IMPORT_OVERFLOW_INDICAT_0022EV); } }
        public IGroup IEF_SUPPLIED_0022ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0022ET); } }
        public IField FLAG_0022AS { get { return GetElementByName<IField>(Names.FLAG_0022AS); } }
        public IField FLAG_0022 { get { return GetElementByName<IField>(Names.FLAG_0022); } }
        public IField FLAG_0022XX { get { return GetElementByName<IField>(Names.FLAG_0022XX); } }
        public IGroup IMPORT_LINES_WRITTEN_IN_0023EV { get { return GetElementByName<IGroup>(Names.IMPORT_LINES_WRITTEN_IN_0023EV); } }
        public IGroup IEF_SUPPLIED_0023ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0023ET); } }
        public IField COUNT_0023AS { get { return GetElementByName<IField>(Names.COUNT_0023AS); } }
        public IField COUNT_0023 { get { return GetElementByName<IField>(Names.COUNT_0023); } }
        public IField COUNT_0023XX { get { return GetElementByName<IField>(Names.COUNT_0023XX); } }
        public IGroup IMPORT_0024EV { get { return GetElementByName<IGroup>(Names.IMPORT_0024EV); } }
        public IGroup PAY_TAPE_0024ET { get { return GetElementByName<IGroup>(Names.PAY_TAPE_0024ET); } }
        public IField VOUCHER_NUMBER_0024AS { get { return GetElementByName<IField>(Names.VOUCHER_NUMBER_0024AS); } }
        public IField VOUCHER_NUMBER_0024 { get { return GetElementByName<IField>(Names.VOUCHER_NUMBER_0024); } }
        public IField VOUCHER_NUMBER_0024XX { get { return GetElementByName<IField>(Names.VOUCHER_NUMBER_0024XX); } }
        public IField PROCESS_DATE_0024AS { get { return GetElementByName<IField>(Names.PROCESS_DATE_0024AS); } }
        public IField PROCESS_DATE_0024 { get { return GetElementByName<IField>(Names.PROCESS_DATE_0024); } }
        public IField PROCESS_DATE_0024XX { get { return GetElementByName<IField>(Names.PROCESS_DATE_0024XX); } }
        public IGroup IMPORT_STARS_NON_ADC_0025EV { get { return GetElementByName<IGroup>(Names.IMPORT_STARS_NON_ADC_0025EV); } }
        public IGroup IEF_SUPPLIED_0025ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0025ET); } }
        public IField AVERAGE_CURRENCY_0025AS { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0025AS); } }
        public IField AVERAGE_CURRENCY_0025 { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0025); } }
        public IField AVERAGE_CURRENCY_0025XX { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0025XX); } }
        public IGroup IMPORT_STARS_PASSTHRU_0026EV { get { return GetElementByName<IGroup>(Names.IMPORT_STARS_PASSTHRU_0026EV); } }
        public IGroup IEF_SUPPLIED_0026ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0026ET); } }
        public IField AVERAGE_CURRENCY_0026AS { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0026AS); } }
        public IField AVERAGE_CURRENCY_0026 { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0026); } }
        public IField AVERAGE_CURRENCY_0026XX { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0026XX); } }
        public IGroup IMPORT_STARS_REFUND_0027EV { get { return GetElementByName<IGroup>(Names.IMPORT_STARS_REFUND_0027EV); } }
        public IGroup IEF_SUPPLIED_0027ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0027ET); } }
        public IField AVERAGE_CURRENCY_0027AS { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0027AS); } }
        public IField AVERAGE_CURRENCY_0027 { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0027); } }
        public IField AVERAGE_CURRENCY_0027XX { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0027XX); } }
        public IGroup IMPORT_STARS_BADCHK_0028EV { get { return GetElementByName<IGroup>(Names.IMPORT_STARS_BADCHK_0028EV); } }
        public IGroup IEF_SUPPLIED_0028ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0028ET); } }
        public IField AVERAGE_CURRENCY_0028AS { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0028AS); } }
        public IField AVERAGE_CURRENCY_0028 { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0028); } }
        public IField AVERAGE_CURRENCY_0028XX { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0028XX); } }
        public IGroup IMPORT_STARS_INT_ST_0029EV { get { return GetElementByName<IGroup>(Names.IMPORT_STARS_INT_ST_0029EV); } }
        public IGroup IEF_SUPPLIED_0029ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0029ET); } }
        public IField AVERAGE_CURRENCY_0029AS { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0029AS); } }
        public IField AVERAGE_CURRENCY_0029 { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0029); } }
        public IField AVERAGE_CURRENCY_0029XX { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0029XX); } }
        public IGroup IMPORT_STARS_CRT_FEE_0030EV { get { return GetElementByName<IGroup>(Names.IMPORT_STARS_CRT_FEE_0030EV); } }
        public IGroup IEF_SUPPLIED_0030ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0030ET); } }
        public IField AVERAGE_CURRENCY_0030AS { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0030AS); } }
        public IField AVERAGE_CURRENCY_0030 { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0030); } }
        public IField AVERAGE_CURRENCY_0030XX { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0030XX); } }
        public IGroup IMPORT_STARS_EXC_CS_0031EV { get { return GetElementByName<IGroup>(Names.IMPORT_STARS_EXC_CS_0031EV); } }
        public IGroup IEF_SUPPLIED_0031ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0031ET); } }
        public IField AVERAGE_CURRENCY_0031AS { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0031AS); } }
        public IField AVERAGE_CURRENCY_0031 { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0031); } }
        public IField AVERAGE_CURRENCY_0031XX { get { return GetElementByName<IField>(Names.AVERAGE_CURRENCY_0031XX); } }
        public IGroup IMPORT_STARS_WAR_0032EV { get { return GetElementByName<IGroup>(Names.IMPORT_STARS_WAR_0032EV); } }
        public IGroup PAYMENT_REQUEST_0032ET { get { return GetElementByName<IGroup>(Names.PAYMENT_REQUEST_0032ET); } }
        public IField AMOUNT_0032AS { get { return GetElementByName<IField>(Names.AMOUNT_0032AS); } }
        public IField AMOUNT_0032 { get { return GetElementByName<IField>(Names.AMOUNT_0032); } }
        public IField AMOUNT_0032XX { get { return GetElementByName<IField>(Names.AMOUNT_0032XX); } }
        public IGroup IMPORT_FROM_0033EV { get { return GetElementByName<IGroup>(Names.IMPORT_FROM_0033EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0033ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0033ET); } }
        public IField FORMATTED_NAME_0033AS { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0033AS); } }
        public IField FORMATTED_NAME_0033 { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0033); } }
        public IField FORMATTED_NAME_0033XX { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0033XX); } }
        public IGroup IMPORT_FROM_0034EV { get { return GetElementByName<IGroup>(Names.IMPORT_FROM_0034EV); } }
        public IGroup OFFICE_0034ET { get { return GetElementByName<IGroup>(Names.OFFICE_0034ET); } }
        public IField NAME_0034AS { get { return GetElementByName<IField>(Names.NAME_0034AS); } }
        public IField NAME_0034 { get { return GetElementByName<IField>(Names.NAME_0034); } }
        public IField NAME_0034XX { get { return GetElementByName<IField>(Names.NAME_0034XX); } }
        public IGroup IMPORT_FROM_0035EV { get { return GetElementByName<IGroup>(Names.IMPORT_FROM_0035EV); } }
        public IGroup OFFICE_ADDRESS_0035ET { get { return GetElementByName<IGroup>(Names.OFFICE_ADDRESS_0035ET); } }
        public IField STREET_1_0035AS { get { return GetElementByName<IField>(Names.STREET_1_0035AS); } }
        public IField STREET_1_0035 { get { return GetElementByName<IField>(Names.STREET_1_0035); } }
        public IField STREET_1_0035XX { get { return GetElementByName<IField>(Names.STREET_1_0035XX); } }
        public IField STREET_2_0035AS { get { return GetElementByName<IField>(Names.STREET_2_0035AS); } }
        public IField STREET_2_0035 { get { return GetElementByName<IField>(Names.STREET_2_0035); } }
        public IField STREET_2_0035XX { get { return GetElementByName<IField>(Names.STREET_2_0035XX); } }
        public IField CITY_0035AS { get { return GetElementByName<IField>(Names.CITY_0035AS); } }
        public IField CITY_0035 { get { return GetElementByName<IField>(Names.CITY_0035); } }
        public IField CITY_0035XX { get { return GetElementByName<IField>(Names.CITY_0035XX); } }
        public IField STATE_PROVINCE_0035AS { get { return GetElementByName<IField>(Names.STATE_PROVINCE_0035AS); } }
        public IField STATE_PROVINCE_0035 { get { return GetElementByName<IField>(Names.STATE_PROVINCE_0035); } }
        public IField STATE_PROVINCE_0035XX { get { return GetElementByName<IField>(Names.STATE_PROVINCE_0035XX); } }
        public IField ZIP_0035AS { get { return GetElementByName<IField>(Names.ZIP_0035AS); } }
        public IField ZIP_0035 { get { return GetElementByName<IField>(Names.ZIP_0035); } }
        public IField ZIP_0035XX { get { return GetElementByName<IField>(Names.ZIP_0035XX); } }
        public IField ZIP4_0035AS { get { return GetElementByName<IField>(Names.ZIP4_0035AS); } }
        public IField ZIP4_0035 { get { return GetElementByName<IField>(Names.ZIP4_0035); } }
        public IField ZIP4_0035XX { get { return GetElementByName<IField>(Names.ZIP4_0035XX); } }
        public IField COUNTRY_0035AS { get { return GetElementByName<IField>(Names.COUNTRY_0035AS); } }
        public IField COUNTRY_0035 { get { return GetElementByName<IField>(Names.COUNTRY_0035); } }
        public IField COUNTRY_0035XX { get { return GetElementByName<IField>(Names.COUNTRY_0035XX); } }
        public IGroup IMPORT_GROUP_0002RG { get { return GetElementByName<IGroup>(Names.IMPORT_GROUP_0002RG); } }
        public IField IMPORT_GROUP_0002MA { get { return GetElementByName<IField>(Names.IMPORT_GROUP_0002MA); } }
        public IField IMPORT_GROUP_0002MX { get { return GetElementByName<IField>(Names.IMPORT_GROUP_0002MX); } }
        public IArrayElementAccessor<IGroup> IMPORT_GROUP_0002 { get { return GetArrayElementAccessor<IGroup>(Names.IMPORT_GROUP_0002); } }
        public IArrayElementAccessor<IField> IMPORT_GROUP_0002AC { get { return GetArrayElementAccessor<IField>(Names.IMPORT_GROUP_0002AC); } }
        public IArrayElementAccessor<IGroup> GR_IMPORT_0036EV { get { return GetArrayElementAccessor<IGroup>(Names.GR_IMPORT_0036EV); } }
        public IArrayElementAccessor<IGroup> STARS_TRANSACTION_ENTRY_0036ET { get { return GetArrayElementAccessor<IGroup>(Names.STARS_TRANSACTION_ENTRY_0036ET); } }
        public IArrayElementAccessor<IField> STARS_CLASS_TYPE_0036AS { get { return GetArrayElementAccessor<IField>(Names.STARS_CLASS_TYPE_0036AS); } }
        public IArrayElementAccessor<IField> STARS_CLASS_TYPE_0036 { get { return GetArrayElementAccessor<IField>(Names.STARS_CLASS_TYPE_0036); } }
        public IArrayElementAccessor<IField> STARS_CLASS_TYPE_0036XX { get { return GetArrayElementAccessor<IField>(Names.STARS_CLASS_TYPE_0036XX); } }
        public IArrayElementAccessor<IField> VOUCHER_NUMBER_0036AS { get { return GetArrayElementAccessor<IField>(Names.VOUCHER_NUMBER_0036AS); } }
        public IArrayElementAccessor<IField> VOUCHER_NUMBER_0036 { get { return GetArrayElementAccessor<IField>(Names.VOUCHER_NUMBER_0036); } }
        public IArrayElementAccessor<IField> VOUCHER_NUMBER_0036XX { get { return GetArrayElementAccessor<IField>(Names.VOUCHER_NUMBER_0036XX); } }
        public IArrayElementAccessor<IField> FIN_YR_0036AS { get { return GetArrayElementAccessor<IField>(Names.FIN_YR_0036AS); } }
        public IArrayElementAccessor<IField> FIN_YR_0036 { get { return GetArrayElementAccessor<IField>(Names.FIN_YR_0036); } }
        public IArrayElementAccessor<IField> FIN_YR_0036XX { get { return GetArrayElementAccessor<IField>(Names.FIN_YR_0036XX); } }
        public IArrayElementAccessor<IField> SUFFIX_1_0036AS { get { return GetArrayElementAccessor<IField>(Names.SUFFIX_1_0036AS); } }
        public IArrayElementAccessor<IField> SUFFIX_1_0036 { get { return GetArrayElementAccessor<IField>(Names.SUFFIX_1_0036); } }
        public IArrayElementAccessor<IField> SUFFIX_1_0036XX { get { return GetArrayElementAccessor<IField>(Names.SUFFIX_1_0036XX); } }
        public IArrayElementAccessor<IField> TRAN_CODE_0036AS { get { return GetArrayElementAccessor<IField>(Names.TRAN_CODE_0036AS); } }
        public IArrayElementAccessor<IField> TRAN_CODE_0036 { get { return GetArrayElementAccessor<IField>(Names.TRAN_CODE_0036); } }
        public IArrayElementAccessor<IField> TRAN_CODE_0036XX { get { return GetArrayElementAccessor<IField>(Names.TRAN_CODE_0036XX); } }
        public IArrayElementAccessor<IField> AGENCY_CODE_0036AS { get { return GetArrayElementAccessor<IField>(Names.AGENCY_CODE_0036AS); } }
        public IArrayElementAccessor<IField> AGENCY_CODE_0036 { get { return GetArrayElementAccessor<IField>(Names.AGENCY_CODE_0036); } }
        public IArrayElementAccessor<IField> AGENCY_CODE_0036XX { get { return GetArrayElementAccessor<IField>(Names.AGENCY_CODE_0036XX); } }
        public IArrayElementAccessor<IField> FUND_CODE_0036AS { get { return GetArrayElementAccessor<IField>(Names.FUND_CODE_0036AS); } }
        public IArrayElementAccessor<IField> FUND_CODE_0036 { get { return GetArrayElementAccessor<IField>(Names.FUND_CODE_0036); } }
        public IArrayElementAccessor<IField> FUND_CODE_0036XX { get { return GetArrayElementAccessor<IField>(Names.FUND_CODE_0036XX); } }
        public IArrayElementAccessor<IField> INDEX_0036AS { get { return GetArrayElementAccessor<IField>(Names.INDEX_0036AS); } }
        public IArrayElementAccessor<IField> INDEX_0036 { get { return GetArrayElementAccessor<IField>(Names.INDEX_0036); } }
        public IArrayElementAccessor<IField> INDEX_0036XX { get { return GetArrayElementAccessor<IField>(Names.INDEX_0036XX); } }
        public IArrayElementAccessor<IField> PCA_CODE_0036AS { get { return GetArrayElementAccessor<IField>(Names.PCA_CODE_0036AS); } }
        public IArrayElementAccessor<IField> PCA_CODE_0036 { get { return GetArrayElementAccessor<IField>(Names.PCA_CODE_0036); } }
        public IArrayElementAccessor<IField> PCA_CODE_0036XX { get { return GetArrayElementAccessor<IField>(Names.PCA_CODE_0036XX); } }
        public IArrayElementAccessor<IField> EXPEND_SUB_OB_0036AS { get { return GetArrayElementAccessor<IField>(Names.EXPEND_SUB_OB_0036AS); } }
        public IArrayElementAccessor<IField> EXPEND_SUB_OB_0036 { get { return GetArrayElementAccessor<IField>(Names.EXPEND_SUB_OB_0036); } }
        public IArrayElementAccessor<IField> EXPEND_SUB_OB_0036XX { get { return GetArrayElementAccessor<IField>(Names.EXPEND_SUB_OB_0036XX); } }
        public IArrayElementAccessor<IField> REV_SUB_OB_0036AS { get { return GetArrayElementAccessor<IField>(Names.REV_SUB_OB_0036AS); } }
        public IArrayElementAccessor<IField> REV_SUB_OB_0036 { get { return GetArrayElementAccessor<IField>(Names.REV_SUB_OB_0036); } }
        public IArrayElementAccessor<IField> REV_SUB_OB_0036XX { get { return GetArrayElementAccessor<IField>(Names.REV_SUB_OB_0036XX); } }
        public IGroup IMPORT_HEADER_REC_WRITT_0037EV { get { return GetElementByName<IGroup>(Names.IMPORT_HEADER_REC_WRITT_0037EV); } }
        public IGroup IEF_SUPPLIED_0037ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0037ET); } }
        public IField FLAG_0037AS { get { return GetElementByName<IField>(Names.FLAG_0037AS); } }
        public IField FLAG_0037 { get { return GetElementByName<IField>(Names.FLAG_0037); } }
        public IField FLAG_0037XX { get { return GetElementByName<IField>(Names.FLAG_0037XX); } }
        public IGroup IMPORT_0038EV { get { return GetElementByName<IGroup>(Names.IMPORT_0038EV); } }
        public IGroup RECEIPT_REFUND_0038ET { get { return GetElementByName<IGroup>(Names.RECEIPT_REFUND_0038ET); } }
        public IField REASON_TEXT_0038AS { get { return GetElementByName<IField>(Names.REASON_TEXT_0038AS); } }
        public IGroup REASON_TEXT_0038 { get { return GetElementByName<IGroup>(Names.REASON_TEXT_0038); } }
        public IField REASON_TEXT_0038DL { get { return GetElementByName<IField>(Names.REASON_TEXT_0038DL); } }
        public IField REASON_TEXT_0038XL { get { return GetElementByName<IField>(Names.REASON_TEXT_0038XL); } }
        public IField REASON_TEXT_0038DV { get { return GetElementByName<IField>(Names.REASON_TEXT_0038DV); } }
        public IField REASON_TEXT_0038XV { get { return GetElementByName<IField>(Names.REASON_TEXT_0038XV); } }
        public IField REASON_TEXT_0038XX { get { return GetElementByName<IField>(Names.REASON_TEXT_0038XX); } }
        public IGroup IMPORT_CURRENT_PAGE_NUM_0039EV { get { return GetElementByName<IGroup>(Names.IMPORT_CURRENT_PAGE_NUM_0039EV); } }
        public IGroup IEF_SUPPLIED_0039ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0039ET); } }
        public IField COUNT_0039AS { get { return GetElementByName<IField>(Names.COUNT_0039AS); } }
        public IField COUNT_0039 { get { return GetElementByName<IField>(Names.COUNT_0039); } }
        public IField COUNT_0039XX { get { return GetElementByName<IField>(Names.COUNT_0039XX); } }
        public IGroup IMPORT_WAR_MAILING_ADDR_0040EV { get { return GetElementByName<IGroup>(Names.IMPORT_WAR_MAILING_ADDR_0040EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0040ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0040ET); } }
        public IField FORMATTED_NAME_0040AS { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0040AS); } }
        public IField FORMATTED_NAME_0040 { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0040); } }
        public IField FORMATTED_NAME_0040XX { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0040XX); } }
        public IGroup IMPORT_0041EV { get { return GetElementByName<IGroup>(Names.IMPORT_0041EV); } }
        public IGroup INTERSTAT_WARRANT_0041ET { get { return GetElementByName<IGroup>(Names.INTERSTAT_WARRANT_0041ET); } }
        public IField INTERSTATE_IND_0041AS { get { return GetElementByName<IField>(Names.INTERSTATE_IND_0041AS); } }
        public IField INTERSTATE_IND_0041 { get { return GetElementByName<IField>(Names.INTERSTATE_IND_0041); } }
        public IField INTERSTATE_IND_0041XX { get { return GetElementByName<IField>(Names.INTERSTATE_IND_0041XX); } }
        public IField SHORT_AR_NAME_0041AS { get { return GetElementByName<IField>(Names.SHORT_AR_NAME_0041AS); } }
        public IField SHORT_AR_NAME_0041 { get { return GetElementByName<IField>(Names.SHORT_AR_NAME_0041); } }
        public IField SHORT_AR_NAME_0041XX { get { return GetElementByName<IField>(Names.SHORT_AR_NAME_0041XX); } }
        public IField FIPS_0041AS { get { return GetElementByName<IField>(Names.FIPS_0041AS); } }
        public IField FIPS_0041 { get { return GetElementByName<IField>(Names.FIPS_0041); } }
        public IField FIPS_0041XX { get { return GetElementByName<IField>(Names.FIPS_0041XX); } }
        public IField MEDICAL_IND_0041AS { get { return GetElementByName<IField>(Names.MEDICAL_IND_0041AS); } }
        public IField MEDICAL_IND_0041 { get { return GetElementByName<IField>(Names.MEDICAL_IND_0041); } }
        public IField MEDICAL_IND_0041XX { get { return GetElementByName<IField>(Names.MEDICAL_IND_0041XX); } }
        public IField SHORT_AP_NAME_0041AS { get { return GetElementByName<IField>(Names.SHORT_AP_NAME_0041AS); } }
        public IField SHORT_AP_NAME_0041 { get { return GetElementByName<IField>(Names.SHORT_AP_NAME_0041); } }
        public IField SHORT_AP_NAME_0041XX { get { return GetElementByName<IField>(Names.SHORT_AP_NAME_0041XX); } }
        public IField AP_SSN_0041AS { get { return GetElementByName<IField>(Names.AP_SSN_0041AS); } }
        public IField AP_SSN_0041 { get { return GetElementByName<IField>(Names.AP_SSN_0041); } }
        public IField AP_SSN_0041XX { get { return GetElementByName<IField>(Names.AP_SSN_0041XX); } }
        public IField OTHER_STATE_CASE_NO_0041AS { get { return GetElementByName<IField>(Names.OTHER_STATE_CASE_NO_0041AS); } }
        public IField OTHER_STATE_CASE_NO_0041 { get { return GetElementByName<IField>(Names.OTHER_STATE_CASE_NO_0041); } }
        public IField OTHER_STATE_CASE_NO_0041XX { get { return GetElementByName<IField>(Names.OTHER_STATE_CASE_NO_0041XX); } }
        public IField COURT_ORDER_NO_0041AS { get { return GetElementByName<IField>(Names.COURT_ORDER_NO_0041AS); } }
        public IField COURT_ORDER_NO_0041 { get { return GetElementByName<IField>(Names.COURT_ORDER_NO_0041); } }
        public IField COURT_ORDER_NO_0041XX { get { return GetElementByName<IField>(Names.COURT_ORDER_NO_0041XX); } }
        public IGroup IMPORT_SERVICE_PROVIDER_0042EV { get { return GetElementByName<IGroup>(Names.IMPORT_SERVICE_PROVIDER_0042EV); } }
        public IGroup OFFICE_SERVICE_PROVIDER_0042ET { get { return GetElementByName<IGroup>(Names.OFFICE_SERVICE_PROVIDER_0042ET); } }
        public IField WORK_PHONE_EXTENSION_0042AS { get { return GetElementByName<IField>(Names.WORK_PHONE_EXTENSION_0042AS); } }
        public IField WORK_PHONE_EXTENSION_0042 { get { return GetElementByName<IField>(Names.WORK_PHONE_EXTENSION_0042); } }
        public IField WORK_PHONE_EXTENSION_0042XX { get { return GetElementByName<IField>(Names.WORK_PHONE_EXTENSION_0042XX); } }
        public IField WORK_PHONE_AREA_CODE_0042AS { get { return GetElementByName<IField>(Names.WORK_PHONE_AREA_CODE_0042AS); } }
        public IField WORK_PHONE_AREA_CODE_0042 { get { return GetElementByName<IField>(Names.WORK_PHONE_AREA_CODE_0042); } }
        public IField WORK_PHONE_AREA_CODE_0042XX { get { return GetElementByName<IField>(Names.WORK_PHONE_AREA_CODE_0042XX); } }
        public IField WORK_PHONE_NUMBER_0042AS { get { return GetElementByName<IField>(Names.WORK_PHONE_NUMBER_0042AS); } }
        public IField WORK_PHONE_NUMBER_0042 { get { return GetElementByName<IField>(Names.WORK_PHONE_NUMBER_0042); } }
        public IField WORK_PHONE_NUMBER_0042XX { get { return GetElementByName<IField>(Names.WORK_PHONE_NUMBER_0042XX); } }
        public IGroup EXPORT_PASS_AREA1_0043EV { get { return GetElementByName<IGroup>(Names.EXPORT_PASS_AREA1_0043EV); } }
        public IGroup EXTERNAL_0043ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0043ET); } }
        public IField FILE_INSTRUCTION_0043AS { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0043AS); } }
        public IField FILE_INSTRUCTION_0043 { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0043); } }
        public IField FILE_INSTRUCTION_0043XX { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0043XX); } }
        public IField NUMERIC_RETURN_CODE_0043AS { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0043AS); } }
        public IField NUMERIC_RETURN_CODE_0043 { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0043); } }
        public IField NUMERIC_RETURN_CODE_0043XX { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0043XX); } }
        public IField TEXT_RETURN_CODE_0043AS { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0043AS); } }
        public IField TEXT_RETURN_CODE_0043 { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0043); } }
        public IField TEXT_RETURN_CODE_0043XX { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0043XX); } }
        public IField TEXT_LINE_80_0043AS { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0043AS); } }
        public IField TEXT_LINE_80_0043 { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0043); } }
        public IField TEXT_LINE_80_0043XX { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0043XX); } }
        public IGroup EXPORT_PASS_AREA2_0044EV { get { return GetElementByName<IGroup>(Names.EXPORT_PASS_AREA2_0044EV); } }
        public IGroup EXTERNAL_0044ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0044ET); } }
        public IField FILE_INSTRUCTION_0044AS { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0044AS); } }
        public IField FILE_INSTRUCTION_0044 { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0044); } }
        public IField FILE_INSTRUCTION_0044XX { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0044XX); } }
        public IField NUMERIC_RETURN_CODE_0044AS { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0044AS); } }
        public IField NUMERIC_RETURN_CODE_0044 { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0044); } }
        public IField NUMERIC_RETURN_CODE_0044XX { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0044XX); } }
        public IField TEXT_RETURN_CODE_0044AS { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0044AS); } }
        public IField TEXT_RETURN_CODE_0044 { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0044); } }
        public IField TEXT_RETURN_CODE_0044XX { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0044XX); } }
        public IField TEXT_LINE_80_0044AS { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0044AS); } }
        public IField TEXT_LINE_80_0044 { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0044); } }
        public IField TEXT_LINE_80_0044XX { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0044XX); } }
        public IGroup EXPORT_LINES_WRITTEN_IN_0045EV { get { return GetElementByName<IGroup>(Names.EXPORT_LINES_WRITTEN_IN_0045EV); } }
        public IGroup IEF_SUPPLIED_0045ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0045ET); } }
        public IField COUNT_0045AS { get { return GetElementByName<IField>(Names.COUNT_0045AS); } }
        public IField COUNT_0045 { get { return GetElementByName<IField>(Names.COUNT_0045); } }
        public IField COUNT_0045XX { get { return GetElementByName<IField>(Names.COUNT_0045XX); } }
        public IGroup EXPORT_OVERFLOW_INDICAT_0046EV { get { return GetElementByName<IGroup>(Names.EXPORT_OVERFLOW_INDICAT_0046EV); } }
        public IGroup IEF_SUPPLIED_0046ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0046ET); } }
        public IField FLAG_0046AS { get { return GetElementByName<IField>(Names.FLAG_0046AS); } }
        public IField FLAG_0046 { get { return GetElementByName<IField>(Names.FLAG_0046); } }
        public IField FLAG_0046XX { get { return GetElementByName<IField>(Names.FLAG_0046XX); } }
        public IGroup EXPORT_CURRENT_PAGE_NUM_0047EV { get { return GetElementByName<IGroup>(Names.EXPORT_CURRENT_PAGE_NUM_0047EV); } }
        public IGroup IEF_SUPPLIED_0047ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0047ET); } }
        public IField COUNT_0047AS { get { return GetElementByName<IField>(Names.COUNT_0047AS); } }
        public IField COUNT_0047 { get { return GetElementByName<IField>(Names.COUNT_0047); } }
        public IField COUNT_0047XX { get { return GetElementByName<IField>(Names.COUNT_0047XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d93", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d93) =>
                   {
                       FILLER_d93.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d93.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d93.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(96, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 16);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewFillerField(199, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_PASS_AREA_0001EV, (IMPORT_PASS_AREA_0001EV) =>
           {
               IMPORT_PASS_AREA_0001EV.CreateNewGroup(Names.EXTERNAL_0001ET, (EXTERNAL_0001ET) =>
               {
                   EXTERNAL_0001ET.CreateNewField(Names.FILE_INSTRUCTION_0001AS, FieldType.String, 1);

                   IField FILE_INSTRUCTION_0001_local = EXTERNAL_0001ET.CreateNewField(Names.FILE_INSTRUCTION_0001, FieldType.String, 10);
                   EXTERNAL_0001ET.CreateNewFieldRedefine(Names.FILE_INSTRUCTION_0001XX, FieldType.String, FILE_INSTRUCTION_0001_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_WARLINE_PAYEE_0002EV, (IMPORT_WARLINE_PAYEE_0002EV) =>
           {
               IMPORT_WARLINE_PAYEE_0002EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0002ET, (CSE_PERSONS_WORK_SET_0002ET) =>
               {
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FORMATTED_NAME_0002AS, FieldType.String, 1);

                   IField FORMATTED_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FORMATTED_NAME_0002, FieldType.String, 33);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.FORMATTED_NAME_0002XX, FieldType.String, FORMATTED_NAME_0002_local, 33);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.NUMBER_0002AS, FieldType.String, 1);

                   IField NUMBER_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.NUMBER_0002, FieldType.String, 10);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.NUMBER_0002XX, FieldType.String, NUMBER_0002_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_WARLINE_DESIG_0003EV, (IMPORT_WARLINE_DESIG_0003EV) =>
           {
               IMPORT_WARLINE_DESIG_0003EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0003ET, (CSE_PERSONS_WORK_SET_0003ET) =>
               {
                   CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.FORMATTED_NAME_0003AS, FieldType.String, 1);

                   IField FORMATTED_NAME_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.FORMATTED_NAME_0003, FieldType.String, 33);
                   CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.FORMATTED_NAME_0003XX, FieldType.String, FORMATTED_NAME_0003_local, 33);
                   CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.NUMBER_0003AS, FieldType.String, 1);

                   IField NUMBER_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.NUMBER_0003, FieldType.String, 10);
                   CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.NUMBER_0003XX, FieldType.String, NUMBER_0003_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0004EV, (IMPORT_0004EV) =>
           {
               IMPORT_0004EV.CreateNewGroup(Names.CSE_PERSON_ADDRESS_0004ET, (CSE_PERSON_ADDRESS_0004ET) =>
               {
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.LOCATION_TYPE_0004AS, FieldType.String, 1);

                   IField LOCATION_TYPE_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.LOCATION_TYPE_0004, FieldType.String, 1);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.LOCATION_TYPE_0004XX, FieldType.String, LOCATION_TYPE_0004_local, 1);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.STREET_1_0004AS, FieldType.String, 1);

                   IField STREET_1_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.STREET_1_0004, FieldType.String, 25);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.STREET_1_0004XX, FieldType.String, STREET_1_0004_local, 25);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.STREET_2_0004AS, FieldType.String, 1);

                   IField STREET_2_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.STREET_2_0004, FieldType.String, 25);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.STREET_2_0004XX, FieldType.String, STREET_2_0004_local, 25);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.CITY_0004AS, FieldType.String, 1);

                   IField CITY_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.CITY_0004, FieldType.String, 15);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.CITY_0004XX, FieldType.String, CITY_0004_local, 15);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.COUNTY_0004AS, FieldType.String, 1);

                   IField COUNTY_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.COUNTY_0004, FieldType.String, 2);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.COUNTY_0004XX, FieldType.String, COUNTY_0004_local, 2);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.STATE_0004AS, FieldType.String, 1);

                   IField STATE_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.STATE_0004, FieldType.String, 2);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.STATE_0004XX, FieldType.String, STATE_0004_local, 2);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.ZIP_CODE_0004AS, FieldType.String, 1);

                   IField ZIP_CODE_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.ZIP_CODE_0004, FieldType.String, 5);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.ZIP_CODE_0004XX, FieldType.String, ZIP_CODE_0004_local, 5);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.ZIP4_0004AS, FieldType.String, 1);

                   IField ZIP4_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.ZIP4_0004, FieldType.String, 4);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.ZIP4_0004XX, FieldType.String, ZIP4_0004_local, 4);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.STREET_3_0004AS, FieldType.String, 1);

                   IField STREET_3_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.STREET_3_0004, FieldType.String, 25);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.STREET_3_0004XX, FieldType.String, STREET_3_0004_local, 25);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.STREET_4_0004AS, FieldType.String, 1);

                   IField STREET_4_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.STREET_4_0004, FieldType.String, 25);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.STREET_4_0004XX, FieldType.String, STREET_4_0004_local, 25);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.PROVINCE_0004AS, FieldType.String, 1);

                   IField PROVINCE_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.PROVINCE_0004, FieldType.String, 5);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.PROVINCE_0004XX, FieldType.String, PROVINCE_0004_local, 5);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.POSTAL_CODE_0004AS, FieldType.String, 1);

                   IField POSTAL_CODE_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.POSTAL_CODE_0004, FieldType.String, 10);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.POSTAL_CODE_0004XX, FieldType.String, POSTAL_CODE_0004_local, 10);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.COUNTRY_0004AS, FieldType.String, 1);

                   IField COUNTRY_0004_local = CSE_PERSON_ADDRESS_0004ET.CreateNewField(Names.COUNTRY_0004, FieldType.String, 2);
                   CSE_PERSON_ADDRESS_0004ET.CreateNewFieldRedefine(Names.COUNTRY_0004XX, FieldType.String, COUNTRY_0004_local, 2);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_WARLINE_0005EV, (IMPORT_WARLINE_0005EV) =>
           {
               IMPORT_WARLINE_0005EV.CreateNewGroup(Names.WARRANT_0005ET, (WARRANT_0005ET) =>
               {
                   WARRANT_0005ET.CreateNewField(Names.AMOUNT_0005AS, FieldType.String, 1);

                   IField AMOUNT_0005_local = WARRANT_0005ET.CreateNewField(Names.AMOUNT_0005, FieldType.SignedNumeric, 9, null, 2);
                   WARRANT_0005ET.CreateNewFieldRedefine(Names.AMOUNT_0005XX, FieldType.String, AMOUNT_0005_local, 9);
                   WARRANT_0005ET.CreateNewField(Names.NUMBER_0005AS, FieldType.String, 1);

                   IField NUMBER_0005_local = WARRANT_0005ET.CreateNewField(Names.NUMBER_0005, FieldType.String, 9);
                   WARRANT_0005ET.CreateNewFieldRedefine(Names.NUMBER_0005XX, FieldType.String, NUMBER_0005_local, 9);
                   WARRANT_0005ET.CreateNewField(Names.PRINT_DATE_0005AS, FieldType.String, 1);

                   IField PRINT_DATE_0005_local = WARRANT_0005ET.CreateNewField(Names.PRINT_DATE_0005, FieldType.SignedNumeric, 8);
                   WARRANT_0005ET.CreateNewFieldRedefine(Names.PRINT_DATE_0005XX, FieldType.String, PRINT_DATE_0005_local, 8);
                   WARRANT_0005ET.CreateNewField(Names.SYSTEM_GENERATED_IDENTI_0006AS, FieldType.String, 1);

                   IField SYSTEM_GENERATED_IDENTIFI_0006_local = WARRANT_0005ET.CreateNewField(Names.SYSTEM_GENERATED_IDENTIFI_0006, FieldType.SignedNumeric, 9);
                   WARRANT_0005ET.CreateNewFieldRedefine(Names.SYSTEM_GENERATED_IDENTI_0006XX, FieldType.String, SYSTEM_GENERATED_IDENTIFI_0006_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DETLINE_0001RG, (IMPORT_DETLINE_0001RG) =>
           {

               IField IMPORT_DETLINE_0001MA_local = IMPORT_DETLINE_0001RG.CreateNewField(Names.IMPORT_DETLINE_0001MA, FieldType.SignedNumeric, 4);
               IMPORT_DETLINE_0001RG.CreateNewFieldRedefine(Names.IMPORT_DETLINE_0001MX, FieldType.String, IMPORT_DETLINE_0001MA_local, 4);
               IMPORT_DETLINE_0001RG.CreateNewGroupArray(Names.IMPORT_DETLINE_0001, 500, (IMPORT_DETLINE_0001) =>
               {
                   IMPORT_DETLINE_0001.CreateNewField(Names.IMPORT_DETLINE_0001AC, FieldType.String, 1);
                   IMPORT_DETLINE_0001.CreateNewGroup(Names.GR_IMPORT_DETLINE_PAYOR_0007EV, (GR_IMPORT_DETLINE_PAYOR_0007EV) =>
                   {
                       GR_IMPORT_DETLINE_PAYOR_0007EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0007ET, (CSE_PERSONS_WORK_SET_0007ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0007ET.CreateNewField(Names.FORMATTED_NAME_0007AS, FieldType.String, 1);

                           IField FORMATTED_NAME_0007_local = CSE_PERSONS_WORK_SET_0007ET.CreateNewField(Names.FORMATTED_NAME_0007, FieldType.String, 33);
                           CSE_PERSONS_WORK_SET_0007ET.CreateNewFieldRedefine(Names.FORMATTED_NAME_0007XX, FieldType.String, FORMATTED_NAME_0007_local, 33);
                           CSE_PERSONS_WORK_SET_0007ET.CreateNewField(Names.NUMBER_0007AS, FieldType.String, 1);

                           IField NUMBER_0007_local = CSE_PERSONS_WORK_SET_0007ET.CreateNewField(Names.NUMBER_0007, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0007ET.CreateNewFieldRedefine(Names.NUMBER_0007XX, FieldType.String, NUMBER_0007_local, 10);
                       });
                   });
                   IMPORT_DETLINE_0001.CreateNewGroup(Names.GR_IMPORT_DETLINE_ORD_0008EV, (GR_IMPORT_DETLINE_ORD_0008EV) =>
                   {
                       GR_IMPORT_DETLINE_ORD_0008EV.CreateNewGroup(Names.LEGAL_ACTION_0008ET, (LEGAL_ACTION_0008ET) =>
                       {
                           LEGAL_ACTION_0008ET.CreateNewField(Names.COURT_CASE_NUMBER_0008AS, FieldType.String, 1);

                           IField COURT_CASE_NUMBER_0008_local = LEGAL_ACTION_0008ET.CreateNewField(Names.COURT_CASE_NUMBER_0008, FieldType.String, 17);
                           LEGAL_ACTION_0008ET.CreateNewFieldRedefine(Names.COURT_CASE_NUMBER_0008XX, FieldType.String, COURT_CASE_NUMBER_0008_local, 17);
                       });
                   });
                   IMPORT_DETLINE_0001.CreateNewGroup(Names.GR_IMPORT_DETLINE_TYPE_0009EV, (GR_IMPORT_DETLINE_TYPE_0009EV) =>
                   {
                       GR_IMPORT_DETLINE_TYPE_0009EV.CreateNewGroup(Names.DISBURSEMENT_TYPE_0009ET, (DISBURSEMENT_TYPE_0009ET) =>
                       {
                           DISBURSEMENT_TYPE_0009ET.CreateNewField(Names.NAME_0009AS, FieldType.String, 1);

                           IField NAME_0009_local = DISBURSEMENT_TYPE_0009ET.CreateNewField(Names.NAME_0009, FieldType.String, 40);
                           DISBURSEMENT_TYPE_0009ET.CreateNewFieldRedefine(Names.NAME_0009XX, FieldType.String, NAME_0009_local, 40);
                       });
                   });
                   IMPORT_DETLINE_0001.CreateNewGroup(Names.GR_IMPORT_DETLINE_0010EV, (GR_IMPORT_DETLINE_0010EV) =>
                   {
                       GR_IMPORT_DETLINE_0010EV.CreateNewGroup(Names.LOCAL_FINANCE_WORK_AREA_0010ET, (LOCAL_FINANCE_WORK_AREA_0010ET) =>
                       {
                           LOCAL_FINANCE_WORK_AREA_0010ET.CreateNewField(Names.DISB_DATE_0010AS, FieldType.String, 1);

                           IField DISB_DATE_0010_local = LOCAL_FINANCE_WORK_AREA_0010ET.CreateNewField(Names.DISB_DATE_0010, FieldType.SignedNumeric, 8);
                           LOCAL_FINANCE_WORK_AREA_0010ET.CreateNewFieldRedefine(Names.DISB_DATE_0010XX, FieldType.String, DISB_DATE_0010_local, 8);
                       });
                   });
                   IMPORT_DETLINE_0001.CreateNewGroup(Names.GR_IMPORT_DETLINE_TRANS_0011EV, (GR_IMPORT_DETLINE_TRANS_0011EV) =>
                   {
                       GR_IMPORT_DETLINE_TRANS_0011EV.CreateNewGroup(Names.IEF_SUPPLIED_0011ET, (IEF_SUPPLIED_0011ET) =>
                       {
                           IEF_SUPPLIED_0011ET.CreateNewField(Names.FLAG_0011AS, FieldType.String, 1);

                           IField FLAG_0011_local = IEF_SUPPLIED_0011ET.CreateNewField(Names.FLAG_0011, FieldType.String, 1);
                           IEF_SUPPLIED_0011ET.CreateNewFieldRedefine(Names.FLAG_0011XX, FieldType.String, FLAG_0011_local, 1);
                       });
                   });
                   IMPORT_DETLINE_0001.CreateNewGroup(Names.GR_IMPORT_DETLINE_TRAN__0012EV, (GR_IMPORT_DETLINE_TRAN__0012EV) =>
                   {
                       GR_IMPORT_DETLINE_TRAN__0012EV.CreateNewGroup(Names.DISBURSEMENT_TRANSACTIO_0012ET, (DISBURSEMENT_TRANSACTIO_0012ET) =>
                       {
                           DISBURSEMENT_TRANSACTIO_0012ET.CreateNewField(Names.AMOUNT_0012AS, FieldType.String, 1);

                           IField AMOUNT_0012_local = DISBURSEMENT_TRANSACTIO_0012ET.CreateNewField(Names.AMOUNT_0012, FieldType.SignedNumeric, 9, null, 2);
                           DISBURSEMENT_TRANSACTIO_0012ET.CreateNewFieldRedefine(Names.AMOUNT_0012XX, FieldType.String, AMOUNT_0012_local, 9);
                       });
                   });
                   IMPORT_DETLINE_0001.CreateNewGroup(Names.GR_IMPORT_DETLINE_0013EV, (GR_IMPORT_DETLINE_0013EV) =>
                   {
                       GR_IMPORT_DETLINE_0013EV.CreateNewGroup(Names.DISBURSEMENT_TRANSACTIO_0013ET, (DISBURSEMENT_TRANSACTIO_0013ET) =>
                       {
                           DISBURSEMENT_TRANSACTIO_0013ET.CreateNewField(Names.REFERENCE_NUMBER_0013AS, FieldType.String, 1);
                           IGroup REFERENCE_NUMBER_0013_local = (IGroup)DISBURSEMENT_TRANSACTIO_0013ET.CreateNewGroup(Names.REFERENCE_NUMBER_0013, (REFERENCE_NUMBER_0013) =>
                           {

                               IField REFERENCE_NUMBER_0013DL_local = REFERENCE_NUMBER_0013.CreateNewField(Names.REFERENCE_NUMBER_0013DL, FieldType.CompShort, 4);
                               REFERENCE_NUMBER_0013.CreateNewFieldRedefine(Names.REFERENCE_NUMBER_0013XL, FieldType.String, REFERENCE_NUMBER_0013DL_local, 2);

                               IField REFERENCE_NUMBER_0013DV_local = REFERENCE_NUMBER_0013.CreateNewField(Names.REFERENCE_NUMBER_0013DV, FieldType.String, 14);
                               REFERENCE_NUMBER_0013.CreateNewFieldRedefine(Names.REFERENCE_NUMBER_0013XV, FieldType.String, REFERENCE_NUMBER_0013DV_local, 14);
                           });
                           DISBURSEMENT_TRANSACTIO_0013ET.CreateNewFieldRedefine(Names.REFERENCE_NUMBER_0013XX, FieldType.String, REFERENCE_NUMBER_0013_local, 16);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_REPORT_TYPE_0014EV, (IMPORT_REPORT_TYPE_0014EV) =>
           {
               IMPORT_REPORT_TYPE_0014EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0014ET, (CSE_PERSONS_WORK_SET_0014ET) =>
               {
                   CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.CHAR_2_0014AS, FieldType.String, 1);

                   IField CHAR_2_0014_local = CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.CHAR_2_0014, FieldType.String, 2);
                   CSE_PERSONS_WORK_SET_0014ET.CreateNewFieldRedefine(Names.CHAR_2_0014XX, FieldType.String, CHAR_2_0014_local, 2);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_STATEMENT_DATE_0015EV, (IMPORT_STATEMENT_DATE_0015EV) =>
           {
               IMPORT_STATEMENT_DATE_0015EV.CreateNewGroup(Names.DATE_WORK_AREA_0015ET, (DATE_WORK_AREA_0015ET) =>
               {
                   DATE_WORK_AREA_0015ET.CreateNewField(Names.DATE_0015AS, FieldType.String, 1);

                   IField DATE_0015_local = DATE_WORK_AREA_0015ET.CreateNewField(Names.DATE_0015, FieldType.SignedNumeric, 8);
                   DATE_WORK_AREA_0015ET.CreateNewFieldRedefine(Names.DATE_0015XX, FieldType.String, DATE_0015_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_FIPS_CODE_0016EV, (IMPORT_FIPS_CODE_0016EV) =>
           {
               IMPORT_FIPS_CODE_0016EV.CreateNewGroup(Names.TEXT_WORK_AREA_0016ET, (TEXT_WORK_AREA_0016ET) =>
               {
                   TEXT_WORK_AREA_0016ET.CreateNewField(Names.TEXT_8_0016AS, FieldType.String, 1);

                   IField TEXT_8_0016_local = TEXT_WORK_AREA_0016ET.CreateNewField(Names.TEXT_8_0016, FieldType.String, 8);
                   TEXT_WORK_AREA_0016ET.CreateNewFieldRedefine(Names.TEXT_8_0016XX, FieldType.String, TEXT_8_0016_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_FILE_OPEN_MODE_0017EV, (IMPORT_FILE_OPEN_MODE_0017EV) =>
           {
               IMPORT_FILE_OPEN_MODE_0017EV.CreateNewGroup(Names.IEF_SUPPLIED_0017ET, (IEF_SUPPLIED_0017ET) =>
               {
                   IEF_SUPPLIED_0017ET.CreateNewField(Names.FLAG_0017AS, FieldType.String, 1);

                   IField FLAG_0017_local = IEF_SUPPLIED_0017ET.CreateNewField(Names.FLAG_0017, FieldType.String, 1);
                   IEF_SUPPLIED_0017ET.CreateNewFieldRedefine(Names.FLAG_0017XX, FieldType.String, FLAG_0017_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_FDSO_IND_0018EV, (IMPORT_FDSO_IND_0018EV) =>
           {
               IMPORT_FDSO_IND_0018EV.CreateNewGroup(Names.IEF_SUPPLIED_0018ET, (IEF_SUPPLIED_0018ET) =>
               {
                   IEF_SUPPLIED_0018ET.CreateNewField(Names.FLAG_0018AS, FieldType.String, 1);

                   IField FLAG_0018_local = IEF_SUPPLIED_0018ET.CreateNewField(Names.FLAG_0018, FieldType.String, 1);
                   IEF_SUPPLIED_0018ET.CreateNewFieldRedefine(Names.FLAG_0018XX, FieldType.String, FLAG_0018_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_NET_WAR_DIST_AMT_0019EV, (IMPORT_NET_WAR_DIST_AMT_0019EV) =>
           {
               IMPORT_NET_WAR_DIST_AMT_0019EV.CreateNewGroup(Names.IEF_SUPPLIED_0019ET, (IEF_SUPPLIED_0019ET) =>
               {
                   IEF_SUPPLIED_0019ET.CreateNewField(Names.AVERAGE_CURRENCY_0019AS, FieldType.String, 1);

                   IField AVERAGE_CURRENCY_0019_local = IEF_SUPPLIED_0019ET.CreateNewField(Names.AVERAGE_CURRENCY_0019, FieldType.SignedNumeric, 11, null, 2);
                   IEF_SUPPLIED_0019ET.CreateNewFieldRedefine(Names.AVERAGE_CURRENCY_0019XX, FieldType.String, AVERAGE_CURRENCY_0019_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_AGENCY_NUMBER_0020EV, (IMPORT_AGENCY_NUMBER_0020EV) =>
           {
               IMPORT_AGENCY_NUMBER_0020EV.CreateNewGroup(Names.TEXT_WORK_AREA_0020ET, (TEXT_WORK_AREA_0020ET) =>
               {
                   TEXT_WORK_AREA_0020ET.CreateNewField(Names.TEXT_4_0020AS, FieldType.String, 1);

                   IField TEXT_4_0020_local = TEXT_WORK_AREA_0020ET.CreateNewField(Names.TEXT_4_0020, FieldType.String, 4);
                   TEXT_WORK_AREA_0020ET.CreateNewFieldRedefine(Names.TEXT_4_0020XX, FieldType.String, TEXT_4_0020_local, 4);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0021EV, (IMPORT_0021EV) =>
           {
               IMPORT_0021EV.CreateNewGroup(Names.FUND_0021ET, (FUND_0021ET) =>
               {
                   FUND_0021ET.CreateNewField(Names.NUMBER_0021AS, FieldType.String, 1);

                   IField NUMBER_0021_local = FUND_0021ET.CreateNewField(Names.NUMBER_0021, FieldType.String, 5);
                   FUND_0021ET.CreateNewFieldRedefine(Names.NUMBER_0021XX, FieldType.String, NUMBER_0021_local, 5);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_OVERFLOW_INDICAT_0022EV, (IMPORT_OVERFLOW_INDICAT_0022EV) =>
           {
               IMPORT_OVERFLOW_INDICAT_0022EV.CreateNewGroup(Names.IEF_SUPPLIED_0022ET, (IEF_SUPPLIED_0022ET) =>
               {
                   IEF_SUPPLIED_0022ET.CreateNewField(Names.FLAG_0022AS, FieldType.String, 1);

                   IField FLAG_0022_local = IEF_SUPPLIED_0022ET.CreateNewField(Names.FLAG_0022, FieldType.String, 1);
                   IEF_SUPPLIED_0022ET.CreateNewFieldRedefine(Names.FLAG_0022XX, FieldType.String, FLAG_0022_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_LINES_WRITTEN_IN_0023EV, (IMPORT_LINES_WRITTEN_IN_0023EV) =>
           {
               IMPORT_LINES_WRITTEN_IN_0023EV.CreateNewGroup(Names.IEF_SUPPLIED_0023ET, (IEF_SUPPLIED_0023ET) =>
               {
                   IEF_SUPPLIED_0023ET.CreateNewField(Names.COUNT_0023AS, FieldType.String, 1);

                   IField COUNT_0023_local = IEF_SUPPLIED_0023ET.CreateNewField(Names.COUNT_0023, FieldType.SignedNumeric, 9);
                   IEF_SUPPLIED_0023ET.CreateNewFieldRedefine(Names.COUNT_0023XX, FieldType.String, COUNT_0023_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0024EV, (IMPORT_0024EV) =>
           {
               IMPORT_0024EV.CreateNewGroup(Names.PAY_TAPE_0024ET, (PAY_TAPE_0024ET) =>
               {
                   PAY_TAPE_0024ET.CreateNewField(Names.VOUCHER_NUMBER_0024AS, FieldType.String, 1);

                   IField VOUCHER_NUMBER_0024_local = PAY_TAPE_0024ET.CreateNewField(Names.VOUCHER_NUMBER_0024, FieldType.String, 5);
                   PAY_TAPE_0024ET.CreateNewFieldRedefine(Names.VOUCHER_NUMBER_0024XX, FieldType.String, VOUCHER_NUMBER_0024_local, 5);
                   PAY_TAPE_0024ET.CreateNewField(Names.PROCESS_DATE_0024AS, FieldType.String, 1);

                   IField PROCESS_DATE_0024_local = PAY_TAPE_0024ET.CreateNewField(Names.PROCESS_DATE_0024, FieldType.SignedNumeric, 8);
                   PAY_TAPE_0024ET.CreateNewFieldRedefine(Names.PROCESS_DATE_0024XX, FieldType.String, PROCESS_DATE_0024_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_STARS_NON_ADC_0025EV, (IMPORT_STARS_NON_ADC_0025EV) =>
           {
               IMPORT_STARS_NON_ADC_0025EV.CreateNewGroup(Names.IEF_SUPPLIED_0025ET, (IEF_SUPPLIED_0025ET) =>
               {
                   IEF_SUPPLIED_0025ET.CreateNewField(Names.AVERAGE_CURRENCY_0025AS, FieldType.String, 1);

                   IField AVERAGE_CURRENCY_0025_local = IEF_SUPPLIED_0025ET.CreateNewField(Names.AVERAGE_CURRENCY_0025, FieldType.SignedNumeric, 11, null, 2);
                   IEF_SUPPLIED_0025ET.CreateNewFieldRedefine(Names.AVERAGE_CURRENCY_0025XX, FieldType.String, AVERAGE_CURRENCY_0025_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_STARS_PASSTHRU_0026EV, (IMPORT_STARS_PASSTHRU_0026EV) =>
           {
               IMPORT_STARS_PASSTHRU_0026EV.CreateNewGroup(Names.IEF_SUPPLIED_0026ET, (IEF_SUPPLIED_0026ET) =>
               {
                   IEF_SUPPLIED_0026ET.CreateNewField(Names.AVERAGE_CURRENCY_0026AS, FieldType.String, 1);

                   IField AVERAGE_CURRENCY_0026_local = IEF_SUPPLIED_0026ET.CreateNewField(Names.AVERAGE_CURRENCY_0026, FieldType.SignedNumeric, 11, null, 2);
                   IEF_SUPPLIED_0026ET.CreateNewFieldRedefine(Names.AVERAGE_CURRENCY_0026XX, FieldType.String, AVERAGE_CURRENCY_0026_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_STARS_REFUND_0027EV, (IMPORT_STARS_REFUND_0027EV) =>
           {
               IMPORT_STARS_REFUND_0027EV.CreateNewGroup(Names.IEF_SUPPLIED_0027ET, (IEF_SUPPLIED_0027ET) =>
               {
                   IEF_SUPPLIED_0027ET.CreateNewField(Names.AVERAGE_CURRENCY_0027AS, FieldType.String, 1);

                   IField AVERAGE_CURRENCY_0027_local = IEF_SUPPLIED_0027ET.CreateNewField(Names.AVERAGE_CURRENCY_0027, FieldType.SignedNumeric, 11, null, 2);
                   IEF_SUPPLIED_0027ET.CreateNewFieldRedefine(Names.AVERAGE_CURRENCY_0027XX, FieldType.String, AVERAGE_CURRENCY_0027_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_STARS_BADCHK_0028EV, (IMPORT_STARS_BADCHK_0028EV) =>
           {
               IMPORT_STARS_BADCHK_0028EV.CreateNewGroup(Names.IEF_SUPPLIED_0028ET, (IEF_SUPPLIED_0028ET) =>
               {
                   IEF_SUPPLIED_0028ET.CreateNewField(Names.AVERAGE_CURRENCY_0028AS, FieldType.String, 1);

                   IField AVERAGE_CURRENCY_0028_local = IEF_SUPPLIED_0028ET.CreateNewField(Names.AVERAGE_CURRENCY_0028, FieldType.SignedNumeric, 11, null, 2);
                   IEF_SUPPLIED_0028ET.CreateNewFieldRedefine(Names.AVERAGE_CURRENCY_0028XX, FieldType.String, AVERAGE_CURRENCY_0028_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_STARS_INT_ST_0029EV, (IMPORT_STARS_INT_ST_0029EV) =>
           {
               IMPORT_STARS_INT_ST_0029EV.CreateNewGroup(Names.IEF_SUPPLIED_0029ET, (IEF_SUPPLIED_0029ET) =>
               {
                   IEF_SUPPLIED_0029ET.CreateNewField(Names.AVERAGE_CURRENCY_0029AS, FieldType.String, 1);

                   IField AVERAGE_CURRENCY_0029_local = IEF_SUPPLIED_0029ET.CreateNewField(Names.AVERAGE_CURRENCY_0029, FieldType.SignedNumeric, 11, null, 2);
                   IEF_SUPPLIED_0029ET.CreateNewFieldRedefine(Names.AVERAGE_CURRENCY_0029XX, FieldType.String, AVERAGE_CURRENCY_0029_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_STARS_CRT_FEE_0030EV, (IMPORT_STARS_CRT_FEE_0030EV) =>
           {
               IMPORT_STARS_CRT_FEE_0030EV.CreateNewGroup(Names.IEF_SUPPLIED_0030ET, (IEF_SUPPLIED_0030ET) =>
               {
                   IEF_SUPPLIED_0030ET.CreateNewField(Names.AVERAGE_CURRENCY_0030AS, FieldType.String, 1);

                   IField AVERAGE_CURRENCY_0030_local = IEF_SUPPLIED_0030ET.CreateNewField(Names.AVERAGE_CURRENCY_0030, FieldType.SignedNumeric, 11, null, 2);
                   IEF_SUPPLIED_0030ET.CreateNewFieldRedefine(Names.AVERAGE_CURRENCY_0030XX, FieldType.String, AVERAGE_CURRENCY_0030_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_STARS_EXC_CS_0031EV, (IMPORT_STARS_EXC_CS_0031EV) =>
           {
               IMPORT_STARS_EXC_CS_0031EV.CreateNewGroup(Names.IEF_SUPPLIED_0031ET, (IEF_SUPPLIED_0031ET) =>
               {
                   IEF_SUPPLIED_0031ET.CreateNewField(Names.AVERAGE_CURRENCY_0031AS, FieldType.String, 1);

                   IField AVERAGE_CURRENCY_0031_local = IEF_SUPPLIED_0031ET.CreateNewField(Names.AVERAGE_CURRENCY_0031, FieldType.SignedNumeric, 11, null, 2);
                   IEF_SUPPLIED_0031ET.CreateNewFieldRedefine(Names.AVERAGE_CURRENCY_0031XX, FieldType.String, AVERAGE_CURRENCY_0031_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_STARS_WAR_0032EV, (IMPORT_STARS_WAR_0032EV) =>
           {
               IMPORT_STARS_WAR_0032EV.CreateNewGroup(Names.PAYMENT_REQUEST_0032ET, (PAYMENT_REQUEST_0032ET) =>
               {
                   PAYMENT_REQUEST_0032ET.CreateNewField(Names.AMOUNT_0032AS, FieldType.String, 1);

                   IField AMOUNT_0032_local = PAYMENT_REQUEST_0032ET.CreateNewField(Names.AMOUNT_0032, FieldType.SignedNumeric, 9, null, 2);
                   PAYMENT_REQUEST_0032ET.CreateNewFieldRedefine(Names.AMOUNT_0032XX, FieldType.String, AMOUNT_0032_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_FROM_0033EV, (IMPORT_FROM_0033EV) =>
           {
               IMPORT_FROM_0033EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0033ET, (CSE_PERSONS_WORK_SET_0033ET) =>
               {
                   CSE_PERSONS_WORK_SET_0033ET.CreateNewField(Names.FORMATTED_NAME_0033AS, FieldType.String, 1);

                   IField FORMATTED_NAME_0033_local = CSE_PERSONS_WORK_SET_0033ET.CreateNewField(Names.FORMATTED_NAME_0033, FieldType.String, 33);
                   CSE_PERSONS_WORK_SET_0033ET.CreateNewFieldRedefine(Names.FORMATTED_NAME_0033XX, FieldType.String, FORMATTED_NAME_0033_local, 33);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_FROM_0034EV, (IMPORT_FROM_0034EV) =>
           {
               IMPORT_FROM_0034EV.CreateNewGroup(Names.OFFICE_0034ET, (OFFICE_0034ET) =>
               {
                   OFFICE_0034ET.CreateNewField(Names.NAME_0034AS, FieldType.String, 1);

                   IField NAME_0034_local = OFFICE_0034ET.CreateNewField(Names.NAME_0034, FieldType.String, 30);
                   OFFICE_0034ET.CreateNewFieldRedefine(Names.NAME_0034XX, FieldType.String, NAME_0034_local, 30);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_FROM_0035EV, (IMPORT_FROM_0035EV) =>
           {
               IMPORT_FROM_0035EV.CreateNewGroup(Names.OFFICE_ADDRESS_0035ET, (OFFICE_ADDRESS_0035ET) =>
               {
                   OFFICE_ADDRESS_0035ET.CreateNewField(Names.STREET_1_0035AS, FieldType.String, 1);

                   IField STREET_1_0035_local = OFFICE_ADDRESS_0035ET.CreateNewField(Names.STREET_1_0035, FieldType.String, 25);
                   OFFICE_ADDRESS_0035ET.CreateNewFieldRedefine(Names.STREET_1_0035XX, FieldType.String, STREET_1_0035_local, 25);
                   OFFICE_ADDRESS_0035ET.CreateNewField(Names.STREET_2_0035AS, FieldType.String, 1);

                   IField STREET_2_0035_local = OFFICE_ADDRESS_0035ET.CreateNewField(Names.STREET_2_0035, FieldType.String, 25);
                   OFFICE_ADDRESS_0035ET.CreateNewFieldRedefine(Names.STREET_2_0035XX, FieldType.String, STREET_2_0035_local, 25);
                   OFFICE_ADDRESS_0035ET.CreateNewField(Names.CITY_0035AS, FieldType.String, 1);

                   IField CITY_0035_local = OFFICE_ADDRESS_0035ET.CreateNewField(Names.CITY_0035, FieldType.String, 15);
                   OFFICE_ADDRESS_0035ET.CreateNewFieldRedefine(Names.CITY_0035XX, FieldType.String, CITY_0035_local, 15);
                   OFFICE_ADDRESS_0035ET.CreateNewField(Names.STATE_PROVINCE_0035AS, FieldType.String, 1);

                   IField STATE_PROVINCE_0035_local = OFFICE_ADDRESS_0035ET.CreateNewField(Names.STATE_PROVINCE_0035, FieldType.String, 2);
                   OFFICE_ADDRESS_0035ET.CreateNewFieldRedefine(Names.STATE_PROVINCE_0035XX, FieldType.String, STATE_PROVINCE_0035_local, 2);
                   OFFICE_ADDRESS_0035ET.CreateNewField(Names.ZIP_0035AS, FieldType.String, 1);

                   IField ZIP_0035_local = OFFICE_ADDRESS_0035ET.CreateNewField(Names.ZIP_0035, FieldType.String, 5);
                   OFFICE_ADDRESS_0035ET.CreateNewFieldRedefine(Names.ZIP_0035XX, FieldType.String, ZIP_0035_local, 5);
                   OFFICE_ADDRESS_0035ET.CreateNewField(Names.ZIP4_0035AS, FieldType.String, 1);

                   IField ZIP4_0035_local = OFFICE_ADDRESS_0035ET.CreateNewField(Names.ZIP4_0035, FieldType.String, 4);
                   OFFICE_ADDRESS_0035ET.CreateNewFieldRedefine(Names.ZIP4_0035XX, FieldType.String, ZIP4_0035_local, 4);
                   OFFICE_ADDRESS_0035ET.CreateNewField(Names.COUNTRY_0035AS, FieldType.String, 1);

                   IField COUNTRY_0035_local = OFFICE_ADDRESS_0035ET.CreateNewField(Names.COUNTRY_0035, FieldType.String, 10);
                   OFFICE_ADDRESS_0035ET.CreateNewFieldRedefine(Names.COUNTRY_0035XX, FieldType.String, COUNTRY_0035_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_GROUP_0002RG, (IMPORT_GROUP_0002RG) =>
           {

               IField IMPORT_GROUP_0002MA_local = IMPORT_GROUP_0002RG.CreateNewField(Names.IMPORT_GROUP_0002MA, FieldType.SignedNumeric, 4);
               IMPORT_GROUP_0002RG.CreateNewFieldRedefine(Names.IMPORT_GROUP_0002MX, FieldType.String, IMPORT_GROUP_0002MA_local, 4);
               IMPORT_GROUP_0002RG.CreateNewGroupArray(Names.IMPORT_GROUP_0002, 20, (IMPORT_GROUP_0002) =>
               {
                   IMPORT_GROUP_0002.CreateNewField(Names.IMPORT_GROUP_0002AC, FieldType.String, 1);
                   IMPORT_GROUP_0002.CreateNewGroup(Names.GR_IMPORT_0036EV, (GR_IMPORT_0036EV) =>
                   {
                       GR_IMPORT_0036EV.CreateNewGroup(Names.STARS_TRANSACTION_ENTRY_0036ET, (STARS_TRANSACTION_ENTRY_0036ET) =>
                       {
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.STARS_CLASS_TYPE_0036AS, FieldType.String, 1);

                           IField STARS_CLASS_TYPE_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.STARS_CLASS_TYPE_0036, FieldType.String, 10);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.STARS_CLASS_TYPE_0036XX, FieldType.String, STARS_CLASS_TYPE_0036_local, 10);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.VOUCHER_NUMBER_0036AS, FieldType.String, 1);

                           IField VOUCHER_NUMBER_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.VOUCHER_NUMBER_0036, FieldType.String, 6);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.VOUCHER_NUMBER_0036XX, FieldType.String, VOUCHER_NUMBER_0036_local, 6);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.FIN_YR_0036AS, FieldType.String, 1);

                           IField FIN_YR_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.FIN_YR_0036, FieldType.String, 2);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.FIN_YR_0036XX, FieldType.String, FIN_YR_0036_local, 2);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.SUFFIX_1_0036AS, FieldType.String, 1);

                           IField SUFFIX_1_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.SUFFIX_1_0036, FieldType.String, 2);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.SUFFIX_1_0036XX, FieldType.String, SUFFIX_1_0036_local, 2);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.TRAN_CODE_0036AS, FieldType.String, 1);

                           IField TRAN_CODE_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.TRAN_CODE_0036, FieldType.String, 3);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.TRAN_CODE_0036XX, FieldType.String, TRAN_CODE_0036_local, 3);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.AGENCY_CODE_0036AS, FieldType.String, 1);

                           IField AGENCY_CODE_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.AGENCY_CODE_0036, FieldType.String, 3);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.AGENCY_CODE_0036XX, FieldType.String, AGENCY_CODE_0036_local, 3);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.FUND_CODE_0036AS, FieldType.String, 1);

                           IField FUND_CODE_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.FUND_CODE_0036, FieldType.String, 4);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.FUND_CODE_0036XX, FieldType.String, FUND_CODE_0036_local, 4);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.INDEX_0036AS, FieldType.String, 1);

                           IField INDEX_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.INDEX_0036, FieldType.String, 4);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.INDEX_0036XX, FieldType.String, INDEX_0036_local, 4);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.PCA_CODE_0036AS, FieldType.String, 1);

                           IField PCA_CODE_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.PCA_CODE_0036, FieldType.String, 5);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.PCA_CODE_0036XX, FieldType.String, PCA_CODE_0036_local, 5);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.EXPEND_SUB_OB_0036AS, FieldType.String, 1);

                           IField EXPEND_SUB_OB_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.EXPEND_SUB_OB_0036, FieldType.String, 4);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.EXPEND_SUB_OB_0036XX, FieldType.String, EXPEND_SUB_OB_0036_local, 4);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.REV_SUB_OB_0036AS, FieldType.String, 1);

                           IField REV_SUB_OB_0036_local = STARS_TRANSACTION_ENTRY_0036ET.CreateNewField(Names.REV_SUB_OB_0036, FieldType.String, 4);
                           STARS_TRANSACTION_ENTRY_0036ET.CreateNewFieldRedefine(Names.REV_SUB_OB_0036XX, FieldType.String, REV_SUB_OB_0036_local, 4);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_HEADER_REC_WRITT_0037EV, (IMPORT_HEADER_REC_WRITT_0037EV) =>
           {
               IMPORT_HEADER_REC_WRITT_0037EV.CreateNewGroup(Names.IEF_SUPPLIED_0037ET, (IEF_SUPPLIED_0037ET) =>
               {
                   IEF_SUPPLIED_0037ET.CreateNewField(Names.FLAG_0037AS, FieldType.String, 1);

                   IField FLAG_0037_local = IEF_SUPPLIED_0037ET.CreateNewField(Names.FLAG_0037, FieldType.String, 1);
                   IEF_SUPPLIED_0037ET.CreateNewFieldRedefine(Names.FLAG_0037XX, FieldType.String, FLAG_0037_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0038EV, (IMPORT_0038EV) =>
           {
               IMPORT_0038EV.CreateNewGroup(Names.RECEIPT_REFUND_0038ET, (RECEIPT_REFUND_0038ET) =>
               {
                   RECEIPT_REFUND_0038ET.CreateNewField(Names.REASON_TEXT_0038AS, FieldType.String, 1);
                   IGroup REASON_TEXT_0038_local = (IGroup)RECEIPT_REFUND_0038ET.CreateNewGroup(Names.REASON_TEXT_0038, (REASON_TEXT_0038) =>
                   {

                       IField REASON_TEXT_0038DL_local = REASON_TEXT_0038.CreateNewField(Names.REASON_TEXT_0038DL, FieldType.CompShort, 4);
                       REASON_TEXT_0038.CreateNewFieldRedefine(Names.REASON_TEXT_0038XL, FieldType.String, REASON_TEXT_0038DL_local, 2);

                       IField REASON_TEXT_0038DV_local = REASON_TEXT_0038.CreateNewField(Names.REASON_TEXT_0038DV, FieldType.String, 240);
                       REASON_TEXT_0038.CreateNewFieldRedefine(Names.REASON_TEXT_0038XV, FieldType.String, REASON_TEXT_0038DV_local, 240);
                   });
                   RECEIPT_REFUND_0038ET.CreateNewFieldRedefine(Names.REASON_TEXT_0038XX, FieldType.String, REASON_TEXT_0038_local, 242);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_CURRENT_PAGE_NUM_0039EV, (IMPORT_CURRENT_PAGE_NUM_0039EV) =>
           {
               IMPORT_CURRENT_PAGE_NUM_0039EV.CreateNewGroup(Names.IEF_SUPPLIED_0039ET, (IEF_SUPPLIED_0039ET) =>
               {
                   IEF_SUPPLIED_0039ET.CreateNewField(Names.COUNT_0039AS, FieldType.String, 1);

                   IField COUNT_0039_local = IEF_SUPPLIED_0039ET.CreateNewField(Names.COUNT_0039, FieldType.SignedNumeric, 9);
                   IEF_SUPPLIED_0039ET.CreateNewFieldRedefine(Names.COUNT_0039XX, FieldType.String, COUNT_0039_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_WAR_MAILING_ADDR_0040EV, (IMPORT_WAR_MAILING_ADDR_0040EV) =>
           {
               IMPORT_WAR_MAILING_ADDR_0040EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0040ET, (CSE_PERSONS_WORK_SET_0040ET) =>
               {
                   CSE_PERSONS_WORK_SET_0040ET.CreateNewField(Names.FORMATTED_NAME_0040AS, FieldType.String, 1);

                   IField FORMATTED_NAME_0040_local = CSE_PERSONS_WORK_SET_0040ET.CreateNewField(Names.FORMATTED_NAME_0040, FieldType.String, 33);
                   CSE_PERSONS_WORK_SET_0040ET.CreateNewFieldRedefine(Names.FORMATTED_NAME_0040XX, FieldType.String, FORMATTED_NAME_0040_local, 33);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0041EV, (IMPORT_0041EV) =>
           {
               IMPORT_0041EV.CreateNewGroup(Names.INTERSTAT_WARRANT_0041ET, (INTERSTAT_WARRANT_0041ET) =>
               {
                   INTERSTAT_WARRANT_0041ET.CreateNewField(Names.INTERSTATE_IND_0041AS, FieldType.String, 1);

                   IField INTERSTATE_IND_0041_local = INTERSTAT_WARRANT_0041ET.CreateNewField(Names.INTERSTATE_IND_0041, FieldType.String, 1);
                   INTERSTAT_WARRANT_0041ET.CreateNewFieldRedefine(Names.INTERSTATE_IND_0041XX, FieldType.String, INTERSTATE_IND_0041_local, 1);
                   INTERSTAT_WARRANT_0041ET.CreateNewField(Names.SHORT_AR_NAME_0041AS, FieldType.String, 1);

                   IField SHORT_AR_NAME_0041_local = INTERSTAT_WARRANT_0041ET.CreateNewField(Names.SHORT_AR_NAME_0041, FieldType.String, 12);
                   INTERSTAT_WARRANT_0041ET.CreateNewFieldRedefine(Names.SHORT_AR_NAME_0041XX, FieldType.String, SHORT_AR_NAME_0041_local, 12);
                   INTERSTAT_WARRANT_0041ET.CreateNewField(Names.FIPS_0041AS, FieldType.String, 1);

                   IField FIPS_0041_local = INTERSTAT_WARRANT_0041ET.CreateNewField(Names.FIPS_0041, FieldType.String, 8);
                   INTERSTAT_WARRANT_0041ET.CreateNewFieldRedefine(Names.FIPS_0041XX, FieldType.String, FIPS_0041_local, 8);
                   INTERSTAT_WARRANT_0041ET.CreateNewField(Names.MEDICAL_IND_0041AS, FieldType.String, 1);

                   IField MEDICAL_IND_0041_local = INTERSTAT_WARRANT_0041ET.CreateNewField(Names.MEDICAL_IND_0041, FieldType.String, 1);
                   INTERSTAT_WARRANT_0041ET.CreateNewFieldRedefine(Names.MEDICAL_IND_0041XX, FieldType.String, MEDICAL_IND_0041_local, 1);
                   INTERSTAT_WARRANT_0041ET.CreateNewField(Names.SHORT_AP_NAME_0041AS, FieldType.String, 1);

                   IField SHORT_AP_NAME_0041_local = INTERSTAT_WARRANT_0041ET.CreateNewField(Names.SHORT_AP_NAME_0041, FieldType.String, 12);
                   INTERSTAT_WARRANT_0041ET.CreateNewFieldRedefine(Names.SHORT_AP_NAME_0041XX, FieldType.String, SHORT_AP_NAME_0041_local, 12);
                   INTERSTAT_WARRANT_0041ET.CreateNewField(Names.AP_SSN_0041AS, FieldType.String, 1);

                   IField AP_SSN_0041_local = INTERSTAT_WARRANT_0041ET.CreateNewField(Names.AP_SSN_0041, FieldType.String, 11);
                   INTERSTAT_WARRANT_0041ET.CreateNewFieldRedefine(Names.AP_SSN_0041XX, FieldType.String, AP_SSN_0041_local, 11);
                   INTERSTAT_WARRANT_0041ET.CreateNewField(Names.OTHER_STATE_CASE_NO_0041AS, FieldType.String, 1);

                   IField OTHER_STATE_CASE_NO_0041_local = INTERSTAT_WARRANT_0041ET.CreateNewField(Names.OTHER_STATE_CASE_NO_0041, FieldType.String, 20);
                   INTERSTAT_WARRANT_0041ET.CreateNewFieldRedefine(Names.OTHER_STATE_CASE_NO_0041XX, FieldType.String, OTHER_STATE_CASE_NO_0041_local, 20);
                   INTERSTAT_WARRANT_0041ET.CreateNewField(Names.COURT_ORDER_NO_0041AS, FieldType.String, 1);

                   IField COURT_ORDER_NO_0041_local = INTERSTAT_WARRANT_0041ET.CreateNewField(Names.COURT_ORDER_NO_0041, FieldType.String, 12);
                   INTERSTAT_WARRANT_0041ET.CreateNewFieldRedefine(Names.COURT_ORDER_NO_0041XX, FieldType.String, COURT_ORDER_NO_0041_local, 12);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_SERVICE_PROVIDER_0042EV, (IMPORT_SERVICE_PROVIDER_0042EV) =>
           {
               IMPORT_SERVICE_PROVIDER_0042EV.CreateNewGroup(Names.OFFICE_SERVICE_PROVIDER_0042ET, (OFFICE_SERVICE_PROVIDER_0042ET) =>
               {
                   OFFICE_SERVICE_PROVIDER_0042ET.CreateNewField(Names.WORK_PHONE_EXTENSION_0042AS, FieldType.String, 1);

                   IField WORK_PHONE_EXTENSION_0042_local = OFFICE_SERVICE_PROVIDER_0042ET.CreateNewField(Names.WORK_PHONE_EXTENSION_0042, FieldType.String, 5);
                   OFFICE_SERVICE_PROVIDER_0042ET.CreateNewFieldRedefine(Names.WORK_PHONE_EXTENSION_0042XX, FieldType.String, WORK_PHONE_EXTENSION_0042_local, 5);
                   OFFICE_SERVICE_PROVIDER_0042ET.CreateNewField(Names.WORK_PHONE_AREA_CODE_0042AS, FieldType.String, 1);

                   IField WORK_PHONE_AREA_CODE_0042_local = OFFICE_SERVICE_PROVIDER_0042ET.CreateNewField(Names.WORK_PHONE_AREA_CODE_0042, FieldType.SignedNumeric, 3);
                   OFFICE_SERVICE_PROVIDER_0042ET.CreateNewFieldRedefine(Names.WORK_PHONE_AREA_CODE_0042XX, FieldType.String, WORK_PHONE_AREA_CODE_0042_local, 3);
                   OFFICE_SERVICE_PROVIDER_0042ET.CreateNewField(Names.WORK_PHONE_NUMBER_0042AS, FieldType.String, 1);

                   IField WORK_PHONE_NUMBER_0042_local = OFFICE_SERVICE_PROVIDER_0042ET.CreateNewField(Names.WORK_PHONE_NUMBER_0042, FieldType.SignedNumeric, 7);
                   OFFICE_SERVICE_PROVIDER_0042ET.CreateNewFieldRedefine(Names.WORK_PHONE_NUMBER_0042XX, FieldType.String, WORK_PHONE_NUMBER_0042_local, 7);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_PASS_AREA1_0043EV, (EXPORT_PASS_AREA1_0043EV) =>
           {
               EXPORT_PASS_AREA1_0043EV.CreateNewGroup(Names.EXTERNAL_0043ET, (EXTERNAL_0043ET) =>
               {
                   EXTERNAL_0043ET.CreateNewField(Names.FILE_INSTRUCTION_0043AS, FieldType.String, 1);

                   IField FILE_INSTRUCTION_0043_local = EXTERNAL_0043ET.CreateNewField(Names.FILE_INSTRUCTION_0043, FieldType.String, 10);
                   EXTERNAL_0043ET.CreateNewFieldRedefine(Names.FILE_INSTRUCTION_0043XX, FieldType.String, FILE_INSTRUCTION_0043_local, 10);
                   EXTERNAL_0043ET.CreateNewField(Names.NUMERIC_RETURN_CODE_0043AS, FieldType.String, 1);

                   IField NUMERIC_RETURN_CODE_0043_local = EXTERNAL_0043ET.CreateNewField(Names.NUMERIC_RETURN_CODE_0043, FieldType.SignedNumeric, 2);
                   EXTERNAL_0043ET.CreateNewFieldRedefine(Names.NUMERIC_RETURN_CODE_0043XX, FieldType.String, NUMERIC_RETURN_CODE_0043_local, 2);
                   EXTERNAL_0043ET.CreateNewField(Names.TEXT_RETURN_CODE_0043AS, FieldType.String, 1);

                   IField TEXT_RETURN_CODE_0043_local = EXTERNAL_0043ET.CreateNewField(Names.TEXT_RETURN_CODE_0043, FieldType.String, 2);
                   EXTERNAL_0043ET.CreateNewFieldRedefine(Names.TEXT_RETURN_CODE_0043XX, FieldType.String, TEXT_RETURN_CODE_0043_local, 2);
                   EXTERNAL_0043ET.CreateNewField(Names.TEXT_LINE_80_0043AS, FieldType.String, 1);

                   IField TEXT_LINE_80_0043_local = EXTERNAL_0043ET.CreateNewField(Names.TEXT_LINE_80_0043, FieldType.String, 130);
                   EXTERNAL_0043ET.CreateNewFieldRedefine(Names.TEXT_LINE_80_0043XX, FieldType.String, TEXT_LINE_80_0043_local, 130);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_PASS_AREA2_0044EV, (EXPORT_PASS_AREA2_0044EV) =>
           {
               EXPORT_PASS_AREA2_0044EV.CreateNewGroup(Names.EXTERNAL_0044ET, (EXTERNAL_0044ET) =>
               {
                   EXTERNAL_0044ET.CreateNewField(Names.FILE_INSTRUCTION_0044AS, FieldType.String, 1);

                   IField FILE_INSTRUCTION_0044_local = EXTERNAL_0044ET.CreateNewField(Names.FILE_INSTRUCTION_0044, FieldType.String, 10);
                   EXTERNAL_0044ET.CreateNewFieldRedefine(Names.FILE_INSTRUCTION_0044XX, FieldType.String, FILE_INSTRUCTION_0044_local, 10);
                   EXTERNAL_0044ET.CreateNewField(Names.NUMERIC_RETURN_CODE_0044AS, FieldType.String, 1);

                   IField NUMERIC_RETURN_CODE_0044_local = EXTERNAL_0044ET.CreateNewField(Names.NUMERIC_RETURN_CODE_0044, FieldType.SignedNumeric, 2);
                   EXTERNAL_0044ET.CreateNewFieldRedefine(Names.NUMERIC_RETURN_CODE_0044XX, FieldType.String, NUMERIC_RETURN_CODE_0044_local, 2);
                   EXTERNAL_0044ET.CreateNewField(Names.TEXT_RETURN_CODE_0044AS, FieldType.String, 1);

                   IField TEXT_RETURN_CODE_0044_local = EXTERNAL_0044ET.CreateNewField(Names.TEXT_RETURN_CODE_0044, FieldType.String, 2);
                   EXTERNAL_0044ET.CreateNewFieldRedefine(Names.TEXT_RETURN_CODE_0044XX, FieldType.String, TEXT_RETURN_CODE_0044_local, 2);
                   EXTERNAL_0044ET.CreateNewField(Names.TEXT_LINE_80_0044AS, FieldType.String, 1);

                   IField TEXT_LINE_80_0044_local = EXTERNAL_0044ET.CreateNewField(Names.TEXT_LINE_80_0044, FieldType.String, 130);
                   EXTERNAL_0044ET.CreateNewFieldRedefine(Names.TEXT_LINE_80_0044XX, FieldType.String, TEXT_LINE_80_0044_local, 130);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_LINES_WRITTEN_IN_0045EV, (EXPORT_LINES_WRITTEN_IN_0045EV) =>
           {
               EXPORT_LINES_WRITTEN_IN_0045EV.CreateNewGroup(Names.IEF_SUPPLIED_0045ET, (IEF_SUPPLIED_0045ET) =>
               {
                   IEF_SUPPLIED_0045ET.CreateNewField(Names.COUNT_0045AS, FieldType.String, 1);

                   IField COUNT_0045_local = IEF_SUPPLIED_0045ET.CreateNewField(Names.COUNT_0045, FieldType.SignedNumeric, 9);
                   IEF_SUPPLIED_0045ET.CreateNewFieldRedefine(Names.COUNT_0045XX, FieldType.String, COUNT_0045_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_OVERFLOW_INDICAT_0046EV, (EXPORT_OVERFLOW_INDICAT_0046EV) =>
           {
               EXPORT_OVERFLOW_INDICAT_0046EV.CreateNewGroup(Names.IEF_SUPPLIED_0046ET, (IEF_SUPPLIED_0046ET) =>
               {
                   IEF_SUPPLIED_0046ET.CreateNewField(Names.FLAG_0046AS, FieldType.String, 1);

                   IField FLAG_0046_local = IEF_SUPPLIED_0046ET.CreateNewField(Names.FLAG_0046, FieldType.String, 1);
                   IEF_SUPPLIED_0046ET.CreateNewFieldRedefine(Names.FLAG_0046XX, FieldType.String, FLAG_0046_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_CURRENT_PAGE_NUM_0047EV, (EXPORT_CURRENT_PAGE_NUM_0047EV) =>
           {
               EXPORT_CURRENT_PAGE_NUM_0047EV.CreateNewGroup(Names.IEF_SUPPLIED_0047ET, (IEF_SUPPLIED_0047ET) =>
               {
                   IEF_SUPPLIED_0047ET.CreateNewField(Names.COUNT_0047AS, FieldType.String, 1);

                   IField COUNT_0047_local = IEF_SUPPLIED_0047ET.CreateNewField(Names.COUNT_0047, FieldType.SignedNumeric, 9);
                   IEF_SUPPLIED_0047ET.CreateNewFieldRedefine(Names.COUNT_0047XX, FieldType.String, COUNT_0047_local, 9);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(GLOBDATA, args, 2);
            SetPassedParm(IMPORT_PASS_AREA_0001EV, args, 3);
            SetPassedParm(IMPORT_WARLINE_PAYEE_0002EV, args, 4);
            SetPassedParm(IMPORT_WARLINE_DESIG_0003EV, args, 5);
            SetPassedParm(IMPORT_0004EV, args, 6);
            SetPassedParm(IMPORT_WARLINE_0005EV, args, 7);
            SetPassedParm(IMPORT_DETLINE_0001RG, args, 8);
            SetPassedParm(IMPORT_REPORT_TYPE_0014EV, args, 9);
            SetPassedParm(IMPORT_STATEMENT_DATE_0015EV, args, 10);
            SetPassedParm(IMPORT_FIPS_CODE_0016EV, args, 11);
            SetPassedParm(IMPORT_FILE_OPEN_MODE_0017EV, args, 12);
            SetPassedParm(IMPORT_FDSO_IND_0018EV, args, 13);
            SetPassedParm(IMPORT_NET_WAR_DIST_AMT_0019EV, args, 14);
            SetPassedParm(IMPORT_AGENCY_NUMBER_0020EV, args, 15);
            SetPassedParm(IMPORT_0021EV, args, 16);
            SetPassedParm(IMPORT_OVERFLOW_INDICAT_0022EV, args, 17);
            SetPassedParm(IMPORT_LINES_WRITTEN_IN_0023EV, args, 18);
            SetPassedParm(IMPORT_0024EV, args, 19);
            SetPassedParm(IMPORT_STARS_NON_ADC_0025EV, args, 20);
            SetPassedParm(IMPORT_STARS_PASSTHRU_0026EV, args, 21);
            SetPassedParm(IMPORT_STARS_REFUND_0027EV, args, 22);
            SetPassedParm(IMPORT_STARS_BADCHK_0028EV, args, 23);
            SetPassedParm(IMPORT_STARS_INT_ST_0029EV, args, 24);
            SetPassedParm(IMPORT_STARS_CRT_FEE_0030EV, args, 25);
            SetPassedParm(IMPORT_STARS_EXC_CS_0031EV, args, 26);
            SetPassedParm(IMPORT_STARS_WAR_0032EV, args, 27);
            SetPassedParm(IMPORT_FROM_0033EV, args, 28);
            SetPassedParm(IMPORT_FROM_0034EV, args, 29);
            SetPassedParm(IMPORT_FROM_0035EV, args, 30);
            SetPassedParm(IMPORT_GROUP_0002RG, args, 31);
            SetPassedParm(IMPORT_HEADER_REC_WRITT_0037EV, args, 32);
            SetPassedParm(IMPORT_0038EV, args, 33);
            SetPassedParm(IMPORT_CURRENT_PAGE_NUM_0039EV, args, 34);
            SetPassedParm(IMPORT_WAR_MAILING_ADDR_0040EV, args, 35);
            SetPassedParm(IMPORT_0041EV, args, 36);
            SetPassedParm(IMPORT_SERVICE_PROVIDER_0042EV, args, 37);
            SetPassedParm(EXPORT_PASS_AREA1_0043EV, args, 38);
            SetPassedParm(EXPORT_PASS_AREA2_0044EV, args, 39);
            SetPassedParm(EXPORT_LINES_WRITTEN_IN_0045EV, args, 40);
            SetPassedParm(EXPORT_OVERFLOW_INDICAT_0046EV, args, 41);
            SetPassedParm(EXPORT_CURRENT_PAGE_NUM_0047EV, args, 42);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(GLOBDATA, args, 2);
            SetReturnParm(IMPORT_PASS_AREA_0001EV, args, 3);
            SetReturnParm(IMPORT_WARLINE_PAYEE_0002EV, args, 4);
            SetReturnParm(IMPORT_WARLINE_DESIG_0003EV, args, 5);
            SetReturnParm(IMPORT_0004EV, args, 6);
            SetReturnParm(IMPORT_WARLINE_0005EV, args, 7);
            SetReturnParm(IMPORT_DETLINE_0001RG, args, 8);
            SetReturnParm(IMPORT_REPORT_TYPE_0014EV, args, 9);
            SetReturnParm(IMPORT_STATEMENT_DATE_0015EV, args, 10);
            SetReturnParm(IMPORT_FIPS_CODE_0016EV, args, 11);
            SetReturnParm(IMPORT_FILE_OPEN_MODE_0017EV, args, 12);
            SetReturnParm(IMPORT_FDSO_IND_0018EV, args, 13);
            SetReturnParm(IMPORT_NET_WAR_DIST_AMT_0019EV, args, 14);
            SetReturnParm(IMPORT_AGENCY_NUMBER_0020EV, args, 15);
            SetReturnParm(IMPORT_0021EV, args, 16);
            SetReturnParm(IMPORT_OVERFLOW_INDICAT_0022EV, args, 17);
            SetReturnParm(IMPORT_LINES_WRITTEN_IN_0023EV, args, 18);
            SetReturnParm(IMPORT_0024EV, args, 19);
            SetReturnParm(IMPORT_STARS_NON_ADC_0025EV, args, 20);
            SetReturnParm(IMPORT_STARS_PASSTHRU_0026EV, args, 21);
            SetReturnParm(IMPORT_STARS_REFUND_0027EV, args, 22);
            SetReturnParm(IMPORT_STARS_BADCHK_0028EV, args, 23);
            SetReturnParm(IMPORT_STARS_INT_ST_0029EV, args, 24);
            SetReturnParm(IMPORT_STARS_CRT_FEE_0030EV, args, 25);
            SetReturnParm(IMPORT_STARS_EXC_CS_0031EV, args, 26);
            SetReturnParm(IMPORT_STARS_WAR_0032EV, args, 27);
            SetReturnParm(IMPORT_FROM_0033EV, args, 28);
            SetReturnParm(IMPORT_FROM_0034EV, args, 29);
            SetReturnParm(IMPORT_FROM_0035EV, args, 30);
            SetReturnParm(IMPORT_GROUP_0002RG, args, 31);
            SetReturnParm(IMPORT_HEADER_REC_WRITT_0037EV, args, 32);
            SetReturnParm(IMPORT_0038EV, args, 33);
            SetReturnParm(IMPORT_CURRENT_PAGE_NUM_0039EV, args, 34);
            SetReturnParm(IMPORT_WAR_MAILING_ADDR_0040EV, args, 35);
            SetReturnParm(IMPORT_0041EV, args, 36);
            SetReturnParm(IMPORT_SERVICE_PROVIDER_0042EV, args, 37);
            SetReturnParm(EXPORT_PASS_AREA1_0043EV, args, 38);
            SetReturnParm(EXPORT_PASS_AREA2_0044EV, args, 39);
            SetReturnParm(EXPORT_LINES_WRITTEN_IN_0045EV, args, 40);
            SetReturnParm(EXPORT_OVERFLOW_INDICAT_0046EV, args, 41);
            SetReturnParm(EXPORT_CURRENT_PAGE_NUM_0047EV, args, 42);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXFE39 : EABBase
    {

        #region Public Constructors
        public SWEXFE39()
            : base()
        {
            this.ProgramName.SetValue("SWEXFE39");

            WS = new SWEXFE39_ws();
            FD = new SWEXFE39_fd(WS);
            LS = new SWEXFE39_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXFE39_ws WS;

        //==== File Data Class ========================================
        private SWEXFE39_fd FD;

        //==== Linkage Section Data Class ========================================
        private SWEXFE39_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , GLOBDATA , IMPORT-PASS-AREA-0001EV IMPORT-WARLINE-PAYEE-0002EV IMPORT-WARLINE-DESIG-0003EV IMPORT-0004EV IMPORT-WARLINE-0005EV IMPORT-DETLINE-0001RG IMPORT-REPORT-TYPE-0014EV IMPORT-STATEMENT-DATE-0015EV IMPORT-FIPS-CODE-0016EV IMPORT-FILE-OPEN-MODE-0017EV IMPORT-FDSO-IND-0018EV IMPORT-NET-WAR-DIST-AMT-0019EV IMPORT-AGENCY-NUMBER-0020EV IMPORT-0021EV IMPORT-OVERFLOW-INDICAT-0022EV IMPORT-LINES-WRITTEN-IN-0023EV IMPORT-0024EV IMPORT-STARS-NON-ADC-0025EV IMPORT-STARS-PASSTHRU-0026EV IMPORT-STARS-REFUND-0027EV IMPORT-STARS-BADCHK-0028EV IMPORT-STARS-INT-ST-0029EV IMPORT-STARS-CRT-FEE-0030EV IMPORT-STARS-EXC-CS-0031EV IMPORT-STARS-WAR-0032EV IMPORT-FROM-0033EV IMPORT-FROM-0034EV IMPORT-FROM-0035EV IMPORT-GROUP-0002RG IMPORT-HEADER-REC-WRITT-0037EV IMPORT-0038EV IMPORT-CURRENT-PAGE-NUM-0039EV IMPORT-WAR-MAILING-ADDR-0040EV IMPORT-0041EV IMPORT-SERVICE-PROVIDER-0042EV , EXPORT-PASS-AREA1-0043EV EXPORT-PASS-AREA2-0044EV EXPORT-LINES-WRITTEN-IN-0045EV EXPORT-OVERFLOW-INDICAT-0046EV EXPORT-CURRENT-PAGE-NUM-0047EV.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain(string.Empty, "Main");
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        protected override void RunMain(string startLabel, string returnLbl)
        {
            #region Perform Navigation
            string returnLabel = returnLbl;
            switch (startLabel)
            {
                case "PARA-0043005844-INIT": goto L_PARA_0043005844_INIT; break;
                case "PARA-0043005844": goto L_PARA_0043005844; break;
                case "BEG-OPEN": goto L_BEG_OPEN; break;
                case "BEG-CLOSE": goto L_BEG_CLOSE; break;
                case "BEG-WRITE-WARRANT-LINE": goto L_BEG_WRITE_WARRANT_LINE; break;
                case "BEG-WRITE-COLL-AND-DISB-LINES": goto L_BEG_WRITE_COLL_AND_DISB_LINES; break;
                case "WRITE-OVERFLOW-MESSAGES": goto L_WRITE_OVERFLOW_MESSAGES; break;
                case "WRITE-FDSO-COLL-MESSAGE": goto L_WRITE_FDSO_COLL_MESSAGE; break;
                case "BEG-WRITE-TEMP-TO-PERM-FILE": goto L_BEG_WRITE_TEMP_TO_PERM_FILE; break;
                case "WRITE-AR-STATEMENT-ADDRESS": goto L_WRITE_AR_STATEMENT_ADDRESS; break;
                case "CHECK-PAGE-BREAK-FOR-AR": goto L_CHECK_PAGE_BREAK_FOR_AR; break;
                case "BEG-CHECK-IF-PERM-FILE-EMPTY": goto L_BEG_CHECK_IF_PERM_FILE_EMPTY; break;
                case "BEG-COPY-FILE": goto L_BEG_COPY_FILE; break;
                case "WRITE-AR-STMT-OVERFLOW-MSG": goto L_WRITE_AR_STMT_OVERFLOW_MSG; break;
                case "WRITE-STATEMENT-DATE": goto L_WRITE_STATEMENT_DATE; break;
                default: break;
            }
        #endregion

        #region MAIN-0043005844
        L_MAIN_0043005844:;
            Perform("PARA-0043005844-INIT", "PARA-0043005844-INIT-EXIT"); if (Control.ExitProgram) { return; }    //COBOL==> PERFORM PARA-0043005844-INIT THRU PARA-0043005844-INIT-EXIT
            Perform("PARA-0043005844", "PARA-0043005844-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM PARA-0043005844 THRU PARA-0043005844-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        #endregion MAIN-0043005844

        #region PARA-0043005844
        L_PARA_0043005844:;
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        #endregion PARA-0043005844

        #region BEGIN-MAIN-PROCESSING-PARA
        L_BEGIN_MAIN_PROCESSING_PARA:;
            LS.TEXT_RETURN_CODE_0043.SetValue("XY");                                                            //COBOL==> MOVE 'XY' TO TEXT-RETURN-CODE-0043 TEXT-RETURN-CODE-0044.
            LS.TEXT_RETURN_CODE_0044.SetValue("XY");
            // EvaluateList !LS.FILE_INSTRUCTION_0001!                                                          //COBOL==> EVALUATE FILE-INSTRUCTION-0001
            if ((LS.FILE_INSTRUCTION_0001.IsEqualTo("OPEN")))                                                   //COBOL==> WHEN 'OPEN'
            {
                //COMMENT:          CLOSE TEMP-FILE PERM-FILE
                Perform("BEG-OPEN", "END-OPEN"); if (Control.ExitProgram) { return; }                                 //COBOL==> PERFORM BEG-OPEN THRU END-OPEN
            }                                                                                                //COBOL==> WHEN 'CLOSE'
            else
            if ((LS.FILE_INSTRUCTION_0001.IsEqualTo("CLOSE")))
            {
                Perform("BEG-CLOSE", "END-CLOSE"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM BEG-CLOSE THRU END-CLOSE
            }                                                                                                //COBOL==> WHEN 'WR-WARRANT'
            else
            if ((LS.FILE_INSTRUCTION_0001.IsEqualTo("WR-WARRANT")))
            {
                Perform("BEG-WRITE-WARRANT-LINE", "END-WRITE-WARRANT-LINE"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM BEG-WRITE-WARRANT-LINE THRU END-WRITE-WARRANT-LINE
            }                                                                                                //COBOL==> WHEN 'WR-COLDISB'
            else
            if ((LS.FILE_INSTRUCTION_0001.IsEqualTo("WR-COLDISB")))
            {
                WS.MAX_INDEX.SetValue(LS.IMPORT_DETLINE_0001MA);                                                    //COBOL==> MOVE IMPORT-DETLINE-0001MA TO MAX-INDEX
                if (LS.COUNT_0023.IsLessThan(1))                                                                    //COBOL==> IF COUNT-0023 < 1
                {
                    LS.COUNT_0023.SetValue(+20);                                                                        //COBOL==> MOVE +20 TO COUNT-0023
                }                                                                                                   //COBOL==> END-IF
                if (WS.MAX_INDEX.IsEqualTo(0))                                                                      //COBOL==> IF MAX-INDEX = 0
                {
                    goto L_END_MAIN_PROCESSING_PARA;                                                                    //COBOL==> GO TO END-MAIN-PROCESSING-PARA
                }                                                                                                   //COBOL==> END-IF
                WS.PAGE_COUNT.SetValue(LS.COUNT_0039);                                                              //COBOL==> MOVE COUNT-0039 TO PAGE-COUNT
                for (WS.ARRAY_INDEX.SetValue(1); (!(WS.ARRAY_INDEX.IsGreaterThan(WS.MAX_INDEX))); WS.ARRAY_INDEX.Add(1))  //COBOL==> PERFORM BEG-WRITE-COLL-AND-DISB-LINES THRU END-WRITE-COLL-AND-DISB-LINES VARYING ARRAY-INDEX FROM 1 BY 1 UNTIL ARRAY-INDEX IS > MAX-INDEX
                {
                    Perform("BEG-WRITE-COLL-AND-DISB-LINES", "END-WRITE-COLL-AND-DISB-LINES"); if (Control.ExitProgram) { return; }
                }
                //COMMENT: ***************************************************************
                //COMMENT:  IF DETAIL LINES HAVE EXCEEDED THE NO OF MAXIMUN              *
                //COMMENT:  LINES PER WARRANT STUB, WRITE THE OVERFLOW MESSAGE.          *
                //COMMENT:  OTHERWISE, WRITE THE NET DISB AMOUNT FOR THE WAR OR AR  *
                //COMMENT: ***************************************************************
                LS.COUNT_0045.SetValue(LS.COUNT_0023);                                                              //COBOL==> MOVE COUNT-0023 TO COUNT-0045
                LS.COUNT_0047.SetValue(WS.PAGE_COUNT);                                                              //COBOL==> MOVE PAGE-COUNT TO COUNT-0047
                if ((LS.CHAR_2_0014.IsEqualTo("AR"))
             && (!(LS.FLAG_0046.IsEqualTo("Y"))))           //COBOL==> IF ( CHAR-2-0014 = 'AR' AND FLAG-0046 NOT = 'Y' )
                {
                    if (((LS.NUMBER_0002.IsZeros())
             || (LS.NUMBER_0002.IsSpaces()))
             && (LS.FILE_INSTRUCTION_0001.IsEqualTo("WR-COLDISB")))  //COBOL==> IF ( NUMBER-0002 = ZERO OR NUMBER-0002 = SPACES ) AND FILE-INSTRUCTION-0001 = 'WR-COLDISB'
                    {
                        if (!(LS.AVERAGE_CURRENCY_0019.IsEqualTo(0)))                                                       //COBOL==> IF AVERAGE-CURRENCY-0019 NOT = 0
                        {
                            WS.WS_REC_TYPE.SetValue("5");                                                                       //COBOL==> MOVE '5' TO WS-REC-TYPE
                            WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE7);                                                      //COBOL==> MOVE WS-REC-STUB-LINE7 TO WS-REC-DATA
                            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                            WS.WS_REC_STUB_LINE6.ResetToInitialValue();                                                         //COBOL==> INITIALIZE WS-REC-STUB-LINE6
                            WS.WS_REC_TYPE.SetValue("5");                                                                       //COBOL==> MOVE '5' TO WS-REC-TYPE
                            WS.WS_REC6_TRN_NET_AMT.SetValue(LS.AVERAGE_CURRENCY_0019);                                          //COBOL==> MOVE AVERAGE-CURRENCY-0019 TO WS-REC6-TRN-NET-AMT
                            WS.WS_REC6_DOLLAR_SIGN.SetValue("$");                                                               //COBOL==> MOVE '$' TO WS-REC6-DOLLAR-SIGN
                            WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE6);                                                      //COBOL==> MOVE WS-REC-STUB-LINE6 TO WS-REC-DATA
                            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.WS_REC_TYPE.SetValue("5");                                                                       //COBOL==> MOVE '5' TO WS-REC-TYPE
                            WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE7);                                                      //COBOL==> MOVE WS-REC-STUB-LINE7 TO WS-REC-DATA
                            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                            WS.WS_REC_STUB_LINE6.ResetToInitialValue();                                                         //COBOL==> INITIALIZE WS-REC-STUB-LINE6
                            WS.WS_REC_TYPE.SetValue("5");                                                                       //COBOL==> MOVE '5' TO WS-REC-TYPE
                            WS.WS_REC6_TRN_NET_AMT.SetValue(0.00m);                                                             //COBOL==> MOVE 0.00 TO WS-REC6-TRN-NET-AMT
                            WS.WS_REC6_DOLLAR_SIGN.SetValue("$");                                                               //COBOL==> MOVE '$' TO WS-REC6-DOLLAR-SIGN
                            WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE6);                                                      //COBOL==> MOVE WS-REC-STUB-LINE6 TO WS-REC-DATA
                            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if ((LS.CHAR_2_0014.IsEqualTo("PT"))
             && (LS.FLAG_0022.IsEqualTo("Y")))              //COBOL==> IF ( CHAR-2-0014 = 'PT' AND FLAG-0022 = 'Y' )
                {
                    Perform("WRITE-OVERFLOW-MESSAGES", "WRITE-OVERFLOW-MESSAGES"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM WRITE-OVERFLOW-MESSAGES
                }                                                                                                   //COBOL==> END-IF
                                                                                                                    //COMMENT: **************************************************************
                                                                                                                    //COMMENT:            IF FDSO-EXISTS-AND-CSE-PERSON-IS-ORGANIZATION = Y *
                                                                                                                    //COMMENT:               PERFORM WRITE-FDSO-COLL-MESSAGE                *
                                                                                                                    //COMMENT:            END-IF                                            *
                                                                                                                    //COMMENT: **************************************************************
                if (LS.FLAG_0018.IsEqualTo("Y"))                                                                    //COBOL==> IF FLAG-0018 = 'Y'
                {
                    Perform("WRITE-FDSO-COLL-MESSAGE", "WRITE-FDSO-COLL-MESSAGE"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM WRITE-FDSO-COLL-MESSAGE
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                //COBOL==> WHEN 'NO-COLL'
            else
            if ((LS.FILE_INSTRUCTION_0001.IsEqualTo("NO-COLL")))
            {
                WS.WS_REC_TYPE.SetValue("5");                                                                       //COBOL==> MOVE '5' TO WS-REC-TYPE
                WS.WS_REC_PMNT_REQ_ID.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO WS-REC-PMNT-REQ-ID
                WS.WS_MSG.SetValue("           NO ACTIVITY FOR THIS MONTH");                                        //COBOL==> MOVE '           NO ACTIVITY FOR THIS MONTH' TO WS-MSG
                WS.WS_REC_DATA.SetValue(WS.WS_MSG);                                                                 //COBOL==> MOVE WS-MSG TO WS-REC-DATA
                FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
            }                                                                                                //COBOL==> WHEN 'NO-DRIVER'
            else
            if ((LS.FILE_INSTRUCTION_0001.IsEqualTo("NO-DRIVER")))
            {
                WS.WS_REC_TYPE.SetValue("5");                                                                       //COBOL==> MOVE '5' TO WS-REC-TYPE
                WS.WS_REC_PMNT_REQ_ID.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO WS-REC-PMNT-REQ-ID
                WS.WS_MSG.SetValue("       **** THE DRIVER-TABLE IS EMPTY ***");                                    //COBOL==> MOVE '       **** THE DRIVER-TABLE IS EMPTY ***' TO WS-MSG
                WS.WS_REC_DATA.SetValue(WS.WS_MSG);                                                                 //COBOL==> MOVE WS-MSG TO WS-REC-DATA
                FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
            }                                                                                                //COBOL==> WHEN 'COMMIT'
            else
            if ((LS.FILE_INSTRUCTION_0001.IsEqualTo("COMMIT")))
            {
                WS.EOF_FLAG.SetValue("N");                                                                          //COBOL==> MOVE 'N' TO EOF-FLAG
                Perform("BEG-WRITE-TEMP-TO-PERM-FILE", "END-WRITE-TEMP-TO-PERM-FILE"); if (Control.ExitProgram) { return; }  //COBOL==> PERFORM BEG-WRITE-TEMP-TO-PERM-FILE THRU END-WRITE-TEMP-TO-PERM-FILE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        #endregion BEGIN-MAIN-PROCESSING-PARA

        #region END-MAIN-PROCESSING-PARA
        L_END_MAIN_PROCESSING_PARA:;
            if (returnLabel == "END-MAIN-PROCESSING-PARA") { return; }                                          //COBOL==> EXIT.
        ///COMMENT: **************************************************************
        ///COMMENT:             THE PERFORM PARAGRAPHS START FROM HERE           *
        ///COMMENT: **************************************************************
        #endregion END-MAIN-PROCESSING-PARA

        #region BEG-OPEN
        L_BEG_OPEN:;
            FD.TEMP_FILE.OpenFile(FileAccessMode.Write);                                                        //COBOL==> OPEN OUTPUT TEMP-FILE.
            if (WS.FSTAT_1.IsEqualTo("00"))                                                                     //COBOL==> IF FSTAT-1 = '00'
            {
                LS.TEXT_RETURN_CODE_0043.SetValue(WS.FSTAT_1);                                                      //COBOL==> MOVE FSTAT-1 TO TEXT-RETURN-CODE-0043
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.TEXT_RETURN_CODE_0043.SetValue("PE");                                                            //COBOL==> MOVE 'PE' TO TEXT-RETURN-CODE-0043
                LS.TEXT_RETURN_CODE_0043.SetValue(WS.FSTAT_1);                                                      //COBOL==> MOVE FSTAT-1 TO TEXT-RETURN-CODE-0043
            }                                                                                                   //COBOL==> END-IF.
            if (LS.FLAG_0017.IsEqualTo("E"))                                                                    //COBOL==> IF FLAG-0017 = 'E'
            {
                FD.PERM_FILE.OpenFile(FileAccessMode.WriteExtend);                                                  //COBOL==> OPEN EXTEND PERM-FILE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                FD.PERM_FILE.OpenFile(FileAccessMode.Write);                                                        //COBOL==> OPEN OUTPUT PERM-FILE
            }                                                                                                   //COBOL==> END-IF.
            if (WS.FSTAT_2.IsEqualTo("00"))                                                                     //COBOL==> IF FSTAT-2 = '00'
            {
                LS.TEXT_RETURN_CODE_0044.SetValue(WS.FSTAT_2);                                                      //COBOL==> MOVE FSTAT-2 TO TEXT-RETURN-CODE-0044
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.TEXT_RETURN_CODE_0044.SetValue("PE");                                                            //COBOL==> MOVE 'PE' TO TEXT-RETURN-CODE-0044
            }                                                                                                   //COBOL==> END-IF.
            if ((WS.FSTAT_1.IsEqualTo("PE"))
             || (WS.FSTAT_2.IsEqualTo("PE")))                   //COBOL==> IF FSTAT-1 = 'PE' OR FSTAT-2 = 'PE'
            {
                goto L_END_OPEN;                                                                                    //COBOL==> GO TO END-OPEN
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ***** WRITING THE TAPE HEADER RECORD *******
            FD.TEMP_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACE TO TEMP-REC.
            WS.WS_REC.SetValueWithSpaces();                                                                     //COBOL==> MOVE SPACE TO WS-REC.
                                                                                                                //COMMENT: *** CHECK THE HEADER-WRITTEN-FLAG ****
            if (LS.FLAG_0037.IsEqualTo("Y"))                                                                    //COBOL==> IF FLAG-0037 = 'Y'
            {
                //COMMENT:   --- THE HEADER RECORD WAS ALREADY WRITTEN FOR THIS RUN ---*
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "BEG-OPEN") { return; }  //Check for pass through to next method
        #endregion BEG-OPEN

        #region END-OPEN
        L_END_OPEN:;
            if (returnLabel == "END-OPEN") { return; }                                                          //COBOL==> EXIT.
        #endregion END-OPEN

        #region BEG-CLOSE
        L_BEG_CLOSE:;
            FD.TEMP_FILE.CloseFile();                                                                           //COBOL==> CLOSE TEMP-FILE , PERM-FILE .
            FD.PERM_FILE.CloseFile();
            if (returnLabel == "BEG-CLOSE") { return; }  //Check for pass through to next method
        #endregion BEG-CLOSE

        #region END-CLOSE
        L_END_CLOSE:;
            if (returnLabel == "END-CLOSE") { return; }                                                         //COBOL==> EXIT.
        #endregion END-CLOSE

        #region BEG-WRITE-WARRANT-LINE
        L_BEG_WRITE_WARRANT_LINE:;
            WS.WS_REC.ResetToInitialValue();                                                                    //COBOL==> INITIALIZE WS-REC , TEMP-REC.
            FD.TEMP_REC.ResetToInitialValue();
            WS.FIRST_TIME_FLAG.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO FIRST-TIME-FLAG
            Perform("WRITE-AR-STATEMENT-ADDRESS", "WRITE-AR-STATEMENT-ADDRESS"); if (Control.ExitProgram) { return; }  //COBOL==> PERFORM WRITE-AR-STATEMENT-ADDRESS
            LS.COUNT_0023.SetValue(+20);                                                                        //COBOL==> MOVE +20 TO COUNT-0023
            WS.FIRST_TIME_FLAG.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO FIRST-TIME-FLAG
                                                                                                                //COMMENT:  ADDED NEXT TWO LINES TO MOVE PAYEES NAME DOWN THREE LINES
            FD.TEMP_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO TEMP-REC
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
            WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 3m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 3
                                                                                                                //COMMENT: ******<< WRITE STUB-LINE1 THRU STUB-LINE4 >>*******
            WS.WS_REC_DATA.ResetToInitialValue();                                                               //COBOL==> INITIALIZE WS-REC-DATA.
            WS.WS_REC_TYPE.SetValue("4");                                                                       //COBOL==> MOVE '4' TO WS-REC-TYPE.
            if (LS.CHAR_2_0014.IsEqualTo("PT"))                                                                 //COBOL==> IF CHAR-2-0014 = 'PT'
            {
                if (LS.FORMATTED_NAME_0040.IsEqualTo(" "))                                                          //COBOL==> IF FORMATTED-NAME-0040 = ' '
                {
                    WS.WS_REC1_PAYEE_NAME.SetValue(LS.FORMATTED_NAME_0002);                                             //COBOL==> MOVE FORMATTED-NAME-0002 TO WS-REC1-PAYEE-NAME
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_REC1_PAYEE_NAME.SetValue(LS.FORMATTED_NAME_0040);                                             //COBOL==> MOVE FORMATTED-NAME-0040 TO WS-REC1-PAYEE-NAME
                }                                                                                                   //COBOL==> END-IF
                WS.WS_REC1_PAYEE_NUM.SetValue(LS.NUMBER_0002);                                                      //COBOL==> MOVE NUMBER-0002 TO WS-REC1-PAYEE-NUM
                                                                                                                    //COMMENT:        MOVE PRINT-DATE-0005 TO WS-REC1-DATE
                WS.WS_REC1_AMT.SetValue(LS.AMOUNT_0005);                                                            //COBOL==> MOVE AMOUNT-0005 TO WS-REC1-AMT
                                                                                                                    //COMMENT:        MOVE NUMBER-0005 TO WS-REC1-WAR-NUM
                WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE1);                                                      //COBOL==> MOVE WS-REC-STUB-LINE1 TO WS-REC-DATA
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_REC11_PAYEE_NAME.SetValue(LS.FORMATTED_NAME_0002);                                            //COBOL==> MOVE FORMATTED-NAME-0002 TO WS-REC11-PAYEE-NAME
                WS.WS_REC11_PAYEE_NUM.SetValue(LS.NUMBER_0002);                                                     //COBOL==> MOVE NUMBER-0002 TO WS-REC11-PAYEE-NUM
                WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE1_1);                                                    //COBOL==> MOVE WS-REC-STUB-LINE1-1 TO WS-REC-DATA
            }                                                                                                   //COBOL==> END-IF
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
            WS.WS_REC_DATA.ResetToInitialValue();                                                               //COBOL==> INITIALIZE WS-REC-DATA , TEMP-REC.
            FD.TEMP_REC.ResetToInitialValue();
            WS.WS_REC_TYPE.SetValue("5");                                                                       //COBOL==> MOVE '5' TO WS-REC-TYPE.
            WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE3);                                                      //COBOL==> MOVE WS-REC-STUB-LINE3 TO WS-REC-DATA
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
            WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE4);                                                      //COBOL==> MOVE WS-REC-STUB-LINE4 TO WS-REC-DATA
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
            WS.WS_REC_DATA.SetValueWithSpaces();                                                                //COBOL==> MOVE SPACES TO WS-REC-DATA
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC.
            if (returnLabel == "BEG-WRITE-WARRANT-LINE") { return; }  //Check for pass through to next method
        #endregion BEG-WRITE-WARRANT-LINE

        #region END-WRITE-WARRANT-LINE
        L_END_WRITE_WARRANT_LINE:;
            if (returnLabel == "END-WRITE-WARRANT-LINE") { return; }                                            //COBOL==> EXIT.
        #endregion END-WRITE-WARRANT-LINE

        #region BEG-WRITE-COLL-AND-DISB-LINES
        L_BEG_WRITE_COLL_AND_DISB_LINES:;
            Perform("CHECK-PAGE-BREAK-FOR-AR", "CHECK-PAGE-BREAK-FOR-AR"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM CHECK-PAGE-BREAK-FOR-AR.
            WS.WS_REC_DATA.ResetToInitialValue();                                                               //COBOL==> INITIALIZE WS-REC-DATA , TEMP-REC , WS-REC-STUB-LINE5 , WS-REC-STUB-LINE6 , WS-REC-ADDRESS-LINE.
            FD.TEMP_REC.ResetToInitialValue();
            WS.WS_REC_STUB_LINE5.ResetToInitialValue();
            WS.WS_REC_STUB_LINE6.ResetToInitialValue();
            WS.WS_REC_ADDRESS_LINE.ResetToInitialValue();
            WS.WS_REC_TYPE.SetValue("5");                                                                       //COBOL==> MOVE '5' TO WS-REC-TYPE.
            WS.WS_REC_DATA.SetValue(LS.IMPORT_DETLINE_0001[WS.ARRAY_INDEX.AsInt()]);                            //COBOL==> MOVE IMPORT-DETLINE-0001 ( ARRAY-INDEX ) TO WS-REC-DATA.
            if (WS.WS_REC_DATA.IsSpaces())                                                                      //COBOL==> IF WS-REC-DATA = SPACES
            {
                WS.ARRAY_INDEX.SetComputeValue(WS.MAX_INDEX.AsDecimal() + 1m);                                      //COBOL==> COMPUTE ARRAY-INDEX = MAX-INDEX + 1
                goto L_END_WRITE_COLL_AND_DISB_LINES;                                                               //COBOL==> GO TO END-WRITE-COLL-AND-DISB-LINES
            }                                                                                                   //COBOL==> END-IF
            WS.WS_REC_DATA.ResetToInitialValue();                                                               //COBOL==> INITIALIZE WS-REC-DATA.
            if (LS.FLAG_0011[WS.ARRAY_INDEX.AsInt()].IsEqualTo("C"))                                            //COBOL==> IF FLAG-0011 ( ARRAY-INDEX ) = 'C'
            {
                //COMMENT:          *** COLLECTION LINE ***
                WS.WS_REC5_PAYOR_NAME.SetValue(LS.FORMATTED_NAME_0007[WS.ARRAY_INDEX.AsInt()]);                     //COBOL==> MOVE FORMATTED-NAME-0007 ( ARRAY-INDEX ) TO WS-REC5-PAYOR-NAME
                WS.WS_REC5_NUM.SetValue(LS.NUMBER_0007[WS.ARRAY_INDEX.AsInt()]);                                    //COBOL==> MOVE NUMBER-0007 ( ARRAY-INDEX ) TO WS-REC5-NUM
                if (WS.WS_REC5_NUM.IsEqualTo(" "))                                                                  //COBOL==> IF WS-REC5-NUM = ' '
                {
                    WS.WS_REC5_PAYOR.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACES TO WS-REC5-PAYOR
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_REC5_PAYOR.SetValue("PAYOR ");                                                                //COBOL==> MOVE 'PAYOR ' TO WS-REC5-PAYOR
                }                                                                                                   //COBOL==> END-IF
                WS.WS_REC5_ORD_NUM.SetValue(LS.COURT_CASE_NUMBER_0008[WS.ARRAY_INDEX.AsInt()]);                     //COBOL==> MOVE COURT-CASE-NUMBER-0008 ( ARRAY-INDEX ) TO WS-REC5-ORD-NUM
                WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE5);                                                      //COBOL==> MOVE WS-REC-STUB-LINE5 TO WS-REC-DATA
                FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                if (WS.WS_REC5_NUM.IsGreaterThan(" "))                                                              //COBOL==> IF WS-REC5-NUM > ' '
                {
                    WS.WS_REC_STUB_LINE5_STORE.SetValue(WS.WS_REC_STUB_LINE5);                                          //COBOL==> MOVE WS-REC-STUB-LINE5 TO WS-REC-STUB-LINE5-STORE
                }                                                                                                   //COBOL==> END-IF
                if (LS.CHAR_2_0014.IsEqualTo("AR"))                                                                 //COBOL==> IF CHAR-2-0014 = 'AR'
                {
                    LS.COUNT_0023.Add(1);                                                                               //COBOL==> ADD 1 TO COUNT-0023
                }                                                                                                   //COBOL==> END-IF
                WS.WS_REC_DATA.ResetToInitialValue();                                                               //COBOL==> INITIALIZE WS-REC-DATA
                WS.WS_REC6_TRN_NAME.SetValue(LS.NAME_0009[WS.ARRAY_INDEX.AsInt()]);                                 //COBOL==> MOVE NAME-0009 ( ARRAY-INDEX ) TO WS-REC6-TRN-NAME
                WS.WS_MVS_FORMATTED_DATE_N.SetValue(LS.DISB_DATE_0010[WS.ARRAY_INDEX.AsInt()]);                     //COBOL==> MOVE DISB-DATE-0010 ( ARRAY-INDEX ) TO WS-MVS-FORMATTED-DATE-N
                if (WS.WS_MVS_FORMATTED_DATE_N.IsLessThanOrEqualTo(0))                                              //COBOL==> IF WS-MVS-FORMATTED-DATE-N NOT > 0
                {
                    WS.WS_REC6_TRN_DATE.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO WS-REC6-TRN-DATE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_TEMP_DATE_MM.SetValue(WS.WS_MVS_FORMATTED_DATE_MM);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-MM TO WS-TEMP-DATE-MM
                    WS.WS_TEMP_DATE_DD.SetValue(WS.WS_MVS_FORMATTED_DATE_DD);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-DD TO WS-TEMP-DATE-DD
                    WS.WS_TEMP_DATE_YY.SetValue(WS.WS_MVS_FORMATTED_DATE_YY);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-YY TO WS-TEMP-DATE-YY
                    WS.WS_REC6_TRN_DATE.SetValue(WS.WS_TEMP_OUTPUT_DATE);                                               //COBOL==> MOVE WS-TEMP-OUTPUT-DATE TO WS-REC6-TRN-DATE
                }                                                                                                   //COBOL==> END-IF
                WS.WS_REC6_TRN_CREDIT_AMT.SetValue(LS.AMOUNT_0012[WS.ARRAY_INDEX.AsInt()]);                         //COBOL==> MOVE AMOUNT-0012 ( ARRAY-INDEX ) TO WS-REC6-TRN-CREDIT-AMT
                WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE6);                                                      //COBOL==> MOVE WS-REC-STUB-LINE6 TO WS-REC-DATA
                FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
            }                                                                                                   //COBOL==> ELSE
            else
            {
                //COMMENT:           *** DISBURSEMENT LINE ***
                WS.WS_REC6_TRN_NAME.SetValue(LS.NAME_0009[WS.ARRAY_INDEX.AsInt()]);                                 //COBOL==> MOVE NAME-0009 ( ARRAY-INDEX ) TO WS-REC6-TRN-NAME
                WS.WS_MVS_FORMATTED_DATE_N.SetValue(LS.DISB_DATE_0010[WS.ARRAY_INDEX.AsInt()]);                     //COBOL==> MOVE DISB-DATE-0010 ( ARRAY-INDEX ) TO WS-MVS-FORMATTED-DATE-N
                if (WS.WS_MVS_FORMATTED_DATE_N.IsLessThanOrEqualTo(0))                                              //COBOL==> IF WS-MVS-FORMATTED-DATE-N NOT > 0
                {
                    WS.WS_REC6_TRN_DATE.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO WS-REC6-TRN-DATE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_TEMP_DATE_MM.SetValue(WS.WS_MVS_FORMATTED_DATE_MM);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-MM TO WS-TEMP-DATE-MM
                    WS.WS_TEMP_DATE_DD.SetValue(WS.WS_MVS_FORMATTED_DATE_DD);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-DD TO WS-TEMP-DATE-DD
                    WS.WS_TEMP_DATE_CC.SetValue(WS.WS_MVS_FORMATTED_DATE_CC);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-CC TO WS-TEMP-DATE-CC
                    WS.WS_TEMP_DATE_YY.SetValue(WS.WS_MVS_FORMATTED_DATE_YY);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-YY TO WS-TEMP-DATE-YY
                    WS.WS_REC6_TRN_DATE.SetValue(WS.WS_TEMP_OUTPUT_DATE);                                               //COBOL==> MOVE WS-TEMP-OUTPUT-DATE TO WS-REC6-TRN-DATE
                }                                                                                                   //COBOL==> END-IF
                if (LS.FLAG_0011[WS.ARRAY_INDEX.AsInt()].IsEqualTo("1"))                                            //COBOL==> IF FLAG-0011 ( ARRAY-INDEX ) = '1'
                {
                    WS.WS_REC6_TRN_DEBIT_AMT.SetValue(LS.AMOUNT_0012[WS.ARRAY_INDEX.AsInt()]);                          //COBOL==> MOVE AMOUNT-0012 ( ARRAY-INDEX ) TO WS-REC6-TRN-DEBIT-AMT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_REC6_TRN_DEBIT_AMT.SetValue(LS.AMOUNT_0012[WS.ARRAY_INDEX.AsInt()]);                          //COBOL==> MOVE AMOUNT-0012 ( ARRAY-INDEX ) TO WS-REC6-TRN-DEBIT-AMT
                    if ((((((((LS.NAME_0009[WS.ARRAY_INDEX.AsInt()].IsEqualTo("PASSTHRU PAYMENT WARRANT"))
             || (LS.NAME_0009[WS.ARRAY_INDEX.AsInt()].IsEqualTo("PASSTHRU PAYMENT EFT")))
             || (LS.NAME_0009[WS.ARRAY_INDEX.AsInt()].IsEqualTo("NON-TAF WARRANT")))
             || (LS.NAME_0009[WS.ARRAY_INDEX.AsInt()].IsEqualTo("NON-TAF EFT")))
             || (LS.NAME_0009[WS.ARRAY_INDEX.AsInt()].IsEqualTo("EXCESS URA - CURRENT WARRANT")))
             || (LS.NAME_0009[WS.ARRAY_INDEX.AsInt()].IsEqualTo("EXCESS URA - CURRENT EFT")))
             || (LS.NAME_0009[WS.ARRAY_INDEX.AsInt()].IsEqualTo("EXCESS URA - ARREARS WARRANT")))
             || (LS.NAME_0009[WS.ARRAY_INDEX.AsInt()].IsEqualTo("EXCESS URA - ARREARS EFT")))  //COBOL==> IF NAME-0009 ( ARRAY-INDEX ) = ( 'PASSTHRU PAYMENT WARRANT' OR 'PASSTHRU PAYMENT EFT' OR 'NON-TAF WARRANT' OR 'NON-TAF EFT' OR 'EXCESS URA - CURRENT WARRANT' OR 'EXCESS URA - CURRENT EFT' OR 'EXCESS URA - ARREARS WARRANT' OR 'EXCESS URA - ARREARS EFT' )
                    {
                        WS.WS_REC6_TRN_NET_AMT.SetValue(LS.AMOUNT_0012[WS.ARRAY_INDEX.AsInt()]);                            //COBOL==> MOVE AMOUNT-0012 ( ARRAY-INDEX ) TO WS-REC6-TRN-NET-AMT
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        LS.AMOUNT_0012[WS.ARRAY_INDEX.AsInt()].SetValueWithZeroes();                                        //COBOL==> MOVE 0 TO AMOUNT-0012 ( ARRAY-INDEX )
                        WS.WS_REC6_TRN_NET_AMT.SetValue(LS.AMOUNT_0012[WS.ARRAY_INDEX.AsInt()]);                            //COBOL==> MOVE AMOUNT-0012 ( ARRAY-INDEX ) TO WS-REC6-TRN-NET-AMT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE6);                                                      //COBOL==> MOVE WS-REC-STUB-LINE6 TO WS-REC-DATA
                FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                                                                                                                    //COMMENT:      == IF THE DISB. IS A REFUND, THEN PRINT THE REFUND TEXT ==
                                                                                                                    //COMMENT:         ----------------------------------------------------
                if (LS.REASON_TEXT_0038DV.IsEqualTo(" "))                                                           //COBOL==> IF REASON-TEXT-0038DV = ' '
                {
                    //COMMENT:         = CONTINUE .. NOT A REFUND
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_REFUND_REASON.SetValue(LS.REASON_TEXT_0038DV);                                                //COBOL==> MOVE REASON-TEXT-0038DV TO WS-REFUND-REASON
                    if (!(WS.WS_REFUND_REASON_LINE1.IsEqualTo(" ")))                                                    //COBOL==> IF WS-REFUND-REASON-LINE1 NOT = ' '
                    {
                        WS.WS_REC_DATA.SetValue(WS.WS_REFUND_REASON_LINE1);                                                 //COBOL==> MOVE WS-REFUND-REASON-LINE1 TO WS-REC-DATA
                        FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                    }                                                                                                   //COBOL==> END-IF
                    if (!(WS.WS_REFUND_REASON_LINE2.IsEqualTo(" ")))                                                    //COBOL==> IF WS-REFUND-REASON-LINE2 NOT = ' '
                    {
                        WS.WS_REC_DATA.SetValue(WS.WS_REFUND_REASON_LINE2);                                                 //COBOL==> MOVE WS-REFUND-REASON-LINE2 TO WS-REC-DATA
                        FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                    }                                                                                                   //COBOL==> END-IF
                    if (!(WS.WS_REFUND_REASON_LINE3.IsEqualTo(" ")))                                                    //COBOL==> IF WS-REFUND-REASON-LINE3 NOT = ' '
                    {
                        WS.WS_REC_DATA.SetValue(WS.WS_REFUND_REASON_LINE3);                                                 //COBOL==> MOVE WS-REFUND-REASON-LINE3 TO WS-REC-DATA
                        FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "BEG-WRITE-COLL-AND-DISB-LINES") { return; }  //Check for pass through to next method
        #endregion BEG-WRITE-COLL-AND-DISB-LINES

        #region END-WRITE-COLL-AND-DISB-LINES
        L_END_WRITE_COLL_AND_DISB_LINES:;
            if (returnLabel == "END-WRITE-COLL-AND-DISB-LINES") { return; }                                     //COBOL==> EXIT.
        #endregion END-WRITE-COLL-AND-DISB-LINES

        #region CHECK-PAGE-BREAK-FOR-AR
        L_CHECK_PAGE_BREAK_FOR_AR:;
            if (LS.CHAR_2_0014.IsEqualTo("AR"))                                                                 //COBOL==> IF CHAR-2-0014 = 'AR'
            {
                LS.COUNT_0023.Add(1);                                                                               //COBOL==> ADD 1 TO COUNT-0023
                if (LS.COUNT_0023.IsGreaterThan(WS.WS_MAX_LINE_PER_PAGE))                                           //COBOL==> IF COUNT-0023 > WS-MAX-LINE-PER-PAGE
                {
                    WS.PAGE_COUNT.Add(1);                                                                               //COBOL==> ADD 1 TO PAGE-COUNT
                    LS.COUNT_0023.SetValue(+10);                                                                        //COBOL==> MOVE +10 TO COUNT-0023
                    LS.FLAG_0046.SetValue("Y");                                                                         //COBOL==> MOVE 'Y' TO FLAG-0046
                                                                                                                        //COMMENT: ADDED CODE TO PAGEBREAK*
                                                                                                                        //COMMENT: AFTER THE MAXIMUM NUMBER OF LINES HAVE BEEN REACHED*
                    if (WS.PAGE_COUNT.IsEqualTo(4))                                                                     //COBOL==> IF PAGE-COUNT = 4
                    {
                        Perform("WRITE-AR-STATEMENT-ADDRESS", "WRITE-AR-STATEMENT-ADDRESS"); if (Control.ExitProgram) { return; }  //COBOL==> PERFORM WRITE-AR-STATEMENT-ADDRESS
                        LS.COUNT_0023.SetValue(+20);                                                                        //COBOL==> MOVE +20 TO COUNT-0023
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        FD.TEMP_REC_DATA.SetValue(" PGBRK");                                                                //COBOL==> MOVE ' PGBRK' TO TEMP-REC-DATA
                        FD.TEMP_FILE.WriteLinePrinter(FD.TEMP_REC.AsString(), PrinterControl.LINEBREAK, 0, 1);                 //COBOL==> WRITE TEMP-REC AFTER ADVANCING 1
                        WS.LINE_COUNT.Add(1);                                                                               //COBOL==> ADD 1 TO LINE-COUNT
                        WS.WS_REC8_PAGE_COUNT.SetComputeValue(WS.PAGE_COUNT.AsDecimal() + 1m);                              //COBOL==> COMPUTE WS-REC8-PAGE-COUNT = PAGE-COUNT + 1
                        WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE8);                                                      //COBOL==> MOVE WS-REC-STUB-LINE8 TO WS-REC-DATA
                        FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                        FD.TEMP_FILE.WriteLinePrinter(FD.TEMP_REC.AsString(), PrinterControl.LINEBREAK, 0, 1);                 //COBOL==> WRITE TEMP-REC AFTER ADVANCING 1
                        WS.LINE_COUNT.Add(1);                                                                               //COBOL==> ADD 1 TO LINE-COUNT
                        FD.TEMP_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        WS.LINE_COUNT.Add(3);                                                                               //COBOL==> ADD 3 TO LINE-COUNT
                        WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 4m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 4
                        FD.TEMP_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        WS.LINE_COUNT.Add(3);                                                                               //COBOL==> ADD 3 TO LINE-COUNT
                        WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 3m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 3
                        FD.TEMP_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        WS.LINE_COUNT.Add(3);                                                                               //COBOL==> ADD 3 TO LINE-COUNT
                        WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 3m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 3
                        FD.TEMP_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        WS.LINE_COUNT.Add(3);                                                                               //COBOL==> ADD 3 TO LINE-COUNT
                        WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 3m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 3
                        WS.WS_REC_CONTROL.SetValueWithSpaces();                                                             //COBOL==> MOVE SPACES TO WS-REC-CONTROL
                        WS.WS_REC_TYPE.SetValue("2");                                                                       //COBOL==> MOVE '2' TO WS-REC-TYPE
                    }                                                                                                   //COBOL==> END-IF
                                                                                                                        //COMMENT:       --- WRITING THE DETAIL LINE HEADER --- *
                    WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE3);                                                      //COBOL==> MOVE WS-REC-STUB-LINE3 TO WS-REC-DATA
                    FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                    FD.TEMP_FILE.WriteLinePrinter(FD.TEMP_REC.AsString(), PrinterControl.LINEBREAK, 0, WS.ADVANCE_COUNTER.AsInt());  //COBOL==> WRITE TEMP-REC AFTER ADVANCING ADVANCE-COUNTER LINES
                    WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE4);                                                      //COBOL==> MOVE WS-REC-STUB-LINE4 TO WS-REC-DATA
                    FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                    FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                                                                                                                        //COMMENT:     TO PUT AR NAME ON ALL PAGES MAYBE HERE**
                    if (!(WS.WS_REC_STUB_LINE5_STORE.IsSpaces()))                                                       //COBOL==> IF WS-REC-STUB-LINE5-STORE NOT EQUAL SPACES
                    {
                        WS.WS_REC_TYPE.SetValue("5");                                                                       //COBOL==> MOVE '5' TO WS-REC-TYPE
                        WS.WS_REC_DATA.SetValue(WS.WS_REC_STUB_LINE5_STORE);                                                //COBOL==> MOVE WS-REC-STUB-LINE5-STORE TO WS-REC-DATA
                        FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        WS.LINE_COUNT.Add(1);                                                                               //COBOL==> ADD 1 TO LINE-COUNT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "CHECK-PAGE-BREAK-FOR-AR") { return; }  //Check for pass through to next method
        #endregion CHECK-PAGE-BREAK-FOR-AR

        #region BEG-WRITE-TEMP-TO-PERM-FILE
        L_BEG_WRITE_TEMP_TO_PERM_FILE:;
            FD.TEMP_FILE.CloseFile();                                                                           //COBOL==> CLOSE TEMP-FILE.
            WS.EOF_FLAG.SetValue("N");                                                                          //COBOL==> MOVE 'N' TO EOF-FLAG.
            WS.LINE_COUNT.SetValueWithZeroes();                                                                 //COBOL==> MOVE 0 TO LINE-COUNT
            WS.PAGE_COUNT.SetValueWithZeroes();                                                                 //COBOL==> MOVE 0 TO PAGE-COUNT
            WS.PREVIOUS_REC.SetValueWithSpaces();                                                               //COBOL==> MOVE SPACES TO PREVIOUS-REC , CURRENT-REC.
            WS.CURRENT_REC.SetValueWithSpaces();
            WS.WS_NO_OF_PAGES_IN_STMT.SetValueWithZeroes();                                                     //COBOL==> MOVE ZERO TO WS-NO-OF-PAGES-IN-STMT.
            FD.PERM_FILE.OpenFile(FileAccessMode.Read);                                                         //COBOL==> OPEN INPUT PERM-FILE.
            WS.IS_PERM_FILE_EMPTY.SetValue("N");                                                                //COBOL==> MOVE 'N' TO IS-PERM-FILE-EMPTY.
            Perform("BEG-CHECK-IF-PERM-FILE-EMPTY", "END-CHECK-IF-PERM-FILE-EMPTY"); if (Control.ExitProgram) { return; }  //COBOL==> PERFORM BEG-CHECK-IF-PERM-FILE-EMPTY THRU END-CHECK-IF-PERM-FILE-EMPTY
            FD.PERM_FILE.CloseFile();                                                                           //COBOL==> CLOSE PERM-FILE.
            FD.TEMP_FILE.OpenFile(FileAccessMode.Read);                                                         //COBOL==> OPEN INPUT TEMP-FILE.
            FD.PERM_FILE.OpenFile(FileAccessMode.WriteExtend);                                                  //COBOL==> OPEN EXTEND PERM-FILE.
            while (!(WS.EOF_FLAG.IsEqualTo("Y")))                                                               //COBOL==> PERFORM BEG-COPY-FILE THRU END-COPY-FILE UNTIL EOF-FLAG = 'Y'
            {
                Perform("BEG-COPY-FILE", "END-COPY-FILE"); if (Control.ExitProgram) { return; }
            }
            FD.TEMP_FILE.CloseFile();                                                                           //COBOL==> CLOSE TEMP-FILE , PERM-FILE.
            FD.PERM_FILE.CloseFile();
            FD.TEMP_FILE.OpenFile(FileAccessMode.Write);                                                        //COBOL==> OPEN OUTPUT TEMP-FILE.
            if (returnLabel == "BEG-WRITE-TEMP-TO-PERM-FILE") { return; }  //Check for pass through to next method
        #endregion BEG-WRITE-TEMP-TO-PERM-FILE

        #region END-WRITE-TEMP-TO-PERM-FILE
        L_END_WRITE_TEMP_TO_PERM_FILE:;
            if (returnLabel == "END-WRITE-TEMP-TO-PERM-FILE") { return; }                                       //COBOL==> EXIT.
        #endregion END-WRITE-TEMP-TO-PERM-FILE

        #region BEG-CHECK-IF-PERM-FILE-EMPTY
        L_BEG_CHECK_IF_PERM_FILE_EMPTY:;
            FD.PERM_FILE.ReadLine();                                                                            //COBOL==> READ PERM-FILE
            if (FD.PERM_FILE.FileStatus == FileStatus.End_of_file)                                              //COBOL==> AT END
            {
                goto L_END_CHECK_IF_PERM_FILE_EMPTY;                                                                //COBOL==> GO TO END-CHECK-IF-PERM-FILE-EMPTY
                WS.IS_PERM_FILE_EMPTY.SetValue("Y");                                                                //COBOL==> MOVE 'Y' TO IS-PERM-FILE-EMPTY.
            }
            if (returnLabel == "BEG-CHECK-IF-PERM-FILE-EMPTY") { return; }  //Check for pass through to next method
        #endregion BEG-CHECK-IF-PERM-FILE-EMPTY

        #region END-CHECK-IF-PERM-FILE-EMPTY
        L_END_CHECK_IF_PERM_FILE_EMPTY:;
            if (returnLabel == "END-CHECK-IF-PERM-FILE-EMPTY") { return; }                                      //COBOL==> EXIT.
        #endregion END-CHECK-IF-PERM-FILE-EMPTY

        #region BEG-FIND-NO-OF-PAGES-IN-STMT
        L_BEG_FIND_NO_OF_PAGES_IN_STMT:;
            FD.TEMP_FILE.ReadLine();                                                                            //COBOL==> READ TEMP-FILE
            if (FD.TEMP_FILE.FileStatus == FileStatus.End_of_file)                                              //COBOL==> AT END
            {
                FD.TEMP_FILE.CloseFile();                                                                           //COBOL==> CLOSE TEMP-FILE
                WS.WS_WORK_AREA.SetValueWithSpaces();                                                               //COBOL==> MOVE SPACES TO WS-WORK-AREA
                goto L_END_FIND_NO_OF_PAGES_IN_STMT;                                                                //COBOL==> GO TO END-FIND-NO-OF-PAGES-IN-STMT.
            }
            WS.WS_WORK_AREA.SetValue(FD.TEMP_REC_DATA);                                                         //COBOL==> MOVE TEMP-REC-DATA TO WS-WORK-AREA.
            if (WS.WS_WORK_REC.IsEqualTo("PGBRK"))                                                              //COBOL==> IF WS-WORK-REC = 'PGBRK'
            {
                WS.WS_NO_OF_PAGES_IN_STMT.Add(1);                                                                   //COBOL==> ADD 1 TO WS-NO-OF-PAGES-IN-STMT
            }                                                                                                   //COBOL==> END-IF
            goto L_BEG_FIND_NO_OF_PAGES_IN_STMT;                                                                //COBOL==> GO TO BEG-FIND-NO-OF-PAGES-IN-STMT.
        #endregion BEG-FIND-NO-OF-PAGES-IN-STMT

        #region END-FIND-NO-OF-PAGES-IN-STMT
        L_END_FIND_NO_OF_PAGES_IN_STMT:;
            if (returnLabel == "END-FIND-NO-OF-PAGES-IN-STMT") { return; }                                      //COBOL==> EXIT.
        #endregion END-FIND-NO-OF-PAGES-IN-STMT

        #region BEG-COPY-FILE
        L_BEG_COPY_FILE:;
            FD.TEMP_FILE.ReadLine();                                                                            //COBOL==> READ TEMP-FILE
            if (FD.TEMP_FILE.FileStatus == FileStatus.End_of_file)                                              //COBOL==> AT END
            {
                WS.EOF_FLAG.SetValue("Y");                                                                          //COBOL==> MOVE 'Y' TO EOF-FLAG
                goto L_END_COPY_FILE;                                                                               //COBOL==> GO TO END-COPY-FILE.
            }
            WS.WS_WORK_AREA.SetValue(FD.TEMP_REC_DATA);                                                         //COBOL==> MOVE TEMP-REC-DATA TO WS-WORK-AREA.
            if (LS.CHAR_2_0014.IsEqualTo("AR"))                                                                 //COBOL==> IF CHAR-2-0014 = 'AR'
            {
                if (WS.WS_WORK_REC.IsEqualTo("PGBRK"))                                                              //COBOL==> IF WS-WORK-REC = 'PGBRK'
                {
                    WS.PAGE_COUNT.Add(1);                                                                               //COBOL==> ADD 1 TO PAGE-COUNT
                    if (WS.PAGE_COUNT.IsEqualTo(4))                                                                     //COBOL==> IF PAGE-COUNT = 4
                    {
                        WS.PAGE_COUNT.SetValue(1);                                                                          //COBOL==> MOVE 1 TO PAGE-COUNT
                    }                                                                                                   //COBOL==> END-IF
                    FD.PERM_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO PERM-REC
                    if (WS.PAGE_COUNT.IsEqualTo(1))                                                                     //COBOL==> IF PAGE-COUNT = 1
                    {
                        if (WS.IS_PERM_FILE_EMPTY.IsEqualTo("Y"))                                                           //COBOL==> IF IS-PERM-FILE-EMPTY = 'Y'
                        {
                            FD.PERM_FILE.WriteLine(FD.PERM_REC.AsBytes);                                                        //COBOL==> WRITE PERM-REC
                            WS.LINE_COUNT.SetValue(1);                                                                          //COBOL==> MOVE 1 TO LINE-COUNT
                            WS.IS_PERM_FILE_EMPTY.SetValue("N");                                                                //COBOL==> MOVE 'N' TO IS-PERM-FILE-EMPTY
                            goto L_BEG_COPY_FILE;                                                                               //COBOL==> GO TO BEG-COPY-FILE
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    FD.PERM_FILE.WriteLinePrinter(FD.PERM_REC.AsString(), PrinterControl.PAGEBREAK, 0, 1);                 //COBOL==> WRITE PERM-REC AFTER ADVANCING PAGE
                    WS.LINE_COUNT.SetValue(1);                                                                          //COBOL==> MOVE 1 TO LINE-COUNT
                    goto L_BEG_COPY_FILE;                                                                               //COBOL==> GO TO BEG-COPY-FILE
                }                                                                                                   //COBOL==> END-IF
                WS.WS_REC.SetValue(WS.WS_WORK_REC);                                                                 //COBOL==> MOVE WS-WORK-REC TO WS-REC
                                                                                                                    //COMMENT:        MOVE WS-REC-DATA TO PERM-REC
                                                                                                                    //COMMENT:        ADDED TO STOP TWO CHARACTERS FROM DISAPPEARING
                WS.WS_FORMAT.SetValue(WS.WS_REC);                                                                   //COBOL==> MOVE WS-REC TO WS-FORMAT
                FD.PERM_REC.SetValue(WS.WS_FORMAT_DATA);                                                            //COBOL==> MOVE WS-FORMAT-DATA TO PERM-REC
                FD.PERM_FILE.WriteLine(FD.PERM_REC.AsBytes);                                                        //COBOL==> WRITE PERM-REC
                WS.LINE_COUNT.Add(1);                                                                               //COBOL==> ADD 1 TO LINE-COUNT
                                                                                                                    //COMMENT:        IF PAGE-COUNT = 1
                                                                                                                    //COMMENT:           PERFORM WRITE-STUFFING-MC-MARKS
                                                                                                                    //COMMENT:        END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                //COMMENT:        MOVE TEMP-REC-DATA TO WS-WORK-AREA
                //COMMENT:        WRITE PERM-REC FROM WS-WORK-REC
                FD.PERM_REC.SetValue(FD.TEMP_REC_DATA);                                                             //COBOL==> MOVE TEMP-REC-DATA TO PERM-REC
                FD.PERM_FILE.WriteLine(FD.PERM_REC.AsBytes);                                                        //COBOL==> WRITE PERM-REC
                FD.PERM_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO PERM-REC
            }                                                                                                   //COBOL==> END-IF.
            goto L_BEG_COPY_FILE;                                                                               //COBOL==> GO TO BEG-COPY-FILE.
        #endregion BEG-COPY-FILE

        #region END-COPY-FILE
        L_END_COPY_FILE:;
            if (returnLabel == "END-COPY-FILE") { return; }                                                     //COBOL==> EXIT.
        #endregion END-COPY-FILE

        #region WRITE-OVERFLOW-MESSAGES
        L_WRITE_OVERFLOW_MESSAGES:;
            WS.WS_REC_DATA.SetValue(WS.WS_OVERFLOW_MSG_LINE1);                                                  //COBOL==> MOVE WS-OVERFLOW-MSG-LINE1 TO WS-REC-DATA
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
            WS.WS_REC_DATA.SetValue(WS.WS_OVERFLOW_MSG_LINE2);                                                  //COBOL==> MOVE WS-OVERFLOW-MSG-LINE2 TO WS-REC-DATA
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC.
            if (returnLabel == "WRITE-OVERFLOW-MESSAGES") { return; }  //Check for pass through to next method
        #endregion WRITE-OVERFLOW-MESSAGES

        #region WRITE-AR-STMT-OVERFLOW-MSG
        L_WRITE_AR_STMT_OVERFLOW_MSG:;
            WS.WS_REC_DATA.SetValue(WS.WS_AR_OVERFLOW_MSG);                                                     //COBOL==> MOVE WS-AR-OVERFLOW-MSG TO WS-REC-DATA
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC.
            if (returnLabel == "WRITE-AR-STMT-OVERFLOW-MSG") { return; }  //Check for pass through to next method
        #endregion WRITE-AR-STMT-OVERFLOW-MSG

        #region WRITE-FDSO-COLL-MESSAGE
        L_WRITE_FDSO_COLL_MESSAGE:;
            WS.WS_REC_DATA.SetValueWithSpaces();                                                                //COBOL==> MOVE SPACES TO WS-REC-DATA.
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC.
            WS.WS_REC_DATA.SetValue(WS.WS_FDSO_MSG_LINE1);                                                      //COBOL==> MOVE WS-FDSO-MSG-LINE1 TO WS-REC-DATA.
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC.
            WS.WS_REC_DATA.SetValue(WS.WS_FDSO_MSG_LINE2);                                                      //COBOL==> MOVE WS-FDSO-MSG-LINE2 TO WS-REC-DATA.
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC.
            WS.WS_REC_DATA.SetValue(WS.WS_FDSO_MSG_LINE3);                                                      //COBOL==> MOVE WS-FDSO-MSG-LINE3 TO WS-REC-DATA.
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC.
            WS.WS_REC_DATA.SetValue(WS.WS_FDSO_MSG_LINE4);                                                      //COBOL==> MOVE WS-FDSO-MSG-LINE4 TO WS-REC-DATA.
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC.
            WS.WS_REC_DATA.SetValue(WS.WS_FDSO_MSG_LINE5);                                                      //COBOL==> MOVE WS-FDSO-MSG-LINE5 TO WS-REC-DATA.
            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC.
            ///COMMENT: *WRITE THE SERVICE PROVIDER AND AR'S ADDRESS**
            if (returnLabel == "WRITE-FDSO-COLL-MESSAGE") { return; }  //Check for pass through to next method
        #endregion WRITE-FDSO-COLL-MESSAGE

        #region WRITE-AR-STATEMENT-ADDRESS
        L_WRITE_AR_STATEMENT_ADDRESS:;
            if (LS.CHAR_2_0014.IsEqualTo("AR"))                                                                 //COBOL==> IF CHAR-2-0014 = 'AR'
            {
                //COMMENT:       MOVE SPACES TO TEMP-REC
                //COMMENT:       WRITE TEMP-REC AFTER ADVANCING PAGE
                WS.ADVANCE_COUNTER.SetValue(28);                                                                    //COBOL==> MOVE 28 TO ADVANCE-COUNTER
                if (WS.PAGE_COUNT.IsGreaterThanOrEqualTo(4))                                                        //COBOL==> IF PAGE-COUNT >= 4
                {
                    WS.PAGE_COUNT.SetValueWithZeroes();                                                                 //COBOL==> MOVE 0 TO PAGE-COUNT
                    Perform("WRITE-AR-STMT-OVERFLOW-MSG", "WRITE-AR-STMT-OVERFLOW-MSG"); if (Control.ExitProgram) { return; }  //COBOL==> PERFORM WRITE-AR-STMT-OVERFLOW-MSG
                }                                                                                                   //COBOL==> END-IF
                                                                                                                    //COMMENT: ---- THE ADDRESS WILL BE WRITTEN ONLY ON THE ----*
                                                                                                                    //COMMENT:      FIRST PAGE. IF OVERFLOW THEN 5TH,9TH,ETC
                if ((LS.FLAG_0046.IsEqualTo("Y"))
             || (WS.FIRST_TIME_FLAG.IsEqualTo("Y")))           //COBOL==> IF FLAG-0046 = 'Y' OR FIRST-TIME-FLAG = 'Y'
                {
                    FD.TEMP_REC_DATA.SetValue(" PGBRK");                                                                //COBOL==> MOVE ' PGBRK' TO TEMP-REC-DATA
                    FD.TEMP_FILE.WriteLinePrinter(FD.TEMP_REC.AsString(), PrinterControl.LINEBREAK, 0, 1);                 //COBOL==> WRITE TEMP-REC AFTER ADVANCING 1
                    WS.LINE_COUNT.Add(1);                                                                               //COBOL==> ADD 1 TO LINE-COUNT
                    LS.FLAG_0046.SetValue("N");                                                                         //COBOL==> MOVE 'N' TO FLAG-0046
                    FD.TEMP_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO TEMP-REC
                    FD.TEMP_FILE.WriteLinePrinter(FD.TEMP_REC.AsString(), PrinterControl.LINEBREAK, 0, 4);                 //COBOL==> WRITE TEMP-REC AFTER ADVANCING 4 LINES
                    WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 4m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 4
                    WS.WS_REC_CONTROL.SetValueWithSpaces();                                                             //COBOL==> MOVE SPACES TO WS-REC-CONTROL
                    WS.WS_REC_TYPE.SetValue("2");                                                                       //COBOL==> MOVE '2' TO WS-REC-TYPE
                                                                                                                        //COMMENT: IF THIS IS LINE 4,7 OR 8 WRITE OUT TIC MARKS *********
                                                                                                                        //COMMENT:         MOVE 4 TO  LINE-COUNT
                                                                                                                        //COMMENT:         PERFORM WRITE-STUFFING-MC-MARKS
                                                                                                                        //COMMENT:         MOVE SPACES TO TEMP-REC
                                                                                                                        //COMMENT:         WRITE TEMP-REC  AFTER ADVANCING 3 LINES
                                                                                                                        //COMMENT:         MOVE 7 TO  LINE-COUNT
                                                                                                                        //COMMENT:         PERFORM WRITE-STUFFING-MC-MARKS
                                                                                                                        //COMMENT:         MOVE SPACES TO TEMP-REC
                                                                                                                        //COMMENT:         WRITE TEMP-REC  AFTER ADVANCING 1 LINES
                                                                                                                        //COMMENT:         MOVE 8 TO  LINE-COUNT
                                                                                                                        //COMMENT:         PERFORM WRITE-STUFFING-MC-MARKS
                    FD.TEMP_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO TEMP-REC
                    FD.TEMP_FILE.WriteLinePrinter(FD.TEMP_REC.AsString(), PrinterControl.LINEBREAK, 0, 1);                 //COBOL==> WRITE TEMP-REC AFTER ADVANCING 1 LINES
                                                                                                                           //COMMENT:      -- WRITING THE FROM-ADDRESS --
                    WS.AR_ADDRESS_LINE.SetValue("SRS/CHILD SUPPORT ENFORCEMENT UNIT");                                  //COBOL==> MOVE 'SRS/CHILD SUPPORT ENFORCEMENT UNIT' TO AR-ADDRESS-LINE
                    WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                    FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                    FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                    WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                    if (LS.STREET_1_0035.IsEqualTo(" "))                                                                //COBOL==> IF STREET-1-0035 = ' '
                    {
                        //Continue                                                                                          //COBOL==> CONTINUE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.AR_ADDRESS_LINE.SetValue(LS.STREET_1_0035);                                                      //COBOL==> MOVE STREET-1-0035 TO AR-ADDRESS-LINE
                        WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                        FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                    }                                                                                                   //COBOL==> END-IF
                    if (LS.STREET_2_0035.IsEqualTo(" "))                                                                //COBOL==> IF STREET-2-0035 = ' '
                    {
                        //Continue                                                                                          //COBOL==> CONTINUE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.AR_ADDRESS_LINE.SetValue(LS.STREET_2_0035);                                                      //COBOL==> MOVE STREET-2-0035 TO AR-ADDRESS-LINE
                        WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                        FD.TEMP_REC.SetValue(WS.WS_REC);                                                                    //COBOL==> MOVE WS-REC TO TEMP-REC
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                    }                                                                                                   //COBOL==> END-IF
                    WS.AR_ADDRESS.ResetToInitialValue();                                                                //COBOL==> INITIALIZE AR-ADDRESS
                    WS.AR_D_CITY.SetValue(LS.CITY_0035);                                                                //COBOL==> MOVE CITY-0035 TO AR-D-CITY
                    WS.AR_D_STATE.SetValue(LS.STATE_PROVINCE_0035);                                                     //COBOL==> MOVE STATE-PROVINCE-0035 TO AR-D-STATE
                    WS.AR_D_ZIP_5.SetValue(LS.ZIP_0035);                                                                //COBOL==> MOVE ZIP-0035 TO AR-D-ZIP-5
                    WS.AR_D_ZIP_4.SetValue(LS.ZIP4_0035);                                                               //COBOL==> MOVE ZIP4-0035 TO AR-D-ZIP-4
                    if (WS.AR_ADDRESS.IsEqualTo(" "))                                                                   //COBOL==> IF AR-ADDRESS = ' '
                    {
                        //Continue                                                                                          //COBOL==> CONTINUE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                        FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                    }                                                                                                   //COBOL==> END-IF
                                                                                                                        //COMMENT:  PUT IN THE SERVICE PROVIDERS TELEPHONE NUMBER
                    WS.SP_TELE_AREA_CODE.SetValue(LS.WORK_PHONE_AREA_CODE_0042);                                        //COBOL==> MOVE WORK-PHONE-AREA-CODE-0042 TO SP-TELE-AREA-CODE
                    WS.WS_PHONE_NUMBER.SetValue(LS.WORK_PHONE_NUMBER_0042);                                             //COBOL==> MOVE WORK-PHONE-NUMBER-0042 TO WS-PHONE-NUMBER
                    WS.SP_TELE_THREE_DIGIT.SetValue(WS.PHONE_3);                                                        //COBOL==> MOVE PHONE-3 TO SP-TELE-THREE-DIGIT
                    WS.SP_TELE_FOUR_DIGIT.SetValue(WS.PHONE_4);                                                         //COBOL==> MOVE PHONE-4 TO SP-TELE-FOUR-DIGIT
                    WS.SP_TELE_EXTENSION.SetValue(LS.WORK_PHONE_EXTENSION_0042);                                        //COBOL==> MOVE WORK-PHONE-EXTENSION-0042 TO SP-TELE-EXTENSION
                    WS.WS_REC_DATA.SetValue(WS.SP_TELE);                                                                //COBOL==> MOVE SP-TELE TO WS-REC-DATA
                    FD.TEMP_REC.SetValue(WS.WS_REC);                                                                    //COBOL==> MOVE WS-REC TO TEMP-REC
                    FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                    WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                    Perform("WRITE-STATEMENT-DATE", "WRITE-STATEMENT-DATE"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM WRITE-STATEMENT-DATE
                                                                                                                          //COMMENT: *END OF SERVICE PROVIDER ADDRESS************************
                                                                                                                          //COMMENT:      -- WRITING THE TO-ADDRESS --
                                                                                                                          //COMMENT:        *****************COMMENTED OUT NEXT THREE LINES
                                                                                                                          //COMMENT:        MOVE SPACES TO TEMP-REC-DATA
                                                                                                                          //COMMENT:        WRITE TEMP-REC
                                                                                                                          //COMMENT:        COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                                                                                                                          //COMMENT:        INITIALIZE AR-ADDRESS
                                                                                                                          //COMMENT:        MOVE AR-ADDRESS TO WS-REC-DATA
                                                                                                                          //COMMENT:        MOVE WS-REC TO TEMP-REC-DATA
                                                                                                                          //COMMENT:        WRITE TEMP-REC
                                                                                                                          //COMMENT:        COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                    if (LS.FORMATTED_NAME_0003.IsEqualTo(" "))                                                          //COBOL==> IF FORMATTED-NAME-0003 = ' '
                    {
                        WS.AR_ADDRESS_LINE.SetValue(LS.FORMATTED_NAME_0002);                                                //COBOL==> MOVE FORMATTED-NAME-0002 TO AR-ADDRESS-LINE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.AR_ADDRESS_LINE.SetValue(LS.FORMATTED_NAME_0003);                                                //COBOL==> MOVE FORMATTED-NAME-0003 TO AR-ADDRESS-LINE
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                    FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                    FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                    WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                    WS.WS_REC_CONTROL.SetValueWithSpaces();                                                             //COBOL==> MOVE SPACES TO WS-REC-CONTROL
                    WS.WS_REC_TYPE.SetValue("3");                                                                       //COBOL==> MOVE '3' TO WS-REC-TYPE
                                                                                                                        //COMMENT:          DISPLAY 'NAME     = ' AR-ADDRESS-LINE
                                                                                                                        //COMMENT:          DISPLAY 'LOCATION = ' LOCATION-TYPE-0004
                                                                                                                        //COMMENT:          DISPLAY 'COUNTER  = ' ADVANCE-COUNTER
                    WS.AR_ADDRESS.ResetToInitialValue();                                                                //COBOL==> INITIALIZE AR-ADDRESS
                    if (LS.LOCATION_TYPE_0004.IsEqualTo("D"))                                                           //COBOL==> IF LOCATION-TYPE-0004 = 'D'
                    {
                        if (LS.STREET_1_0004.IsEqualTo(" "))                                                                //COBOL==> IF STREET-1-0004 = ' '
                        {
                            //Continue                                                                                          //COBOL==> CONTINUE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.AR_ADDRESS_LINE.SetValue(LS.STREET_1_0004);                                                      //COBOL==> MOVE STREET-1-0004 TO AR-ADDRESS-LINE
                            WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                            WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                                                                                                                                //COMMENT:               PERFORM WRITE-STATEMENT-DATE
                        }                                                                                                   //COBOL==> END-IF
                        if (LS.STREET_2_0004.IsEqualTo(" "))                                                                //COBOL==> IF STREET-2-0004 = ' '
                        {
                            //Continue                                                                                          //COBOL==> CONTINUE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.AR_ADDRESS_LINE.SetValue(LS.STREET_2_0004);                                                      //COBOL==> MOVE STREET-2-0004 TO AR-ADDRESS-LINE
                            WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                            WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                        }                                                                                                   //COBOL==> END-IF
                        WS.AR_ADDRESS.ResetToInitialValue();                                                                //COBOL==> INITIALIZE AR-ADDRESS
                        WS.AR_D_CITY.SetValue(LS.CITY_0004);                                                                //COBOL==> MOVE CITY-0004 TO AR-D-CITY
                        WS.AR_D_STATE.SetValue(LS.STATE_0004);                                                              //COBOL==> MOVE STATE-0004 TO AR-D-STATE
                        WS.AR_D_ZIP_5.SetValue(LS.ZIP_CODE_0004);                                                           //COBOL==> MOVE ZIP-CODE-0004 TO AR-D-ZIP-5
                        WS.AR_D_ZIP_4.SetValue(LS.ZIP4_0004);                                                               //COBOL==> MOVE ZIP4-0004 TO AR-D-ZIP-4
                        WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                        FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if (LS.STREET_1_0004.IsEqualTo(" "))                                                                //COBOL==> IF STREET-1-0004 = ' '
                        {
                            //Continue                                                                                          //COBOL==> CONTINUE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.AR_ADDRESS_LINE.SetValue(LS.STREET_1_0004);                                                      //COBOL==> MOVE STREET-1-0004 TO AR-ADDRESS-LINE
                            WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                            WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                        }                                                                                                   //COBOL==> END-IF
                        if (LS.STREET_2_0004.IsEqualTo(" "))                                                                //COBOL==> IF STREET-2-0004 = ' '
                        {
                            //Continue                                                                                          //COBOL==> CONTINUE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.AR_ADDRESS_LINE.SetValue(LS.STREET_2_0004);                                                      //COBOL==> MOVE STREET-2-0004 TO AR-ADDRESS-LINE
                            WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                            WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                        }                                                                                                   //COBOL==> END-IF
                        if (LS.STREET_3_0004.IsEqualTo(" "))                                                                //COBOL==> IF STREET-3-0004 = ' '
                        {
                            //Continue                                                                                          //COBOL==> CONTINUE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.AR_ADDRESS_LINE.SetValue(LS.STREET_3_0004);                                                      //COBOL==> MOVE STREET-3-0004 TO AR-ADDRESS-LINE
                            WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                            WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                        }                                                                                                   //COBOL==> END-IF
                        if (LS.STREET_4_0004.IsEqualTo(" "))                                                                //COBOL==> IF STREET-4-0004 = ' '
                        {
                            //Continue                                                                                          //COBOL==> CONTINUE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.AR_ADDRESS_LINE.SetValue(LS.STREET_4_0004);                                                      //COBOL==> MOVE STREET-4-0004 TO AR-ADDRESS-LINE
                            WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                            FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                            FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                            WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                        }                                                                                                   //COBOL==> END-IF
                        WS.AR_F_CITY.SetValue(LS.CITY_0004);                                                                //COBOL==> MOVE CITY-0004 TO AR-F-CITY
                        WS.AR_F_PROVINCE.SetValue(LS.PROVINCE_0004);                                                        //COBOL==> MOVE PROVINCE-0004 TO AR-F-PROVINCE
                        WS.AR_F_POSTAL_CODE.SetValue(LS.POSTAL_CODE_0004);                                                  //COBOL==> MOVE POSTAL-CODE-0004 TO AR-F-POSTAL-CODE
                        WS.AR_F_COUNTRY.SetValue(LS.COUNTRY_0004);                                                          //COBOL==> MOVE COUNTRY-0004 TO AR-F-COUNTRY
                        WS.WS_REC_DATA.SetValue(WS.AR_ADDRESS);                                                             //COBOL==> MOVE AR-ADDRESS TO WS-REC-DATA
                        FD.TEMP_REC_DATA.SetValue(WS.WS_REC);                                                               //COBOL==> MOVE WS-REC TO TEMP-REC-DATA
                        FD.TEMP_FILE.WriteLine(FD.TEMP_REC.AsBytes);                                                        //COBOL==> WRITE TEMP-REC
                        WS.ADVANCE_COUNTER.SetComputeValue(WS.ADVANCE_COUNTER.AsDecimal() - 1m);                            //COBOL==> COMPUTE ADVANCE-COUNTER = ADVANCE-COUNTER - 1
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                                                                                                                    //COMMENT:  -- POSITIONING TO WRITE AFTER THE OVERLAY TEXT --
                FD.TEMP_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO TEMP-REC
                                                                                                                    //COMMENT:      DISPLAY 'SKIP # OF LINES BEFORE WRITING:' ADVANCE-COUNTER
                FD.TEMP_FILE.WriteLinePrinter(FD.TEMP_REC.AsString(), PrinterControl.LINEBREAK, 0, WS.ADVANCE_COUNTER.AsInt());  //COBOL==> WRITE TEMP-REC AFTER ADVANCING ADVANCE-COUNTER LINES.
            }
            if (WS.ADVANCE_COUNTER.IsGreaterThan(16))                                                           //COBOL==> IF ADVANCE-COUNTER > 16
            {
                FD.TEMP_FILE.WriteLinePrinter(FD.TEMP_REC.AsString(), PrinterControl.LINEBREAK, 0, 1);                 //COBOL==> WRITE TEMP-REC AFTER ADVANCING 1 LINES.
            }
            LS.COUNT_0023.SetValue(+20);                                                                        //COBOL==> MOVE +20 TO COUNT-0023.
            if (returnLabel == "WRITE-AR-STATEMENT-ADDRESS") { return; }  //Check for pass through to next method
        #endregion WRITE-AR-STATEMENT-ADDRESS

        #region WRITE-STATEMENT-DATE
        L_WRITE_STATEMENT_DATE:;
            WS.WS_MVS_FORMATTED_DATE_N.SetValue(LS.DATE_0015);                                                  //COBOL==> MOVE DATE-0015 TO WS-MVS-FORMATTED-DATE-N
            if (WS.WS_MVS_FORMATTED_DATE_N.IsLessThanOrEqualTo(0))                                              //COBOL==> IF WS-MVS-FORMATTED-DATE-N NOT > 0
            {
                WS.WS_TEMP_OUTPUT_DATE.SetValueWithSpaces();                                                        //COBOL==> MOVE SPACES TO WS-TEMP-OUTPUT-DATE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_TEMP_DATE_MM.SetValue(WS.WS_MVS_FORMATTED_DATE_MM);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-MM TO WS-TEMP-DATE-MM
                WS.WS_TEMP_DATE_DD.SetValue(WS.WS_MVS_FORMATTED_DATE_DD);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-DD TO WS-TEMP-DATE-DD
                WS.WS_TEMP_DATE_CC.SetValue(WS.WS_MVS_FORMATTED_DATE_CC);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-CC TO WS-TEMP-DATE-CC
                WS.WS_TEMP_DATE_YY.SetValue(WS.WS_MVS_FORMATTED_DATE_YY);                                           //COBOL==> MOVE WS-MVS-FORMATTED-DATE-YY TO WS-TEMP-DATE-YY
            }                                                                                                   //COBOL==> END-IF
            WS.WS_STATEMENT_DATE.SetValue(WS.WS_TEMP_OUTPUT_DATE);                                              //COBOL==> MOVE WS-TEMP-OUTPUT-DATE TO WS-STATEMENT-DATE
            FD.TEMP_REC_DATA.SetValue(WS.WS_STMT_DATE_LINE);                                                    //COBOL==> MOVE WS-STMT-DATE-LINE TO TEMP-REC-DATA
            FD.TEMP_FILE.WriteLinePrinter(FD.TEMP_REC.AsString(), PrinterControl.LINEBREAK, 0, 1);                 //COBOL==> WRITE TEMP-REC AFTER ADVANCING 1 LINES.
            if (returnLabel == "WRITE-STATEMENT-DATE") { return; }  //Check for pass through to next method
        #endregion WRITE-STATEMENT-DATE

        #region WRITE-STUFFING-MC-MARKS
        L_WRITE_STUFFING_MC_MARKS:;
            //COMMENT: --------***--------***---------***---------***---------***-----*
            //COMMENT: --- THE STUFFING MACHINE MARKS WILL BE PUT IN THE 4TH,7TH AND-*
            //COMMENT: --- 8TH LINE OF THE FIRST PAGE --*
            //COMMENT: --------***--------***---------***---------***---------***-----*
            WS.STUFFING_MC_LINE.ResetToInitialValue();                                                          //COBOL==> INITIALIZE STUFFING-MC-LINE
            if (WS.LINE_COUNT.IsLessThanOrEqualTo(8))                                                           //COBOL==> IF LINE-COUNT <= 8
            {
                if (((WS.LINE_COUNT.IsEqualTo(4))
             || (WS.LINE_COUNT.IsEqualTo(7)))
             || (WS.LINE_COUNT.IsEqualTo(8)))  //COBOL==> IF LINE-COUNT = 4 OR LINE-COUNT = 7 OR LINE-COUNT = 8
                {
                    WS.DASHES.SetValue("___");                                                                          //COBOL==> MOVE '___' TO DASHES
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.DASHES.SetValueWithSpaces();                                                                     //COBOL==> MOVE SPACES TO DASHES
                }                                                                                                   //COBOL==> END-IF
                FD.PERM_REC.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO PERM-REC
                FD.PERM_FILE.WriteLinePrinter(WS.STUFFING_MC_LINE.AsString(), PrinterControl.LINEBREAK, 0, 0);         //COBOL==> WRITE PERM-REC FROM STUFFING-MC-LINE AFTER ADVANCING 0
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "WRITE-STUFFING-MC-MARKS") { return; }  //Check for pass through to next method
        #endregion WRITE-STUFFING-MC-MARKS

        #region PARA-0043005844-EXIT
        L_PARA_0043005844_EXIT:;
            if (returnLabel == "PARA-0043005844-EXIT") { return; }                                              //COBOL==> EXIT.
        #endregion PARA-0043005844-EXIT

        #region PARA-0043005844-INIT
        L_PARA_0043005844_INIT:;
            WS.IMPORT_DETLINE_0001PS.SetValueWithZeroes();                                                      //COBOL==> MOVE ZERO TO IMPORT-DETLINE-0001PS
            WS.IMPORT_GROUP_0002PS.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO IMPORT-GROUP-0002PS
            LS.EXPORT_PASS_AREA1_0043EV.ResetToInitialValue();                                                  //COBOL==> INITIALIZE EXPORT-PASS-AREA1-0043EV
            LS.EXPORT_PASS_AREA2_0044EV.ResetToInitialValue();                                                  //COBOL==> INITIALIZE EXPORT-PASS-AREA2-0044EV
            LS.EXPORT_LINES_WRITTEN_IN_0045EV.ResetToInitialValue();                                            //COBOL==> INITIALIZE EXPORT-LINES-WRITTEN-IN-0045EV
            LS.EXPORT_OVERFLOW_INDICAT_0046EV.ResetToInitialValue();                                            //COBOL==> INITIALIZE EXPORT-OVERFLOW-INDICAT-0046EV
            LS.EXPORT_CURRENT_PAGE_NUM_0047EV.ResetToInitialValue();                                            //COBOL==> INITIALIZE EXPORT-CURRENT-PAGE-NUM-0047EV .
            if (returnLabel == "PARA-0043005844-INIT") { return; }  //Check for pass through to next method
        #endregion PARA-0043005844-INIT

        #region PARA-0043005844-INIT-EXIT
        L_PARA_0043005844_INIT_EXIT:;
            if (returnLabel == "PARA-0043005844-INIT-EXIT") { return; }                                         //COBOL==> EXIT.
            #endregion PARA-0043005844-INIT-EXIT
        }
        #endregion
    }
    #endregion
}
