#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:52:20 PM
   **        *   FROM COBOL PGM   :  SWEXIU50
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   ***************************************************************
                       SOURCE CODE GENERATED BY
                             CA GEN 8.5
      COPYRIGHT (C) 2018 CA TECHNOLOGIES. ALL RIGHTS RESERVED.
       NAME: EAB_MAINTAIN_KEES_SYNC_CLIENT    DATE: 2018/03/08
       TARGET OS:   MVS                       TIME: 16:02:07
       TARGET DBMS: DB2                       USER: SWCCRXS
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS NOT SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
       DYNAMIC LINK (Z/OS) PROPERTY SET TO "Compatibility"
   ***************************************************************
                                                                   *
   ** MAINTENANCE **************************************************
                     CHANGE                                        *
                     CONTRL                                        *
    DATE     AUTHOR  NUMBER  DESCRIPTION                           *
    -------  ------  ------  ------------------------------------- *
    03-09-18 RAJ     KEES P3 INITIAL CODING.                       *
                                                                   *
    12-08-20 JAGAN   CQ#65700                                      *
   *****************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Control.CICS;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXIU50_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXIU50_ws_WorkingStorage";
            internal const string ADIM1 = "ADIM1";
            internal const string ADIM2 = "ADIM2";
            internal const string ADIM3 = "ADIM3";
            internal const string GROUP_IMPORT_INPUT_IDS_0001FL = "GROUP_IMPORT_INPUT_IDS_0001FL";
            internal const string GROUP_IMPORT_INPUT_IDS_0001PS = "GROUP_IMPORT_INPUT_IDS_0001PS";
            internal const string GROUP_IMPORT_INPUT_IDS_0001RF = "GROUP_IMPORT_INPUT_IDS_0001RF";
            internal const string GROUP_IMPORT_INPUT_IDS_0001MM = "GROUP_IMPORT_INPUT_IDS_0001MM";
            internal const string GROUP_IMPORT_LIST_0002FL = "GROUP_IMPORT_LIST_0002FL";
            internal const string GROUP_IMPORT_LIST_0002PS = "GROUP_IMPORT_LIST_0002PS";
            internal const string GROUP_IMPORT_LIST_0002RF = "GROUP_IMPORT_LIST_0002RF";
            internal const string GROUP_IMPORT_LIST_0002MM = "GROUP_IMPORT_LIST_0002MM";
            internal const string GROUP_EXPORT_LIST_0003FL = "GROUP_EXPORT_LIST_0003FL";
            internal const string GROUP_EXPORT_LIST_0003PS = "GROUP_EXPORT_LIST_0003PS";
            internal const string GROUP_EXPORT_LIST_0003RF = "GROUP_EXPORT_LIST_0003RF";
            internal const string GROUP_EXPORT_LIST_0003MM = "GROUP_EXPORT_LIST_0003MM";
            internal const string DCLKSD_CLIENT = "DCLKSD_CLIENT";
            internal const string CLIENT_SSN = "CLIENT_SSN";
            internal const string CLIENT_PREVIOUS_SSN = "CLIENT_PREVIOUS_SSN";
            internal const string CLIENT_PHONETIC_DATA = "CLIENT_PHONETIC_DATA";
            internal const string CLIENT_DT_OF_LAST_UPDATE = "CLIENT_DT_OF_LAST_UPDATE";
            internal const string CLIENT_DATE_OF_BIRTH = "CLIENT_DATE_OF_BIRTH";
            internal const string CLIENT_GENDER = "CLIENT_GENDER";
            internal const string CLIENT_VERIFIED_SSN_FLAG = "CLIENT_VERIFIED_SSN_FLAG";
            internal const string CLIENT_CLIENT_NAME = "CLIENT_CLIENT_NAME";
            internal const string CLIENT_CREATED_BY = "CLIENT_CREATED_BY";
            internal const string CLIENT_CREATED_TIMESTAMP = "CLIENT_CREATED_TIMESTAMP";
            internal const string CLIENT_LAST_MODIFIED_BY = "CLIENT_LAST_MODIFIED_BY";
            internal const string CLIENT_LAST_MODIFIED_TMST = "CLIENT_LAST_MODIFIED_TMST";
            internal const string CLIENT_FK_CLB_CLIENT_NO = "CLIENT_FK_CLB_CLIENT_NO";
            internal const string CLIENT_NAME_TYPE = "CLIENT_NAME_TYPE";
            internal const string DCLKSD_CLIENT_BASIC = "DCLKSD_CLIENT_BASIC";
            internal const string CLIENTB_CLIENT_NUMBER = "CLIENTB_CLIENT_NUMBER";
            internal const string CLIENTB_CLIENT_GIVEN_NAME = "CLIENTB_CLIENT_GIVEN_NAME";
            internal const string CLIENTB_CLIENT_INITIALS = "CLIENTB_CLIENT_INITIALS";
            internal const string CLIENTB_CLIENT_SURNAME = "CLIENTB_CLIENT_SURNAME";
            internal const string CLIENTB_CIS_REPL_IND = "CLIENTB_CIS_REPL_IND";
            internal const string CLIENTB_WORK_PHONE = "CLIENTB_WORK_PHONE";
            internal const string CLIENTB_SSN = "CLIENTB_SSN";
            internal const string CLIENTB_GENDER = "CLIENTB_GENDER";
            internal const string CLIENTB_PARENT_RGHTS_SEV = "CLIENTB_PARENT_RGHTS_SEV";
            internal const string CLIENTB_PRNT_RGHTS_SEV_DT = "CLIENTB_PRNT_RGHTS_SEV_DT";
            internal const string CLIENTB_LEGAL_STATUS = "CLIENTB_LEGAL_STATUS";
            internal const string CLIENTB_INSURANCE_CODE = "CLIENTB_INSURANCE_CODE";
            internal const string CLIENTB_INITIAL_CUSTODY_DT = "CLIENTB_INITIAL_CUSTODY_DT";
            internal const string CLIENTB_HOME_PHONE = "CLIENTB_HOME_PHONE";
            internal const string CLIENTB_DATE_OF_BIRTH = "CLIENTB_DATE_OF_BIRTH";
            internal const string CLIENTB_CURR_PLACEMNT_DT = "CLIENTB_CURR_PLACEMNT_DT";
            internal const string CLIENTB_CURRENT_PLACEMENT = "CLIENTB_CURRENT_PLACEMENT";
            internal const string CLIENTB_CSEA_G_CAUSE_CODE = "CLIENTB_CSEA_G_CAUSE_CODE";
            internal const string CLIENTB_CSEA_G_CAUSE_CL_DT = "CLIENTB_CSEA_G_CAUSE_CL_DT";
            internal const string CLIENTB_CSEA_COOP_CODE = "CLIENTB_CSEA_COOP_CODE";
            internal const string CLIENTB_COUNTY_CRT_COMMIT = "CLIENTB_COUNTY_CRT_COMMIT";
            internal const string CLIENTB_MONTHS_ASST_AF = "CLIENTB_MONTHS_ASST_AF";
            internal const string CLIENTB_MONTHS_ASST_GA = "CLIENTB_MONTHS_ASST_GA";
            internal const string CLIENTB_MO_DEATH_DT = "CLIENTB_MO_DEATH_DT";
            internal const string CLIENTB_MO_PRT_DT = "CLIENTB_MO_PRT_DT";
            internal const string CLIENTB_FA_DEATH_DT = "CLIENTB_FA_DEATH_DT";
            internal const string CLIENTB_FA_PRT_DT = "CLIENTB_FA_PRT_DT";
            internal const string CLIENTB_MPI_ID = "CLIENTB_MPI_ID";
            internal const string CLIENTB_MED_COVERAGE_IND = "CLIENTB_MED_COVERAGE_IND";
            internal const string CLIENTB_INSURANCE_CARRIER = "CLIENTB_INSURANCE_CARRIER";
            internal const string CLIENTB_INSURANCE_POLCY_NO = "CLIENTB_INSURANCE_POLCY_NO";
            internal const string CLIENTB_SPOKEN_LANGUAGE = "CLIENTB_SPOKEN_LANGUAGE";
            internal const string CLIENTB_WRITTEN_LANGUAGE = "CLIENTB_WRITTEN_LANGUAGE";
            internal const string CLIENTB_STATE_OF_BIRTH = "CLIENTB_STATE_OF_BIRTH";
            internal const string CLIENTB_SCHOOL_DISTRICT = "CLIENTB_SCHOOL_DISTRICT";
            internal const string CLIENTB_ETHNIC_CLASS = "CLIENTB_ETHNIC_CLASS";
            internal const string CLIENTB_SUFFIX_NAME = "CLIENTB_SUFFIX_NAME";
            internal const string CLIENTB_EMPLOYER_NAME = "CLIENTB_EMPLOYER_NAME";
            internal const string CLIENTB_EARNED_INCOME_AMT = "CLIENTB_EARNED_INCOME_AMT";
            internal const string CLIENTB_INCOME_FREQUENCY = "CLIENTB_INCOME_FREQUENCY";
            internal const string CLIENTB_KEES_ABMS_ID = "CLIENTB_KEES_ABMS_ID";
            internal const string CLIENTB_EMAIL_ADDRESS = "CLIENTB_EMAIL_ADDRESS";
            internal const string CLIENTB_EMAIL_ADDRESS_LEN = "CLIENTB_EMAIL_ADDRESS_LEN";
            internal const string CLIENTB_EMAIL_ADDRESS_TEXT = "CLIENTB_EMAIL_ADDRESS_TEXT";
            internal const string CLIENTB_OCCUPATION = "CLIENTB_OCCUPATION";
            internal const string CLIENTB_OCCUPATION_LEN = "CLIENTB_OCCUPATION_LEN";
            internal const string CLIENTB_OCCUPATION_TEXT = "CLIENTB_OCCUPATION_TEXT";
            internal const string CLIENTB_CREATED_BY = "CLIENTB_CREATED_BY";
            internal const string CLIENTB_CREATED_TIMESTAMP = "CLIENTB_CREATED_TIMESTAMP";
            internal const string CLIENTB_LAST_MODIFIED_BY = "CLIENTB_LAST_MODIFIED_BY";
            internal const string CLIENTB_LAST_MODIFIED_TMST = "CLIENTB_LAST_MODIFIED_TMST";
            internal const string CLIENTB_SENSITIVE_FLAG = "CLIENTB_SENSITIVE_FLAG";
            internal const string CLIENTB_CIS_PREFERRED_ID = "CLIENTB_CIS_PREFERRED_ID";
            internal const string CLIENTB_NAME_TYPE = "CLIENTB_NAME_TYPE";
            internal const string DCLKSD_SYSTEM_PART = "DCLKSD_SYSTEM_PART";
            internal const string SYSPART_SYSTEM_CODE = "SYSPART_SYSTEM_CODE";
            internal const string SYSPART_PARTICIPATION_FLAG = "SYSPART_PARTICIPATION_FLAG";
            internal const string SYSPART_CREATED_TIMESTAMP = "SYSPART_CREATED_TIMESTAMP";
            internal const string SYSPART_CREATED_BY = "SYSPART_CREATED_BY";
            internal const string SYSPART_LAST_MODIFIED_BY = "SYSPART_LAST_MODIFIED_BY";
            internal const string SYSPART_LAST_MODIFIED_TMST = "SYSPART_LAST_MODIFIED_TMST";
            internal const string SYSPART_FK_CLI_CLIENT_NO = "SYSPART_FK_CLI_CLIENT_NO";
            internal const string SYSPART_FK_CLI_CLIENT_NAME = "SYSPART_FK_CLI_CLIENT_NAME";
            internal const string SYSPART_FK_CLI_SSN = "SYSPART_FK_CLI_SSN";
            internal const string WS_DB2_CONSTANT_AREAS = "WS_DB2_CONSTANT_AREAS";
            internal const string WS_SYS_CD_AE = "WS_SYS_CD_AE";
            internal const string WS_SYS_CD_CS = "WS_SYS_CD_CS";
            internal const string WS_SYS_CD_KP = "WS_SYS_CD_KP";
            internal const string WS_SYS_CD_KC = "WS_SYS_CD_KC";
            internal const string WS_SYS_CD_FA = "WS_SYS_CD_FA";
            internal const string WS_SYS_CD_KM = "WS_SYS_CD_KM";
            internal const string WS_YES_Y = "WS_YES_Y";
            internal const string WS_IDENT_0000000001 = "WS_IDENT_0000000001";
            internal const string WS_SYS_CD_CS_FOUND = "WS_SYS_CD_CS_FOUND";
            internal const string WS_SYS_CD_FA_FOUND = "WS_SYS_CD_FA_FOUND";
            internal const string WS_SYS_CD_KM_FOUND = "WS_SYS_CD_KM_FOUND";
            internal const string WS_DB2_WORK_AREAS = "WS_DB2_WORK_AREAS";
            internal const string DB2_COUNT = "DB2_COUNT";
            internal const string WS_PREF_ID_FLAG = "WS_PREF_ID_FLAG";
            internal const string WS_OLD_CLB_SSN = "WS_OLD_CLB_SSN";
            internal const string WS_IMP_CNT = "WS_IMP_CNT";
            internal const string WS_EXP_CNT = "WS_EXP_CNT";
            internal const string PART_WS_END_DATE = "PART_WS_END_DATE";
            internal const string PART_WS_START_DATE = "PART_WS_START_DATE";
            internal const string CLIENT_WS_DATE_OF_BIRTH = "CLIENT_WS_DATE_OF_BIRTH";
            internal const string WS_CLIENT_DATE_OF_BIRTH = "WS_CLIENT_DATE_OF_BIRTH";
            internal const string WS_CLIENT_DOB = "WS_CLIENT_DOB";
            internal const string WS_CLIENT_DOB_YYYY = "WS_CLIENT_DOB_YYYY";
            internal const string WS_CLIENT_DOB_MM = "WS_CLIENT_DOB_MM";
            internal const string WS_CLIENT_DOB_DD = "WS_CLIENT_DOB_DD";
            internal const string WS_FORMATTED_DOB = "WS_FORMATTED_DOB";
            internal const string WS_FORMATTED_DOB_YYYY = "WS_FORMATTED_DOB_YYYY";
            internal const string WS_FORMATTED_DOB_MM = "WS_FORMATTED_DOB_MM";
            internal const string WS_FORMATTED_DOB_DD = "WS_FORMATTED_DOB_DD";
            internal const string WS_SSN = "WS_SSN";
            internal const string WS_SSN_TXT = "WS_SSN_TXT";
            internal const string WS_SQLCODE = "WS_SQLCODE";
            internal const string WS_SQLCODE_TXT = "WS_SQLCODE_TXT";
            internal const string WS_FORMATTED_SSN = "WS_FORMATTED_SSN";
            internal const string WS_FORMATTED_THREE = "WS_FORMATTED_THREE";
            internal const string WS_FORMATTED_TWO = "WS_FORMATTED_TWO";
            internal const string WS_FORMATTED_FOUR = "WS_FORMATTED_FOUR";
            internal const string WS_CLIENT_NAME = "WS_CLIENT_NAME";
            internal const string WS_CLIENT_LAST_NAME = "WS_CLIENT_LAST_NAME";
            internal const string WS_CLIENT_FIRST_NAME = "WS_CLIENT_FIRST_NAME";
            internal const string WS_CLIENT_FIRST_NAME_1 = "WS_CLIENT_FIRST_NAME_1";
            internal const string WS_CLIENT_FIRST_NAME_11 = "WS_CLIENT_FIRST_NAME_11";
            internal const string WS_CLIENT_INITIAL = "WS_CLIENT_INITIAL";
            internal const string WS_DB2_SWITCHES = "WS_DB2_SWITCHES";
            internal const string WS_CLIENT_EOF_SW = "WS_CLIENT_EOF_SW";
            internal const string WS_CLIENT_EOF_NO = "WS_CLIENT_EOF_NO";
            internal const string WS_CLIENT_EOF_YES = "WS_CLIENT_EOF_YES";
            internal const string WS_CLIENTB_EOF_SW = "WS_CLIENTB_EOF_SW";
            internal const string WS_CLIENTB_EOF_NO = "WS_CLIENTB_EOF_NO";
            internal const string WS_CLIENTB_EOF_YES = "WS_CLIENTB_EOF_YES";
            internal const string WS_SYSPART_EOF_SW = "WS_SYSPART_EOF_SW";
            internal const string WS_SYSPART_EOF_NO = "WS_SYSPART_EOF_NO";
            internal const string WS_SYSPART_EOF_YES = "WS_SYSPART_EOF_YES";
            internal const string WS_DB2_SYSTEM_PART_TABLE = "WS_DB2_SYSTEM_PART_TABLE";
            internal const string WS_DB2_SYSTEM_PART = "WS_DB2_SYSTEM_PART";
            internal const string WS_DB2_SYSTEM_CODE = "WS_DB2_SYSTEM_CODE";
            internal const string WS_DB2_PARTICIPATION_FLAG = "WS_DB2_PARTICIPATION_FLAG";
            internal const string WS_DB2_CREATED_TIMESTAMP = "WS_DB2_CREATED_TIMESTAMP";
            internal const string WS_DB2_CREATED_BY = "WS_DB2_CREATED_BY";
            internal const string WS_DB2_LAST_MODIFIED_BY = "WS_DB2_LAST_MODIFIED_BY";
            internal const string WS_DB2_LAST_MODIFIED_TMST = "WS_DB2_LAST_MODIFIED_TMST";
            internal const string WS_DB2_FK_CLB_CLIENT_NO = "WS_DB2_FK_CLB_CLIENT_NO";
            internal const string WS_DB2_FK_CLI_CLIENT_NAME = "WS_DB2_FK_CLI_CLIENT_NAME";
            internal const string WS_DB2_FK_CLI_SSN = "WS_DB2_FK_CLI_SSN";
        }
        #endregion

        #region Direct-access element properties
        public IField ADIM1 { get { return GetElementByName<IField>(Names.ADIM1); } }
        public IField ADIM2 { get { return GetElementByName<IField>(Names.ADIM2); } }
        public IField ADIM3 { get { return GetElementByName<IField>(Names.ADIM3); } }
        public IField GROUP_IMPORT_INPUT_IDS_0001FL { get { return GetElementByName<IField>(Names.GROUP_IMPORT_INPUT_IDS_0001FL); } }
        public IField GROUP_IMPORT_INPUT_IDS_0001PS { get { return GetElementByName<IField>(Names.GROUP_IMPORT_INPUT_IDS_0001PS); } }
        public IField GROUP_IMPORT_INPUT_IDS_0001RF { get { return GetElementByName<IField>(Names.GROUP_IMPORT_INPUT_IDS_0001RF); } }
        public IField GROUP_IMPORT_INPUT_IDS_0001MM { get { return GetElementByName<IField>(Names.GROUP_IMPORT_INPUT_IDS_0001MM); } }
        public IField GROUP_IMPORT_LIST_0002FL { get { return GetElementByName<IField>(Names.GROUP_IMPORT_LIST_0002FL); } }
        public IField GROUP_IMPORT_LIST_0002PS { get { return GetElementByName<IField>(Names.GROUP_IMPORT_LIST_0002PS); } }
        public IField GROUP_IMPORT_LIST_0002RF { get { return GetElementByName<IField>(Names.GROUP_IMPORT_LIST_0002RF); } }
        public IField GROUP_IMPORT_LIST_0002MM { get { return GetElementByName<IField>(Names.GROUP_IMPORT_LIST_0002MM); } }
        public IField GROUP_EXPORT_LIST_0003FL { get { return GetElementByName<IField>(Names.GROUP_EXPORT_LIST_0003FL); } }
        public IField GROUP_EXPORT_LIST_0003PS { get { return GetElementByName<IField>(Names.GROUP_EXPORT_LIST_0003PS); } }
        public IField GROUP_EXPORT_LIST_0003RF { get { return GetElementByName<IField>(Names.GROUP_EXPORT_LIST_0003RF); } }
        public IField GROUP_EXPORT_LIST_0003MM { get { return GetElementByName<IField>(Names.GROUP_EXPORT_LIST_0003MM); } }
        public IGroup DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT); } }
        public IField CLIENT_SSN { get { return GetElementByName<IField>(Names.CLIENT_SSN); } }
        public IField CLIENT_PREVIOUS_SSN { get { return GetElementByName<IField>(Names.CLIENT_PREVIOUS_SSN); } }
        public IField CLIENT_PHONETIC_DATA { get { return GetElementByName<IField>(Names.CLIENT_PHONETIC_DATA); } }
        public IField CLIENT_DT_OF_LAST_UPDATE { get { return GetElementByName<IField>(Names.CLIENT_DT_OF_LAST_UPDATE); } }
        public IField CLIENT_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENT_DATE_OF_BIRTH); } }
        public IField CLIENT_GENDER { get { return GetElementByName<IField>(Names.CLIENT_GENDER); } }
        public IField CLIENT_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CLIENT_VERIFIED_SSN_FLAG); } }
        public IField CLIENT_CLIENT_NAME { get { return GetElementByName<IField>(Names.CLIENT_CLIENT_NAME); } }
        public IField CLIENT_CREATED_BY { get { return GetElementByName<IField>(Names.CLIENT_CREATED_BY); } }
        public IField CLIENT_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CLIENT_CREATED_TIMESTAMP); } }
        public IField CLIENT_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CLIENT_LAST_MODIFIED_BY); } }
        public IField CLIENT_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CLIENT_LAST_MODIFIED_TMST); } }
        public IField CLIENT_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CLIENT_FK_CLB_CLIENT_NO); } }
        public IField CLIENT_NAME_TYPE { get { return GetElementByName<IField>(Names.CLIENT_NAME_TYPE); } }
        public IGroup DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT_BASIC); } }
        public IField CLIENTB_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_NUMBER); } }
        public IField CLIENTB_CLIENT_GIVEN_NAME { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_GIVEN_NAME); } }
        public IField CLIENTB_CLIENT_INITIALS { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_INITIALS); } }
        public IField CLIENTB_CLIENT_SURNAME { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_SURNAME); } }
        public IField CLIENTB_CIS_REPL_IND { get { return GetElementByName<IField>(Names.CLIENTB_CIS_REPL_IND); } }
        public IField CLIENTB_WORK_PHONE { get { return GetElementByName<IField>(Names.CLIENTB_WORK_PHONE); } }
        public IField CLIENTB_SSN { get { return GetElementByName<IField>(Names.CLIENTB_SSN); } }
        public IField CLIENTB_GENDER { get { return GetElementByName<IField>(Names.CLIENTB_GENDER); } }
        public IField CLIENTB_PARENT_RGHTS_SEV { get { return GetElementByName<IField>(Names.CLIENTB_PARENT_RGHTS_SEV); } }
        public IField CLIENTB_PRNT_RGHTS_SEV_DT { get { return GetElementByName<IField>(Names.CLIENTB_PRNT_RGHTS_SEV_DT); } }
        public IField CLIENTB_LEGAL_STATUS { get { return GetElementByName<IField>(Names.CLIENTB_LEGAL_STATUS); } }
        public IField CLIENTB_INSURANCE_CODE { get { return GetElementByName<IField>(Names.CLIENTB_INSURANCE_CODE); } }
        public IField CLIENTB_INITIAL_CUSTODY_DT { get { return GetElementByName<IField>(Names.CLIENTB_INITIAL_CUSTODY_DT); } }
        public IField CLIENTB_HOME_PHONE { get { return GetElementByName<IField>(Names.CLIENTB_HOME_PHONE); } }
        public IField CLIENTB_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENTB_DATE_OF_BIRTH); } }
        public IField CLIENTB_CURR_PLACEMNT_DT { get { return GetElementByName<IField>(Names.CLIENTB_CURR_PLACEMNT_DT); } }
        public IField CLIENTB_CURRENT_PLACEMENT { get { return GetElementByName<IField>(Names.CLIENTB_CURRENT_PLACEMENT); } }
        public IField CLIENTB_CSEA_G_CAUSE_CODE { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_G_CAUSE_CODE); } }
        public IField CLIENTB_CSEA_G_CAUSE_CL_DT { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_G_CAUSE_CL_DT); } }
        public IField CLIENTB_CSEA_COOP_CODE { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_COOP_CODE); } }
        public IField CLIENTB_COUNTY_CRT_COMMIT { get { return GetElementByName<IField>(Names.CLIENTB_COUNTY_CRT_COMMIT); } }
        public IField CLIENTB_MONTHS_ASST_AF { get { return GetElementByName<IField>(Names.CLIENTB_MONTHS_ASST_AF); } }
        public IField CLIENTB_MONTHS_ASST_GA { get { return GetElementByName<IField>(Names.CLIENTB_MONTHS_ASST_GA); } }
        public IField CLIENTB_MO_DEATH_DT { get { return GetElementByName<IField>(Names.CLIENTB_MO_DEATH_DT); } }
        public IField CLIENTB_MO_PRT_DT { get { return GetElementByName<IField>(Names.CLIENTB_MO_PRT_DT); } }
        public IField CLIENTB_FA_DEATH_DT { get { return GetElementByName<IField>(Names.CLIENTB_FA_DEATH_DT); } }
        public IField CLIENTB_FA_PRT_DT { get { return GetElementByName<IField>(Names.CLIENTB_FA_PRT_DT); } }
        public IField CLIENTB_MPI_ID { get { return GetElementByName<IField>(Names.CLIENTB_MPI_ID); } }
        public IField CLIENTB_MED_COVERAGE_IND { get { return GetElementByName<IField>(Names.CLIENTB_MED_COVERAGE_IND); } }
        public IField CLIENTB_INSURANCE_CARRIER { get { return GetElementByName<IField>(Names.CLIENTB_INSURANCE_CARRIER); } }
        public IField CLIENTB_INSURANCE_POLCY_NO { get { return GetElementByName<IField>(Names.CLIENTB_INSURANCE_POLCY_NO); } }
        public IField CLIENTB_SPOKEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLIENTB_SPOKEN_LANGUAGE); } }
        public IField CLIENTB_WRITTEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLIENTB_WRITTEN_LANGUAGE); } }
        public IField CLIENTB_STATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENTB_STATE_OF_BIRTH); } }
        public IField CLIENTB_SCHOOL_DISTRICT { get { return GetElementByName<IField>(Names.CLIENTB_SCHOOL_DISTRICT); } }
        public IField CLIENTB_ETHNIC_CLASS { get { return GetElementByName<IField>(Names.CLIENTB_ETHNIC_CLASS); } }
        public IField CLIENTB_SUFFIX_NAME { get { return GetElementByName<IField>(Names.CLIENTB_SUFFIX_NAME); } }
        public IField CLIENTB_EMPLOYER_NAME { get { return GetElementByName<IField>(Names.CLIENTB_EMPLOYER_NAME); } }
        public IField CLIENTB_EARNED_INCOME_AMT { get { return GetElementByName<IField>(Names.CLIENTB_EARNED_INCOME_AMT); } }
        public IField CLIENTB_INCOME_FREQUENCY { get { return GetElementByName<IField>(Names.CLIENTB_INCOME_FREQUENCY); } }
        public IField CLIENTB_KEES_ABMS_ID { get { return GetElementByName<IField>(Names.CLIENTB_KEES_ABMS_ID); } }
        public IGroup CLIENTB_EMAIL_ADDRESS { get { return GetElementByName<IGroup>(Names.CLIENTB_EMAIL_ADDRESS); } }
        public IField CLIENTB_EMAIL_ADDRESS_LEN { get { return GetElementByName<IField>(Names.CLIENTB_EMAIL_ADDRESS_LEN); } }
        public IField CLIENTB_EMAIL_ADDRESS_TEXT { get { return GetElementByName<IField>(Names.CLIENTB_EMAIL_ADDRESS_TEXT); } }
        public IGroup CLIENTB_OCCUPATION { get { return GetElementByName<IGroup>(Names.CLIENTB_OCCUPATION); } }
        public IField CLIENTB_OCCUPATION_LEN { get { return GetElementByName<IField>(Names.CLIENTB_OCCUPATION_LEN); } }
        public IField CLIENTB_OCCUPATION_TEXT { get { return GetElementByName<IField>(Names.CLIENTB_OCCUPATION_TEXT); } }
        public IField CLIENTB_CREATED_BY { get { return GetElementByName<IField>(Names.CLIENTB_CREATED_BY); } }
        public IField CLIENTB_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CLIENTB_CREATED_TIMESTAMP); } }
        public IField CLIENTB_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CLIENTB_LAST_MODIFIED_BY); } }
        public IField CLIENTB_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CLIENTB_LAST_MODIFIED_TMST); } }
        public IField CLIENTB_SENSITIVE_FLAG { get { return GetElementByName<IField>(Names.CLIENTB_SENSITIVE_FLAG); } }
        public IField CLIENTB_CIS_PREFERRED_ID { get { return GetElementByName<IField>(Names.CLIENTB_CIS_PREFERRED_ID); } }
        public IField CLIENTB_NAME_TYPE { get { return GetElementByName<IField>(Names.CLIENTB_NAME_TYPE); } }
        public IGroup DCLKSD_SYSTEM_PART { get { return GetElementByName<IGroup>(Names.DCLKSD_SYSTEM_PART); } }
        public IField SYSPART_SYSTEM_CODE { get { return GetElementByName<IField>(Names.SYSPART_SYSTEM_CODE); } }
        public IField SYSPART_PARTICIPATION_FLAG { get { return GetElementByName<IField>(Names.SYSPART_PARTICIPATION_FLAG); } }
        public IField SYSPART_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.SYSPART_CREATED_TIMESTAMP); } }
        public IField SYSPART_CREATED_BY { get { return GetElementByName<IField>(Names.SYSPART_CREATED_BY); } }
        public IField SYSPART_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.SYSPART_LAST_MODIFIED_BY); } }
        public IField SYSPART_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.SYSPART_LAST_MODIFIED_TMST); } }
        public IField SYSPART_FK_CLI_CLIENT_NO { get { return GetElementByName<IField>(Names.SYSPART_FK_CLI_CLIENT_NO); } }
        public IField SYSPART_FK_CLI_CLIENT_NAME { get { return GetElementByName<IField>(Names.SYSPART_FK_CLI_CLIENT_NAME); } }
        public IField SYSPART_FK_CLI_SSN { get { return GetElementByName<IField>(Names.SYSPART_FK_CLI_SSN); } }
        public IGroup WS_DB2_CONSTANT_AREAS { get { return GetElementByName<IGroup>(Names.WS_DB2_CONSTANT_AREAS); } }
        public IField WS_SYS_CD_AE { get { return GetElementByName<IField>(Names.WS_SYS_CD_AE); } }
        public IField WS_SYS_CD_CS { get { return GetElementByName<IField>(Names.WS_SYS_CD_CS); } }
        public IField WS_SYS_CD_KP { get { return GetElementByName<IField>(Names.WS_SYS_CD_KP); } }
        public IField WS_SYS_CD_KC { get { return GetElementByName<IField>(Names.WS_SYS_CD_KC); } }
        public IField WS_SYS_CD_FA { get { return GetElementByName<IField>(Names.WS_SYS_CD_FA); } }
        public IField WS_SYS_CD_KM { get { return GetElementByName<IField>(Names.WS_SYS_CD_KM); } }
        public IField WS_YES_Y { get { return GetElementByName<IField>(Names.WS_YES_Y); } }
        public IField WS_IDENT_0000000001 { get { return GetElementByName<IField>(Names.WS_IDENT_0000000001); } }
        public IField WS_SYS_CD_CS_FOUND { get { return GetElementByName<IField>(Names.WS_SYS_CD_CS_FOUND); } }
        public IField WS_SYS_CD_FA_FOUND { get { return GetElementByName<IField>(Names.WS_SYS_CD_FA_FOUND); } }
        public IField WS_SYS_CD_KM_FOUND { get { return GetElementByName<IField>(Names.WS_SYS_CD_KM_FOUND); } }
        public IGroup WS_DB2_WORK_AREAS { get { return GetElementByName<IGroup>(Names.WS_DB2_WORK_AREAS); } }
        public IField DB2_COUNT { get { return GetElementByName<IField>(Names.DB2_COUNT); } }
        public IField WS_PREF_ID_FLAG { get { return GetElementByName<IField>(Names.WS_PREF_ID_FLAG); } }
        public IField WS_OLD_CLB_SSN { get { return GetElementByName<IField>(Names.WS_OLD_CLB_SSN); } }
        public IField WS_IMP_CNT { get { return GetElementByName<IField>(Names.WS_IMP_CNT); } }
        public IField WS_EXP_CNT { get { return GetElementByName<IField>(Names.WS_EXP_CNT); } }
        public IField PART_WS_END_DATE { get { return GetElementByName<IField>(Names.PART_WS_END_DATE); } }
        public IField PART_WS_START_DATE { get { return GetElementByName<IField>(Names.PART_WS_START_DATE); } }
        public IField CLIENT_WS_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENT_WS_DATE_OF_BIRTH); } }
        public IField WS_CLIENT_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.WS_CLIENT_DATE_OF_BIRTH); } }
        public IGroup WS_CLIENT_DOB { get { return GetElementByName<IGroup>(Names.WS_CLIENT_DOB); } }
        public IField WS_CLIENT_DOB_YYYY { get { return GetElementByName<IField>(Names.WS_CLIENT_DOB_YYYY); } }
        public IField WS_CLIENT_DOB_MM { get { return GetElementByName<IField>(Names.WS_CLIENT_DOB_MM); } }
        public IField WS_CLIENT_DOB_DD { get { return GetElementByName<IField>(Names.WS_CLIENT_DOB_DD); } }
        public IGroup WS_FORMATTED_DOB { get { return GetElementByName<IGroup>(Names.WS_FORMATTED_DOB); } }
        public IField WS_FORMATTED_DOB_YYYY { get { return GetElementByName<IField>(Names.WS_FORMATTED_DOB_YYYY); } }
        public IField WS_FORMATTED_DOB_MM { get { return GetElementByName<IField>(Names.WS_FORMATTED_DOB_MM); } }
        public IField WS_FORMATTED_DOB_DD { get { return GetElementByName<IField>(Names.WS_FORMATTED_DOB_DD); } }
        public IField WS_SSN { get { return GetElementByName<IField>(Names.WS_SSN); } }
        public IField WS_SSN_TXT { get { return GetElementByName<IField>(Names.WS_SSN_TXT); } }
        public IField WS_SQLCODE { get { return GetElementByName<IField>(Names.WS_SQLCODE); } }
        public IField WS_SQLCODE_TXT { get { return GetElementByName<IField>(Names.WS_SQLCODE_TXT); } }
        public IGroup WS_FORMATTED_SSN { get { return GetElementByName<IGroup>(Names.WS_FORMATTED_SSN); } }
        public IField WS_FORMATTED_THREE { get { return GetElementByName<IField>(Names.WS_FORMATTED_THREE); } }
        public IField WS_FORMATTED_TWO { get { return GetElementByName<IField>(Names.WS_FORMATTED_TWO); } }
        public IField WS_FORMATTED_FOUR { get { return GetElementByName<IField>(Names.WS_FORMATTED_FOUR); } }
        public IGroup WS_CLIENT_NAME { get { return GetElementByName<IGroup>(Names.WS_CLIENT_NAME); } }
        public IField WS_CLIENT_LAST_NAME { get { return GetElementByName<IField>(Names.WS_CLIENT_LAST_NAME); } }
        public IGroup WS_CLIENT_FIRST_NAME { get { return GetElementByName<IGroup>(Names.WS_CLIENT_FIRST_NAME); } }
        public IField WS_CLIENT_FIRST_NAME_1 { get { return GetElementByName<IField>(Names.WS_CLIENT_FIRST_NAME_1); } }
        public IField WS_CLIENT_FIRST_NAME_11 { get { return GetElementByName<IField>(Names.WS_CLIENT_FIRST_NAME_11); } }
        public IField WS_CLIENT_INITIAL { get { return GetElementByName<IField>(Names.WS_CLIENT_INITIAL); } }
        public IGroup WS_DB2_SWITCHES { get { return GetElementByName<IGroup>(Names.WS_DB2_SWITCHES); } }
        public IField WS_CLIENT_EOF_SW { get { return GetElementByName<IField>(Names.WS_CLIENT_EOF_SW); } }
        public ICheckField WS_CLIENT_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_CLIENT_EOF_NO); } }
        public ICheckField WS_CLIENT_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_CLIENT_EOF_YES); } }
        public IField WS_CLIENTB_EOF_SW { get { return GetElementByName<IField>(Names.WS_CLIENTB_EOF_SW); } }
        public ICheckField WS_CLIENTB_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_CLIENTB_EOF_NO); } }
        public ICheckField WS_CLIENTB_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_CLIENTB_EOF_YES); } }
        public IField WS_SYSPART_EOF_SW { get { return GetElementByName<IField>(Names.WS_SYSPART_EOF_SW); } }
        public ICheckField WS_SYSPART_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_SYSPART_EOF_NO); } }
        public ICheckField WS_SYSPART_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_SYSPART_EOF_YES); } }
        public IGroup WS_DB2_SYSTEM_PART_TABLE { get { return GetElementByName<IGroup>(Names.WS_DB2_SYSTEM_PART_TABLE); } }
        public IArrayElementAccessor<IGroup> WS_DB2_SYSTEM_PART { get { return GetArrayElementAccessor<IGroup>(Names.WS_DB2_SYSTEM_PART); } }
        public IArrayElementAccessor<IField> WS_DB2_SYSTEM_CODE { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_SYSTEM_CODE); } }
        public IArrayElementAccessor<IField> WS_DB2_PARTICIPATION_FLAG { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_PARTICIPATION_FLAG); } }
        public IArrayElementAccessor<IField> WS_DB2_CREATED_TIMESTAMP { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_CREATED_TIMESTAMP); } }
        public IArrayElementAccessor<IField> WS_DB2_CREATED_BY { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_CREATED_BY); } }
        public IArrayElementAccessor<IField> WS_DB2_LAST_MODIFIED_BY { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_LAST_MODIFIED_BY); } }
        public IArrayElementAccessor<IField> WS_DB2_LAST_MODIFIED_TMST { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_LAST_MODIFIED_TMST); } }
        public IArrayElementAccessor<IField> WS_DB2_FK_CLB_CLIENT_NO { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_FK_CLB_CLIENT_NO); } }
        public IArrayElementAccessor<IField> WS_DB2_FK_CLI_CLIENT_NAME { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_FK_CLI_CLIENT_NAME); } }
        public IArrayElementAccessor<IField> WS_DB2_FK_CLI_SSN { get { return GetArrayElementAccessor<IField>(Names.WS_DB2_FK_CLI_SSN); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup("FILLER", (FILLER) =>
           {
               FILLER.CreateNewField(Names.ADIM1, FieldType.CompInt, 8);
               FILLER.CreateNewField(Names.ADIM2, FieldType.CompInt, 8);
               FILLER.CreateNewField(Names.ADIM3, FieldType.CompInt, 8);
           });

            recordDef.CreateNewGroup("FILLER_d2", (FILLER_d2) =>
           {
               FILLER_d2.CreateNewField(Names.GROUP_IMPORT_INPUT_IDS_0001FL, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.GROUP_IMPORT_INPUT_IDS_0001PS, FieldType.CompShort, 4);
               FILLER_d2.CreateNewField(Names.GROUP_IMPORT_INPUT_IDS_0001RF, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.GROUP_IMPORT_INPUT_IDS_0001MM, FieldType.CompInt, 9, 10);
               FILLER_d2.CreateNewField(Names.GROUP_IMPORT_LIST_0002FL, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.GROUP_IMPORT_LIST_0002PS, FieldType.CompShort, 4);
               FILLER_d2.CreateNewField(Names.GROUP_IMPORT_LIST_0002RF, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.GROUP_IMPORT_LIST_0002MM, FieldType.CompInt, 9, 10);
               FILLER_d2.CreateNewField(Names.GROUP_EXPORT_LIST_0003FL, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.GROUP_EXPORT_LIST_0003PS, FieldType.CompShort, 4);
               FILLER_d2.CreateNewField(Names.GROUP_EXPORT_LIST_0003RF, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.GROUP_EXPORT_LIST_0003MM, FieldType.CompInt, 9, 10);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT, (DCLKSD_CLIENT) =>
           {
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_PREVIOUS_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_PHONETIC_DATA, FieldType.String, 21);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_DT_OF_LAST_UPDATE, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_DATE_OF_BIRTH, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_VERIFIED_SSN_FLAG, FieldType.String, 1);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_CLIENT_NAME, FieldType.String, 30);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_CREATED_BY, FieldType.String, 8);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_FK_CLB_CLIENT_NO, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_NAME_TYPE, FieldType.String, 1, SPACES);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT_BASIC, (DCLKSD_CLIENT_BASIC) =>
           {
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_NUMBER, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_INITIALS, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_SURNAME, FieldType.String, 17);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CIS_REPL_IND, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_WORK_PHONE, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_PARENT_RGHTS_SEV, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_PRNT_RGHTS_SEV_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_LEGAL_STATUS, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INSURANCE_CODE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INITIAL_CUSTODY_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_HOME_PHONE, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_DATE_OF_BIRTH, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CURR_PLACEMNT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CURRENT_PLACEMENT, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_G_CAUSE_CODE, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_G_CAUSE_CL_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_COOP_CODE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_COUNTY_CRT_COMMIT, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MONTHS_ASST_AF, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MONTHS_ASST_GA, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MO_DEATH_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MO_PRT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_FA_DEATH_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_FA_PRT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MPI_ID, FieldType.String, 38);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MED_COVERAGE_IND, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INSURANCE_CARRIER, FieldType.String, 30);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INSURANCE_POLCY_NO, FieldType.String, 30);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SPOKEN_LANGUAGE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_WRITTEN_LANGUAGE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_STATE_OF_BIRTH, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SCHOOL_DISTRICT, FieldType.String, 3);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_ETHNIC_CLASS, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SUFFIX_NAME, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_EMPLOYER_NAME, FieldType.String, 28);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_EARNED_INCOME_AMT, FieldType.PackedDecimal, 8, null, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INCOME_FREQUENCY, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_KEES_ABMS_ID, FieldType.String, 38);
               DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLIENTB_EMAIL_ADDRESS, (CLIENTB_EMAIL_ADDRESS) =>
               {
                   CLIENTB_EMAIL_ADDRESS.CreateNewField(Names.CLIENTB_EMAIL_ADDRESS_LEN, FieldType.CompShort, 4);
                   CLIENTB_EMAIL_ADDRESS.CreateNewField(Names.CLIENTB_EMAIL_ADDRESS_TEXT, FieldType.String, 100);
               });
               DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLIENTB_OCCUPATION, (CLIENTB_OCCUPATION) =>
               {
                   CLIENTB_OCCUPATION.CreateNewField(Names.CLIENTB_OCCUPATION_LEN, FieldType.CompShort, 4);
                   CLIENTB_OCCUPATION.CreateNewField(Names.CLIENTB_OCCUPATION_TEXT, FieldType.String, 100);
               });
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CREATED_BY, FieldType.String, 8);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SENSITIVE_FLAG, FieldType.String, 1, SPACES);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CIS_PREFERRED_ID, FieldType.String, 10, SPACES);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_NAME_TYPE, FieldType.String, 1, SPACES);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_SYSTEM_PART, (DCLKSD_SYSTEM_PART) =>
           {
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_SYSTEM_CODE, FieldType.String, 2);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_PARTICIPATION_FLAG, FieldType.String, 1);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_CREATED_BY, FieldType.String, 8);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_FK_CLI_CLIENT_NO, FieldType.String, 10);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_FK_CLI_CLIENT_NAME, FieldType.String, 30);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_FK_CLI_SSN, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.WS_DB2_CONSTANT_AREAS, (WS_DB2_CONSTANT_AREAS) =>
           {
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_AE, FieldType.String, 2, "AE");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_CS, FieldType.String, 2, "CS");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_KP, FieldType.String, 2, "KP");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_KC, FieldType.String, 2, "KC");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_FA, FieldType.String, 2, "FA");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_KM, FieldType.String, 2, "KM");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_YES_Y, FieldType.String, 1, "Y");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_IDENT_0000000001, FieldType.String, 10, "0000000001");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_CS_FOUND, FieldType.String, 1, SPACES);
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_FA_FOUND, FieldType.String, 1, SPACES);
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_KM_FOUND, FieldType.String, 1, SPACES);
           });

            recordDef.CreateNewGroup(Names.WS_DB2_WORK_AREAS, (WS_DB2_WORK_AREAS) =>
           {
               WS_DB2_WORK_AREAS.CreateNewField(Names.DB2_COUNT, FieldType.CompInt, 9);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_PREF_ID_FLAG, FieldType.String, 1, SPACES);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_OLD_CLB_SSN, FieldType.CompInt, 9, +0);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_IMP_CNT, FieldType.UnsignedNumeric, 2, 0);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_EXP_CNT, FieldType.UnsignedNumeric, 2, 0);
               WS_DB2_WORK_AREAS.CreateNewField(Names.PART_WS_END_DATE, FieldType.UnsignedNumeric, 8, 0);
               WS_DB2_WORK_AREAS.CreateNewField(Names.PART_WS_START_DATE, FieldType.UnsignedNumeric, 8, 0);
               WS_DB2_WORK_AREAS.CreateNewField(Names.CLIENT_WS_DATE_OF_BIRTH, FieldType.String, 8, SPACES);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_CLIENT_DATE_OF_BIRTH, FieldType.String, 10, SPACES);
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_CLIENT_DOB, (WS_CLIENT_DOB) =>
               {
                   WS_CLIENT_DOB.CreateNewField(Names.WS_CLIENT_DOB_YYYY, FieldType.String, 4);
                   WS_CLIENT_DOB.CreateNewFillerField(1, FillWith.Hashes);
                   WS_CLIENT_DOB.CreateNewField(Names.WS_CLIENT_DOB_MM, FieldType.String, 2);
                   WS_CLIENT_DOB.CreateNewFillerField(1, FillWith.Hashes);
                   WS_CLIENT_DOB.CreateNewField(Names.WS_CLIENT_DOB_DD, FieldType.String, 2);
               });
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_FORMATTED_DOB, (WS_FORMATTED_DOB) =>
               {
                   WS_FORMATTED_DOB.CreateNewField(Names.WS_FORMATTED_DOB_YYYY, FieldType.String, 4);
                   WS_FORMATTED_DOB.CreateNewField(Names.WS_FORMATTED_DOB_MM, FieldType.String, 2);
                   WS_FORMATTED_DOB.CreateNewField(Names.WS_FORMATTED_DOB_DD, FieldType.String, 2);
               });
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_SSN, FieldType.UnsignedNumeric, 9);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_SSN_TXT, FieldType.String, 9);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_SQLCODE, FieldType.UnsignedNumeric, 9);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_SQLCODE_TXT, FieldType.String, 9);
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_FORMATTED_SSN, (WS_FORMATTED_SSN) =>
               {
                   WS_FORMATTED_SSN.CreateNewField(Names.WS_FORMATTED_THREE, FieldType.String, 3);
                   WS_FORMATTED_SSN.CreateNewField(Names.WS_FORMATTED_TWO, FieldType.String, 2);
                   WS_FORMATTED_SSN.CreateNewField(Names.WS_FORMATTED_FOUR, FieldType.String, 4);
               });
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_CLIENT_NAME, (WS_CLIENT_NAME) =>
               {
                   WS_CLIENT_NAME.CreateNewField(Names.WS_CLIENT_LAST_NAME, FieldType.String, 17);
                   WS_CLIENT_NAME.CreateNewGroup(Names.WS_CLIENT_FIRST_NAME, (WS_CLIENT_FIRST_NAME) =>
                   {
                       WS_CLIENT_FIRST_NAME.CreateNewField(Names.WS_CLIENT_FIRST_NAME_1, FieldType.String, 1);
                       WS_CLIENT_FIRST_NAME.CreateNewField(Names.WS_CLIENT_FIRST_NAME_11, FieldType.String, 11);
                   });
                   WS_CLIENT_NAME.CreateNewField(Names.WS_CLIENT_INITIAL, FieldType.String, 1);
               });
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_DB2_SWITCHES, (WS_DB2_SWITCHES) =>
               {
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_CLIENT_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_CLIENT_EOF_NO, "N")
                       .NewCheckField(Names.WS_CLIENT_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_CLIENTB_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_CLIENTB_EOF_NO, "N")
                       .NewCheckField(Names.WS_CLIENTB_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_SYSPART_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_SYSPART_EOF_NO, "N")
                       .NewCheckField(Names.WS_SYSPART_EOF_YES, "Y")
                       ;
               });
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_DB2_SYSTEM_PART_TABLE, (WS_DB2_SYSTEM_PART_TABLE) =>
               {
                   WS_DB2_SYSTEM_PART_TABLE.CreateNewGroupArray(Names.WS_DB2_SYSTEM_PART, 10, (WS_DB2_SYSTEM_PART) =>
                   {
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_SYSTEM_CODE, FieldType.String, 2);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_PARTICIPATION_FLAG, FieldType.String, 1);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_CREATED_TIMESTAMP, FieldType.String, 26);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_CREATED_BY, FieldType.String, 8);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_LAST_MODIFIED_BY, FieldType.String, 8);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_LAST_MODIFIED_TMST, FieldType.String, 26);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_FK_CLB_CLIENT_NO, FieldType.String, 10);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_FK_CLI_CLIENT_NAME, FieldType.String, 30);
                       WS_DB2_SYSTEM_PART.CreateNewField(Names.WS_DB2_FK_CLI_SSN, FieldType.CompInt, 9);
                   });
               });
           });


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXIU50_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXIU50_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string WHEN_SUCCESSFUL_SF = "WHEN_SUCCESSFUL_SF";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string DB_ERROR_SF = "DB_ERROR_SF";
            internal const string ABORT_SHOW_DBMS_MSG_SF = "ABORT_SHOW_DBMS_MSG_SF";
            internal const string ABORT_SHOW_USER_MSG_SF = "ABORT_SHOW_USER_MSG_SF";
            internal const string RETRY_TRAN_REQUESTED_SF = "RETRY_TRAN_REQUESTED_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string ASYNC_WHEN_AVAILABLE_SF = "ASYNC_WHEN_AVAILABLE_SF";
            internal const string ASYNC_WHEN_ACCEPTED_SF = "ASYNC_WHEN_ACCEPTED_SF";
            internal const string ASYNC_WHEN_NOT_ACCEPTED_SF = "ASYNC_WHEN_NOT_ACCEPTED_SF";
            internal const string ASYNC_WHEN_INVALID_ID_SF = "ASYNC_WHEN_INVALID_ID_SF";
            internal const string ASYNC_WHEN_PENDING_SF = "ASYNC_WHEN_PENDING_SF";
            internal const string ASYNC_WHEN_SERVER_ERROR_SF = "ASYNC_WHEN_SERVER_ERROR_SF";
            internal const string ASYNC_WHEN_COMM_ERROR_SF = "ASYNC_WHEN_COMM_ERROR_SF";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DB_DEADLOCK_TIMOUT_FL_LS = "DB_DEADLOCK_TIMOUT_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_TIRDATE_SKIP_VAL = "PSMGR_TIRDATE_SKIP_VAL";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string TX_RETRY_COUNT = "TX_RETRY_COUNT";
            internal const string TX_USER_RETRY_ALLOWED = "TX_USER_RETRY_ALLOWED";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string PSMGR_ASYNC_DATA = "PSMGR_ASYNC_DATA";
            internal const string ASYNC_MODE = "ASYNC_MODE";
            internal const string FLOW_TYPE_SYNC = "FLOW_TYPE_SYNC";
            internal const string FLOW_TYPE_ASYNC = "FLOW_TYPE_ASYNC";
            internal const string FLOW_TYPE_NO_RESPONSE = "FLOW_TYPE_NO_RESPONSE";
            internal const string ASYNC_FLOW_STATUS_TABLE_PTR = "ASYNC_FLOW_STATUS_TABLE_PTR";
            internal const string ASYNC_SERVER_LOC_TABLE_PTR = "ASYNC_SERVER_LOC_TABLE_PTR";
            internal const string PSMGR_HEAP = "PSMGR_HEAP";
            internal const string HEAP_CFB = "HEAP_CFB";
            internal const string HEAP_CFB_ADDR = "HEAP_CFB_ADDR";
            internal const string HEAP_CFB_ADDR_RESV = "HEAP_CFB_ADDR_RESV";
            internal const string HEAP_CFB_ID = "HEAP_CFB_ID";
            internal const string HEAP_CFB_LEN = "HEAP_CFB_LEN";
            internal const string HEAP_WGLOB = "HEAP_WGLOB";
            internal const string HEAP_WGLOB_ADDR = "HEAP_WGLOB_ADDR";
            internal const string HEAP_WGLOB_ADDR_RESV = "HEAP_WGLOB_ADDR_RESV";
            internal const string HEAP_WGLOB_ID = "HEAP_WGLOB_ID";
            internal const string HEAP_WGLOB_LEN = "HEAP_WGLOB_LEN";
            internal const string PSMGR_MMCB = "PSMGR_MMCB";
            internal const string PSMGR_MMCB_ACTIVE = "PSMGR_MMCB_ACTIVE";
            internal const string IMPORT_EAB_DML_FLAG_0001EV = "IMPORT_EAB_DML_FLAG_0001EV";
            internal const string IEF_SUPPLIED_0001ET = "IEF_SUPPLIED_0001ET";
            internal const string FLAG_0001AS = "FLAG_0001AS";
            internal const string FLAG_0001 = "FLAG_0001";
            internal const string FLAG_0001XX = "FLAG_0001XX";
            internal const string IMPORT_UPDATE_PERSON_WO_0002EV = "IMPORT_UPDATE_PERSON_WO_0002EV";
            internal const string CSE_PERSONS_WORK_SET_0002ET = "CSE_PERSONS_WORK_SET_0002ET";
            internal const string REPLICATION_INDICATOR_0002AS = "REPLICATION_INDICATOR_0002AS";
            internal const string REPLICATION_INDICATOR_0002 = "REPLICATION_INDICATOR_0002";
            internal const string REPLICATION_INDICATOR_0002XX = "REPLICATION_INDICATOR_0002XX";
            internal const string FORMATTED_NAME_0002AS = "FORMATTED_NAME_0002AS";
            internal const string FORMATTED_NAME_0002 = "FORMATTED_NAME_0002";
            internal const string FORMATTED_NAME_0002XX = "FORMATTED_NAME_0002XX";
            internal const string NUMBER_0002AS = "NUMBER_0002AS";
            internal const string NUMBER_0002 = "NUMBER_0002";
            internal const string NUMBER_0002XX = "NUMBER_0002XX";
            internal const string SSN_0002AS = "SSN_0002AS";
            internal const string SSN_0002 = "SSN_0002";
            internal const string SSN_0002XX = "SSN_0002XX";
            internal const string DOB_0002AS = "DOB_0002AS";
            internal const string DOB_0002 = "DOB_0002";
            internal const string DOB_0002XX = "DOB_0002XX";
            internal const string SEX_0002AS = "SEX_0002AS";
            internal const string SEX_0002 = "SEX_0002";
            internal const string SEX_0002XX = "SEX_0002XX";
            internal const string FIRST_NAME_0002AS = "FIRST_NAME_0002AS";
            internal const string FIRST_NAME_0002 = "FIRST_NAME_0002";
            internal const string FIRST_NAME_0002XX = "FIRST_NAME_0002XX";
            internal const string MIDDLE_INITIAL_0002AS = "MIDDLE_INITIAL_0002AS";
            internal const string MIDDLE_INITIAL_0002 = "MIDDLE_INITIAL_0002";
            internal const string MIDDLE_INITIAL_0002XX = "MIDDLE_INITIAL_0002XX";
            internal const string LAST_NAME_0002AS = "LAST_NAME_0002AS";
            internal const string LAST_NAME_0002 = "LAST_NAME_0002";
            internal const string LAST_NAME_0002XX = "LAST_NAME_0002XX";
            internal const string IMPORT_UPDATE_PREFERRED_0003EV = "IMPORT_UPDATE_PREFERRED_0003EV";
            internal const string CSE_PERSONS_WORK_SET_0003ET = "CSE_PERSONS_WORK_SET_0003ET";
            internal const string NUMBER_0003AS = "NUMBER_0003AS";
            internal const string NUMBER_0003 = "NUMBER_0003";
            internal const string NUMBER_0003XX = "NUMBER_0003XX";
            internal const string GROUP_IMPORT_INPUT_IDS_0001RG = "GROUP_IMPORT_INPUT_IDS_0001RG";
            internal const string GROUP_IMPORT_INPUT_IDS_0001MA = "GROUP_IMPORT_INPUT_IDS_0001MA";
            internal const string GROUP_IMPORT_INPUT_IDS_0001MX = "GROUP_IMPORT_INPUT_IDS_0001MX";
            internal const string GROUP_IMPORT_INPUT_IDS_0001 = "GROUP_IMPORT_INPUT_IDS_0001";
            internal const string GROUP_IMPORT_INPUT_IDS_0001AC = "GROUP_IMPORT_INPUT_IDS_0001AC";
            internal const string G_IMPORT_INPUT_IDS_0004EV = "G_IMPORT_INPUT_IDS_0004EV";
            internal const string CSE_PERSONS_WORK_SET_0004ET = "CSE_PERSONS_WORK_SET_0004ET";
            internal const string NUMBER_0004AS = "NUMBER_0004AS";
            internal const string NUMBER_0004 = "NUMBER_0004";
            internal const string NUMBER_0004XX = "NUMBER_0004XX";
            internal const string GROUP_IMPORT_LIST_0002RG = "GROUP_IMPORT_LIST_0002RG";
            internal const string GROUP_IMPORT_LIST_0002MA = "GROUP_IMPORT_LIST_0002MA";
            internal const string GROUP_IMPORT_LIST_0002MX = "GROUP_IMPORT_LIST_0002MX";
            internal const string GROUP_IMPORT_LIST_0002 = "GROUP_IMPORT_LIST_0002";
            internal const string GROUP_IMPORT_LIST_0002AC = "GROUP_IMPORT_LIST_0002AC";
            internal const string G_IMPORT_0005EV = "G_IMPORT_0005EV";
            internal const string IEF_SUPPLIED_0005ET = "IEF_SUPPLIED_0005ET";
            internal const string SELECT_CHAR_0005AS = "SELECT_CHAR_0005AS";
            internal const string SELECT_CHAR_0005 = "SELECT_CHAR_0005";
            internal const string SELECT_CHAR_0005XX = "SELECT_CHAR_0005XX";
            internal const string G_IMPORT_PERSON_INFO_0006EV = "G_IMPORT_PERSON_INFO_0006EV";
            internal const string CSE_PERSONS_WORK_SET_0006ET = "CSE_PERSONS_WORK_SET_0006ET";
            internal const string REPLICATION_INDICATOR_0006AS = "REPLICATION_INDICATOR_0006AS";
            internal const string REPLICATION_INDICATOR_0006 = "REPLICATION_INDICATOR_0006";
            internal const string REPLICATION_INDICATOR_0006XX = "REPLICATION_INDICATOR_0006XX";
            internal const string FORMATTED_NAME_0006AS = "FORMATTED_NAME_0006AS";
            internal const string FORMATTED_NAME_0006 = "FORMATTED_NAME_0006";
            internal const string FORMATTED_NAME_0006XX = "FORMATTED_NAME_0006XX";
            internal const string NUMBER_0006AS = "NUMBER_0006AS";
            internal const string NUMBER_0006 = "NUMBER_0006";
            internal const string NUMBER_0006XX = "NUMBER_0006XX";
            internal const string SSN_0006AS = "SSN_0006AS";
            internal const string SSN_0006 = "SSN_0006";
            internal const string SSN_0006XX = "SSN_0006XX";
            internal const string DOB_0006AS = "DOB_0006AS";
            internal const string DOB_0006 = "DOB_0006";
            internal const string DOB_0006XX = "DOB_0006XX";
            internal const string SEX_0006AS = "SEX_0006AS";
            internal const string SEX_0006 = "SEX_0006";
            internal const string SEX_0006XX = "SEX_0006XX";
            internal const string FIRST_NAME_0006AS = "FIRST_NAME_0006AS";
            internal const string FIRST_NAME_0006 = "FIRST_NAME_0006";
            internal const string FIRST_NAME_0006XX = "FIRST_NAME_0006XX";
            internal const string MIDDLE_INITIAL_0006AS = "MIDDLE_INITIAL_0006AS";
            internal const string MIDDLE_INITIAL_0006 = "MIDDLE_INITIAL_0006";
            internal const string MIDDLE_INITIAL_0006XX = "MIDDLE_INITIAL_0006XX";
            internal const string LAST_NAME_0006AS = "LAST_NAME_0006AS";
            internal const string LAST_NAME_0006 = "LAST_NAME_0006";
            internal const string LAST_NAME_0006XX = "LAST_NAME_0006XX";
            internal const string G_IMPORT_AE_FLAG_0007EV = "G_IMPORT_AE_FLAG_0007EV";
            internal const string IEF_SUPPLIED_0007ET = "IEF_SUPPLIED_0007ET";
            internal const string FLAG_0007AS = "FLAG_0007AS";
            internal const string FLAG_0007 = "FLAG_0007";
            internal const string FLAG_0007XX = "FLAG_0007XX";
            internal const string G_IMPORT_CS_FLAG_0008EV = "G_IMPORT_CS_FLAG_0008EV";
            internal const string IEF_SUPPLIED_0008ET = "IEF_SUPPLIED_0008ET";
            internal const string FLAG_0008AS = "FLAG_0008AS";
            internal const string FLAG_0008 = "FLAG_0008";
            internal const string FLAG_0008XX = "FLAG_0008XX";
            internal const string G_IMPORT_FA_FLAG_0009EV = "G_IMPORT_FA_FLAG_0009EV";
            internal const string IEF_SUPPLIED_0009ET = "IEF_SUPPLIED_0009ET";
            internal const string FLAG_0009AS = "FLAG_0009AS";
            internal const string FLAG_0009 = "FLAG_0009";
            internal const string FLAG_0009XX = "FLAG_0009XX";
            internal const string G_IMPORT_KM_FLAG_0010EV = "G_IMPORT_KM_FLAG_0010EV";
            internal const string IEF_SUPPLIED_0010ET = "IEF_SUPPLIED_0010ET";
            internal const string FLAG_0010AS = "FLAG_0010AS";
            internal const string FLAG_0010 = "FLAG_0010";
            internal const string FLAG_0010XX = "FLAG_0010XX";
            internal const string G_IMPORT_PREFERRED_ID_0011EV = "G_IMPORT_PREFERRED_ID_0011EV";
            internal const string CSE_PERSONS_WORK_SET_0011ET = "CSE_PERSONS_WORK_SET_0011ET";
            internal const string NUMBER_0011AS = "NUMBER_0011AS";
            internal const string NUMBER_0011 = "NUMBER_0011";
            internal const string NUMBER_0011XX = "NUMBER_0011XX";
            internal const string EXPORT_EAB_DML_FLAG_0012EV = "EXPORT_EAB_DML_FLAG_0012EV";
            internal const string IEF_SUPPLIED_0012ET = "IEF_SUPPLIED_0012ET";
            internal const string FLAG_0012AS = "FLAG_0012AS";
            internal const string FLAG_0012 = "FLAG_0012";
            internal const string FLAG_0012XX = "FLAG_0012XX";
            internal const string GROUP_EXPORT_LIST_0003RG = "GROUP_EXPORT_LIST_0003RG";
            internal const string GROUP_EXPORT_LIST_0003MA = "GROUP_EXPORT_LIST_0003MA";
            internal const string GROUP_EXPORT_LIST_0003MX = "GROUP_EXPORT_LIST_0003MX";
            internal const string GROUP_EXPORT_LIST_0003 = "GROUP_EXPORT_LIST_0003";
            internal const string GROUP_EXPORT_LIST_0003AC = "GROUP_EXPORT_LIST_0003AC";
            internal const string G_EXPORT_0013EV = "G_EXPORT_0013EV";
            internal const string IEF_SUPPLIED_0013ET = "IEF_SUPPLIED_0013ET";
            internal const string SELECT_CHAR_0013AS = "SELECT_CHAR_0013AS";
            internal const string SELECT_CHAR_0013 = "SELECT_CHAR_0013";
            internal const string SELECT_CHAR_0013XX = "SELECT_CHAR_0013XX";
            internal const string G_EXPORT_PERSON_INFO_0014EV = "G_EXPORT_PERSON_INFO_0014EV";
            internal const string CSE_PERSONS_WORK_SET_0014ET = "CSE_PERSONS_WORK_SET_0014ET";
            internal const string REPLICATION_INDICATOR_0014AS = "REPLICATION_INDICATOR_0014AS";
            internal const string REPLICATION_INDICATOR_0014 = "REPLICATION_INDICATOR_0014";
            internal const string REPLICATION_INDICATOR_0014XX = "REPLICATION_INDICATOR_0014XX";
            internal const string FORMATTED_NAME_0014AS = "FORMATTED_NAME_0014AS";
            internal const string FORMATTED_NAME_0014 = "FORMATTED_NAME_0014";
            internal const string FORMATTED_NAME_0014XX = "FORMATTED_NAME_0014XX";
            internal const string NUMBER_0014AS = "NUMBER_0014AS";
            internal const string NUMBER_0014 = "NUMBER_0014";
            internal const string NUMBER_0014XX = "NUMBER_0014XX";
            internal const string SSN_0014AS = "SSN_0014AS";
            internal const string SSN_0014 = "SSN_0014";
            internal const string SSN_0014XX = "SSN_0014XX";
            internal const string DOB_0014AS = "DOB_0014AS";
            internal const string DOB_0014 = "DOB_0014";
            internal const string DOB_0014XX = "DOB_0014XX";
            internal const string SEX_0014AS = "SEX_0014AS";
            internal const string SEX_0014 = "SEX_0014";
            internal const string SEX_0014XX = "SEX_0014XX";
            internal const string FIRST_NAME_0014AS = "FIRST_NAME_0014AS";
            internal const string FIRST_NAME_0014 = "FIRST_NAME_0014";
            internal const string FIRST_NAME_0014XX = "FIRST_NAME_0014XX";
            internal const string MIDDLE_INITIAL_0014AS = "MIDDLE_INITIAL_0014AS";
            internal const string MIDDLE_INITIAL_0014 = "MIDDLE_INITIAL_0014";
            internal const string MIDDLE_INITIAL_0014XX = "MIDDLE_INITIAL_0014XX";
            internal const string LAST_NAME_0014AS = "LAST_NAME_0014AS";
            internal const string LAST_NAME_0014 = "LAST_NAME_0014";
            internal const string LAST_NAME_0014XX = "LAST_NAME_0014XX";
            internal const string G_EXPORT_AE_FLAG_0015EV = "G_EXPORT_AE_FLAG_0015EV";
            internal const string IEF_SUPPLIED_0015ET = "IEF_SUPPLIED_0015ET";
            internal const string FLAG_0015AS = "FLAG_0015AS";
            internal const string FLAG_0015 = "FLAG_0015";
            internal const string FLAG_0015XX = "FLAG_0015XX";
            internal const string G_EXPORT_CS_FLAG_0016EV = "G_EXPORT_CS_FLAG_0016EV";
            internal const string IEF_SUPPLIED_0016ET = "IEF_SUPPLIED_0016ET";
            internal const string FLAG_0016AS = "FLAG_0016AS";
            internal const string FLAG_0016 = "FLAG_0016";
            internal const string FLAG_0016XX = "FLAG_0016XX";
            internal const string G_EXPORT_FA_FLAG_0017EV = "G_EXPORT_FA_FLAG_0017EV";
            internal const string IEF_SUPPLIED_0017ET = "IEF_SUPPLIED_0017ET";
            internal const string FLAG_0017AS = "FLAG_0017AS";
            internal const string FLAG_0017 = "FLAG_0017";
            internal const string FLAG_0017XX = "FLAG_0017XX";
            internal const string G_EXPORT_KM_FLAG_0018EV = "G_EXPORT_KM_FLAG_0018EV";
            internal const string IEF_SUPPLIED_0018ET = "IEF_SUPPLIED_0018ET";
            internal const string FLAG_0018AS = "FLAG_0018AS";
            internal const string FLAG_0018 = "FLAG_0018";
            internal const string FLAG_0018XX = "FLAG_0018XX";
            internal const string G_EXPORT_PREFERRED_ID_0019EV = "G_EXPORT_PREFERRED_ID_0019EV";
            internal const string CSE_PERSONS_WORK_SET_0019ET = "CSE_PERSONS_WORK_SET_0019ET";
            internal const string NUMBER_0019AS = "NUMBER_0019AS";
            internal const string NUMBER_0019 = "NUMBER_0019";
            internal const string NUMBER_0019XX = "NUMBER_0019XX";
            internal const string EXPORT_DML_RETURN_CODE_0020EV = "EXPORT_DML_RETURN_CODE_0020EV";
            internal const string IEF_SUPPLIED_0020ET = "IEF_SUPPLIED_0020ET";
            internal const string COUNT_0020AS = "COUNT_0020AS";
            internal const string COUNT_0020 = "COUNT_0020";
            internal const string COUNT_0020XX = "COUNT_0020XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField WHEN_SUCCESSFUL_SF { get { return GetElementByName<ICheckField>(Names.WHEN_SUCCESSFUL_SF); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField DB_ERROR_SF { get { return GetElementByName<ICheckField>(Names.DB_ERROR_SF); } }
        public ICheckField ABORT_SHOW_DBMS_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_DBMS_MSG_SF); } }
        public ICheckField ABORT_SHOW_USER_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_USER_MSG_SF); } }
        public ICheckField RETRY_TRAN_REQUESTED_SF { get { return GetElementByName<ICheckField>(Names.RETRY_TRAN_REQUESTED_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public ICheckField ASYNC_WHEN_AVAILABLE_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_AVAILABLE_SF); } }
        public ICheckField ASYNC_WHEN_ACCEPTED_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_ACCEPTED_SF); } }
        public ICheckField ASYNC_WHEN_NOT_ACCEPTED_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_NOT_ACCEPTED_SF); } }
        public ICheckField ASYNC_WHEN_INVALID_ID_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_INVALID_ID_SF); } }
        public ICheckField ASYNC_WHEN_PENDING_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_PENDING_SF); } }
        public ICheckField ASYNC_WHEN_SERVER_ERROR_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_SERVER_ERROR_SF); } }
        public ICheckField ASYNC_WHEN_COMM_ERROR_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_COMM_ERROR_SF); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DB_DEADLOCK_TIMOUT_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_DEADLOCK_TIMOUT_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_TIRDATE_SKIP_VAL { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SKIP_VAL); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IField TX_RETRY_COUNT { get { return GetElementByName<IField>(Names.TX_RETRY_COUNT); } }
        public IField TX_USER_RETRY_ALLOWED { get { return GetElementByName<IField>(Names.TX_USER_RETRY_ALLOWED); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup PSMGR_ASYNC_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ASYNC_DATA); } }
        public IField ASYNC_MODE { get { return GetElementByName<IField>(Names.ASYNC_MODE); } }
        public ICheckField FLOW_TYPE_SYNC { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_SYNC); } }
        public ICheckField FLOW_TYPE_ASYNC { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_ASYNC); } }
        public ICheckField FLOW_TYPE_NO_RESPONSE { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_NO_RESPONSE); } }
        public IField ASYNC_FLOW_STATUS_TABLE_PTR { get { return GetElementByName<IField>(Names.ASYNC_FLOW_STATUS_TABLE_PTR); } }
        public IField ASYNC_SERVER_LOC_TABLE_PTR { get { return GetElementByName<IField>(Names.ASYNC_SERVER_LOC_TABLE_PTR); } }
        public IGroup PSMGR_HEAP { get { return GetElementByName<IGroup>(Names.PSMGR_HEAP); } }
        public IGroup HEAP_CFB { get { return GetElementByName<IGroup>(Names.HEAP_CFB); } }
        public IField HEAP_CFB_ADDR { get { return GetElementByName<IField>(Names.HEAP_CFB_ADDR); } }
        public IField HEAP_CFB_ADDR_RESV { get { return GetElementByName<IField>(Names.HEAP_CFB_ADDR_RESV); } }
        public IField HEAP_CFB_ID { get { return GetElementByName<IField>(Names.HEAP_CFB_ID); } }
        public IField HEAP_CFB_LEN { get { return GetElementByName<IField>(Names.HEAP_CFB_LEN); } }
        public IGroup HEAP_WGLOB { get { return GetElementByName<IGroup>(Names.HEAP_WGLOB); } }
        public IField HEAP_WGLOB_ADDR { get { return GetElementByName<IField>(Names.HEAP_WGLOB_ADDR); } }
        public IField HEAP_WGLOB_ADDR_RESV { get { return GetElementByName<IField>(Names.HEAP_WGLOB_ADDR_RESV); } }
        public IField HEAP_WGLOB_ID { get { return GetElementByName<IField>(Names.HEAP_WGLOB_ID); } }
        public IField HEAP_WGLOB_LEN { get { return GetElementByName<IField>(Names.HEAP_WGLOB_LEN); } }
        public IField PSMGR_MMCB { get { return GetElementByName<IField>(Names.PSMGR_MMCB); } }
        public IField PSMGR_MMCB_ACTIVE { get { return GetElementByName<IField>(Names.PSMGR_MMCB_ACTIVE); } }
        public IGroup IMPORT_EAB_DML_FLAG_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_EAB_DML_FLAG_0001EV); } }
        public IGroup IEF_SUPPLIED_0001ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0001ET); } }
        public IField FLAG_0001AS { get { return GetElementByName<IField>(Names.FLAG_0001AS); } }
        public IField FLAG_0001 { get { return GetElementByName<IField>(Names.FLAG_0001); } }
        public IField FLAG_0001XX { get { return GetElementByName<IField>(Names.FLAG_0001XX); } }
        public IGroup IMPORT_UPDATE_PERSON_WO_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_UPDATE_PERSON_WO_0002EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0002ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0002ET); } }
        public IField REPLICATION_INDICATOR_0002AS { get { return GetElementByName<IField>(Names.REPLICATION_INDICATOR_0002AS); } }
        public IField REPLICATION_INDICATOR_0002 { get { return GetElementByName<IField>(Names.REPLICATION_INDICATOR_0002); } }
        public IField REPLICATION_INDICATOR_0002XX { get { return GetElementByName<IField>(Names.REPLICATION_INDICATOR_0002XX); } }
        public IField FORMATTED_NAME_0002AS { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0002AS); } }
        public IField FORMATTED_NAME_0002 { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0002); } }
        public IField FORMATTED_NAME_0002XX { get { return GetElementByName<IField>(Names.FORMATTED_NAME_0002XX); } }
        public IField NUMBER_0002AS { get { return GetElementByName<IField>(Names.NUMBER_0002AS); } }
        public IField NUMBER_0002 { get { return GetElementByName<IField>(Names.NUMBER_0002); } }
        public IField NUMBER_0002XX { get { return GetElementByName<IField>(Names.NUMBER_0002XX); } }
        public IField SSN_0002AS { get { return GetElementByName<IField>(Names.SSN_0002AS); } }
        public IField SSN_0002 { get { return GetElementByName<IField>(Names.SSN_0002); } }
        public IField SSN_0002XX { get { return GetElementByName<IField>(Names.SSN_0002XX); } }
        public IField DOB_0002AS { get { return GetElementByName<IField>(Names.DOB_0002AS); } }
        public IField DOB_0002 { get { return GetElementByName<IField>(Names.DOB_0002); } }
        public IField DOB_0002XX { get { return GetElementByName<IField>(Names.DOB_0002XX); } }
        public IField SEX_0002AS { get { return GetElementByName<IField>(Names.SEX_0002AS); } }
        public IField SEX_0002 { get { return GetElementByName<IField>(Names.SEX_0002); } }
        public IField SEX_0002XX { get { return GetElementByName<IField>(Names.SEX_0002XX); } }
        public IField FIRST_NAME_0002AS { get { return GetElementByName<IField>(Names.FIRST_NAME_0002AS); } }
        public IField FIRST_NAME_0002 { get { return GetElementByName<IField>(Names.FIRST_NAME_0002); } }
        public IField FIRST_NAME_0002XX { get { return GetElementByName<IField>(Names.FIRST_NAME_0002XX); } }
        public IField MIDDLE_INITIAL_0002AS { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002AS); } }
        public IField MIDDLE_INITIAL_0002 { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002); } }
        public IField MIDDLE_INITIAL_0002XX { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002XX); } }
        public IField LAST_NAME_0002AS { get { return GetElementByName<IField>(Names.LAST_NAME_0002AS); } }
        public IField LAST_NAME_0002 { get { return GetElementByName<IField>(Names.LAST_NAME_0002); } }
        public IField LAST_NAME_0002XX { get { return GetElementByName<IField>(Names.LAST_NAME_0002XX); } }
        public IGroup IMPORT_UPDATE_PREFERRED_0003EV { get { return GetElementByName<IGroup>(Names.IMPORT_UPDATE_PREFERRED_0003EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0003ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0003ET); } }
        public IField NUMBER_0003AS { get { return GetElementByName<IField>(Names.NUMBER_0003AS); } }
        public IField NUMBER_0003 { get { return GetElementByName<IField>(Names.NUMBER_0003); } }
        public IField NUMBER_0003XX { get { return GetElementByName<IField>(Names.NUMBER_0003XX); } }
        public IGroup GROUP_IMPORT_INPUT_IDS_0001RG { get { return GetElementByName<IGroup>(Names.GROUP_IMPORT_INPUT_IDS_0001RG); } }
        public IField GROUP_IMPORT_INPUT_IDS_0001MA { get { return GetElementByName<IField>(Names.GROUP_IMPORT_INPUT_IDS_0001MA); } }
        public IField GROUP_IMPORT_INPUT_IDS_0001MX { get { return GetElementByName<IField>(Names.GROUP_IMPORT_INPUT_IDS_0001MX); } }
        public IArrayElementAccessor<IGroup> GROUP_IMPORT_INPUT_IDS_0001 { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_IMPORT_INPUT_IDS_0001); } }
        public IArrayElementAccessor<IField> GROUP_IMPORT_INPUT_IDS_0001AC { get { return GetArrayElementAccessor<IField>(Names.GROUP_IMPORT_INPUT_IDS_0001AC); } }
        public IArrayElementAccessor<IGroup> G_IMPORT_INPUT_IDS_0004EV { get { return GetArrayElementAccessor<IGroup>(Names.G_IMPORT_INPUT_IDS_0004EV); } }
        public IArrayElementAccessor<IGroup> CSE_PERSONS_WORK_SET_0004ET { get { return GetArrayElementAccessor<IGroup>(Names.CSE_PERSONS_WORK_SET_0004ET); } }
        public IArrayElementAccessor<IField> NUMBER_0004AS { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0004AS); } }
        public IArrayElementAccessor<IField> NUMBER_0004 { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0004); } }
        public IArrayElementAccessor<IField> NUMBER_0004XX { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0004XX); } }
        public IGroup GROUP_IMPORT_LIST_0002RG { get { return GetElementByName<IGroup>(Names.GROUP_IMPORT_LIST_0002RG); } }
        public IField GROUP_IMPORT_LIST_0002MA { get { return GetElementByName<IField>(Names.GROUP_IMPORT_LIST_0002MA); } }
        public IField GROUP_IMPORT_LIST_0002MX { get { return GetElementByName<IField>(Names.GROUP_IMPORT_LIST_0002MX); } }
        public IArrayElementAccessor<IGroup> GROUP_IMPORT_LIST_0002 { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_IMPORT_LIST_0002); } }
        public IArrayElementAccessor<IField> GROUP_IMPORT_LIST_0002AC { get { return GetArrayElementAccessor<IField>(Names.GROUP_IMPORT_LIST_0002AC); } }
        public IArrayElementAccessor<IGroup> G_IMPORT_0005EV { get { return GetArrayElementAccessor<IGroup>(Names.G_IMPORT_0005EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0005ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0005ET); } }
        public IArrayElementAccessor<IField> SELECT_CHAR_0005AS { get { return GetArrayElementAccessor<IField>(Names.SELECT_CHAR_0005AS); } }
        public IArrayElementAccessor<IField> SELECT_CHAR_0005 { get { return GetArrayElementAccessor<IField>(Names.SELECT_CHAR_0005); } }
        public IArrayElementAccessor<IField> SELECT_CHAR_0005XX { get { return GetArrayElementAccessor<IField>(Names.SELECT_CHAR_0005XX); } }
        public IArrayElementAccessor<IGroup> G_IMPORT_PERSON_INFO_0006EV { get { return GetArrayElementAccessor<IGroup>(Names.G_IMPORT_PERSON_INFO_0006EV); } }
        public IArrayElementAccessor<IGroup> CSE_PERSONS_WORK_SET_0006ET { get { return GetArrayElementAccessor<IGroup>(Names.CSE_PERSONS_WORK_SET_0006ET); } }
        public IArrayElementAccessor<IField> REPLICATION_INDICATOR_0006AS { get { return GetArrayElementAccessor<IField>(Names.REPLICATION_INDICATOR_0006AS); } }
        public IArrayElementAccessor<IField> REPLICATION_INDICATOR_0006 { get { return GetArrayElementAccessor<IField>(Names.REPLICATION_INDICATOR_0006); } }
        public IArrayElementAccessor<IField> REPLICATION_INDICATOR_0006XX { get { return GetArrayElementAccessor<IField>(Names.REPLICATION_INDICATOR_0006XX); } }
        public IArrayElementAccessor<IField> FORMATTED_NAME_0006AS { get { return GetArrayElementAccessor<IField>(Names.FORMATTED_NAME_0006AS); } }
        public IArrayElementAccessor<IField> FORMATTED_NAME_0006 { get { return GetArrayElementAccessor<IField>(Names.FORMATTED_NAME_0006); } }
        public IArrayElementAccessor<IField> FORMATTED_NAME_0006XX { get { return GetArrayElementAccessor<IField>(Names.FORMATTED_NAME_0006XX); } }
        public IArrayElementAccessor<IField> NUMBER_0006AS { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0006AS); } }
        public IArrayElementAccessor<IField> NUMBER_0006 { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0006); } }
        public IArrayElementAccessor<IField> NUMBER_0006XX { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0006XX); } }
        public IArrayElementAccessor<IField> SSN_0006AS { get { return GetArrayElementAccessor<IField>(Names.SSN_0006AS); } }
        public IArrayElementAccessor<IField> SSN_0006 { get { return GetArrayElementAccessor<IField>(Names.SSN_0006); } }
        public IArrayElementAccessor<IField> SSN_0006XX { get { return GetArrayElementAccessor<IField>(Names.SSN_0006XX); } }
        public IArrayElementAccessor<IField> DOB_0006AS { get { return GetArrayElementAccessor<IField>(Names.DOB_0006AS); } }
        public IArrayElementAccessor<IField> DOB_0006 { get { return GetArrayElementAccessor<IField>(Names.DOB_0006); } }
        public IArrayElementAccessor<IField> DOB_0006XX { get { return GetArrayElementAccessor<IField>(Names.DOB_0006XX); } }
        public IArrayElementAccessor<IField> SEX_0006AS { get { return GetArrayElementAccessor<IField>(Names.SEX_0006AS); } }
        public IArrayElementAccessor<IField> SEX_0006 { get { return GetArrayElementAccessor<IField>(Names.SEX_0006); } }
        public IArrayElementAccessor<IField> SEX_0006XX { get { return GetArrayElementAccessor<IField>(Names.SEX_0006XX); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0006AS { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0006AS); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0006 { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0006); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0006XX { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0006XX); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0006AS { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0006AS); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0006 { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0006); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0006XX { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0006XX); } }
        public IArrayElementAccessor<IField> LAST_NAME_0006AS { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0006AS); } }
        public IArrayElementAccessor<IField> LAST_NAME_0006 { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0006); } }
        public IArrayElementAccessor<IField> LAST_NAME_0006XX { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0006XX); } }
        public IArrayElementAccessor<IGroup> G_IMPORT_AE_FLAG_0007EV { get { return GetArrayElementAccessor<IGroup>(Names.G_IMPORT_AE_FLAG_0007EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0007ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0007ET); } }
        public IArrayElementAccessor<IField> FLAG_0007AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0007AS); } }
        public IArrayElementAccessor<IField> FLAG_0007 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0007); } }
        public IArrayElementAccessor<IField> FLAG_0007XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0007XX); } }
        public IArrayElementAccessor<IGroup> G_IMPORT_CS_FLAG_0008EV { get { return GetArrayElementAccessor<IGroup>(Names.G_IMPORT_CS_FLAG_0008EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0008ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0008ET); } }
        public IArrayElementAccessor<IField> FLAG_0008AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0008AS); } }
        public IArrayElementAccessor<IField> FLAG_0008 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0008); } }
        public IArrayElementAccessor<IField> FLAG_0008XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0008XX); } }
        public IArrayElementAccessor<IGroup> G_IMPORT_FA_FLAG_0009EV { get { return GetArrayElementAccessor<IGroup>(Names.G_IMPORT_FA_FLAG_0009EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0009ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0009ET); } }
        public IArrayElementAccessor<IField> FLAG_0009AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0009AS); } }
        public IArrayElementAccessor<IField> FLAG_0009 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0009); } }
        public IArrayElementAccessor<IField> FLAG_0009XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0009XX); } }
        public IArrayElementAccessor<IGroup> G_IMPORT_KM_FLAG_0010EV { get { return GetArrayElementAccessor<IGroup>(Names.G_IMPORT_KM_FLAG_0010EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0010ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0010ET); } }
        public IArrayElementAccessor<IField> FLAG_0010AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0010AS); } }
        public IArrayElementAccessor<IField> FLAG_0010 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0010); } }
        public IArrayElementAccessor<IField> FLAG_0010XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0010XX); } }
        public IArrayElementAccessor<IGroup> G_IMPORT_PREFERRED_ID_0011EV { get { return GetArrayElementAccessor<IGroup>(Names.G_IMPORT_PREFERRED_ID_0011EV); } }
        public IArrayElementAccessor<IGroup> CSE_PERSONS_WORK_SET_0011ET { get { return GetArrayElementAccessor<IGroup>(Names.CSE_PERSONS_WORK_SET_0011ET); } }
        public IArrayElementAccessor<IField> NUMBER_0011AS { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0011AS); } }
        public IArrayElementAccessor<IField> NUMBER_0011 { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0011); } }
        public IArrayElementAccessor<IField> NUMBER_0011XX { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0011XX); } }
        public IGroup EXPORT_EAB_DML_FLAG_0012EV { get { return GetElementByName<IGroup>(Names.EXPORT_EAB_DML_FLAG_0012EV); } }
        public IGroup IEF_SUPPLIED_0012ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0012ET); } }
        public IField FLAG_0012AS { get { return GetElementByName<IField>(Names.FLAG_0012AS); } }
        public IField FLAG_0012 { get { return GetElementByName<IField>(Names.FLAG_0012); } }
        public IField FLAG_0012XX { get { return GetElementByName<IField>(Names.FLAG_0012XX); } }
        public IGroup GROUP_EXPORT_LIST_0003RG { get { return GetElementByName<IGroup>(Names.GROUP_EXPORT_LIST_0003RG); } }
        public IField GROUP_EXPORT_LIST_0003MA { get { return GetElementByName<IField>(Names.GROUP_EXPORT_LIST_0003MA); } }
        public IField GROUP_EXPORT_LIST_0003MX { get { return GetElementByName<IField>(Names.GROUP_EXPORT_LIST_0003MX); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_LIST_0003 { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_LIST_0003); } }
        public IArrayElementAccessor<IField> GROUP_EXPORT_LIST_0003AC { get { return GetArrayElementAccessor<IField>(Names.GROUP_EXPORT_LIST_0003AC); } }
        public IArrayElementAccessor<IGroup> G_EXPORT_0013EV { get { return GetArrayElementAccessor<IGroup>(Names.G_EXPORT_0013EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0013ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0013ET); } }
        public IArrayElementAccessor<IField> SELECT_CHAR_0013AS { get { return GetArrayElementAccessor<IField>(Names.SELECT_CHAR_0013AS); } }
        public IArrayElementAccessor<IField> SELECT_CHAR_0013 { get { return GetArrayElementAccessor<IField>(Names.SELECT_CHAR_0013); } }
        public IArrayElementAccessor<IField> SELECT_CHAR_0013XX { get { return GetArrayElementAccessor<IField>(Names.SELECT_CHAR_0013XX); } }
        public IArrayElementAccessor<IGroup> G_EXPORT_PERSON_INFO_0014EV { get { return GetArrayElementAccessor<IGroup>(Names.G_EXPORT_PERSON_INFO_0014EV); } }
        public IArrayElementAccessor<IGroup> CSE_PERSONS_WORK_SET_0014ET { get { return GetArrayElementAccessor<IGroup>(Names.CSE_PERSONS_WORK_SET_0014ET); } }
        public IArrayElementAccessor<IField> REPLICATION_INDICATOR_0014AS { get { return GetArrayElementAccessor<IField>(Names.REPLICATION_INDICATOR_0014AS); } }
        public IArrayElementAccessor<IField> REPLICATION_INDICATOR_0014 { get { return GetArrayElementAccessor<IField>(Names.REPLICATION_INDICATOR_0014); } }
        public IArrayElementAccessor<IField> REPLICATION_INDICATOR_0014XX { get { return GetArrayElementAccessor<IField>(Names.REPLICATION_INDICATOR_0014XX); } }
        public IArrayElementAccessor<IField> FORMATTED_NAME_0014AS { get { return GetArrayElementAccessor<IField>(Names.FORMATTED_NAME_0014AS); } }
        public IArrayElementAccessor<IField> FORMATTED_NAME_0014 { get { return GetArrayElementAccessor<IField>(Names.FORMATTED_NAME_0014); } }
        public IArrayElementAccessor<IField> FORMATTED_NAME_0014XX { get { return GetArrayElementAccessor<IField>(Names.FORMATTED_NAME_0014XX); } }
        public IArrayElementAccessor<IField> NUMBER_0014AS { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0014AS); } }
        public IArrayElementAccessor<IField> NUMBER_0014 { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0014); } }
        public IArrayElementAccessor<IField> NUMBER_0014XX { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0014XX); } }
        public IArrayElementAccessor<IField> SSN_0014AS { get { return GetArrayElementAccessor<IField>(Names.SSN_0014AS); } }
        public IArrayElementAccessor<IField> SSN_0014 { get { return GetArrayElementAccessor<IField>(Names.SSN_0014); } }
        public IArrayElementAccessor<IField> SSN_0014XX { get { return GetArrayElementAccessor<IField>(Names.SSN_0014XX); } }
        public IArrayElementAccessor<IField> DOB_0014AS { get { return GetArrayElementAccessor<IField>(Names.DOB_0014AS); } }
        public IArrayElementAccessor<IField> DOB_0014 { get { return GetArrayElementAccessor<IField>(Names.DOB_0014); } }
        public IArrayElementAccessor<IField> DOB_0014XX { get { return GetArrayElementAccessor<IField>(Names.DOB_0014XX); } }
        public IArrayElementAccessor<IField> SEX_0014AS { get { return GetArrayElementAccessor<IField>(Names.SEX_0014AS); } }
        public IArrayElementAccessor<IField> SEX_0014 { get { return GetArrayElementAccessor<IField>(Names.SEX_0014); } }
        public IArrayElementAccessor<IField> SEX_0014XX { get { return GetArrayElementAccessor<IField>(Names.SEX_0014XX); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0014AS { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0014AS); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0014 { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0014); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0014XX { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0014XX); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0014AS { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0014AS); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0014 { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0014); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0014XX { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0014XX); } }
        public IArrayElementAccessor<IField> LAST_NAME_0014AS { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0014AS); } }
        public IArrayElementAccessor<IField> LAST_NAME_0014 { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0014); } }
        public IArrayElementAccessor<IField> LAST_NAME_0014XX { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0014XX); } }
        public IArrayElementAccessor<IGroup> G_EXPORT_AE_FLAG_0015EV { get { return GetArrayElementAccessor<IGroup>(Names.G_EXPORT_AE_FLAG_0015EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0015ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0015ET); } }
        public IArrayElementAccessor<IField> FLAG_0015AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0015AS); } }
        public IArrayElementAccessor<IField> FLAG_0015 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0015); } }
        public IArrayElementAccessor<IField> FLAG_0015XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0015XX); } }
        public IArrayElementAccessor<IGroup> G_EXPORT_CS_FLAG_0016EV { get { return GetArrayElementAccessor<IGroup>(Names.G_EXPORT_CS_FLAG_0016EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0016ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0016ET); } }
        public IArrayElementAccessor<IField> FLAG_0016AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0016AS); } }
        public IArrayElementAccessor<IField> FLAG_0016 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0016); } }
        public IArrayElementAccessor<IField> FLAG_0016XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0016XX); } }
        public IArrayElementAccessor<IGroup> G_EXPORT_FA_FLAG_0017EV { get { return GetArrayElementAccessor<IGroup>(Names.G_EXPORT_FA_FLAG_0017EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0017ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0017ET); } }
        public IArrayElementAccessor<IField> FLAG_0017AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0017AS); } }
        public IArrayElementAccessor<IField> FLAG_0017 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0017); } }
        public IArrayElementAccessor<IField> FLAG_0017XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0017XX); } }
        public IArrayElementAccessor<IGroup> G_EXPORT_KM_FLAG_0018EV { get { return GetArrayElementAccessor<IGroup>(Names.G_EXPORT_KM_FLAG_0018EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0018ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0018ET); } }
        public IArrayElementAccessor<IField> FLAG_0018AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0018AS); } }
        public IArrayElementAccessor<IField> FLAG_0018 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0018); } }
        public IArrayElementAccessor<IField> FLAG_0018XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0018XX); } }
        public IArrayElementAccessor<IGroup> G_EXPORT_PREFERRED_ID_0019EV { get { return GetArrayElementAccessor<IGroup>(Names.G_EXPORT_PREFERRED_ID_0019EV); } }
        public IArrayElementAccessor<IGroup> CSE_PERSONS_WORK_SET_0019ET { get { return GetArrayElementAccessor<IGroup>(Names.CSE_PERSONS_WORK_SET_0019ET); } }
        public IArrayElementAccessor<IField> NUMBER_0019AS { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0019AS); } }
        public IArrayElementAccessor<IField> NUMBER_0019 { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0019); } }
        public IArrayElementAccessor<IField> NUMBER_0019XX { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0019XX); } }
        public IGroup EXPORT_DML_RETURN_CODE_0020EV { get { return GetElementByName<IGroup>(Names.EXPORT_DML_RETURN_CODE_0020EV); } }
        public IGroup IEF_SUPPLIED_0020ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0020ET); } }
        public IField COUNT_0020AS { get { return GetElementByName<IField>(Names.COUNT_0020AS); } }
        public IField COUNT_0020 { get { return GetElementByName<IField>(Names.COUNT_0020); } }
        public IField COUNT_0020XX { get { return GetElementByName<IField>(Names.COUNT_0020XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.WHEN_SUCCESSFUL_SF, SPACES)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.DB_ERROR_SF, "DB")
                       .NewCheckField(Names.ABORT_SHOW_DBMS_MSG_SF, "AB")
                       .NewCheckField(Names.ABORT_SHOW_USER_MSG_SF, "AM")
                       .NewCheckField(Names.RETRY_TRAN_REQUESTED_SF, "RT")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       .NewCheckField(Names.ASYNC_WHEN_AVAILABLE_SF, SPACES)
                       .NewCheckField(Names.ASYNC_WHEN_ACCEPTED_SF, SPACES)
                       .NewCheckField(Names.ASYNC_WHEN_NOT_ACCEPTED_SF, "NA")
                       .NewCheckField(Names.ASYNC_WHEN_INVALID_ID_SF, "II")
                       .NewCheckField(Names.ASYNC_WHEN_PENDING_SF, "PE")
                       .NewCheckField(Names.ASYNC_WHEN_SERVER_ERROR_SF, "SS")
                       .NewCheckField(Names.ASYNC_WHEN_COMM_ERROR_SF, "CE")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DB_DEADLOCK_TIMOUT_FL_LS, "DT")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d9", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d9) =>
                   {
                       FILLER_d9.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d9.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d9.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_SKIP_VAL, FieldType.String, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(95, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 8);
               });
               GLOBDATA.CreateNewField(Names.TX_RETRY_COUNT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_USER_RETRY_ALLOWED, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(3, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ASYNC_DATA, (PSMGR_ASYNC_DATA) =>
               {
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_MODE, FieldType.String, 1)
                       .NewCheckField(Names.FLOW_TYPE_SYNC, SPACE)
                       .NewCheckField(Names.FLOW_TYPE_ASYNC, "A")
                       .NewCheckField(Names.FLOW_TYPE_NO_RESPONSE, "N")
                       ;
                   PSMGR_ASYNC_DATA.CreateNewFillerField(1, FillWith.Hashes);
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_FLOW_STATUS_TABLE_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_SERVER_LOC_TABLE_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_HEAP, (PSMGR_HEAP) =>
               {
                   PSMGR_HEAP.CreateNewGroup(Names.HEAP_CFB, (HEAP_CFB) =>
                   {
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_ADDR, FieldType.ReferencePointer, 4);
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_ADDR_RESV, FieldType.SignedNumeric, 9);
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_ID, FieldType.SignedNumeric, 9);
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_LEN, FieldType.SignedNumeric, 9);
                   });
                   PSMGR_HEAP.CreateNewGroup(Names.HEAP_WGLOB, (HEAP_WGLOB) =>
                   {
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_ADDR, FieldType.ReferencePointer, 4);
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_ADDR_RESV, FieldType.SignedNumeric, 9);
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_ID, FieldType.SignedNumeric, 9);
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_LEN, FieldType.SignedNumeric, 9);
                   });
               });
               GLOBDATA.CreateNewField(Names.PSMGR_MMCB, FieldType.CompInt, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_MMCB_ACTIVE, FieldType.String, 4);
               GLOBDATA.CreateNewFillerField(149, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_EAB_DML_FLAG_0001EV, (IMPORT_EAB_DML_FLAG_0001EV) =>
           {
               IMPORT_EAB_DML_FLAG_0001EV.CreateNewGroup(Names.IEF_SUPPLIED_0001ET, (IEF_SUPPLIED_0001ET) =>
               {
                   IEF_SUPPLIED_0001ET.CreateNewField(Names.FLAG_0001AS, FieldType.String, 1);

                   IField FLAG_0001_local = IEF_SUPPLIED_0001ET.CreateNewField(Names.FLAG_0001, FieldType.String, 1);
                   IEF_SUPPLIED_0001ET.CreateNewFieldRedefine(Names.FLAG_0001XX, FieldType.String, FLAG_0001_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_UPDATE_PERSON_WO_0002EV, (IMPORT_UPDATE_PERSON_WO_0002EV) =>
           {
               IMPORT_UPDATE_PERSON_WO_0002EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0002ET, (CSE_PERSONS_WORK_SET_0002ET) =>
               {
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.REPLICATION_INDICATOR_0002AS, FieldType.String, 1);

                   IField REPLICATION_INDICATOR_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.REPLICATION_INDICATOR_0002, FieldType.String, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.REPLICATION_INDICATOR_0002XX, FieldType.String, REPLICATION_INDICATOR_0002_local, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FORMATTED_NAME_0002AS, FieldType.String, 1);

                   IField FORMATTED_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FORMATTED_NAME_0002, FieldType.String, 33);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.FORMATTED_NAME_0002XX, FieldType.String, FORMATTED_NAME_0002_local, 33);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.NUMBER_0002AS, FieldType.String, 1);

                   IField NUMBER_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.NUMBER_0002, FieldType.String, 10);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.NUMBER_0002XX, FieldType.String, NUMBER_0002_local, 10);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SSN_0002AS, FieldType.String, 1);

                   IField SSN_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SSN_0002, FieldType.String, 9);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.SSN_0002XX, FieldType.String, SSN_0002_local, 9);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.DOB_0002AS, FieldType.String, 1);

                   IField DOB_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.DOB_0002, FieldType.SignedNumeric, 8);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.DOB_0002XX, FieldType.String, DOB_0002_local, 8);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SEX_0002AS, FieldType.String, 1);

                   IField SEX_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SEX_0002, FieldType.String, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.SEX_0002XX, FieldType.String, SEX_0002_local, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FIRST_NAME_0002AS, FieldType.String, 1);

                   IField FIRST_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FIRST_NAME_0002, FieldType.String, 12);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.FIRST_NAME_0002XX, FieldType.String, FIRST_NAME_0002_local, 12);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.MIDDLE_INITIAL_0002AS, FieldType.String, 1);

                   IField MIDDLE_INITIAL_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.MIDDLE_INITIAL_0002, FieldType.String, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0002XX, FieldType.String, MIDDLE_INITIAL_0002_local, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.LAST_NAME_0002AS, FieldType.String, 1);

                   IField LAST_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.LAST_NAME_0002, FieldType.String, 17);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.LAST_NAME_0002XX, FieldType.String, LAST_NAME_0002_local, 17);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_UPDATE_PREFERRED_0003EV, (IMPORT_UPDATE_PREFERRED_0003EV) =>
           {
               IMPORT_UPDATE_PREFERRED_0003EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0003ET, (CSE_PERSONS_WORK_SET_0003ET) =>
               {
                   CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.NUMBER_0003AS, FieldType.String, 1);

                   IField NUMBER_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.NUMBER_0003, FieldType.String, 10);
                   CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.NUMBER_0003XX, FieldType.String, NUMBER_0003_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.GROUP_IMPORT_INPUT_IDS_0001RG, (GROUP_IMPORT_INPUT_IDS_0001RG) =>
           {

               IField GROUP_IMPORT_INPUT_IDS_0001MA_local = GROUP_IMPORT_INPUT_IDS_0001RG.CreateNewField(Names.GROUP_IMPORT_INPUT_IDS_0001MA, FieldType.SignedNumeric, 4);
               GROUP_IMPORT_INPUT_IDS_0001RG.CreateNewFieldRedefine(Names.GROUP_IMPORT_INPUT_IDS_0001MX, FieldType.String, GROUP_IMPORT_INPUT_IDS_0001MA_local, 4);
               GROUP_IMPORT_INPUT_IDS_0001RG.CreateNewGroupArray(Names.GROUP_IMPORT_INPUT_IDS_0001, 10, (GROUP_IMPORT_INPUT_IDS_0001) =>
               {
                   GROUP_IMPORT_INPUT_IDS_0001.CreateNewField(Names.GROUP_IMPORT_INPUT_IDS_0001AC, FieldType.String, 1);
                   GROUP_IMPORT_INPUT_IDS_0001.CreateNewGroup(Names.G_IMPORT_INPUT_IDS_0004EV, (G_IMPORT_INPUT_IDS_0004EV) =>
                   {
                       G_IMPORT_INPUT_IDS_0004EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0004ET, (CSE_PERSONS_WORK_SET_0004ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.NUMBER_0004AS, FieldType.String, 1);

                           IField NUMBER_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.NUMBER_0004, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.NUMBER_0004XX, FieldType.String, NUMBER_0004_local, 10);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.GROUP_IMPORT_LIST_0002RG, (GROUP_IMPORT_LIST_0002RG) =>
           {

               IField GROUP_IMPORT_LIST_0002MA_local = GROUP_IMPORT_LIST_0002RG.CreateNewField(Names.GROUP_IMPORT_LIST_0002MA, FieldType.SignedNumeric, 4);
               GROUP_IMPORT_LIST_0002RG.CreateNewFieldRedefine(Names.GROUP_IMPORT_LIST_0002MX, FieldType.String, GROUP_IMPORT_LIST_0002MA_local, 4);
               GROUP_IMPORT_LIST_0002RG.CreateNewGroupArray(Names.GROUP_IMPORT_LIST_0002, 10, (GROUP_IMPORT_LIST_0002) =>
               {
                   GROUP_IMPORT_LIST_0002.CreateNewField(Names.GROUP_IMPORT_LIST_0002AC, FieldType.String, 1);
                   GROUP_IMPORT_LIST_0002.CreateNewGroup(Names.G_IMPORT_0005EV, (G_IMPORT_0005EV) =>
                   {
                       G_IMPORT_0005EV.CreateNewGroup(Names.IEF_SUPPLIED_0005ET, (IEF_SUPPLIED_0005ET) =>
                       {
                           IEF_SUPPLIED_0005ET.CreateNewField(Names.SELECT_CHAR_0005AS, FieldType.String, 1);

                           IField SELECT_CHAR_0005_local = IEF_SUPPLIED_0005ET.CreateNewField(Names.SELECT_CHAR_0005, FieldType.String, 1);
                           IEF_SUPPLIED_0005ET.CreateNewFieldRedefine(Names.SELECT_CHAR_0005XX, FieldType.String, SELECT_CHAR_0005_local, 1);
                       });
                   });
                   GROUP_IMPORT_LIST_0002.CreateNewGroup(Names.G_IMPORT_PERSON_INFO_0006EV, (G_IMPORT_PERSON_INFO_0006EV) =>
                   {
                       G_IMPORT_PERSON_INFO_0006EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0006ET, (CSE_PERSONS_WORK_SET_0006ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.REPLICATION_INDICATOR_0006AS, FieldType.String, 1);

                           IField REPLICATION_INDICATOR_0006_local = CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.REPLICATION_INDICATOR_0006, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewFieldRedefine(Names.REPLICATION_INDICATOR_0006XX, FieldType.String, REPLICATION_INDICATOR_0006_local, 1);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.FORMATTED_NAME_0006AS, FieldType.String, 1);

                           IField FORMATTED_NAME_0006_local = CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.FORMATTED_NAME_0006, FieldType.String, 33);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewFieldRedefine(Names.FORMATTED_NAME_0006XX, FieldType.String, FORMATTED_NAME_0006_local, 33);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.NUMBER_0006AS, FieldType.String, 1);

                           IField NUMBER_0006_local = CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.NUMBER_0006, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewFieldRedefine(Names.NUMBER_0006XX, FieldType.String, NUMBER_0006_local, 10);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.SSN_0006AS, FieldType.String, 1);

                           IField SSN_0006_local = CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.SSN_0006, FieldType.String, 9);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewFieldRedefine(Names.SSN_0006XX, FieldType.String, SSN_0006_local, 9);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.DOB_0006AS, FieldType.String, 1);

                           IField DOB_0006_local = CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.DOB_0006, FieldType.SignedNumeric, 8);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewFieldRedefine(Names.DOB_0006XX, FieldType.String, DOB_0006_local, 8);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.SEX_0006AS, FieldType.String, 1);

                           IField SEX_0006_local = CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.SEX_0006, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewFieldRedefine(Names.SEX_0006XX, FieldType.String, SEX_0006_local, 1);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.FIRST_NAME_0006AS, FieldType.String, 1);

                           IField FIRST_NAME_0006_local = CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.FIRST_NAME_0006, FieldType.String, 12);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewFieldRedefine(Names.FIRST_NAME_0006XX, FieldType.String, FIRST_NAME_0006_local, 12);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.MIDDLE_INITIAL_0006AS, FieldType.String, 1);

                           IField MIDDLE_INITIAL_0006_local = CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.MIDDLE_INITIAL_0006, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0006XX, FieldType.String, MIDDLE_INITIAL_0006_local, 1);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.LAST_NAME_0006AS, FieldType.String, 1);

                           IField LAST_NAME_0006_local = CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.LAST_NAME_0006, FieldType.String, 17);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewFieldRedefine(Names.LAST_NAME_0006XX, FieldType.String, LAST_NAME_0006_local, 17);
                       });
                   });
                   GROUP_IMPORT_LIST_0002.CreateNewGroup(Names.G_IMPORT_AE_FLAG_0007EV, (G_IMPORT_AE_FLAG_0007EV) =>
                   {
                       G_IMPORT_AE_FLAG_0007EV.CreateNewGroup(Names.IEF_SUPPLIED_0007ET, (IEF_SUPPLIED_0007ET) =>
                       {
                           IEF_SUPPLIED_0007ET.CreateNewField(Names.FLAG_0007AS, FieldType.String, 1);

                           IField FLAG_0007_local = IEF_SUPPLIED_0007ET.CreateNewField(Names.FLAG_0007, FieldType.String, 1);
                           IEF_SUPPLIED_0007ET.CreateNewFieldRedefine(Names.FLAG_0007XX, FieldType.String, FLAG_0007_local, 1);
                       });
                   });
                   GROUP_IMPORT_LIST_0002.CreateNewGroup(Names.G_IMPORT_CS_FLAG_0008EV, (G_IMPORT_CS_FLAG_0008EV) =>
                   {
                       G_IMPORT_CS_FLAG_0008EV.CreateNewGroup(Names.IEF_SUPPLIED_0008ET, (IEF_SUPPLIED_0008ET) =>
                       {
                           IEF_SUPPLIED_0008ET.CreateNewField(Names.FLAG_0008AS, FieldType.String, 1);

                           IField FLAG_0008_local = IEF_SUPPLIED_0008ET.CreateNewField(Names.FLAG_0008, FieldType.String, 1);
                           IEF_SUPPLIED_0008ET.CreateNewFieldRedefine(Names.FLAG_0008XX, FieldType.String, FLAG_0008_local, 1);
                       });
                   });
                   GROUP_IMPORT_LIST_0002.CreateNewGroup(Names.G_IMPORT_FA_FLAG_0009EV, (G_IMPORT_FA_FLAG_0009EV) =>
                   {
                       G_IMPORT_FA_FLAG_0009EV.CreateNewGroup(Names.IEF_SUPPLIED_0009ET, (IEF_SUPPLIED_0009ET) =>
                       {
                           IEF_SUPPLIED_0009ET.CreateNewField(Names.FLAG_0009AS, FieldType.String, 1);

                           IField FLAG_0009_local = IEF_SUPPLIED_0009ET.CreateNewField(Names.FLAG_0009, FieldType.String, 1);
                           IEF_SUPPLIED_0009ET.CreateNewFieldRedefine(Names.FLAG_0009XX, FieldType.String, FLAG_0009_local, 1);
                       });
                   });
                   GROUP_IMPORT_LIST_0002.CreateNewGroup(Names.G_IMPORT_KM_FLAG_0010EV, (G_IMPORT_KM_FLAG_0010EV) =>
                   {
                       G_IMPORT_KM_FLAG_0010EV.CreateNewGroup(Names.IEF_SUPPLIED_0010ET, (IEF_SUPPLIED_0010ET) =>
                       {
                           IEF_SUPPLIED_0010ET.CreateNewField(Names.FLAG_0010AS, FieldType.String, 1);

                           IField FLAG_0010_local = IEF_SUPPLIED_0010ET.CreateNewField(Names.FLAG_0010, FieldType.String, 1);
                           IEF_SUPPLIED_0010ET.CreateNewFieldRedefine(Names.FLAG_0010XX, FieldType.String, FLAG_0010_local, 1);
                       });
                   });
                   GROUP_IMPORT_LIST_0002.CreateNewGroup(Names.G_IMPORT_PREFERRED_ID_0011EV, (G_IMPORT_PREFERRED_ID_0011EV) =>
                   {
                       G_IMPORT_PREFERRED_ID_0011EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0011ET, (CSE_PERSONS_WORK_SET_0011ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0011ET.CreateNewField(Names.NUMBER_0011AS, FieldType.String, 1);

                           IField NUMBER_0011_local = CSE_PERSONS_WORK_SET_0011ET.CreateNewField(Names.NUMBER_0011, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0011ET.CreateNewFieldRedefine(Names.NUMBER_0011XX, FieldType.String, NUMBER_0011_local, 10);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_EAB_DML_FLAG_0012EV, (EXPORT_EAB_DML_FLAG_0012EV) =>
           {
               EXPORT_EAB_DML_FLAG_0012EV.CreateNewGroup(Names.IEF_SUPPLIED_0012ET, (IEF_SUPPLIED_0012ET) =>
               {
                   IEF_SUPPLIED_0012ET.CreateNewField(Names.FLAG_0012AS, FieldType.String, 1);

                   IField FLAG_0012_local = IEF_SUPPLIED_0012ET.CreateNewField(Names.FLAG_0012, FieldType.String, 1);
                   IEF_SUPPLIED_0012ET.CreateNewFieldRedefine(Names.FLAG_0012XX, FieldType.String, FLAG_0012_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.GROUP_EXPORT_LIST_0003RG, (GROUP_EXPORT_LIST_0003RG) =>
           {

               IField GROUP_EXPORT_LIST_0003MA_local = GROUP_EXPORT_LIST_0003RG.CreateNewField(Names.GROUP_EXPORT_LIST_0003MA, FieldType.SignedNumeric, 4);
               GROUP_EXPORT_LIST_0003RG.CreateNewFieldRedefine(Names.GROUP_EXPORT_LIST_0003MX, FieldType.String, GROUP_EXPORT_LIST_0003MA_local, 4);
               GROUP_EXPORT_LIST_0003RG.CreateNewGroupArray(Names.GROUP_EXPORT_LIST_0003, 10, (GROUP_EXPORT_LIST_0003) =>
               {
                   GROUP_EXPORT_LIST_0003.CreateNewField(Names.GROUP_EXPORT_LIST_0003AC, FieldType.String, 1);
                   GROUP_EXPORT_LIST_0003.CreateNewGroup(Names.G_EXPORT_0013EV, (G_EXPORT_0013EV) =>
                   {
                       G_EXPORT_0013EV.CreateNewGroup(Names.IEF_SUPPLIED_0013ET, (IEF_SUPPLIED_0013ET) =>
                       {
                           IEF_SUPPLIED_0013ET.CreateNewField(Names.SELECT_CHAR_0013AS, FieldType.String, 1);

                           IField SELECT_CHAR_0013_local = IEF_SUPPLIED_0013ET.CreateNewField(Names.SELECT_CHAR_0013, FieldType.String, 1);
                           IEF_SUPPLIED_0013ET.CreateNewFieldRedefine(Names.SELECT_CHAR_0013XX, FieldType.String, SELECT_CHAR_0013_local, 1);
                       });
                   });
                   GROUP_EXPORT_LIST_0003.CreateNewGroup(Names.G_EXPORT_PERSON_INFO_0014EV, (G_EXPORT_PERSON_INFO_0014EV) =>
                   {
                       G_EXPORT_PERSON_INFO_0014EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0014ET, (CSE_PERSONS_WORK_SET_0014ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.REPLICATION_INDICATOR_0014AS, FieldType.String, 1);

                           IField REPLICATION_INDICATOR_0014_local = CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.REPLICATION_INDICATOR_0014, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewFieldRedefine(Names.REPLICATION_INDICATOR_0014XX, FieldType.String, REPLICATION_INDICATOR_0014_local, 1);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.FORMATTED_NAME_0014AS, FieldType.String, 1);

                           IField FORMATTED_NAME_0014_local = CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.FORMATTED_NAME_0014, FieldType.String, 33);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewFieldRedefine(Names.FORMATTED_NAME_0014XX, FieldType.String, FORMATTED_NAME_0014_local, 33);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.NUMBER_0014AS, FieldType.String, 1);

                           IField NUMBER_0014_local = CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.NUMBER_0014, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewFieldRedefine(Names.NUMBER_0014XX, FieldType.String, NUMBER_0014_local, 10);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.SSN_0014AS, FieldType.String, 1);

                           IField SSN_0014_local = CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.SSN_0014, FieldType.String, 9);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewFieldRedefine(Names.SSN_0014XX, FieldType.String, SSN_0014_local, 9);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.DOB_0014AS, FieldType.String, 1);

                           IField DOB_0014_local = CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.DOB_0014, FieldType.SignedNumeric, 8);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewFieldRedefine(Names.DOB_0014XX, FieldType.String, DOB_0014_local, 8);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.SEX_0014AS, FieldType.String, 1);

                           IField SEX_0014_local = CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.SEX_0014, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewFieldRedefine(Names.SEX_0014XX, FieldType.String, SEX_0014_local, 1);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.FIRST_NAME_0014AS, FieldType.String, 1);

                           IField FIRST_NAME_0014_local = CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.FIRST_NAME_0014, FieldType.String, 12);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewFieldRedefine(Names.FIRST_NAME_0014XX, FieldType.String, FIRST_NAME_0014_local, 12);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.MIDDLE_INITIAL_0014AS, FieldType.String, 1);

                           IField MIDDLE_INITIAL_0014_local = CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.MIDDLE_INITIAL_0014, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0014XX, FieldType.String, MIDDLE_INITIAL_0014_local, 1);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.LAST_NAME_0014AS, FieldType.String, 1);

                           IField LAST_NAME_0014_local = CSE_PERSONS_WORK_SET_0014ET.CreateNewField(Names.LAST_NAME_0014, FieldType.String, 17);
                           CSE_PERSONS_WORK_SET_0014ET.CreateNewFieldRedefine(Names.LAST_NAME_0014XX, FieldType.String, LAST_NAME_0014_local, 17);
                       });
                   });
                   GROUP_EXPORT_LIST_0003.CreateNewGroup(Names.G_EXPORT_AE_FLAG_0015EV, (G_EXPORT_AE_FLAG_0015EV) =>
                   {
                       G_EXPORT_AE_FLAG_0015EV.CreateNewGroup(Names.IEF_SUPPLIED_0015ET, (IEF_SUPPLIED_0015ET) =>
                       {
                           IEF_SUPPLIED_0015ET.CreateNewField(Names.FLAG_0015AS, FieldType.String, 1);

                           IField FLAG_0015_local = IEF_SUPPLIED_0015ET.CreateNewField(Names.FLAG_0015, FieldType.String, 1);
                           IEF_SUPPLIED_0015ET.CreateNewFieldRedefine(Names.FLAG_0015XX, FieldType.String, FLAG_0015_local, 1);
                       });
                   });
                   GROUP_EXPORT_LIST_0003.CreateNewGroup(Names.G_EXPORT_CS_FLAG_0016EV, (G_EXPORT_CS_FLAG_0016EV) =>
                   {
                       G_EXPORT_CS_FLAG_0016EV.CreateNewGroup(Names.IEF_SUPPLIED_0016ET, (IEF_SUPPLIED_0016ET) =>
                       {
                           IEF_SUPPLIED_0016ET.CreateNewField(Names.FLAG_0016AS, FieldType.String, 1);

                           IField FLAG_0016_local = IEF_SUPPLIED_0016ET.CreateNewField(Names.FLAG_0016, FieldType.String, 1);
                           IEF_SUPPLIED_0016ET.CreateNewFieldRedefine(Names.FLAG_0016XX, FieldType.String, FLAG_0016_local, 1);
                       });
                   });
                   GROUP_EXPORT_LIST_0003.CreateNewGroup(Names.G_EXPORT_FA_FLAG_0017EV, (G_EXPORT_FA_FLAG_0017EV) =>
                   {
                       G_EXPORT_FA_FLAG_0017EV.CreateNewGroup(Names.IEF_SUPPLIED_0017ET, (IEF_SUPPLIED_0017ET) =>
                       {
                           IEF_SUPPLIED_0017ET.CreateNewField(Names.FLAG_0017AS, FieldType.String, 1);

                           IField FLAG_0017_local = IEF_SUPPLIED_0017ET.CreateNewField(Names.FLAG_0017, FieldType.String, 1);
                           IEF_SUPPLIED_0017ET.CreateNewFieldRedefine(Names.FLAG_0017XX, FieldType.String, FLAG_0017_local, 1);
                       });
                   });
                   GROUP_EXPORT_LIST_0003.CreateNewGroup(Names.G_EXPORT_KM_FLAG_0018EV, (G_EXPORT_KM_FLAG_0018EV) =>
                   {
                       G_EXPORT_KM_FLAG_0018EV.CreateNewGroup(Names.IEF_SUPPLIED_0018ET, (IEF_SUPPLIED_0018ET) =>
                       {
                           IEF_SUPPLIED_0018ET.CreateNewField(Names.FLAG_0018AS, FieldType.String, 1);

                           IField FLAG_0018_local = IEF_SUPPLIED_0018ET.CreateNewField(Names.FLAG_0018, FieldType.String, 1);
                           IEF_SUPPLIED_0018ET.CreateNewFieldRedefine(Names.FLAG_0018XX, FieldType.String, FLAG_0018_local, 1);
                       });
                   });
                   GROUP_EXPORT_LIST_0003.CreateNewGroup(Names.G_EXPORT_PREFERRED_ID_0019EV, (G_EXPORT_PREFERRED_ID_0019EV) =>
                   {
                       G_EXPORT_PREFERRED_ID_0019EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0019ET, (CSE_PERSONS_WORK_SET_0019ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0019ET.CreateNewField(Names.NUMBER_0019AS, FieldType.String, 1);

                           IField NUMBER_0019_local = CSE_PERSONS_WORK_SET_0019ET.CreateNewField(Names.NUMBER_0019, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0019ET.CreateNewFieldRedefine(Names.NUMBER_0019XX, FieldType.String, NUMBER_0019_local, 10);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_DML_RETURN_CODE_0020EV, (EXPORT_DML_RETURN_CODE_0020EV) =>
           {
               EXPORT_DML_RETURN_CODE_0020EV.CreateNewGroup(Names.IEF_SUPPLIED_0020ET, (IEF_SUPPLIED_0020ET) =>
               {
                   IEF_SUPPLIED_0020ET.CreateNewField(Names.COUNT_0020AS, FieldType.String, 1);

                   IField COUNT_0020_local = IEF_SUPPLIED_0020ET.CreateNewField(Names.COUNT_0020, FieldType.SignedNumeric, 9);
                   IEF_SUPPLIED_0020ET.CreateNewFieldRedefine(Names.COUNT_0020XX, FieldType.String, COUNT_0020_local, 9);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(GLOBDATA, args, 0);
            SetPassedParm(IMPORT_EAB_DML_FLAG_0001EV, args, 1);
            SetPassedParm(IMPORT_UPDATE_PERSON_WO_0002EV, args, 2);
            SetPassedParm(IMPORT_UPDATE_PREFERRED_0003EV, args, 3);
            SetPassedParm(GROUP_IMPORT_INPUT_IDS_0001RG, args, 4);
            SetPassedParm(GROUP_IMPORT_LIST_0002RG, args, 5);
            SetPassedParm(EXPORT_EAB_DML_FLAG_0012EV, args, 6);
            SetPassedParm(GROUP_EXPORT_LIST_0003RG, args, 7);
            SetPassedParm(EXPORT_DML_RETURN_CODE_0020EV, args, 8);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(GLOBDATA, args, 0);
            SetReturnParm(IMPORT_EAB_DML_FLAG_0001EV, args, 1);
            SetReturnParm(IMPORT_UPDATE_PERSON_WO_0002EV, args, 2);
            SetReturnParm(IMPORT_UPDATE_PREFERRED_0003EV, args, 3);
            SetReturnParm(GROUP_IMPORT_INPUT_IDS_0001RG, args, 4);
            SetReturnParm(GROUP_IMPORT_LIST_0002RG, args, 5);
            SetReturnParm(EXPORT_EAB_DML_FLAG_0012EV, args, 6);
            SetReturnParm(GROUP_EXPORT_LIST_0003RG, args, 7);
            SetReturnParm(EXPORT_DML_RETURN_CODE_0020EV, args, 8);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXIU50 : OnlineEABBase
    {

        #region Public Constructors
        public SWEXIU50()
            : base()
        {
            SetUpProgram();
        }

        public SWEXIU50(OnlineControl controlData) : base(controlData)
        {
            SetUpProgram();
        }

        private void SetUpProgram()
        {
            this.ProgramName = "SWEXIU50";

            WS = new SWEXIU50_ws();
            LS = new SWEXIU50_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryTextWithUR("SPA-VIEW", "SELECT SYSTEM_CODE, PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {0}  AND FK_CLI_CLIENT_NAME = {1}  AND FK_CLI_SSN = {2} ",  //COBOL==>EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :SYSPART-FK-CLI-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN WITH UR END-EXEC
                                WS.SYSPART_FK_CLI_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN);

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXIU50_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXIU50_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING GLOBDATA , IMPORT-EAB-DML-FLAG-0001EV , IMPORT-UPDATE-PERSON-WO-0002EV , IMPORT-UPDATE-PREFERRED-0003EV , GROUP-IMPORT-INPUT-IDS-0001RG , GROUP-IMPORT-LIST-0002RG , EXPORT-EAB-DML-FLAG-0012EV , GROUP-EXPORT-LIST-0003RG , EXPORT-DML-RETURN-CODE-0020EV.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_1435765232(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_1435765232
        /// </summary>
        private void M_MAIN_1435765232(string returnMethod = "")
        {
            //COMMENT:     DISPLAY 'MAIN-1435765232'.
            M_PARA_1435765232_INIT("M_PARA_1435765232_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-1435765232-INIT THRU PARA-1435765232-INIT-EXIT
            M_PARA_1435765232("M_PARA_1435765232_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-1435765232 THRU PARA-1435765232-EXIT
                                                                                                                  //COMMENT:     DISPLAY 'FINAL:' GROUP-EXPORT-LIST-0003RG.
            if (WS.WS_EXP_CNT.IsLessThanOrEqualTo(10))                                                          //COBOL==> IF WS-EXP-CNT <= 10
            {
                LS.GROUP_EXPORT_LIST_0003MA.SetValue(WS.WS_EXP_CNT);                                                //COBOL==> MOVE WS-EXP-CNT TO GROUP-EXPORT-LIST-0003MA
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.GROUP_EXPORT_LIST_0003MA.SetValue(10);                                                           //COBOL==> MOVE 10 TO GROUP-EXPORT-LIST-0003MA
            }                                                                                                   //COBOL==> END-IF
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_1435765232
        /// </summary>
        private void M_PARA_1435765232(string returnMethod = "")
        {
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            //COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            DisplayToLog("PARA-1435765232 : " + LS.FLAG_0001XX.AsString());                                     //COBOL==> DISPLAY 'PARA-1435765232 : ' FLAG-0001XX.
            if ((LS.FLAG_0001XX.IsEqualTo("D"))
             || (LS.FLAG_0001XX.IsEqualTo("U")))             //COBOL==> IF FLAG-0001XX = "D" OR "U"
            {
                goto EndOfSentence_1;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                DisplayToLog("INVALID DML INPUT TO EAB:" + LS.FLAG_0001XX.AsString());                              //COBOL==> DISPLAY "INVALID DML INPUT TO EAB:" FLAG-0001XX
                M_PARA_1435765232_EXIT(CheckGotoReturn(returnMethod)); return;                                      //COBOL==> GO TO PARA-1435765232-EXIT
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_1:;
            if (LS.FLAG_0001XX.IsEqualTo("D"))                                                                  //COBOL==> IF FLAG-0001XX = "D"
            {
                M_11000_BUILD_INFORMATON("M_11000_EXIT"); if (Control.ExitProgram) { return; }                        //COBOL==> PERFORM 11000-BUILD-INFORMATON THRU 11000-EXIT
                M_PARA_1435765232_EXIT(CheckGotoReturn(returnMethod)); return;                                      //COBOL==> GO TO PARA-1435765232-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (LS.FLAG_0001XX.IsEqualTo("U"))                                                                  //COBOL==> IF FLAG-0001XX = "U"
            {
                //COMMENT:         DISPLAY 'UPDATE OPTION SELECTED:'
                WS.WS_IMP_CNT.SetValueWithZeroes();                                                                 //COBOL==> MOVE ZEROS TO WS-IMP-CNT WS-EXP-CNT
                WS.WS_EXP_CNT.SetValueWithZeroes();
                while (!(WS.WS_IMP_CNT.IsGreaterThan(10)))                                                          //COBOL==> PERFORM UNTIL WS-IMP-CNT > 10
                {
                    //COMMENT:         IF  WS-IMP-CNT <= 10
                    WS.WS_IMP_CNT.Add(1);                                                                               //COBOL==> ADD 1 TO WS-IMP-CNT
                    if ((LS.NUMBER_0006XX[WS.WS_IMP_CNT.AsInt()].IsGreaterThan(" "))
             && (LS.NUMBER_0006XX[WS.WS_IMP_CNT.AsInt()].IsEqualTo(LS.NUMBER_0004XX[WS.WS_IMP_CNT.AsInt()])))  //COBOL==> IF NUMBER-0006XX ( WS-IMP-CNT ) > ' ' AND NUMBER-0006XX ( WS-IMP-CNT ) = NUMBER-0004XX ( WS-IMP-CNT )
                    {
                        WS.WS_EXP_CNT.Add(1);                                                                               //COBOL==> ADD 1 TO WS-EXP-CNT
                        LS.SELECT_CHAR_0013XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.SELECT_CHAR_0005XX[WS.WS_IMP_CNT.AsInt()]);  //COBOL==> MOVE SELECT-CHAR-0005XX ( WS-IMP-CNT ) TO SELECT-CHAR-0013XX ( WS-EXP-CNT )
                        LS.REPLICATION_INDICATOR_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.REPLICATION_INDICATOR_0006XX[WS.WS_IMP_CNT.AsInt()]);  //COBOL==> MOVE REPLICATION-INDICATOR-0006XX ( WS-IMP-CNT ) TO REPLICATION-INDICATOR-0014XX ( WS-EXP-CNT )
                        LS.FORMATTED_NAME_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.FORMATTED_NAME_0006XX[WS.WS_IMP_CNT.AsInt()]);  //COBOL==> MOVE FORMATTED-NAME-0006XX ( WS-IMP-CNT ) TO FORMATTED-NAME-0014XX ( WS-EXP-CNT )
                        LS.NUMBER_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.NUMBER_0006XX[WS.WS_IMP_CNT.AsInt()]);          //COBOL==> MOVE NUMBER-0006XX ( WS-IMP-CNT ) TO NUMBER-0014XX ( WS-EXP-CNT ) CLIENTB-CLIENT-NUMBER
                        WS.CLIENTB_CLIENT_NUMBER.SetValue(LS.NUMBER_0006XX[WS.WS_IMP_CNT.AsInt()]);
                        LS.SSN_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.SSN_0006XX[WS.WS_IMP_CNT.AsInt()]);                //COBOL==> MOVE SSN-0006XX ( WS-IMP-CNT ) TO SSN-0014XX ( WS-EXP-CNT )
                        LS.DOB_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.DOB_0006XX[WS.WS_IMP_CNT.AsInt()]);                //COBOL==> MOVE DOB-0006XX ( WS-IMP-CNT ) TO DOB-0014XX ( WS-EXP-CNT )
                        LS.SEX_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.SEX_0006XX[WS.WS_IMP_CNT.AsInt()]);                //COBOL==> MOVE SEX-0006XX ( WS-IMP-CNT ) TO SEX-0014XX ( WS-EXP-CNT )
                        LS.FIRST_NAME_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.FIRST_NAME_0006XX[WS.WS_IMP_CNT.AsInt()]);  //COBOL==> MOVE FIRST-NAME-0006XX ( WS-IMP-CNT ) TO FIRST-NAME-0014XX ( WS-EXP-CNT )
                        LS.MIDDLE_INITIAL_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.MIDDLE_INITIAL_0006XX[WS.WS_IMP_CNT.AsInt()]);  //COBOL==> MOVE MIDDLE-INITIAL-0006XX ( WS-IMP-CNT ) TO MIDDLE-INITIAL-0014XX ( WS-EXP-CNT )
                        LS.LAST_NAME_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.LAST_NAME_0006XX[WS.WS_IMP_CNT.AsInt()]);    //COBOL==> MOVE LAST-NAME-0006XX ( WS-IMP-CNT ) TO LAST-NAME-0014XX ( WS-EXP-CNT )
                        LS.FLAG_0015XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.FLAG_0007XX[WS.WS_IMP_CNT.AsInt()]);              //COBOL==> MOVE FLAG-0007XX ( WS-IMP-CNT ) TO FLAG-0015XX ( WS-EXP-CNT )
                        LS.FLAG_0016XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.FLAG_0008XX[WS.WS_IMP_CNT.AsInt()]);              //COBOL==> MOVE FLAG-0008XX ( WS-IMP-CNT ) TO FLAG-0016XX ( WS-EXP-CNT )
                        LS.FLAG_0017XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.FLAG_0009XX[WS.WS_IMP_CNT.AsInt()]);              //COBOL==> MOVE FLAG-0009XX ( WS-IMP-CNT ) TO FLAG-0017XX ( WS-EXP-CNT )
                        LS.FLAG_0018XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.FLAG_0010XX[WS.WS_IMP_CNT.AsInt()]);              //COBOL==> MOVE FLAG-0010XX ( WS-IMP-CNT ) TO FLAG-0018XX ( WS-EXP-CNT )
                        LS.NUMBER_0019XX[WS.WS_EXP_CNT.AsInt()].SetValue(LS.NUMBER_0011XX[WS.WS_IMP_CNT.AsInt()]);          //COBOL==> MOVE NUMBER-0011XX ( WS-IMP-CNT ) TO NUMBER-0019XX ( WS-EXP-CNT )
                        M_99100_READ_CLIENT_BASIC("M_99100_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM 99100-READ-CLIENT-BASIC THRU 99100-EXIT
                        if (((!(LS.REPLICATION_INDICATOR_0006XX[WS.WS_IMP_CNT.AsInt()].IsEqualTo(WS.CLIENTB_CIS_REPL_IND)))
             || (!(LS.NUMBER_0011XX[WS.WS_IMP_CNT.AsInt()].IsEqualTo(WS.CLIENTB_CIS_PREFERRED_ID))))
             && (LS.SELECT_CHAR_0013XX[WS.WS_IMP_CNT.AsInt()].IsEqualTo("S")))  //COBOL==> IF ( ( REPLICATION-INDICATOR-0006XX ( WS-IMP-CNT ) NOT = CLIENTB-CIS-REPL-IND ) OR ( NUMBER-0011XX ( WS-IMP-CNT ) NOT = CLIENTB-CIS-PREFERRED-ID ) ) AND SELECT-CHAR-0013XX ( WS-IMP-CNT ) = 'S'
                        {
                            WS.CLIENTB_CIS_REPL_IND.SetValue(LS.REPLICATION_INDICATOR_0006XX[WS.WS_IMP_CNT.AsInt()]);           //COBOL==> MOVE REPLICATION-INDICATOR-0006XX ( WS-IMP-CNT ) TO CLIENTB-CIS-REPL-IND
                            WS.DB2_COUNT.SetValueWithZeroes();                                                                  //COBOL==> MOVE ZEROS TO DB2-COUNT
                            WS.WS_PREF_ID_FLAG.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO WS-PREF-ID-FLAG
                            if (!(LS.NUMBER_0011XX[WS.WS_IMP_CNT.AsInt()].IsEqualTo(WS.CLIENTB_CIS_PREFERRED_ID)))              //COBOL==> IF NUMBER-0011XX ( WS-IMP-CNT ) NOT = CLIENTB-CIS-PREFERRED-ID
                            {
                                WS.CLIENTB_CIS_PREFERRED_ID.SetValue(LS.NUMBER_0011XX[WS.WS_IMP_CNT.AsInt()]);                      //COBOL==> MOVE NUMBER-0011XX ( WS-IMP-CNT ) TO CLIENTB-CIS-PREFERRED-ID
                                M_99300_SELECT_CLIENT_COUNT("M_99300_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 99300-SELECT-CLIENT-COUNT THRU 99300-EXIT
                            }                                                                                                   //COBOL==> END-IF
                            if (WS.WS_PREF_ID_FLAG.IsSpaces())                                                                  //COBOL==> IF WS-PREF-ID-FLAG = SPACES
                            {
                                WS.CLIENTB_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                          //COBOL==> EXEC CICS ASSIGN USERID ( CLIENTB-LAST-MODIFIED-BY ) END-EXEC
                                M_99200_UPDATE_CLIENT_BASIC("M_99200_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 99200-UPDATE-CLIENT-BASIC THRU 99200-EXIT
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-PERFORM
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PARA_1435765232") { M_PARA_1435765232_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1435765232_EXIT
        /// </summary>
        private void M_PARA_1435765232_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_1435765232_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_1435765232_EXIT") { M_PARA_1435765232_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1435765232_INIT
        /// </summary>
        private void M_PARA_1435765232_INIT(string returnMethod = "")
        {
            //COMMENT:     DISPLAY 'PARA-1435765232-INIT'.
            WS.GROUP_IMPORT_INPUT_IDS_0001PS.SetValue(1);                                                       //COBOL==> MOVE 1 TO GROUP-IMPORT-INPUT-IDS-0001PS
            WS.GROUP_IMPORT_LIST_0002PS.SetValue(1);                                                            //COBOL==> MOVE 1 TO GROUP-IMPORT-LIST-0002PS
            LS.EXPORT_EAB_DML_FLAG_0012EV.ResetToInitialValue();                                                //COBOL==> INITIALIZE EXPORT-EAB-DML-FLAG-0012EV
            WS.GROUP_EXPORT_LIST_0003PS.SetValue(1);                                                            //COBOL==> MOVE 1 TO GROUP-EXPORT-LIST-0003PS
            LS.GROUP_EXPORT_LIST_0003RG.ResetToInitialValue();                                                  //COBOL==> INITIALIZE GROUP-EXPORT-LIST-0003RG
            for (WS.ADIM1.SetValue(1); (!(WS.ADIM1.IsGreaterThan(10))); WS.ADIM1.Add(1))                       //COBOL==> PERFORM VARYING ADIM1 FROM 1 BY 1 UNTIL ADIM1 > 10
            {
                WS.ADIM1.SetComputeValue(10);                                                                       //COBOL==> COMPUTE ADIM1 = 10
            }                                                                                                   //COBOL==> END-PERFORM
            LS.EXPORT_DML_RETURN_CODE_0020EV.ResetToInitialValue();                                             //COBOL==> INITIALIZE EXPORT-DML-RETURN-CODE-0020EV .
            if (returnMethod != "" && returnMethod != "M_PARA_1435765232_INIT") { M_PARA_1435765232_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1435765232_INIT_EXIT
        /// </summary>
        private void M_PARA_1435765232_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_1435765232_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_1435765232_INIT_EXIT") { M_11000_BUILD_INFORMATON(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_11000_BUILD_INFORMATON
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_11000_BUILD_INFORMATON(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '11000-BUILD-INFORMATON'.
            //COMMENT: -----------------------------------------------------------------
            //COMMENT: *****************************************************************
            //COMMENT:  USING IMPORT PERSON NUMBER LIST, THIS SECITON READS THE
            //COMMENT:  KSD_CLIENT_BASIC, CLINET & SYSTEM PART TO BUILD THE EXPORT GROUP
            //COMMENT:  VIEW AND SEND BACK TO CALLING CA:GEN MODULE.
            //COMMENT:  INFORMATION WILL BE OBTAINED ONLY FOR PRIMARY RECORDS AND NOT
            //COMMENT:  FOR ALIAS RECORD BY MATCHING THE NAME WITH KSD_CLIENT_BASIC AND
            //COMMENT:  AND KSD_CLIENT AND RELATED SYSTEM PART RECORDS.
            //COMMENT: *****************************************************************
            WS.WS_IMP_CNT.SetValueWithZeroes();                                                                 //COBOL==> MOVE ZEROS TO WS-IMP-CNT , WS-EXP-CNT
            WS.WS_EXP_CNT.SetValueWithZeroes();
            while (!(WS.WS_IMP_CNT.IsGreaterThan(10)))                                                          //COBOL==> PERFORM UNTIL WS-IMP-CNT > 10
            {
                WS.WS_IMP_CNT.Add(1);                                                                               //COBOL==> ADD 1 TO WS-IMP-CNT
                if (WS.WS_IMP_CNT.IsLessThanOrEqualTo(10))                                                          //COBOL==> IF WS-IMP-CNT <= 10
                {
                    if (LS.NUMBER_0004XX[WS.WS_IMP_CNT.AsInt()].IsGreaterThan(" "))                                     //COBOL==> IF NUMBER-0004XX ( WS-IMP-CNT ) > ' '
                    {
                        WS.CLIENTB_CLIENT_NUMBER.SetValue(LS.NUMBER_0004XX[WS.WS_IMP_CNT.AsInt()]);                         //COBOL==> MOVE NUMBER-0004XX ( WS-IMP-CNT ) TO CLIENTB-CLIENT-NUMBER
                        WS.WS_EXP_CNT.Add(1);                                                                               //COBOL==> ADD 1 TO WS-EXP-CNT
                        M_99100_READ_CLIENT_BASIC("M_99100_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM 99100-READ-CLIENT-BASIC THRU 99100-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            if (returnMethod != "" && returnMethod != "M_11000_BUILD_INFORMATON") { M_11000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_11000_EXIT
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_11000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_11000_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_11000_EXIT") { M_99100_READ_CLIENT_BASIC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99100_READ_CLIENT_BASIC
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        ///COMMENT: -----------------------------------------------------------------
        ///COMMENT: 22000-UPDATE-INFORMATION.
        ///COMMENT: -----------------------------------------------------------------
        ///COMMENT:     DISPLAY '22000-UPDATE-INFORMATION'.
        ///COMMENT: *****************************************************************
        ///COMMENT:  USING IMPORT VIEW VALUES, THIS SECTION WILL UPDATE
        ///COMMENT:  KSD_CLIENT_BASIC INFORMAITON WITH PROVIDED PRIMARY SECONDARY
        ///COMMENT:  AND PREFERRED ID VALUES.
        ///COMMENT:  INFORMATION WILL BE OBTAINED ONLY FOR PRIMARY RECORDS AND NOT
        ///COMMENT:  FOR ALIAS RECORD BY MATCHING THE NAME WITH KSD_CLIENT_BASIC AND
        ///COMMENT:  AND KSD_CLIENT AND RELATED SYSTEM PART RECORDS.
        ///COMMENT: *****************************************************************
        ///COMMENT: -----------------------------------------------------------------
        ///COMMENT: 22000-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: -----------------------------------------------------------------
        ///COMMENT: ****************************************************************
        ///COMMENT:  SELECT ROW FROM THE KSD CLIENT BASIC DB2 TABLE ROUTINE
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_99100_READ_CLIENT_BASIC(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '99100-READ-CLIENT-BASIC'.
            //COMMENT: TST DISPLAY '99100-READ-CLIENT-BASIC'.
            DbConv.ExecuteSqlQuery("SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , SENSITIVE_FLAG , CIS_PREFERRED_ID , NAME_TYPE INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} , {10} , {11} , {12} , {13} , {14} , {15} , {16} , {17} , {18} , {19} , {20} , {21} , {22} , {23} , {24} , {25} , {26} , {27} , {28} , {29} , {30} , {31} , {32} , {33} , {34} , {35} , {36} , {37} , {38} , {39} , {40} , {41} , {42} , {43} , {44} , {45} , {46} , {47} , {48} , {49} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {50} ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , SENSITIVE_FLAG , CIS_PREFERRED_ID , NAME_TYPE INTO :CLIENTB-CLIENT-NUMBER , :CLIENTB-CLIENT-GIVEN-NAME , :CLIENTB-CLIENT-INITIALS , :CLIENTB-CLIENT-SURNAME , :CLIENTB-CIS-REPL-IND , :CLIENTB-WORK-PHONE , :CLIENTB-SSN , :CLIENTB-GENDER , :CLIENTB-PARENT-RGHTS-SEV , :CLIENTB-PRNT-RGHTS-SEV-DT , :CLIENTB-LEGAL-STATUS , :CLIENTB-INSURANCE-CODE , :CLIENTB-INITIAL-CUSTODY-DT , :CLIENTB-HOME-PHONE , :CLIENTB-DATE-OF-BIRTH , :CLIENTB-CURR-PLACEMNT-DT , :CLIENTB-CURRENT-PLACEMENT , :CLIENTB-CSEA-G-CAUSE-CODE , :CLIENTB-CSEA-G-CAUSE-CL-DT , :CLIENTB-CSEA-COOP-CODE , :CLIENTB-COUNTY-CRT-COMMIT , :CLIENTB-MONTHS-ASST-AF , :CLIENTB-MONTHS-ASST-GA , :CLIENTB-MO-DEATH-DT , :CLIENTB-MO-PRT-DT , :CLIENTB-FA-DEATH-DT , :CLIENTB-FA-PRT-DT , :CLIENTB-MPI-ID , :CLIENTB-MED-COVERAGE-IND , :CLIENTB-INSURANCE-CARRIER , :CLIENTB-INSURANCE-POLCY-NO , :CLIENTB-SPOKEN-LANGUAGE , :CLIENTB-WRITTEN-LANGUAGE , :CLIENTB-STATE-OF-BIRTH , :CLIENTB-SCHOOL-DISTRICT , :CLIENTB-ETHNIC-CLASS , :CLIENTB-SUFFIX-NAME , :CLIENTB-EMPLOYER-NAME , :CLIENTB-EARNED-INCOME-AMT , :CLIENTB-INCOME-FREQUENCY , :CLIENTB-KEES-ABMS-ID , :CLIENTB-EMAIL-ADDRESS , :CLIENTB-OCCUPATION , :CLIENTB-CREATED-BY , :CLIENTB-CREATED-TIMESTAMP , :CLIENTB-LAST-MODIFIED-BY , :CLIENTB-LAST-MODIFIED-TMST , :CLIENTB-SENSITIVE-FLAG , :CLIENTB-CIS-PREFERRED-ID , :CLIENTB-NAME-TYPE FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :CLIENTB-CLIENT-NUMBER END-EXEC.
                                 WS.CLIENTB_CLIENT_NUMBER, WS.CLIENTB_CLIENT_GIVEN_NAME, WS.CLIENTB_CLIENT_INITIALS, WS.CLIENTB_CLIENT_SURNAME, WS.CLIENTB_CIS_REPL_IND, WS.CLIENTB_WORK_PHONE, WS.CLIENTB_SSN, WS.CLIENTB_GENDER, WS.CLIENTB_PARENT_RGHTS_SEV, WS.CLIENTB_PRNT_RGHTS_SEV_DT, WS.CLIENTB_LEGAL_STATUS, WS.CLIENTB_INSURANCE_CODE, WS.CLIENTB_INITIAL_CUSTODY_DT, WS.CLIENTB_HOME_PHONE, WS.CLIENTB_DATE_OF_BIRTH, WS.CLIENTB_CURR_PLACEMNT_DT, WS.CLIENTB_CURRENT_PLACEMENT, WS.CLIENTB_CSEA_G_CAUSE_CODE, WS.CLIENTB_CSEA_G_CAUSE_CL_DT, WS.CLIENTB_CSEA_COOP_CODE, WS.CLIENTB_COUNTY_CRT_COMMIT, WS.CLIENTB_MONTHS_ASST_AF, WS.CLIENTB_MONTHS_ASST_GA, WS.CLIENTB_MO_DEATH_DT, WS.CLIENTB_MO_PRT_DT, WS.CLIENTB_FA_DEATH_DT, WS.CLIENTB_FA_PRT_DT, WS.CLIENTB_MPI_ID, WS.CLIENTB_MED_COVERAGE_IND, WS.CLIENTB_INSURANCE_CARRIER, WS.CLIENTB_INSURANCE_POLCY_NO, WS.CLIENTB_SPOKEN_LANGUAGE, WS.CLIENTB_WRITTEN_LANGUAGE, WS.CLIENTB_STATE_OF_BIRTH, WS.CLIENTB_SCHOOL_DISTRICT, WS.CLIENTB_ETHNIC_CLASS, WS.CLIENTB_SUFFIX_NAME, WS.CLIENTB_EMPLOYER_NAME, WS.CLIENTB_EARNED_INCOME_AMT, WS.CLIENTB_INCOME_FREQUENCY, WS.CLIENTB_KEES_ABMS_ID, WS.CLIENTB_EMAIL_ADDRESS, WS.CLIENTB_OCCUPATION, WS.CLIENTB_CREATED_BY, WS.CLIENTB_CREATED_TIMESTAMP, WS.CLIENTB_LAST_MODIFIED_BY, WS.CLIENTB_LAST_MODIFIED_TMST, WS.CLIENTB_SENSITIVE_FLAG, WS.CLIENTB_CIS_PREFERRED_ID, WS.CLIENTB_NAME_TYPE, WS.CLIENTB_CLIENT_NUMBER);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                if (LS.FLAG_0001XX.IsEqualTo("D"))                                                                  //COBOL==> IF FLAG-0001XX = "D"
                {
                    M_99150_POPULATE_CLIENT_INFO("M_99150_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 99150-POPULATE-CLIENT-INFO THRU 99150-EXIT
                }                                                                                                   //COBOL==> END-IF
                                                                                                                    //COMMENT: JR-B
                if (LS.FLAG_0001XX.IsEqualTo("U"))                                                                  //COBOL==> IF FLAG-0001XX = "U"
                {
                    //COMMENT:             DISPLAY 'JR - UPDATE OPTION SELECTED:'
                    if (LS.SELECT_CHAR_0005XX[WS.WS_IMP_CNT.AsInt()].IsEqualTo("S"))                                    //COBOL==> IF SELECT-CHAR-0005XX ( WS-IMP-CNT ) = 'S'
                    {
                        //COMMENT:           DISPLAY 'SELECT-CHAR:'SELECT-CHAR-0005XX(WS-IMP-CNT)
                        //COMMENT:           DISPLAY 'cLIENT :'CLIENTB-CLIENT-NUMBER
                        M_99605_INS_DEL_SYSTEM_PART("M_99605_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 99605-INS-DEL-SYSTEM-PART THRU 99605-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                                                                                                                    //COMMENT: JR-E
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                LS.SELECT_CHAR_0013XX[WS.WS_EXP_CNT.AsInt()].SetValue("N");                                         //COBOL==> MOVE 'N' TO SELECT-CHAR-0013XX ( WS-EXP-CNT )
                LS.FORMATTED_NAME_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue("CLIENT NF");                              //COBOL==> MOVE 'CLIENT NF' TO FORMATTED-NAME-0014XX ( WS-EXP-CNT )
                WS.WS_CLIENTB_EOF_YES.SetValue(true);                                                               //COBOL==> SET WS-CLIENTB-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.SELECT_CHAR_0013XX[WS.WS_EXP_CNT.AsInt()].SetValue("E");                                         //COBOL==> MOVE 'E' TO SELECT-CHAR-0013XX ( WS-EXP-CNT )
                WS.WS_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WS-SQLCODE
                WS.WS_SQLCODE_TXT.SetValue(WS.WS_SQLCODE);                                                          //COBOL==> MOVE WS-SQLCODE TO WS-SQLCODE-TXT
                LS.FORMATTED_NAME_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.WS_SQLCODE_TXT);                        //COBOL==> MOVE WS-SQLCODE-TXT TO FORMATTED-NAME-0014XX ( WS-EXP-CNT )
                DisplayToLog("CLIENT BASIC READ FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                        //COBOL==> DISPLAY 'CLIENT BASIC READ FAILED:' SQLCODE
                                                                                                                    //COMMENT:              MOVE 154 TO MV-ADA-FILE-NUMBER
                                                                                                                    //COMMENT:              MOVE 'RHI' TO MV-ADA-FILE-ACTION
                                                                                                                    //COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99100_READ_CLIENT_BASIC") { M_99100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99100_EXIT
        /// </summary>
        private void M_99100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99100_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99100_EXIT") { M_99150_POPULATE_CLIENT_INFO(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99150_POPULATE_CLIENT_INFO
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99150_POPULATE_CLIENT_INFO(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99150-POPULATE-CLIENT-INFO'.
            WS.WS_CLIENT_FIRST_NAME.SetValue(WS.CLIENTB_CLIENT_GIVEN_NAME);                                     //COBOL==> MOVE CLIENTB-CLIENT-GIVEN-NAME TO WS-CLIENT-FIRST-NAME FIRST-NAME-0014XX ( WS-EXP-CNT )
            LS.FIRST_NAME_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_CLIENT_GIVEN_NAME);
            WS.WS_CLIENT_LAST_NAME.SetValue(WS.CLIENTB_CLIENT_SURNAME);                                         //COBOL==> MOVE CLIENTB-CLIENT-SURNAME TO WS-CLIENT-LAST-NAME LAST-NAME-0014XX ( WS-EXP-CNT )
            LS.LAST_NAME_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_CLIENT_SURNAME);
            WS.WS_CLIENT_INITIAL.SetValue(WS.CLIENTB_CLIENT_INITIALS);                                          //COBOL==> MOVE CLIENTB-CLIENT-INITIALS TO WS-CLIENT-INITIAL MIDDLE-INITIAL-0014XX ( WS-EXP-CNT )
            LS.MIDDLE_INITIAL_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_CLIENT_INITIALS);
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.WS_CLIENT_NAME);                                          //COBOL==> MOVE WS-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME FORMATTED-NAME-0014XX ( WS-EXP-CNT )
            LS.FORMATTED_NAME_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.WS_CLIENT_NAME);
            LS.REPLICATION_INDICATOR_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_CIS_REPL_IND);           //COBOL==> MOVE CLIENTB-CIS-REPL-IND TO REPLICATION-INDICATOR-0014XX ( WS-EXP-CNT )
            LS.SEX_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_GENDER);                                   //COBOL==> MOVE CLIENTB-GENDER TO SEX-0014XX ( WS-EXP-CNT )
            LS.NUMBER_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_CLIENT_NUMBER);                         //COBOL==> MOVE CLIENTB-CLIENT-NUMBER TO NUMBER-0014XX ( WS-EXP-CNT ) SYSPART-FK-CLI-CLIENT-NO
            WS.SYSPART_FK_CLI_CLIENT_NO.SetValue(WS.CLIENTB_CLIENT_NUMBER);
            WS.SYSPART_FK_CLI_SSN.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO SYSPART-FK-CLI-SSN
                                                                                                                //COMMENT:     IF    CLIENTB-SSN  > 0
                                                                                                                //COMMENT:     MOVE  CLIENTB-SSN               TO
                                                                                                                //COMMENT:           WS-FORMATTED-SSN
                                                                                                                //COMMENT:     MOVE  WS-FORMATTED-SSN          TO
                                                                                                                //COMMENT:           SSN-0014XX(WS-EXP-CNT)
                                                                                                                //COMMENT:           SYSPART-FK-CLI-SSN
                                                                                                                //COMMENT:     END-IF
            WS.WS_SSN.SetValue(WS.CLIENTB_SSN);                                                                 //COBOL==> MOVE CLIENTB-SSN TO WS-SSN
            WS.WS_SSN_TXT.SetValue(WS.WS_SSN);                                                                  //COBOL==> MOVE WS-SSN TO WS-SSN-TXT
                                                                                                                //COMMENT:     DISPLAY 'SSN:' WS-SSN-TXT
            LS.SSN_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.WS_SSN_TXT);                                       //COBOL==> MOVE WS-SSN-TXT TO SSN-0014XX ( WS-EXP-CNT ) SYSPART-FK-CLI-SSN
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.WS_SSN_TXT);
            if (!(WS.CLIENTB_DATE_OF_BIRTH.IsEqualTo("0001-01-01")))                                            //COBOL==> IF CLIENTB-DATE-OF-BIRTH NOT = '0001-01-01'
            {
                WS.WS_CLIENT_DOB.SetValue(WS.CLIENTB_DATE_OF_BIRTH);                                                //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH TO WS-CLIENT-DOB
                WS.WS_FORMATTED_DOB_YYYY.SetValue(WS.WS_CLIENT_DOB_YYYY);                                           //COBOL==> MOVE WS-CLIENT-DOB-YYYY TO WS-FORMATTED-DOB-YYYY
                WS.WS_FORMATTED_DOB_MM.SetValue(WS.WS_CLIENT_DOB_MM);                                               //COBOL==> MOVE WS-CLIENT-DOB-MM TO WS-FORMATTED-DOB-MM
                WS.WS_FORMATTED_DOB_DD.SetValue(WS.WS_CLIENT_DOB_DD);                                               //COBOL==> MOVE WS-CLIENT-DOB-DD TO WS-FORMATTED-DOB-DD
                LS.DOB_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.WS_FORMATTED_DOB);                                 //COBOL==> MOVE WS-FORMATTED-DOB TO DOB-0014XX ( WS-EXP-CNT )
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.DOB_0014XX[WS.WS_EXP_CNT.AsInt()].SetValueWithZeroes();                                          //COBOL==> MOVE ZEROS TO DOB-0014XX ( WS-EXP-CNT )
            }                                                                                                   //COBOL==> END-IF
            LS.SEX_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_GENDER);                                   //COBOL==> MOVE CLIENTB-GENDER TO SEX-0014XX ( WS-EXP-CNT )
            LS.FIRST_NAME_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_CLIENT_GIVEN_NAME);                 //COBOL==> MOVE CLIENTB-CLIENT-GIVEN-NAME TO FIRST-NAME-0014XX ( WS-EXP-CNT )
            LS.MIDDLE_INITIAL_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_CLIENT_INITIALS);               //COBOL==> MOVE CLIENTB-CLIENT-INITIALS TO MIDDLE-INITIAL-0014XX ( WS-EXP-CNT )
            LS.LAST_NAME_0014XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_CLIENT_SURNAME);                     //COBOL==> MOVE CLIENTB-CLIENT-SURNAME TO LAST-NAME-0014XX ( WS-EXP-CNT )
            LS.NUMBER_0019XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.CLIENTB_CIS_PREFERRED_ID);                      //COBOL==> MOVE CLIENTB-CIS-PREFERRED-ID TO NUMBER-0019XX ( WS-EXP-CNT )
            M_99400_DECLARE_SPA_VIEW("M_99400_EXIT"); if (Control.ExitProgram) { return; }                        //COBOL==> PERFORM 99400-DECLARE-SPA-VIEW THRU 99400-EXIT
            M_99500_OPEN_SPA_VIEW(); if (Control.ExitProgram) { return; }                                         //COBOL==> PERFORM 99500-OPEN-SPA-VIEW
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                WS.WS_SYSPART_EOF_NO.SetValue(true);                                                                //COBOL==> SET WS-SYSPART-EOF-NO TO TRUE
                while (!(WS.WS_SYSPART_EOF_YES.Value))                                                              //COBOL==> PERFORM 99600-FETCH-SPA-VIEW THRU 99600-EXIT UNTIL WS-SYSPART-EOF-YES
                {
                    M_99600_FETCH_SPA_VIEW("M_99600_EXIT"); if (Control.ExitProgram) { return; }
                }
                M_99900_CLOSE_SPA_VIEW("M_99900_EXIT"); if (Control.ExitProgram) { return; }                          //COBOL==> PERFORM 99900-CLOSE-SPA-VIEW THRU 99900-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("SYSPART OPEN CURSOR FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                      //COBOL==> DISPLAY 'SYSPART OPEN CURSOR FAILED:' SQLCODE
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_99150_POPULATE_CLIENT_INFO") { M_99150_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99150_EXIT
        /// </summary>
        private void M_99150_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99150_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99150_EXIT") { M_99200_UPDATE_CLIENT_BASIC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99200_UPDATE_CLIENT_BASIC
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99200_UPDATE_CLIENT_BASIC(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99200-UPDATE-CLIENT-BASIC'.
            //COMMENT: TST DISPLAY '99200-UPDATE-CLIENT-BASIC'.
            //COMMENT:     MOVE IMP-CLIENT-NUMBER TO CLIENTB-CLIENT-NUMBER.
            //COMMENT:     MOVE 'SWEXIU50' TO CLIENTB-LAST-MODIFIED-BY.
            DbConv.ExecuteSql("UPDATE KSD_CLIENT_BASIC SET CIS_REPL_IND = {0},  CIS_PREFERRED_ID = {1},  LAST_MODIFIED_BY = {2},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE CLIENT_NUMBER = {3}", WS.CLIENTB_CIS_REPL_IND, WS.CLIENTB_CIS_PREFERRED_ID, WS.CLIENTB_LAST_MODIFIED_BY, WS.CLIENTB_CLIENT_NUMBER);  //COBOL==> EXEC SQL UPDATE KSD_CLIENT_BASIC SET CIS_REPL_IND = :CLIENTB-CIS-REPL-IND , CIS_PREFERRED_ID = :CLIENTB-CIS-PREFERRED-ID , LAST_MODIFIED_BY = :CLIENTB-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE CLIENT_NUMBER = :CLIENTB-CLIENT-NUMBER END-EXEC.
                                                                                                                                                                                                                                                                                                                    // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //COMMENT:              DISPLAY 'UPDATE SUCCESSFUL:' CLIENTB-CLIENT-NUMBER
                //COMMENT:              CLIENTB-CIS-REPL-IND CLIENTB-CIS-PREFERRED-ID
                LS.SELECT_CHAR_0013XX[WS.WS_EXP_CNT.AsInt()].SetValueWithSpaces();                                  //COBOL==> MOVE SPACES TO SELECT-CHAR-0013XX ( WS-EXP-CNT )
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("CLIENT BASIC UPDATE FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                      //COBOL==> DISPLAY 'CLIENT BASIC UPDATE FAILED:' SQLCODE
                DisplayToLog("FAILED CLIENT INFO:" + WS.CLIENTB_CLIENT_NUMBER.AsString() + WS.CLIENTB_CIS_REPL_IND.AsString() + WS.CLIENTB_CIS_PREFERRED_ID.AsString());  //COBOL==> DISPLAY 'FAILED CLIENT INFO:' CLIENTB-CLIENT-NUMBER CLIENTB-CIS-REPL-IND CLIENTB-CIS-PREFERRED-ID
                LS.SELECT_CHAR_0013XX[WS.WS_EXP_CNT.AsInt()].SetValue("E");                                         //COBOL==> MOVE 'E' TO SELECT-CHAR-0013XX ( WS-EXP-CNT )
                                                                                                                    //COMMENT:              MOVE 'A' TO MV-ABEND-TYPE
                                                                                                                    //COMMENT:              MOVE 154 TO MV-ADA-FILE-NUMBER
                                                                                                                    //COMMENT:              MOVE 'UI ' TO MV-ADA-FILE-ACTION
                                                                                                                    //COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99200_UPDATE_CLIENT_BASIC") { M_99200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99200_EXIT
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99200_EXIT(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            if (returnMethod == "M_99200_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99200_EXIT") { M_99300_SELECT_CLIENT_COUNT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99300_SELECT_CLIENT_COUNT
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHANGED PREFERRED ID VALIDATION.
        ///COMMENT: *****************************************************************
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99300_SELECT_CLIENT_COUNT(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99300-SELECT-CLIENT-COUNT'.
            DbConv.ExecuteSqlQuery("SELECT COUNT ( * ) INTO {0} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {1} AND CIS_REPL_IND = 'P' ",  //COBOL==> EXEC SQL SELECT COUNT ( * ) INTO :DB2-COUNT FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :CLIENTB-CIS-PREFERRED-ID AND CIS_REPL_IND = 'P' END-EXEC.
                                 WS.DB2_COUNT, WS.CLIENTB_CIS_PREFERRED_ID);
            if (WS.DB2_COUNT.IsGreaterThanOrEqualTo(1))                                                         //COBOL==> IF DB2-COUNT >= 1
            {
                M_99300_EXIT(CheckGotoReturn(returnMethod)); return;                                                //COBOL==> GO TO 99300-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (!(WS.CLIENTB_CIS_PREFERRED_ID.IsEqualTo(LS.NUMBER_0014XX[WS.WS_EXP_CNT.AsInt()])))              //COBOL==> IF CLIENTB-CIS-PREFERRED-ID NOT = NUMBER-0014XX ( WS-EXP-CNT )
                {
                    LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                    WS.WS_PREF_ID_FLAG.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO WS-PREF-ID-FLAG
                    DisplayToLog("INVALID PREFERRED ID:" + WS.DB2_COUNT.AsString());                                    //COBOL==> DISPLAY 'INVALID PREFERRED ID:' DB2-COUNT
                    DisplayToLog("PREFERRED ID  INFO:" + WS.CLIENTB_CLIENT_NUMBER.AsString() + WS.CLIENTB_CIS_REPL_IND.AsString() + WS.CLIENTB_CIS_PREFERRED_ID.AsString());  //COBOL==> DISPLAY 'PREFERRED ID  INFO:' CLIENTB-CLIENT-NUMBER CLIENTB-CIS-REPL-IND CLIENTB-CIS-PREFERRED-ID
                    LS.SELECT_CHAR_0013XX[WS.WS_EXP_CNT.AsInt()].SetValue("P");                                         //COBOL==> MOVE 'P' TO SELECT-CHAR-0013XX ( WS-EXP-CNT )
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
                                                                                                                // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN ZERO
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(100))))                   //COBOL==> WHEN 100
            {
                M_99300_EXIT(CheckGotoReturn(returnMethod)); return;                                                //COBOL==> GO TO 99300-EXIT
                                                                                                                    //COMMENT:        MOVE 92  TO COUNT-0020
                                                                                                                    //COMMENT:        MOVE 'Y' TO WS-PREF-ID-FLAG
                                                                                                                    //COMMENT:        DISPLAY 'INVALID PREFERRED ID:' DB2-COUNT
                                                                                                                    //COMMENT:        DISPLAY 'PREFERRED ID  INFO:' CLIENTB-CLIENT-NUMBER
                                                                                                                    //COMMENT:        CLIENTB-CIS-REPL-IND CLIENTB-CIS-PREFERRED-ID
                                                                                                                    //COMMENT:        MOVE 'P'            TO
                                                                                                                    //COMMENT:             SELECT-CHAR-0013XX(WS-EXP-CNT)
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("CLIENT BASIC UPDATE FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                      //COBOL==> DISPLAY 'CLIENT BASIC UPDATE FAILED:' SQLCODE
                DisplayToLog("FAILED CLIENT INFO:" + WS.CLIENTB_CLIENT_NUMBER.AsString() + WS.CLIENTB_CIS_REPL_IND.AsString() + WS.CLIENTB_CIS_PREFERRED_ID.AsString());  //COBOL==> DISPLAY 'FAILED CLIENT INFO:' CLIENTB-CLIENT-NUMBER CLIENTB-CIS-REPL-IND CLIENTB-CIS-PREFERRED-ID
                LS.SELECT_CHAR_0013XX[WS.WS_EXP_CNT.AsInt()].SetValue("E");                                         //COBOL==> MOVE 'E' TO SELECT-CHAR-0013XX ( WS-EXP-CNT )
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99300_SELECT_CLIENT_COUNT") { M_99300_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99300_EXIT
        /// </summary>
        /// <remarks>
        ///COMMENT: TST DISPLAY '99300-SELECT-CLIENT'.
        ///COMMENT:     EXEC SQL
        ///COMMENT:          SELECT FK_CLB_CLIENT_NO
        ///COMMENT:               , CLIENT_NAME
        ///COMMENT:               , SSN
        ///COMMENT:               , DATE_OF_BIRTH
        ///COMMENT:               , GENDER
        ///COMMENT:            INTO :CLIENT-FK-CLB-CLIENT-NO
        ///COMMENT:               , :CLIENT-CLIENT-NAME
        ///COMMENT:               , :CLIENT-SSN
        ///COMMENT:               , :CLIENT-DATE-OF-BIRTH
        ///COMMENT:               , :CLIENT-GENDER
        ///COMMENT:            FROM KSD_CLIENT
        ///COMMENT:           WHERE FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO
        ///COMMENT:             AND CLIENT_NAME = :CLIENT-CLIENT-NAME
        ///COMMENT:             AND SSN = :CLIENT-SSN
        ///COMMENT:             AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH
        ///COMMENT:             AND GENDER = :CLIENT-GENDER
        ///COMMENT:     END-EXEC.
        ///COMMENT:     EVALUATE SQLCODE
        ///COMMENT:         WHEN 0
        ///COMMENT:         WHEN -811
        ///COMMENT:              CONTINUE
        ///COMMENT:         WHEN +100
        ///COMMENT:              SET WS-SYSPART-EOF-YES TO TRUE
        ///COMMENT:         WHEN OTHER
        ///COMMENT:              MOVE 92  TO COUNT-0020
        ///COMMENT:              DISPLAY 'CLIENT READ FAILED:' SQLCODE
        ///COMMENT:              MOVE 'A' TO MV-ABEND-TYPE
        ///COMMENT:              MOVE 149 TO MV-ADA-FILE-NUMBER
        ///COMMENT:              MOVE 'RL ' TO MV-ADA-FILE-ACTION
        ///COMMENT:              MOVE SQLCODE TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-EVALUATE.
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99300_EXIT(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            if (returnMethod == "M_99300_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99300_EXIT") { M_99400_DECLARE_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99400_DECLARE_SPA_VIEW
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99400_DECLARE_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '99400-DECLARE-SPA-VIEW'.
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99400- CLIENT SELECT SW:' SYSPART-SELECT-CLIENT-SW.
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'CLIENT NUMBER/SPA-VIEW  =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE CLIENT-CLIENT-NUMBER        TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'SSN/SPA-VIEW            =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE CLIENT-SSN                  TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'CLIENT NAME/SPA-VIEW    =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE CLIENT-CLIENT-NAME          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :SYSPART-FK-CLI-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN WITH UR END-EXEC.
            if (returnMethod != "" && returnMethod != "M_99400_DECLARE_SPA_VIEW") { M_99400_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99400_EXIT
        /// </summary>
        private void M_99400_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99400_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99400_EXIT") { M_99500_OPEN_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99500_OPEN_SPA_VIEW
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99500_OPEN_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99500- CLIENT SELECT SW:' SYSPART-SELECT-CLIENT-SW
            //COMMENT:     DISPLAY '99500-OPEN-SPA-VIEW'.
            DbConv.OpenReader("SPA-VIEW");                                                                      //COBOL==> EXEC SQL OPEN SPA-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("SYS PART OPEN CURSOR FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                     //COBOL==> DISPLAY 'SYS PART OPEN CURSOR FAILED:' SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99500_OPEN_SPA_VIEW") { M_99500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99500_EXIT
        /// </summary>
        private void M_99500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99500_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99500_EXIT") { M_99600_FETCH_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99600_FETCH_SPA_VIEW
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99600_FETCH_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99600- CLIENT SELECT SW:' SYSPART-SELECT-CLIENT-SW
            //COMMENT:     DISPLAY '99600-FETCH-SPA-VIEW'.
            DbConv.FetchReaderRow("SPA-VIEW",                                                                //COBOL==> EXEC SQL FETCH SPA-VIEW INTO :SYSPART-SYSTEM-CODE , :SYSPART-PARTICIPATION-FLAG END-EXEC.
                             WS.SYSPART_SYSTEM_CODE, WS.SYSPART_PARTICIPATION_FLAG);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //COMMENT:         SET WS-SYSPART-EOF-NO TO TRUE
                M_99610_POPULATE_SYSTEM_CODE("M_99610_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 99610-POPULATE-SYSTEM-CODE THRU 99610-EXIT
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                //COMMENT:         MOVE 92  TO COUNT-0020
                //COMMENT:         DISPLAY 'CLIENT BASIC UPDATE FILED:' SQLCODE
                WS.WS_SYSPART_EOF_YES.SetValue(true);                                                               //COBOL==> SET WS-SYSPART-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("SYS PART FETCH CURSOR  FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                   //COBOL==> DISPLAY 'SYS PART FETCH CURSOR  FAILED:' SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99600_FETCH_SPA_VIEW") { M_99600_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99600_EXIT
        /// </summary>
        private void M_99600_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99600_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99600_EXIT") { M_99605_INS_DEL_SYSTEM_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99605_INS_DEL_SYSTEM_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: JR-B
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99605_INS_DEL_SYSTEM_PART(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99605-INS-DEL- :' CLIENTB-CLIENT-NUMBER
            M_99605_SYSTEM_CS("M_99605_CS_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 99605-SYSTEM-CS THRU 99605-CS-EXIT.
            M_99605_SYSTEM_FA("M_99605_FA_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 99605-SYSTEM-FA THRU 99605-FA-EXIT.
            M_99605_SYSTEM_KM("M_99605_KM_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 99605-SYSTEM-KM THRU 99605-KM-EXIT.
            if (returnMethod != "" && returnMethod != "M_99605_INS_DEL_SYSTEM_PART") { M_99605_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99605_EXIT
        /// </summary>
        private void M_99605_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99605_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99605_EXIT") { M_99605_SYSTEM_CS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99605_SYSTEM_CS
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99605_SYSTEM_CS(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99605-SYSTEM-CS'.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_CS);                                                   //COBOL==> MOVE WS-SYS-CD-CS TO SYSPART-SYSTEM-CODE
            M_99605A_SELECT_SYS_DATA("M_99605A_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM 99605A-SELECT-SYS-DATA THRU 99605A-EXIT
                                                                                                                  // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.WS_SYS_CD_CS_FOUND.SetValue("Y");                                                                //COBOL==> MOVE 'Y' TO WS-SYS-CD-CS-FOUND
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_SYS_CD_CS_FOUND.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-SYS-CD-CS-FOUND
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("99605A-SELECT-SYS-DATA  ");                                                           //COBOL==> DISPLAY '99605A-SELECT-SYS-DATA  '
                DisplayToLog("SYS PART SELECT  FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                         //COBOL==> DISPLAY 'SYS PART SELECT  FAILED:' SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
                                                                                                                //COMMENT:     DISPLAY '99605- CS :' FLAG-0008XX(WS-IMP-CNT)
            if (LS.FLAG_0008XX[WS.WS_IMP_CNT.AsInt()].IsEqualTo("Y"))                                           //COBOL==> IF FLAG-0008XX ( WS-IMP-CNT ) = 'Y'
            {
                if (WS.WS_SYS_CD_CS_FOUND.IsEqualTo("Y"))                                                           //COBOL==> IF WS-SYS-CD-CS-FOUND = 'Y'
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.WS_SYS_CD_CS_FOUND.IsEqualTo("N"))                                                           //COBOL==> IF WS-SYS-CD-CS-FOUND = 'N'
                    {
                        //COMMENT:               DISPLAY '--- INSERTING CS---- '
                        M_99608_INSERT_SYS_PART("M_99608_EXIT"); if (Control.ExitProgram) { return; }                         //COBOL==> PERFORM 99608-INSERT-SYS-PART THRU 99608-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.WS_SYS_CD_CS_FOUND.IsEqualTo("Y"))                                                           //COBOL==> IF WS-SYS-CD-CS-FOUND = 'Y'
                {
                    //COMMENT:               DISPLAY '--- DELETING CS---- '
                    M_99609_DELETE_SYS_PART("M_99609_EXIT"); if (Control.ExitProgram) { return; }                         //COBOL==> PERFORM 99609-DELETE-SYS-PART THRU 99609-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_99605_SYSTEM_CS") { M_99605_CS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99605_CS_EXIT
        /// </summary>
        private void M_99605_CS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99605_CS_EXIT") { return; }                                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99605_CS_EXIT") { M_99605_SYSTEM_FA(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99605_SYSTEM_FA
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99605_SYSTEM_FA(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99605-SYSTEM-FA'.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_FA);                                                   //COBOL==> MOVE WS-SYS-CD-FA TO SYSPART-SYSTEM-CODE
            M_99605A_SELECT_SYS_DATA("M_99605A_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM 99605A-SELECT-SYS-DATA THRU 99605A-EXIT
                                                                                                                  // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.WS_SYS_CD_FA_FOUND.SetValue("Y");                                                                //COBOL==> MOVE 'Y' TO WS-SYS-CD-FA-FOUND
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_SYS_CD_FA_FOUND.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-SYS-CD-FA-FOUND
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("99605A-SELECT-SYS-DATA  ");                                                           //COBOL==> DISPLAY '99605A-SELECT-SYS-DATA  '
                DisplayToLog("SYS PART SELECT  FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                         //COBOL==> DISPLAY 'SYS PART SELECT  FAILED:' SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
                                                                                                                //COMMENT:     DISPLAY '99605- FA :' FLAG-0009XX(WS-IMP-CNT)
            if (LS.FLAG_0009XX[WS.WS_IMP_CNT.AsInt()].IsEqualTo("Y"))                                           //COBOL==> IF FLAG-0009XX ( WS-IMP-CNT ) = 'Y'
            {
                if (WS.WS_SYS_CD_FA_FOUND.IsEqualTo("Y"))                                                           //COBOL==> IF WS-SYS-CD-FA-FOUND = 'Y'
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.WS_SYS_CD_FA_FOUND.IsEqualTo("N"))                                                           //COBOL==> IF WS-SYS-CD-FA-FOUND = 'N'
                    {
                        //COMMENT:               DISPLAY '--- INSERTING FA---- '
                        M_99608_INSERT_SYS_PART("M_99608_EXIT"); if (Control.ExitProgram) { return; }                         //COBOL==> PERFORM 99608-INSERT-SYS-PART THRU 99608-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.WS_SYS_CD_FA_FOUND.IsEqualTo("Y"))                                                           //COBOL==> IF WS-SYS-CD-FA-FOUND = 'Y'
                {
                    //COMMENT:            DISPLAY '--- DELETING FA---- '
                    M_99609_DELETE_SYS_PART("M_99609_EXIT"); if (Control.ExitProgram) { return; }                         //COBOL==> PERFORM 99609-DELETE-SYS-PART THRU 99609-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_99605_SYSTEM_FA") { M_99605_FA_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99605_FA_EXIT
        /// </summary>
        private void M_99605_FA_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99605_FA_EXIT") { return; }                                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99605_FA_EXIT") { M_99605_SYSTEM_KM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99605_SYSTEM_KM
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99605_SYSTEM_KM(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99605-SYSTEM-KM'.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_KM);                                                   //COBOL==> MOVE WS-SYS-CD-KM TO SYSPART-SYSTEM-CODE
            M_99605A_SELECT_SYS_DATA("M_99605A_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM 99605A-SELECT-SYS-DATA THRU 99605A-EXIT
                                                                                                                  // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.WS_SYS_CD_KM_FOUND.SetValue("Y");                                                                //COBOL==> MOVE 'Y' TO WS-SYS-CD-KM-FOUND
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_SYS_CD_KM_FOUND.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-SYS-CD-KM-FOUND
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("99605A-SELECT-SYS-DATA  ");                                                           //COBOL==> DISPLAY '99605A-SELECT-SYS-DATA  '
                DisplayToLog("SYS PART SELECT  FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                         //COBOL==> DISPLAY 'SYS PART SELECT  FAILED:' SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
                                                                                                                //COMMENT:     DISPLAY '99605- KM :' FLAG-0010XX(WS-IMP-CNT)
            if (LS.FLAG_0010XX[WS.WS_IMP_CNT.AsInt()].IsEqualTo("Y"))                                           //COBOL==> IF FLAG-0010XX ( WS-IMP-CNT ) = 'Y'
            {
                if (WS.WS_SYS_CD_KM_FOUND.IsEqualTo("Y"))                                                           //COBOL==> IF WS-SYS-CD-KM-FOUND = 'Y'
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.WS_SYS_CD_KM_FOUND.IsEqualTo("N"))                                                           //COBOL==> IF WS-SYS-CD-KM-FOUND = 'N'
                    {
                        //COMMENT:               DISPLAY '--- INSERTING KM---- '
                        M_99608_INSERT_SYS_PART("M_99608_EXIT"); if (Control.ExitProgram) { return; }                         //COBOL==> PERFORM 99608-INSERT-SYS-PART THRU 99608-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.WS_SYS_CD_KM_FOUND.IsEqualTo("Y"))                                                           //COBOL==> IF WS-SYS-CD-KM-FOUND = 'Y'
                {
                    //COMMENT:            DISPLAY '--- DELETING KM---- '
                    M_99609_DELETE_SYS_PART("M_99609_EXIT"); if (Control.ExitProgram) { return; }                         //COBOL==> PERFORM 99609-DELETE-SYS-PART THRU 99609-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_99605_SYSTEM_KM") { M_99605_KM_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99605_KM_EXIT
        /// </summary>
        private void M_99605_KM_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99605_KM_EXIT") { return; }                                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99605_KM_EXIT") { M_99605A_SELECT_SYS_DATA(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99605A_SELECT_SYS_DATA
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99605A_SELECT_SYS_DATA(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99605A-SELECT-SYS-DATA'.
            WS.SYSPART_FK_CLI_CLIENT_NO.SetValue(WS.CLIENTB_CLIENT_NUMBER);                                     //COBOL==> MOVE CLIENTB-CLIENT-NUMBER TO SYSPART-FK-CLI-CLIENT-NO
            WS.WS_CLIENT_FIRST_NAME.SetValue(WS.CLIENTB_CLIENT_GIVEN_NAME);                                     //COBOL==> MOVE CLIENTB-CLIENT-GIVEN-NAME TO WS-CLIENT-FIRST-NAME
            WS.WS_CLIENT_LAST_NAME.SetValue(WS.CLIENTB_CLIENT_SURNAME);                                         //COBOL==> MOVE CLIENTB-CLIENT-SURNAME TO WS-CLIENT-LAST-NAME
            WS.WS_CLIENT_INITIAL.SetValue(WS.CLIENTB_CLIENT_INITIALS);                                          //COBOL==> MOVE CLIENTB-CLIENT-INITIALS TO WS-CLIENT-INITIAL
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.WS_CLIENT_NAME);                                          //COBOL==> MOVE WS-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.CLIENTB_SSN);                                                     //COBOL==> MOVE CLIENTB-SSN TO SYSPART-FK-CLI-SSN
            DbConv.ExecuteSqlQueryWithUR("SELECT TOP (1) SYSTEM_CODE , PARTICIPATION_FLAG INTO {0} , {1} FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {2} AND FK_CLI_CLIENT_NAME = {3} AND FK_CLI_SSN = {4} AND SYSTEM_CODE = {5} ",  //COBOL==> EXEC SQL SELECT SYSTEM_CODE , PARTICIPATION_FLAG INTO :SYSPART-SYSTEM-CODE , :SYSPART-PARTICIPATION-FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :SYSPART-FK-CLI-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN AND SYSTEM_CODE = :SYSPART-SYSTEM-CODE FETCH FIRST ROW ONLY WITH UR END-EXEC.
                                 WS.SYSPART_SYSTEM_CODE, WS.SYSPART_PARTICIPATION_FLAG, WS.SYSPART_FK_CLI_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN, WS.SYSPART_SYSTEM_CODE);
            if (returnMethod != "" && returnMethod != "M_99605A_SELECT_SYS_DATA") { M_99605A_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99605A_EXIT
        /// </summary>
        private void M_99605A_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99605A_EXIT") { return; }                                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99605A_EXIT") { M_99608_INSERT_SYS_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99608_INSERT_SYS_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99608_INSERT_SYS_PART(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99608-INSERT-SYS-PART'
            WS.SYSPART_CREATED_BY.SetValue("SWEXIU50");                                                         //COBOL==> MOVE 'SWEXIU50' TO SYSPART-CREATED-BY SYSPART-LAST-MODIFIED-BY.
            WS.SYSPART_LAST_MODIFIED_BY.SetValue("SWEXIU50");
            WS.SYSPART_PARTICIPATION_FLAG.SetValue("Y");                                                        //COBOL==> MOVE 'Y' TO SYSPART-PARTICIPATION-FLAG
            DbConv.ExecuteSql("INSERT INTO KSD_SYSTEM_PART  ( SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN  ) VALUES  ( {0}, {1}, CURRENT_TIMESTAMP , {2}, {3}, CURRENT_TIMESTAMP , {4}, {5}, {6} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_SYSTEM_PART ( SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN ) VALUES ( :SYSPART-SYSTEM-CODE , :SYSPART-PARTICIPATION-FLAG , CURRENT_TIMESTAMP , :SYSPART-CREATED-BY , :SYSPART-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :SYSPART-FK-CLI-CLIENT-NO , :SYSPART-FK-CLI-CLIENT-NAME , :SYSPART-FK-CLI-SSN ) END-EXEC.
                                 WS.SYSPART_SYSTEM_CODE, WS.SYSPART_PARTICIPATION_FLAG, WS.SYSPART_CREATED_BY, WS.SYSPART_LAST_MODIFIED_BY, WS.SYSPART_FK_CLI_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(-803))))                  //COBOL==> WHEN -803
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("SYS PART INSERT FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                          //COBOL==> DISPLAY 'SYS PART INSERT FAILED:' SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99608_INSERT_SYS_PART") { M_99608_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99608_EXIT
        /// </summary>
        private void M_99608_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99608_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99608_EXIT") { M_99609_DELETE_SYS_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99609_DELETE_SYS_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99609_DELETE_SYS_PART(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99609-DELETE-SYS-PART'
            DbConv.ExecuteSql("DELETE FROM KSD_SYSTEM_PART WHERE SYSTEM_CODE = {0} AND FK_CLB_CLIENT_NO = {1} AND FK_CLI_CLIENT_NAME = {2} AND FK_CLI_SSN = {3} AND SYSTEM_CODE = {4}", WS.SYSPART_SYSTEM_CODE, WS.SYSPART_FK_CLI_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN, WS.SYSPART_SYSTEM_CODE);  //COBOL==> EXEC SQL DELETE FROM KSD_SYSTEM_PART WHERE SYSTEM_CODE = :SYSPART-SYSTEM-CODE AND FK_CLB_CLIENT_NO = :SYSPART-FK-CLI-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN AND SYSTEM_CODE = :SYSPART-SYSTEM-CODE END-EXEC.
                                                                                                                                                                                                                                                                                                                             // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
                                                                                                                                                                                                                                                                                                                             // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN 0
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100))))                  //COBOL==> WHEN +100
            {
                //Continue                                                                                          //COBOL==> CONTINUE
                //COMMENT:              DISPLAY 'GOOD DELETE FOR SYS PART OR NO RECORD'
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("SYS PART DELETE FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                          //COBOL==> DISPLAY 'SYS PART DELETE FAILED:' SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99609_DELETE_SYS_PART") { M_99609_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99609_EXIT
        /// </summary>
        private void M_99609_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99609_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99609_EXIT") { M_99610_POPULATE_SYSTEM_CODE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99610_POPULATE_SYSTEM_CODE
        /// </summary>
        /// <remarks>
        ///COMMENT: JR-E
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99610_POPULATE_SYSTEM_CODE(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99610-POPULATE-SYSTEM-CODE'.
            // EvaluateList !TRUE!                                                                              //COBOL==> EVALUATE TRUE
            if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_AE))                                          //COBOL==> WHEN SYSPART-SYSTEM-CODE = WS-SYS-CD-AE
            {
                LS.FLAG_0015XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.SYSPART_PARTICIPATION_FLAG);                      //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO FLAG-0015XX ( WS-EXP-CNT )
            }                                                                                               //COBOL==> WHEN SYSPART-SYSTEM-CODE = WS-SYS-CD-CS
            else
            if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_CS))
            {
                LS.FLAG_0016XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.SYSPART_PARTICIPATION_FLAG);                      //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO FLAG-0016XX ( WS-EXP-CNT )
            }                                                                                               //COBOL==> WHEN SYSPART-SYSTEM-CODE = WS-SYS-CD-FA
            else
            if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_FA))
            {
                LS.FLAG_0017XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.SYSPART_PARTICIPATION_FLAG);                      //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO FLAG-0017XX ( WS-EXP-CNT )
            }                                                                                               //COBOL==> WHEN SYSPART-SYSTEM-CODE = WS-SYS-CD-KM
            else
            if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_KM))
            {
                LS.FLAG_0018XX[WS.WS_EXP_CNT.AsInt()].SetValue(WS.SYSPART_PARTICIPATION_FLAG);                      //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO FLAG-0018XX ( WS-EXP-CNT )
            }                                                                                               //COBOL==> WHEN OTHER
            else
            {
                DisplayToLog("INVALID SYSTEM FLAG IGNORED:" + WS.SYSPART_SYSTEM_CODE.AsString());                   //COBOL==> DISPLAY 'INVALID SYSTEM FLAG IGNORED:' SYSPART-SYSTEM-CODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99610_POPULATE_SYSTEM_CODE") { M_99610_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99610_EXIT
        /// </summary>
        private void M_99610_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99610_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99610_EXIT") { M_99900_CLOSE_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99900_CLOSE_SPA_VIEW
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99900_CLOSE_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99900- CLIENT SELECT SW:' SYSPART-SELECT-CLIENT-SW
            //COMMENT:     DISPLAY '99900-CLOSE-SPA-VIEW'.
            DbConv.CloseReader("SPA-VIEW");                                                                     //COBOL==> EXEC SQL CLOSE SPA-VIEW END-EXEC.
                                                                                                                //COMMENT:     IF WS-SYSPART-ERR-YES
                                                                                                                //COMMENT:        GO TO 99900-EXIT
                                                                                                                //COMMENT:     END-IF.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.COUNT_0020.SetValue(92);                                                                         //COBOL==> MOVE 92 TO COUNT-0020
                DisplayToLog("SYS PART FETCH CURSOR  FAILED:" + DbConv.SQLCA.SQLCODE.AsString());                   //COBOL==> DISPLAY 'SYS PART FETCH CURSOR  FAILED:' SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99900_CLOSE_SPA_VIEW") { M_99900_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99900_EXIT
        /// </summary>
        private void M_99900_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99900_EXIT") { return; }                                                     //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
