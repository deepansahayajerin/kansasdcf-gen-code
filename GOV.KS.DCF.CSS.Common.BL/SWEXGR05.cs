#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:48:40 PM
   **        *   FROM COBOL PGM   :  SWEXGR05
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                   INFORMATION ENGINEERING FACILITY (TM)
                       TEXAS INSTRUMENTS INC.
                COPYRIGHT (C) TEXAS INSTRUMENTS INC. 1997
       NAME: EAB_MATCH_CSE_PERSONS            DATE: 97/06/25
       TARGET OS:   MVS                       TIME: 12:20:03
       TARGET DBMS: DB2                       USER: SWMTSXC
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
   **************************************************************
   ** MAINTENANCE ************************************************
                         CHANGE
      DATE      AUTHOR   CONTROL DESCRIPTION
    ---------- --------- ------- ----------------------------------
    03/28/2014 G.BRAMSON CQ35825 ADABAS TO DB2 FOR KEES PHASE 3
    .......... ......... ....... KEEP ADABAS ERROR RESPONSE FIELDS.
   ****************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Control.CICS;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXGR05_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXGR05_ws_WorkingStorage";
            internal const string ADIM1 = "ADIM1";
            internal const string ADIM2 = "ADIM2";
            internal const string ADIM3 = "ADIM3";
            internal const string GROUP_EXPORT_0001FL = "GROUP_EXPORT_0001FL";
            internal const string GROUP_EXPORT_0001PS = "GROUP_EXPORT_0001PS";
            internal const string GROUP_EXPORT_0001RF = "GROUP_EXPORT_0001RF";
            internal const string FUNC_0329211337_ESC_FLAG = "FUNC_0329211337_ESC_FLAG";
            internal const string EXTERNAL_ACTION_BLOCK_WS = "EXTERNAL_ACTION_BLOCK_WS";
            internal const string MV_ABEND_FIELDS = "MV_ABEND_FIELDS";
            internal const string MV_ABEND_TYPE = "MV_ABEND_TYPE";
            internal const string MV_ABEND_TYPE_NONE = "MV_ABEND_TYPE_NONE";
            internal const string MV_ABEND_TYPE_ADABAS = "MV_ABEND_TYPE_ADABAS";
            internal const string MV_ABEND_TYPE_CICS = "MV_ABEND_TYPE_CICS";
            internal const string MV_ABEND_ADABAS = "MV_ABEND_ADABAS";
            internal const string MV_ADA_FILE_NUMBER = "MV_ADA_FILE_NUMBER";
            internal const string MV_ADA_FILE_ACTION = "MV_ADA_FILE_ACTION";
            internal const string MV_ADA_RESPONSE_CD = "MV_ADA_RESPONSE_CD";
            internal const string MV_ABEND_CICS = "MV_ABEND_CICS";
            internal const string MV_CICS_RESOURCE_NM = "MV_CICS_RESOURCE_NM";
            internal const string MV_CICS_FUNCTION_CD = "MV_CICS_FUNCTION_CD";
            internal const string MV_CICS_RESPONSE_CD = "MV_CICS_RESPONSE_CD";
            internal const string MV_ABS_TIME = "MV_ABS_TIME";
            internal const string MV_CCYYMMDD_X8 = "MV_CCYYMMDD_X8";
            internal const string MV_CC = "MV_CC";
            internal const string MV_YYMMDD = "MV_YYMMDD";
            internal const string MV_YY = "MV_YY";
            internal const string MV_MM = "MV_MM";
            internal const string MV_DD = "MV_DD";
            internal const string MV_CURRENT_CCYY = "MV_CURRENT_CCYY";
            internal const string MV_CURRENT_MMDD = "MV_CURRENT_MMDD";
            internal const string PREFETCH_ADDRESSING_AREA = "PREFETCH_ADDRESSING_AREA";
            internal const string PRF_POINTER_CLIENT_DBF = "PRF_POINTER_CLIENT_DBF";
            internal const string PRF_SUB = "PRF_SUB";
            internal const string MC_CLIENT_ENTRY_MAX = "MC_CLIENT_ENTRY_MAX";
            internal const string MC_CLIENT_ENTRY_EXP = "MC_CLIENT_ENTRY_EXP";
            internal const string MV_CLIENT_ENTRY_NUM = "MV_CLIENT_ENTRY_NUM";
            internal const string MV_CLIENT_ENTRY_SUB = "MV_CLIENT_ENTRY_SUB";
            internal const string MV_AGE = "MV_AGE";
            internal const string MV_AGE_LOW = "MV_AGE_LOW";
            internal const string MV_AGE_HIGH = "MV_AGE_HIGH";
            internal const string MV_AGE_RANGE = "MV_AGE_RANGE";
            internal const string MV_WORK_AGE = "MV_WORK_AGE";
            internal const string MV_WORK_AGE_NO_DEC = "MV_WORK_AGE_NO_DEC";
            internal const string MV_RECORD_NAME = "MV_RECORD_NAME";
            internal const string MV_RECORD_LAST_NAME = "MV_RECORD_LAST_NAME";
            internal const string MV_RECORD_FIRST_NAME = "MV_RECORD_FIRST_NAME";
            internal const string MV_RECORD_FIRST_NAME_1 = "MV_RECORD_FIRST_NAME_1";
            internal const string MV_RECORD_FIRST_NAME_11 = "MV_RECORD_FIRST_NAME_11";
            internal const string MV_RECORD_INITIAL = "MV_RECORD_INITIAL";
            internal const string MV_PHONETIC_DATA = "MV_PHONETIC_DATA";
            internal const string MV_PHONETIC_1 = "MV_PHONETIC_1";
            internal const string MV_PHONETIC_CODE = "MV_PHONETIC_CODE";
            internal const string MV_PHONETIC_3 = "MV_PHONETIC_3";
            internal const string MV_DATE_OF_BIRTH_SEX = "MV_DATE_OF_BIRTH_SEX";
            internal const string MV_DATE_OF_BIRTH_X8 = "MV_DATE_OF_BIRTH_X8";
            internal const string MV_DATE_OF_BIRTH = "MV_DATE_OF_BIRTH";
            internal const string MV_BIRTH_CCYY = "MV_BIRTH_CCYY";
            internal const string MV_BIRTH_MMDD = "MV_BIRTH_MMDD";
            internal const string MV_SEX = "MV_SEX";
            internal const string MV_CLIENT_POINTER = "MV_CLIENT_POINTER";
            internal const string MV_CLIENT_ID = "MV_CLIENT_ID";
            internal const string MV_CLIENT_ID_NUM = "MV_CLIENT_ID_NUM";
            internal const string MV_VERIFIED_SSN_FLAG = "MV_VERIFIED_SSN_FLAG";
            internal const string MV_SYSTEM_PARTICIPATION = "MV_SYSTEM_PARTICIPATION";
            internal const string MV_SYS_PART_AE = "MV_SYS_PART_AE";
            internal const string MV_SYS_PART_AE_YES = "MV_SYS_PART_AE_YES";
            internal const string MV_SYS_PART_CSE = "MV_SYS_PART_CSE";
            internal const string MV_SYS_PART_CSE_YES = "MV_SYS_PART_CSE_YES";
            internal const string MV_SYS_PART_CSE_ALIAS = "MV_SYS_PART_CSE_ALIAS";
            internal const string MV_SYS_PART_KANPAY = "MV_SYS_PART_KANPAY";
            internal const string MV_SYS_PART_KANPAY_YES = "MV_SYS_PART_KANPAY_YES";
            internal const string MV_SYS_PART_KSCARES = "MV_SYS_PART_KSCARES";
            internal const string MV_SYS_PART_KSCARES_YES = "MV_SYS_PART_KSCARES_YES";
            internal const string MV_SYS_PART_FACTS = "MV_SYS_PART_FACTS";
            internal const string MV_SYS_PART_FACTS_YES = "MV_SYS_PART_FACTS_YES";
            internal const string IMP_CLIENT_DATA = "IMP_CLIENT_DATA";
            internal const string IMP_SEARCH_TYPE = "IMP_SEARCH_TYPE";
            internal const string IMP_SEARCH_SSN = "IMP_SEARCH_SSN";
            internal const string IMP_SEARCH_NAME = "IMP_SEARCH_NAME";
            internal const string IMP_MATCH_PERCENT = "IMP_MATCH_PERCENT";
            internal const string IMP_MATCH_EXACT = "IMP_MATCH_EXACT";
            internal const string IMP_MATCH_PERCENT_9V99 = "IMP_MATCH_PERCENT_9V99";
            internal const string IMP_CLIENT_NAME = "IMP_CLIENT_NAME";
            internal const string IMP_CLIENT_LAST_NAME = "IMP_CLIENT_LAST_NAME";
            internal const string IMP_CLIENT_FIRST_NAME = "IMP_CLIENT_FIRST_NAME";
            internal const string IMP_CLIENT_FIRST_NAME_1 = "IMP_CLIENT_FIRST_NAME_1";
            internal const string IMP_CLIENT_FIRST_NAME_2 = "IMP_CLIENT_FIRST_NAME_2";
            internal const string IMP_CLIENT_FIRST_NAME_10 = "IMP_CLIENT_FIRST_NAME_10";
            internal const string IMP_CLIENT_INITIAL = "IMP_CLIENT_INITIAL";
            internal const string IMP_CLIENT_DATE_OF_BIRTH_SEX = "IMP_CLIENT_DATE_OF_BIRTH_SEX";
            internal const string IMP_CLIENT_DATE_OF_BIRTH_X8 = "IMP_CLIENT_DATE_OF_BIRTH_X8";
            internal const string IMP_CLIENT_DATE_OF_BIRTH = "IMP_CLIENT_DATE_OF_BIRTH";
            internal const string IMP_CLIENT_SEX = "IMP_CLIENT_SEX";
            internal const string IMP_CLIENT_AGE_X3 = "IMP_CLIENT_AGE_X3";
            internal const string IMP_CLIENT_AGE = "IMP_CLIENT_AGE";
            internal const string IMP_CLIENT_SOC_SEC_NUM_X9 = "IMP_CLIENT_SOC_SEC_NUM_X9";
            internal const string IMP_CLIENT_SOC_SEC_NUM = "IMP_CLIENT_SOC_SEC_NUM";
            internal const string IMP_CLIENT_KEY = "IMP_CLIENT_KEY";
            internal const string MC_TSQ_PH_DATA = "MC_TSQ_PH_DATA";
            internal const string MV_TSQ_PH_TRMID = "MV_TSQ_PH_TRMID";
            internal const string MC_TSQ_PH_DATA_LEN = "MC_TSQ_PH_DATA_LEN";
            internal const string MC_TSQ_PHONETIC_DATA = "MC_TSQ_PHONETIC_DATA";
            internal const string IMP_PHONETIC_DATA = "IMP_PHONETIC_DATA";
            internal const string IMP_PHONETIC_1 = "IMP_PHONETIC_1";
            internal const string IMP_PHONETIC_CODE = "IMP_PHONETIC_CODE";
            internal const string IMP_PHONETIC_3 = "IMP_PHONETIC_3";
            internal const string IMP_PHONETIC_3_HIGH = "IMP_PHONETIC_3_HIGH";
            internal const string IMP_PHONETIC_SAVE_REDUC_INQ = "IMP_PHONETIC_SAVE_REDUC_INQ";
            internal const string MV_CLIENT_ARRAY = "MV_CLIENT_ARRAY";
            internal const string MV_CLIENT_ENTRY = "MV_CLIENT_ENTRY";
            internal const string MV_CLIENT_NUMBER_X10 = "MV_CLIENT_NUMBER_X10";
            internal const string MV_CLIENT_NUMBER = "MV_CLIENT_NUMBER";
            internal const string MV_CLIENT_NAME = "MV_CLIENT_NAME";
            internal const string MV_CLIENT_LAST_NAME = "MV_CLIENT_LAST_NAME";
            internal const string MV_CLIENT_FIRST_NAME = "MV_CLIENT_FIRST_NAME";
            internal const string MV_CLIENT_INITIAL = "MV_CLIENT_INITIAL";
            internal const string MV_CLIENT_DATE_OF_BIRTH_SEX = "MV_CLIENT_DATE_OF_BIRTH_SEX";
            internal const string MV_CLIENT_DATE_OF_BIRTH_X8 = "MV_CLIENT_DATE_OF_BIRTH_X8";
            internal const string MV_CLIENT_DATE_OF_BIRTH = "MV_CLIENT_DATE_OF_BIRTH";
            internal const string MV_CLIENT_SEX = "MV_CLIENT_SEX";
            internal const string MV_CLIENT_SOC_SEC_NUM_X9 = "MV_CLIENT_SOC_SEC_NUM_X9";
            internal const string MV_CLIENT_SOC_SEC_NUM = "MV_CLIENT_SOC_SEC_NUM";
            internal const string MV_CLIENT_SYSTEM_PARTICIPATION = "MV_CLIENT_SYSTEM_PARTICIPATION";
            internal const string MV_CLIENT_SYS_PART_AE = "MV_CLIENT_SYS_PART_AE";
            internal const string MV_CLIENT_SYS_PART_CSE = "MV_CLIENT_SYS_PART_CSE";
            internal const string MV_CLIENT_SYS_PART_KANPAY = "MV_CLIENT_SYS_PART_KANPAY";
            internal const string MV_CLIENT_SYS_PART_KSCARES = "MV_CLIENT_SYS_PART_KSCARES";
            internal const string MV_ALIAS_IND = "MV_ALIAS_IND";
            internal const string MV_CLIENT_KEY = "MV_CLIENT_KEY";
            internal const string SW1_SWITCHES = "SW1_SWITCHES";
            internal const string SW1_EOF_SW = "SW1_EOF_SW";
            internal const string SW1_EOF_NO = "SW1_EOF_NO";
            internal const string SW1_EOF_YES = "SW1_EOF_YES";
            internal const string SW1_ERR_SW = "SW1_ERR_SW";
            internal const string SW1_ERR_NO = "SW1_ERR_NO";
            internal const string SW1_ERR_YES = "SW1_ERR_YES";
            internal const string DBK1_KEYS = "DBK1_KEYS";
            internal const string DBK1_CLIENT_NUMBER = "DBK1_CLIENT_NUMBER";
            internal const string DBK1_CLIENT_NAME = "DBK1_CLIENT_NAME";
            internal const string DBK1_SSN = "DBK1_SSN";
            internal const string DBK1_DATE_OF_BIRTH = "DBK1_DATE_OF_BIRTH";
            internal const string DBK1_GENDER = "DBK1_GENDER";
            internal const string DBK1_PHONETIC_DATA = "DBK1_PHONETIC_DATA";
            internal const string ADA1_NAME_KEY = "ADA1_NAME_KEY";
            internal const string ADA1_CLIENT_NAME = "ADA1_CLIENT_NAME";
            internal const string ADA1_SSN = "ADA1_SSN";
            internal const string ADA1_DATE_OF_BIRTH = "ADA1_DATE_OF_BIRTH";
            internal const string ADA1_SEX = "ADA1_SEX";
            internal const string ADA1_CLIENT_POINTER = "ADA1_CLIENT_POINTER";
            internal const string ADA1_CLIENT_NUMBER = "ADA1_CLIENT_NUMBER";
            internal const string ADA2_PHONETIC_KEY = "ADA2_PHONETIC_KEY";
            internal const string ADA2_PHONETIC_DATA = "ADA2_PHONETIC_DATA";
            internal const string ADA2_CLIENT_NAME = "ADA2_CLIENT_NAME";
            internal const string ADA2_SSN = "ADA2_SSN";
            internal const string ADA2_DATE_OF_BIRTH = "ADA2_DATE_OF_BIRTH";
            internal const string ADA2_SEX = "ADA2_SEX";
            internal const string ADA2_CLIENT_POINTER = "ADA2_CLIENT_POINTER";
            internal const string ADA2_CLIENT_NUMBER = "ADA2_CLIENT_NUMBER";
            internal const string ADA3_SSN_KEY = "ADA3_SSN_KEY";
            internal const string ADA3_SSN = "ADA3_SSN";
            internal const string ADA3_CLIENT_NAME = "ADA3_CLIENT_NAME";
            internal const string ADA3_DATE_OF_BIRTH = "ADA3_DATE_OF_BIRTH";
            internal const string ADA3_SEX = "ADA3_SEX";
            internal const string ADA3_CLIENT_POINTER = "ADA3_CLIENT_POINTER";
            internal const string ADA3_CLIENT_NUMBER = "ADA3_CLIENT_NUMBER";
            internal const string ADA1_ISN_BUF = "ADA1_ISN_BUF";
            internal const string ADA1_ISN_BUFVEC = "ADA1_ISN_BUFVEC";
            internal const string ADA2_ISN_BUF = "ADA2_ISN_BUF";
            internal const string ADA2_ISN_BUFVEC = "ADA2_ISN_BUFVEC";
            internal const string ADA3_ISN_BUF = "ADA3_ISN_BUF";
            internal const string ADA3_ISN_BUFVEC = "ADA3_ISN_BUFVEC";
            internal const string CL1_DCLKSD_CLIENT = "CL1_DCLKSD_CLIENT";
            internal const string CL1_SSN = "CL1_SSN";
            internal const string CL1_PREVIOUS_SSN = "CL1_PREVIOUS_SSN";
            internal const string CL1_PHONETIC_DATA = "CL1_PHONETIC_DATA";
            internal const string CL1_DT_OF_LAST_UPDATE = "CL1_DT_OF_LAST_UPDATE";
            internal const string CL1_DATE_OF_BIRTH = "CL1_DATE_OF_BIRTH";
            internal const string CL1_GENDER = "CL1_GENDER";
            internal const string CL1_VERIFIED_SSN_FLAG = "CL1_VERIFIED_SSN_FLAG";
            internal const string CL1_CLIENT_NAME = "CL1_CLIENT_NAME";
            internal const string CL1_CREATED_BY = "CL1_CREATED_BY";
            internal const string CL1_CREATED_TIMESTAMP = "CL1_CREATED_TIMESTAMP";
            internal const string CL1_LAST_MODIFIED_BY = "CL1_LAST_MODIFIED_BY";
            internal const string CL1_LAST_MODIFIED_TMST = "CL1_LAST_MODIFIED_TMST";
            internal const string CL1_FK_CLB_CLIENT_NO = "CL1_FK_CLB_CLIENT_NO";
            internal const string PH_FNTIC_C1 = "PH_FNTIC_C1";
            internal const string PH_FNTIC_C2 = "PH_FNTIC_C2";
            internal const string PH_FNTIC_C3 = "PH_FNTIC_C3";
            internal const string PH_FNTIC_CX = "PH_FNTIC_CX";
            internal const string PH_SUSS_ID = "PH_SUSS_ID";
            internal const string PH_HIT = "PH_HIT";
            internal const string PH_ERR_NAME = "PH_ERR_NAME";
            internal const string PH_COUNT_UP = "PH_COUNT_UP";
            internal const string PH_COUNT_INQUIRY = "PH_COUNT_INQUIRY";
            internal const string PH_COUNT_DB = "PH_COUNT_DB";
            internal const string PH_L1 = "PH_L1";
            internal const string PH_CR1_INDXX = "PH_CR1_INDXX";
            internal const string PH_CR2_INDXX = "PH_CR2_INDXX";
            internal const string PH_CF1_INDXX = "PH_CF1_INDXX";
            internal const string PH_CF2_INDXX = "PH_CF2_INDXX";
            internal const string PH_DEGREE = "PH_DEGREE";
            internal const string PH_PERCENT = "PH_PERCENT";
            internal const string PH_NAME_RAW_INQ = "PH_NAME_RAW_INQ";
            internal const string PH_NAME_RAW_MSTR = "PH_NAME_RAW_MSTR";
            internal const string PH_NAME_CRUNCH_INQ = "PH_NAME_CRUNCH_INQ";
            internal const string PH_L_CRNCH = "PH_L_CRNCH";
            internal const string PH_NAME_REDUC_INQ = "PH_NAME_REDUC_INQ";
            internal const string PH_L_REDUC = "PH_L_REDUC";
            internal const string PH_SAVE_REDUC_INQ = "PH_SAVE_REDUC_INQ";
            internal const string PH_S_REDUC = "PH_S_REDUC";
            internal const string PH_NAME_PARTS = "PH_NAME_PARTS";
            internal const string PH_THREE_LETTERS = "PH_THREE_LETTERS";
            internal const string PH_LETTERS_3 = "PH_LETTERS_3";
            internal const string PH_TWO_LETTERS = "PH_TWO_LETTERS";
            internal const string PH_ONE_LETTER = "PH_ONE_LETTER";
            internal const string PH_NAME_34_NUMERIC = "PH_NAME_34_NUMERIC";
            internal const string PH_NAME_NUM_34 = "PH_NAME_NUM_34";
            internal const string PH_NAME_17_NUMERIC = "PH_NAME_17_NUMERIC";
            internal const string PH_NAME_NUM_17 = "PH_NAME_NUM_17";
            internal const string PH_REFMT_34_17 = "PH_REFMT_34_17";
            internal const string PH_DIGIT_1 = "PH_DIGIT_1";
            internal const string PH_DIGIT_2 = "PH_DIGIT_2";
            internal const string PH_FIRST_2_TABLE = "PH_FIRST_2_TABLE";
            internal const string PH_FIRST_2_TBL = "PH_FIRST_2_TBL";
            internal const string PH_FR2_NUM = "PH_FR2_NUM";
            internal const string PH_ALPH2 = "PH_ALPH2";
            internal const string PH_NUM2 = "PH_NUM2";
            internal const string PH_FIRST_1_TABLE = "PH_FIRST_1_TABLE";
            internal const string PH_FIRST_1_TBL = "PH_FIRST_1_TBL";
            internal const string PH_FR1_NUM = "PH_FR1_NUM";
            internal const string PH_ALPH1 = "PH_ALPH1";
            internal const string PH_NUM1 = "PH_NUM1";
            internal const string PH_REMAIN_2_TABLE = "PH_REMAIN_2_TABLE";
            internal const string PH_REMAIN_2_TBL = "PH_REMAIN_2_TBL";
            internal const string PH_RR2_NUM = "PH_RR2_NUM";
            internal const string PH_ALPHR2 = "PH_ALPHR2";
            internal const string PH_NUMR2 = "PH_NUMR2";
            internal const string PH_REMAIN_1_TABLE = "PH_REMAIN_1_TABLE";
            internal const string PH_REMAIN_1_TBL = "PH_REMAIN_1_TBL";
            internal const string PH_RR1_NUM = "PH_RR1_NUM";
            internal const string PH_ALPHR1 = "PH_ALPHR1";
            internal const string PH_NUMR1 = "PH_NUMR1";
            internal const string WS9_SYSTEM_CODES = "WS9_SYSTEM_CODES";
            internal const string WS9_SYSTEM_CODE_AE = "WS9_SYSTEM_CODE_AE";
            internal const string WS9_SYSTEM_CODE_CS = "WS9_SYSTEM_CODE_CS";
            internal const string WS9_SYSTEM_CODE_KA = "WS9_SYSTEM_CODE_KA";
            internal const string WS9_SYSTEM_CODE_KS = "WS9_SYSTEM_CODE_KS";
            internal const string WS9_SYSTEM_CODE_FA = "WS9_SYSTEM_CODE_FA";
            internal const string SW9_SWITCHES = "SW9_SWITCHES";
            internal const string SW9_EOF_SW = "SW9_EOF_SW";
            internal const string SW9_EOF_NOT_FOUND = "SW9_EOF_NOT_FOUND";
            internal const string SW9_EOF_NO = "SW9_EOF_NO";
            internal const string SW9_EOF_YES = "SW9_EOF_YES";
            internal const string SW9_ERR_SW = "SW9_ERR_SW";
            internal const string SW9_ERR_NO = "SW9_ERR_NO";
            internal const string SW9_ERR_YES = "SW9_ERR_YES";
            internal const string SW9_SELECT_CLIENT_SW = "SW9_SELECT_CLIENT_SW";
            internal const string SW9_SELECT_CLIENT_NO = "SW9_SELECT_CLIENT_NO";
            internal const string SW9_SELECT_CLIENT_YES = "SW9_SELECT_CLIENT_YES";
            internal const string WS9_CLIENT_POINTER = "WS9_CLIENT_POINTER";
            internal const string WS9_CLIENT_ID = "WS9_CLIENT_ID";
            internal const string WS9_VERIFIED_SSN_FLAG = "WS9_VERIFIED_SSN_FLAG";
            internal const string WS9_SYSTEM_PARTICIPATION = "WS9_SYSTEM_PARTICIPATION";
            internal const string WS9_SYS_PART_AE = "WS9_SYS_PART_AE";
            internal const string WS9_SYS_PART_CSE = "WS9_SYS_PART_CSE";
            internal const string WS9_SYS_PART_KANPAY = "WS9_SYS_PART_KANPAY";
            internal const string WS9_SYS_PART_KSCARES = "WS9_SYS_PART_KSCARES";
            internal const string WS9_SYS_PART_FACTS = "WS9_SYS_PART_FACTS";
            internal const string WS9_ABEND_FIELDS = "WS9_ABEND_FIELDS";
            internal const string WS9_ABEND_TYPE = "WS9_ABEND_TYPE";
            internal const string WS9_ABEND_TYPE_NONE = "WS9_ABEND_TYPE_NONE";
            internal const string WS9_ABEND_TYPE_ADABAS = "WS9_ABEND_TYPE_ADABAS";
            internal const string WS9_ABEND_TYPE_CICS = "WS9_ABEND_TYPE_CICS";
            internal const string WS9_ABEND_ADABAS = "WS9_ABEND_ADABAS";
            internal const string WS9_ADA_FILE_NUMBER = "WS9_ADA_FILE_NUMBER";
            internal const string WS9_ADA_FILE_ACTION = "WS9_ADA_FILE_ACTION";
            internal const string WS9_ADA_RESPONSE_CD = "WS9_ADA_RESPONSE_CD";
            internal const string WS9_ABEND_CICS = "WS9_ABEND_CICS";
            internal const string WS9_CICS_RESOURCE_NM = "WS9_CICS_RESOURCE_NM";
            internal const string WS9_CICS_FUNCTION_CD = "WS9_CICS_FUNCTION_CD";
            internal const string WS9_CICS_RESPONSE_CD = "WS9_CICS_RESPONSE_CD";
            internal const string WS9_MISC = "WS9_MISC";
            internal const string WS9_MSG_X = "WS9_MSG_X";
            internal const string WS9_MSG_PROG = "WS9_MSG_PROG";
            internal const string WS9_MSG_1 = "WS9_MSG_1";
            internal const string WS9_MSG = "WS9_MSG";
            internal const string WS9_MSG_CODE = "WS9_MSG_CODE";
            internal const string WS9_MSG_SQLCODE = "WS9_MSG_SQLCODE";
            internal const string WS9_MSG_2 = "WS9_MSG_2";
            internal const string WS9_MSG_FIELD = "WS9_MSG_FIELD";
            internal const string WS9_MSG_VALUE = "WS9_MSG_VALUE";
            internal const string WS9_DATE_ADA = "WS9_DATE_ADA";
            internal const string WS9_DATE_DB2 = "WS9_DATE_DB2";
            internal const string DBK9_KEYS = "DBK9_KEYS";
            internal const string DBK9_CLIENT_NUMBER = "DBK9_CLIENT_NUMBER";
            internal const string DBK9_CLIENT_NAME = "DBK9_CLIENT_NAME";
            internal const string DBK9_SSN = "DBK9_SSN";
            internal const string CLB9_DCLKSD_CLIENT_BASIC = "CLB9_DCLKSD_CLIENT_BASIC";
            internal const string CLB9_CLIENT_NUMBER = "CLB9_CLIENT_NUMBER";
            internal const string CLB9_CLIENT_GIVEN_NAME = "CLB9_CLIENT_GIVEN_NAME";
            internal const string CLB9_CLIENT_INITIALS = "CLB9_CLIENT_INITIALS";
            internal const string CLB9_CLIENT_SURNAME = "CLB9_CLIENT_SURNAME";
            internal const string CLB9_CIS_REPL_IND = "CLB9_CIS_REPL_IND";
            internal const string CLB9_WORK_PHONE = "CLB9_WORK_PHONE";
            internal const string CLB9_SSN = "CLB9_SSN";
            internal const string CLB9_GENDER = "CLB9_GENDER";
            internal const string CLB9_PARENT_RGHTS_SEV = "CLB9_PARENT_RGHTS_SEV";
            internal const string CLB9_PRNT_RGHTS_SEV_DT = "CLB9_PRNT_RGHTS_SEV_DT";
            internal const string CLB9_LEGAL_STATUS = "CLB9_LEGAL_STATUS";
            internal const string CLB9_INSURANCE_CODE = "CLB9_INSURANCE_CODE";
            internal const string CLB9_INITIAL_CUSTODY_DT = "CLB9_INITIAL_CUSTODY_DT";
            internal const string CLB9_HOME_PHONE = "CLB9_HOME_PHONE";
            internal const string CLB9_DATE_OF_BIRTH = "CLB9_DATE_OF_BIRTH";
            internal const string CLB9_CURR_PLACEMNT_DT = "CLB9_CURR_PLACEMNT_DT";
            internal const string CLB9_CURRENT_PLACEMENT = "CLB9_CURRENT_PLACEMENT";
            internal const string CLB9_CSEA_G_CAUSE_CODE = "CLB9_CSEA_G_CAUSE_CODE";
            internal const string CLB9_CSEA_G_CAUSE_CL_DT = "CLB9_CSEA_G_CAUSE_CL_DT";
            internal const string CLB9_CSEA_COOP_CODE = "CLB9_CSEA_COOP_CODE";
            internal const string CLB9_COUNTY_CRT_COMMIT = "CLB9_COUNTY_CRT_COMMIT";
            internal const string CLB9_MONTHS_ASST_AF = "CLB9_MONTHS_ASST_AF";
            internal const string CLB9_MONTHS_ASST_GA = "CLB9_MONTHS_ASST_GA";
            internal const string CLB9_MO_DEATH_DT = "CLB9_MO_DEATH_DT";
            internal const string CLB9_MO_PRT_DT = "CLB9_MO_PRT_DT";
            internal const string CLB9_FA_DEATH_DT = "CLB9_FA_DEATH_DT";
            internal const string CLB9_FA_PRT_DT = "CLB9_FA_PRT_DT";
            internal const string CLB9_MPI_ID = "CLB9_MPI_ID";
            internal const string CLB9_MED_COVERAGE_IND = "CLB9_MED_COVERAGE_IND";
            internal const string CLB9_INSURANCE_CARRIER = "CLB9_INSURANCE_CARRIER";
            internal const string CLB9_INSURANCE_POLCY_NO = "CLB9_INSURANCE_POLCY_NO";
            internal const string CLB9_SPOKEN_LANGUAGE = "CLB9_SPOKEN_LANGUAGE";
            internal const string CLB9_WRITTEN_LANGUAGE = "CLB9_WRITTEN_LANGUAGE";
            internal const string CLB9_STATE_OF_BIRTH = "CLB9_STATE_OF_BIRTH";
            internal const string CLB9_SCHOOL_DISTRICT = "CLB9_SCHOOL_DISTRICT";
            internal const string CLB9_ETHNIC_CLASS = "CLB9_ETHNIC_CLASS";
            internal const string CLB9_SUFFIX_NAME = "CLB9_SUFFIX_NAME";
            internal const string CLB9_EMPLOYER_NAME = "CLB9_EMPLOYER_NAME";
            internal const string CLB9_EARNED_INCOME_AMT = "CLB9_EARNED_INCOME_AMT";
            internal const string CLB9_INCOME_FREQUENCY = "CLB9_INCOME_FREQUENCY";
            internal const string CLB9_KEES_ABMS_ID = "CLB9_KEES_ABMS_ID";
            internal const string CLB9_EMAIL_ADDRESS = "CLB9_EMAIL_ADDRESS";
            internal const string CLB9_EMAIL_ADDRESS_LEN = "CLB9_EMAIL_ADDRESS_LEN";
            internal const string CLB9_EMAIL_ADDRESS_TEXT = "CLB9_EMAIL_ADDRESS_TEXT";
            internal const string CLB9_OCCUPATION = "CLB9_OCCUPATION";
            internal const string CLB9_OCCUPATION_LEN = "CLB9_OCCUPATION_LEN";
            internal const string CLB9_OCCUPATION_TEXT = "CLB9_OCCUPATION_TEXT";
            internal const string CLB9_CREATED_BY = "CLB9_CREATED_BY";
            internal const string CLB9_CREATED_TIMESTAMP = "CLB9_CREATED_TIMESTAMP";
            internal const string CLB9_LAST_MODIFIED_BY = "CLB9_LAST_MODIFIED_BY";
            internal const string CLB9_LAST_MODIFIED_TMST = "CLB9_LAST_MODIFIED_TMST";
            internal const string CL9_DCLKSD_CLIENT = "CL9_DCLKSD_CLIENT";
            internal const string CL9_SSN = "CL9_SSN";
            internal const string CL9_PREVIOUS_SSN = "CL9_PREVIOUS_SSN";
            internal const string CL9_PHONETIC_DATA = "CL9_PHONETIC_DATA";
            internal const string CL9_DT_OF_LAST_UPDATE = "CL9_DT_OF_LAST_UPDATE";
            internal const string CL9_DATE_OF_BIRTH = "CL9_DATE_OF_BIRTH";
            internal const string CL9_GENDER = "CL9_GENDER";
            internal const string CL9_VERIFIED_SSN_FLAG = "CL9_VERIFIED_SSN_FLAG";
            internal const string CL9_CLIENT_NAME = "CL9_CLIENT_NAME";
            internal const string CL9_CREATED_BY = "CL9_CREATED_BY";
            internal const string CL9_CREATED_TIMESTAMP = "CL9_CREATED_TIMESTAMP";
            internal const string CL9_LAST_MODIFIED_BY = "CL9_LAST_MODIFIED_BY";
            internal const string CL9_LAST_MODIFIED_TMST = "CL9_LAST_MODIFIED_TMST";
            internal const string CL9_FK_CLB_CLIENT_NO = "CL9_FK_CLB_CLIENT_NO";
            internal const string SP9_DCLKSD_SYSTEM_PART = "SP9_DCLKSD_SYSTEM_PART";
            internal const string SP9_SYSTEM_CODE = "SP9_SYSTEM_CODE";
            internal const string SP9_PARTICIPATION_FLAG = "SP9_PARTICIPATION_FLAG";
            internal const string SP9_CREATED_TIMESTAMP = "SP9_CREATED_TIMESTAMP";
            internal const string SP9_CREATED_BY = "SP9_CREATED_BY";
            internal const string SP9_LAST_MODIFIED_BY = "SP9_LAST_MODIFIED_BY";
            internal const string SP9_LAST_MODIFIED_TMST = "SP9_LAST_MODIFIED_TMST";
            internal const string SP9_FK_CLB_CLIENT_NO = "SP9_FK_CLB_CLIENT_NO";
            internal const string SP9_FK_CLI_CLIENT_NAME = "SP9_FK_CLI_CLIENT_NAME";
            internal const string SP9_FK_CLI_SSN = "SP9_FK_CLI_SSN";
            internal const string PH_CF2_INDEX = "PH_CF2_INDEX";
            internal const string PH_CF1_INDEX = "PH_CF1_INDEX";
            internal const string PH_CR2_INDEX = "PH_CR2_INDEX";
            internal const string PH_CR1_INDEX = "PH_CR1_INDEX";
        }
        #endregion

        #region Direct-access element properties
        public IField ADIM1 { get { return GetElementByName<IField>(Names.ADIM1); } }
        public IField ADIM2 { get { return GetElementByName<IField>(Names.ADIM2); } }
        public IField ADIM3 { get { return GetElementByName<IField>(Names.ADIM3); } }
        public IField GROUP_EXPORT_0001FL { get { return GetElementByName<IField>(Names.GROUP_EXPORT_0001FL); } }
        public IField GROUP_EXPORT_0001PS { get { return GetElementByName<IField>(Names.GROUP_EXPORT_0001PS); } }
        public IField GROUP_EXPORT_0001RF { get { return GetElementByName<IField>(Names.GROUP_EXPORT_0001RF); } }
        public IField FUNC_0329211337_ESC_FLAG { get { return GetElementByName<IField>(Names.FUNC_0329211337_ESC_FLAG); } }
        public IGroup EXTERNAL_ACTION_BLOCK_WS { get { return GetElementByName<IGroup>(Names.EXTERNAL_ACTION_BLOCK_WS); } }
        public IGroup MV_ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.MV_ABEND_FIELDS); } }
        public IField MV_ABEND_TYPE { get { return GetElementByName<IField>(Names.MV_ABEND_TYPE); } }
        public ICheckField MV_ABEND_TYPE_NONE { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_NONE); } }
        public ICheckField MV_ABEND_TYPE_ADABAS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_ADABAS); } }
        public ICheckField MV_ABEND_TYPE_CICS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_CICS); } }
        public IGroup MV_ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.MV_ABEND_ADABAS); } }
        public IField MV_ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.MV_ADA_FILE_NUMBER); } }
        public IField MV_ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.MV_ADA_FILE_ACTION); } }
        public IField MV_ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_ADA_RESPONSE_CD); } }
        public IGroup MV_ABEND_CICS { get { return GetElementByName<IGroup>(Names.MV_ABEND_CICS); } }
        public IField MV_CICS_RESOURCE_NM { get { return GetElementByName<IField>(Names.MV_CICS_RESOURCE_NM); } }
        public IField MV_CICS_FUNCTION_CD { get { return GetElementByName<IField>(Names.MV_CICS_FUNCTION_CD); } }
        public IField MV_CICS_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_CICS_RESPONSE_CD); } }
        public IField MV_ABS_TIME { get { return GetElementByName<IField>(Names.MV_ABS_TIME); } }
        public IGroup MV_CCYYMMDD_X8 { get { return GetElementByName<IGroup>(Names.MV_CCYYMMDD_X8); } }
        public IField MV_CC { get { return GetElementByName<IField>(Names.MV_CC); } }
        public IGroup MV_YYMMDD { get { return GetElementByName<IGroup>(Names.MV_YYMMDD); } }
        public IField MV_YY { get { return GetElementByName<IField>(Names.MV_YY); } }
        public IField MV_MM { get { return GetElementByName<IField>(Names.MV_MM); } }
        public IField MV_DD { get { return GetElementByName<IField>(Names.MV_DD); } }
        public IField MV_CURRENT_CCYY { get { return GetElementByName<IField>(Names.MV_CURRENT_CCYY); } }
        public IField MV_CURRENT_MMDD { get { return GetElementByName<IField>(Names.MV_CURRENT_MMDD); } }
        public IGroup PREFETCH_ADDRESSING_AREA { get { return GetElementByName<IGroup>(Names.PREFETCH_ADDRESSING_AREA); } }
        public IField PRF_POINTER_CLIENT_DBF { get { return GetElementByName<IField>(Names.PRF_POINTER_CLIENT_DBF); } }
        public IField PRF_SUB { get { return GetElementByName<IField>(Names.PRF_SUB); } }
        public IField MC_CLIENT_ENTRY_MAX { get { return GetElementByName<IField>(Names.MC_CLIENT_ENTRY_MAX); } }
        public IField MC_CLIENT_ENTRY_EXP { get { return GetElementByName<IField>(Names.MC_CLIENT_ENTRY_EXP); } }
        public IField MV_CLIENT_ENTRY_NUM { get { return GetElementByName<IField>(Names.MV_CLIENT_ENTRY_NUM); } }
        public IField MV_CLIENT_ENTRY_SUB { get { return GetElementByName<IField>(Names.MV_CLIENT_ENTRY_SUB); } }
        public IField MV_AGE { get { return GetElementByName<IField>(Names.MV_AGE); } }
        public IField MV_AGE_LOW { get { return GetElementByName<IField>(Names.MV_AGE_LOW); } }
        public IField MV_AGE_HIGH { get { return GetElementByName<IField>(Names.MV_AGE_HIGH); } }
        public IField MV_AGE_RANGE { get { return GetElementByName<IField>(Names.MV_AGE_RANGE); } }
        public IField MV_WORK_AGE { get { return GetElementByName<IField>(Names.MV_WORK_AGE); } }
        public IField MV_WORK_AGE_NO_DEC { get { return GetElementByName<IField>(Names.MV_WORK_AGE_NO_DEC); } }
        public IGroup MV_RECORD_NAME { get { return GetElementByName<IGroup>(Names.MV_RECORD_NAME); } }
        public IField MV_RECORD_LAST_NAME { get { return GetElementByName<IField>(Names.MV_RECORD_LAST_NAME); } }
        public IGroup MV_RECORD_FIRST_NAME { get { return GetElementByName<IGroup>(Names.MV_RECORD_FIRST_NAME); } }
        public IField MV_RECORD_FIRST_NAME_1 { get { return GetElementByName<IField>(Names.MV_RECORD_FIRST_NAME_1); } }
        public IField MV_RECORD_FIRST_NAME_11 { get { return GetElementByName<IField>(Names.MV_RECORD_FIRST_NAME_11); } }
        public IField MV_RECORD_INITIAL { get { return GetElementByName<IField>(Names.MV_RECORD_INITIAL); } }
        public IGroup MV_PHONETIC_DATA { get { return GetElementByName<IGroup>(Names.MV_PHONETIC_DATA); } }
        public IField MV_PHONETIC_1 { get { return GetElementByName<IField>(Names.MV_PHONETIC_1); } }
        public IField MV_PHONETIC_CODE { get { return GetElementByName<IField>(Names.MV_PHONETIC_CODE); } }
        public IField MV_PHONETIC_3 { get { return GetElementByName<IField>(Names.MV_PHONETIC_3); } }
        public IGroup MV_DATE_OF_BIRTH_SEX { get { return GetElementByName<IGroup>(Names.MV_DATE_OF_BIRTH_SEX); } }
        public IGroup MV_DATE_OF_BIRTH_X8 { get { return GetElementByName<IGroup>(Names.MV_DATE_OF_BIRTH_X8); } }
        public IField MV_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.MV_DATE_OF_BIRTH); } }
        public IField MV_BIRTH_CCYY { get { return GetElementByName<IField>(Names.MV_BIRTH_CCYY); } }
        public IField MV_BIRTH_MMDD { get { return GetElementByName<IField>(Names.MV_BIRTH_MMDD); } }
        public IField MV_SEX { get { return GetElementByName<IField>(Names.MV_SEX); } }
        public IGroup MV_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.MV_CLIENT_POINTER); } }
        public IGroup MV_CLIENT_ID { get { return GetElementByName<IGroup>(Names.MV_CLIENT_ID); } }
        public IField MV_CLIENT_ID_NUM { get { return GetElementByName<IField>(Names.MV_CLIENT_ID_NUM); } }
        public IField MV_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.MV_VERIFIED_SSN_FLAG); } }
        public IGroup MV_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.MV_SYSTEM_PARTICIPATION); } }
        public IField MV_SYS_PART_AE { get { return GetElementByName<IField>(Names.MV_SYS_PART_AE); } }
        public ICheckField MV_SYS_PART_AE_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_AE_YES); } }
        public IField MV_SYS_PART_CSE { get { return GetElementByName<IField>(Names.MV_SYS_PART_CSE); } }
        public ICheckField MV_SYS_PART_CSE_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_CSE_YES); } }
        public ICheckField MV_SYS_PART_CSE_ALIAS { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_CSE_ALIAS); } }
        public IField MV_SYS_PART_KANPAY { get { return GetElementByName<IField>(Names.MV_SYS_PART_KANPAY); } }
        public ICheckField MV_SYS_PART_KANPAY_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_KANPAY_YES); } }
        public IField MV_SYS_PART_KSCARES { get { return GetElementByName<IField>(Names.MV_SYS_PART_KSCARES); } }
        public ICheckField MV_SYS_PART_KSCARES_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_KSCARES_YES); } }
        public IField MV_SYS_PART_FACTS { get { return GetElementByName<IField>(Names.MV_SYS_PART_FACTS); } }
        public ICheckField MV_SYS_PART_FACTS_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_FACTS_YES); } }
        public IGroup IMP_CLIENT_DATA { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_DATA); } }
        public IField IMP_SEARCH_TYPE { get { return GetElementByName<IField>(Names.IMP_SEARCH_TYPE); } }
        public ICheckField IMP_SEARCH_SSN { get { return GetElementByName<ICheckField>(Names.IMP_SEARCH_SSN); } }
        public ICheckField IMP_SEARCH_NAME { get { return GetElementByName<ICheckField>(Names.IMP_SEARCH_NAME); } }
        public IField IMP_MATCH_PERCENT { get { return GetElementByName<IField>(Names.IMP_MATCH_PERCENT); } }
        public ICheckField IMP_MATCH_EXACT { get { return GetElementByName<ICheckField>(Names.IMP_MATCH_EXACT); } }
        public IField IMP_MATCH_PERCENT_9V99 { get { return GetElementByName<IField>(Names.IMP_MATCH_PERCENT_9V99); } }
        public IGroup IMP_CLIENT_NAME { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_NAME); } }
        public IField IMP_CLIENT_LAST_NAME { get { return GetElementByName<IField>(Names.IMP_CLIENT_LAST_NAME); } }
        public IGroup IMP_CLIENT_FIRST_NAME { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_FIRST_NAME); } }
        public IField IMP_CLIENT_FIRST_NAME_1 { get { return GetElementByName<IField>(Names.IMP_CLIENT_FIRST_NAME_1); } }
        public IField IMP_CLIENT_FIRST_NAME_2 { get { return GetElementByName<IField>(Names.IMP_CLIENT_FIRST_NAME_2); } }
        public IField IMP_CLIENT_FIRST_NAME_10 { get { return GetElementByName<IField>(Names.IMP_CLIENT_FIRST_NAME_10); } }
        public IField IMP_CLIENT_INITIAL { get { return GetElementByName<IField>(Names.IMP_CLIENT_INITIAL); } }
        public IGroup IMP_CLIENT_DATE_OF_BIRTH_SEX { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_DATE_OF_BIRTH_SEX); } }
        public IGroup IMP_CLIENT_DATE_OF_BIRTH_X8 { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_DATE_OF_BIRTH_X8); } }
        public IField IMP_CLIENT_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.IMP_CLIENT_DATE_OF_BIRTH); } }
        public IField IMP_CLIENT_SEX { get { return GetElementByName<IField>(Names.IMP_CLIENT_SEX); } }
        public IGroup IMP_CLIENT_AGE_X3 { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_AGE_X3); } }
        public IField IMP_CLIENT_AGE { get { return GetElementByName<IField>(Names.IMP_CLIENT_AGE); } }
        public IGroup IMP_CLIENT_SOC_SEC_NUM_X9 { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_SOC_SEC_NUM_X9); } }
        public IField IMP_CLIENT_SOC_SEC_NUM { get { return GetElementByName<IField>(Names.IMP_CLIENT_SOC_SEC_NUM); } }
        public IField IMP_CLIENT_KEY { get { return GetElementByName<IField>(Names.IMP_CLIENT_KEY); } }
        public IGroup MC_TSQ_PH_DATA { get { return GetElementByName<IGroup>(Names.MC_TSQ_PH_DATA); } }
        public IField MV_TSQ_PH_TRMID { get { return GetElementByName<IField>(Names.MV_TSQ_PH_TRMID); } }
        public IField MC_TSQ_PH_DATA_LEN { get { return GetElementByName<IField>(Names.MC_TSQ_PH_DATA_LEN); } }
        public IGroup MC_TSQ_PHONETIC_DATA { get { return GetElementByName<IGroup>(Names.MC_TSQ_PHONETIC_DATA); } }
        public IGroup IMP_PHONETIC_DATA { get { return GetElementByName<IGroup>(Names.IMP_PHONETIC_DATA); } }
        public IField IMP_PHONETIC_1 { get { return GetElementByName<IField>(Names.IMP_PHONETIC_1); } }
        public IField IMP_PHONETIC_CODE { get { return GetElementByName<IField>(Names.IMP_PHONETIC_CODE); } }
        public IField IMP_PHONETIC_3 { get { return GetElementByName<IField>(Names.IMP_PHONETIC_3); } }
        public IField IMP_PHONETIC_3_HIGH { get { return GetElementByName<IField>(Names.IMP_PHONETIC_3_HIGH); } }
        public IField IMP_PHONETIC_SAVE_REDUC_INQ { get { return GetElementByName<IField>(Names.IMP_PHONETIC_SAVE_REDUC_INQ); } }
        public IGroup MV_CLIENT_ARRAY { get { return GetElementByName<IGroup>(Names.MV_CLIENT_ARRAY); } }
        public IArrayElementAccessor<IGroup> MV_CLIENT_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.MV_CLIENT_ENTRY); } }
        public IArrayElementAccessor<IGroup> MV_CLIENT_NUMBER_X10 { get { return GetArrayElementAccessor<IGroup>(Names.MV_CLIENT_NUMBER_X10); } }
        public IArrayElementAccessor<IField> MV_CLIENT_NUMBER { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_NUMBER); } }
        public IArrayElementAccessor<IGroup> MV_CLIENT_NAME { get { return GetArrayElementAccessor<IGroup>(Names.MV_CLIENT_NAME); } }
        public IArrayElementAccessor<IField> MV_CLIENT_LAST_NAME { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_LAST_NAME); } }
        public IArrayElementAccessor<IField> MV_CLIENT_FIRST_NAME { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_FIRST_NAME); } }
        public IArrayElementAccessor<IField> MV_CLIENT_INITIAL { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_INITIAL); } }
        public IArrayElementAccessor<IGroup> MV_CLIENT_DATE_OF_BIRTH_SEX { get { return GetArrayElementAccessor<IGroup>(Names.MV_CLIENT_DATE_OF_BIRTH_SEX); } }
        public IArrayElementAccessor<IGroup> MV_CLIENT_DATE_OF_BIRTH_X8 { get { return GetArrayElementAccessor<IGroup>(Names.MV_CLIENT_DATE_OF_BIRTH_X8); } }
        public IArrayElementAccessor<IField> MV_CLIENT_DATE_OF_BIRTH { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_DATE_OF_BIRTH); } }
        public IArrayElementAccessor<IField> MV_CLIENT_SEX { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_SEX); } }
        public IArrayElementAccessor<IGroup> MV_CLIENT_SOC_SEC_NUM_X9 { get { return GetArrayElementAccessor<IGroup>(Names.MV_CLIENT_SOC_SEC_NUM_X9); } }
        public IArrayElementAccessor<IField> MV_CLIENT_SOC_SEC_NUM { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_SOC_SEC_NUM); } }
        public IArrayElementAccessor<IGroup> MV_CLIENT_SYSTEM_PARTICIPATION { get { return GetArrayElementAccessor<IGroup>(Names.MV_CLIENT_SYSTEM_PARTICIPATION); } }
        public IArrayElementAccessor<IField> MV_CLIENT_SYS_PART_AE { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_SYS_PART_AE); } }
        public IArrayElementAccessor<IField> MV_CLIENT_SYS_PART_CSE { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_SYS_PART_CSE); } }
        public IArrayElementAccessor<IField> MV_CLIENT_SYS_PART_KANPAY { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_SYS_PART_KANPAY); } }
        public IArrayElementAccessor<IField> MV_CLIENT_SYS_PART_KSCARES { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_SYS_PART_KSCARES); } }
        public IArrayElementAccessor<IField> MV_ALIAS_IND { get { return GetArrayElementAccessor<IField>(Names.MV_ALIAS_IND); } }
        public IArrayElementAccessor<IField> MV_CLIENT_KEY { get { return GetArrayElementAccessor<IField>(Names.MV_CLIENT_KEY); } }
        public IGroup SW1_SWITCHES { get { return GetElementByName<IGroup>(Names.SW1_SWITCHES); } }
        public IField SW1_EOF_SW { get { return GetElementByName<IField>(Names.SW1_EOF_SW); } }
        public ICheckField SW1_EOF_NO { get { return GetElementByName<ICheckField>(Names.SW1_EOF_NO); } }
        public ICheckField SW1_EOF_YES { get { return GetElementByName<ICheckField>(Names.SW1_EOF_YES); } }
        public IField SW1_ERR_SW { get { return GetElementByName<IField>(Names.SW1_ERR_SW); } }
        public ICheckField SW1_ERR_NO { get { return GetElementByName<ICheckField>(Names.SW1_ERR_NO); } }
        public ICheckField SW1_ERR_YES { get { return GetElementByName<ICheckField>(Names.SW1_ERR_YES); } }
        public IGroup DBK1_KEYS { get { return GetElementByName<IGroup>(Names.DBK1_KEYS); } }
        public IField DBK1_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.DBK1_CLIENT_NUMBER); } }
        public IField DBK1_CLIENT_NAME { get { return GetElementByName<IField>(Names.DBK1_CLIENT_NAME); } }
        public IField DBK1_SSN { get { return GetElementByName<IField>(Names.DBK1_SSN); } }
        public IField DBK1_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.DBK1_DATE_OF_BIRTH); } }
        public IField DBK1_GENDER { get { return GetElementByName<IField>(Names.DBK1_GENDER); } }
        public IField DBK1_PHONETIC_DATA { get { return GetElementByName<IField>(Names.DBK1_PHONETIC_DATA); } }
        public IGroup ADA1_NAME_KEY { get { return GetElementByName<IGroup>(Names.ADA1_NAME_KEY); } }
        public IField ADA1_CLIENT_NAME { get { return GetElementByName<IField>(Names.ADA1_CLIENT_NAME); } }
        public IField ADA1_SSN { get { return GetElementByName<IField>(Names.ADA1_SSN); } }
        public IField ADA1_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.ADA1_DATE_OF_BIRTH); } }
        public IField ADA1_SEX { get { return GetElementByName<IField>(Names.ADA1_SEX); } }
        public IGroup ADA1_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.ADA1_CLIENT_POINTER); } }
        public IField ADA1_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.ADA1_CLIENT_NUMBER); } }
        public IGroup ADA2_PHONETIC_KEY { get { return GetElementByName<IGroup>(Names.ADA2_PHONETIC_KEY); } }
        public IField ADA2_PHONETIC_DATA { get { return GetElementByName<IField>(Names.ADA2_PHONETIC_DATA); } }
        public IField ADA2_CLIENT_NAME { get { return GetElementByName<IField>(Names.ADA2_CLIENT_NAME); } }
        public IField ADA2_SSN { get { return GetElementByName<IField>(Names.ADA2_SSN); } }
        public IField ADA2_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.ADA2_DATE_OF_BIRTH); } }
        public IField ADA2_SEX { get { return GetElementByName<IField>(Names.ADA2_SEX); } }
        public IGroup ADA2_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.ADA2_CLIENT_POINTER); } }
        public IField ADA2_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.ADA2_CLIENT_NUMBER); } }
        public IGroup ADA3_SSN_KEY { get { return GetElementByName<IGroup>(Names.ADA3_SSN_KEY); } }
        public IField ADA3_SSN { get { return GetElementByName<IField>(Names.ADA3_SSN); } }
        public IField ADA3_CLIENT_NAME { get { return GetElementByName<IField>(Names.ADA3_CLIENT_NAME); } }
        public IField ADA3_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.ADA3_DATE_OF_BIRTH); } }
        public IField ADA3_SEX { get { return GetElementByName<IField>(Names.ADA3_SEX); } }
        public IGroup ADA3_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.ADA3_CLIENT_POINTER); } }
        public IField ADA3_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.ADA3_CLIENT_NUMBER); } }
        public IGroup ADA1_ISN_BUF { get { return GetElementByName<IGroup>(Names.ADA1_ISN_BUF); } }
        public IArrayElementAccessor<IField> ADA1_ISN_BUFVEC { get { return GetArrayElementAccessor<IField>(Names.ADA1_ISN_BUFVEC); } }
        public IGroup ADA2_ISN_BUF { get { return GetElementByName<IGroup>(Names.ADA2_ISN_BUF); } }
        public IArrayElementAccessor<IField> ADA2_ISN_BUFVEC { get { return GetArrayElementAccessor<IField>(Names.ADA2_ISN_BUFVEC); } }
        public IGroup ADA3_ISN_BUF { get { return GetElementByName<IGroup>(Names.ADA3_ISN_BUF); } }
        public IArrayElementAccessor<IField> ADA3_ISN_BUFVEC { get { return GetArrayElementAccessor<IField>(Names.ADA3_ISN_BUFVEC); } }
        public IGroup CL1_DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.CL1_DCLKSD_CLIENT); } }
        public IField CL1_SSN { get { return GetElementByName<IField>(Names.CL1_SSN); } }
        public IField CL1_PREVIOUS_SSN { get { return GetElementByName<IField>(Names.CL1_PREVIOUS_SSN); } }
        public IField CL1_PHONETIC_DATA { get { return GetElementByName<IField>(Names.CL1_PHONETIC_DATA); } }
        public IField CL1_DT_OF_LAST_UPDATE { get { return GetElementByName<IField>(Names.CL1_DT_OF_LAST_UPDATE); } }
        public IField CL1_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CL1_DATE_OF_BIRTH); } }
        public IField CL1_GENDER { get { return GetElementByName<IField>(Names.CL1_GENDER); } }
        public IField CL1_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CL1_VERIFIED_SSN_FLAG); } }
        public IField CL1_CLIENT_NAME { get { return GetElementByName<IField>(Names.CL1_CLIENT_NAME); } }
        public IField CL1_CREATED_BY { get { return GetElementByName<IField>(Names.CL1_CREATED_BY); } }
        public IField CL1_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CL1_CREATED_TIMESTAMP); } }
        public IField CL1_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CL1_LAST_MODIFIED_BY); } }
        public IField CL1_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CL1_LAST_MODIFIED_TMST); } }
        public IField CL1_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CL1_FK_CLB_CLIENT_NO); } }
        public IField PH_FNTIC_C1 { get { return GetElementByName<IField>(Names.PH_FNTIC_C1); } }
        public IField PH_FNTIC_C2 { get { return GetElementByName<IField>(Names.PH_FNTIC_C2); } }
        public IField PH_FNTIC_C3 { get { return GetElementByName<IField>(Names.PH_FNTIC_C3); } }
        public IField PH_FNTIC_CX { get { return GetElementByName<IField>(Names.PH_FNTIC_CX); } }
        public IField PH_SUSS_ID { get { return GetElementByName<IField>(Names.PH_SUSS_ID); } }
        public IField PH_HIT { get { return GetElementByName<IField>(Names.PH_HIT); } }
        public IField PH_ERR_NAME { get { return GetElementByName<IField>(Names.PH_ERR_NAME); } }
        public IField PH_COUNT_UP { get { return GetElementByName<IField>(Names.PH_COUNT_UP); } }
        public IField PH_COUNT_INQUIRY { get { return GetElementByName<IField>(Names.PH_COUNT_INQUIRY); } }
        public IField PH_COUNT_DB { get { return GetElementByName<IField>(Names.PH_COUNT_DB); } }
        public IField PH_L1 { get { return GetElementByName<IField>(Names.PH_L1); } }
        public IField PH_CR1_INDXX { get { return GetElementByName<IField>(Names.PH_CR1_INDXX); } }
        public IField PH_CR2_INDXX { get { return GetElementByName<IField>(Names.PH_CR2_INDXX); } }
        public IField PH_CF1_INDXX { get { return GetElementByName<IField>(Names.PH_CF1_INDXX); } }
        public IField PH_CF2_INDXX { get { return GetElementByName<IField>(Names.PH_CF2_INDXX); } }
        public IField PH_DEGREE { get { return GetElementByName<IField>(Names.PH_DEGREE); } }
        public IField PH_PERCENT { get { return GetElementByName<IField>(Names.PH_PERCENT); } }
        public IField PH_NAME_RAW_INQ { get { return GetElementByName<IField>(Names.PH_NAME_RAW_INQ); } }
        public IField PH_NAME_RAW_MSTR { get { return GetElementByName<IField>(Names.PH_NAME_RAW_MSTR); } }
        public IGroup PH_NAME_CRUNCH_INQ { get { return GetElementByName<IGroup>(Names.PH_NAME_CRUNCH_INQ); } }
        public IArrayElementAccessor<IField> PH_L_CRNCH { get { return GetArrayElementAccessor<IField>(Names.PH_L_CRNCH); } }
        public IGroup PH_NAME_REDUC_INQ { get { return GetElementByName<IGroup>(Names.PH_NAME_REDUC_INQ); } }
        public IArrayElementAccessor<IField> PH_L_REDUC { get { return GetArrayElementAccessor<IField>(Names.PH_L_REDUC); } }
        public IGroup PH_SAVE_REDUC_INQ { get { return GetElementByName<IGroup>(Names.PH_SAVE_REDUC_INQ); } }
        public IArrayElementAccessor<IField> PH_S_REDUC { get { return GetArrayElementAccessor<IField>(Names.PH_S_REDUC); } }
        public IGroup PH_NAME_PARTS { get { return GetElementByName<IGroup>(Names.PH_NAME_PARTS); } }
        public IGroup PH_THREE_LETTERS { get { return GetElementByName<IGroup>(Names.PH_THREE_LETTERS); } }
        public IArrayElementAccessor<IField> PH_LETTERS_3 { get { return GetArrayElementAccessor<IField>(Names.PH_LETTERS_3); } }
        public IField PH_TWO_LETTERS { get { return GetElementByName<IField>(Names.PH_TWO_LETTERS); } }
        public IField PH_ONE_LETTER { get { return GetElementByName<IField>(Names.PH_ONE_LETTER); } }
        public IGroup PH_NAME_34_NUMERIC { get { return GetElementByName<IGroup>(Names.PH_NAME_34_NUMERIC); } }
        public IArrayElementAccessor<IField> PH_NAME_NUM_34 { get { return GetArrayElementAccessor<IField>(Names.PH_NAME_NUM_34); } }
        public IGroup PH_NAME_17_NUMERIC { get { return GetElementByName<IGroup>(Names.PH_NAME_17_NUMERIC); } }
        public IArrayElementAccessor<IField> PH_NAME_NUM_17 { get { return GetArrayElementAccessor<IField>(Names.PH_NAME_NUM_17); } }
        public IGroup PH_REFMT_34_17 { get { return GetElementByName<IGroup>(Names.PH_REFMT_34_17); } }
        public IField PH_DIGIT_1 { get { return GetElementByName<IField>(Names.PH_DIGIT_1); } }
        public IField PH_DIGIT_2 { get { return GetElementByName<IField>(Names.PH_DIGIT_2); } }
        public IGroup PH_FIRST_2_TABLE { get { return GetElementByName<IGroup>(Names.PH_FIRST_2_TABLE); } }
        public IGroup PH_FIRST_2_TBL { get { return GetElementByName<IGroup>(Names.PH_FIRST_2_TBL); } }
        public IArrayElementAccessor<IGroup> PH_FR2_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_FR2_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPH2 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPH2); } }
        public IArrayElementAccessor<IField> PH_NUM2 { get { return GetArrayElementAccessor<IField>(Names.PH_NUM2); } }
        public IGroup PH_FIRST_1_TABLE { get { return GetElementByName<IGroup>(Names.PH_FIRST_1_TABLE); } }
        public IGroup PH_FIRST_1_TBL { get { return GetElementByName<IGroup>(Names.PH_FIRST_1_TBL); } }
        public IArrayElementAccessor<IGroup> PH_FR1_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_FR1_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPH1 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPH1); } }
        public IArrayElementAccessor<IField> PH_NUM1 { get { return GetArrayElementAccessor<IField>(Names.PH_NUM1); } }
        public IGroup PH_REMAIN_2_TABLE { get { return GetElementByName<IGroup>(Names.PH_REMAIN_2_TABLE); } }
        public IGroup PH_REMAIN_2_TBL { get { return GetElementByName<IGroup>(Names.PH_REMAIN_2_TBL); } }
        public IArrayElementAccessor<IGroup> PH_RR2_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_RR2_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPHR2 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPHR2); } }
        public IArrayElementAccessor<IField> PH_NUMR2 { get { return GetArrayElementAccessor<IField>(Names.PH_NUMR2); } }
        public IGroup PH_REMAIN_1_TABLE { get { return GetElementByName<IGroup>(Names.PH_REMAIN_1_TABLE); } }
        public IGroup PH_REMAIN_1_TBL { get { return GetElementByName<IGroup>(Names.PH_REMAIN_1_TBL); } }
        public IArrayElementAccessor<IGroup> PH_RR1_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_RR1_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPHR1 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPHR1); } }
        public IArrayElementAccessor<IField> PH_NUMR1 { get { return GetArrayElementAccessor<IField>(Names.PH_NUMR1); } }
        public IGroup WS9_SYSTEM_CODES { get { return GetElementByName<IGroup>(Names.WS9_SYSTEM_CODES); } }
        public IField WS9_SYSTEM_CODE_AE { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_AE); } }
        public IField WS9_SYSTEM_CODE_CS { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_CS); } }
        public IField WS9_SYSTEM_CODE_KA { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_KA); } }
        public IField WS9_SYSTEM_CODE_KS { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_KS); } }
        public IField WS9_SYSTEM_CODE_FA { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_FA); } }
        public IGroup SW9_SWITCHES { get { return GetElementByName<IGroup>(Names.SW9_SWITCHES); } }
        public IField SW9_EOF_SW { get { return GetElementByName<IField>(Names.SW9_EOF_SW); } }
        public ICheckField SW9_EOF_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.SW9_EOF_NOT_FOUND); } }
        public ICheckField SW9_EOF_NO { get { return GetElementByName<ICheckField>(Names.SW9_EOF_NO); } }
        public ICheckField SW9_EOF_YES { get { return GetElementByName<ICheckField>(Names.SW9_EOF_YES); } }
        public IField SW9_ERR_SW { get { return GetElementByName<IField>(Names.SW9_ERR_SW); } }
        public ICheckField SW9_ERR_NO { get { return GetElementByName<ICheckField>(Names.SW9_ERR_NO); } }
        public ICheckField SW9_ERR_YES { get { return GetElementByName<ICheckField>(Names.SW9_ERR_YES); } }
        public IField SW9_SELECT_CLIENT_SW { get { return GetElementByName<IField>(Names.SW9_SELECT_CLIENT_SW); } }
        public ICheckField SW9_SELECT_CLIENT_NO { get { return GetElementByName<ICheckField>(Names.SW9_SELECT_CLIENT_NO); } }
        public ICheckField SW9_SELECT_CLIENT_YES { get { return GetElementByName<ICheckField>(Names.SW9_SELECT_CLIENT_YES); } }
        public IGroup WS9_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.WS9_CLIENT_POINTER); } }
        public IField WS9_CLIENT_ID { get { return GetElementByName<IField>(Names.WS9_CLIENT_ID); } }
        public IField WS9_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.WS9_VERIFIED_SSN_FLAG); } }
        public IGroup WS9_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.WS9_SYSTEM_PARTICIPATION); } }
        public IField WS9_SYS_PART_AE { get { return GetElementByName<IField>(Names.WS9_SYS_PART_AE); } }
        public IField WS9_SYS_PART_CSE { get { return GetElementByName<IField>(Names.WS9_SYS_PART_CSE); } }
        public IField WS9_SYS_PART_KANPAY { get { return GetElementByName<IField>(Names.WS9_SYS_PART_KANPAY); } }
        public IField WS9_SYS_PART_KSCARES { get { return GetElementByName<IField>(Names.WS9_SYS_PART_KSCARES); } }
        public IField WS9_SYS_PART_FACTS { get { return GetElementByName<IField>(Names.WS9_SYS_PART_FACTS); } }
        public IGroup WS9_ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.WS9_ABEND_FIELDS); } }
        public IField WS9_ABEND_TYPE { get { return GetElementByName<IField>(Names.WS9_ABEND_TYPE); } }
        public ICheckField WS9_ABEND_TYPE_NONE { get { return GetElementByName<ICheckField>(Names.WS9_ABEND_TYPE_NONE); } }
        public ICheckField WS9_ABEND_TYPE_ADABAS { get { return GetElementByName<ICheckField>(Names.WS9_ABEND_TYPE_ADABAS); } }
        public ICheckField WS9_ABEND_TYPE_CICS { get { return GetElementByName<ICheckField>(Names.WS9_ABEND_TYPE_CICS); } }
        public IGroup WS9_ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.WS9_ABEND_ADABAS); } }
        public IField WS9_ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.WS9_ADA_FILE_NUMBER); } }
        public IField WS9_ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.WS9_ADA_FILE_ACTION); } }
        public IField WS9_ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.WS9_ADA_RESPONSE_CD); } }
        public IGroup WS9_ABEND_CICS { get { return GetElementByName<IGroup>(Names.WS9_ABEND_CICS); } }
        public IField WS9_CICS_RESOURCE_NM { get { return GetElementByName<IField>(Names.WS9_CICS_RESOURCE_NM); } }
        public IField WS9_CICS_FUNCTION_CD { get { return GetElementByName<IField>(Names.WS9_CICS_FUNCTION_CD); } }
        public IField WS9_CICS_RESPONSE_CD { get { return GetElementByName<IField>(Names.WS9_CICS_RESPONSE_CD); } }
        public IGroup WS9_MISC { get { return GetElementByName<IGroup>(Names.WS9_MISC); } }
        public IGroup WS9_MSG_X { get { return GetElementByName<IGroup>(Names.WS9_MSG_X); } }
        public IField WS9_MSG_PROG { get { return GetElementByName<IField>(Names.WS9_MSG_PROG); } }
        public IGroup WS9_MSG_1 { get { return GetElementByName<IGroup>(Names.WS9_MSG_1); } }
        public IField WS9_MSG { get { return GetElementByName<IField>(Names.WS9_MSG); } }
        public IGroup WS9_MSG_CODE { get { return GetElementByName<IGroup>(Names.WS9_MSG_CODE); } }
        public IField WS9_MSG_SQLCODE { get { return GetElementByName<IField>(Names.WS9_MSG_SQLCODE); } }
        public IGroup WS9_MSG_2 { get { return GetElementByName<IGroup>(Names.WS9_MSG_2); } }
        public IField WS9_MSG_FIELD { get { return GetElementByName<IField>(Names.WS9_MSG_FIELD); } }
        public IField WS9_MSG_VALUE { get { return GetElementByName<IField>(Names.WS9_MSG_VALUE); } }
        public IField WS9_DATE_ADA { get { return GetElementByName<IField>(Names.WS9_DATE_ADA); } }
        public IField WS9_DATE_DB2 { get { return GetElementByName<IField>(Names.WS9_DATE_DB2); } }
        public IGroup DBK9_KEYS { get { return GetElementByName<IGroup>(Names.DBK9_KEYS); } }
        public IField DBK9_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.DBK9_CLIENT_NUMBER); } }
        public IField DBK9_CLIENT_NAME { get { return GetElementByName<IField>(Names.DBK9_CLIENT_NAME); } }
        public IField DBK9_SSN { get { return GetElementByName<IField>(Names.DBK9_SSN); } }
        public IGroup CLB9_DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.CLB9_DCLKSD_CLIENT_BASIC); } }
        public IField CLB9_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLB9_CLIENT_NUMBER); } }
        public IField CLB9_CLIENT_GIVEN_NAME { get { return GetElementByName<IField>(Names.CLB9_CLIENT_GIVEN_NAME); } }
        public IField CLB9_CLIENT_INITIALS { get { return GetElementByName<IField>(Names.CLB9_CLIENT_INITIALS); } }
        public IField CLB9_CLIENT_SURNAME { get { return GetElementByName<IField>(Names.CLB9_CLIENT_SURNAME); } }
        public IField CLB9_CIS_REPL_IND { get { return GetElementByName<IField>(Names.CLB9_CIS_REPL_IND); } }
        public IField CLB9_WORK_PHONE { get { return GetElementByName<IField>(Names.CLB9_WORK_PHONE); } }
        public IField CLB9_SSN { get { return GetElementByName<IField>(Names.CLB9_SSN); } }
        public IField CLB9_GENDER { get { return GetElementByName<IField>(Names.CLB9_GENDER); } }
        public IField CLB9_PARENT_RGHTS_SEV { get { return GetElementByName<IField>(Names.CLB9_PARENT_RGHTS_SEV); } }
        public IField CLB9_PRNT_RGHTS_SEV_DT { get { return GetElementByName<IField>(Names.CLB9_PRNT_RGHTS_SEV_DT); } }
        public IField CLB9_LEGAL_STATUS { get { return GetElementByName<IField>(Names.CLB9_LEGAL_STATUS); } }
        public IField CLB9_INSURANCE_CODE { get { return GetElementByName<IField>(Names.CLB9_INSURANCE_CODE); } }
        public IField CLB9_INITIAL_CUSTODY_DT { get { return GetElementByName<IField>(Names.CLB9_INITIAL_CUSTODY_DT); } }
        public IField CLB9_HOME_PHONE { get { return GetElementByName<IField>(Names.CLB9_HOME_PHONE); } }
        public IField CLB9_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLB9_DATE_OF_BIRTH); } }
        public IField CLB9_CURR_PLACEMNT_DT { get { return GetElementByName<IField>(Names.CLB9_CURR_PLACEMNT_DT); } }
        public IField CLB9_CURRENT_PLACEMENT { get { return GetElementByName<IField>(Names.CLB9_CURRENT_PLACEMENT); } }
        public IField CLB9_CSEA_G_CAUSE_CODE { get { return GetElementByName<IField>(Names.CLB9_CSEA_G_CAUSE_CODE); } }
        public IField CLB9_CSEA_G_CAUSE_CL_DT { get { return GetElementByName<IField>(Names.CLB9_CSEA_G_CAUSE_CL_DT); } }
        public IField CLB9_CSEA_COOP_CODE { get { return GetElementByName<IField>(Names.CLB9_CSEA_COOP_CODE); } }
        public IField CLB9_COUNTY_CRT_COMMIT { get { return GetElementByName<IField>(Names.CLB9_COUNTY_CRT_COMMIT); } }
        public IField CLB9_MONTHS_ASST_AF { get { return GetElementByName<IField>(Names.CLB9_MONTHS_ASST_AF); } }
        public IField CLB9_MONTHS_ASST_GA { get { return GetElementByName<IField>(Names.CLB9_MONTHS_ASST_GA); } }
        public IField CLB9_MO_DEATH_DT { get { return GetElementByName<IField>(Names.CLB9_MO_DEATH_DT); } }
        public IField CLB9_MO_PRT_DT { get { return GetElementByName<IField>(Names.CLB9_MO_PRT_DT); } }
        public IField CLB9_FA_DEATH_DT { get { return GetElementByName<IField>(Names.CLB9_FA_DEATH_DT); } }
        public IField CLB9_FA_PRT_DT { get { return GetElementByName<IField>(Names.CLB9_FA_PRT_DT); } }
        public IField CLB9_MPI_ID { get { return GetElementByName<IField>(Names.CLB9_MPI_ID); } }
        public IField CLB9_MED_COVERAGE_IND { get { return GetElementByName<IField>(Names.CLB9_MED_COVERAGE_IND); } }
        public IField CLB9_INSURANCE_CARRIER { get { return GetElementByName<IField>(Names.CLB9_INSURANCE_CARRIER); } }
        public IField CLB9_INSURANCE_POLCY_NO { get { return GetElementByName<IField>(Names.CLB9_INSURANCE_POLCY_NO); } }
        public IField CLB9_SPOKEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLB9_SPOKEN_LANGUAGE); } }
        public IField CLB9_WRITTEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLB9_WRITTEN_LANGUAGE); } }
        public IField CLB9_STATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLB9_STATE_OF_BIRTH); } }
        public IField CLB9_SCHOOL_DISTRICT { get { return GetElementByName<IField>(Names.CLB9_SCHOOL_DISTRICT); } }
        public IField CLB9_ETHNIC_CLASS { get { return GetElementByName<IField>(Names.CLB9_ETHNIC_CLASS); } }
        public IField CLB9_SUFFIX_NAME { get { return GetElementByName<IField>(Names.CLB9_SUFFIX_NAME); } }
        public IField CLB9_EMPLOYER_NAME { get { return GetElementByName<IField>(Names.CLB9_EMPLOYER_NAME); } }
        public IField CLB9_EARNED_INCOME_AMT { get { return GetElementByName<IField>(Names.CLB9_EARNED_INCOME_AMT); } }
        public IField CLB9_INCOME_FREQUENCY { get { return GetElementByName<IField>(Names.CLB9_INCOME_FREQUENCY); } }
        public IField CLB9_KEES_ABMS_ID { get { return GetElementByName<IField>(Names.CLB9_KEES_ABMS_ID); } }
        public IGroup CLB9_EMAIL_ADDRESS { get { return GetElementByName<IGroup>(Names.CLB9_EMAIL_ADDRESS); } }
        public IField CLB9_EMAIL_ADDRESS_LEN { get { return GetElementByName<IField>(Names.CLB9_EMAIL_ADDRESS_LEN); } }
        public IField CLB9_EMAIL_ADDRESS_TEXT { get { return GetElementByName<IField>(Names.CLB9_EMAIL_ADDRESS_TEXT); } }
        public IGroup CLB9_OCCUPATION { get { return GetElementByName<IGroup>(Names.CLB9_OCCUPATION); } }
        public IField CLB9_OCCUPATION_LEN { get { return GetElementByName<IField>(Names.CLB9_OCCUPATION_LEN); } }
        public IField CLB9_OCCUPATION_TEXT { get { return GetElementByName<IField>(Names.CLB9_OCCUPATION_TEXT); } }
        public IField CLB9_CREATED_BY { get { return GetElementByName<IField>(Names.CLB9_CREATED_BY); } }
        public IField CLB9_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CLB9_CREATED_TIMESTAMP); } }
        public IField CLB9_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CLB9_LAST_MODIFIED_BY); } }
        public IField CLB9_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CLB9_LAST_MODIFIED_TMST); } }
        public IGroup CL9_DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.CL9_DCLKSD_CLIENT); } }
        public IField CL9_SSN { get { return GetElementByName<IField>(Names.CL9_SSN); } }
        public IField CL9_PREVIOUS_SSN { get { return GetElementByName<IField>(Names.CL9_PREVIOUS_SSN); } }
        public IField CL9_PHONETIC_DATA { get { return GetElementByName<IField>(Names.CL9_PHONETIC_DATA); } }
        public IField CL9_DT_OF_LAST_UPDATE { get { return GetElementByName<IField>(Names.CL9_DT_OF_LAST_UPDATE); } }
        public IField CL9_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CL9_DATE_OF_BIRTH); } }
        public IField CL9_GENDER { get { return GetElementByName<IField>(Names.CL9_GENDER); } }
        public IField CL9_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CL9_VERIFIED_SSN_FLAG); } }
        public IField CL9_CLIENT_NAME { get { return GetElementByName<IField>(Names.CL9_CLIENT_NAME); } }
        public IField CL9_CREATED_BY { get { return GetElementByName<IField>(Names.CL9_CREATED_BY); } }
        public IField CL9_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CL9_CREATED_TIMESTAMP); } }
        public IField CL9_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CL9_LAST_MODIFIED_BY); } }
        public IField CL9_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CL9_LAST_MODIFIED_TMST); } }
        public IField CL9_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CL9_FK_CLB_CLIENT_NO); } }
        public IGroup SP9_DCLKSD_SYSTEM_PART { get { return GetElementByName<IGroup>(Names.SP9_DCLKSD_SYSTEM_PART); } }
        public IField SP9_SYSTEM_CODE { get { return GetElementByName<IField>(Names.SP9_SYSTEM_CODE); } }
        public IField SP9_PARTICIPATION_FLAG { get { return GetElementByName<IField>(Names.SP9_PARTICIPATION_FLAG); } }
        public IField SP9_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.SP9_CREATED_TIMESTAMP); } }
        public IField SP9_CREATED_BY { get { return GetElementByName<IField>(Names.SP9_CREATED_BY); } }
        public IField SP9_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.SP9_LAST_MODIFIED_BY); } }
        public IField SP9_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.SP9_LAST_MODIFIED_TMST); } }
        public IField SP9_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.SP9_FK_CLB_CLIENT_NO); } }
        public IField SP9_FK_CLI_CLIENT_NAME { get { return GetElementByName<IField>(Names.SP9_FK_CLI_CLIENT_NAME); } }
        public IField SP9_FK_CLI_SSN { get { return GetElementByName<IField>(Names.SP9_FK_CLI_SSN); } }
        public IField PH_CF2_INDEX { get { return GetElementByName<IField>(Names.PH_CF2_INDEX); } }
        public IField PH_CF1_INDEX { get { return GetElementByName<IField>(Names.PH_CF1_INDEX); } }
        public IField PH_CR2_INDEX { get { return GetElementByName<IField>(Names.PH_CR2_INDEX); } }
        public IField PH_CR1_INDEX { get { return GetElementByName<IField>(Names.PH_CR1_INDEX); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup("FILLER", (FILLER) =>
           {
               FILLER.CreateNewField(Names.ADIM1, FieldType.CompInt, 8);
               FILLER.CreateNewField(Names.ADIM2, FieldType.CompInt, 8);
               FILLER.CreateNewField(Names.ADIM3, FieldType.CompInt, 8);
           });

            recordDef.CreateNewGroup("FILLER_d2", (FILLER_d2) =>
           {
               FILLER_d2.CreateNewField(Names.GROUP_EXPORT_0001FL, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.GROUP_EXPORT_0001PS, FieldType.CompShort, 4);
               FILLER_d2.CreateNewField(Names.GROUP_EXPORT_0001RF, FieldType.String, 1);
           });
            recordDef.CreateNewField(Names.FUNC_0329211337_ESC_FLAG, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.EXTERNAL_ACTION_BLOCK_WS, (EXTERNAL_ACTION_BLOCK_WS) =>
           {
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_ABEND_FIELDS, (MV_ABEND_FIELDS) =>
               {
                   MV_ABEND_FIELDS.CreateNewField(Names.MV_ABEND_TYPE, FieldType.String, 1)
                       .NewCheckField(Names.MV_ABEND_TYPE_NONE, SPACE)
                       .NewCheckField(Names.MV_ABEND_TYPE_ADABAS, "A")
                       .NewCheckField(Names.MV_ABEND_TYPE_CICS, "C")
                       ;
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_ADABAS, (MV_ABEND_ADABAS) =>
                   {
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_ACTION, FieldType.String, 3);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
                   });
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_CICS, (MV_ABEND_CICS) =>
                   {
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_RESOURCE_NM, FieldType.String, 8);
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_FUNCTION_CD, FieldType.String, 2);
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_RESPONSE_CD, FieldType.String, 6);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_ABS_TIME, FieldType.PackedDecimal, 15);
               IGroup MV_CCYYMMDD_X8_local = (IGroup)EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CCYYMMDD_X8, (MV_CCYYMMDD_X8) =>
               {
                   MV_CCYYMMDD_X8.CreateNewField(Names.MV_CC, FieldType.UnsignedNumeric, 2);
                   MV_CCYYMMDD_X8.CreateNewGroup(Names.MV_YYMMDD, (MV_YYMMDD) =>
                   {
                       MV_YYMMDD.CreateNewField(Names.MV_YY, FieldType.UnsignedNumeric, 2);
                       MV_YYMMDD.CreateNewField(Names.MV_MM, FieldType.UnsignedNumeric, 2);
                       MV_YYMMDD.CreateNewField(Names.MV_DD, FieldType.UnsignedNumeric, 2);
                       MV_YYMMDD.CreateNewFillerField(2, FillWith.Hashes);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d4", MV_CCYYMMDD_X8_local, (FILLER_d4) =>
               {
                   FILLER_d4.CreateNewField(Names.MV_CURRENT_CCYY, FieldType.UnsignedNumeric, 4);
                   FILLER_d4.CreateNewField(Names.MV_CURRENT_MMDD, FieldType.UnsignedNumeric, 4);
                   FILLER_d4.CreateNewFillerField(2, FillWith.Hashes);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.PREFETCH_ADDRESSING_AREA, (PREFETCH_ADDRESSING_AREA) =>
               {
                   PREFETCH_ADDRESSING_AREA.CreateNewField(Names.PRF_POINTER_CLIENT_DBF, FieldType.ReferencePointer, 4);
                   PREFETCH_ADDRESSING_AREA.CreateNewField(Names.PRF_SUB, FieldType.CompInt, 8);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MC_CLIENT_ENTRY_MAX, FieldType.CompShort, 4, 126);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MC_CLIENT_ENTRY_EXP, FieldType.CompShort, 4, 125);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_CLIENT_ENTRY_NUM, FieldType.CompShort, 4);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_CLIENT_ENTRY_SUB, FieldType.CompShort, 4);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_AGE, FieldType.SignedNumeric, 3);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_AGE_LOW, FieldType.UnsignedNumeric, 3);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_AGE_HIGH, FieldType.UnsignedNumeric, 3);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_AGE_RANGE, FieldType.UnsignedNumeric, 3);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_WORK_AGE, FieldType.UnsignedNumeric, 4, null, 1);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_WORK_AGE_NO_DEC, FieldType.UnsignedNumeric, 3);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_RECORD_NAME, (MV_RECORD_NAME) =>
               {
                   MV_RECORD_NAME.CreateNewField(Names.MV_RECORD_LAST_NAME, FieldType.String, 17);
                   MV_RECORD_NAME.CreateNewGroup(Names.MV_RECORD_FIRST_NAME, (MV_RECORD_FIRST_NAME) =>
                   {
                       MV_RECORD_FIRST_NAME.CreateNewField(Names.MV_RECORD_FIRST_NAME_1, FieldType.String, 1);
                       MV_RECORD_FIRST_NAME.CreateNewField(Names.MV_RECORD_FIRST_NAME_11, FieldType.String, 11);
                   });
                   MV_RECORD_NAME.CreateNewField(Names.MV_RECORD_INITIAL, FieldType.String, 1);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_PHONETIC_DATA, (MV_PHONETIC_DATA) =>
               {
                   MV_PHONETIC_DATA.CreateNewField(Names.MV_PHONETIC_1, FieldType.String, 1);
                   MV_PHONETIC_DATA.CreateNewField(Names.MV_PHONETIC_CODE, FieldType.String, 17);
                   MV_PHONETIC_DATA.CreateNewField(Names.MV_PHONETIC_3, FieldType.String, 3);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_DATE_OF_BIRTH_SEX, (MV_DATE_OF_BIRTH_SEX) =>
               {
                   MV_DATE_OF_BIRTH_SEX.CreateNewGroup(Names.MV_DATE_OF_BIRTH_X8, (MV_DATE_OF_BIRTH_X8) =>
                   {

                       IField MV_DATE_OF_BIRTH_local = MV_DATE_OF_BIRTH_X8.CreateNewField(Names.MV_DATE_OF_BIRTH, FieldType.UnsignedNumeric, 8);
                       MV_DATE_OF_BIRTH_X8.CreateNewGroupRedefine("FILLER_d6", MV_DATE_OF_BIRTH_local, (FILLER_d6) =>
                       {
                           FILLER_d6.CreateNewField(Names.MV_BIRTH_CCYY, FieldType.UnsignedNumeric, 4);
                           FILLER_d6.CreateNewField(Names.MV_BIRTH_MMDD, FieldType.UnsignedNumeric, 4);
                       });
                   });
                   MV_DATE_OF_BIRTH_SEX.CreateNewField(Names.MV_SEX, FieldType.String, 1);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_POINTER, (MV_CLIENT_POINTER) =>
               {
                   MV_CLIENT_POINTER.CreateNewGroup(Names.MV_CLIENT_ID, (MV_CLIENT_ID) =>
                   {
                       MV_CLIENT_ID.CreateNewField(Names.MV_CLIENT_ID_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   MV_CLIENT_POINTER.CreateNewField(Names.MV_VERIFIED_SSN_FLAG, FieldType.String, 1);
                   MV_CLIENT_POINTER.CreateNewGroup(Names.MV_SYSTEM_PARTICIPATION, (MV_SYSTEM_PARTICIPATION) =>
                   {
                       MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_AE, FieldType.String, 1)
                           .NewCheckField(Names.MV_SYS_PART_AE_YES, "Y")
                           ;
                       MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_CSE, FieldType.String, 1)
                           .NewCheckField(Names.MV_SYS_PART_CSE_YES, "Y")
                           .NewCheckField(Names.MV_SYS_PART_CSE_ALIAS, "A")
                           ;
                       MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_KANPAY, FieldType.String, 1)
                           .NewCheckField(Names.MV_SYS_PART_KANPAY_YES, "Y")
                           ;
                       MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_KSCARES, FieldType.String, 1)
                           .NewCheckField(Names.MV_SYS_PART_KSCARES_YES, "Y")
                           ;
                       MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_FACTS, FieldType.String, 1)
                           .NewCheckField(Names.MV_SYS_PART_FACTS_YES, "Y")
                           ;
                       MV_SYSTEM_PARTICIPATION.CreateNewFillerField(15, FillWith.Hashes);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.IMP_CLIENT_DATA, (IMP_CLIENT_DATA) =>
               {
                   IMP_CLIENT_DATA.CreateNewField(Names.IMP_SEARCH_TYPE, FieldType.String, 1)
                       .NewCheckField(Names.IMP_SEARCH_SSN, "1")
                       .NewCheckField(Names.IMP_SEARCH_NAME, "2")
                       ;

                   IField IMP_MATCH_PERCENT_local = IMP_CLIENT_DATA.CreateNewField(Names.IMP_MATCH_PERCENT, FieldType.UnsignedNumeric, 3)
                       .NewCheckField(Names.IMP_MATCH_EXACT, 100)
                       ;
                   IMP_CLIENT_DATA.CreateNewFieldRedefine(Names.IMP_MATCH_PERCENT_9V99, FieldType.UnsignedNumeric, IMP_MATCH_PERCENT_local, 3, null, 2);
                   IMP_CLIENT_DATA.CreateNewGroup(Names.IMP_CLIENT_NAME, (IMP_CLIENT_NAME) =>
                   {
                       IMP_CLIENT_NAME.CreateNewField(Names.IMP_CLIENT_LAST_NAME, FieldType.String, 17);
                       IMP_CLIENT_NAME.CreateNewGroup(Names.IMP_CLIENT_FIRST_NAME, (IMP_CLIENT_FIRST_NAME) =>
                       {
                           IMP_CLIENT_FIRST_NAME.CreateNewField(Names.IMP_CLIENT_FIRST_NAME_1, FieldType.String, 1);
                           IMP_CLIENT_FIRST_NAME.CreateNewField(Names.IMP_CLIENT_FIRST_NAME_2, FieldType.String, 1);
                           IMP_CLIENT_FIRST_NAME.CreateNewField(Names.IMP_CLIENT_FIRST_NAME_10, FieldType.String, 10);
                       });
                       IMP_CLIENT_NAME.CreateNewField(Names.IMP_CLIENT_INITIAL, FieldType.String, 1);
                   });
                   IMP_CLIENT_DATA.CreateNewGroup(Names.IMP_CLIENT_DATE_OF_BIRTH_SEX, (IMP_CLIENT_DATE_OF_BIRTH_SEX) =>
                   {
                       IMP_CLIENT_DATE_OF_BIRTH_SEX.CreateNewGroup(Names.IMP_CLIENT_DATE_OF_BIRTH_X8, (IMP_CLIENT_DATE_OF_BIRTH_X8) =>
                       {
                           IMP_CLIENT_DATE_OF_BIRTH_X8.CreateNewField(Names.IMP_CLIENT_DATE_OF_BIRTH, FieldType.UnsignedNumeric, 8);
                       });
                       IMP_CLIENT_DATE_OF_BIRTH_SEX.CreateNewField(Names.IMP_CLIENT_SEX, FieldType.String, 1);
                   });
                   IMP_CLIENT_DATA.CreateNewGroup(Names.IMP_CLIENT_AGE_X3, (IMP_CLIENT_AGE_X3) =>
                   {
                       IMP_CLIENT_AGE_X3.CreateNewField(Names.IMP_CLIENT_AGE, FieldType.UnsignedNumeric, 3);
                   });
                   IMP_CLIENT_DATA.CreateNewGroup(Names.IMP_CLIENT_SOC_SEC_NUM_X9, (IMP_CLIENT_SOC_SEC_NUM_X9) =>
                   {
                       IMP_CLIENT_SOC_SEC_NUM_X9.CreateNewField(Names.IMP_CLIENT_SOC_SEC_NUM, FieldType.UnsignedNumeric, 9);
                   });
                   IMP_CLIENT_DATA.CreateNewField(Names.IMP_CLIENT_KEY, FieldType.String, 100);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MC_TSQ_PH_DATA, (MC_TSQ_PH_DATA) =>
               {
                   MC_TSQ_PH_DATA.CreateNewField(Names.MV_TSQ_PH_TRMID, FieldType.String, 4);
                   MC_TSQ_PH_DATA.CreateNewFillerField(FieldType.String, 4, "IPHD");
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MC_TSQ_PH_DATA_LEN, FieldType.SignedNumeric, 4, 41);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MC_TSQ_PHONETIC_DATA, (MC_TSQ_PHONETIC_DATA) =>
               {
                   MC_TSQ_PHONETIC_DATA.CreateNewGroup(Names.IMP_PHONETIC_DATA, (IMP_PHONETIC_DATA) =>
                   {
                       IMP_PHONETIC_DATA.CreateNewField(Names.IMP_PHONETIC_1, FieldType.String, 1);
                       IMP_PHONETIC_DATA.CreateNewField(Names.IMP_PHONETIC_CODE, FieldType.String, 17);
                       IMP_PHONETIC_DATA.CreateNewField(Names.IMP_PHONETIC_3, FieldType.String, 3);
                   });
                   MC_TSQ_PHONETIC_DATA.CreateNewField(Names.IMP_PHONETIC_3_HIGH, FieldType.String, 3);
                   MC_TSQ_PHONETIC_DATA.CreateNewField(Names.IMP_PHONETIC_SAVE_REDUC_INQ, FieldType.String, 17);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_ARRAY, (MV_CLIENT_ARRAY) =>
               {
                   MV_CLIENT_ARRAY.CreateNewGroupArray(Names.MV_CLIENT_ENTRY, 126, (MV_CLIENT_ENTRY) =>
                   {
                       MV_CLIENT_ENTRY.CreateNewGroup(Names.MV_CLIENT_NUMBER_X10, (MV_CLIENT_NUMBER_X10) =>
                       {
                           MV_CLIENT_NUMBER_X10.CreateNewField(Names.MV_CLIENT_NUMBER, FieldType.UnsignedNumeric, 10);
                       });
                       MV_CLIENT_ENTRY.CreateNewGroup(Names.MV_CLIENT_NAME, (MV_CLIENT_NAME) =>
                       {
                           MV_CLIENT_NAME.CreateNewField(Names.MV_CLIENT_LAST_NAME, FieldType.String, 17);
                           MV_CLIENT_NAME.CreateNewField(Names.MV_CLIENT_FIRST_NAME, FieldType.String, 12);
                           MV_CLIENT_NAME.CreateNewField(Names.MV_CLIENT_INITIAL, FieldType.String, 1);
                       });
                       MV_CLIENT_ENTRY.CreateNewGroup(Names.MV_CLIENT_DATE_OF_BIRTH_SEX, (MV_CLIENT_DATE_OF_BIRTH_SEX) =>
                       {
                           MV_CLIENT_DATE_OF_BIRTH_SEX.CreateNewGroup(Names.MV_CLIENT_DATE_OF_BIRTH_X8, (MV_CLIENT_DATE_OF_BIRTH_X8) =>
                           {
                               MV_CLIENT_DATE_OF_BIRTH_X8.CreateNewField(Names.MV_CLIENT_DATE_OF_BIRTH, FieldType.UnsignedNumeric, 8);
                           });
                           MV_CLIENT_DATE_OF_BIRTH_SEX.CreateNewField(Names.MV_CLIENT_SEX, FieldType.String, 1);
                       });
                       MV_CLIENT_ENTRY.CreateNewGroup(Names.MV_CLIENT_SOC_SEC_NUM_X9, (MV_CLIENT_SOC_SEC_NUM_X9) =>
                       {
                           MV_CLIENT_SOC_SEC_NUM_X9.CreateNewField(Names.MV_CLIENT_SOC_SEC_NUM, FieldType.UnsignedNumeric, 9);
                       });
                       MV_CLIENT_ENTRY.CreateNewGroup(Names.MV_CLIENT_SYSTEM_PARTICIPATION, (MV_CLIENT_SYSTEM_PARTICIPATION) =>
                       {
                           MV_CLIENT_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CLIENT_SYS_PART_AE, FieldType.String, 1);
                           MV_CLIENT_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CLIENT_SYS_PART_CSE, FieldType.String, 1);
                           MV_CLIENT_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CLIENT_SYS_PART_KANPAY, FieldType.String, 1);
                           MV_CLIENT_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CLIENT_SYS_PART_KSCARES, FieldType.String, 1);
                           MV_CLIENT_SYSTEM_PARTICIPATION.CreateNewFillerField(16, FillWith.Hashes);
                       });
                       MV_CLIENT_ENTRY.CreateNewField(Names.MV_ALIAS_IND, FieldType.String, 1);
                       MV_CLIENT_ENTRY.CreateNewField(Names.MV_CLIENT_KEY, FieldType.String, 100);
                   });
               });
           });

            recordDef.CreateNewGroup(Names.SW1_SWITCHES, (SW1_SWITCHES) =>
           {
               SW1_SWITCHES.CreateNewField(Names.SW1_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW1_EOF_NO, "N")
                   .NewCheckField(Names.SW1_EOF_YES, "Y")
                   ;
               SW1_SWITCHES.CreateNewField(Names.SW1_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW1_ERR_NO, "N")
                   .NewCheckField(Names.SW1_ERR_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.DBK1_KEYS, (DBK1_KEYS) =>
           {
               DBK1_KEYS.CreateNewField(Names.DBK1_CLIENT_NUMBER, FieldType.String, 10);
               DBK1_KEYS.CreateNewField(Names.DBK1_CLIENT_NAME, FieldType.String, 30);
               DBK1_KEYS.CreateNewField(Names.DBK1_SSN, FieldType.CompInt, 9);
               DBK1_KEYS.CreateNewField(Names.DBK1_DATE_OF_BIRTH, FieldType.String, 10);
               DBK1_KEYS.CreateNewField(Names.DBK1_GENDER, FieldType.String, 1);
               DBK1_KEYS.CreateNewField(Names.DBK1_PHONETIC_DATA, FieldType.String, 21);
           });

            recordDef.CreateNewGroup(Names.ADA1_NAME_KEY, (ADA1_NAME_KEY) =>
           {
               ADA1_NAME_KEY.CreateNewField(Names.ADA1_CLIENT_NAME, FieldType.String, 30);
               ADA1_NAME_KEY.CreateNewField(Names.ADA1_SSN, FieldType.UnsignedNumeric, 9);
               ADA1_NAME_KEY.CreateNewField(Names.ADA1_DATE_OF_BIRTH, FieldType.String, 8);
               ADA1_NAME_KEY.CreateNewField(Names.ADA1_SEX, FieldType.String, 1);
               ADA1_NAME_KEY.CreateNewGroup(Names.ADA1_CLIENT_POINTER, (ADA1_CLIENT_POINTER) =>
               {
                   ADA1_CLIENT_POINTER.CreateNewField(Names.ADA1_CLIENT_NUMBER, FieldType.String, 10);
                   ADA1_CLIENT_POINTER.CreateNewFillerField(21, FillWith.Hashes);
               });
           });

            recordDef.CreateNewGroup(Names.ADA2_PHONETIC_KEY, (ADA2_PHONETIC_KEY) =>
           {
               ADA2_PHONETIC_KEY.CreateNewField(Names.ADA2_PHONETIC_DATA, FieldType.String, 21);
               ADA2_PHONETIC_KEY.CreateNewField(Names.ADA2_CLIENT_NAME, FieldType.String, 30);
               ADA2_PHONETIC_KEY.CreateNewField(Names.ADA2_SSN, FieldType.UnsignedNumeric, 9);
               ADA2_PHONETIC_KEY.CreateNewField(Names.ADA2_DATE_OF_BIRTH, FieldType.String, 8);
               ADA2_PHONETIC_KEY.CreateNewField(Names.ADA2_SEX, FieldType.String, 1);
               ADA2_PHONETIC_KEY.CreateNewGroup(Names.ADA2_CLIENT_POINTER, (ADA2_CLIENT_POINTER) =>
               {
                   ADA2_CLIENT_POINTER.CreateNewField(Names.ADA2_CLIENT_NUMBER, FieldType.String, 10);
                   ADA2_CLIENT_POINTER.CreateNewFillerField(21, FillWith.Hashes);
               });
           });

            recordDef.CreateNewGroup(Names.ADA3_SSN_KEY, (ADA3_SSN_KEY) =>
           {
               ADA3_SSN_KEY.CreateNewField(Names.ADA3_SSN, FieldType.UnsignedNumeric, 9);
               ADA3_SSN_KEY.CreateNewField(Names.ADA3_CLIENT_NAME, FieldType.String, 30);
               ADA3_SSN_KEY.CreateNewField(Names.ADA3_DATE_OF_BIRTH, FieldType.String, 8);
               ADA3_SSN_KEY.CreateNewField(Names.ADA3_SEX, FieldType.String, 1);
               ADA3_SSN_KEY.CreateNewGroup(Names.ADA3_CLIENT_POINTER, (ADA3_CLIENT_POINTER) =>
               {
                   ADA3_CLIENT_POINTER.CreateNewField(Names.ADA3_CLIENT_NUMBER, FieldType.String, 10);
                   ADA3_CLIENT_POINTER.CreateNewFillerField(21, FillWith.Hashes);
               });
           });

            recordDef.CreateNewGroup(Names.ADA1_ISN_BUF, (ADA1_ISN_BUF) =>
           {
               ADA1_ISN_BUF.CreateNewFieldArray(Names.ADA1_ISN_BUFVEC, 238, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.ADA2_ISN_BUF, (ADA2_ISN_BUF) =>
           {
               ADA2_ISN_BUF.CreateNewFieldArray(Names.ADA2_ISN_BUFVEC, 291, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.ADA3_ISN_BUF, (ADA3_ISN_BUF) =>
           {
               ADA3_ISN_BUF.CreateNewFieldArray(Names.ADA3_ISN_BUFVEC, 238, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.CL1_DCLKSD_CLIENT, (CL1_DCLKSD_CLIENT) =>
           {
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_SSN, FieldType.CompInt, 9);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_PREVIOUS_SSN, FieldType.CompInt, 9);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_PHONETIC_DATA, FieldType.String, 21);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_DT_OF_LAST_UPDATE, FieldType.String, 10);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_DATE_OF_BIRTH, FieldType.String, 10);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_GENDER, FieldType.String, 1);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_VERIFIED_SSN_FLAG, FieldType.String, 1);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_CLIENT_NAME, FieldType.String, 30);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_CREATED_BY, FieldType.String, 8);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_CREATED_TIMESTAMP, FieldType.String, 26);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_LAST_MODIFIED_BY, FieldType.String, 8);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_LAST_MODIFIED_TMST, FieldType.String, 26);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });
            recordDef.CreateNewField(Names.PH_FNTIC_C1, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_C2, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_C3, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_CX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_SUSS_ID, FieldType.String, 1);
            recordDef.CreateNewField(Names.PH_HIT, FieldType.String, 2);
            recordDef.CreateNewField(Names.PH_ERR_NAME, FieldType.String, 1);
            recordDef.CreateNewField(Names.PH_COUNT_UP, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_COUNT_INQUIRY, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_COUNT_DB, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_L1, FieldType.UnsignedNumeric, 1);
            recordDef.CreateNewField(Names.PH_CR1_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CR2_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CF1_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CF2_INDXX, FieldType.UnsignedNumeric, 2);

            IField PH_DEGREE_local = recordDef.CreateNewField(Names.PH_DEGREE, FieldType.UnsignedNumeric, 3, null, 2);
            recordDef.CreateNewFieldRedefine(Names.PH_PERCENT, FieldType.String, PH_DEGREE_local, 3);
            recordDef.CreateNewField(Names.PH_NAME_RAW_INQ, FieldType.String, 17);
            recordDef.CreateNewField(Names.PH_NAME_RAW_MSTR, FieldType.String, 17);

            recordDef.CreateNewGroup(Names.PH_NAME_CRUNCH_INQ, (PH_NAME_CRUNCH_INQ) =>
           {
               PH_NAME_CRUNCH_INQ.CreateNewFieldArray(Names.PH_L_CRNCH, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_REDUC_INQ, (PH_NAME_REDUC_INQ) =>
           {
               PH_NAME_REDUC_INQ.CreateNewFieldArray(Names.PH_L_REDUC, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_SAVE_REDUC_INQ, (PH_SAVE_REDUC_INQ) =>
           {
               PH_SAVE_REDUC_INQ.CreateNewFieldArray(Names.PH_S_REDUC, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_PARTS, (PH_NAME_PARTS) =>
           {
               PH_NAME_PARTS.CreateNewGroup(Names.PH_THREE_LETTERS, (PH_THREE_LETTERS) =>
               {
                   PH_THREE_LETTERS.CreateNewFieldArray(Names.PH_LETTERS_3, 3, FieldType.String, 1);
               });
               PH_NAME_PARTS.CreateNewField(Names.PH_TWO_LETTERS, FieldType.String, 2);
               PH_NAME_PARTS.CreateNewField(Names.PH_ONE_LETTER, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_34_NUMERIC, (PH_NAME_34_NUMERIC) =>
           {
               PH_NAME_34_NUMERIC.CreateNewFieldArray(Names.PH_NAME_NUM_34, 17, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_17_NUMERIC, (PH_NAME_17_NUMERIC) =>
           {
               PH_NAME_17_NUMERIC.CreateNewFieldArray(Names.PH_NAME_NUM_17, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_REFMT_34_17, (PH_REFMT_34_17) =>
           {
               PH_REFMT_34_17.CreateNewField(Names.PH_DIGIT_1, FieldType.String, 1);
               PH_REFMT_34_17.CreateNewField(Names.PH_DIGIT_2, FieldType.String, 1);
           });

            IGroup PH_FIRST_2_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_FIRST_2_TABLE, (PH_FIRST_2_TABLE) =>
           {
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 24, "DG07GF08GM03GN02KN02PH08");
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 24, "PF08PN02PS00SH06TS00TZ00");
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 20, "WR04CE00CH06CI00CY00");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_FIRST_2_TBL, PH_FIRST_2_TABLE_local, (PH_FIRST_2_TBL) =>
            {
                PH_FIRST_2_TBL.CreateNewGroupArray(Names.PH_FR2_NUM, 17, (PH_FR2_NUM) =>
                {
                    PH_FR2_NUM.CreateNewField(Names.PH_ALPH2, FieldType.String, 2);
                    PH_FR2_NUM.CreateNewField(Names.PH_NUM2, FieldType.String, 2);
                });
            });

            IGroup PH_FIRST_1_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_FIRST_1_TABLE, (PH_FIRST_1_TABLE) =>
           {
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "A 1B09C07D01E 1F08G07H 2");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "I 1J 3K07L05M03N02O 1P09");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "Q07R04S00T01U 1V08W 4X07");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 6, "Y 5Z00");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_FIRST_1_TBL, PH_FIRST_1_TABLE_local, (PH_FIRST_1_TBL) =>
            {
                PH_FIRST_1_TBL.CreateNewGroupArray(Names.PH_FR1_NUM, 26, (PH_FR1_NUM) =>
                {
                    PH_FR1_NUM.CreateNewField(Names.PH_ALPH1, FieldType.String, 1);
                    PH_FR1_NUM.CreateNewField(Names.PH_NUM1, FieldType.String, 2);
                });
            });

            IGroup PH_REMAIN_2_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_REMAIN_2_TABLE, (PH_REMAIN_2_TABLE) =>
           {
               PH_REMAIN_2_TABLE.CreateNewFillerField(FieldType.String, 24, "CE 0CI 0CH 6CY 0DG 7PH 8");
               PH_REMAIN_2_TABLE.CreateNewFillerField(FieldType.String, 16, "SH 6TS 0TZ 0    ");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_REMAIN_2_TBL, PH_REMAIN_2_TABLE_local, (PH_REMAIN_2_TBL) =>
            {
                PH_REMAIN_2_TBL.CreateNewGroupArray(Names.PH_RR2_NUM, 10, (PH_RR2_NUM) =>
                {
                    PH_RR2_NUM.CreateNewField(Names.PH_ALPHR2, FieldType.String, 2);
                    PH_RR2_NUM.CreateNewField(Names.PH_NUMR2, FieldType.String, 2);
                });
            });

            IGroup PH_REMAIN_1_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_REMAIN_1_TABLE, (PH_REMAIN_1_TABLE) =>
           {
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 24, "B 9C 7D 1F 8G 7J 6K 7L 5");
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 24, "M 3N 2P 9Q 7R 4S 0T 1V 8");
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 6, "X 7Z 0");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_REMAIN_1_TBL, PH_REMAIN_1_TABLE_local, (PH_REMAIN_1_TBL) =>
            {
                PH_REMAIN_1_TBL.CreateNewGroupArray(Names.PH_RR1_NUM, 18, (PH_RR1_NUM) =>
                {
                    PH_RR1_NUM.CreateNewField(Names.PH_ALPHR1, FieldType.String, 1);
                    PH_RR1_NUM.CreateNewField(Names.PH_NUMR1, FieldType.String, 2);
                });
            });

            recordDef.CreateNewGroup(Names.WS9_SYSTEM_CODES, (WS9_SYSTEM_CODES) =>
           {
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_AE, FieldType.String, 2, "AE");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_CS, FieldType.String, 2, "CS");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_KA, FieldType.String, 2, "KA");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_KS, FieldType.String, 2, "KS");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_FA, FieldType.String, 2, "FA");
           });

            recordDef.CreateNewGroup(Names.SW9_SWITCHES, (SW9_SWITCHES) =>
           {
               SW9_SWITCHES.CreateNewField(Names.SW9_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW9_EOF_NOT_FOUND, SPACE)
                   .NewCheckField(Names.SW9_EOF_NO, "N")
                   .NewCheckField(Names.SW9_EOF_YES, "Y")
                   ;
               SW9_SWITCHES.CreateNewField(Names.SW9_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW9_ERR_NO, "N")
                   .NewCheckField(Names.SW9_ERR_YES, "Y")
                   ;
               SW9_SWITCHES.CreateNewField(Names.SW9_SELECT_CLIENT_SW, FieldType.String, 1, "Y")
                   .NewCheckField(Names.SW9_SELECT_CLIENT_NO, "N")
                   .NewCheckField(Names.SW9_SELECT_CLIENT_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.WS9_CLIENT_POINTER, (WS9_CLIENT_POINTER) =>
           {
               WS9_CLIENT_POINTER.CreateNewField(Names.WS9_CLIENT_ID, FieldType.String, 10);
               WS9_CLIENT_POINTER.CreateNewField(Names.WS9_VERIFIED_SSN_FLAG, FieldType.String, 1);
               WS9_CLIENT_POINTER.CreateNewGroup(Names.WS9_SYSTEM_PARTICIPATION, (WS9_SYSTEM_PARTICIPATION) =>
               {
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_AE, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_CSE, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_KANPAY, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_KSCARES, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_FACTS, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewFillerField(15, FillWith.Hashes);
               });
           });

            recordDef.CreateNewGroup(Names.WS9_ABEND_FIELDS, (WS9_ABEND_FIELDS) =>
           {
               WS9_ABEND_FIELDS.CreateNewField(Names.WS9_ABEND_TYPE, FieldType.String, 1)
                   .NewCheckField(Names.WS9_ABEND_TYPE_NONE, SPACE)
                   .NewCheckField(Names.WS9_ABEND_TYPE_ADABAS, "A")
                   .NewCheckField(Names.WS9_ABEND_TYPE_CICS, "C")
                   ;
               WS9_ABEND_FIELDS.CreateNewGroup(Names.WS9_ABEND_ADABAS, (WS9_ABEND_ADABAS) =>
               {
                   WS9_ABEND_ADABAS.CreateNewField(Names.WS9_ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                   WS9_ABEND_ADABAS.CreateNewField(Names.WS9_ADA_FILE_ACTION, FieldType.String, 3);
                   WS9_ABEND_ADABAS.CreateNewField(Names.WS9_ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
               });
               WS9_ABEND_FIELDS.CreateNewGroup(Names.WS9_ABEND_CICS, (WS9_ABEND_CICS) =>
               {
                   WS9_ABEND_CICS.CreateNewField(Names.WS9_CICS_RESOURCE_NM, FieldType.String, 8);
                   WS9_ABEND_CICS.CreateNewField(Names.WS9_CICS_FUNCTION_CD, FieldType.String, 2);
                   WS9_ABEND_CICS.CreateNewField(Names.WS9_CICS_RESPONSE_CD, FieldType.String, 6);
               });
           });

            recordDef.CreateNewGroup(Names.WS9_MISC, (WS9_MISC) =>
           {
               WS9_MISC.CreateNewGroup(Names.WS9_MSG_X, (WS9_MSG_X) =>
               {
                   WS9_MSG_X.CreateNewField(Names.WS9_MSG_PROG, FieldType.String, 10);
                   IGroup WS9_MSG_1_local = (IGroup)WS9_MSG_X.CreateNewGroup(Names.WS9_MSG_1, (WS9_MSG_1) =>
                   {
                       WS9_MSG_1.CreateNewField(Names.WS9_MSG, FieldType.String, 50);
                       WS9_MSG_1.CreateNewGroup(Names.WS9_MSG_CODE, (WS9_MSG_CODE) =>
                       {
                           WS9_MSG_CODE.CreateNewField(Names.WS9_MSG_SQLCODE, FieldType.NumericEdited, "---------9", 10);
                       });
                   });
                   WS9_MSG_X.CreateNewGroupRedefine(Names.WS9_MSG_2, WS9_MSG_1_local, (WS9_MSG_2) =>
                   {
                       WS9_MSG_2.CreateNewField(Names.WS9_MSG_FIELD, FieldType.String, 25);
                       WS9_MSG_2.CreateNewField(Names.WS9_MSG_VALUE, FieldType.String, 35);
                   });
               });
               WS9_MISC.CreateNewField(Names.WS9_DATE_ADA, FieldType.String, 8);
               WS9_MISC.CreateNewField(Names.WS9_DATE_DB2, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DBK9_KEYS, (DBK9_KEYS) =>
           {
               DBK9_KEYS.CreateNewField(Names.DBK9_CLIENT_NUMBER, FieldType.String, 10);
               DBK9_KEYS.CreateNewField(Names.DBK9_CLIENT_NAME, FieldType.String, 30);
               DBK9_KEYS.CreateNewField(Names.DBK9_SSN, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.CLB9_DCLKSD_CLIENT_BASIC, (CLB9_DCLKSD_CLIENT_BASIC) =>
           {
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_NUMBER, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_GIVEN_NAME, FieldType.String, 12);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_INITIALS, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_SURNAME, FieldType.String, 17);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CIS_REPL_IND, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_WORK_PHONE, FieldType.PackedDecimal, 10, null, 0);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SSN, FieldType.CompInt, 9);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_GENDER, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_PARENT_RGHTS_SEV, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_PRNT_RGHTS_SEV_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_LEGAL_STATUS, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INSURANCE_CODE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INITIAL_CUSTODY_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_HOME_PHONE, FieldType.PackedDecimal, 10, null, 0);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_DATE_OF_BIRTH, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CURR_PLACEMNT_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CURRENT_PLACEMENT, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CSEA_G_CAUSE_CODE, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CSEA_G_CAUSE_CL_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CSEA_COOP_CODE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_COUNTY_CRT_COMMIT, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MONTHS_ASST_AF, FieldType.CompInt, 9);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MONTHS_ASST_GA, FieldType.CompInt, 9);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MO_DEATH_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MO_PRT_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_FA_DEATH_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_FA_PRT_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MPI_ID, FieldType.String, 38);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MED_COVERAGE_IND, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INSURANCE_CARRIER, FieldType.String, 30);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INSURANCE_POLCY_NO, FieldType.String, 30);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SPOKEN_LANGUAGE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_WRITTEN_LANGUAGE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_STATE_OF_BIRTH, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SCHOOL_DISTRICT, FieldType.String, 3);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_ETHNIC_CLASS, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SUFFIX_NAME, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_EMPLOYER_NAME, FieldType.String, 28);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_EARNED_INCOME_AMT, FieldType.PackedDecimal, 8, null, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INCOME_FREQUENCY, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_KEES_ABMS_ID, FieldType.String, 38);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLB9_EMAIL_ADDRESS, (CLB9_EMAIL_ADDRESS) =>
               {
                   CLB9_EMAIL_ADDRESS.CreateNewField(Names.CLB9_EMAIL_ADDRESS_LEN, FieldType.CompShort, 4);
                   CLB9_EMAIL_ADDRESS.CreateNewField(Names.CLB9_EMAIL_ADDRESS_TEXT, FieldType.String, 100);
               });
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLB9_OCCUPATION, (CLB9_OCCUPATION) =>
               {
                   CLB9_OCCUPATION.CreateNewField(Names.CLB9_OCCUPATION_LEN, FieldType.CompShort, 4);
                   CLB9_OCCUPATION.CreateNewField(Names.CLB9_OCCUPATION_TEXT, FieldType.String, 100);
               });
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CREATED_BY, FieldType.String, 8);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CREATED_TIMESTAMP, FieldType.String, 26);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_LAST_MODIFIED_BY, FieldType.String, 8);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_LAST_MODIFIED_TMST, FieldType.String, 26);
           });

            recordDef.CreateNewGroup(Names.CL9_DCLKSD_CLIENT, (CL9_DCLKSD_CLIENT) =>
           {
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_SSN, FieldType.CompInt, 9);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_PREVIOUS_SSN, FieldType.CompInt, 9);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_PHONETIC_DATA, FieldType.String, 21);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_DT_OF_LAST_UPDATE, FieldType.String, 10);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_DATE_OF_BIRTH, FieldType.String, 10);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_GENDER, FieldType.String, 1);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_VERIFIED_SSN_FLAG, FieldType.String, 1);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_CLIENT_NAME, FieldType.String, 30);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_CREATED_BY, FieldType.String, 8);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_CREATED_TIMESTAMP, FieldType.String, 26);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_LAST_MODIFIED_BY, FieldType.String, 8);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_LAST_MODIFIED_TMST, FieldType.String, 26);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.SP9_DCLKSD_SYSTEM_PART, (SP9_DCLKSD_SYSTEM_PART) =>
           {
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_SYSTEM_CODE, FieldType.String, 2);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_PARTICIPATION_FLAG, FieldType.String, 1);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_CREATED_TIMESTAMP, FieldType.String, 26);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_CREATED_BY, FieldType.String, 8);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_LAST_MODIFIED_BY, FieldType.String, 8);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_LAST_MODIFIED_TMST, FieldType.String, 26);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_FK_CLB_CLIENT_NO, FieldType.String, 10);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_FK_CLI_CLIENT_NAME, FieldType.String, 30);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_FK_CLI_SSN, FieldType.CompInt, 9);
           });
            recordDef.CreateNewField(Names.PH_CF2_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CF1_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CR2_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CR1_INDEX, FieldType.CompShort, 4);


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXGR05_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXGR05_ls_LinkageSection";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_0329211342_IA = "A_0329211342_IA";
            internal const string IMPORT_START_0001EV = "IMPORT_START_0001EV";
            internal const string CSE_PERSONS_WORK_SET_0001ET = "CSE_PERSONS_WORK_SET_0001ET";
            internal const string UNIQUE_KEY_0001AS = "UNIQUE_KEY_0001AS";
            internal const string UNIQUE_KEY_0001 = "UNIQUE_KEY_0001";
            internal const string UNIQUE_KEY_0001XX = "UNIQUE_KEY_0001XX";
            internal const string IMPORT_PHONETIC_0002EV = "IMPORT_PHONETIC_0002EV";
            internal const string IEF_SUPPLIED_0002ET = "IEF_SUPPLIED_0002ET";
            internal const string PERCENTAGE_0002AS = "PERCENTAGE_0002AS";
            internal const string PERCENTAGE_0002 = "PERCENTAGE_0002";
            internal const string PERCENTAGE_0002XX = "PERCENTAGE_0002XX";
            internal const string IMPORT_0003EV = "IMPORT_0003EV";
            internal const string CSE_PERSONS_WORK_SET_0003ET = "CSE_PERSONS_WORK_SET_0003ET";
            internal const string SSN_0003AS = "SSN_0003AS";
            internal const string SSN_0003 = "SSN_0003";
            internal const string SSN_0003XX = "SSN_0003XX";
            internal const string FIRST_NAME_0003AS = "FIRST_NAME_0003AS";
            internal const string FIRST_NAME_0003 = "FIRST_NAME_0003";
            internal const string FIRST_NAME_0003XX = "FIRST_NAME_0003XX";
            internal const string MIDDLE_INITIAL_0003AS = "MIDDLE_INITIAL_0003AS";
            internal const string MIDDLE_INITIAL_0003 = "MIDDLE_INITIAL_0003";
            internal const string MIDDLE_INITIAL_0003XX = "MIDDLE_INITIAL_0003XX";
            internal const string LAST_NAME_0003AS = "LAST_NAME_0003AS";
            internal const string LAST_NAME_0003 = "LAST_NAME_0003";
            internal const string LAST_NAME_0003XX = "LAST_NAME_0003XX";
            internal const string SEX_0003AS = "SEX_0003AS";
            internal const string SEX_0003 = "SEX_0003";
            internal const string SEX_0003XX = "SEX_0003XX";
            internal const string DOB_0003AS = "DOB_0003AS";
            internal const string DOB_0003 = "DOB_0003";
            internal const string DOB_0003XX = "DOB_0003XX";
            internal const string IMPORT_SEARCH_0004EV = "IMPORT_SEARCH_0004EV";
            internal const string IEF_SUPPLIED_0004ET = "IEF_SUPPLIED_0004ET";
            internal const string FLAG_0004AS = "FLAG_0004AS";
            internal const string FLAG_0004 = "FLAG_0004";
            internal const string FLAG_0004XX = "FLAG_0004XX";
            internal const string IMPORT_CURRENT_0005EV = "IMPORT_CURRENT_0005EV";
            internal const string DATE_WORK_AREA_0005ET = "DATE_WORK_AREA_0005ET";
            internal const string DATE_0005AS = "DATE_0005AS";
            internal const string DATE_0005 = "DATE_0005";
            internal const string DATE_0005XX = "DATE_0005XX";
            internal const string W_OA = "W_OA";
            internal const string A_0329211344_OA = "A_0329211344_OA";
            internal const string EXPORT_NEXT_0006EV = "EXPORT_NEXT_0006EV";
            internal const string CSE_PERSONS_WORK_SET_0006ET = "CSE_PERSONS_WORK_SET_0006ET";
            internal const string UNIQUE_KEY_0006AS = "UNIQUE_KEY_0006AS";
            internal const string UNIQUE_KEY_0006 = "UNIQUE_KEY_0006";
            internal const string UNIQUE_KEY_0006XX = "UNIQUE_KEY_0006XX";
            internal const string EXPORT_0007EV = "EXPORT_0007EV";
            internal const string ABEND_DATA_0007ET = "ABEND_DATA_0007ET";
            internal const string TYPE_0007AS = "TYPE_0007AS";
            internal const string TYPE_0007 = "TYPE_0007";
            internal const string TYPE_0007XX = "TYPE_0007XX";
            internal const string ADABAS_FILE_NUMBER_0007AS = "ADABAS_FILE_NUMBER_0007AS";
            internal const string ADABAS_FILE_NUMBER_0007 = "ADABAS_FILE_NUMBER_0007";
            internal const string ADABAS_FILE_NUMBER_0007XX = "ADABAS_FILE_NUMBER_0007XX";
            internal const string ADABAS_FILE_ACTION_0007AS = "ADABAS_FILE_ACTION_0007AS";
            internal const string ADABAS_FILE_ACTION_0007 = "ADABAS_FILE_ACTION_0007";
            internal const string ADABAS_FILE_ACTION_0007XX = "ADABAS_FILE_ACTION_0007XX";
            internal const string ADABAS_RESPONSE_CD_0007AS = "ADABAS_RESPONSE_CD_0007AS";
            internal const string ADABAS_RESPONSE_CD_0007 = "ADABAS_RESPONSE_CD_0007";
            internal const string ADABAS_RESPONSE_CD_0007XX = "ADABAS_RESPONSE_CD_0007XX";
            internal const string CICS_RESOURCE_NM_0007AS = "CICS_RESOURCE_NM_0007AS";
            internal const string CICS_RESOURCE_NM_0007 = "CICS_RESOURCE_NM_0007";
            internal const string CICS_RESOURCE_NM_0007XX = "CICS_RESOURCE_NM_0007XX";
            internal const string CICS_FUNCTION_CD_0007AS = "CICS_FUNCTION_CD_0007AS";
            internal const string CICS_FUNCTION_CD_0007 = "CICS_FUNCTION_CD_0007";
            internal const string CICS_FUNCTION_CD_0007XX = "CICS_FUNCTION_CD_0007XX";
            internal const string CICS_RESPONSE_CD_0007AS = "CICS_RESPONSE_CD_0007AS";
            internal const string CICS_RESPONSE_CD_0007 = "CICS_RESPONSE_CD_0007";
            internal const string CICS_RESPONSE_CD_0007XX = "CICS_RESPONSE_CD_0007XX";
            internal const string GROUP_EXPORT_0001RG = "GROUP_EXPORT_0001RG";
            internal const string GROUP_EXPORT_0001MA = "GROUP_EXPORT_0001MA";
            internal const string GROUP_EXPORT_0001MX = "GROUP_EXPORT_0001MX";
            internal const string GROUP_EXPORT_0001 = "GROUP_EXPORT_0001";
            internal const string GROUP_EXPORT_0001AC = "GROUP_EXPORT_0001AC";
            internal const string GROUP_EXPORT_DETAIL_0008EV = "GROUP_EXPORT_DETAIL_0008EV";
            internal const string CSE_PERSONS_WORK_SET_0008ET = "CSE_PERSONS_WORK_SET_0008ET";
            internal const string NUMBER_0008AS = "NUMBER_0008AS";
            internal const string NUMBER_0008 = "NUMBER_0008";
            internal const string NUMBER_0008XX = "NUMBER_0008XX";
            internal const string SEX_0008AS = "SEX_0008AS";
            internal const string SEX_0008 = "SEX_0008";
            internal const string SEX_0008XX = "SEX_0008XX";
            internal const string DOB_0008AS = "DOB_0008AS";
            internal const string DOB_0008 = "DOB_0008";
            internal const string DOB_0008XX = "DOB_0008XX";
            internal const string SSN_0008AS = "SSN_0008AS";
            internal const string SSN_0008 = "SSN_0008";
            internal const string SSN_0008XX = "SSN_0008XX";
            internal const string FIRST_NAME_0008AS = "FIRST_NAME_0008AS";
            internal const string FIRST_NAME_0008 = "FIRST_NAME_0008";
            internal const string FIRST_NAME_0008XX = "FIRST_NAME_0008XX";
            internal const string MIDDLE_INITIAL_0008AS = "MIDDLE_INITIAL_0008AS";
            internal const string MIDDLE_INITIAL_0008 = "MIDDLE_INITIAL_0008";
            internal const string MIDDLE_INITIAL_0008XX = "MIDDLE_INITIAL_0008XX";
            internal const string LAST_NAME_0008AS = "LAST_NAME_0008AS";
            internal const string LAST_NAME_0008 = "LAST_NAME_0008";
            internal const string LAST_NAME_0008XX = "LAST_NAME_0008XX";
            internal const string GROUP_EXPORT_AE_0009EV = "GROUP_EXPORT_AE_0009EV";
            internal const string IEF_SUPPLIED_0009ET = "IEF_SUPPLIED_0009ET";
            internal const string FLAG_0009AS = "FLAG_0009AS";
            internal const string FLAG_0009 = "FLAG_0009";
            internal const string FLAG_0009XX = "FLAG_0009XX";
            internal const string GROUP_EXPORT_CSE_0010EV = "GROUP_EXPORT_CSE_0010EV";
            internal const string IEF_SUPPLIED_0010ET = "IEF_SUPPLIED_0010ET";
            internal const string FLAG_0010AS = "FLAG_0010AS";
            internal const string FLAG_0010 = "FLAG_0010";
            internal const string FLAG_0010XX = "FLAG_0010XX";
            internal const string GROUP_EXPORT_KANPAY_0011EV = "GROUP_EXPORT_KANPAY_0011EV";
            internal const string IEF_SUPPLIED_0011ET = "IEF_SUPPLIED_0011ET";
            internal const string FLAG_0011AS = "FLAG_0011AS";
            internal const string FLAG_0011 = "FLAG_0011";
            internal const string FLAG_0011XX = "FLAG_0011XX";
            internal const string GROUP_EXPORT_KSCARES_0012EV = "GROUP_EXPORT_KSCARES_0012EV";
            internal const string IEF_SUPPLIED_0012ET = "IEF_SUPPLIED_0012ET";
            internal const string FLAG_0012AS = "FLAG_0012AS";
            internal const string FLAG_0012 = "FLAG_0012";
            internal const string FLAG_0012XX = "FLAG_0012XX";
            internal const string GROUP_EXPORT_ALT_0013EV = "GROUP_EXPORT_ALT_0013EV";
            internal const string IEF_SUPPLIED_0013ET = "IEF_SUPPLIED_0013ET";
            internal const string FLAG_0013AS = "FLAG_0013AS";
            internal const string FLAG_0013 = "FLAG_0013";
            internal const string FLAG_0013XX = "FLAG_0013XX";
            internal const string PRF_CLIENTS = "PRF_CLIENTS";
            internal const string PRF_ENTRY_TABLE = "PRF_ENTRY_TABLE";
            internal const string PRF_REC_LENGTH = "PRF_REC_LENGTH";
            internal const string PRF_RESPONSE_CODE = "PRF_RESPONSE_CODE";
            internal const string PRFTID = "PRFTID";
            internal const string PRF_ISN = "PRF_ISN";
            internal const string PRF_ISN_QUANTITY = "PRF_ISN_QUANTITY";
            internal const string PRF_RECORD = "PRF_RECORD";
            internal const string PRF_P_CLIENTS = "PRF_P_CLIENTS";
            internal const string PRF_P_ENTRY_TABLE = "PRF_P_ENTRY_TABLE";
            internal const string PRF_P_REC_LENGTH = "PRF_P_REC_LENGTH";
            internal const string PRF_P_RESPONSE_CODE = "PRF_P_RESPONSE_CODE";
            internal const string PRFTID_P = "PRFTID_P";
            internal const string PRF_P_ISN = "PRF_P_ISN";
            internal const string PRF_P_ISN_QUANTITY = "PRF_P_ISN_QUANTITY";
            internal const string PRF_P_RECORD = "PRF_P_RECORD";
            internal const string PRF_S_CLIENTS = "PRF_S_CLIENTS";
            internal const string PRF_S_ENTRY_TABLE = "PRF_S_ENTRY_TABLE";
            internal const string PRF_S_REC_LENGTH = "PRF_S_REC_LENGTH";
            internal const string PRF_S_RESPONSE_CODE = "PRF_S_RESPONSE_CODE";
            internal const string PRFTID_S = "PRFTID_S";
            internal const string PRF_S_ISN = "PRF_S_ISN";
            internal const string PRF_S_ISN_QUANTITY = "PRF_S_ISN_QUANTITY";
            internal const string PRF_S_RECORD = "PRF_S_RECORD";
        }
        #endregion

        #region Direct-access element properties
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_0329211342_IA { get { return GetElementByName<IGroup>(Names.A_0329211342_IA); } }
        public IGroup IMPORT_START_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_START_0001EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0001ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0001ET); } }
        public IField UNIQUE_KEY_0001AS { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0001AS); } }
        public IField UNIQUE_KEY_0001 { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0001); } }
        public IField UNIQUE_KEY_0001XX { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0001XX); } }
        public IGroup IMPORT_PHONETIC_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_PHONETIC_0002EV); } }
        public IGroup IEF_SUPPLIED_0002ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0002ET); } }
        public IField PERCENTAGE_0002AS { get { return GetElementByName<IField>(Names.PERCENTAGE_0002AS); } }
        public IField PERCENTAGE_0002 { get { return GetElementByName<IField>(Names.PERCENTAGE_0002); } }
        public IField PERCENTAGE_0002XX { get { return GetElementByName<IField>(Names.PERCENTAGE_0002XX); } }
        public IGroup IMPORT_0003EV { get { return GetElementByName<IGroup>(Names.IMPORT_0003EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0003ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0003ET); } }
        public IField SSN_0003AS { get { return GetElementByName<IField>(Names.SSN_0003AS); } }
        public IField SSN_0003 { get { return GetElementByName<IField>(Names.SSN_0003); } }
        public IField SSN_0003XX { get { return GetElementByName<IField>(Names.SSN_0003XX); } }
        public IField FIRST_NAME_0003AS { get { return GetElementByName<IField>(Names.FIRST_NAME_0003AS); } }
        public IField FIRST_NAME_0003 { get { return GetElementByName<IField>(Names.FIRST_NAME_0003); } }
        public IField FIRST_NAME_0003XX { get { return GetElementByName<IField>(Names.FIRST_NAME_0003XX); } }
        public IField MIDDLE_INITIAL_0003AS { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0003AS); } }
        public IField MIDDLE_INITIAL_0003 { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0003); } }
        public IField MIDDLE_INITIAL_0003XX { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0003XX); } }
        public IField LAST_NAME_0003AS { get { return GetElementByName<IField>(Names.LAST_NAME_0003AS); } }
        public IField LAST_NAME_0003 { get { return GetElementByName<IField>(Names.LAST_NAME_0003); } }
        public IField LAST_NAME_0003XX { get { return GetElementByName<IField>(Names.LAST_NAME_0003XX); } }
        public IField SEX_0003AS { get { return GetElementByName<IField>(Names.SEX_0003AS); } }
        public IField SEX_0003 { get { return GetElementByName<IField>(Names.SEX_0003); } }
        public IField SEX_0003XX { get { return GetElementByName<IField>(Names.SEX_0003XX); } }
        public IField DOB_0003AS { get { return GetElementByName<IField>(Names.DOB_0003AS); } }
        public IField DOB_0003 { get { return GetElementByName<IField>(Names.DOB_0003); } }
        public IField DOB_0003XX { get { return GetElementByName<IField>(Names.DOB_0003XX); } }
        public IGroup IMPORT_SEARCH_0004EV { get { return GetElementByName<IGroup>(Names.IMPORT_SEARCH_0004EV); } }
        public IGroup IEF_SUPPLIED_0004ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0004ET); } }
        public IField FLAG_0004AS { get { return GetElementByName<IField>(Names.FLAG_0004AS); } }
        public IField FLAG_0004 { get { return GetElementByName<IField>(Names.FLAG_0004); } }
        public IField FLAG_0004XX { get { return GetElementByName<IField>(Names.FLAG_0004XX); } }
        public IGroup IMPORT_CURRENT_0005EV { get { return GetElementByName<IGroup>(Names.IMPORT_CURRENT_0005EV); } }
        public IGroup DATE_WORK_AREA_0005ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0005ET); } }
        public IField DATE_0005AS { get { return GetElementByName<IField>(Names.DATE_0005AS); } }
        public IField DATE_0005 { get { return GetElementByName<IField>(Names.DATE_0005); } }
        public IField DATE_0005XX { get { return GetElementByName<IField>(Names.DATE_0005XX); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_0329211344_OA { get { return GetElementByName<IGroup>(Names.A_0329211344_OA); } }
        public IGroup EXPORT_NEXT_0006EV { get { return GetElementByName<IGroup>(Names.EXPORT_NEXT_0006EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0006ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0006ET); } }
        public IField UNIQUE_KEY_0006AS { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0006AS); } }
        public IField UNIQUE_KEY_0006 { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0006); } }
        public IField UNIQUE_KEY_0006XX { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0006XX); } }
        public IGroup EXPORT_0007EV { get { return GetElementByName<IGroup>(Names.EXPORT_0007EV); } }
        public IGroup ABEND_DATA_0007ET { get { return GetElementByName<IGroup>(Names.ABEND_DATA_0007ET); } }
        public IField TYPE_0007AS { get { return GetElementByName<IField>(Names.TYPE_0007AS); } }
        public IField TYPE_0007 { get { return GetElementByName<IField>(Names.TYPE_0007); } }
        public IField TYPE_0007XX { get { return GetElementByName<IField>(Names.TYPE_0007XX); } }
        public IField ADABAS_FILE_NUMBER_0007AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0007AS); } }
        public IField ADABAS_FILE_NUMBER_0007 { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0007); } }
        public IField ADABAS_FILE_NUMBER_0007XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0007XX); } }
        public IField ADABAS_FILE_ACTION_0007AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0007AS); } }
        public IField ADABAS_FILE_ACTION_0007 { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0007); } }
        public IField ADABAS_FILE_ACTION_0007XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0007XX); } }
        public IField ADABAS_RESPONSE_CD_0007AS { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0007AS); } }
        public IField ADABAS_RESPONSE_CD_0007 { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0007); } }
        public IField ADABAS_RESPONSE_CD_0007XX { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0007XX); } }
        public IField CICS_RESOURCE_NM_0007AS { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0007AS); } }
        public IField CICS_RESOURCE_NM_0007 { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0007); } }
        public IField CICS_RESOURCE_NM_0007XX { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0007XX); } }
        public IField CICS_FUNCTION_CD_0007AS { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0007AS); } }
        public IField CICS_FUNCTION_CD_0007 { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0007); } }
        public IField CICS_FUNCTION_CD_0007XX { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0007XX); } }
        public IField CICS_RESPONSE_CD_0007AS { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0007AS); } }
        public IField CICS_RESPONSE_CD_0007 { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0007); } }
        public IField CICS_RESPONSE_CD_0007XX { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0007XX); } }
        public IGroup GROUP_EXPORT_0001RG { get { return GetElementByName<IGroup>(Names.GROUP_EXPORT_0001RG); } }
        public IField GROUP_EXPORT_0001MA { get { return GetElementByName<IField>(Names.GROUP_EXPORT_0001MA); } }
        public IField GROUP_EXPORT_0001MX { get { return GetElementByName<IField>(Names.GROUP_EXPORT_0001MX); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_0001 { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_0001); } }
        public IArrayElementAccessor<IField> GROUP_EXPORT_0001AC { get { return GetArrayElementAccessor<IField>(Names.GROUP_EXPORT_0001AC); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_DETAIL_0008EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_DETAIL_0008EV); } }
        public IArrayElementAccessor<IGroup> CSE_PERSONS_WORK_SET_0008ET { get { return GetArrayElementAccessor<IGroup>(Names.CSE_PERSONS_WORK_SET_0008ET); } }
        public IArrayElementAccessor<IField> NUMBER_0008AS { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0008AS); } }
        public IArrayElementAccessor<IField> NUMBER_0008 { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0008); } }
        public IArrayElementAccessor<IField> NUMBER_0008XX { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0008XX); } }
        public IArrayElementAccessor<IField> SEX_0008AS { get { return GetArrayElementAccessor<IField>(Names.SEX_0008AS); } }
        public IArrayElementAccessor<IField> SEX_0008 { get { return GetArrayElementAccessor<IField>(Names.SEX_0008); } }
        public IArrayElementAccessor<IField> SEX_0008XX { get { return GetArrayElementAccessor<IField>(Names.SEX_0008XX); } }
        public IArrayElementAccessor<IField> DOB_0008AS { get { return GetArrayElementAccessor<IField>(Names.DOB_0008AS); } }
        public IArrayElementAccessor<IField> DOB_0008 { get { return GetArrayElementAccessor<IField>(Names.DOB_0008); } }
        public IArrayElementAccessor<IField> DOB_0008XX { get { return GetArrayElementAccessor<IField>(Names.DOB_0008XX); } }
        public IArrayElementAccessor<IField> SSN_0008AS { get { return GetArrayElementAccessor<IField>(Names.SSN_0008AS); } }
        public IArrayElementAccessor<IField> SSN_0008 { get { return GetArrayElementAccessor<IField>(Names.SSN_0008); } }
        public IArrayElementAccessor<IField> SSN_0008XX { get { return GetArrayElementAccessor<IField>(Names.SSN_0008XX); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0008AS { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0008AS); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0008 { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0008); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0008XX { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0008XX); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0008AS { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0008AS); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0008 { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0008); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0008XX { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0008XX); } }
        public IArrayElementAccessor<IField> LAST_NAME_0008AS { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0008AS); } }
        public IArrayElementAccessor<IField> LAST_NAME_0008 { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0008); } }
        public IArrayElementAccessor<IField> LAST_NAME_0008XX { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0008XX); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_AE_0009EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_AE_0009EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0009ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0009ET); } }
        public IArrayElementAccessor<IField> FLAG_0009AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0009AS); } }
        public IArrayElementAccessor<IField> FLAG_0009 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0009); } }
        public IArrayElementAccessor<IField> FLAG_0009XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0009XX); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_CSE_0010EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_CSE_0010EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0010ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0010ET); } }
        public IArrayElementAccessor<IField> FLAG_0010AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0010AS); } }
        public IArrayElementAccessor<IField> FLAG_0010 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0010); } }
        public IArrayElementAccessor<IField> FLAG_0010XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0010XX); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_KANPAY_0011EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_KANPAY_0011EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0011ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0011ET); } }
        public IArrayElementAccessor<IField> FLAG_0011AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0011AS); } }
        public IArrayElementAccessor<IField> FLAG_0011 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0011); } }
        public IArrayElementAccessor<IField> FLAG_0011XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0011XX); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_KSCARES_0012EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_KSCARES_0012EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0012ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0012ET); } }
        public IArrayElementAccessor<IField> FLAG_0012AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0012AS); } }
        public IArrayElementAccessor<IField> FLAG_0012 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0012); } }
        public IArrayElementAccessor<IField> FLAG_0012XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0012XX); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_ALT_0013EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_ALT_0013EV); } }
        public IArrayElementAccessor<IGroup> IEF_SUPPLIED_0013ET { get { return GetArrayElementAccessor<IGroup>(Names.IEF_SUPPLIED_0013ET); } }
        public IArrayElementAccessor<IField> FLAG_0013AS { get { return GetArrayElementAccessor<IField>(Names.FLAG_0013AS); } }
        public IArrayElementAccessor<IField> FLAG_0013 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0013); } }
        public IArrayElementAccessor<IField> FLAG_0013XX { get { return GetArrayElementAccessor<IField>(Names.FLAG_0013XX); } }
        public IGroup PRF_CLIENTS { get { return GetElementByName<IGroup>(Names.PRF_CLIENTS); } }
        public IArrayElementAccessor<IGroup> PRF_ENTRY_TABLE { get { return GetArrayElementAccessor<IGroup>(Names.PRF_ENTRY_TABLE); } }
        public IArrayElementAccessor<IField> PRF_REC_LENGTH { get { return GetArrayElementAccessor<IField>(Names.PRF_REC_LENGTH); } }
        public IArrayElementAccessor<IField> PRF_RESPONSE_CODE { get { return GetArrayElementAccessor<IField>(Names.PRF_RESPONSE_CODE); } }
        public IArrayElementAccessor<IField> PRFTID { get { return GetArrayElementAccessor<IField>(Names.PRFTID); } }
        public IArrayElementAccessor<IField> PRF_ISN { get { return GetArrayElementAccessor<IField>(Names.PRF_ISN); } }
        public IArrayElementAccessor<IField> PRF_ISN_QUANTITY { get { return GetArrayElementAccessor<IField>(Names.PRF_ISN_QUANTITY); } }
        public IArrayElementAccessor<IField> PRF_RECORD { get { return GetArrayElementAccessor<IField>(Names.PRF_RECORD); } }
        public IGroup PRF_P_CLIENTS { get { return GetElementByName<IGroup>(Names.PRF_P_CLIENTS); } }
        public IArrayElementAccessor<IGroup> PRF_P_ENTRY_TABLE { get { return GetArrayElementAccessor<IGroup>(Names.PRF_P_ENTRY_TABLE); } }
        public IArrayElementAccessor<IField> PRF_P_REC_LENGTH { get { return GetArrayElementAccessor<IField>(Names.PRF_P_REC_LENGTH); } }
        public IArrayElementAccessor<IField> PRF_P_RESPONSE_CODE { get { return GetArrayElementAccessor<IField>(Names.PRF_P_RESPONSE_CODE); } }
        public IArrayElementAccessor<IField> PRFTID_P { get { return GetArrayElementAccessor<IField>(Names.PRFTID_P); } }
        public IArrayElementAccessor<IField> PRF_P_ISN { get { return GetArrayElementAccessor<IField>(Names.PRF_P_ISN); } }
        public IArrayElementAccessor<IField> PRF_P_ISN_QUANTITY { get { return GetArrayElementAccessor<IField>(Names.PRF_P_ISN_QUANTITY); } }
        public IArrayElementAccessor<IField> PRF_P_RECORD { get { return GetArrayElementAccessor<IField>(Names.PRF_P_RECORD); } }
        public IGroup PRF_S_CLIENTS { get { return GetElementByName<IGroup>(Names.PRF_S_CLIENTS); } }
        public IArrayElementAccessor<IGroup> PRF_S_ENTRY_TABLE { get { return GetArrayElementAccessor<IGroup>(Names.PRF_S_ENTRY_TABLE); } }
        public IArrayElementAccessor<IField> PRF_S_REC_LENGTH { get { return GetArrayElementAccessor<IField>(Names.PRF_S_REC_LENGTH); } }
        public IArrayElementAccessor<IField> PRF_S_RESPONSE_CODE { get { return GetArrayElementAccessor<IField>(Names.PRF_S_RESPONSE_CODE); } }
        public IArrayElementAccessor<IField> PRFTID_S { get { return GetArrayElementAccessor<IField>(Names.PRFTID_S); } }
        public IArrayElementAccessor<IField> PRF_S_ISN { get { return GetArrayElementAccessor<IField>(Names.PRF_S_ISN); } }
        public IArrayElementAccessor<IField> PRF_S_ISN_QUANTITY { get { return GetArrayElementAccessor<IField>(Names.PRF_S_ISN_QUANTITY); } }
        public IArrayElementAccessor<IField> PRF_S_RECORD { get { return GetArrayElementAccessor<IField>(Names.PRF_S_RECORD); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_0329211342_IA, (A_0329211342_IA) =>
               {
                   A_0329211342_IA.CreateNewGroup(Names.IMPORT_START_0001EV, (IMPORT_START_0001EV) =>
                   {
                       IMPORT_START_0001EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0001ET, (CSE_PERSONS_WORK_SET_0001ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.UNIQUE_KEY_0001AS, FieldType.String, 1);

                           IField UNIQUE_KEY_0001_local = CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.UNIQUE_KEY_0001, FieldType.String, 100);
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewFieldRedefine(Names.UNIQUE_KEY_0001XX, FieldType.String, UNIQUE_KEY_0001_local, 100);
                       });
                   });
                   A_0329211342_IA.CreateNewGroup(Names.IMPORT_PHONETIC_0002EV, (IMPORT_PHONETIC_0002EV) =>
                   {
                       IMPORT_PHONETIC_0002EV.CreateNewGroup(Names.IEF_SUPPLIED_0002ET, (IEF_SUPPLIED_0002ET) =>
                       {
                           IEF_SUPPLIED_0002ET.CreateNewField(Names.PERCENTAGE_0002AS, FieldType.String, 1);

                           IField PERCENTAGE_0002_local = IEF_SUPPLIED_0002ET.CreateNewField(Names.PERCENTAGE_0002, FieldType.SignedNumeric, 3);
                           IEF_SUPPLIED_0002ET.CreateNewFieldRedefine(Names.PERCENTAGE_0002XX, FieldType.String, PERCENTAGE_0002_local, 3);
                       });
                   });
                   A_0329211342_IA.CreateNewGroup(Names.IMPORT_0003EV, (IMPORT_0003EV) =>
                   {
                       IMPORT_0003EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0003ET, (CSE_PERSONS_WORK_SET_0003ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.SSN_0003AS, FieldType.String, 1);

                           IField SSN_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.SSN_0003, FieldType.String, 9);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.SSN_0003XX, FieldType.String, SSN_0003_local, 9);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.FIRST_NAME_0003AS, FieldType.String, 1);

                           IField FIRST_NAME_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.FIRST_NAME_0003, FieldType.String, 12);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.FIRST_NAME_0003XX, FieldType.String, FIRST_NAME_0003_local, 12);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.MIDDLE_INITIAL_0003AS, FieldType.String, 1);

                           IField MIDDLE_INITIAL_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.MIDDLE_INITIAL_0003, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0003XX, FieldType.String, MIDDLE_INITIAL_0003_local, 1);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.LAST_NAME_0003AS, FieldType.String, 1);

                           IField LAST_NAME_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.LAST_NAME_0003, FieldType.String, 17);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.LAST_NAME_0003XX, FieldType.String, LAST_NAME_0003_local, 17);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.SEX_0003AS, FieldType.String, 1);

                           IField SEX_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.SEX_0003, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.SEX_0003XX, FieldType.String, SEX_0003_local, 1);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.DOB_0003AS, FieldType.String, 1);

                           IField DOB_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.DOB_0003, FieldType.SignedNumeric, 8);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.DOB_0003XX, FieldType.String, DOB_0003_local, 8);
                       });
                   });
                   A_0329211342_IA.CreateNewGroup(Names.IMPORT_SEARCH_0004EV, (IMPORT_SEARCH_0004EV) =>
                   {
                       IMPORT_SEARCH_0004EV.CreateNewGroup(Names.IEF_SUPPLIED_0004ET, (IEF_SUPPLIED_0004ET) =>
                       {
                           IEF_SUPPLIED_0004ET.CreateNewField(Names.FLAG_0004AS, FieldType.String, 1);

                           IField FLAG_0004_local = IEF_SUPPLIED_0004ET.CreateNewField(Names.FLAG_0004, FieldType.String, 1);
                           IEF_SUPPLIED_0004ET.CreateNewFieldRedefine(Names.FLAG_0004XX, FieldType.String, FLAG_0004_local, 1);
                       });
                   });
                   A_0329211342_IA.CreateNewGroup(Names.IMPORT_CURRENT_0005EV, (IMPORT_CURRENT_0005EV) =>
                   {
                       IMPORT_CURRENT_0005EV.CreateNewGroup(Names.DATE_WORK_AREA_0005ET, (DATE_WORK_AREA_0005ET) =>
                       {
                           DATE_WORK_AREA_0005ET.CreateNewField(Names.DATE_0005AS, FieldType.String, 1);

                           IField DATE_0005_local = DATE_WORK_AREA_0005ET.CreateNewField(Names.DATE_0005, FieldType.SignedNumeric, 8);
                           DATE_WORK_AREA_0005ET.CreateNewFieldRedefine(Names.DATE_0005XX, FieldType.String, DATE_0005_local, 8);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_0329211344_OA, (A_0329211344_OA) =>
               {
                   A_0329211344_OA.CreateNewGroup(Names.EXPORT_NEXT_0006EV, (EXPORT_NEXT_0006EV) =>
                   {
                       EXPORT_NEXT_0006EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0006ET, (CSE_PERSONS_WORK_SET_0006ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.UNIQUE_KEY_0006AS, FieldType.String, 1);

                           IField UNIQUE_KEY_0006_local = CSE_PERSONS_WORK_SET_0006ET.CreateNewField(Names.UNIQUE_KEY_0006, FieldType.String, 100);
                           CSE_PERSONS_WORK_SET_0006ET.CreateNewFieldRedefine(Names.UNIQUE_KEY_0006XX, FieldType.String, UNIQUE_KEY_0006_local, 100);
                       });
                   });
                   A_0329211344_OA.CreateNewGroup(Names.EXPORT_0007EV, (EXPORT_0007EV) =>
                   {
                       EXPORT_0007EV.CreateNewGroup(Names.ABEND_DATA_0007ET, (ABEND_DATA_0007ET) =>
                       {
                           ABEND_DATA_0007ET.CreateNewField(Names.TYPE_0007AS, FieldType.String, 1);

                           IField TYPE_0007_local = ABEND_DATA_0007ET.CreateNewField(Names.TYPE_0007, FieldType.String, 1);
                           ABEND_DATA_0007ET.CreateNewFieldRedefine(Names.TYPE_0007XX, FieldType.String, TYPE_0007_local, 1);
                           ABEND_DATA_0007ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0007AS, FieldType.String, 1);

                           IField ADABAS_FILE_NUMBER_0007_local = ABEND_DATA_0007ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0007, FieldType.String, 4);
                           ABEND_DATA_0007ET.CreateNewFieldRedefine(Names.ADABAS_FILE_NUMBER_0007XX, FieldType.String, ADABAS_FILE_NUMBER_0007_local, 4);
                           ABEND_DATA_0007ET.CreateNewField(Names.ADABAS_FILE_ACTION_0007AS, FieldType.String, 1);

                           IField ADABAS_FILE_ACTION_0007_local = ABEND_DATA_0007ET.CreateNewField(Names.ADABAS_FILE_ACTION_0007, FieldType.String, 3);
                           ABEND_DATA_0007ET.CreateNewFieldRedefine(Names.ADABAS_FILE_ACTION_0007XX, FieldType.String, ADABAS_FILE_ACTION_0007_local, 3);
                           ABEND_DATA_0007ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0007AS, FieldType.String, 1);

                           IField ADABAS_RESPONSE_CD_0007_local = ABEND_DATA_0007ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0007, FieldType.String, 4);
                           ABEND_DATA_0007ET.CreateNewFieldRedefine(Names.ADABAS_RESPONSE_CD_0007XX, FieldType.String, ADABAS_RESPONSE_CD_0007_local, 4);
                           ABEND_DATA_0007ET.CreateNewField(Names.CICS_RESOURCE_NM_0007AS, FieldType.String, 1);

                           IField CICS_RESOURCE_NM_0007_local = ABEND_DATA_0007ET.CreateNewField(Names.CICS_RESOURCE_NM_0007, FieldType.String, 8);
                           ABEND_DATA_0007ET.CreateNewFieldRedefine(Names.CICS_RESOURCE_NM_0007XX, FieldType.String, CICS_RESOURCE_NM_0007_local, 8);
                           ABEND_DATA_0007ET.CreateNewField(Names.CICS_FUNCTION_CD_0007AS, FieldType.String, 1);

                           IField CICS_FUNCTION_CD_0007_local = ABEND_DATA_0007ET.CreateNewField(Names.CICS_FUNCTION_CD_0007, FieldType.String, 2);
                           ABEND_DATA_0007ET.CreateNewFieldRedefine(Names.CICS_FUNCTION_CD_0007XX, FieldType.String, CICS_FUNCTION_CD_0007_local, 2);
                           ABEND_DATA_0007ET.CreateNewField(Names.CICS_RESPONSE_CD_0007AS, FieldType.String, 1);

                           IField CICS_RESPONSE_CD_0007_local = ABEND_DATA_0007ET.CreateNewField(Names.CICS_RESPONSE_CD_0007, FieldType.String, 6);
                           ABEND_DATA_0007ET.CreateNewFieldRedefine(Names.CICS_RESPONSE_CD_0007XX, FieldType.String, CICS_RESPONSE_CD_0007_local, 6);
                       });
                   });
                   A_0329211344_OA.CreateNewGroup(Names.GROUP_EXPORT_0001RG, (GROUP_EXPORT_0001RG) =>
                   {

                       IField GROUP_EXPORT_0001MA_local = GROUP_EXPORT_0001RG.CreateNewField(Names.GROUP_EXPORT_0001MA, FieldType.SignedNumeric, 4);
                       GROUP_EXPORT_0001RG.CreateNewFieldRedefine(Names.GROUP_EXPORT_0001MX, FieldType.String, GROUP_EXPORT_0001MA_local, 4);
                       GROUP_EXPORT_0001RG.CreateNewGroupArray(Names.GROUP_EXPORT_0001, 125, (GROUP_EXPORT_0001) =>
                       {
                           GROUP_EXPORT_0001.CreateNewField(Names.GROUP_EXPORT_0001AC, FieldType.String, 1);
                           GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_DETAIL_0008EV, (GROUP_EXPORT_DETAIL_0008EV) =>
                           {
                               GROUP_EXPORT_DETAIL_0008EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0008ET, (CSE_PERSONS_WORK_SET_0008ET) =>
                               {
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.NUMBER_0008AS, FieldType.String, 1);

                                   IField NUMBER_0008_local = CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.NUMBER_0008, FieldType.String, 10);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewFieldRedefine(Names.NUMBER_0008XX, FieldType.String, NUMBER_0008_local, 10);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.SEX_0008AS, FieldType.String, 1);

                                   IField SEX_0008_local = CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.SEX_0008, FieldType.String, 1);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewFieldRedefine(Names.SEX_0008XX, FieldType.String, SEX_0008_local, 1);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.DOB_0008AS, FieldType.String, 1);

                                   IField DOB_0008_local = CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.DOB_0008, FieldType.SignedNumeric, 8);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewFieldRedefine(Names.DOB_0008XX, FieldType.String, DOB_0008_local, 8);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.SSN_0008AS, FieldType.String, 1);

                                   IField SSN_0008_local = CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.SSN_0008, FieldType.String, 9);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewFieldRedefine(Names.SSN_0008XX, FieldType.String, SSN_0008_local, 9);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.FIRST_NAME_0008AS, FieldType.String, 1);

                                   IField FIRST_NAME_0008_local = CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.FIRST_NAME_0008, FieldType.String, 12);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewFieldRedefine(Names.FIRST_NAME_0008XX, FieldType.String, FIRST_NAME_0008_local, 12);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.MIDDLE_INITIAL_0008AS, FieldType.String, 1);

                                   IField MIDDLE_INITIAL_0008_local = CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.MIDDLE_INITIAL_0008, FieldType.String, 1);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0008XX, FieldType.String, MIDDLE_INITIAL_0008_local, 1);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.LAST_NAME_0008AS, FieldType.String, 1);

                                   IField LAST_NAME_0008_local = CSE_PERSONS_WORK_SET_0008ET.CreateNewField(Names.LAST_NAME_0008, FieldType.String, 17);
                                   CSE_PERSONS_WORK_SET_0008ET.CreateNewFieldRedefine(Names.LAST_NAME_0008XX, FieldType.String, LAST_NAME_0008_local, 17);
                               });
                           });
                           GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_AE_0009EV, (GROUP_EXPORT_AE_0009EV) =>
                           {
                               GROUP_EXPORT_AE_0009EV.CreateNewGroup(Names.IEF_SUPPLIED_0009ET, (IEF_SUPPLIED_0009ET) =>
                               {
                                   IEF_SUPPLIED_0009ET.CreateNewField(Names.FLAG_0009AS, FieldType.String, 1);

                                   IField FLAG_0009_local = IEF_SUPPLIED_0009ET.CreateNewField(Names.FLAG_0009, FieldType.String, 1);
                                   IEF_SUPPLIED_0009ET.CreateNewFieldRedefine(Names.FLAG_0009XX, FieldType.String, FLAG_0009_local, 1);
                               });
                           });
                           GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_CSE_0010EV, (GROUP_EXPORT_CSE_0010EV) =>
                           {
                               GROUP_EXPORT_CSE_0010EV.CreateNewGroup(Names.IEF_SUPPLIED_0010ET, (IEF_SUPPLIED_0010ET) =>
                               {
                                   IEF_SUPPLIED_0010ET.CreateNewField(Names.FLAG_0010AS, FieldType.String, 1);

                                   IField FLAG_0010_local = IEF_SUPPLIED_0010ET.CreateNewField(Names.FLAG_0010, FieldType.String, 1);
                                   IEF_SUPPLIED_0010ET.CreateNewFieldRedefine(Names.FLAG_0010XX, FieldType.String, FLAG_0010_local, 1);
                               });
                           });
                           GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_KANPAY_0011EV, (GROUP_EXPORT_KANPAY_0011EV) =>
                           {
                               GROUP_EXPORT_KANPAY_0011EV.CreateNewGroup(Names.IEF_SUPPLIED_0011ET, (IEF_SUPPLIED_0011ET) =>
                               {
                                   IEF_SUPPLIED_0011ET.CreateNewField(Names.FLAG_0011AS, FieldType.String, 1);

                                   IField FLAG_0011_local = IEF_SUPPLIED_0011ET.CreateNewField(Names.FLAG_0011, FieldType.String, 1);
                                   IEF_SUPPLIED_0011ET.CreateNewFieldRedefine(Names.FLAG_0011XX, FieldType.String, FLAG_0011_local, 1);
                               });
                           });
                           GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_KSCARES_0012EV, (GROUP_EXPORT_KSCARES_0012EV) =>
                           {
                               GROUP_EXPORT_KSCARES_0012EV.CreateNewGroup(Names.IEF_SUPPLIED_0012ET, (IEF_SUPPLIED_0012ET) =>
                               {
                                   IEF_SUPPLIED_0012ET.CreateNewField(Names.FLAG_0012AS, FieldType.String, 1);

                                   IField FLAG_0012_local = IEF_SUPPLIED_0012ET.CreateNewField(Names.FLAG_0012, FieldType.String, 1);
                                   IEF_SUPPLIED_0012ET.CreateNewFieldRedefine(Names.FLAG_0012XX, FieldType.String, FLAG_0012_local, 1);
                               });
                           });
                           GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_ALT_0013EV, (GROUP_EXPORT_ALT_0013EV) =>
                           {
                               GROUP_EXPORT_ALT_0013EV.CreateNewGroup(Names.IEF_SUPPLIED_0013ET, (IEF_SUPPLIED_0013ET) =>
                               {
                                   IEF_SUPPLIED_0013ET.CreateNewField(Names.FLAG_0013AS, FieldType.String, 1);

                                   IField FLAG_0013_local = IEF_SUPPLIED_0013ET.CreateNewField(Names.FLAG_0013, FieldType.String, 1);
                                   IEF_SUPPLIED_0013ET.CreateNewFieldRedefine(Names.FLAG_0013XX, FieldType.String, FLAG_0013_local, 1);
                               });
                           });
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.PRF_CLIENTS, (PRF_CLIENTS) =>
           {
               PRF_CLIENTS.CreateNewGroupArray(Names.PRF_ENTRY_TABLE, 10, (PRF_ENTRY_TABLE) =>
               {
                   PRF_ENTRY_TABLE.CreateNewField(Names.PRF_REC_LENGTH, FieldType.CompShort, 4);
                   PRF_ENTRY_TABLE.CreateNewField(Names.PRF_RESPONSE_CODE, FieldType.CompShort, 4);
                   PRF_ENTRY_TABLE.CreateNewField(Names.PRFTID, FieldType.CompInt, 9);
                   PRF_ENTRY_TABLE.CreateNewField(Names.PRF_ISN, FieldType.CompInt, 9);
                   PRF_ENTRY_TABLE.CreateNewField(Names.PRF_ISN_QUANTITY, FieldType.CompInt, 9);
                   PRF_ENTRY_TABLE.CreateNewField(Names.PRF_RECORD, FieldType.String, 79);
               });
           });

            recordDef.CreateNewGroup(Names.PRF_P_CLIENTS, (PRF_P_CLIENTS) =>
           {
               PRF_P_CLIENTS.CreateNewGroupArray(Names.PRF_P_ENTRY_TABLE, 10, (PRF_P_ENTRY_TABLE) =>
               {
                   PRF_P_ENTRY_TABLE.CreateNewField(Names.PRF_P_REC_LENGTH, FieldType.CompShort, 4);
                   PRF_P_ENTRY_TABLE.CreateNewField(Names.PRF_P_RESPONSE_CODE, FieldType.CompShort, 4);
                   PRF_P_ENTRY_TABLE.CreateNewField(Names.PRFTID_P, FieldType.CompInt, 9);
                   PRF_P_ENTRY_TABLE.CreateNewField(Names.PRF_P_ISN, FieldType.CompInt, 9);
                   PRF_P_ENTRY_TABLE.CreateNewField(Names.PRF_P_ISN_QUANTITY, FieldType.CompInt, 9);
                   PRF_P_ENTRY_TABLE.CreateNewField(Names.PRF_P_RECORD, FieldType.String, 100);
               });
           });

            recordDef.CreateNewGroup(Names.PRF_S_CLIENTS, (PRF_S_CLIENTS) =>
           {
               PRF_S_CLIENTS.CreateNewGroupArray(Names.PRF_S_ENTRY_TABLE, 10, (PRF_S_ENTRY_TABLE) =>
               {
                   PRF_S_ENTRY_TABLE.CreateNewField(Names.PRF_S_REC_LENGTH, FieldType.CompShort, 4);
                   PRF_S_ENTRY_TABLE.CreateNewField(Names.PRF_S_RESPONSE_CODE, FieldType.CompShort, 4);
                   PRF_S_ENTRY_TABLE.CreateNewField(Names.PRFTID_S, FieldType.CompInt, 9);
                   PRF_S_ENTRY_TABLE.CreateNewField(Names.PRF_S_ISN, FieldType.CompInt, 9);
                   PRF_S_ENTRY_TABLE.CreateNewField(Names.PRF_S_ISN_QUANTITY, FieldType.CompInt, 9);
                   PRF_S_ENTRY_TABLE.CreateNewField(Names.PRF_S_RECORD, FieldType.String, 79);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(W_IA, args, 0);
            SetPassedParm(W_OA, args, 1);
            SetPassedParm(PSMGR_EAB_DATA, args, 2);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(W_IA, args, 0);
            SetReturnParm(W_OA, args, 1);
            SetReturnParm(PSMGR_EAB_DATA, args, 2);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXGR05 : OnlineEABBase
    {

        #region Public Constructors
        public SWEXGR05()
            : base()
        {
            SetUpProgram();
        }

        public SWEXGR05(OnlineControl controlData) : base(controlData)
        {
            SetUpProgram();
        }

        private void SetUpProgram()
        {
            this.ProgramName = "SWEXGR05";

            WS = new SWEXGR05_ws();
            LS = new SWEXGR05_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryText("NAME-VIEW", "SELECT CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( CLIENT_NAME = {0}  AND SSN = {1}  AND DATE_OF_BIRTH = {2}  AND GENDER = {3}  AND FK_CLB_CLIENT_NO >= {4}  ) OR ( CLIENT_NAME = {5}  AND SSN = {6}  AND DATE_OF_BIRTH = {7}  AND GENDER > {8}  ) OR ( CLIENT_NAME = {9}  AND SSN = {10}  AND DATE_OF_BIRTH > {11}  ) OR ( CLIENT_NAME = {12}  AND SSN > {13}  ) OR ( CLIENT_NAME > {14}  ) ORDER BY CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE NAME-VIEW CURSOR FOR SELECT CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER = :DBK1-GENDER AND FK_CLB_CLIENT_NO >= :DBK1-CLIENT-NUMBER ) OR ( CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER > :DBK1-GENDER ) OR ( CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH > :DBK1-DATE-OF-BIRTH ) OR ( CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN > :DBK1-SSN ) OR ( CLIENT_NAME > :DBK1-CLIENT-NAME ) ORDER BY CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG END-EXEC
                                WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_CLIENT_NUMBER, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_CLIENT_NAME);

            DbConv.SetQueryText("PHON-VIEW", "SELECT PHONETIC_DATA, CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( PHONETIC_DATA = {0}  AND CLIENT_NAME = {1}  AND SSN = {2}  AND DATE_OF_BIRTH = {3}  AND GENDER = {4}  AND FK_CLB_CLIENT_NO >= {5}  ) OR ( PHONETIC_DATA = {6}  AND CLIENT_NAME = {7}  AND SSN = {8}  AND DATE_OF_BIRTH = {9}  AND GENDER > {10}  ) OR ( PHONETIC_DATA = {11}  AND CLIENT_NAME = {12}  AND SSN = {13}  AND DATE_OF_BIRTH > {14}  ) OR ( PHONETIC_DATA = {15}  AND CLIENT_NAME = {16}  AND SSN > {17}  ) OR ( PHONETIC_DATA = {18}  AND CLIENT_NAME > {19}  ) OR ( PHONETIC_DATA > {20}  ) ORDER BY PHONETIC_DATA, CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE PHON-VIEW CURSOR FOR SELECT PHONETIC_DATA , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( PHONETIC_DATA = :DBK1-PHONETIC-DATA AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER = :DBK1-GENDER AND FK_CLB_CLIENT_NO >= :DBK1-CLIENT-NUMBER ) OR ( PHONETIC_DATA = :DBK1-PHONETIC-DATA AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER > :DBK1-GENDER ) OR ( PHONETIC_DATA = :DBK1-PHONETIC-DATA AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH > :DBK1-DATE-OF-BIRTH ) OR ( PHONETIC_DATA = :DBK1-PHONETIC-DATA AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN > :DBK1-SSN ) OR ( PHONETIC_DATA = :DBK1-PHONETIC-DATA AND CLIENT_NAME > :DBK1-CLIENT-NAME ) OR ( PHONETIC_DATA > :DBK1-PHONETIC-DATA ) ORDER BY PHONETIC_DATA , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG END-EXEC
                                WS.DBK1_PHONETIC_DATA, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_CLIENT_NUMBER, WS.DBK1_PHONETIC_DATA, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_PHONETIC_DATA, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_PHONETIC_DATA, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_PHONETIC_DATA, WS.DBK1_CLIENT_NAME, WS.DBK1_PHONETIC_DATA);

            DbConv.SetQueryText("SSN-VIEW", "SELECT SSN, CLIENT_NAME, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( SSN = {0}  AND CLIENT_NAME = {1}  AND DATE_OF_BIRTH = {2}  AND GENDER = {3}  AND FK_CLB_CLIENT_NO >= {4}  ) OR ( SSN = {5}  AND CLIENT_NAME = {6}  AND DATE_OF_BIRTH = {7}  AND GENDER > {8}  ) OR ( SSN = {9}  AND CLIENT_NAME = {10}  AND DATE_OF_BIRTH > {11}  ) OR ( SSN = {12}  AND CLIENT_NAME > {13}  ) OR ( SSN > {14}  ) ORDER BY SSN, CLIENT_NAME, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE SSN-VIEW CURSOR FOR SELECT SSN , CLIENT_NAME , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( SSN = :DBK1-SSN AND CLIENT_NAME = :DBK1-CLIENT-NAME AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER = :DBK1-GENDER AND FK_CLB_CLIENT_NO >= :DBK1-CLIENT-NUMBER ) OR ( SSN = :DBK1-SSN AND CLIENT_NAME = :DBK1-CLIENT-NAME AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER > :DBK1-GENDER ) OR ( SSN = :DBK1-SSN AND CLIENT_NAME = :DBK1-CLIENT-NAME AND DATE_OF_BIRTH > :DBK1-DATE-OF-BIRTH ) OR ( SSN = :DBK1-SSN AND CLIENT_NAME > :DBK1-CLIENT-NAME ) OR ( SSN > :DBK1-SSN ) ORDER BY SSN , CLIENT_NAME , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG END-EXEC
                                WS.DBK1_SSN, WS.DBK1_CLIENT_NAME, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_CLIENT_NUMBER, WS.DBK1_SSN, WS.DBK1_CLIENT_NAME, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_SSN, WS.DBK1_CLIENT_NAME, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_SSN, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN);

            DbConv.SetQueryTextWithUR("SPA-VIEW", "SELECT SYSTEM_CODE, PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {0}  AND FK_CLI_CLIENT_NAME = {1}  AND FK_CLI_SSN = {2} ",  //COBOL==>EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER AND FK_CLI_CLIENT_NAME = :DBK9-CLIENT-NAME AND FK_CLI_SSN = :DBK9-SSN WITH UR END-EXEC
                                WS.DBK9_CLIENT_NUMBER, WS.DBK9_CLIENT_NAME, WS.DBK9_SSN);

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXGR05_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXGR05_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain(string.Empty, "Main");
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        protected override void RunMain(string startLabel, string returnLbl)
        {
            #region Perform Navigation
            string returnLabel = returnLbl;
            string handleCondition = "";
            switch (startLabel)
            {
                case "PARA-0329211337-INIT": goto L_PARA_0329211337_INIT; break;
                case "PARA-0329211337": goto L_PARA_0329211337; break;
                case "9999-CICS-ABEND": goto L_9999_CICS_ABEND; break;
                case "1000-GET-EXACT-NAME-LIST": goto L_1000_GET_EXACT_NAME_LIST; break;
                case "1005-GET-PHONETIC-NAME-LIST": goto L_1005_GET_PHONETIC_NAME_LIST; break;
                case "1010-GET-SSN-NAME-LIST": goto L_1010_GET_SSN_NAME_LIST; break;
                case "2000-SET-ALIAS-IND": goto L_2000_SET_ALIAS_IND; break;
                case "91100-CONVERT-DATE-ADA-TO-DB2": goto L_91100_CONVERT_DATE_ADA_TO_DB2; break;
                case "5100-OPEN-NAME-VIEW": goto L_5100_OPEN_NAME_VIEW; break;
                case "5200-FETCH-NAME-VIEW": goto L_5200_FETCH_NAME_VIEW; break;
                case "5300-CLOSE-NAME-VIEW": goto L_5300_CLOSE_NAME_VIEW; break;
                case "91200-CONVERT-DATE-DB2-TO-ADA": goto L_91200_CONVERT_DATE_DB2_TO_ADA; break;
                case "99000-CLIENT-POINTER-ROUTINE": goto L_99000_CLIENT_POINTER_ROUTINE; break;
                case "PH002-0000-CONVERT-NAME": goto L_PH002_0000_CONVERT_NAME; break;
                case "6100-OPEN-PHON-VIEW": goto L_6100_OPEN_PHON_VIEW; break;
                case "6200-FETCH-PHON-VIEW": goto L_6200_FETCH_PHON_VIEW; break;
                case "6300-CLOSE-PHON-VIEW": goto L_6300_CLOSE_PHON_VIEW; break;
                case "PH004-0000-LIKENESS": goto L_PH004_0000_LIKENESS; break;
                case "7100-OPEN-SSN-VIEW": goto L_7100_OPEN_SSN_VIEW; break;
                case "7200-FETCH-SSN-VIEW": goto L_7200_FETCH_SSN_VIEW; break;
                case "7300-CLOSE-SSN-VIEW": goto L_7300_CLOSE_SSN_VIEW; break;
                case "98000-SELECT-CLIENT-BASIC": goto L_98000_SELECT_CLIENT_BASIC; break;
                case "PH002-1000-INITIALIZE": goto L_PH002_1000_INITIALIZE; break;
                case "PH003-0000-CRUNCH-NAME": goto L_PH003_0000_CRUNCH_NAME; break;
                case "PH002-2000-REMAIN-NAME": goto L_PH002_2000_REMAIN_NAME; break;
                case "PH002-3000-FIRST-2-LETTERS": goto L_PH002_3000_FIRST_2_LETTERS; break;
                case "PH002-4000-FIRST-1-LETTER": goto L_PH002_4000_FIRST_1_LETTER; break;
                case "PH002-2010-FINISH-NAME": goto L_PH002_2010_FINISH_NAME; break;
                case "PH002-2020-WRAP-UP": goto L_PH002_2020_WRAP_UP; break;
                case "PH002-2011-LAST-LETTER": goto L_PH002_2011_LAST_LETTER; break;
                case "PH002-2901-BUILD-2-1": goto L_PH002_2901_BUILD_2_1; break;
                case "PH002-2012-CHECK-2-LETTERS": goto L_PH002_2012_CHECK_2_LETTERS; break;
                case "PH002-2014-MIDDLE-LETTERS": goto L_PH002_2014_MIDDLE_LETTERS; break;
                case "PH002-2011-1-RE-ONE": goto L_PH002_2011_1_RE_ONE; break;
                case "PH002-2011-2-CK-SU-ID": goto L_PH002_2011_2_CK_SU_ID; break;
                case "PH002-2903-REM-ONE": goto L_PH002_2903_REM_ONE; break;
                case "PH002-2902-REM-TWO": goto L_PH002_2902_REM_TWO; break;
                case "PH002-2900-BUILD-3-2-1": goto L_PH002_2900_BUILD_3_2_1; break;
                case "PH002-2021-DIGIT-1": goto L_PH002_2021_DIGIT_1; break;
                case "PH002-2022-DIGIT-2": goto L_PH002_2022_DIGIT_2; break;
                case "PH002-3010-FIRST-2": goto L_PH002_3010_FIRST_2; break;
                case "PH002-4010-FIRST-1": goto L_PH002_4010_FIRST_1; break;
                case "PH003-0500-REMOVE-SUFFIX": goto L_PH003_0500_REMOVE_SUFFIX; break;
                case "PH003-1000-CRUNCH-REM": goto L_PH003_1000_CRUNCH_REM; break;
                case "PH003-1020-CHECK-SPACE": goto L_PH003_1020_CHECK_SPACE; break;
                case "PH003-1010-CHECK-DUP": goto L_PH003_1010_CHECK_DUP; break;
                case "PH004-1000-CHECK-DEGREE": goto L_PH004_1000_CHECK_DEGREE; break;
                case "PH004-1100-PROCESS-DEGREE": goto L_PH004_1100_PROCESS_DEGREE; break;
                case "PH004-1200-COUNT-DIGITS": goto L_PH004_1200_COUNT_DIGITS; break;
                case "99100-PROCESS-INIT": goto L_99100_PROCESS_INIT; break;
                case "99200-PROCESS-MAIN": goto L_99200_PROCESS_MAIN; break;
                case "98100-SELECT-CLIENT": goto L_98100_SELECT_CLIENT; break;
                case "99500-OPEN-SPA-VIEW": goto L_99500_OPEN_SPA_VIEW; break;
                case "99600-FETCH-SPA-VIEW": goto L_99600_FETCH_SPA_VIEW; break;
                case "99900-CLOSE-SPA-VIEW": goto L_99900_CLOSE_SPA_VIEW; break;
                case "99610-POPULATE-SYSTEM-CODE": goto L_99610_POPULATE_SYSTEM_CODE; break;
                default: break;
            }
        #endregion

        #region MAIN-0329211337
        L_MAIN_0329211337:;
            Perform("PARA-0329211337-INIT", "PARA-0329211337-INIT-EXIT"); if (Control.ExitProgram) { return; }    //COBOL==> PERFORM PARA-0329211337-INIT THRU PARA-0329211337-INIT-EXIT
            Perform("PARA-0329211337", "PARA-0329211337-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM PARA-0329211337 THRU PARA-0329211337-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        #endregion MAIN-0329211337

        #region PARA-0329211337
        L_PARA_0329211337:;
            WS.FUNC_0329211337_ESC_FLAG.SetValue("N");                                                          //COBOL==> MOVE 'N' TO FUNC-0329211337-ESC-FLAG.
            ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
            ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            ///COMMENT: *******************************************************
            ///COMMENT:  ATTENTION:  THIS MODULE MUST BE COMPILED AND LINKED  *
            ///COMMENT:              USING THE "OLD" OPTIONS (NON-DLL OPTIONS)*
            ///COMMENT:              BECAUSE IT IS CALLED IN "COMPATIBILITY"  *
            ///COMMENT:              MODE BY CA GEN.                          *
            ///COMMENT: *******************************************************
            ///COMMENT: ****************************************************************
            ///COMMENT:                                                                *
            ///COMMENT:  INCLUDE NAME:  SWCSZG12.                                      *
            ///COMMENT:      EAB NAME:  SWEXGR05.                                      *
            ///COMMENT:   DESCRIPTION:  0000-DATABASE-ROUTINE.                          *
            ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                            *
            ///COMMENT:                                                                *
            ///COMMENT:      INCLUDES:  SWCSZG10  WORKING-STORAGE SECTION.             *
            ///COMMENT:                 SWAPH001  WORKING-STORAGE SECTION.             *
            ///COMMENT:                 SWCTWA    LINKAGE SECTION.                     *
            ///COMMENT:                 SWCSZG11  LINKAGE SECTION.                     *
            ///COMMENT:                 SWAPH002  PROCEDURE DIVISION.                  *
            ///COMMENT:                 SWAPH003  PROCEDURE DIVISION.                  *
            ///COMMENT:                 SWAPH004  PROCEDURE DIVISION.                  *
            ///COMMENT:                                                                *
            ///COMMENT:       ACTIONS:  RECEIVE SEARCH-TYPE-INDICATOR                  *
            ///COMMENT:                         PERCENT-OF-MATCH                       *
            ///COMMENT:                         SEARCH-SURNAME                         *
            ///COMMENT:                         SEARCH-FIRST-NAME                      *
            ///COMMENT:                         SEARCH-MIDDLE-INITIAL                  *
            ///COMMENT:                         SEARCH-SEX                             *
            ///COMMENT:                         SEARCH-AGE                             *
            ///COMMENT:                         SEARCH-DATE-OF-BIRTH                   *
            ///COMMENT:                         SEARCH-SOCIAL-SECURITY-NUMBER          *
            ///COMMENT:                         NEXT-READLOGICAL-KEY.                  *
            ///COMMENT:                 READVALUE CLIENT-DBF USING                     *
            ///COMMENT: *** SOC SEC NUM ------- 1.  IF SEARCH-TYPE-INDICATOR = '1',    *
            ///COMMENT:                                 CLIENT-SSN-KEY.                *
            ///COMMENT: ** EXACT   NAME ------- 2.  IF SEARCH-TYPE-INDICATOR = '2'     *
            ///COMMENT:                                AND PERCENT-OF-MATCH  = 100,    *
            ///COMMENT:                                 CLIENT-NAME-KEY.               *
            ///COMMENT: * PHONETIC NAME ------- 3.  IF SEARCH-TYPE-INDICATOR = '2'     *
            ///COMMENT:                                AND PERCENT-OF-MATCH  < 100,    *
            ///COMMENT:                                 PHONETIC-KEY.                  *
            ///COMMENT:                 RETURN  UPTO 125 OCCURRANCES OF MATCHED        *
            ///COMMENT:                         CLIENT-SURNAME                         *
            ///COMMENT:                         CLIENT-FIRST-NAME                      *
            ///COMMENT:                         CLIENT-MIDDLE-INITIAL                  *
            ///COMMENT:                         CLIENT-SOCIAL-SECURITY-NUMBER          *
            ///COMMENT:                         CLIENT-DATE-OF-BIRTH                   *
            ///COMMENT:                         CLIENT-SEX                             *
            ///COMMENT:                         CLIENT-SYSTEM-PARTICIPATION-INDICATORS.*
            ///COMMENT:                                1 OCCURRANCE  OF                *
            ///COMMENT:                         ABEND-FIELDS                           *
            ///COMMENT:                         NEXT-READLOGICAL-KEY, IF AT LEAST      *
            ///COMMENT:                             1 MORE MATCH RECORD EXISTS.        *
            ///COMMENT:                                                                *
            ///COMMENT:       CREATED:  01-AUG-95.                                     *
            ///COMMENT:            BY:  CTG/CEB.                                       *
            ///COMMENT:                                                                *
            ///COMMENT: **************************************************************
            ///COMMENT: ** MAINTENANCE ************************************************
            ///COMMENT:                       CHANGE
            ///COMMENT:    DATE      AUTHOR   CONTROL DESCRIPTION
            ///COMMENT:  ---------- --------- ------- ----------------------------------
            ///COMMENT:  03/28/2014 G.BRAMSON CQ35825 ADABAS TO DB2 FOR KEES PHASE 3
            ///COMMENT:  .......... ......... ....... KEEP ADABAS ERROR RESPONSE FIELDS.
            ///COMMENT: ****************************************************************
            if (returnLabel == "PARA-0329211337") { return; }  //Check for pass through to next method
        #endregion PARA-0329211337

        #region 0000-DATABASE-ROUTINE
        L_0000_DATABASE_ROUTINE:;
            WS.MV_ABEND_FIELDS.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO MV-ABEND-FIELDS.
                                                                                                                //COMMENT: ** GQB 03/28/2014 - ADDED NEW CODE FOR DB2
            WS.WS9_MSG_X.SetValue("*SWEXGR05*");                                                                //COBOL==> MOVE '*SWEXGR05*' TO WS9-MSG-X.
            SetHandleCondtions(HandleCondition.ERROR, "9999-CICS-ABEND");                                       //COBOL==> EXEC CICS HANDLE CONDITION ERROR ( 9999-CICS-ABEND ) END-EXEC.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: *** MOVE IMPORT FIELDS TO WORKING-STORAGE FIELDS.
                                                                                                                //COMMENT: ****************************************************************
            WS.IMP_CLIENT_DATA.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO IMP-CLIENT-DATA.
            WS.IMP_SEARCH_TYPE.SetValue(LS.FLAG_0004);                                                          //COBOL==> MOVE FLAG-0004 TO IMP-SEARCH-TYPE.
            WS.IMP_MATCH_PERCENT.SetValue(LS.PERCENTAGE_0002);                                                  //COBOL==> MOVE PERCENTAGE-0002 TO IMP-MATCH-PERCENT.
            WS.IMP_CLIENT_LAST_NAME.SetValue(LS.LAST_NAME_0003);                                                //COBOL==> MOVE LAST-NAME-0003 TO IMP-CLIENT-LAST-NAME.
            WS.IMP_CLIENT_FIRST_NAME.SetValue(LS.FIRST_NAME_0003);                                              //COBOL==> MOVE FIRST-NAME-0003 TO IMP-CLIENT-FIRST-NAME.
            WS.IMP_CLIENT_INITIAL.SetValue(LS.MIDDLE_INITIAL_0003);                                             //COBOL==> MOVE MIDDLE-INITIAL-0003 TO IMP-CLIENT-INITIAL.
            WS.IMP_CLIENT_DATE_OF_BIRTH.SetValue(LS.DOB_0003);                                                  //COBOL==> MOVE DOB-0003 TO IMP-CLIENT-DATE-OF-BIRTH.
            WS.IMP_CLIENT_SEX.SetValue(LS.SEX_0003);                                                            //COBOL==> MOVE SEX-0003 TO IMP-CLIENT-SEX.
                                                                                                                //COMMENT: *** NOT PASSED ************* TO IMP-CLIENT-AGE.
            WS.IMP_CLIENT_SOC_SEC_NUM_X9.SetValue(LS.SSN_0003);                                                 //COBOL==> MOVE SSN-0003 TO IMP-CLIENT-SOC-SEC-NUM-X9.
            WS.IMP_CLIENT_KEY.SetValue(LS.UNIQUE_KEY_0001);                                                     //COBOL==> MOVE UNIQUE-KEY-0001 TO IMP-CLIENT-KEY.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR NAME SEARCH
            if ((WS.IMP_SEARCH_NAME.Value)
             && (WS.IMP_MATCH_EXACT.Value))                       //COBOL==> IF IMP-SEARCH-NAME AND IMP-MATCH-EXACT
            {
                Control.Call("SWADDRES", WS.ADA1_ISN_BUF, WS.PRF_POINTER_CLIENT_DBF); if (Control.ExitProgram) return;  //COBOL==> CALL 'SWADDRES' USING ADA1-ISN-BUF , PRF-POINTER-CLIENT-DBF
                LS.PRF_CLIENTS.SetBufferReference(WS.PRF_POINTER_CLIENT_DBF);                                       //COBOL==> SET ADDRESS OF PRF-CLIENTS TO PRF-POINTER-CLIENT-DBF
                WS.ADA1_ISN_BUF.SetValueAll(LOW_VALUES);                                                            //COBOL==> MOVE LOW-VALUES TO ADA1-ISN-BUF
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR PHONETIC SEARCH
            if ((WS.IMP_SEARCH_NAME.Value)
             && (!(WS.IMP_MATCH_EXACT.Value)))                   //COBOL==> IF IMP-SEARCH-NAME AND NOT IMP-MATCH-EXACT
            {
                Control.Call("SWADDRES", WS.ADA2_ISN_BUF, WS.PRF_POINTER_CLIENT_DBF); if (Control.ExitProgram) return;  //COBOL==> CALL 'SWADDRES' USING ADA2-ISN-BUF , PRF-POINTER-CLIENT-DBF
                LS.PRF_P_CLIENTS.SetBufferReference(WS.PRF_POINTER_CLIENT_DBF);                                     //COBOL==> SET ADDRESS OF PRF-P-CLIENTS TO PRF-POINTER-CLIENT-DBF
                WS.ADA2_ISN_BUF.SetValueAll(LOW_VALUES);                                                            //COBOL==> MOVE LOW-VALUES TO ADA2-ISN-BUF
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR SSN SEARCH
            if (WS.IMP_SEARCH_SSN.Value)                                                                        //COBOL==> IF IMP-SEARCH-SSN
            {
                Control.Call("SWADDRES", WS.ADA3_ISN_BUF, WS.PRF_POINTER_CLIENT_DBF); if (Control.ExitProgram) return;  //COBOL==> CALL 'SWADDRES' USING ADA3-ISN-BUF , PRF-POINTER-CLIENT-DBF
                LS.PRF_S_CLIENTS.SetBufferReference(WS.PRF_POINTER_CLIENT_DBF);                                     //COBOL==> SET ADDRESS OF PRF-S-CLIENTS TO PRF-POINTER-CLIENT-DBF
                WS.ADA3_ISN_BUF.SetValueAll(LOW_VALUES);                                                            //COBOL==> MOVE LOW-VALUES TO ADA3-ISN-BUF
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:     EXEC CICS ADDRESS
                                                                                                                //COMMENT:               TWA (ADDRESS OF TWA)
                                                                                                                //COMMENT:     END-EXEC.
            WS.MV_CCYYMMDD_X8.SetValue(LS.DATE_0005XX);                                                         //COBOL==> MOVE DATE-0005XX TO MV-CCYYMMDD-X8.
                                                                                                                //COMMENT: ** GQB 04/01/2014 ** NOT PASSED ************* TO IMP-CLIENT-AGE.
                                                                                                                //COMMENT:     IF IMP-CLIENT-AGE-X3 NOT NUMERIC OR
                                                                                                                //COMMENT:        IMP-CLIENT-AGE-X3 NOT > '000'
                                                                                                                //COMMENT:         MOVE SPACES TO IMP-CLIENT-AGE-X3
                                                                                                                //COMMENT:     END-IF.
            if ((!(WS.IMP_CLIENT_DATE_OF_BIRTH_X8.IsNumericValue()))
             || (WS.IMP_CLIENT_DATE_OF_BIRTH_X8.IsLessThanOrEqualTo("00000000")))  //COBOL==> IF IMP-CLIENT-DATE-OF-BIRTH-X8 NOT NUMERIC OR IMP-CLIENT-DATE-OF-BIRTH-X8 NOT > '00000000'
            {
                WS.IMP_CLIENT_DATE_OF_BIRTH_X8.SetValueWithSpaces();                                                //COBOL==> MOVE SPACE TO IMP-CLIENT-DATE-OF-BIRTH-X8
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 04/01/2014 ** NOT PASSED ************* TO IMP-CLIENT-AGE.
                                                                                                                //COMMENT:     IF IMP-CLIENT-AGE-X3 NUMERIC
                                                                                                                //COMMENT:         PERFORM
                                                                                                                //COMMENT:             COMPUTE MV-WORK-AGE =  IMP-CLIENT-AGE * .2
                                                                                                                //COMMENT:             MOVE    MV-WORK-AGE TO MV-WORK-AGE-NO-DEC
                                                                                                                //COMMENT:             IF MV-WORK-AGE > MV-WORK-AGE-NO-DEC
                                                                                                                //COMMENT:                 COMPUTE MV-AGE-RANGE = MV-WORK-AGE-NO-DEC + 1
                                                                                                                //COMMENT:             ELSE
                                                                                                                //COMMENT:                 MOVE    MV-WORK-AGE-NO-DEC TO MV-AGE-RANGE
                                                                                                                //COMMENT:             END-IF
                                                                                                                //COMMENT:             IF MV-AGE-RANGE > IMP-CLIENT-AGE
                                                                                                                //COMMENT:                 MOVE    ZERO TO MV-AGE-LOW
                                                                                                                //COMMENT:             ELSE
                                                                                                                //COMMENT:                 COMPUTE MV-AGE-LOW = IMP-CLIENT-AGE -
                                                                                                                //COMMENT:                                      MV-AGE-RANGE
                                                                                                                //COMMENT:             END-IF
                                                                                                                //COMMENT:             IF IMP-CLIENT-AGE > 150
                                                                                                                //COMMENT:                 MOVE    IMP-CLIENT-AGE TO MV-AGE-HIGH
                                                                                                                //COMMENT:             ELSE
                                                                                                                //COMMENT:                 COMPUTE MV-AGE-HIGH = IMP-CLIENT-AGE +
                                                                                                                //COMMENT:                                       MV-AGE-RANGE
                                                                                                                //COMMENT:             END-IF
                                                                                                                //COMMENT:         END-PERFORM
                                                                                                                //COMMENT:     END-IF.
            WS.MV_CLIENT_ARRAY.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO MV-CLIENT-ARRAY.
            WS.MV_CLIENT_ENTRY_NUM.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO MV-CLIENT-ENTRY-NUM.
            WS.PRF_SUB.SetValue(1);                                                                             //COBOL==> MOVE 1 TO PRF-SUB.
            if ((WS.IMP_SEARCH_NAME.Value)
             && (WS.IMP_MATCH_EXACT.Value))                       //COBOL==> IF IMP-SEARCH-NAME AND IMP-MATCH-EXACT
            {
                Perform("1000-GET-EXACT-NAME-LIST", "1000-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 1000-GET-EXACT-NAME-LIST THRU 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if ((WS.IMP_SEARCH_NAME.Value)
             && (!(WS.IMP_MATCH_EXACT.Value)))                   //COBOL==> IF IMP-SEARCH-NAME AND NOT IMP-MATCH-EXACT
            {
                Perform("1005-GET-PHONETIC-NAME-LIST", "1005-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM 1005-GET-PHONETIC-NAME-LIST THRU 1005-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.IMP_SEARCH_SSN.Value)                                                                        //COBOL==> IF IMP-SEARCH-SSN
            {
                Perform("1010-GET-SSN-NAME-LIST", "1010-EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 1010-GET-SSN-NAME-LIST THRU 1010-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: *** MOVE WORKING-STORAGE FIELDS TO EXPORT FIELDS.
                                                                                                                //COMMENT: ****************************************************************
            if (WS.MV_CLIENT_ENTRY_NUM.IsLessThanOrEqualTo(WS.MC_CLIENT_ENTRY_EXP))                             //COBOL==> IF MV-CLIENT-ENTRY-NUM NOT > MC-CLIENT-ENTRY-EXP
            {
                LS.GROUP_EXPORT_0001MA.SetValue(WS.MV_CLIENT_ENTRY_NUM);                                            //COBOL==> MOVE MV-CLIENT-ENTRY-NUM TO GROUP-EXPORT-0001MA
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.GROUP_EXPORT_0001MA.SetValue(WS.MC_CLIENT_ENTRY_EXP);                                            //COBOL==> MOVE MC-CLIENT-ENTRY-EXP TO GROUP-EXPORT-0001MA
            }                                                                                                   //COBOL==> END-IF.
            for (WS.MV_CLIENT_ENTRY_SUB.SetValue(1); (!((WS.MV_CLIENT_ENTRY_SUB.IsGreaterThan(WS.MC_CLIENT_ENTRY_EXP)) || (WS.MV_CLIENT_ENTRY_SUB.IsGreaterThan(WS.MV_CLIENT_ENTRY_NUM)))); WS.MV_CLIENT_ENTRY_SUB.Add(1))  //COBOL==> PERFORM 2000-SET-ALIAS-IND THRU 2000-EXIT VARYING MV-CLIENT-ENTRY-SUB FROM 1 BY 1 UNTIL MV-CLIENT-ENTRY-SUB > MC-CLIENT-ENTRY-EXP OR MV-CLIENT-ENTRY-SUB > MV-CLIENT-ENTRY-NUM.
            {
                Perform("2000-SET-ALIAS-IND", "2000-EXIT"); if (Control.ExitProgram) { return; }
            }
            for (WS.MV_CLIENT_ENTRY_SUB.SetValue(1); (!((WS.MV_CLIENT_ENTRY_SUB.IsGreaterThan(WS.MC_CLIENT_ENTRY_EXP)) || (WS.MV_CLIENT_ENTRY_SUB.IsGreaterThan(WS.MV_CLIENT_ENTRY_NUM)))); WS.MV_CLIENT_ENTRY_SUB.Add(1))  //COBOL==> PERFORM VARYING MV-CLIENT-ENTRY-SUB FROM 1 BY 1 UNTIL MV-CLIENT-ENTRY-SUB > MC-CLIENT-ENTRY-EXP OR MV-CLIENT-ENTRY-SUB > MV-CLIENT-ENTRY-NUM
            {
                LS.NUMBER_0008[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_NUMBER_X10[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-NUMBER-X10 ( MV-CLIENT-ENTRY-SUB ) TO NUMBER-0008 ( MV-CLIENT-ENTRY-SUB )
                LS.LAST_NAME_0008[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_LAST_NAME[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-LAST-NAME ( MV-CLIENT-ENTRY-SUB ) TO LAST-NAME-0008 ( MV-CLIENT-ENTRY-SUB )
                LS.FIRST_NAME_0008[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_FIRST_NAME[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-FIRST-NAME ( MV-CLIENT-ENTRY-SUB ) TO FIRST-NAME-0008 ( MV-CLIENT-ENTRY-SUB )
                LS.MIDDLE_INITIAL_0008[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_INITIAL[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-INITIAL ( MV-CLIENT-ENTRY-SUB ) TO MIDDLE-INITIAL-0008 ( MV-CLIENT-ENTRY-SUB )
                LS.DOB_0008XX[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue("00000000");                                 //COBOL==> MOVE '00000000' TO DOB-0008XX ( MV-CLIENT-ENTRY-SUB )
                if ((WS.MV_CLIENT_DATE_OF_BIRTH_X8[WS.MV_CLIENT_ENTRY_SUB.AsInt()].IsNumericValue())
             && (WS.MV_CLIENT_DATE_OF_BIRTH_X8[WS.MV_CLIENT_ENTRY_SUB.AsInt()].IsGreaterThan("00000000")))  //COBOL==> IF MV-CLIENT-DATE-OF-BIRTH-X8 ( MV-CLIENT-ENTRY-SUB ) NUMERIC AND MV-CLIENT-DATE-OF-BIRTH-X8 ( MV-CLIENT-ENTRY-SUB ) > '00000000'
                {
                    LS.DOB_0008XX[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_DATE_OF_BIRTH_X8[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-DATE-OF-BIRTH-X8 ( MV-CLIENT-ENTRY-SUB ) TO DOB-0008XX ( MV-CLIENT-ENTRY-SUB )
                }                                                                                                   //COBOL==> END-IF
                LS.SEX_0008[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_SEX[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-SEX ( MV-CLIENT-ENTRY-SUB ) TO SEX-0008 ( MV-CLIENT-ENTRY-SUB )
                LS.SSN_0008[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue("000000000");                                  //COBOL==> MOVE '000000000' TO SSN-0008 ( MV-CLIENT-ENTRY-SUB )
                if ((WS.MV_CLIENT_SOC_SEC_NUM_X9[WS.MV_CLIENT_ENTRY_SUB.AsInt()].IsNumericValue())
             && (WS.MV_CLIENT_SOC_SEC_NUM_X9[WS.MV_CLIENT_ENTRY_SUB.AsInt()].IsGreaterThan("000000000")))  //COBOL==> IF MV-CLIENT-SOC-SEC-NUM-X9 ( MV-CLIENT-ENTRY-SUB ) NUMERIC AND MV-CLIENT-SOC-SEC-NUM-X9 ( MV-CLIENT-ENTRY-SUB ) > '000000000'
                {
                    LS.SSN_0008[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_SOC_SEC_NUM_X9[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-SOC-SEC-NUM-X9 ( MV-CLIENT-ENTRY-SUB ) TO SSN-0008 ( MV-CLIENT-ENTRY-SUB )
                }                                                                                                   //COBOL==> END-IF
                LS.FLAG_0009[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_SYS_PART_AE[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-SYS-PART-AE ( MV-CLIENT-ENTRY-SUB ) TO FLAG-0009 ( MV-CLIENT-ENTRY-SUB )
                LS.FLAG_0010[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_SYS_PART_CSE[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-SYS-PART-CSE ( MV-CLIENT-ENTRY-SUB ) TO FLAG-0010 ( MV-CLIENT-ENTRY-SUB )
                LS.FLAG_0011[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_SYS_PART_KANPAY[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-SYS-PART-KANPAY ( MV-CLIENT-ENTRY-SUB ) TO FLAG-0011 ( MV-CLIENT-ENTRY-SUB )
                LS.FLAG_0012[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_CLIENT_SYS_PART_KSCARES[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-CLIENT-SYS-PART-KSCARES ( MV-CLIENT-ENTRY-SUB ) TO FLAG-0012 ( MV-CLIENT-ENTRY-SUB )
                LS.FLAG_0013[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue(WS.MV_ALIAS_IND[WS.MV_CLIENT_ENTRY_SUB.AsInt()]);  //COBOL==> MOVE MV-ALIAS-IND ( MV-CLIENT-ENTRY-SUB ) TO FLAG-0013 ( MV-CLIENT-ENTRY-SUB )
            }                                                                                                   //COBOL==> END-PERFORM.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: *** MOVE NEXT KEY TO EXPORT FIELD.
                                                                                                                //COMMENT: ****************************************************************
            if (WS.MV_CLIENT_ENTRY_NUM.IsEqualTo(WS.MC_CLIENT_ENTRY_MAX))                                       //COBOL==> IF MV-CLIENT-ENTRY-NUM EQUAL MC-CLIENT-ENTRY-MAX
            {
                LS.UNIQUE_KEY_0006.SetValue(WS.MV_CLIENT_KEY[WS.MC_CLIENT_ENTRY_MAX.AsInt()]);                      //COBOL==> MOVE MV-CLIENT-KEY ( MC-CLIENT-ENTRY-MAX ) TO UNIQUE-KEY-0006
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: ****************************************************************
            goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT.
        ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2
        #endregion 0000-DATABASE-ROUTINE

        #region 1000-GET-EXACT-NAME-LIST
        L_1000_GET_EXACT_NAME_LIST:;
            WS.ADA1_NAME_KEY.ResetToInitialValue();                                                             //COBOL==> INITIALIZE ADA1-NAME-KEY.
                                                                                                                //COMMENT: ** GQB 07/09/2014 - INITIALIZE IMP-CLIENT-KEY (NOT IN USE)
            WS.IMP_CLIENT_KEY.ResetToInitialValue();                                                            //COBOL==> INITIALIZE IMP-CLIENT-KEY.
            if (!(WS.IMP_CLIENT_KEY.IsSpaces()))                                                                //COBOL==> IF IMP-CLIENT-KEY NOT = SPACES
            {
                WS.ADA1_NAME_KEY.SetValue(WS.IMP_CLIENT_KEY);                                                       //COBOL==> MOVE IMP-CLIENT-KEY TO ADA1-NAME-KEY
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.ADA1_CLIENT_NAME.SetValue(WS.IMP_CLIENT_NAME);                                                   //COBOL==> MOVE IMP-CLIENT-NAME TO ADA1-CLIENT-NAME
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 04/01/2014 - MOVE KEY VALUES TO DB2 KEYS AND OPEN CURSOR
            WS.DBK1_CLIENT_NAME.SetValue(WS.ADA1_CLIENT_NAME);                                                  //COBOL==> MOVE ADA1-CLIENT-NAME TO DBK1-CLIENT-NAME.
            WS.DBK1_SSN.SetValue(WS.ADA1_SSN);                                                                  //COBOL==> MOVE ADA1-SSN TO DBK1-SSN.
            WS.WS9_DATE_ADA.SetValue(WS.ADA1_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA1-DATE-OF-BIRTH TO WS9-DATE-ADA.
            Perform("91100-CONVERT-DATE-ADA-TO-DB2", "91100-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2.
            WS.DBK1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                    //COBOL==> MOVE WS9-DATE-DB2 TO DBK1-DATE-OF-BIRTH.
            WS.DBK1_GENDER.SetValue(WS.ADA1_SEX);                                                               //COBOL==> MOVE ADA1-SEX TO DBK1-GENDER.
            WS.DBK1_CLIENT_NUMBER.SetValue(WS.ADA1_CLIENT_NUMBER);                                              //COBOL==> MOVE ADA1-CLIENT-NUMBER TO DBK1-CLIENT-NUMBER.
            Perform("5100-OPEN-NAME-VIEW", "5100-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 5100-OPEN-NAME-VIEW THRU 5100-EXIT.
            ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2
            if (returnLabel == "1000-GET-EXACT-NAME-LIST") { return; }  //Check for pass through to next method
        #endregion 1000-GET-EXACT-NAME-LIST

        #region 1000-GET-EXACT-NAME-LOOP
        L_1000_GET_EXACT_NAME_LOOP:;
            //COMMENT: ** GQB 04/01/2014 - FETCH NEXT ROW FROM DB2
            if (LS.PRF_REC_LENGTH[WS.PRF_SUB.AsInt()].IsEqualTo(0))                                             //COBOL==> IF PRF-REC-LENGTH ( PRF-SUB ) = ZERO
            {
                if (WS.SW1_ERR_NO.Value)                                                                            //COBOL==> IF SW1-ERR-NO
                {
                    Perform("5200-FETCH-NAME-VIEW", "5200-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 5200-FETCH-NAME-VIEW THRU 5200-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                Perform("5300-CLOSE-NAME-VIEW", "5300-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 5300-CLOSE-NAME-VIEW THRU 5300-EXIT
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                             //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue(WS.WS9_ADA_FILE_ACTION);                                             //COBOL==> MOVE WS9-ADA-FILE-ACTION TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                             //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if ((WS.SW1_EOF_YES.Value)
             || (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThanOrEqualTo(WS.MC_CLIENT_ENTRY_MAX)))  //COBOL==> IF SW1-EOF-YES OR MV-CLIENT-ENTRY-NUM NOT < MC-CLIENT-ENTRY-MAX
            {
                Perform("5300-CLOSE-NAME-VIEW", "5300-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 5300-CLOSE-NAME-VIEW THRU 5300-EXIT
                if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                             //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                    WS.MV_ADA_FILE_ACTION.SetValue(WS.WS9_ADA_FILE_ACTION);                                             //COBOL==> MOVE WS9-ADA-FILE-ACTION TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                             //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                }                                                                                                   //COBOL==> END-IF
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_RECORD_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                     //COBOL==> MOVE CL1-CLIENT-NAME TO MV-RECORD-NAME.
            if (!(WS.MV_RECORD_LAST_NAME.IsEqualTo(WS.IMP_CLIENT_LAST_NAME)))                                   //COBOL==> IF MV-RECORD-LAST-NAME NOT = IMP-CLIENT-LAST-NAME
            {
                Perform("5300-CLOSE-NAME-VIEW", "5300-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 5300-CLOSE-NAME-VIEW THRU 5300-EXIT
                if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                             //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                    WS.MV_ADA_FILE_ACTION.SetValue(WS.WS9_ADA_FILE_ACTION);                                             //COBOL==> MOVE WS9-ADA-FILE-ACTION TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                             //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                }                                                                                                   //COBOL==> END-IF
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.IMP_CLIENT_FIRST_NAME_1.IsGreaterThan(SPACES))                                               //COBOL==> IF IMP-CLIENT-FIRST-NAME-1 > SPACE
            {
                if (WS.IMP_CLIENT_FIRST_NAME_2.IsGreaterThan(SPACES))                                               //COBOL==> IF IMP-CLIENT-FIRST-NAME-2 > SPACE
                {
                    if (!(WS.IMP_CLIENT_FIRST_NAME.IsEqualTo(WS.MV_RECORD_FIRST_NAME)))                                 //COBOL==> IF IMP-CLIENT-FIRST-NAME NOT = MV-RECORD-FIRST-NAME
                    {
                        goto L_1000_GET_EXACT_NAME_NEXT;                                                                    //COBOL==> GO TO 1000-GET-EXACT-NAME-NEXT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (!(WS.IMP_CLIENT_FIRST_NAME_1.IsEqualTo(WS.MV_RECORD_FIRST_NAME_1)))                             //COBOL==> IF IMP-CLIENT-FIRST-NAME-1 NOT = MV-RECORD-FIRST-NAME-1
                    {
                        goto L_1000_GET_EXACT_NAME_NEXT;                                                                    //COBOL==> GO TO 1000-GET-EXACT-NAME-NEXT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if ((WS.IMP_CLIENT_SOC_SEC_NUM_X9.IsNumericValue())
             && (!(WS.IMP_CLIENT_SOC_SEC_NUM.IsEqualTo(WS.CL1_SSN))))  //COBOL==> IF IMP-CLIENT-SOC-SEC-NUM-X9 NUMERIC AND IMP-CLIENT-SOC-SEC-NUM NOT = CL1-SSN
            {
                goto L_1000_GET_EXACT_NAME_NEXT;                                                                    //COBOL==> GO TO 1000-GET-EXACT-NAME-NEXT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 04/01/2014 - CONVERT DATE OF BIRTH AND SEX FROM DB2
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            Perform("91200-CONVERT-DATE-DB2-TO-ADA", "91200-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.MV_DATE_OF_BIRTH_SEX.SetValue(WS.WS9_DATE_ADA);                                                  //COBOL==> MOVE WS9-DATE-ADA TO MV-DATE-OF-BIRTH-SEX.
            WS.MV_SEX.SetValue(WS.CL1_GENDER);                                                                  //COBOL==> MOVE CL1-GENDER TO MV-SEX.
            if ((((WS.IMP_CLIENT_INITIAL.IsGreaterThan(SPACES))
             && (!(WS.IMP_CLIENT_INITIAL.IsEqualTo(WS.MV_RECORD_INITIAL))))
             || ((WS.IMP_CLIENT_SEX.IsGreaterThan(SPACES))
             && (!(WS.IMP_CLIENT_SEX.IsEqualTo(WS.MV_SEX)))))
             || ((WS.IMP_CLIENT_DATE_OF_BIRTH_X8.IsNumericValue())
             && (!(WS.IMP_CLIENT_DATE_OF_BIRTH_X8.IsEqualTo(WS.MV_DATE_OF_BIRTH_X8)))))  //COBOL==> IF ( IMP-CLIENT-INITIAL > SPACE AND IMP-CLIENT-INITIAL NOT = MV-RECORD-INITIAL ) OR ( IMP-CLIENT-SEX > SPACE AND IMP-CLIENT-SEX NOT = MV-SEX ) OR ( IMP-CLIENT-DATE-OF-BIRTH-X8 NUMERIC AND IMP-CLIENT-DATE-OF-BIRTH-X8 NOT = MV-DATE-OF-BIRTH-X8 )
            {
                goto L_1000_GET_EXACT_NAME_NEXT;                                                                    //COBOL==> GO TO 1000-GET-EXACT-NAME-NEXT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 04/01/2014 ** NOT PASSED ************* TO IMP-CLIENT-AGE.
                                                                                                                //COMMENT:     IF IMP-CLIENT-AGE-X3 NUMERIC
                                                                                                                //COMMENT:         PERFORM
                                                                                                                //COMMENT:             IF MV-DATE-OF-BIRTH-X8 NUMERIC AND
                                                                                                                //COMMENT:                MV-DATE-OF-BIRTH-X8 > '00000000'
                                                                                                                //COMMENT:                 COMPUTE MV-AGE = MV-CURRENT-CCYY - MV-BIRTH-CCYY
                                                                                                                //COMMENT:                 IF MV-CURRENT-MMDD < MV-BIRTH-MMDD
                                                                                                                //COMMENT:                     COMPUTE MV-AGE = MV-AGE - 1
                                                                                                                //COMMENT:                 END-IF
                                                                                                                //COMMENT:                 IF MV-AGE < MV-AGE-LOW  OR
                                                                                                                //COMMENT:                    MV-AGE > MV-AGE-HIGH
                                                                                                                //COMMENT:                     GO TO 1000-GET-EXACT-NAME-NEXT
                                                                                                                //COMMENT:                 END-IF
                                                                                                                //COMMENT:             ELSE
                                                                                                                //COMMENT:                 GO TO 1000-GET-EXACT-NAME-NEXT
                                                                                                                //COMMENT:             END-IF
                                                                                                                //COMMENT:         END-PERFORM
                                                                                                                //COMMENT:     END-IF.
            WS.MV_CLIENT_ENTRY_NUM.Add(1);                                                                      //COBOL==> ADD 1 TO MV-CLIENT-ENTRY-NUM.
                                                                                                                //COMMENT: ** GQB 07/24/2014 - CODE FOR CLIENT POINTER INFORMATION
                                                                                                                //COMMENT: **                  SWCSZG87 AND SWCSZG88 MUST BE INCLUDED
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                            //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO DBK9-CLIENT-NUMBER.
            WS.DBK9_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO DBK9-CLIENT-NAME.
            WS.DBK9_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO DBK9-SSN.
            WS.WS9_CLIENT_POINTER.ResetToInitialValue();                                                        //COBOL==> INITIALIZE WS9-CLIENT-POINTER.
            WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL1_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL1-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG.
            WS.SW9_SELECT_CLIENT_NO.SetValue(true);                                                             //COBOL==> SET SW9-SELECT-CLIENT-NO TO TRUE.
            Perform("99000-CLIENT-POINTER-ROUTINE", "99000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM 99000-CLIENT-POINTER-ROUTINE.
                                                                                                                  //COMMENT: ** GQB 07/09/2014 - IGNORE ERRORS AND PASS CLIENT POINTER
                                                                                                                  //COMMENT: **                  TO ENABLE CONTINUATION OF THE LIST
                                                                                                                  //COMMENT:     IF NOT WS9-ABEND-TYPE-NONE
                                                                                                                  //COMMENT:        SET SW1-ERR-YES TO TRUE
                                                                                                                  //COMMENT:        PERFORM 5300-CLOSE-NAME-VIEW THRU 5300-EXIT
                                                                                                                  //COMMENT:        MOVE 'A'                 TO MV-ABEND-TYPE
                                                                                                                  //COMMENT:        MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                                                                                                                  //COMMENT:        MOVE 'AV'                TO MV-ADA-FILE-ACTION
                                                                                                                  //COMMENT:        MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                                                                                                                  //COMMENT:        GO TO 1000-EXIT
                                                                                                                  //COMMENT:     END-IF.
            WS.MV_CLIENT_POINTER.SetValue(WS.WS9_CLIENT_POINTER);                                               //COBOL==> MOVE WS9-CLIENT-POINTER TO MV-CLIENT-POINTER.
            WS.MV_CLIENT_NUMBER[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.MV_CLIENT_ID);                      //COBOL==> MOVE MV-CLIENT-ID TO MV-CLIENT-NUMBER ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_NAME[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.CL1_CLIENT_NAME);                     //COBOL==> MOVE CL1-CLIENT-NAME TO MV-CLIENT-NAME ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_DATE_OF_BIRTH_SEX[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.MV_DATE_OF_BIRTH_SEX);   //COBOL==> MOVE MV-DATE-OF-BIRTH-SEX TO MV-CLIENT-DATE-OF-BIRTH-SEX ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_SOC_SEC_NUM[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.CL1_SSN);                      //COBOL==> MOVE CL1-SSN TO MV-CLIENT-SOC-SEC-NUM ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_SYSTEM_PARTICIPATION[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.MV_SYSTEM_PARTICIPATION);  //COBOL==> MOVE MV-SYSTEM-PARTICIPATION TO MV-CLIENT-SYSTEM-PARTICIPATION ( MV-CLIENT-ENTRY-NUM ) .
                                                                                                                     //COMMENT: ** GQB 04/01/2014 - COLLECT AND MOVE NAME KEY DATA
            WS.ADA1_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO ADA1-CLIENT-NAME.
            WS.ADA1_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO ADA1-SSN.
            WS.ADA1_DATE_OF_BIRTH.SetValue(WS.MV_DATE_OF_BIRTH_X8);                                             //COBOL==> MOVE MV-DATE-OF-BIRTH-X8 TO ADA1-DATE-OF-BIRTH.
            WS.ADA1_SEX.SetValue(WS.CL1_GENDER);                                                                //COBOL==> MOVE CL1-GENDER TO ADA1-SEX.
            WS.ADA1_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                              //COBOL==> MOVE MV-CLIENT-POINTER TO ADA1-CLIENT-POINTER.
            WS.MV_CLIENT_KEY[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.ADA1_NAME_KEY);                        //COBOL==> MOVE ADA1-NAME-KEY TO MV-CLIENT-KEY ( MV-CLIENT-ENTRY-NUM ) .
            ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2
            if (returnLabel == "1000-GET-EXACT-NAME-LOOP") { return; }  //Check for pass through to next method
        #endregion 1000-GET-EXACT-NAME-LOOP

        #region 1000-GET-EXACT-NAME-NEXT
        L_1000_GET_EXACT_NAME_NEXT:;
            WS.PRF_SUB.Add(1);                                                                                  //COBOL==> ADD 1 TO PRF-SUB.
            if ((WS.PRF_SUB.IsLessThan(11))
             && (LS.PRF_REC_LENGTH[WS.PRF_SUB.AsInt()].IsGreaterThan(ZEROS)))  //COBOL==> IF PRF-SUB < 11 AND PRF-REC-LENGTH ( PRF-SUB ) > ZERO
            {
                //COMMENT: ** GQB 04/01/2014 - CONVERTED TO DB2
                WS.WS9_ADA_RESPONSE_CD.SetValue(LS.PRF_RESPONSE_CODE[WS.PRF_SUB.AsInt()]);                          //COBOL==> MOVE PRF-RESPONSE-CODE ( PRF-SUB ) TO WS9-ADA-RESPONSE-CD
                                                                                                                    //COMMENT:        MOVE PRF-ISN           (PRF-SUB) TO ISN149A
                                                                                                                    //COMMENT:        MOVE PRF-ISN-QUANTITY  (PRF-SUB) TO ISN-QUANTITY149A
                WS.ADA1_NAME_KEY.SetValue(LS.PRF_RECORD[WS.PRF_SUB.AsInt()]);                                       //COBOL==> MOVE PRF-RECORD ( PRF-SUB ) TO ADA1-NAME-KEY
                                                                                                                    //COMMENT: ** GQB 04/01/2014 - COLLECT AND MOVE NAME KEY DATA
                WS.CL1_CLIENT_NAME.SetValue(WS.ADA1_CLIENT_NAME);                                                   //COBOL==> MOVE ADA1-CLIENT-NAME TO CL1-CLIENT-NAME
                WS.CL1_SSN.SetValue(WS.ADA1_SSN);                                                                   //COBOL==> MOVE ADA1-SSN TO CL1-SSN
                WS.WS9_DATE_ADA.SetValue(WS.ADA1_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA1-DATE-OF-BIRTH TO WS9-DATE-ADA
                Perform("91100-CONVERT-DATE-ADA-TO-DB2", "91100-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2
                WS.CL1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                     //COBOL==> MOVE WS9-DATE-DB2 TO CL1-DATE-OF-BIRTH
                WS.CL1_GENDER.SetValue(WS.ADA1_SEX);                                                                //COBOL==> MOVE ADA1-SEX TO CL1-GENDER
                WS.CL1_FK_CLB_CLIENT_NO.SetValue(WS.ADA1_CLIENT_POINTER.GetSubstring(1, 10));                       //COBOL==> MOVE ADA1-CLIENT-POINTER ( 1:10 ) TO CL1-FK-CLB-CLIENT-NO
                if (WS.WS9_ADA_RESPONSE_CD.IsEqualTo(3))                                                            //COBOL==> IF WS9-ADA-RESPONSE-CD = 3
                {
                    WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PRF_SUB.SetValue(1);                                                                             //COBOL==> MOVE 1 TO PRF-SUB
            }                                                                                                   //COBOL==> END-IF.
            goto L_1000_GET_EXACT_NAME_LOOP;                                                                    //COBOL==> GO TO 1000-GET-EXACT-NAME-LOOP.
        #endregion 1000-GET-EXACT-NAME-NEXT

        #region 1000-EXIT
        L_1000_EXIT:;
            if (returnLabel == "1000-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2
        #endregion 1000-EXIT

        #region 1005-GET-PHONETIC-NAME-LIST
        L_1005_GET_PHONETIC_NAME_LIST:;
            WS.IMP_PHONETIC_1.SetValue(WS.IMP_CLIENT_FIRST_NAME);                                               //COBOL==> MOVE IMP-CLIENT-FIRST-NAME TO IMP-PHONETIC-1 IMP-PHONETIC-3.
            WS.IMP_PHONETIC_3.SetValue(WS.IMP_CLIENT_FIRST_NAME);
            WS.PH_NAME_RAW_INQ.SetValue(WS.IMP_CLIENT_LAST_NAME);                                               //COBOL==> MOVE IMP-CLIENT-LAST-NAME TO PH-NAME-RAW-INQ.
            Perform("PH002-0000-CONVERT-NAME", "PH002-0000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PH002-0000-CONVERT-NAME THRU PH002-0000-EXIT.
            if (WS.PH_ERR_NAME.IsEqualTo("1"))                                                                  //COBOL==> IF PH-ERR-NAME = '1'
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("CPL");                                                              //COBOL==> MOVE 'CPL' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                goto L_1005_EXIT;                                                                                   //COBOL==> GO TO 1005-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IMP_PHONETIC_CODE.SetValue(WS.PH_NAME_17_NUMERIC);                                               //COBOL==> MOVE PH-NAME-17-NUMERIC TO IMP-PHONETIC-CODE.
            WS.IMP_PHONETIC_SAVE_REDUC_INQ.SetValue(WS.PH_NAME_REDUC_INQ);                                      //COBOL==> MOVE PH-NAME-REDUC-INQ TO IMP-PHONETIC-SAVE-REDUC-INQ PH-SAVE-REDUC-INQ.
            WS.PH_SAVE_REDUC_INQ.SetValue(WS.PH_NAME_REDUC_INQ);
            WS.IMP_PHONETIC_3_HIGH.SetValue(WS.IMP_PHONETIC_3);                                                 //COBOL==> MOVE IMP-PHONETIC-3 TO IMP-PHONETIC-3-HIGH.
            WS.IMP_PHONETIC_3_HIGH.SetValueInspectReplacing(WS.IMP_PHONETIC_3_HIGH, "FIRST", LOW_VALUE, "Z", "", "", "", "");  //COBOL==> INSPECT IMP-PHONETIC-3-HIGH REPLACING FIRST LOW-VALUE BY '9'.
            WS.IMP_PHONETIC_3_HIGH.SetValueInspectReplacing(WS.IMP_PHONETIC_3_HIGH, "FIRST", " ", "Z", "", "", "", "");  //COBOL==> INSPECT IMP-PHONETIC-3-HIGH REPLACING FIRST SPACE BY '9'.
            WS.ADA2_PHONETIC_KEY.ResetToInitialValue();                                                         //COBOL==> INITIALIZE ADA2-PHONETIC-KEY.
                                                                                                                //COMMENT: ** GQB 07/09/2014 - INITIALIZE IMP-CLIENT-KEY (NOT IN USE)
            WS.IMP_CLIENT_KEY.ResetToInitialValue();                                                            //COBOL==> INITIALIZE IMP-CLIENT-KEY.
            if (!(WS.IMP_CLIENT_KEY.IsSpaces()))                                                                //COBOL==> IF IMP-CLIENT-KEY NOT = SPACES
            {
                WS.ADA2_PHONETIC_KEY.SetValue(WS.IMP_CLIENT_KEY);                                                   //COBOL==> MOVE IMP-CLIENT-KEY TO ADA2-PHONETIC-KEY
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.ADA2_PHONETIC_DATA.SetValue(WS.IMP_PHONETIC_DATA);                                               //COBOL==> MOVE IMP-PHONETIC-DATA TO ADA2-PHONETIC-DATA
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 04/01/2014 - MOVE KEY VALUES TO DB2 KEYS AND OPEN CURSOR
            WS.DBK1_PHONETIC_DATA.SetValue(WS.ADA2_PHONETIC_DATA);                                              //COBOL==> MOVE ADA2-PHONETIC-DATA TO DBK1-PHONETIC-DATA.
            WS.DBK1_CLIENT_NAME.SetValue(WS.ADA2_CLIENT_NAME);                                                  //COBOL==> MOVE ADA2-CLIENT-NAME TO DBK1-CLIENT-NAME.
            WS.DBK1_SSN.SetValue(WS.ADA2_SSN);                                                                  //COBOL==> MOVE ADA2-SSN TO DBK1-SSN.
            WS.WS9_DATE_ADA.SetValue(WS.ADA2_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA2-DATE-OF-BIRTH TO WS9-DATE-ADA.
            Perform("91100-CONVERT-DATE-ADA-TO-DB2", "91100-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2.
            WS.DBK1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                    //COBOL==> MOVE WS9-DATE-DB2 TO DBK1-DATE-OF-BIRTH.
            WS.DBK1_GENDER.SetValue(WS.ADA2_SEX);                                                               //COBOL==> MOVE ADA2-SEX TO DBK1-GENDER.
            WS.DBK1_CLIENT_NUMBER.SetValue(WS.ADA2_CLIENT_NUMBER);                                              //COBOL==> MOVE ADA2-CLIENT-NUMBER TO DBK1-CLIENT-NUMBER.
            Perform("6100-OPEN-PHON-VIEW", "6100-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 6100-OPEN-PHON-VIEW THRU 6100-EXIT.
            ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2
            if (returnLabel == "1005-GET-PHONETIC-NAME-LIST") { return; }  //Check for pass through to next method
        #endregion 1005-GET-PHONETIC-NAME-LIST

        #region 1005-GET-PHONETIC-NAME-LOOP
        L_1005_GET_PHONETIC_NAME_LOOP:;
            //COMMENT: ** GQB 04/01/2014 - FETCH NEXT ROW FROM DB2
            if (LS.PRF_P_REC_LENGTH[WS.PRF_SUB.AsInt()].IsEqualTo(0))                                           //COBOL==> IF PRF-P-REC-LENGTH ( PRF-SUB ) = ZERO
            {
                if (WS.SW1_ERR_NO.Value)                                                                            //COBOL==> IF SW1-ERR-NO
                {
                    Perform("6200-FETCH-PHON-VIEW", "6200-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 6200-FETCH-PHON-VIEW THRU 6200-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                Perform("6300-CLOSE-PHON-VIEW", "6300-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 6300-CLOSE-PHON-VIEW THRU 6300-EXIT
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                             //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue(WS.WS9_ADA_FILE_ACTION);                                             //COBOL==> MOVE WS9-ADA-FILE-ACTION TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                             //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                goto L_1005_EXIT;                                                                                   //COBOL==> GO TO 1005-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if ((WS.SW1_EOF_YES.Value)
             || (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThanOrEqualTo(WS.MC_CLIENT_ENTRY_MAX)))  //COBOL==> IF SW1-EOF-YES OR MV-CLIENT-ENTRY-NUM NOT < MC-CLIENT-ENTRY-MAX
            {
                Perform("6300-CLOSE-PHON-VIEW", "6300-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 6300-CLOSE-PHON-VIEW THRU 6300-EXIT
                if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                             //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                    WS.MV_ADA_FILE_ACTION.SetValue(WS.WS9_ADA_FILE_ACTION);                                             //COBOL==> MOVE WS9-ADA-FILE-ACTION TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                             //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                }                                                                                                   //COBOL==> END-IF
                goto L_1005_EXIT;                                                                                   //COBOL==> GO TO 1005-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_RECORD_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                     //COBOL==> MOVE CL1-CLIENT-NAME TO MV-RECORD-NAME.
            WS.MV_PHONETIC_DATA.SetValue(WS.CL1_PHONETIC_DATA);                                                 //COBOL==> MOVE CL1-PHONETIC-DATA TO MV-PHONETIC-DATA.
            if (((!(WS.IMP_PHONETIC_1.IsEqualTo(WS.MV_PHONETIC_1)))
             || (!(WS.IMP_PHONETIC_CODE.IsEqualTo(WS.MV_PHONETIC_CODE))))
             || (WS.IMP_PHONETIC_3_HIGH.IsLessThan(WS.MV_PHONETIC_3)))  //COBOL==> IF IMP-PHONETIC-1 NOT = MV-PHONETIC-1 OR IMP-PHONETIC-CODE NOT = MV-PHONETIC-CODE OR IMP-PHONETIC-3-HIGH < MV-PHONETIC-3
            {
                Perform("6300-CLOSE-PHON-VIEW", "6300-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 6300-CLOSE-PHON-VIEW THRU 6300-EXIT
                if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                             //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                    WS.MV_ADA_FILE_ACTION.SetValue(WS.WS9_ADA_FILE_ACTION);                                             //COBOL==> MOVE WS9-ADA-FILE-ACTION TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                             //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                }                                                                                                   //COBOL==> END-IF
                goto L_1005_EXIT;                                                                                   //COBOL==> GO TO 1005-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.PH_NAME_RAW_MSTR.SetValue(WS.MV_RECORD_LAST_NAME);                                               //COBOL==> MOVE MV-RECORD-LAST-NAME TO PH-NAME-RAW-MSTR.
            Perform("PH004-0000-LIKENESS", "PH004-0000-EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM PH004-0000-LIKENESS THRU PH004-0000-EXIT.
            if (WS.PH_DEGREE.IsLessThan(WS.IMP_MATCH_PERCENT_9V99))                                             //COBOL==> IF PH-DEGREE < IMP-MATCH-PERCENT-9V99
            {
                goto L_1005_GET_PHONETIC_NAME_NEXT;                                                                 //COBOL==> GO TO 1005-GET-PHONETIC-NAME-NEXT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 04/01/2014 - CONVERT DATE OF BIRTH AND SEX FROM DB2
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            Perform("91200-CONVERT-DATE-DB2-TO-ADA", "91200-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.MV_DATE_OF_BIRTH_SEX.SetValue(WS.WS9_DATE_ADA);                                                  //COBOL==> MOVE WS9-DATE-ADA TO MV-DATE-OF-BIRTH-SEX.
            WS.MV_SEX.SetValue(WS.CL1_GENDER);                                                                  //COBOL==> MOVE CL1-GENDER TO MV-SEX.
            if ((WS.IMP_CLIENT_SEX.IsGreaterThan(SPACES))
             && (!(WS.IMP_CLIENT_SEX.IsEqualTo(WS.MV_SEX))))  //COBOL==> IF ( IMP-CLIENT-SEX > SPACE AND IMP-CLIENT-SEX NOT = MV-SEX )
            {
                goto L_1005_GET_PHONETIC_NAME_NEXT;                                                                 //COBOL==> GO TO 1005-GET-PHONETIC-NAME-NEXT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 04/01/2014 ** NOT PASSED ************* TO IMP-CLIENT-AGE.
                                                                                                                //COMMENT:     IF IMP-CLIENT-AGE-X3 NUMERIC
                                                                                                                //COMMENT:         PERFORM
                                                                                                                //COMMENT:             IF MV-DATE-OF-BIRTH-X8 NUMERIC AND
                                                                                                                //COMMENT:                MV-DATE-OF-BIRTH-X8 > '00000000'
                                                                                                                //COMMENT:                 COMPUTE MV-AGE = MV-CURRENT-CCYY - MV-BIRTH-CCYY
                                                                                                                //COMMENT:                 IF MV-CURRENT-MMDD < MV-BIRTH-MMDD
                                                                                                                //COMMENT:                     COMPUTE MV-AGE = MV-AGE - 1
                                                                                                                //COMMENT:                 END-IF
                                                                                                                //COMMENT:                 IF MV-AGE < MV-AGE-LOW  OR
                                                                                                                //COMMENT:                    MV-AGE > MV-AGE-HIGH
                                                                                                                //COMMENT:                     GO TO 1005-GET-PHONETIC-NAME-NEXT
                                                                                                                //COMMENT:                 END-IF
                                                                                                                //COMMENT:             ELSE
                                                                                                                //COMMENT:                 GO TO 1005-GET-PHONETIC-NAME-NEXT
                                                                                                                //COMMENT:             END-IF
                                                                                                                //COMMENT:         END-PERFORM
                                                                                                                //COMMENT:     END-IF.
            WS.MV_CLIENT_ENTRY_NUM.Add(1);                                                                      //COBOL==> ADD 1 TO MV-CLIENT-ENTRY-NUM.
                                                                                                                //COMMENT: ** GQB 07/24/2014 - CODE FOR CLIENT POINTER INFORMATION
                                                                                                                //COMMENT: **                  SWCSZG87 AND SWCSZG88 MUST BE INCLUDED
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                            //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO DBK9-CLIENT-NUMBER.
            WS.DBK9_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO DBK9-CLIENT-NAME.
            WS.DBK9_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO DBK9-SSN.
            WS.WS9_CLIENT_POINTER.ResetToInitialValue();                                                        //COBOL==> INITIALIZE WS9-CLIENT-POINTER.
            WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL1_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL1-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG.
            WS.SW9_SELECT_CLIENT_NO.SetValue(true);                                                             //COBOL==> SET SW9-SELECT-CLIENT-NO TO TRUE.
            Perform("99000-CLIENT-POINTER-ROUTINE", "99000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM 99000-CLIENT-POINTER-ROUTINE.
                                                                                                                  //COMMENT: ** GQB 07/09/2014 - IGNORE ERRORS AND PASS CLIENT POINTER
                                                                                                                  //COMMENT: **                  TO ENABLE CONTINUATION OF THE LIST
                                                                                                                  //COMMENT:     IF NOT WS9-ABEND-TYPE-NONE
                                                                                                                  //COMMENT:        SET SW1-ERR-YES TO TRUE
                                                                                                                  //COMMENT:        PERFORM 6300-CLOSE-PHON-VIEW THRU 6300-EXIT
                                                                                                                  //COMMENT:        MOVE 'A'                 TO MV-ABEND-TYPE
                                                                                                                  //COMMENT:        MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                                                                                                                  //COMMENT:        MOVE 'BV'                TO MV-ADA-FILE-ACTION
                                                                                                                  //COMMENT:        MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                                                                                                                  //COMMENT:        GO TO 1005-EXIT
                                                                                                                  //COMMENT:     END-IF.
            WS.MV_CLIENT_POINTER.SetValue(WS.WS9_CLIENT_POINTER);                                               //COBOL==> MOVE WS9-CLIENT-POINTER TO MV-CLIENT-POINTER.
            WS.MV_CLIENT_NUMBER[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.MV_CLIENT_ID);                      //COBOL==> MOVE MV-CLIENT-ID TO MV-CLIENT-NUMBER ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_NAME[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.CL1_CLIENT_NAME);                     //COBOL==> MOVE CL1-CLIENT-NAME TO MV-CLIENT-NAME ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_DATE_OF_BIRTH_SEX[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.MV_DATE_OF_BIRTH_SEX);   //COBOL==> MOVE MV-DATE-OF-BIRTH-SEX TO MV-CLIENT-DATE-OF-BIRTH-SEX ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_SOC_SEC_NUM[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.CL1_SSN);                      //COBOL==> MOVE CL1-SSN TO MV-CLIENT-SOC-SEC-NUM ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_SYSTEM_PARTICIPATION[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.MV_SYSTEM_PARTICIPATION);  //COBOL==> MOVE MV-SYSTEM-PARTICIPATION TO MV-CLIENT-SYSTEM-PARTICIPATION ( MV-CLIENT-ENTRY-NUM ) .
                                                                                                                     //COMMENT: ** GQB 04/01/2014 - COLLECT AND MOVE PHON KEY DATA
            WS.ADA2_PHONETIC_DATA.SetValue(WS.CL1_PHONETIC_DATA);                                               //COBOL==> MOVE CL1-PHONETIC-DATA TO ADA2-PHONETIC-DATA.
            WS.ADA2_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO ADA2-CLIENT-NAME.
            WS.ADA2_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO ADA2-SSN.
            WS.ADA2_DATE_OF_BIRTH.SetValue(WS.MV_DATE_OF_BIRTH_X8);                                             //COBOL==> MOVE MV-DATE-OF-BIRTH-X8 TO ADA2-DATE-OF-BIRTH.
            WS.ADA2_SEX.SetValue(WS.CL1_GENDER);                                                                //COBOL==> MOVE CL1-GENDER TO ADA2-SEX.
            WS.ADA2_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                              //COBOL==> MOVE MV-CLIENT-POINTER TO ADA2-CLIENT-POINTER.
            WS.MV_CLIENT_KEY[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.ADA2_PHONETIC_KEY);                    //COBOL==> MOVE ADA2-PHONETIC-KEY TO MV-CLIENT-KEY ( MV-CLIENT-ENTRY-NUM ) .
            ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2
            if (returnLabel == "1005-GET-PHONETIC-NAME-LOOP") { return; }  //Check for pass through to next method
        #endregion 1005-GET-PHONETIC-NAME-LOOP

        #region 1005-GET-PHONETIC-NAME-NEXT
        L_1005_GET_PHONETIC_NAME_NEXT:;
            WS.PRF_SUB.Add(1);                                                                                  //COBOL==> ADD 1 TO PRF-SUB.
            if ((WS.PRF_SUB.IsLessThan(11))
             && (LS.PRF_P_REC_LENGTH[WS.PRF_SUB.AsInt()].IsGreaterThan(ZEROS)))  //COBOL==> IF PRF-SUB < 11 AND PRF-P-REC-LENGTH ( PRF-SUB ) > ZERO
            {
                //COMMENT: ** GQB 04/01/2014 - CONVERTED TO DB2
                WS.WS9_ADA_RESPONSE_CD.SetValue(LS.PRF_P_RESPONSE_CODE[WS.PRF_SUB.AsInt()]);                        //COBOL==> MOVE PRF-P-RESPONSE-CODE ( PRF-SUB ) TO WS9-ADA-RESPONSE-CD
                                                                                                                    //COMMENT:        MOVE PRF-P-ISN         (PRF-SUB) TO ISN149A
                                                                                                                    //COMMENT:        MOVE PRF-P-ISN-QUANTITY (PRF-SUB) TO ISN-QUANTITY149A
                WS.ADA2_PHONETIC_KEY.SetValue(LS.PRF_P_RECORD[WS.PRF_SUB.AsInt()]);                                 //COBOL==> MOVE PRF-P-RECORD ( PRF-SUB ) TO ADA2-PHONETIC-KEY
                                                                                                                    //COMMENT: ** GQB 04/01/2014 - COLLECT AND MOVE PHON KEY DATA
                WS.CL1_PHONETIC_DATA.SetValue(WS.ADA2_PHONETIC_DATA);                                               //COBOL==> MOVE ADA2-PHONETIC-DATA TO CL1-PHONETIC-DATA
                WS.CL1_CLIENT_NAME.SetValue(WS.ADA2_CLIENT_NAME);                                                   //COBOL==> MOVE ADA2-CLIENT-NAME TO CL1-CLIENT-NAME
                WS.CL1_SSN.SetValue(WS.ADA2_SSN);                                                                   //COBOL==> MOVE ADA2-SSN TO CL1-SSN
                WS.WS9_DATE_ADA.SetValue(WS.ADA2_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA2-DATE-OF-BIRTH TO WS9-DATE-ADA
                Perform("91100-CONVERT-DATE-ADA-TO-DB2", "91100-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2
                WS.CL1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                     //COBOL==> MOVE WS9-DATE-DB2 TO CL1-DATE-OF-BIRTH
                WS.CL1_GENDER.SetValue(WS.ADA2_SEX);                                                                //COBOL==> MOVE ADA2-SEX TO CL1-GENDER
                WS.CL1_FK_CLB_CLIENT_NO.SetValue(WS.ADA2_CLIENT_POINTER.GetSubstring(1, 10));                       //COBOL==> MOVE ADA2-CLIENT-POINTER ( 1:10 ) TO CL1-FK-CLB-CLIENT-NO
                if (WS.WS9_ADA_RESPONSE_CD.IsEqualTo(3))                                                            //COBOL==> IF WS9-ADA-RESPONSE-CD = 3
                {
                    WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PRF_SUB.SetValue(1);                                                                             //COBOL==> MOVE 1 TO PRF-SUB
            }                                                                                                   //COBOL==> END-IF.
            goto L_1005_GET_PHONETIC_NAME_LOOP;                                                                 //COBOL==> GO TO 1005-GET-PHONETIC-NAME-LOOP.
        #endregion 1005-GET-PHONETIC-NAME-NEXT

        #region 1005-EXIT
        L_1005_EXIT:;
            if (returnLabel == "1005-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2
        #endregion 1005-EXIT

        #region 1010-GET-SSN-NAME-LIST
        L_1010_GET_SSN_NAME_LIST:;
            WS.ADA3_SSN_KEY.ResetToInitialValue();                                                              //COBOL==> INITIALIZE ADA3-SSN-KEY.
                                                                                                                //COMMENT: ** GQB 07/09/2014 - INITIALIZE IMP-CLIENT-KEY (NOT IN USE)
            WS.IMP_CLIENT_KEY.ResetToInitialValue();                                                            //COBOL==> INITIALIZE IMP-CLIENT-KEY.
            if (!(WS.IMP_CLIENT_KEY.IsSpaces()))                                                                //COBOL==> IF IMP-CLIENT-KEY NOT = SPACES
            {
                WS.ADA3_SSN_KEY.SetValue(WS.IMP_CLIENT_KEY);                                                        //COBOL==> MOVE IMP-CLIENT-KEY TO ADA3-SSN-KEY
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.ADA3_SSN.SetValue(WS.IMP_CLIENT_SOC_SEC_NUM);                                                    //COBOL==> MOVE IMP-CLIENT-SOC-SEC-NUM TO ADA3-SSN
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 04/01/2014 - MOVE KEY VALUES TO DB2 KEYS AND OPEN CURSOR
            WS.DBK1_SSN.SetValue(WS.ADA3_SSN);                                                                  //COBOL==> MOVE ADA3-SSN TO DBK1-SSN.
            WS.DBK1_CLIENT_NAME.SetValue(WS.ADA3_CLIENT_NAME);                                                  //COBOL==> MOVE ADA3-CLIENT-NAME TO DBK1-CLIENT-NAME.
            WS.WS9_DATE_ADA.SetValue(WS.ADA3_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA3-DATE-OF-BIRTH TO WS9-DATE-ADA.
            Perform("91100-CONVERT-DATE-ADA-TO-DB2", "91100-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2.
            WS.DBK1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                    //COBOL==> MOVE WS9-DATE-DB2 TO DBK1-DATE-OF-BIRTH.
            WS.DBK1_GENDER.SetValue(WS.ADA3_SEX);                                                               //COBOL==> MOVE ADA3-SEX TO DBK1-GENDER.
            WS.DBK1_CLIENT_NUMBER.SetValue(WS.ADA3_CLIENT_NUMBER);                                              //COBOL==> MOVE ADA3-CLIENT-NUMBER TO DBK1-CLIENT-NUMBER.
            Perform("7100-OPEN-SSN-VIEW", "7100-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 7100-OPEN-SSN-VIEW THRU 7100-EXIT.
            ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2
            if (returnLabel == "1010-GET-SSN-NAME-LIST") { return; }  //Check for pass through to next method
        #endregion 1010-GET-SSN-NAME-LIST

        #region 1010-GET-SSN-NAME-LOOP
        L_1010_GET_SSN_NAME_LOOP:;
            //COMMENT: ** GQB 04/01/2014 - FETCH NEXT ROW FROM DB2
            if (LS.PRF_S_REC_LENGTH[WS.PRF_SUB.AsInt()].IsEqualTo(0))                                           //COBOL==> IF PRF-S-REC-LENGTH ( PRF-SUB ) = ZERO
            {
                if (WS.SW1_ERR_NO.Value)                                                                            //COBOL==> IF SW1-ERR-NO
                {
                    Perform("7200-FETCH-SSN-VIEW", "7200-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 7200-FETCH-SSN-VIEW THRU 7200-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                Perform("7300-CLOSE-SSN-VIEW", "7300-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 7300-CLOSE-SSN-VIEW THRU 7300-EXIT
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                             //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue(WS.WS9_ADA_FILE_ACTION);                                             //COBOL==> MOVE WS9-ADA-FILE-ACTION TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                             //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                goto L_1010_EXIT;                                                                                   //COBOL==> GO TO 1010-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if ((WS.SW1_EOF_YES.Value)
             || (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThanOrEqualTo(WS.MC_CLIENT_ENTRY_MAX)))  //COBOL==> IF SW1-EOF-YES OR MV-CLIENT-ENTRY-NUM NOT < MC-CLIENT-ENTRY-MAX
            {
                Perform("7300-CLOSE-SSN-VIEW", "7300-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 7300-CLOSE-SSN-VIEW THRU 7300-EXIT
                if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                             //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                    WS.MV_ADA_FILE_ACTION.SetValue(WS.WS9_ADA_FILE_ACTION);                                             //COBOL==> MOVE WS9-ADA-FILE-ACTION TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                             //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                }                                                                                                   //COBOL==> END-IF
                goto L_1010_EXIT;                                                                                   //COBOL==> GO TO 1010-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.CL1_SSN.IsEqualTo(WS.IMP_CLIENT_SOC_SEC_NUM)))                                             //COBOL==> IF CL1-SSN NOT = IMP-CLIENT-SOC-SEC-NUM
            {
                Perform("7300-CLOSE-SSN-VIEW", "7300-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 7300-CLOSE-SSN-VIEW THRU 7300-EXIT
                if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                             //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                    WS.MV_ADA_FILE_ACTION.SetValue(WS.WS9_ADA_FILE_ACTION);                                             //COBOL==> MOVE WS9-ADA-FILE-ACTION TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                             //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                }                                                                                                   //COBOL==> END-IF
                goto L_1010_EXIT;                                                                                   //COBOL==> GO TO 1010-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_CLIENT_ENTRY_NUM.Add(1);                                                                      //COBOL==> ADD 1 TO MV-CLIENT-ENTRY-NUM.
                                                                                                                //COMMENT: ** GQB 07/24/2014 - CODE FOR CLIENT POINTER INFORMATION
                                                                                                                //COMMENT: **                  SWCSZG87 AND SWCSZG88 MUST BE INCLUDED
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                            //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO DBK9-CLIENT-NUMBER.
            WS.DBK9_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO DBK9-CLIENT-NAME.
            WS.DBK9_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO DBK9-SSN.
            WS.WS9_CLIENT_POINTER.ResetToInitialValue();                                                        //COBOL==> INITIALIZE WS9-CLIENT-POINTER.
            WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL1_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL1-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG.
            WS.SW9_SELECT_CLIENT_NO.SetValue(true);                                                             //COBOL==> SET SW9-SELECT-CLIENT-NO TO TRUE.
            Perform("99000-CLIENT-POINTER-ROUTINE", "99000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM 99000-CLIENT-POINTER-ROUTINE.
                                                                                                                  //COMMENT: ** GQB 07/09/2014 - IGNORE ERRORS AND PASS CLIENT POINTER
                                                                                                                  //COMMENT: **                  TO ENABLE CONTINUATION OF THE LIST
                                                                                                                  //COMMENT:     IF NOT WS9-ABEND-TYPE-NONE
                                                                                                                  //COMMENT:        SET SW1-ERR-YES TO TRUE
                                                                                                                  //COMMENT:        PERFORM 7300-CLOSE-SSN-VIEW THRU 7300-EXIT
                                                                                                                  //COMMENT:        MOVE 'A'                 TO MV-ABEND-TYPE
                                                                                                                  //COMMENT:        MOVE WS9-ADA-FILE-NUMBER TO MV-ADA-FILE-NUMBER
                                                                                                                  //COMMENT:        MOVE 'CV'                TO MV-ADA-FILE-ACTION
                                                                                                                  //COMMENT:        MOVE WS9-ADA-RESPONSE-CD TO MV-ADA-RESPONSE-CD
                                                                                                                  //COMMENT:        GO TO 1010-EXIT
                                                                                                                  //COMMENT:     END-IF.
            WS.MV_CLIENT_POINTER.SetValue(WS.WS9_CLIENT_POINTER);                                               //COBOL==> MOVE WS9-CLIENT-POINTER TO MV-CLIENT-POINTER.
                                                                                                                //COMMENT: ** GQB 04/01/2014 - CONVERT DATE OF BIRTH AND SEX FROM DB2
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            Perform("91200-CONVERT-DATE-DB2-TO-ADA", "91200-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.MV_DATE_OF_BIRTH_SEX.SetValue(WS.WS9_DATE_ADA);                                                  //COBOL==> MOVE WS9-DATE-ADA TO MV-DATE-OF-BIRTH-SEX.
            WS.MV_SEX.SetValue(WS.CL1_GENDER);                                                                  //COBOL==> MOVE CL1-GENDER TO MV-SEX.
            WS.MV_CLIENT_NUMBER[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.MV_CLIENT_ID);                      //COBOL==> MOVE MV-CLIENT-ID TO MV-CLIENT-NUMBER ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_NAME[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.CL1_CLIENT_NAME);                     //COBOL==> MOVE CL1-CLIENT-NAME TO MV-CLIENT-NAME ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_DATE_OF_BIRTH_SEX[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.MV_DATE_OF_BIRTH_SEX);   //COBOL==> MOVE MV-DATE-OF-BIRTH-SEX TO MV-CLIENT-DATE-OF-BIRTH-SEX ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_SOC_SEC_NUM[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.CL1_SSN);                      //COBOL==> MOVE CL1-SSN TO MV-CLIENT-SOC-SEC-NUM ( MV-CLIENT-ENTRY-NUM ) .
            WS.MV_CLIENT_SYSTEM_PARTICIPATION[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.MV_SYSTEM_PARTICIPATION);  //COBOL==> MOVE MV-SYSTEM-PARTICIPATION TO MV-CLIENT-SYSTEM-PARTICIPATION ( MV-CLIENT-ENTRY-NUM ) .
                                                                                                                     //COMMENT: ** GQB 04/01/2014 - COLLECT AND MOVE SSN KEY DATA
            WS.ADA3_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO ADA3-SSN.
            WS.ADA3_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO ADA3-CLIENT-NAME.
            WS.ADA3_DATE_OF_BIRTH.SetValue(WS.MV_DATE_OF_BIRTH_X8);                                             //COBOL==> MOVE MV-DATE-OF-BIRTH-X8 TO ADA3-DATE-OF-BIRTH.
            WS.ADA3_SEX.SetValue(WS.CL1_GENDER);                                                                //COBOL==> MOVE CL1-GENDER TO ADA3-SEX.
            WS.ADA3_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                              //COBOL==> MOVE MV-CLIENT-POINTER TO ADA3-CLIENT-POINTER.
            WS.MV_CLIENT_KEY[WS.MV_CLIENT_ENTRY_NUM.AsInt()].SetValue(WS.ADA3_SSN_KEY);                         //COBOL==> MOVE ADA3-SSN-KEY TO MV-CLIENT-KEY ( MV-CLIENT-ENTRY-NUM ) .
            ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2
            if (returnLabel == "1010-GET-SSN-NAME-LOOP") { return; }  //Check for pass through to next method
        #endregion 1010-GET-SSN-NAME-LOOP

        #region 1010-GET-SSN-NAME-NEXT
        L_1010_GET_SSN_NAME_NEXT:;
            WS.PRF_SUB.Add(1);                                                                                  //COBOL==> ADD 1 TO PRF-SUB.
            if ((WS.PRF_SUB.IsLessThan(11))
             && (LS.PRF_S_REC_LENGTH[WS.PRF_SUB.AsInt()].IsGreaterThan(ZEROS)))  //COBOL==> IF PRF-SUB < 11 AND PRF-S-REC-LENGTH ( PRF-SUB ) > ZERO
            {
                //COMMENT: ** GQB 04/01/2014 - CONVERTED TO DB2
                WS.WS9_ADA_RESPONSE_CD.SetValue(LS.PRF_S_RESPONSE_CODE[WS.PRF_SUB.AsInt()]);                        //COBOL==> MOVE PRF-S-RESPONSE-CODE ( PRF-SUB ) TO WS9-ADA-RESPONSE-CD
                                                                                                                    //COMMENT:        MOVE PRF-S-ISN         (PRF-SUB) TO ISN149A
                                                                                                                    //COMMENT:        MOVE PRF-S-ISN-QUANTITY (PRF-SUB) TO ISN-QUANTITY149A
                WS.ADA3_SSN_KEY.SetValue(LS.PRF_S_RECORD[WS.PRF_SUB.AsInt()]);                                      //COBOL==> MOVE PRF-S-RECORD ( PRF-SUB ) TO ADA3-SSN-KEY
                                                                                                                    //COMMENT: ** GQB 04/01/2014 - COLLECT AND MOVE PHON KEY DATA
                WS.CL1_SSN.SetValue(WS.ADA3_SSN);                                                                   //COBOL==> MOVE ADA3-SSN TO CL1-SSN
                WS.CL1_CLIENT_NAME.SetValue(WS.ADA3_CLIENT_NAME);                                                   //COBOL==> MOVE ADA3-CLIENT-NAME TO CL1-CLIENT-NAME
                WS.WS9_DATE_ADA.SetValue(WS.ADA3_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA3-DATE-OF-BIRTH TO WS9-DATE-ADA
                Perform("91100-CONVERT-DATE-ADA-TO-DB2", "91100-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2
                WS.CL1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                     //COBOL==> MOVE WS9-DATE-DB2 TO CL1-DATE-OF-BIRTH
                WS.CL1_GENDER.SetValue(WS.ADA3_SEX);                                                                //COBOL==> MOVE ADA3-SEX TO CL1-GENDER
                WS.CL1_FK_CLB_CLIENT_NO.SetValue(WS.ADA3_CLIENT_POINTER.GetSubstring(1, 10));                       //COBOL==> MOVE ADA3-CLIENT-POINTER ( 1:10 ) TO CL1-FK-CLB-CLIENT-NO
                if (WS.WS9_ADA_RESPONSE_CD.IsEqualTo(3))                                                            //COBOL==> IF WS9-ADA-RESPONSE-CD = 3
                {
                    WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PRF_SUB.SetValue(1);                                                                             //COBOL==> MOVE 1 TO PRF-SUB
            }                                                                                                   //COBOL==> END-IF.
            goto L_1010_GET_SSN_NAME_LOOP;                                                                      //COBOL==> GO TO 1010-GET-SSN-NAME-LOOP.
        #endregion 1010-GET-SSN-NAME-NEXT

        #region 1010-EXIT
        L_1010_EXIT:;
            if (returnLabel == "1010-EXIT") { return; }                                                         //COBOL==> EXIT.
        #endregion 1010-EXIT

        #region 2000-SET-ALIAS-IND
        L_2000_SET_ALIAS_IND:;
            WS.MV_CLIENT_ID_NUM.SetValue(WS.MV_CLIENT_NUMBER[WS.MV_CLIENT_ENTRY_SUB]);                          //COBOL==> MOVE MV-CLIENT-NUMBER ( MV-CLIENT-ENTRY-SUB ) TO MV-CLIENT-ID-NUM.
            ///COMMENT:  READ THE CLIENT BASIC RECORD
            ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2
            if (returnLabel == "2000-SET-ALIAS-IND") { return; }  //Check for pass through to next method
        #endregion 2000-SET-ALIAS-IND

        #region GET-BASIC
        L_GET_BASIC:;
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.MV_CLIENT_ID_NUM);                                                //COBOL==> MOVE MV-CLIENT-ID-NUM TO DBK9-CLIENT-NUMBER.
            Perform("98000-SELECT-CLIENT-BASIC", "98000-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM 98000-SELECT-CLIENT-BASIC.
            if (!(WS.WS9_ABEND_TYPE_NONE.Value))                                                               //COBOL==> IF NOT WS9-ABEND-TYPE-NONE
            {
                WS.CLB9_CLIENT_NUMBER.SetValue("9999999999");                                                       //COBOL==> MOVE '9999999999' TO CLB9-CLIENT-NUMBER
                WS.MV_ABEND_TYPE.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACE TO MV-ABEND-TYPE
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:  GQB 04/02/2014 - CONVERT DATE FROM DB2 TO ADABAS FORMAT
            WS.WS9_DATE_DB2.SetValue(WS.CLB9_DATE_OF_BIRTH);                                                    //COBOL==> MOVE CLB9-DATE-OF-BIRTH TO WS9-DATE-DB2.
            Perform("91200-CONVERT-DATE-DB2-TO-ADA", "91200-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            if (WS.CLB9_CLIENT_NUMBER.IsEqualTo(WS.MV_CLIENT_NUMBER_X10[WS.MV_CLIENT_ENTRY_SUB.AsInt()]))       //COBOL==> IF CLB9-CLIENT-NUMBER = MV-CLIENT-NUMBER-X10 ( MV-CLIENT-ENTRY-SUB )
            {
                if ((((((WS.CLB9_CLIENT_SURNAME.IsEqualTo(WS.MV_CLIENT_LAST_NAME[WS.MV_CLIENT_ENTRY_SUB.AsInt()]))
             && (WS.CLB9_CLIENT_GIVEN_NAME.IsEqualTo(WS.MV_CLIENT_FIRST_NAME[WS.MV_CLIENT_ENTRY_SUB.AsInt()])))
             && (WS.CLB9_CLIENT_INITIALS.IsEqualTo(WS.MV_CLIENT_INITIAL[WS.MV_CLIENT_ENTRY_SUB.AsInt()])))
             && (WS.WS9_DATE_ADA.IsEqualTo(WS.MV_CLIENT_DATE_OF_BIRTH[WS.MV_CLIENT_ENTRY_SUB.AsInt()])))
             && (WS.CLB9_SSN.IsEqualTo(WS.MV_CLIENT_SOC_SEC_NUM[WS.MV_CLIENT_ENTRY_SUB.AsInt()])))
             && (WS.CLB9_GENDER.IsEqualTo(WS.MV_CLIENT_SEX[WS.MV_CLIENT_ENTRY_SUB.AsInt()])))  //COBOL==> IF CLB9-CLIENT-SURNAME = MV-CLIENT-LAST-NAME ( MV-CLIENT-ENTRY-SUB ) AND CLB9-CLIENT-GIVEN-NAME = MV-CLIENT-FIRST-NAME ( MV-CLIENT-ENTRY-SUB ) AND CLB9-CLIENT-INITIALS = MV-CLIENT-INITIAL ( MV-CLIENT-ENTRY-SUB ) AND WS9-DATE-ADA = MV-CLIENT-DATE-OF-BIRTH ( MV-CLIENT-ENTRY-SUB ) AND CLB9-SSN = MV-CLIENT-SOC-SEC-NUM ( MV-CLIENT-ENTRY-SUB ) AND CLB9-GENDER = MV-CLIENT-SEX ( MV-CLIENT-ENTRY-SUB )
                {
                    goto EndOfSentence_1;                                                                               //COBOL==> NEXT SENTENCE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ALIAS_IND[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue("Y");                                      //COBOL==> MOVE 'Y' TO MV-ALIAS-IND ( MV-CLIENT-ENTRY-SUB )
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.MV_ALIAS_IND[WS.MV_CLIENT_ENTRY_SUB.AsInt()].SetValue("E");                                      //COBOL==> MOVE 'E' TO MV-ALIAS-IND ( MV-CLIENT-ENTRY-SUB )
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_1:;
            if (returnLabel == "GET-BASIC") { return; }  //Check for pass through to next method
        #endregion GET-BASIC

        #region 2000-EXIT
        L_2000_EXIT:;
            if (returnLabel == "2000-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2 NAME-VIEW
        ///COMMENT: -----------------------------------------------------------------
        #endregion 2000-EXIT

        #region 5100-OPEN-NAME-VIEW
        L_5100_OPEN_NAME_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'DBK1-CLIENT-NAME    NAME=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-SSN            NAME=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-DATE-OF-BIRTH  NAME=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-DATE-OF-BIRTH          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-GENDER         NAME=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-GENDER                 TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NUMBER  NAME=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.OpenReader("NAME-VIEW");                                                                     //COBOL==> EXEC SQL OPEN NAME-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                                                                                                                    //COMMENT: ** GQB 07/09/2014 - IF SQLERR OCCURS AFTER LIST STARTED -
                                                                                                                    //COMMENT: **     NO LIST DISPLAY AND NO USER MESSAGE (SAME AS OLD SYSTEM)
                if (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThan(ZEROS))                                                    //COBOL==> IF MV-CLIENT-ENTRY-NUM > ZERO
                {
                    WS.WS9_ADA_FILE_ACTION.SetValue("AV");                                                              //COBOL==> MOVE 'AV' TO WS9-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "5100-OPEN-NAME-VIEW") { return; }  //Check for pass through to next method
        #endregion 5100-OPEN-NAME-VIEW

        #region 5100-EXIT
        L_5100_EXIT:;
            if (returnLabel == "5100-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 07/24/2014 - ADDED NEW CODE FOR DB2 NAME-VIEW
        ///COMMENT: -----------------------------------------------------------------
        #endregion 5100-EXIT

        #region 5200-FETCH-NAME-VIEW
        L_5200_FETCH_NAME_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.FetchReaderRow("NAME-VIEW",                                                               //COBOL==> EXEC SQL FETCH NAME-VIEW INTO :CL1-CLIENT-NAME , :CL1-SSN , :CL1-DATE-OF-BIRTH , :CL1-GENDER , :CL1-FK-CLB-CLIENT-NO , :CL1-VERIFIED-SSN-FLAG END-EXEC.
                             WS.CL1_CLIENT_NAME, WS.CL1_SSN, WS.CL1_DATE_OF_BIRTH, WS.CL1_GENDER, WS.CL1_FK_CLB_CLIENT_NO, WS.CL1_VERIFIED_SSN_FLAG);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                                                                                                                    //COMMENT: ** GQB 07/09/2014 - IF SQLERR OCCURS AFTER LIST STARTED -
                                                                                                                    //COMMENT: **     NO LIST DISPLAY AND NO USER MESSAGE (SAME AS OLD SYSTEM)
                if (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThan(ZEROS))                                                    //COBOL==> IF MV-CLIENT-ENTRY-NUM > ZERO
                {
                    WS.WS9_ADA_FILE_ACTION.SetValue("AV");                                                              //COBOL==> MOVE 'AV' TO WS9-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "5200-FETCH-NAME-VIEW") { return; }  //Check for pass through to next method
        #endregion 5200-FETCH-NAME-VIEW

        #region 5200-EXIT
        L_5200_EXIT:;
            if (returnLabel == "5200-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2 NAME-VIEW
        ///COMMENT: -----------------------------------------------------------------
        #endregion 5200-EXIT

        #region 5300-CLOSE-NAME-VIEW
        L_5300_CLOSE_NAME_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            DbConv.CloseReader("NAME-VIEW");                                                                    //COBOL==> EXEC SQL CLOSE NAME-VIEW END-EXEC.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                goto L_5300_EXIT;                                                                                   //COBOL==> GO TO 5300-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                                                                                                                    //COMMENT: ** GQB 07/09/2014 - IF SQLERR OCCURS AFTER LIST STARTED -
                                                                                                                    //COMMENT: **     NO LIST DISPLAY AND NO USER MESSAGE (SAME AS OLD SYSTEM)
                if (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThan(ZEROS))                                                    //COBOL==> IF MV-CLIENT-ENTRY-NUM > ZERO
                {
                    WS.WS9_ADA_FILE_ACTION.SetValue("AV");                                                              //COBOL==> MOVE 'AV' TO WS9-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "5300-CLOSE-NAME-VIEW") { return; }  //Check for pass through to next method
        #endregion 5300-CLOSE-NAME-VIEW

        #region 5300-EXIT
        L_5300_EXIT:;
            if (returnLabel == "5300-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2 PHON-VIEW
        ///COMMENT: -----------------------------------------------------------------
        #endregion 5300-EXIT

        #region 6100-OPEN-PHON-VIEW
        L_6100_OPEN_PHON_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'DBK1-PHONETIC-DATA  PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-PHONETIC-DATA          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NAME    PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-SSN            PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-DATE-OF-BIRTH  PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-DATE-OF-BIRTH          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-GENDER         PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-GENDER                 TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NUMBER  PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.OpenReader("PHON-VIEW");                                                                     //COBOL==> EXEC SQL OPEN PHON-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("BVF");                                                             //COBOL==> MOVE 'BVF' TO WS9-ADA-FILE-ACTION
                                                                                                                    //COMMENT: ** GQB 07/09/2014 - IF SQLERR OCCURS AFTER LIST STARTED -
                                                                                                                    //COMMENT: **     NO LIST DISPLAY AND NO USER MESSAGE (SAME AS OLD SYSTEM)
                if (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThan(ZEROS))                                                    //COBOL==> IF MV-CLIENT-ENTRY-NUM > ZERO
                {
                    WS.WS9_ADA_FILE_ACTION.SetValue("BV");                                                              //COBOL==> MOVE 'BV' TO WS9-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "6100-OPEN-PHON-VIEW") { return; }  //Check for pass through to next method
        #endregion 6100-OPEN-PHON-VIEW

        #region 6100-EXIT
        L_6100_EXIT:;
            if (returnLabel == "6100-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 07/24/2014 - ADDED NEW CODE FOR DB2 PHON-VIEW
        ///COMMENT: -----------------------------------------------------------------
        #endregion 6100-EXIT

        #region 6200-FETCH-PHON-VIEW
        L_6200_FETCH_PHON_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.FetchReaderRow("PHON-VIEW",                                                               //COBOL==> EXEC SQL FETCH PHON-VIEW INTO :CL1-PHONETIC-DATA , :CL1-CLIENT-NAME , :CL1-SSN , :CL1-DATE-OF-BIRTH , :CL1-GENDER , :CL1-FK-CLB-CLIENT-NO , :CL1-VERIFIED-SSN-FLAG END-EXEC.
                             WS.CL1_PHONETIC_DATA, WS.CL1_CLIENT_NAME, WS.CL1_SSN, WS.CL1_DATE_OF_BIRTH, WS.CL1_GENDER, WS.CL1_FK_CLB_CLIENT_NO, WS.CL1_VERIFIED_SSN_FLAG);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("BVF");                                                             //COBOL==> MOVE 'BVF' TO WS9-ADA-FILE-ACTION
                                                                                                                    //COMMENT: ** GQB 07/09/2014 - IF SQLERR OCCURS AFTER LIST STARTED -
                                                                                                                    //COMMENT: **     NO LIST DISPLAY AND NO USER MESSAGE (SAME AS OLD SYSTEM)
                if (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThan(ZEROS))                                                    //COBOL==> IF MV-CLIENT-ENTRY-NUM > ZERO
                {
                    WS.WS9_ADA_FILE_ACTION.SetValue("BV");                                                              //COBOL==> MOVE 'BV' TO WS9-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "6200-FETCH-PHON-VIEW") { return; }  //Check for pass through to next method
        #endregion 6200-FETCH-PHON-VIEW

        #region 6200-EXIT
        L_6200_EXIT:;
            if (returnLabel == "6200-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2 PHON-VIEW
        ///COMMENT: -----------------------------------------------------------------
        #endregion 6200-EXIT

        #region 6300-CLOSE-PHON-VIEW
        L_6300_CLOSE_PHON_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            DbConv.CloseReader("PHON-VIEW");                                                                    //COBOL==> EXEC SQL CLOSE PHON-VIEW END-EXEC.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                goto L_6300_EXIT;                                                                                   //COBOL==> GO TO 6300-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("BVF");                                                             //COBOL==> MOVE 'BVF' TO WS9-ADA-FILE-ACTION
                                                                                                                    //COMMENT: ** GQB 07/09/2014 - IF SQLERR OCCURS AFTER LIST STARTED -
                                                                                                                    //COMMENT: **     NO LIST DISPLAY AND NO USER MESSAGE (SAME AS OLD SYSTEM)
                if (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThan(ZEROS))                                                    //COBOL==> IF MV-CLIENT-ENTRY-NUM > ZERO
                {
                    WS.WS9_ADA_FILE_ACTION.SetValue("BV");                                                              //COBOL==> MOVE 'BV' TO WS9-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "6300-CLOSE-PHON-VIEW") { return; }  //Check for pass through to next method
        #endregion 6300-CLOSE-PHON-VIEW

        #region 6300-EXIT
        L_6300_EXIT:;
            if (returnLabel == "6300-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2 SSN-VIEW
        ///COMMENT: -----------------------------------------------------------------
        #endregion 6300-EXIT

        #region 7100-OPEN-SSN-VIEW
        L_7100_OPEN_SSN_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'DBK1-SSN             SSN=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NAME     SSN=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-DATE-OF-BIRTH   SSN=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-DATE-OF-BIRTH          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-GENDER          SSN=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-GENDER                 TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NUMBER   SSN=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.OpenReader("SSN-VIEW");                                                                      //COBOL==> EXEC SQL OPEN SSN-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("CVF");                                                             //COBOL==> MOVE 'CVF' TO WS9-ADA-FILE-ACTION
                                                                                                                    //COMMENT: ** GQB 07/09/2014 - IF SQLERR OCCURS AFTER LIST STARTED -
                                                                                                                    //COMMENT: **     NO LIST DISPLAY AND NO USER MESSAGE (SAME AS OLD SYSTEM)
                if (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThan(ZEROS))                                                    //COBOL==> IF MV-CLIENT-ENTRY-NUM > ZERO
                {
                    WS.WS9_ADA_FILE_ACTION.SetValue("CV");                                                              //COBOL==> MOVE 'CV' TO WS9-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "7100-OPEN-SSN-VIEW") { return; }  //Check for pass through to next method
        #endregion 7100-OPEN-SSN-VIEW

        #region 7100-EXIT
        L_7100_EXIT:;
            if (returnLabel == "7100-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 07/24/2014 - ADDED NEW CODE FOR DB2 SSN-VIEW
        ///COMMENT: -----------------------------------------------------------------
        #endregion 7100-EXIT

        #region 7200-FETCH-SSN-VIEW
        L_7200_FETCH_SSN_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.FetchReaderRow("SSN-VIEW",                                                                //COBOL==> EXEC SQL FETCH SSN-VIEW INTO :CL1-SSN , :CL1-CLIENT-NAME , :CL1-DATE-OF-BIRTH , :CL1-GENDER , :CL1-FK-CLB-CLIENT-NO , :CL1-VERIFIED-SSN-FLAG END-EXEC.
                             WS.CL1_SSN, WS.CL1_CLIENT_NAME, WS.CL1_DATE_OF_BIRTH, WS.CL1_GENDER, WS.CL1_FK_CLB_CLIENT_NO, WS.CL1_VERIFIED_SSN_FLAG);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("CVF");                                                             //COBOL==> MOVE 'CVF' TO WS9-ADA-FILE-ACTION
                                                                                                                    //COMMENT: ** GQB 07/09/2014 - IF SQLERR OCCURS AFTER LIST STARTED -
                                                                                                                    //COMMENT: **     NO LIST DISPLAY AND NO USER MESSAGE (SAME AS OLD SYSTEM)
                if (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThan(ZEROS))                                                    //COBOL==> IF MV-CLIENT-ENTRY-NUM > ZERO
                {
                    WS.WS9_ADA_FILE_ACTION.SetValue("CV");                                                              //COBOL==> MOVE 'CV' TO WS9-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "7200-FETCH-SSN-VIEW") { return; }  //Check for pass through to next method
        #endregion 7200-FETCH-SSN-VIEW

        #region 7200-EXIT
        L_7200_EXIT:;
            if (returnLabel == "7200-EXIT") { return; }                                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 04/01/2014 - ADDED NEW CODE FOR DB2 SSN-VIEW
        ///COMMENT: -----------------------------------------------------------------
        #endregion 7200-EXIT

        #region 7300-CLOSE-SSN-VIEW
        L_7300_CLOSE_SSN_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            DbConv.CloseReader("SSN-VIEW");                                                                     //COBOL==> EXEC SQL CLOSE SSN-VIEW END-EXEC.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                goto L_7300_EXIT;                                                                                   //COBOL==> GO TO 7300-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("CVF");                                                             //COBOL==> MOVE 'CVF' TO WS9-ADA-FILE-ACTION
                                                                                                                    //COMMENT: ** GQB 07/09/2014 - IF SQLERR OCCURS AFTER LIST STARTED -
                                                                                                                    //COMMENT: **     NO LIST DISPLAY AND NO USER MESSAGE (SAME AS OLD SYSTEM)
                if (WS.MV_CLIENT_ENTRY_NUM.IsGreaterThan(ZEROS))                                                    //COBOL==> IF MV-CLIENT-ENTRY-NUM > ZERO
                {
                    WS.WS9_ADA_FILE_ACTION.SetValue("CV");                                                              //COBOL==> MOVE 'CV' TO WS9-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "7300-CLOSE-SSN-VIEW") { return; }  //Check for pass through to next method
        #endregion 7300-CLOSE-SSN-VIEW

        #region 7300-EXIT
        L_7300_EXIT:;
            if (returnLabel == "7300-EXIT") { return; }                                                         //COBOL==> EXIT.
        #endregion 7300-EXIT

        #region 9999-CICS-ABEND
        L_9999_CICS_ABEND:;
            WS.MV_ABEND_TYPE.SetValue("C");                                                                     //COBOL==> MOVE 'C' TO MV-ABEND-TYPE.
            WS.MV_CICS_RESOURCE_NM.SetValue(Control.EIBRSRCE);                                                  //COBOL==> MOVE EIBRSRCE TO MV-CICS-RESOURCE-NM.
            WS.MV_CICS_FUNCTION_CD.SetValue(Control.EIBFN);                                                     //COBOL==> MOVE EIBFN TO MV-CICS-FUNCTION-CD.
            WS.MV_CICS_RESPONSE_CD.SetValue(Control.EIBRCODE);                                                  //COBOL==> MOVE EIBRCODE TO MV-CICS-RESPONSE-CD.
            if (returnLabel == "9999-CICS-ABEND") { return; }  //Check for pass through to next method
        #endregion 9999-CICS-ABEND

        #region 0000-DATABASE-EXIT
        L_0000_DATABASE_EXIT:;
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                LS.TYPE_0007.SetValue(WS.MV_ABEND_TYPE);                                                            //COBOL==> MOVE MV-ABEND-TYPE TO TYPE-0007
                LS.ADABAS_FILE_NUMBER_0007.SetValue(WS.MV_ADA_FILE_NUMBER);                                         //COBOL==> MOVE MV-ADA-FILE-NUMBER TO ADABAS-FILE-NUMBER-0007
                LS.ADABAS_FILE_ACTION_0007.SetValue(WS.MV_ADA_FILE_ACTION);                                         //COBOL==> MOVE MV-ADA-FILE-ACTION TO ADABAS-FILE-ACTION-0007
                LS.ADABAS_RESPONSE_CD_0007.SetValue(WS.MV_ADA_RESPONSE_CD);                                         //COBOL==> MOVE MV-ADA-RESPONSE-CD TO ADABAS-RESPONSE-CD-0007
                LS.CICS_RESOURCE_NM_0007.SetValue(WS.MV_CICS_RESOURCE_NM);                                          //COBOL==> MOVE MV-CICS-RESOURCE-NM TO CICS-RESOURCE-NM-0007
                LS.CICS_FUNCTION_CD_0007.SetValue(WS.MV_CICS_FUNCTION_CD);                                          //COBOL==> MOVE MV-CICS-FUNCTION-CD TO CICS-FUNCTION-CD-0007
                LS.CICS_RESPONSE_CD_0007.SetValue(WS.MV_CICS_RESPONSE_CD);                                          //COBOL==> MOVE MV-CICS-RESPONSE-CD TO CICS-RESPONSE-CD-0007
            }                                                                                                   //COBOL==> END-IF.
            ///COMMENT: ** GQB 03/28/2014
            ///COMMENT: **************************************************************
            ///COMMENT:  ORIGINAL CODE USING ADABAS - COMMENTED OUT
            ///COMMENT: ****************************************************************
            ///COMMENT:                                                                *
            ///COMMENT:  INCLUDE NAME:  SWCSZG12.                                      *
            ///COMMENT:      EAB NAME:  SWEXGR05.                                      *
            ///COMMENT:   DESCRIPTION:  0000-ADABAS-ROUTINE.                           *
            ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                            *
            ///COMMENT:                                                                *
            ///COMMENT:      INCLUDES:  SWCSZG10  WORKING-STORAGE SECTION.             *
            ///COMMENT:                 SWCSZ053  WORKING-STORAGE SECTION.             *
            ///COMMENT:                 SWAPH001  WORKING-STORAGE SECTION.             *
            ///COMMENT:                 SWCTWA    LINKAGE SECTION.                     *
            ///COMMENT:                 SWCSZG11  LINKAGE SECTION.                     *
            ///COMMENT:                 SWAPH002  PROCEDURE DIVISION.                  *
            ///COMMENT:                 SWAPH003  PROCEDURE DIVISION.                  *
            ///COMMENT:                 SWAPH004  PROCEDURE DIVISION.                  *
            ///COMMENT:                                                                *
            ///COMMENT:       ACTIONS:  RECEIVE SEARCH-TYPE-INDICATOR                  *
            ///COMMENT:                         PERCENT-OF-MATCH                       *
            ///COMMENT:                         SEARCH-SURNAME                         *
            ///COMMENT:                         SEARCH-FIRST-NAME                      *
            ///COMMENT:                         SEARCH-MIDDLE-INITIAL                  *
            ///COMMENT:                         SEARCH-SEX                             *
            ///COMMENT:                         SEARCH-AGE                             *
            ///COMMENT:                         SEARCH-DATE-OF-BIRTH                   *
            ///COMMENT:                         SEARCH-SOCIAL-SECURITY-NUMBER          *
            ///COMMENT:                         NEXT-READLOGICAL-KEY.                  *
            ///COMMENT:                 READVALUE CLIENT-DBF USING                     *
            ///COMMENT: *** SOC SEC NUM ------- 1.  IF SEARCH-TYPE-INDICATOR = '1',    *
            ///COMMENT:                                 CLIENT-SSN-KEY.                *
            ///COMMENT: ** EXACT   NAME ------- 2.  IF SEARCH-TYPE-INDICATOR = '2'     *
            ///COMMENT:                                AND PERCENT-OF-MATCH  = 100,    *
            ///COMMENT:                                 CLIENT-NAME-KEY.               *
            ///COMMENT: * PHONETIC NAME ------- 3.  IF SEARCH-TYPE-INDICATOR = '2'     *
            ///COMMENT:                                AND PERCENT-OF-MATCH  < 100,    *
            ///COMMENT:                                 PHONETIC-KEY.                  *
            ///COMMENT:                 RETURN  UPTO 125 OCCURRANCES OF MATCHED        *
            ///COMMENT:                         CLIENT-SURNAME                         *
            ///COMMENT:                         CLIENT-FIRST-NAME                      *
            ///COMMENT:                         CLIENT-MIDDLE-INITIAL                  *
            ///COMMENT:                         CLIENT-SOCIAL-SECURITY-NUMBER          *
            ///COMMENT:                         CLIENT-DATE-OF-BIRTH                   *
            ///COMMENT:                         CLIENT-SEX                             *
            ///COMMENT:                         CLIENT-SYSTEM-PARTICIPATION-INDICATORS.*
            ///COMMENT:                                1 OCCURRANCE  OF                *
            ///COMMENT:                         ABEND-FIELDS                           *
            ///COMMENT:                         NEXT-READLOGICAL-KEY, IF AT LEAST      *
            ///COMMENT:                             1 MORE MATCH RECORD EXISTS.        *
            ///COMMENT:                                                                *
            ///COMMENT:       CREATED:  01-AUG-95.                                     *
            ///COMMENT:            BY:  CTG/CEB.                                       *
            ///COMMENT:                                                                *
            ///COMMENT: ** MAINTENANCE *************************************************
            ///COMMENT:                   CHANGE                                       *
            ///COMMENT:                   CONTRL                                       *
            ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
            ///COMMENT:  -------  ------  ------  ------------------------------------ *
            ///COMMENT:                                                                *
            ///COMMENT: ****************************************************************
            ///COMMENT: 0000-ADABAS-ROUTINE.
            ///COMMENT:     MOVE SPACES TO MV-ABEND-FIELDS.
            ///COMMENT:     EXEC CICS HANDLE CONDITION
            ///COMMENT:               ERROR (9999-CICS-ABEND)
            ///COMMENT:     END-EXEC.
            ///COMMENT: ****************************************************************
            ///COMMENT: *** MOVE IMPORT FIELDS TO WORKING-STORAGE FIELDS.
            ///COMMENT: ****************************************************************
            ///COMMENT:     MOVE SPACES              TO IMP-CLIENT-DATA.
            ///COMMENT:     MOVE FLAG-0004           TO IMP-SEARCH-TYPE.
            ///COMMENT:     MOVE PERCENTAGE-0002     TO IMP-MATCH-PERCENT.
            ///COMMENT:     MOVE LAST-NAME-0003      TO IMP-CLIENT-LAST-NAME.
            ///COMMENT:     MOVE FIRST-NAME-0003     TO IMP-CLIENT-FIRST-NAME.
            ///COMMENT:     MOVE MIDDLE-INITIAL-0003 TO IMP-CLIENT-INITIAL.
            ///COMMENT:     MOVE DOB-0003            TO IMP-CLIENT-DATE-OF-BIRTH.
            ///COMMENT:     MOVE SEX-0003            TO IMP-CLIENT-SEX.
            ///COMMENT: *** NOT PASSED ************* TO IMP-CLIENT-AGE.
            ///COMMENT:     MOVE SSN-0003            TO IMP-CLIENT-SOC-SEC-NUM-X9.
            ///COMMENT:     MOVE UNIQUE-KEY-0001     TO IMP-CLIENT-KEY.
            ///COMMENT: ****************************************************************
            ///COMMENT: ****************************************************************
            ///COMMENT:     IF IMP-SEARCH-NAME AND
            ///COMMENT:        IMP-MATCH-EXACT
            ///COMMENT:         CALL 'SWADDRES' USING ISN-BUF149A,
            ///COMMENT:                               PRF-POINTER-CLIENT-DBF
            ///COMMENT:         SET ADDRESS OF PRF-CLIENTS TO PRF-POINTER-CLIENT-DBF
            ///COMMENT:         MOVE LOW-VALUES TO ISN-BUF149A
            ///COMMENT:     END-IF.
            ///COMMENT:     IF IMP-SEARCH-NAME     AND
            ///COMMENT:        NOT IMP-MATCH-EXACT
            ///COMMENT:         CALL 'SWADDRES' USING ISN-BUF149B,
            ///COMMENT:                               PRF-POINTER-CLIENT-DBF
            ///COMMENT:         SET ADDRESS OF PRF-P-CLIENTS TO PRF-POINTER-CLIENT-DBF
            ///COMMENT:         MOVE LOW-VALUES TO ISN-BUF149B
            ///COMMENT:     END-IF.
            ///COMMENT:     IF IMP-SEARCH-SSN
            ///COMMENT:         CALL 'SWADDRES' USING ISN-BUF149C,
            ///COMMENT:                               PRF-POINTER-CLIENT-DBF
            ///COMMENT:         SET ADDRESS OF PRF-S-CLIENTS TO PRF-POINTER-CLIENT-DBF
            ///COMMENT:         MOVE LOW-VALUES TO ISN-BUF149C
            ///COMMENT:     END-IF.
            ///COMMENT:     EXEC CICS ADDRESS
            ///COMMENT:               TWA (ADDRESS OF TWA)
            ///COMMENT:     END-EXEC.
            ///COMMENT: ****************************************************************
            ///COMMENT:                                                                *
            ///COMMENT:  INCLUDE NAME:  SWCSZ954 (FROM SWCSZ054).                      *
            ///COMMENT:                                                                *
            ///COMMENT:      EAB NAME:  SWCSZ???.                                      *
            ///COMMENT:                                                                *
            ///COMMENT:   DESCRIPTION:  ADABAS INITIALIZATION.                         *
            ///COMMENT:                                                                *
            ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                            *
            ///COMMENT:                 MUST BE HARDCOPIED INTO EAB MAIN PROCEDURE     *
            ///COMMENT:                   DIVISION INCLUDE SWCSZ???.                   *
            ///COMMENT:                                                                *
            ///COMMENT:       ACTIONS:  RELEASES ANY OUTSTANDING COMMAND ID'S.         *
            ///COMMENT:                 THIS ROUTINE REQUIRES INCLUDE SWCSZ053 IN THE  *
            ///COMMENT:                   WORKING-STORAGE SECTION OF THIS PROGRAM.     *
            ///COMMENT:                                                                *
            ///COMMENT:       CREATED:  21-AUG-95.                                     *
            ///COMMENT:            BY:  CTG/CEB.                                       *
            ///COMMENT:                                                                *
            ///COMMENT: ** MAINTENANCE *************************************************
            ///COMMENT:                   CHANGE                                       *
            ///COMMENT:                   CONTRL                                       *
            ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
            ///COMMENT:  -------  ------  ------  ------------------------------------ *
            ///COMMENT:                                                                *
            ///COMMENT: ****************************************************************
            ///COMMENT:     CALL 'ADASTWA' USING TWA CONTROL-BLOCK.
            ///COMMENT:     CALL SRADALNK  USING DFHEIBLK DFHCOMMAREA TWA SRMODLNK.
            ///COMMENT:     IF RESPONSE-CODE > ZERO AND NOT = 9
            ///COMMENT:         MOVE 'A'           TO MV-ABEND-TYPE
            ///COMMENT:         MOVE ZERO          TO MV-ADA-FILE-NUMBER
            ///COMMENT:         MOVE 'INI'         TO MV-ADA-FILE-ACTION
            ///COMMENT:         MOVE RESPONSE-CODE TO MV-ADA-RESPONSE-CD
            ///COMMENT:         GO TO 0000-ADABAS-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     EXEC CICS ASKTIME
            ///COMMENT:               ABSTIME (MV-ABS-TIME)
            ///COMMENT:     END-EXEC.
            ///COMMENT:     EXEC CICS FORMATTIME
            ///COMMENT:               ABSTIME (MV-ABS-TIME)
            ///COMMENT:               YYMMDD  (MV-YYMMDD)
            ///COMMENT:     END-EXEC.
            ///COMMENT:     IF MV-YY > 94
            ///COMMENT:         MOVE 19 TO MV-CC
            ///COMMENT:     ELSE
            ///COMMENT:         MOVE 20 TO MV-CC
            ///COMMENT:     END-IF.
            ///COMMENT:     MOVE DATE-0005XX TO MV-CCYYMMDD-X8.
            ///COMMENT:     IF IMP-CLIENT-AGE-X3 NOT NUMERIC OR
            ///COMMENT:        IMP-CLIENT-AGE-X3 NOT > '000'
            ///COMMENT:         MOVE SPACES TO IMP-CLIENT-AGE-X3
            ///COMMENT:     END-IF.
            ///COMMENT:     IF IMP-CLIENT-DATE-OF-BIRTH-X8 NOT NUMERIC OR
            ///COMMENT:        IMP-CLIENT-DATE-OF-BIRTH-X8 NOT > '00000000'
            ///COMMENT:         MOVE SPACES TO IMP-CLIENT-DATE-OF-BIRTH-X8
            ///COMMENT:     END-IF.
            ///COMMENT:     IF IMP-CLIENT-AGE-X3 NUMERIC
            ///COMMENT:         PERFORM
            ///COMMENT:             COMPUTE MV-WORK-AGE =  IMP-CLIENT-AGE * .2
            ///COMMENT:             MOVE    MV-WORK-AGE TO MV-WORK-AGE-NO-DEC
            ///COMMENT:             IF MV-WORK-AGE > MV-WORK-AGE-NO-DEC
            ///COMMENT:                 COMPUTE MV-AGE-RANGE = MV-WORK-AGE-NO-DEC + 1
            ///COMMENT:             ELSE
            ///COMMENT:                 MOVE    MV-WORK-AGE-NO-DEC TO MV-AGE-RANGE
            ///COMMENT:             END-IF
            ///COMMENT:             IF MV-AGE-RANGE > IMP-CLIENT-AGE
            ///COMMENT:                 MOVE    ZERO TO MV-AGE-LOW
            ///COMMENT:             ELSE
            ///COMMENT:                 COMPUTE MV-AGE-LOW = IMP-CLIENT-AGE -
            ///COMMENT:                                      MV-AGE-RANGE
            ///COMMENT:             END-IF
            ///COMMENT:             IF IMP-CLIENT-AGE > 150
            ///COMMENT:                 MOVE    IMP-CLIENT-AGE TO MV-AGE-HIGH
            ///COMMENT:             ELSE
            ///COMMENT:                 COMPUTE MV-AGE-HIGH = IMP-CLIENT-AGE +
            ///COMMENT:                                       MV-AGE-RANGE
            ///COMMENT:             END-IF
            ///COMMENT:         END-PERFORM
            ///COMMENT:     END-IF.
            ///COMMENT:     MOVE SPACES TO MV-CLIENT-ARRAY.
            ///COMMENT:     MOVE ZERO   TO MV-CLIENT-ENTRY-NUM.
            ///COMMENT:     MOVE 1      TO PRF-SUB.
            ///COMMENT:     IF IMP-SEARCH-NAME AND
            ///COMMENT:        IMP-MATCH-EXACT
            ///COMMENT:         PERFORM 1000-GET-EXACT-NAME-LIST
            ///COMMENT:            THRU 1000-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     IF IMP-SEARCH-NAME AND NOT
            ///COMMENT:        IMP-MATCH-EXACT
            ///COMMENT:         PERFORM 1005-GET-PHONETIC-NAME-LIST
            ///COMMENT:            THRU 1005-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     IF IMP-SEARCH-SSN
            ///COMMENT:         PERFORM 1010-GET-SSN-NAME-LIST
            ///COMMENT:            THRU 1010-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
            ///COMMENT:         GO TO 0000-ADABAS-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT: ****************************************************************
            ///COMMENT: *** MOVE WORKING-STORAGE FIELDS TO EXPORT FIELDS.
            ///COMMENT: ****************************************************************
            ///COMMENT:     IF MV-CLIENT-ENTRY-NUM NOT > MC-CLIENT-ENTRY-EXP
            ///COMMENT:         MOVE MV-CLIENT-ENTRY-NUM TO GROUP-EXPORT-0001MA
            ///COMMENT:     ELSE
            ///COMMENT:         MOVE MC-CLIENT-ENTRY-EXP TO GROUP-EXPORT-0001MA
            ///COMMENT:     END-IF.
            ///COMMENT:     PERFORM 2000-SET-ALIAS-IND
            ///COMMENT:        THRU 2000-EXIT
            ///COMMENT:         VARYING MV-CLIENT-ENTRY-SUB FROM 1 BY 1
            ///COMMENT:           UNTIL MV-CLIENT-ENTRY-SUB > MC-CLIENT-ENTRY-EXP
            ///COMMENT:              OR MV-CLIENT-ENTRY-SUB > MV-CLIENT-ENTRY-NUM.
            ///COMMENT:     PERFORM
            ///COMMENT:         VARYING MV-CLIENT-ENTRY-SUB FROM 1 BY 1
            ///COMMENT:           UNTIL MV-CLIENT-ENTRY-SUB > MC-CLIENT-ENTRY-EXP
            ///COMMENT:              OR MV-CLIENT-ENTRY-SUB > MV-CLIENT-ENTRY-NUM
            ///COMMENT:         MOVE MV-CLIENT-NUMBER-X10       (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:           TO NUMBER-0008                (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         MOVE MV-CLIENT-LAST-NAME        (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:           TO LAST-NAME-0008             (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         MOVE MV-CLIENT-FIRST-NAME       (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:           TO FIRST-NAME-0008            (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         MOVE MV-CLIENT-INITIAL          (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:           TO MIDDLE-INITIAL-0008        (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         MOVE '00000000'
            ///COMMENT:           TO DOB-0008XX                 (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         IF MV-CLIENT-DATE-OF-BIRTH-X8   (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:                 NUMERIC      AND
            ///COMMENT:            MV-CLIENT-DATE-OF-BIRTH-X8   (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:                 > '00000000'
            ///COMMENT:             MOVE MV-CLIENT-DATE-OF-BIRTH-X8
            ///COMMENT:                                         (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:               TO DOB-0008XX             (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         END-IF
            ///COMMENT:         MOVE MV-CLIENT-SEX              (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:           TO SEX-0008                   (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         MOVE '000000000'
            ///COMMENT:           TO SSN-0008                   (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         IF MV-CLIENT-SOC-SEC-NUM-X9     (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:                 NUMERIC      AND
            ///COMMENT:            MV-CLIENT-SOC-SEC-NUM-X9     (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:                 > '000000000'
            ///COMMENT:             MOVE MV-CLIENT-SOC-SEC-NUM-X9
            ///COMMENT:                                         (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:               TO SSN-0008               (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         END-IF
            ///COMMENT:         MOVE MV-CLIENT-SYS-PART-AE      (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:           TO FLAG-0009                  (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         MOVE MV-CLIENT-SYS-PART-CSE     (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:           TO FLAG-0010                  (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         MOVE MV-CLIENT-SYS-PART-KANPAY  (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:           TO FLAG-0011                  (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         MOVE MV-CLIENT-SYS-PART-KSCARES (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:           TO FLAG-0012                  (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         MOVE MV-ALIAS-IND               (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:           TO FLAG-0013                  (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:     END-PERFORM.
            ///COMMENT: ****************************************************************
            ///COMMENT: *** MOVE NEXT KEY TO EXPORT FIELD.
            ///COMMENT: ****************************************************************
            ///COMMENT:     IF MV-CLIENT-ENTRY-NUM EQUAL MC-CLIENT-ENTRY-MAX
            ///COMMENT:         MOVE MV-CLIENT-KEY              (MC-CLIENT-ENTRY-MAX)
            ///COMMENT:           TO UNIQUE-KEY-0006
            ///COMMENT:     END-IF.
            ///COMMENT: ****************************************************************
            ///COMMENT: ****************************************************************
            ///COMMENT:     GO TO 0000-ADABAS-EXIT.
            ///COMMENT: 1000-GET-EXACT-NAME-LIST.
            ///COMMENT:     IF IMP-CLIENT-KEY NOT = SPACES
            ///COMMENT:         MOVE IMP-CLIENT-KEY  TO V-CLIENT-NAME-KEY149A
            ///COMMENT:     ELSE
            ///COMMENT:         MOVE IMP-CLIENT-NAME TO V-CLIENT-NAME149A
            ///COMMENT:     END-IF.
            ///COMMENT:     @READVALUE149A  FIRST.
            ///COMMENT:     IF RESPONSE-CODE149A > ZERO AND NOT EOF149A
            ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
            ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
            ///COMMENT:         MOVE 'AVF'             TO MV-ADA-FILE-ACTION
            ///COMMENT:         MOVE RESPONSE-CODE149A TO MV-ADA-RESPONSE-CD
            ///COMMENT:         GO TO 1000-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT: 1000-GET-EXACT-NAME-LOOP.
            ///COMMENT:     IF EOF149A OR
            ///COMMENT:        MV-CLIENT-ENTRY-NUM NOT < MC-CLIENT-ENTRY-MAX
            ///COMMENT:         GO TO 1000-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     MOVE CLIENT-NAME149A TO MV-RECORD-NAME.
            ///COMMENT:     IF MV-RECORD-LAST-NAME NOT = IMP-CLIENT-LAST-NAME
            ///COMMENT:         GO TO 1000-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     IF IMP-CLIENT-FIRST-NAME-1 > SPACE
            ///COMMENT:         IF IMP-CLIENT-FIRST-NAME-2 > SPACE
            ///COMMENT:             IF IMP-CLIENT-FIRST-NAME NOT =
            ///COMMENT:                 MV-RECORD-FIRST-NAME
            ///COMMENT:                     GO TO 1000-GET-EXACT-NAME-NEXT
            ///COMMENT:             END-IF
            ///COMMENT:         ELSE
            ///COMMENT:             IF IMP-CLIENT-FIRST-NAME-1 NOT =
            ///COMMENT:                 MV-RECORD-FIRST-NAME-1
            ///COMMENT:                     GO TO 1000-GET-EXACT-NAME-NEXT
            ///COMMENT:             END-IF
            ///COMMENT:         END-IF
            ///COMMENT:     END-IF.
            ///COMMENT:     IF IMP-CLIENT-SOC-SEC-NUM-X9 NUMERIC       AND
            ///COMMENT:        IMP-CLIENT-SOC-SEC-NUM    NOT = SSN149A
            ///COMMENT:         GO TO 1000-GET-EXACT-NAME-NEXT
            ///COMMENT:     END-IF.
            ///COMMENT:     MOVE DATE-OF-BIRTH-SEX149A TO MV-DATE-OF-BIRTH-SEX.
            ///COMMENT:     IF (IMP-CLIENT-INITIAL              > SPACE               AND
            ///COMMENT:         IMP-CLIENT-INITIAL          NOT = MV-RECORD-INITIAL)  OR
            ///COMMENT:        (IMP-CLIENT-SEX                  > SPACE               AND
            ///COMMENT:         IMP-CLIENT-SEX              NOT = MV-SEX)             OR
            ///COMMENT:        (IMP-CLIENT-DATE-OF-BIRTH-X8       NUMERIC             AND
            ///COMMENT:         IMP-CLIENT-DATE-OF-BIRTH-X8 NOT = MV-DATE-OF-BIRTH-X8)
            ///COMMENT:             GO TO 1000-GET-EXACT-NAME-NEXT
            ///COMMENT:     END-IF.
            ///COMMENT:     IF IMP-CLIENT-AGE-X3 NUMERIC
            ///COMMENT:         PERFORM
            ///COMMENT:             IF MV-DATE-OF-BIRTH-X8 NUMERIC AND
            ///COMMENT:                MV-DATE-OF-BIRTH-X8 > '00000000'
            ///COMMENT:                 COMPUTE MV-AGE = MV-CURRENT-CCYY - MV-BIRTH-CCYY
            ///COMMENT:                 IF MV-CURRENT-MMDD < MV-BIRTH-MMDD
            ///COMMENT:                     COMPUTE MV-AGE = MV-AGE - 1
            ///COMMENT:                 END-IF
            ///COMMENT:                 IF MV-AGE < MV-AGE-LOW  OR
            ///COMMENT:                    MV-AGE > MV-AGE-HIGH
            ///COMMENT:                     GO TO 1000-GET-EXACT-NAME-NEXT
            ///COMMENT:                 END-IF
            ///COMMENT:             ELSE
            ///COMMENT:                 GO TO 1000-GET-EXACT-NAME-NEXT
            ///COMMENT:             END-IF
            ///COMMENT:         END-PERFORM
            ///COMMENT:     END-IF.
            ///COMMENT:     ADD 1 TO MV-CLIENT-ENTRY-NUM.
            ///COMMENT:     MOVE CLIENT-POINTER149A     TO MV-CLIENT-POINTER.
            ///COMMENT:     MOVE MV-CLIENT-ID           TO MV-CLIENT-NUMBER
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE CLIENT-NAME149A        TO MV-CLIENT-NAME
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE DATE-OF-BIRTH-SEX149A  TO MV-CLIENT-DATE-OF-BIRTH-SEX
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE SSN149A                TO MV-CLIENT-SOC-SEC-NUM
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE MV-SYSTEM-PARTICIPATION
            ///COMMENT:                                 TO MV-CLIENT-SYSTEM-PARTICIPATION
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE CLIENT-NAME-KEY149A    TO
            ///COMMENT:                              MV-CLIENT-KEY (MV-CLIENT-ENTRY-NUM).
            ///COMMENT: 1000-GET-EXACT-NAME-NEXT.
            ///COMMENT:     ADD 1 TO PRF-SUB.
            ///COMMENT:     IF PRF-REC-LENGTH (PRF-SUB) > ZERO
            ///COMMENT:         MOVE PRF-RESPONSE-CODE (PRF-SUB) TO RESPONSE-CODE149A
            ///COMMENT:         MOVE PRF-ISN           (PRF-SUB) TO ISN149A
            ///COMMENT:         MOVE PRF-ISN-QUANTITY  (PRF-SUB) TO ISN-QUANTITY149A
            ///COMMENT:         MOVE PRF-RECORD        (PRF-SUB) TO RECORD-BUF149A
            ///COMMENT:         IF RESPONSE-CODE149A    = 3
            ///COMMENT:             MOVE 1                       TO EOF-COB149A
            ///COMMENT:         END-IF
            ///COMMENT:     ELSE
            ///COMMENT:         MOVE 'P'        TO COMMAND-OPTION-1149A
            ///COMMENT:         MOVE 1          TO PRF-SUB
            ///COMMENT:         MOVE LOW-VALUES TO ISN-BUF149A
            ///COMMENT:         PERFORM 1149A-READVALUE-CLIENT-DBF
            ///COMMENT:            THRU 1149A-EXIT
            ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
            ///COMMENT:             GO TO 1000-EXIT
            ///COMMENT:         END-IF
            ///COMMENT:     END-IF.
            ///COMMENT:     GO TO 1000-GET-EXACT-NAME-LOOP.
            ///COMMENT: 1000-EXIT.
            ///COMMENT:     EXIT.
            ///COMMENT: 1149A-READVALUE-CLIENT-DBF.
            ///COMMENT:     @READVALUE149A.
            ///COMMENT:     IF RESPONSE-CODE149A > ZERO AND NOT EOF149A
            ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
            ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
            ///COMMENT:         MOVE 'AV '             TO MV-ADA-FILE-ACTION
            ///COMMENT:         MOVE RESPONSE-CODE149A TO MV-ADA-RESPONSE-CD
            ///COMMENT:     END-IF.
            ///COMMENT: 1149A-EXIT.
            ///COMMENT:     EXIT.
            ///COMMENT: 1005-GET-PHONETIC-NAME-LIST.
            ///COMMENT:     MOVE IMP-CLIENT-FIRST-NAME TO IMP-PHONETIC-1
            ///COMMENT:                                   IMP-PHONETIC-3.
            ///COMMENT:     MOVE IMP-CLIENT-LAST-NAME  TO PH-NAME-RAW-INQ.
            ///COMMENT:     PERFORM PH002-0000-CONVERT-NAME
            ///COMMENT:        THRU PH002-0000-EXIT.
            ///COMMENT:     IF PH-ERR-NAME = '1'
            ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
            ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
            ///COMMENT:         MOVE 'CPL'             TO MV-ADA-FILE-ACTION
            ///COMMENT:         MOVE ZERO              TO MV-ADA-RESPONSE-CD
            ///COMMENT:         GO TO 1005-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     MOVE PH-NAME-17-NUMERIC    TO IMP-PHONETIC-CODE.
            ///COMMENT:     MOVE PH-NAME-REDUC-INQ     TO IMP-PHONETIC-SAVE-REDUC-INQ
            ///COMMENT:                                   PH-SAVE-REDUC-INQ.
            ///COMMENT:     MOVE IMP-PHONETIC-3        TO IMP-PHONETIC-3-HIGH.
            ///COMMENT:     INSPECT IMP-PHONETIC-3-HIGH REPLACING FIRST
            ///COMMENT:         LOW-VALUE BY '9'.
            ///COMMENT:     INSPECT IMP-PHONETIC-3-HIGH REPLACING FIRST
            ///COMMENT:         SPACE     BY '9'.
            ///COMMENT:     IF IMP-CLIENT-KEY NOT = SPACES
            ///COMMENT:         MOVE IMP-CLIENT-KEY    TO V-PHONETIC-KEY149B
            ///COMMENT:     ELSE
            ///COMMENT:         MOVE IMP-PHONETIC-DATA TO V-PHONETIC-DATA149B
            ///COMMENT:     END-IF.
            ///COMMENT:     @READVALUE149B  FIRST.
            ///COMMENT:     IF RESPONSE-CODE149B > ZERO AND NOT EOF149B
            ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
            ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
            ///COMMENT:         MOVE 'BVF'             TO MV-ADA-FILE-ACTION
            ///COMMENT:         MOVE RESPONSE-CODE149B TO MV-ADA-RESPONSE-CD
            ///COMMENT:         GO TO 1005-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT: 1005-GET-PHONETIC-NAME-LOOP.
            ///COMMENT:     IF EOF149B
            ///COMMENT:         GO TO 1005-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     IF MV-CLIENT-ENTRY-NUM NOT < MC-CLIENT-ENTRY-MAX
            ///COMMENT:         GO TO 1005-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     MOVE CLIENT-NAME149B   TO MV-RECORD-NAME.
            ///COMMENT:     MOVE PHONETIC-DATA149B TO MV-PHONETIC-DATA.
            ///COMMENT:     IF IMP-PHONETIC-1      NOT = MV-PHONETIC-1    OR
            ///COMMENT:        IMP-PHONETIC-CODE   NOT = MV-PHONETIC-CODE OR
            ///COMMENT:        IMP-PHONETIC-3-HIGH     < MV-PHONETIC-3
            ///COMMENT:         GO TO 1005-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     MOVE MV-RECORD-LAST-NAME TO PH-NAME-RAW-MSTR.
            ///COMMENT:     PERFORM PH004-0000-LIKENESS
            ///COMMENT:        THRU PH004-0000-EXIT.
            ///COMMENT:     IF PH-DEGREE < IMP-MATCH-PERCENT-9V99
            ///COMMENT:         GO TO 1005-GET-PHONETIC-NAME-NEXT
            ///COMMENT:     END-IF.
            ///COMMENT:     MOVE DATE-OF-BIRTH-SEX149B TO MV-DATE-OF-BIRTH-SEX.
            ///COMMENT:     IF (IMP-CLIENT-SEX     > SPACE   AND
            ///COMMENT:         IMP-CLIENT-SEX NOT = MV-SEX)
            ///COMMENT:             GO TO 1005-GET-PHONETIC-NAME-NEXT
            ///COMMENT:     END-IF.
            ///COMMENT:     IF IMP-CLIENT-AGE-X3 NUMERIC
            ///COMMENT:         PERFORM
            ///COMMENT:             IF MV-DATE-OF-BIRTH-X8 NUMERIC AND
            ///COMMENT:                MV-DATE-OF-BIRTH-X8 > '00000000'
            ///COMMENT:                 COMPUTE MV-AGE = MV-CURRENT-CCYY - MV-BIRTH-CCYY
            ///COMMENT:                 IF MV-CURRENT-MMDD < MV-BIRTH-MMDD
            ///COMMENT:                     COMPUTE MV-AGE = MV-AGE - 1
            ///COMMENT:                 END-IF
            ///COMMENT:                 IF MV-AGE < MV-AGE-LOW  OR
            ///COMMENT:                    MV-AGE > MV-AGE-HIGH
            ///COMMENT:                     GO TO 1005-GET-PHONETIC-NAME-NEXT
            ///COMMENT:                 END-IF
            ///COMMENT:             ELSE
            ///COMMENT:                 GO TO 1005-GET-PHONETIC-NAME-NEXT
            ///COMMENT:             END-IF
            ///COMMENT:         END-PERFORM
            ///COMMENT:     END-IF.
            ///COMMENT:     ADD 1 TO MV-CLIENT-ENTRY-NUM.
            ///COMMENT:     MOVE CLIENT-POINTER149B     TO MV-CLIENT-POINTER.
            ///COMMENT:     MOVE MV-CLIENT-ID           TO MV-CLIENT-NUMBER
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE CLIENT-NAME149B        TO MV-CLIENT-NAME
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE DATE-OF-BIRTH-SEX149B  TO MV-CLIENT-DATE-OF-BIRTH-SEX
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE SSN149B                TO MV-CLIENT-SOC-SEC-NUM
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE MV-SYSTEM-PARTICIPATION
            ///COMMENT:                                 TO MV-CLIENT-SYSTEM-PARTICIPATION
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE PHONETIC-KEY149B       TO
            ///COMMENT:                              MV-CLIENT-KEY (MV-CLIENT-ENTRY-NUM).
            ///COMMENT: 1005-GET-PHONETIC-NAME-NEXT.
            ///COMMENT:     ADD 1 TO PRF-SUB.
            ///COMMENT:     IF PRF-P-REC-LENGTH (PRF-SUB) > ZERO
            ///COMMENT:         MOVE PRF-P-RESPONSE-CODE (PRF-SUB) TO RESPONSE-CODE149B
            ///COMMENT:         MOVE PRF-P-ISN           (PRF-SUB) TO ISN149B
            ///COMMENT:         MOVE PRF-P-ISN-QUANTITY  (PRF-SUB) TO ISN-QUANTITY149B
            ///COMMENT:         MOVE PRF-P-RECORD        (PRF-SUB) TO RECORD-BUF149B
            ///COMMENT:         IF RESPONSE-CODE149B    = 3
            ///COMMENT:             MOVE 1                         TO EOF-COB149B
            ///COMMENT:         END-IF
            ///COMMENT:     ELSE
            ///COMMENT:         MOVE 'P'        TO COMMAND-OPTION-1149B
            ///COMMENT:         MOVE 1          TO PRF-SUB
            ///COMMENT:         MOVE LOW-VALUES TO ISN-BUF149B
            ///COMMENT:         PERFORM 1149B-READVALUE-CLIENT-DBF
            ///COMMENT:            THRU 1149B-EXIT
            ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
            ///COMMENT:             GO TO 1005-EXIT
            ///COMMENT:         END-IF
            ///COMMENT:     END-IF.
            ///COMMENT:     GO TO 1005-GET-PHONETIC-NAME-LOOP.
            ///COMMENT: 1005-EXIT.
            ///COMMENT:     EXIT.
            ///COMMENT: 1149B-READVALUE-CLIENT-DBF.
            ///COMMENT:     @READVALUE149B.
            ///COMMENT:     IF RESPONSE-CODE149B > ZERO AND NOT EOF149B
            ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
            ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
            ///COMMENT:         MOVE 'BV '             TO MV-ADA-FILE-ACTION
            ///COMMENT:         MOVE RESPONSE-CODE149B TO MV-ADA-RESPONSE-CD
            ///COMMENT:     END-IF.
            ///COMMENT: 1149B-EXIT.
            ///COMMENT:     EXIT.
            ///COMMENT: 1010-GET-SSN-NAME-LIST.
            ///COMMENT:     IF IMP-CLIENT-KEY NOT = SPACES
            ///COMMENT:         MOVE IMP-CLIENT-KEY         TO V-CLIENT-SSN-KEY149C
            ///COMMENT:     ELSE
            ///COMMENT:         MOVE IMP-CLIENT-SOC-SEC-NUM TO V-SSN149C
            ///COMMENT:     END-IF.
            ///COMMENT:     @READVALUE149C  FIRST.
            ///COMMENT:     IF RESPONSE-CODE149C > ZERO AND NOT EOF149C
            ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
            ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
            ///COMMENT:         MOVE 'CVF'             TO MV-ADA-FILE-ACTION
            ///COMMENT:         MOVE RESPONSE-CODE149C TO MV-ADA-RESPONSE-CD
            ///COMMENT:         GO TO 1010-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT: 1010-GET-SSN-NAME-LOOP.
            ///COMMENT:     IF EOF149C OR
            ///COMMENT:        MV-CLIENT-ENTRY-NUM NOT < MC-CLIENT-ENTRY-MAX
            ///COMMENT:         GO TO 1010-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     IF SSN149C NOT = IMP-CLIENT-SOC-SEC-NUM
            ///COMMENT:         GO TO 1010-EXIT
            ///COMMENT:     END-IF.
            ///COMMENT:     ADD 1 TO MV-CLIENT-ENTRY-NUM.
            ///COMMENT:     MOVE CLIENT-POINTER149C     TO MV-CLIENT-POINTER.
            ///COMMENT:     MOVE MV-CLIENT-ID           TO MV-CLIENT-NUMBER
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE CLIENT-NAME149C        TO MV-CLIENT-NAME
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE DATE-OF-BIRTH-SEX149C  TO MV-CLIENT-DATE-OF-BIRTH-SEX
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE SSN149C                TO MV-CLIENT-SOC-SEC-NUM
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE MV-SYSTEM-PARTICIPATION
            ///COMMENT:                                 TO MV-CLIENT-SYSTEM-PARTICIPATION
            ///COMMENT:                                            (MV-CLIENT-ENTRY-NUM).
            ///COMMENT:     MOVE CLIENT-SSN-KEY149C     TO
            ///COMMENT:                              MV-CLIENT-KEY (MV-CLIENT-ENTRY-NUM).
            ///COMMENT: 1010-GET-SSN-NAME-NEXT.
            ///COMMENT:     ADD 1 TO PRF-SUB.
            ///COMMENT:     IF PRF-S-REC-LENGTH (PRF-SUB) > ZERO
            ///COMMENT:         MOVE PRF-S-RESPONSE-CODE (PRF-SUB) TO RESPONSE-CODE149C
            ///COMMENT:         MOVE PRF-S-ISN           (PRF-SUB) TO ISN149C
            ///COMMENT:         MOVE PRF-S-ISN-QUANTITY  (PRF-SUB) TO ISN-QUANTITY149C
            ///COMMENT:         MOVE PRF-S-RECORD        (PRF-SUB) TO RECORD-BUF149C
            ///COMMENT:         IF RESPONSE-CODE149C    = 3
            ///COMMENT:             MOVE 1                         TO EOF-COB149C
            ///COMMENT:         END-IF
            ///COMMENT:     ELSE
            ///COMMENT:         MOVE 'P'        TO COMMAND-OPTION-1149C
            ///COMMENT:         MOVE 1          TO PRF-SUB
            ///COMMENT:         MOVE LOW-VALUES TO ISN-BUF149C
            ///COMMENT:         PERFORM 1149C-READVALUE-CLIENT-DBF
            ///COMMENT:            THRU 1149C-EXIT
            ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
            ///COMMENT:             GO TO 1010-EXIT
            ///COMMENT:         END-IF
            ///COMMENT:     END-IF.
            ///COMMENT:     GO TO 1010-GET-SSN-NAME-LOOP.
            ///COMMENT: 1010-EXIT.
            ///COMMENT:     EXIT.
            ///COMMENT: 1149C-READVALUE-CLIENT-DBF.
            ///COMMENT:     @READVALUE149C.
            ///COMMENT:     IF RESPONSE-CODE149C > ZERO AND NOT EOF149C
            ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
            ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
            ///COMMENT:         MOVE 'CV '             TO MV-ADA-FILE-ACTION
            ///COMMENT:         MOVE RESPONSE-CODE149C TO MV-ADA-RESPONSE-CD
            ///COMMENT:     END-IF.
            ///COMMENT: 1149C-EXIT.
            ///COMMENT:     EXIT.
            ///COMMENT: 1154-READISN-CLIENT-BASIC-DBF.
            ///COMMENT:     @READISN154  ISN = MV-CLIENT-ID-NUM.
            ///COMMENT:     IF RESPONSE-CODE154 > ZERO
            ///COMMENT:         MOVE 'A'              TO MV-ABEND-TYPE
            ///COMMENT: ******* MOVE 154              TO MV-ADA-FILE-NUMBER
            ///COMMENT: ******* MOVE 'RI '            TO MV-ADA-FILE-ACTION
            ///COMMENT: ******* MOVE RESPONSE-CODE154 TO MV-ADA-RESPONSE-CD
            ///COMMENT:     END-IF.
            ///COMMENT: 1154-EXIT.
            ///COMMENT:     EXIT.
            ///COMMENT: 2000-SET-ALIAS-IND.
            ///COMMENT:     MOVE MV-CLIENT-NUMBER (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:                         TO MV-CLIENT-ID-NUM.
            ///COMMENT:     PERFORM 1154-READISN-CLIENT-BASIC-DBF
            ///COMMENT:        THRU 1154-EXIT.
            ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
            ///COMMENT:         MOVE 9999999999 TO CLIENT-NUMBER154
            ///COMMENT:         MOVE SPACE      TO MV-ABEND-TYPE
            ///COMMENT:     END-IF.
            ///COMMENT:     IF CLIENT-NUMBER154 = MV-CLIENT-NUMBER-X10
            ///COMMENT:                                         (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         IF CLIENT-SURNAME154    = MV-CLIENT-LAST-NAME
            ///COMMENT:                                         (MV-CLIENT-ENTRY-SUB) AND
            ///COMMENT:            CLIENT-GIVEN-NAME154 = MV-CLIENT-FIRST-NAME
            ///COMMENT:                                         (MV-CLIENT-ENTRY-SUB) AND
            ///COMMENT:            CLIENT-INITIALS154   = MV-CLIENT-INITIAL
            ///COMMENT:                                         (MV-CLIENT-ENTRY-SUB) AND
            ///COMMENT:            DATE-OF-BIRTH154     = MV-CLIENT-DATE-OF-BIRTH
            ///COMMENT:                                         (MV-CLIENT-ENTRY-SUB) AND
            ///COMMENT:            SSN154               = MV-CLIENT-SOC-SEC-NUM
            ///COMMENT:                                         (MV-CLIENT-ENTRY-SUB) AND
            ///COMMENT:            SEX154               = MV-CLIENT-SEX
            ///COMMENT:                                         (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:             NEXT SENTENCE
            ///COMMENT:         ELSE
            ///COMMENT:             MOVE 'Y'    TO MV-ALIAS-IND (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:         END-IF
            ///COMMENT:     ELSE
            ///COMMENT:         MOVE 'E'        TO MV-ALIAS-IND (MV-CLIENT-ENTRY-SUB)
            ///COMMENT:     END-IF.
            ///COMMENT: 2000-EXIT.
            ///COMMENT:     EXIT.
            ///COMMENT: 9999-CICS-ABEND.
            ///COMMENT:     MOVE 'C'      TO MV-ABEND-TYPE.
            ///COMMENT:     MOVE EIBRSRCE TO MV-CICS-RESOURCE-NM.
            ///COMMENT:     MOVE EIBFN    TO MV-CICS-FUNCTION-CD.
            ///COMMENT:     MOVE EIBRCODE TO MV-CICS-RESPONSE-CD.
            ///COMMENT: 0000-ADABAS-EXIT.
            ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
            ///COMMENT:         MOVE MV-ABEND-TYPE       TO TYPE-0007
            ///COMMENT:         MOVE MV-ADA-FILE-NUMBER  TO ADABAS-FILE-NUMBER-0007
            ///COMMENT:         MOVE MV-ADA-FILE-ACTION  TO ADABAS-FILE-ACTION-0007
            ///COMMENT:         MOVE MV-ADA-RESPONSE-CD  TO ADABAS-RESPONSE-CD-0007
            ///COMMENT:         MOVE MV-CICS-RESOURCE-NM TO CICS-RESOURCE-NM-0007
            ///COMMENT:         MOVE MV-CICS-FUNCTION-CD TO CICS-FUNCTION-CD-0007
            ///COMMENT:         MOVE MV-CICS-RESPONSE-CD TO CICS-RESPONSE-CD-0007
            ///COMMENT:     END-IF.
            if (returnLabel == "0000-DATABASE-EXIT") { return; }  //Check for pass through to next method
        #endregion 0000-DATABASE-EXIT

        #region PARA-0329211337-EXIT
        L_PARA_0329211337_EXIT:;
            if (returnLabel == "PARA-0329211337-EXIT") { return; }                                              //COBOL==> EXIT.
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH002                                       *
        ///COMMENT:   DESCRIPTION:  CONVERT LAST NAME TO PHONETIC VALUE            *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:                                                                *
        ///COMMENT: ****************************************************************
        #endregion PARA-0329211337-EXIT

        #region PH002-0000-CONVERT-NAME
        L_PH002_0000_CONVERT_NAME:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   CONVERT LAST NAME TO A PHONETIC VALUE                        *
            //COMMENT: ---------------------------------------------------------------*
            Perform("PH002-1000-INITIALIZE", "PH002-1000-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PH002-1000-INITIALIZE THRU PH002-1000-EXIT.
            WS.PH_THREE_LETTERS.SetValue(WS.PH_NAME_RAW_INQ);                                                   //COBOL==> MOVE PH-NAME-RAW-INQ TO PH-THREE-LETTERS.
            WS.PH_TWO_LETTERS.SetValue(WS.PH_THREE_LETTERS);                                                    //COBOL==> MOVE PH-THREE-LETTERS TO PH-TWO-LETTERS.
            WS.PH_ONE_LETTER.SetValue(WS.PH_THREE_LETTERS);                                                     //COBOL==> MOVE PH-THREE-LETTERS TO PH-ONE-LETTER.
            WS.PH_NAME_CRUNCH_INQ.SetValue(WS.PH_NAME_RAW_INQ);                                                 //COBOL==> MOVE PH-NAME-RAW-INQ TO PH-NAME-CRUNCH-INQ.
            Perform("PH003-0000-CRUNCH-NAME", "PH003-0000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH003-0000-CRUNCH-NAME THRU PH003-0000-EXIT.
            WS.PH_FNTIC_CX.SetValue(01);                                                                        //COBOL==> MOVE 01 TO PH-FNTIC-CX.
                                                                                                                //COMMENT: ---------------------------------------------------------------*
                                                                                                                //COMMENT:   CHECKING FIRST THREE,TWO, OR 1 LETTER THEN CONVERT           *
                                                                                                                //COMMENT:      THE REMAINDER OF THE NAME                                 *
                                                                                                                //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_THREE_LETTERS.IsEqualTo("SCH"))                                                           //COBOL==> IF PH-THREE-LETTERS = 'SCH'
            {
                WS.PH_FNTIC_C3.SetValue(04);                                                                        //COBOL==> MOVE 04 TO PH-FNTIC-C3
                WS.PH_NAME_NUM_34[1].SetValue("06");                                                                //COBOL==> MOVE '06' TO PH-NAME-NUM-34 ( 1 )
                Perform("PH002-2000-REMAIN-NAME", "PH002-2000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                goto L_PH002_0000_EXIT;                                                                             //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_CF2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CF2-INDEX TO 1.
            WS.PH_CF2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CF2-INDXX.
            Perform("PH002-3000-FIRST-2-LETTERS", "PH002-3000-EXIT"); if (Control.ExitProgram) { return; }        //COBOL==> PERFORM PH002-3000-FIRST-2-LETTERS THRU PH002-3000-EXIT.
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_C3.SetValue(03);                                                                        //COBOL==> MOVE 03 TO PH-FNTIC-C3
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_NAME_NUM_34[1].SetValue(WS.PH_HIT);                                                           //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( 1 )
                Perform("PH002-2000-REMAIN-NAME", "PH002-2000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                goto L_PH002_0000_EXIT;                                                                             //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_CF1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CF1-INDEX TO 1.
            WS.PH_CF1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CF1-INDXX.
            Perform("PH002-4000-FIRST-1-LETTER", "PH002-4000-EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PH002-4000-FIRST-1-LETTER THRU PH002-4000-EXIT.
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_C3.SetValue(02);                                                                        //COBOL==> MOVE 02 TO PH-FNTIC-C3
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_NAME_NUM_34[1].SetValue(WS.PH_HIT);                                                           //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( 1 )
                Perform("PH002-2000-REMAIN-NAME", "PH002-2000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                goto L_PH002_0000_EXIT;                                                                             //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_ERR_NAME.SetValue("1");                                                                       //COBOL==> MOVE '1' TO PH-ERR-NAME.
            if (returnLabel == "PH002-0000-CONVERT-NAME") { return; }  //Check for pass through to next method
        #endregion PH002-0000-CONVERT-NAME

        #region PH002-0000-EXIT
        L_PH002_0000_EXIT:;
            if (returnLabel == "PH002-0000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-0000-EXIT

        #region PH002-1000-INITIALIZE
        L_PH002_1000_INITIALIZE:;
            WS.PH_NAME_CRUNCH_INQ.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO PH-NAME-CRUNCH-INQ.
            WS.PH_NAME_REDUC_INQ.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO PH-NAME-REDUC-INQ.
            WS.PH_NAME_PARTS.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACES TO PH-NAME-PARTS.
            WS.PH_NAME_34_NUMERIC.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO PH-NAME-34-NUMERIC.
            WS.PH_HIT.SetValueWithSpaces();                                                                     //COBOL==> MOVE SPACES TO PH-HIT.
            WS.PH_NAME_17_NUMERIC.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO PH-NAME-17-NUMERIC.
            WS.PH_FNTIC_C1.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C2.
            WS.PH_FNTIC_C3.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C3.
            WS.PH_FNTIC_CX.SetValue(01);                                                                        //COBOL==> MOVE 01 TO PH-FNTIC-CX.
            WS.PH_SUSS_ID.SetValueWithZeroes();                                                                 //COBOL==> MOVE ZEROS TO PH-SUSS-ID.
            WS.PH_ERR_NAME.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-ERR-NAME.
            if (returnLabel == "PH002-1000-INITIALIZE") { return; }  //Check for pass through to next method
        #endregion PH002-1000-INITIALIZE

        #region PH002-1000-EXIT
        L_PH002_1000_EXIT:;
            if (returnLabel == "PH002-1000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-1000-EXIT

        #region PH002-2000-REMAIN-NAME
        L_PH002_2000_REMAIN_NAME:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     CONVERT REMAINDER OF NAME                                  *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_FNTIC_C3.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH002-2010-FINISH-NAME THRU PH002-2010-EXIT UNTIL PH-FNTIC-C3 > 17.
            {
                Perform("PH002-2010-FINISH-NAME", "PH002-2010-EXIT"); if (Control.ExitProgram) { return; }
            }
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C2.
            while (!(WS.PH_FNTIC_C1.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH002-2020-WRAP-UP THRU PH002-2020-EXIT UNTIL PH-FNTIC-C1 > 17.
            {
                Perform("PH002-2020-WRAP-UP", "PH002-2020-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnLabel == "PH002-2000-REMAIN-NAME") { return; }  //Check for pass through to next method
        #endregion PH002-2000-REMAIN-NAME

        #region PH002-2000-EXIT
        L_PH002_2000_EXIT:;
            if (returnLabel == "PH002-2000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2000-EXIT

        #region PH002-2010-FINISH-NAME
        L_PH002_2010_FINISH_NAME:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    IF ON THE LAST 2 CHARACTERS OF THE NAME THEN HANDLE         *
            //COMMENT:    SPERATELY.                                                  *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C3.IsEqualTo(17))                                                                   //COBOL==> IF PH-FNTIC-C3 = 17
            {
                Perform("PH002-2011-LAST-LETTER", "PH002-2011-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH002-2011-LAST-LETTER THRU PH002-2011-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                // next                                                                                             //COBOL==> NEXT SENTENCE.
            }
            if (WS.PH_FNTIC_C3.IsEqualTo(16))                                                                   //COBOL==> IF PH-FNTIC-C3 = 16
            {
                Perform("PH002-2901-BUILD-2-1", "PH002-2901-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM PH002-2901-BUILD-2-1 THRU PH002-2901-EXIT
                Perform("PH002-2012-CHECK-2-LETTERS", "PH002-2012-EXIT"); if (Control.ExitProgram) { return; }        //COBOL==> PERFORM PH002-2012-CHECK-2-LETTERS THRU PH002-2012-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                Perform("PH002-2014-MIDDLE-LETTERS", "PH002-2014-EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PH002-2014-MIDDLE-LETTERS THRU PH002-2014-EXIT.
            }
            if (returnLabel == "PH002-2010-FINISH-NAME") { return; }  //Check for pass through to next method
        #endregion PH002-2010-FINISH-NAME

        #region PH002-2010-EXIT
        L_PH002_2010_EXIT:;
            if (returnLabel == "PH002-2010-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2010-EXIT

        #region PH002-2011-LAST-LETTER
        L_PH002_2011_LAST_LETTER:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CONVERT LAST LETTER OF THE NAME                             *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_REDUC[17].IsSpaces())                                                                   //COBOL==> IF PH-L-REDUC ( 17 ) = SPACE
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_ONE_LETTER.SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C3.AsInt()]);                                   //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C3 ) TO PH-ONE-LETTER
                WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1
                WS.PH_SUSS_ID.SetValueWithZeroes();                                                                 //COBOL==> MOVE 0 TO PH-SUSS-ID
                WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX
                Perform("PH002-2011-1-RE-ONE", "PH002-2011-1-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PH002-2011-1-RE-ONE THRU PH002-2011-1-EXIT
                Perform("PH002-2011-2-CK-SU-ID", "PH002-2011-2-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PH002-2011-2-CK-SU-ID THRU PH002-2011-2-EXIT.
            }
            if (returnLabel == "PH002-2011-LAST-LETTER") { return; }  //Check for pass through to next method
        #endregion PH002-2011-LAST-LETTER

        #region PH002-2011-EXIT
        L_PH002_2011_EXIT:;
            if (returnLabel == "PH002-2011-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2011-EXIT

        #region PH002-2011-1-RE-ONE
        L_PH002_2011_1_RE_ONE:;
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                Perform("PH002-2903-REM-ONE", "PH002-2903-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnLabel == "PH002-2011-1-RE-ONE") { return; }  //Check for pass through to next method
        #endregion PH002-2011-1-RE-ONE

        #region PH002-2011-1-EXIT
        L_PH002_2011_1_EXIT:;
            if (returnLabel == "PH002-2011-1-EXIT") { return; }                                                 //COBOL==> EXIT.
        #endregion PH002-2011-1-EXIT

        #region PH002-2011-2-CK-SU-ID
        L_PH002_2011_2_CK_SU_ID:;
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX ) .
            }
            if (returnLabel == "PH002-2011-2-CK-SU-ID") { return; }  //Check for pass through to next method
        #endregion PH002-2011-2-CK-SU-ID

        #region PH002-2011-2-EXIT
        L_PH002_2011_2_EXIT:;
            if (returnLabel == "PH002-2011-2-EXIT") { return; }                                                 //COBOL==> EXIT.
        #endregion PH002-2011-2-EXIT

        #region PH002-2012-CHECK-2-LETTERS
        L_PH002_2012_CHECK_2_LETTERS:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   CONVERT LAST 2 LETTERS OF NAME.                              *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_TWO_LETTERS.IsSpaces())                                                                   //COBOL==> IF PH-TWO-LETTERS = SPACES
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                goto L_PH002_2012_EXIT;                                                                             //COBOL==> GO TO PH002-2012-EXIT.
            }
            WS.PH_CR2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR2-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR2-INDXX.
            while (!(WS.PH_CR2_INDXX.IsGreaterThan(9)))                                                         //COBOL==> PERFORM PH002-2902-REM-TWO THRU PH002-2902-EXIT UNTIL PH-CR2-INDXX > 9.
            {
                Perform("PH002-2902-REM-TWO", "PH002-2902-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                goto L_PH002_2012_EXIT;                                                                             //COBOL==> GO TO PH002-2012-EXIT.
            }
            WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX.
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                Perform("PH002-2903-REM-ONE", "PH002-2903-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3.
            }
            if (returnLabel == "PH002-2012-CHECK-2-LETTERS") { return; }  //Check for pass through to next method
        #endregion PH002-2012-CHECK-2-LETTERS

        #region PH002-2012-EXIT
        L_PH002_2012_EXIT:;
            if (returnLabel == "PH002-2012-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2012-EXIT

        #region PH002-2014-MIDDLE-LETTERS
        L_PH002_2014_MIDDLE_LETTERS:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    THE FOLLOWING WILL CONVERT THE MIDDLE CHARATERS OF THE NAME.*
            //COMMENT: ---------------------------------------------------------------*
            Perform("PH002-2900-BUILD-3-2-1", "PH002-2900-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH002-2900-BUILD-3-2-1 THRU PH002-2900-EXIT.
            if (WS.PH_THREE_LETTERS.IsSpaces())                                                                 //COBOL==> IF PH-THREE-LETTERS = SPACES
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                goto L_PH002_2014_EXIT;                                                                             //COBOL==> GO TO PH002-2014-EXIT.
            }
            if (WS.PH_THREE_LETTERS.IsEqualTo("SCH"))                                                           //COBOL==> IF PH-THREE-LETTERS = 'SCH'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue("06");                                           //COBOL==> MOVE '06' TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(3);                                                                              //COBOL==> ADD 3 TO PH-FNTIC-C3
                goto L_PH002_2014_EXIT;                                                                             //COBOL==> GO TO PH002-2014-EXIT.
            }
            WS.PH_CR2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR2-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR2-INDXX.
            while (!(WS.PH_CR2_INDXX.IsGreaterThan(9)))                                                         //COBOL==> PERFORM PH002-2902-REM-TWO THRU PH002-2902-EXIT UNTIL PH-CR2-INDXX > 9.
            {
                Perform("PH002-2902-REM-TWO", "PH002-2902-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(2);                                                                              //COBOL==> ADD 2 TO PH-FNTIC-C3
                goto L_PH002_2014_EXIT;                                                                             //COBOL==> GO TO PH002-2014-EXIT.
            }
            WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX.
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                Perform("PH002-2903-REM-ONE", "PH002-2903-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3.
            }
            if (returnLabel == "PH002-2014-MIDDLE-LETTERS") { return; }  //Check for pass through to next method
        #endregion PH002-2014-MIDDLE-LETTERS

        #region PH002-2014-EXIT
        L_PH002_2014_EXIT:;
            if (returnLabel == "PH002-2014-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2014-EXIT

        #region PH002-2020-WRAP-UP
        L_PH002_2020_WRAP_UP:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   REDUCES THE 34 BYTE PHONETIC VALUE NAME TO A 17 BYTE         *
            //COMMENT:   PHONETIC VALUE.                                              *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_REFMT_34_17.SetValue(WS.PH_NAME_NUM_34[WS.PH_FNTIC_C1.AsInt()]);                              //COBOL==> MOVE PH-NAME-NUM-34 ( PH-FNTIC-C1 ) TO PH-REFMT-34-17.
            if (WS.PH_DIGIT_1.IsSpaces())                                                                       //COBOL==> IF PH-DIGIT-1 = SPACE
            {
                Perform("PH002-2021-DIGIT-1", "PH002-2021-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM PH002-2021-DIGIT-1 THRU PH002-2021-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_1);                                  //COBOL==> MOVE PH-DIGIT-1 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 )
                Perform("PH002-2022-DIGIT-2", "PH002-2022-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM PH002-2022-DIGIT-2 THRU PH002-2022-EXIT.
            }
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (returnLabel == "PH002-2020-WRAP-UP") { return; }  //Check for pass through to next method
        #endregion PH002-2020-WRAP-UP

        #region PH002-2020-EXIT
        L_PH002_2020_EXIT:;
            if (returnLabel == "PH002-2020-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2020-EXIT

        #region PH002-2021-DIGIT-1
        L_PH002_2021_DIGIT_1:;
            if (WS.PH_DIGIT_2.IsSpaces())                                                                       //COBOL==> IF PH-DIGIT-2 = SPACE
            {
                WS.PH_FNTIC_C1.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C1
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_2);                                  //COBOL==> MOVE PH-DIGIT-2 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 ) .
            }
            if (returnLabel == "PH002-2021-DIGIT-1") { return; }  //Check for pass through to next method
        #endregion PH002-2021-DIGIT-1

        #region PH002-2021-EXIT
        L_PH002_2021_EXIT:;
            if (returnLabel == "PH002-2021-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2021-EXIT

        #region PH002-2022-DIGIT-2
        L_PH002_2022_DIGIT_2:;
            if (!(WS.PH_DIGIT_2.IsSpaces()))                                                                    //COBOL==> IF PH-DIGIT-2 NOT EQUAL SPACE
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_2);                                  //COBOL==> MOVE PH-DIGIT-2 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 ) .
            }
            if (returnLabel == "PH002-2022-DIGIT-2") { return; }  //Check for pass through to next method
        #endregion PH002-2022-DIGIT-2

        #region PH002-2022-EXIT
        L_PH002_2022_EXIT:;
            if (returnLabel == "PH002-2022-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2022-EXIT

        #region PH002-3000-FIRST-2-LETTERS
        L_PH002_3000_FIRST_2_LETTERS:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST 2 LETTERS OF NAME                *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_CF2_INDXX.IsGreaterThan(17)))                                                        //COBOL==> PERFORM PH002-3010-FIRST-2 THRU PH002-3010-EXIT UNTIL PH-CF2-INDXX > 17.
            {
                Perform("PH002-3010-FIRST-2", "PH002-3010-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnLabel == "PH002-3000-FIRST-2-LETTERS") { return; }  //Check for pass through to next method
        #endregion PH002-3000-FIRST-2-LETTERS

        #region PH002-3000-EXIT
        L_PH002_3000_EXIT:;
            if (returnLabel == "PH002-3000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-3000-EXIT

        #region PH002-3010-FIRST-2
        L_PH002_3010_FIRST_2:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST 2 LETTERS OF NAME.               *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPH2[WS.PH_CF2_INDEX.AsInt()].IsEqualTo(WS.PH_TWO_LETTERS))                              //COBOL==> IF PH-ALPH2 ( PH-CF2-INDEX ) = PH-TWO-LETTERS
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUM2[WS.PH_CF2_INDEX.AsInt()]);                                            //COBOL==> MOVE PH-NUM2 ( PH-CF2-INDEX ) TO PH-HIT
                WS.PH_CF2_INDXX.SetValue(18);                                                                       //COBOL==> MOVE 18 TO PH-CF2-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CF2_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CF2-INDXX
                WS.PH_CF2_INDEX.Add(1);                                                                             //COBOL==> SET PH-CF2-INDEX UP BY 1.
            }
            if (returnLabel == "PH002-3010-FIRST-2") { return; }  //Check for pass through to next method
        #endregion PH002-3010-FIRST-2

        #region PH002-3010-EXIT
        L_PH002_3010_EXIT:;
            if (returnLabel == "PH002-3010-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-3010-EXIT

        #region PH002-4000-FIRST-1-LETTER
        L_PH002_4000_FIRST_1_LETTER:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR 1ST LETTER OF NAME                     *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_CF1_INDXX.IsGreaterThan(26)))                                                        //COBOL==> PERFORM PH002-4010-FIRST-1 THRU PH002-4010-EXIT UNTIL PH-CF1-INDXX > 26.
            {
                Perform("PH002-4010-FIRST-1", "PH002-4010-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnLabel == "PH002-4000-FIRST-1-LETTER") { return; }  //Check for pass through to next method
        #endregion PH002-4000-FIRST-1-LETTER

        #region PH002-4000-EXIT
        L_PH002_4000_EXIT:;
            if (returnLabel == "PH002-4000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-4000-EXIT

        #region PH002-4010-FIRST-1
        L_PH002_4010_FIRST_1:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST LETTER OF NAME                   *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPH1[WS.PH_CF1_INDEX.AsInt()].IsEqualTo(WS.PH_ONE_LETTER))                               //COBOL==> IF PH-ALPH1 ( PH-CF1-INDEX ) = PH-ONE-LETTER
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUM1[WS.PH_CF1_INDEX.AsInt()]);                                            //COBOL==> MOVE PH-NUM1 ( PH-CF1-INDEX ) TO PH-HIT
                WS.PH_CF1_INDXX.SetValue(27);                                                                       //COBOL==> MOVE 27 TO PH-CF1-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CF1_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CF1-INDXX
                WS.PH_CF1_INDEX.Add(1);                                                                             //COBOL==> SET PH-CF1-INDEX UP BY 1.
            }
            if (returnLabel == "PH002-4010-FIRST-1") { return; }  //Check for pass through to next method
        #endregion PH002-4010-FIRST-1

        #region PH002-4010-EXIT
        L_PH002_4010_EXIT:;
            if (returnLabel == "PH002-4010-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-4010-EXIT

        #region PH002-2900-BUILD-3-2-1
        L_PH002_2900_BUILD_3_2_1:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     SETS UP THE 3 LETTER FIELD                                 *
            //COMMENT: ---------------------------------------------------------------*
            Perform("PH002-2901-BUILD-2-1", "PH002-2901-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM PH002-2901-BUILD-2-1 THRU PH002-2901-EXIT.
            WS.PH_FNTIC_C2.SetValue(2 + WS.PH_FNTIC_C3.AsDecimal());                                            //COBOL==> ADD 2 PH-FNTIC-C3 GIVING PH-FNTIC-C2.
            WS.PH_LETTERS_3[3].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C2 ) TO PH-LETTERS-3 ( 3 ) .
            if (returnLabel == "PH002-2900-BUILD-3-2-1") { return; }  //Check for pass through to next method
        #endregion PH002-2900-BUILD-3-2-1

        #region PH002-2900-EXIT
        L_PH002_2900_EXIT:;
            if (returnLabel == "PH002-2900-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2900-EXIT

        #region PH002-2901-BUILD-2-1
        L_PH002_2901_BUILD_2_1:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    SETS UP FIELDS TO CHECK 2 LETTERS AND 1 LETTER              *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_LETTERS_3[1].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C3.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C3 ) TO PH-LETTERS-3 ( 1 ) .
            WS.PH_FNTIC_C2.SetValue(1 + WS.PH_FNTIC_C3.AsDecimal());                                            //COBOL==> ADD 1 PH-FNTIC-C3 GIVING PH-FNTIC-C2.
            WS.PH_LETTERS_3[2].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C2 ) TO PH-LETTERS-3 ( 2 ) .
            WS.PH_LETTERS_3[3].SetValueWithSpaces();                                                            //COBOL==> MOVE SPACE TO PH-LETTERS-3 ( 3 ) .
            WS.PH_TWO_LETTERS.SetValue(WS.PH_THREE_LETTERS);                                                    //COBOL==> MOVE PH-THREE-LETTERS TO PH-TWO-LETTERS.
            WS.PH_ONE_LETTER.SetValue(WS.PH_THREE_LETTERS);                                                     //COBOL==> MOVE PH-THREE-LETTERS TO PH-ONE-LETTER.
            if (returnLabel == "PH002-2901-BUILD-2-1") { return; }  //Check for pass through to next method
        #endregion PH002-2901-BUILD-2-1

        #region PH002-2901-EXIT
        L_PH002_2901_EXIT:;
            if (returnLabel == "PH002-2901-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2901-EXIT

        #region PH002-2902-REM-TWO
        L_PH002_2902_REM_TWO:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    SEARCHES REMAINING 2 LETTER TABLE                           *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPHR2[WS.PH_CR2_INDEX.AsInt()].IsEqualTo(WS.PH_TWO_LETTERS))                             //COBOL==> IF PH-ALPHR2 ( PH-CR2-INDEX ) = PH-TWO-LETTERS
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUMR2[WS.PH_CR2_INDEX.AsInt()]);                                           //COBOL==> MOVE PH-NUMR2 ( PH-CR2-INDEX ) TO PH-HIT
                WS.PH_CR2_INDXX.SetValue(10);                                                                       //COBOL==> MOVE 10 TO PH-CR2-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CR2_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CR2-INDXX
                WS.PH_CR2_INDEX.Add(1);                                                                             //COBOL==> SET PH-CR2-INDEX UP BY 1.
            }
            if (returnLabel == "PH002-2902-REM-TWO") { return; }  //Check for pass through to next method
        #endregion PH002-2902-REM-TWO

        #region PH002-2902-EXIT
        L_PH002_2902_EXIT:;
            if (returnLabel == "PH002-2902-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH002-2902-EXIT

        #region PH002-2903-REM-ONE
        L_PH002_2903_REM_ONE:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     SEARCHES REMAINING 1 LETTER TABLE                          *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPHR1[WS.PH_CR1_INDEX.AsInt()].IsEqualTo(WS.PH_ONE_LETTER))                              //COBOL==> IF PH-ALPHR1 ( PH-CR1-INDEX ) = PH-ONE-LETTER
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUMR1[WS.PH_CR1_INDEX.AsInt()]);                                           //COBOL==> MOVE PH-NUMR1 ( PH-CR1-INDEX ) TO PH-HIT
                WS.PH_CR1_INDXX.SetValue(19);                                                                       //COBOL==> MOVE 19 TO PH-CR1-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CR1_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CR1-INDXX
                WS.PH_CR1_INDEX.Add(1);                                                                             //COBOL==> SET PH-CR1-INDEX UP BY 1.
            }
            if (returnLabel == "PH002-2903-REM-ONE") { return; }  //Check for pass through to next method
        #endregion PH002-2903-REM-ONE

        #region PH002-2903-EXIT
        L_PH002_2903_EXIT:;
            if (returnLabel == "PH002-2903-EXIT") { return; }                                                   //COBOL==> EXIT.
        ///COMMENT: ********************************************
        ///COMMENT: ***  THIS IS THE END OF MODULE SWAPH002   **
        ///COMMENT: ********************************************
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH003                                       *
        ///COMMENT:   DESCRIPTION:  REMOVE DUPLICATE LETTERS AND EMBEDDED BLANKS   *
        ///COMMENT:                 AND SPECIAL CHARACTERS (INCLUDING NUMBERS).    *
        ///COMMENT:                 ALSO REMOVE ANY NAME SUFFIX (JR, SR, ETC).     *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:  12/12/03 PAM LEAK I21982 UPDATE PHOENTIC SEARCH TO INCLUDE    *
        ///COMMENT:                           SUFFIX I,III,V,VI,VII,VIII,DR,RN,MD, *
        ///COMMENT:                           PHD                                  *
        ///COMMENT: ****************************************************************
        #endregion PH002-2903-EXIT

        #region PH003-0000-CRUNCH-NAME
        L_PH003_0000_CRUNCH_NAME:;
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE 0 TO PH-FNTIC-C2.
            Perform("PH003-0500-REMOVE-SUFFIX", "PH003-0500-EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM PH003-0500-REMOVE-SUFFIX THRU PH003-0500-EXIT.
            while (!(WS.PH_FNTIC_C1.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH003-1000-CRUNCH-REM THRU PH003-1000-EXIT UNTIL PH-FNTIC-C1 > 17.
            {
                Perform("PH003-1000-CRUNCH-REM", "PH003-1000-EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnLabel == "PH003-0000-CRUNCH-NAME") { return; }  //Check for pass through to next method
        #endregion PH003-0000-CRUNCH-NAME

        #region PH003-0000-EXIT
        L_PH003_0000_EXIT:;
            if (returnLabel == "PH003-0000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH003-0000-EXIT

        #region PH003-0500-REMOVE-SUFFIX
        L_PH003_0500_REMOVE_SUFFIX:;
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " JR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' JR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",JR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',JR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " SR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' SR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",SR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',SR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " DR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' DR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",DR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',DR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " RN", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' RN' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",RN", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',RN' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " MD", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' MD' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",MD", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',MD' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " PHD", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' PHD' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",PHD", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',PHD' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " III", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' III' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",III", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',III' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " II", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' II' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",II", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',II' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " I", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' I' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",I", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',I' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " IV", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' IV' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",IV", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',IV' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VIII", "     ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VIII' BY '     '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VIII", "     ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VIII' BY '     '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VII", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VII' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VII", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VII' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VI", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VI' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VI", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VI' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " V", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' V' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",V", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',V' BY '  '.
            if (returnLabel == "PH003-0500-REMOVE-SUFFIX") { return; }  //Check for pass through to next method
        #endregion PH003-0500-REMOVE-SUFFIX

        #region PH003-0500-EXIT
        L_PH003_0500_EXIT:;
            if (returnLabel == "PH003-0500-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH003-0500-EXIT

        #region PH003-1000-CRUNCH-REM
        L_PH003_1000_CRUNCH_REM:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    REMOVE BLANKS, DOUBLE LETTERS, NUMBERS, AND SPECIAL         *
            //COMMENT:    CHARACTERS.                                                 *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C1.IsEqualTo(17))                                                                   //COBOL==> IF PH-FNTIC-C1 = 17
            {
                Perform("PH003-1020-CHECK-SPACE", "PH003-1020-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH003-1020-CHECK-SPACE THRU PH003-1020-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_CX.SetValue(1 + WS.PH_FNTIC_C1.AsDecimal());                                            //COBOL==> ADD 1 PH-FNTIC-C1 GIVING PH-FNTIC-CX
                Perform("PH003-1010-CHECK-DUP", "PH003-1010-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM PH003-1010-CHECK-DUP THRU PH003-1010-EXIT.
            }
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (returnLabel == "PH003-1000-CRUNCH-REM") { return; }  //Check for pass through to next method
        #endregion PH003-1000-CRUNCH-REM

        #region PH003-1000-EXIT
        L_PH003_1000_EXIT:;
            if (returnLabel == "PH003-1000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH003-1000-EXIT

        #region PH003-1010-CHECK-DUP
        L_PH003_1010_CHECK_DUP:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CHECK FOR DUPLICATE LETTERS                                 *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_CRNCH[WS.PH_FNTIC_CX.AsInt()]))         //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) = PH-L-CRNCH ( PH-FNTIC-CX )
            {
                goto EndOfSentence_2;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                Perform("PH003-1020-CHECK-SPACE", "PH003-1020-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH003-1020-CHECK-SPACE THRU PH003-1020-EXIT.
            }
        EndOfSentence_2:;
            if (returnLabel == "PH003-1010-CHECK-DUP") { return; }  //Check for pass through to next method
        #endregion PH003-1010-CHECK-DUP

        #region PH003-1010-EXIT
        L_PH003_1010_EXIT:;
            if (returnLabel == "PH003-1010-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH003-1010-EXIT

        #region PH003-1020-CHECK-SPACE
        L_PH003_1020_CHECK_SPACE:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CHECK A SPACE, A NUMBER, OR A SPECIAL CHARACTER IN          *
            //COMMENT:    A GIVEN POSITION.                                           *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) = SPACE
            {
                goto EndOfSentence_3;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsAlphabetic())                                           //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) IS ALPHABETIC
                {
                    WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                    WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()]);              //COBOL==> MOVE PH-L-CRNCH ( PH-FNTIC-C1 ) TO PH-L-REDUC ( PH-FNTIC-C2 )
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    // next                                                                                             //COBOL==> NEXT SENTENCE.
                }
            }
        EndOfSentence_3:;
            if (returnLabel == "PH003-1020-CHECK-SPACE") { return; }  //Check for pass through to next method
        #endregion PH003-1020-CHECK-SPACE

        #region PH003-1020-EXIT
        L_PH003_1020_EXIT:;
            if (returnLabel == "PH003-1020-EXIT") { return; }                                                   //COBOL==> EXIT.
        ///COMMENT: ********************************
        ///COMMENT: ***   END MODULE SWAPH003   ****
        ///COMMENT: ********************************
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH004                                       *
        ///COMMENT:   DESCRIPTION:  COMPUTE PERCENTAGE OF LIKENESS BETWEEN THE     *
        ///COMMENT:                 INQUIRY NAME AND THE DATABASE NAME. BOTH NAMES *
        ///COMMENT:                 HAVE HAD DUPLICATE LETTERS AND EMBEDDED BLANKS *
        ///COMMENT:                 REMOVED.                                       *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:                                                                *
        ///COMMENT: ****************************************************************
        #endregion PH003-1020-EXIT

        #region PH004-0000-LIKENESS
        L_PH004_0000_LIKENESS:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      REMOVE DUPLICATE LETTERS AND EMBEDDED BLANKS FROM THE     *
            //COMMENT:      DATABASE NAME.                                            *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_NAME_CRUNCH_INQ.SetValue(WS.PH_NAME_RAW_MSTR);                                                //COBOL==> MOVE PH-NAME-RAW-MSTR TO PH-NAME-CRUNCH-INQ.
            WS.PH_NAME_REDUC_INQ.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO PH-NAME-REDUC-INQ.
            Perform("PH003-0000-CRUNCH-NAME", "PH003-0000-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM PH003-0000-CRUNCH-NAME THRU PH003-0000-EXIT.
                                                                                                                  //COMMENT: ---------------------------------------------------------------*
                                                                                                                  //COMMENT:      INITIALIZE FIELDS.                                        *
                                                                                                                  //COMMENT: ---------------------------------------------------------------*
            WS.PH_COUNT_UP.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-COUNT-UP.
            WS.PH_DEGREE.SetValueWithZeroes();                                                                  //COBOL==> MOVE ZEROS TO PH-DEGREE.
            WS.PH_L1.SetValueWithZeroes();                                                                      //COBOL==> MOVE ZEROS TO PH-L1.
            WS.PH_COUNT_INQUIRY.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO PH-COUNT-INQUIRY.
            WS.PH_COUNT_DB.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-COUNT-DB.
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                Perform("PH004-1000-CHECK-DEGREE", "PH004-1000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT
                goto L_PH004_0000_EXIT;                                                                             //COBOL==> GO TO PH004-0000-EXIT.
            }
            WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                Perform("PH004-1000-CHECK-DEGREE", "PH004-1000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT
                goto L_PH004_0000_EXIT;                                                                             //COBOL==> GO TO PH004-0000-EXIT.
            }
            Perform("PH004-1000-CHECK-DEGREE", "PH004-1000-EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT.
            if (returnLabel == "PH004-0000-LIKENESS") { return; }  //Check for pass through to next method
        #endregion PH004-0000-LIKENESS

        #region PH004-0000-EXIT
        L_PH004_0000_EXIT:;
            if (returnLabel == "PH004-0000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH004-0000-EXIT

        #region PH004-1000-CHECK-DEGREE
        L_PH004_1000_CHECK_DEGREE:;
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            while (!(WS.PH_L1.IsEqualTo(1)))                                                                    //COBOL==> PERFORM PH004-1100-PROCESS-DEGREE THRU PH004-1100-EXIT UNTIL PH-L1 = 1.
            {
                Perform("PH004-1100-PROCESS-DEGREE", "PH004-1100-EXIT"); if (Control.ExitProgram) { return; }
            }
            WS.PH_L1.SetValueWithZeroes();                                                                      //COBOL==> MOVE 0 TO PH-L1.
            WS.PH_FNTIC_C1.SetValueWithZeroes();                                                                //COBOL==> MOVE 0 TO PH-FNTIC-C1.
            while (!(WS.PH_L1.IsEqualTo(1)))                                                                    //COBOL==> PERFORM PH004-1200-COUNT-DIGITS THRU PH004-1200-EXIT UNTIL PH-L1 = 1.
            {
                Perform("PH004-1200-COUNT-DIGITS", "PH004-1200-EXIT"); if (Control.ExitProgram) { return; }
            }
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COMPUTE DEGREE OF LIKENESS.                               *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_COUNT_INQUIRY.IsGreaterThan(WS.PH_COUNT_DB))                                              //COBOL==> IF PH-COUNT-INQUIRY > PH-COUNT-DB
            {
                WS.PH_DEGREE.SetValue(Math.Round(WS.PH_COUNT_UP.AsDecimal() / WS.PH_COUNT_INQUIRY.AsDecimal(), WS.PH_DEGREE.DecimalDigits, MidpointRounding.AwayFromZero));  //COBOL==> DIVIDE PH-COUNT-UP BY PH-COUNT-INQUIRY GIVING PH-DEGREE ROUNDED
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_DEGREE.SetValue(Math.Round(WS.PH_COUNT_UP.AsDecimal() / WS.PH_COUNT_DB.AsDecimal(), WS.PH_DEGREE.DecimalDigits, MidpointRounding.AwayFromZero));  //COBOL==> DIVIDE PH-COUNT-UP BY PH-COUNT-DB GIVING PH-DEGREE ROUNDED.
            }
            if (returnLabel == "PH004-1000-CHECK-DEGREE") { return; }  //Check for pass through to next method
        #endregion PH004-1000-CHECK-DEGREE

        #region PH004-1000-EXIT
        L_PH004_1000_EXIT:;
            if (returnLabel == "PH004-1000-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH004-1000-EXIT

        #region PH004-1100-PROCESS-DEGREE
        L_PH004_1100_PROCESS_DEGREE:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COMPARE LETTERS IN THE INQUIRY NAME TO LETTERS IN THE     *
            //COMMENT:      DATABASE NAME.                                            *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C1.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C1 > 17
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C1);                                                            //COBOL==> MOVE PH-FNTIC-C1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = SPACE
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
            }
            if (WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C2 ) = SPACE
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
            if (WS.PH_FNTIC_C2.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C2 > 17
            {
                WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C2.AsInt() - 2);                                                //COBOL==> SUBTRACT 2 FROM PH-FNTIC-C2
                if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
                {
                    WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                    WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                    goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                    goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
                }
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                goto L_PH004_1100_EXIT;                                                                             //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C2.AsInt() - 2);                                                //COBOL==> SUBTRACT 2 FROM PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            }
            if (returnLabel == "PH004-1100-PROCESS-DEGREE") { return; }  //Check for pass through to next method
        #endregion PH004-1100-PROCESS-DEGREE

        #region PH004-1100-EXIT
        L_PH004_1100_EXIT:;
            if (returnLabel == "PH004-1100-EXIT") { return; }                                                   //COBOL==> EXIT.
        #endregion PH004-1100-EXIT

        #region PH004-1200-COUNT-DIGITS
        L_PH004_1200_COUNT_DIGITS:;
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COUNT THE DIGITS IN THE INQUIRY AND DATABASE NAMES.       *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (WS.PH_FNTIC_C1.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C1 > 17
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                goto L_PH004_1200_EXIT;                                                                             //COBOL==> GO TO PH004-1200-EXIT.
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = SPACES
            {
                if (WS.PH_L_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C1 ) = SPACES
                {
                    WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.PH_COUNT_DB.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-DB
                }                                                                                                   //COBOL==> ELSE
            }
            else
            {
                WS.PH_COUNT_INQUIRY.Add(1);                                                                         //COBOL==> ADD 1 TO PH-COUNT-INQUIRY
                if (WS.PH_L_REDUC[WS.PH_FNTIC_C1.AsInt()].IsGreaterThan(SPACES))                                    //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C1 ) > SPACES
                {
                    WS.PH_COUNT_DB.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-DB.
                }
            }
            if (returnLabel == "PH004-1200-COUNT-DIGITS") { return; }  //Check for pass through to next method
        #endregion PH004-1200-COUNT-DIGITS

        #region PH004-1200-EXIT
        L_PH004_1200_EXIT:;
            if (returnLabel == "PH004-1200-EXIT") { return; }                                                   //COBOL==> EXIT.
        ///COMMENT: ************************
        ///COMMENT: **  END OF SWAPH004  ***
        ///COMMENT: ************************
        #endregion PH004-1200-EXIT

        #region PARA-0329211337-INIT
        L_PARA_0329211337_INIT:;
            LS.EXPORT_NEXT_0006EV.ResetToInitialValue();                                                        //COBOL==> INITIALIZE EXPORT-NEXT-0006EV
            LS.EXPORT_0007EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0007EV
            WS.GROUP_EXPORT_0001PS.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO GROUP-EXPORT-0001PS
            LS.GROUP_EXPORT_0001RG.ResetToInitialValue();                                                       //COBOL==> INITIALIZE GROUP-EXPORT-0001RG .
            if (returnLabel == "PARA-0329211337-INIT") { return; }  //Check for pass through to next method
        #endregion PARA-0329211337-INIT

        #region PARA-0329211337-INIT-EXIT
        L_PARA_0329211337_INIT_EXIT:;
            if (returnLabel == "PARA-0329211337-INIT-EXIT") { return; }                                         //COBOL==> EXIT.
        ///COMMENT: ** GQB 03/28/2014 - CLIENT POINTER INFORMATION CODE AREA
        ///COMMENT: ****************************************************************
        ///COMMENT:                                                                *
        ///COMMENT:  INCLUDE NAME:  SWCSZG88.                                      *
        ///COMMENT:      EAB NAME:  EXTERNAL PROGRAMS CONVERTED TO DB2             *
        ///COMMENT:   DESCRIPTION:  98000-SELECT-CLIENT-BASIC.                     *
        ///COMMENT:                 99000-CLIENT-POINTER-ROUTINE.                  *
        ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                            *
        ///COMMENT:                                                                *
        ///COMMENT:       ACTIONS:  1. SELECT KSD_CLIENT
        ///COMMENT:                    USING CLIENT NUMBER, CLIENT NAME, CLIENT SSN
        ///COMMENT:                      RETURN VERIFIED-SSN-FLAG
        ///COMMENT:                 2. FETCH KSD_SYSTEM_PART
        ///COMMENT:                    USING CLIENT NUMBER, CLIENT NAME, CLIENT SSN
        ///COMMENT:                      RETURN SYSTEM CODE, PARTICIPATION FLAG
        ///COMMENT:                 3. POPULATE CLIENT POINTER WITH RETURN FIELDS
        ///COMMENT:       CREATED:  27-FEB-2014.
        ///COMMENT:            BY:  GQB - GADI BRAMSON                             *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                       CHANGE
        ///COMMENT:    DATE      AUTHOR   CONTROL DESCRIPTION
        ///COMMENT:  ---------- --------- ------- ----------------------------------
        ///COMMENT:  02/17/2014 G.BRAMSON CQ35825 ADABAS TO DB2 KEES PHASE 3 CHANGES
        ///COMMENT:  02/27/2014 G.BRAMSON CQ35825 BUILD AND RETURN CLIENT POINTER
        ///COMMENT:  03/04/2014 G.BRAMSON CQ35825 READ CLIENT BASIC
        ///COMMENT:  03/05/2014 G.BRAMSON CQ35825 CONVERT DATES ADABAS TO DB2 VERS.
        ///COMMENT:  07/24/2014 G.BRAMSON CQ35825 SKIP CLIENT SELECT DEPENDING FLAG.
        ///COMMENT:  08/29/2017 RKM               ADD WITH UR TO QUERIES
        ///COMMENT: ****************************************************************
        ///COMMENT: -----------------------------------------------------------------
        #endregion PARA-0329211337-INIT-EXIT

        #region 91100-CONVERT-DATE-ADA-TO-DB2
        L_91100_CONVERT_DATE_ADA_TO_DB2:;
            //COMMENT: -----------------------------------------------------------------
            // EvaluateList !TRUE!                                                                              //COBOL==> EVALUATE TRUE
            if ((WS.WS9_DATE_ADA.IsSpaces()) || (WS.WS9_DATE_ADA.IsEqualTo(0)))                             //COBOL==> WHEN WS9-DATE-ADA = SPACE OR WS9-DATE-ADA = ZERO
            {
                WS.WS9_DATE_ADA.SetValue("00010101");                                                               //COBOL==> MOVE '00010101' TO WS9-DATE-ADA
            }                                                                                               //COBOL==> WHEN WS9-DATE-ADA = '99999999'
            else
            if (WS.WS9_DATE_ADA.IsEqualTo("99999999"))
            {
                WS.WS9_DATE_ADA.SetValue("20991231");                                                               //COBOL==> MOVE '20991231' TO WS9-DATE-ADA
            }                                                                                                   //COBOL==> END-EVALUATE.
            WS.WS9_DATE_DB2.SetValueOfSubstring(5, 1, "-");                                                     //COBOL==> MOVE '-' TO WS9-DATE-DB2 ( 5:1 ) WS9-DATE-DB2 ( 8:1 ) .
            WS.WS9_DATE_DB2.SetValueOfSubstring(8, 1, "-");
            WS.WS9_DATE_DB2.SetValueOfSubstring(1, 4, WS.WS9_DATE_ADA.GetSubstring(1, 4).AsString());           //COBOL==> MOVE WS9-DATE-ADA ( 1:4 ) TO WS9-DATE-DB2 ( 1:4 ) .
            WS.WS9_DATE_DB2.SetValueOfSubstring(6, 2, WS.WS9_DATE_ADA.GetSubstring(5, 2).AsString());           //COBOL==> MOVE WS9-DATE-ADA ( 5:2 ) TO WS9-DATE-DB2 ( 6:2 ) .
            WS.WS9_DATE_DB2.SetValueOfSubstring(9, 2, WS.WS9_DATE_ADA.GetSubstring(7, 2).AsString());           //COBOL==> MOVE WS9-DATE-ADA ( 7:2 ) TO WS9-DATE-DB2 ( 9:2 ) .
            if (returnLabel == "91100-CONVERT-DATE-ADA-TO-DB2") { return; }  //Check for pass through to next method
        #endregion 91100-CONVERT-DATE-ADA-TO-DB2

        #region 91100-EXIT
        L_91100_EXIT:;
            if (returnLabel == "91100-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 91100-EXIT

        #region 91200-CONVERT-DATE-DB2-TO-ADA
        L_91200_CONVERT_DATE_DB2_TO_ADA:;
            //COMMENT: -----------------------------------------------------------------
            WS.WS9_DATE_ADA.SetValueOfSubstring(1, 4, WS.WS9_DATE_DB2.GetSubstring(1, 4).AsString());           //COBOL==> MOVE WS9-DATE-DB2 ( 1:4 ) TO WS9-DATE-ADA ( 1:4 ) .
            WS.WS9_DATE_ADA.SetValueOfSubstring(5, 2, WS.WS9_DATE_DB2.GetSubstring(6, 2).AsString());           //COBOL==> MOVE WS9-DATE-DB2 ( 6:2 ) TO WS9-DATE-ADA ( 5:2 ) .
            WS.WS9_DATE_ADA.SetValueOfSubstring(7, 2, WS.WS9_DATE_DB2.GetSubstring(9, 2).AsString());           //COBOL==> MOVE WS9-DATE-DB2 ( 9:2 ) TO WS9-DATE-ADA ( 7:2 ) .
            if (returnLabel == "91200-CONVERT-DATE-DB2-TO-ADA") { return; }  //Check for pass through to next method
        #endregion 91200-CONVERT-DATE-DB2-TO-ADA

        #region 91200-EXIT
        L_91200_EXIT:;
            if (returnLabel == "91200-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 91200-EXIT

        #region 98000-SELECT-CLIENT-BASIC
        L_98000_SELECT_CLIENT_BASIC:;
            //COMMENT: -----------------------------------------------------------------
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.ExecuteSqlQueryWithUR("SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , SSN , GENDER , DATE_OF_BIRTH INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {8} ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , SSN , GENDER , DATE_OF_BIRTH INTO :CLB9-CLIENT-NUMBER , :CLB9-CLIENT-GIVEN-NAME , :CLB9-CLIENT-INITIALS , :CLB9-CLIENT-SURNAME , :CLB9-CIS-REPL-IND , :CLB9-SSN , :CLB9-GENDER , :CLB9-DATE-OF-BIRTH FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :DBK9-CLIENT-NUMBER WITH UR END-EXEC.
                                 WS.CLB9_CLIENT_NUMBER, WS.CLB9_CLIENT_GIVEN_NAME, WS.CLB9_CLIENT_INITIALS, WS.CLB9_CLIENT_SURNAME, WS.CLB9_CIS_REPL_IND, WS.CLB9_SSN, WS.CLB9_GENDER, WS.CLB9_DATE_OF_BIRTH, WS.DBK9_CLIENT_NUMBER);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(154);                                                               //COBOL==> MOVE 154 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue(" NF");                                                             //COBOL==> MOVE ' NF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO WS9-ADA-RESPONSE-CD
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(154);                                                               //COBOL==> MOVE 154 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RI");                                                              //COBOL==> MOVE 'RI' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "98000-SELECT-CLIENT-BASIC") { return; }  //Check for pass through to next method
        #endregion 98000-SELECT-CLIENT-BASIC

        #region 98000-EXIT
        L_98000_EXIT:;
            if (returnLabel == "98000-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 98000-EXIT

        #region 98100-SELECT-CLIENT
        L_98100_SELECT_CLIENT:;
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '98100-SELECT-CLIENT:' SW9-SELECT-CLIENT-SW
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.ExecuteSqlQueryWithUR("SELECT VERIFIED_SSN_FLAG INTO {0} FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = {1} AND CLIENT_NAME = {2} AND SSN = {3} ",  //COBOL==> EXEC SQL SELECT VERIFIED_SSN_FLAG INTO :CL9-VERIFIED-SSN-FLAG FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER AND CLIENT_NAME = :DBK9-CLIENT-NAME AND SSN = :DBK9-SSN WITH UR END-EXEC.
                                 WS.CL9_VERIFIED_SSN_FLAG, WS.DBK9_CLIENT_NUMBER, WS.DBK9_CLIENT_NAME, WS.DBK9_SSN);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL9_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL9-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue(" NF");                                                             //COBOL==> MOVE ' NF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO WS9-ADA-RESPONSE-CD
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "98100-SELECT-CLIENT") { return; }  //Check for pass through to next method
        #endregion 98100-SELECT-CLIENT

        #region 98100-EXIT
        L_98100_EXIT:;
            if (returnLabel == "98100-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 98100-EXIT

        #region 99000-CLIENT-POINTER-ROUTINE
        L_99000_CLIENT_POINTER_ROUTINE:;
            //COMMENT: -----------------------------------------------------------------
            Perform("99100-PROCESS-INIT", "99100-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 99100-PROCESS-INIT.
            Perform("99200-PROCESS-MAIN", "99200-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 99200-PROCESS-MAIN.
            if (returnLabel == "99000-CLIENT-POINTER-ROUTINE") { return; }  //Check for pass through to next method
        #endregion 99000-CLIENT-POINTER-ROUTINE

        #region 99000-EXIT
        L_99000_EXIT:;
            if (returnLabel == "99000-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 99000-EXIT

        #region 99100-PROCESS-INIT
        L_99100_PROCESS_INIT:;
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     INITIALIZE WS9-CLIENT-POINTER
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            WS.WS9_CLIENT_ID.SetValue(WS.DBK9_CLIENT_NUMBER);                                                   //COBOL==> MOVE DBK9-CLIENT-NUMBER TO WS9-CLIENT-ID.
            WS.SW9_EOF_NOT_FOUND.SetValue(true);                                                                //COBOL==> SET SW9-EOF-NOT-FOUND TO TRUE.
            WS.SW9_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW9-ERR-NO TO TRUE.
            if (returnLabel == "99100-PROCESS-INIT") { return; }  //Check for pass through to next method
        #endregion 99100-PROCESS-INIT

        #region 99100-EXIT
        L_99100_EXIT:;
            if (returnLabel == "99100-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 99100-EXIT

        #region 99200-PROCESS-MAIN
        L_99200_PROCESS_MAIN:;
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '992200- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            if (WS.SW9_SELECT_CLIENT_YES.Value)                                                                 //COBOL==> IF SW9-SELECT-CLIENT-YES
            {
                Perform("98100-SELECT-CLIENT", "98100-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 98100-SELECT-CLIENT
                if (!(DbConv.SQLCA.SQLCODE.IsEqualTo(0)))                                                           //COBOL==> IF SQLCODE NOT = ZERO
                {
                    goto L_99200_EXIT;                                                                                  //COBOL==> GO TO 99200-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:     PERFORM 99400-DECLARE-SPA-VIEW.
                                                                                                                //COMMENT:     IF SW9-ERR-YES
                                                                                                                //COMMENT:        GO TO 99200-EXIT
                                                                                                                //COMMENT:     END-IF.
            Perform("99500-OPEN-SPA-VIEW", "99500-EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 99500-OPEN-SPA-VIEW.
            if (WS.SW9_ERR_YES.Value)                                                                           //COBOL==> IF SW9-ERR-YES
            {
                goto L_99200_EXIT;                                                                                  //COBOL==> GO TO 99200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            while (!((WS.SW9_EOF_YES.Value) || (WS.SW9_ERR_YES.Value)))                                         //COBOL==> PERFORM 99600-FETCH-SPA-VIEW UNTIL SW9-EOF-YES OR SW9-ERR-YES.
            {
                Perform("99600-FETCH-SPA-VIEW", "99600-EXIT"); if (Control.ExitProgram) { return; }
            }
            Perform("99900-CLOSE-SPA-VIEW", "99900-EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM 99900-CLOSE-SPA-VIEW THRU 99900-EXIT.
            if (returnLabel == "99200-PROCESS-MAIN") { return; }  //Check for pass through to next method
        #endregion 99200-PROCESS-MAIN

        #region 99200-EXIT
        L_99200_EXIT:;
            if (returnLabel == "99200-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 99200-EXIT

        #region 99400-DECLARE-SPA-VIEW
        L_99400_DECLARE_SPA_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99400- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW.
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'CLIENT NUMBER/SPA-VIEW  =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK9-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'SSN/SPA-VIEW            =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK9-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'CLIENT NAME/SPA-VIEW    =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK9-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER AND FK_CLI_CLIENT_NAME = :DBK9-CLIENT-NAME AND FK_CLI_SSN = :DBK9-SSN WITH UR END-EXEC.
            if (returnLabel == "99400-DECLARE-SPA-VIEW") { return; }  //Check for pass through to next method
        #endregion 99400-DECLARE-SPA-VIEW

        #region 99400-EXIT
        L_99400_EXIT:;
            if (returnLabel == "99400-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 99400-EXIT

        #region 99500-OPEN-SPA-VIEW
        L_99500_OPEN_SPA_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99500- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            DbConv.OpenReader("SPA-VIEW");                                                                      //COBOL==> EXEC SQL OPEN SPA-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW9_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW9-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "99500-OPEN-SPA-VIEW") { return; }  //Check for pass through to next method
        #endregion 99500-OPEN-SPA-VIEW

        #region 99500-EXIT
        L_99500_EXIT:;
            if (returnLabel == "99500-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 99500-EXIT

        #region 99600-FETCH-SPA-VIEW
        L_99600_FETCH_SPA_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99600- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            DbConv.FetchReaderRow("SPA-VIEW",                                                                //COBOL==> EXEC SQL FETCH SPA-VIEW INTO :SP9-SYSTEM-CODE , :SP9-PARTICIPATION-FLAG END-EXEC.
                             WS.SP9_SYSTEM_CODE, WS.SP9_PARTICIPATION_FLAG);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.SW9_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW9-EOF-NO TO TRUE
                Perform("99610-POPULATE-SYSTEM-CODE", "99610-EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM 99610-POPULATE-SYSTEM-CODE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW9_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW9-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW9_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW9-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "99600-FETCH-SPA-VIEW") { return; }  //Check for pass through to next method
        #endregion 99600-FETCH-SPA-VIEW

        #region 99600-EXIT
        L_99600_EXIT:;
            if (returnLabel == "99600-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 99600-EXIT

        #region 99610-POPULATE-SYSTEM-CODE
        L_99610_POPULATE_SYSTEM_CODE:;
            //COMMENT: -----------------------------------------------------------------
            // EvaluateList !TRUE!                                                                              //COBOL==> EVALUATE TRUE
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_AE))                                        //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-AE
            {
                WS.WS9_SYS_PART_AE.SetValue(WS.SP9_PARTICIPATION_FLAG);                                             //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-AE
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-CS
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_CS))
            {
                WS.WS9_SYS_PART_CSE.SetValue(WS.SP9_PARTICIPATION_FLAG);                                            //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-CSE
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-KA
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_KA))
            {
                WS.WS9_SYS_PART_KANPAY.SetValue(WS.SP9_PARTICIPATION_FLAG);                                         //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-KANPAY
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-KS
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_KS))
            {
                WS.WS9_SYS_PART_KSCARES.SetValue(WS.SP9_PARTICIPATION_FLAG);                                        //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-KSCARES
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-FA
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_FA))
            {
                WS.WS9_SYS_PART_FACTS.SetValue(WS.SP9_PARTICIPATION_FLAG);                                          //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-FACTS
            }                                                                                               //COBOL==> WHEN OTHER
            else
            {
                //COMMENT: ** GQB DISPLAY SQL ERROR MESSAGE ***
                WS.WS9_MSG_1.SetValue("99610-POPULATE FAILED.    SYSTEM-CODE NOT DEFINED=");                        //COBOL==> MOVE '99610-POPULATE FAILED.    SYSTEM-CODE NOT DEFINED=' TO WS9-MSG-1
                WS.WS9_MSG_CODE.SetValue(WS.SP9_SYSTEM_CODE);                                                       //COBOL==> MOVE SP9-SYSTEM-CODE TO WS9-MSG-CODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "99610-POPULATE-SYSTEM-CODE") { return; }  //Check for pass through to next method
        #endregion 99610-POPULATE-SYSTEM-CODE

        #region 99610-EXIT
        L_99610_EXIT:;
            if (returnLabel == "99610-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: -----------------------------------------------------------------
        #endregion 99610-EXIT

        #region 99900-CLOSE-SPA-VIEW
        L_99900_CLOSE_SPA_VIEW:;
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99900- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            DbConv.CloseReader("SPA-VIEW");                                                                     //COBOL==> EXEC SQL CLOSE SPA-VIEW END-EXEC.
            if (WS.SW9_ERR_YES.Value)                                                                           //COBOL==> IF SW9-ERR-YES
            {
                goto L_99900_EXIT;                                                                                  //COBOL==> GO TO 99900-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW9_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW9-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "99900-CLOSE-SPA-VIEW") { return; }  //Check for pass through to next method
        #endregion 99900-CLOSE-SPA-VIEW

        #region 99900-EXIT
        L_99900_EXIT:;
            if (returnLabel == "99900-EXIT") { return; }                                                        //COBOL==> EXIT.
            #endregion 99900-EXIT
        }
        #endregion
    }
    #endregion
}
