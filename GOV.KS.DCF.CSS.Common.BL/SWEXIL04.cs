#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:51:13 PM
   **        *   FROM COBOL PGM   :  SWEXIL04
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                              COOL:GEN
               COPYRIGHT 2000, STERLING SOFTWARE, INC.
       NAME: EAB_COPY_AE_PROGRAMS             DATE: 2000/11/01
       TARGET OS:   MVS                       TIME: 14:54:27
       TARGET DBMS: DB2                       USER: SWSCBML
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       NO LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS NOT SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
   **************************************************************
   ** MAINTENANCE *************************************************
                         CHANGE
      DATE      AUTHOR   CONTROL DESCRIPTION
    ---------- --------- ------- ----------------------------------
    04/09/2014 G.BRAMSON CQ35825 ADABAS TO DB2 KEES PHASE 3 CHANGES
    .......... ......... ....... KEEP ADABAS ERROR RESPONSE FIELDS.
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Control.CICS;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXIL04_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXIL04_ws_WorkingStorage";
            internal const string WRK_PGM_ERR = "WRK_PGM_ERR";
            internal const string WRK_ERR_TYP = "WRK_ERR_TYP";
            internal const string WRK_ADA_ERR = "WRK_ADA_ERR";
            internal const string WRK_ENV_ERR = "WRK_ENV_ERR";
            internal const string WRK_ADA_ACT = "WRK_ADA_ACT";
            internal const string WRK_ADD_ERR = "WRK_ADD_ERR";
            internal const string WRK_BEG_ERR = "WRK_BEG_ERR";
            internal const string WRK_END_ERR = "WRK_END_ERR";
            internal const string WRK_REL_ERR = "WRK_REL_ERR";
            internal const string WRK_RIN_ERR = "WRK_RIN_ERR";
            internal const string WRK_RLF_ERR = "WRK_RLF_ERR";
            internal const string WRK_RLN_ERR = "WRK_RLN_ERR";
            internal const string WRK_UPD_ERR = "WRK_UPD_ERR";
            internal const string WRK_ADA_CD = "WRK_ADA_CD";
            internal const string WRK_ADA_NBR = "WRK_ADA_NBR";
            internal const string WRK_RES_NM = "WRK_RES_NM";
            internal const string WRK_FUN_CD = "WRK_FUN_CD";
            internal const string WRK_ERR_CD = "WRK_ERR_CD";
            internal const string WRK_CLT_NBR = "WRK_CLT_NBR";
            internal const string DUP_MSG = "DUP_MSG";
            internal const string PRC_MSG = "PRC_MSG";
            internal const string WRK_MSG = "WRK_MSG";
            internal const string ADA_MSG = "ADA_MSG";
            internal const string ADA_MSG_TXT_1 = "ADA_MSG_TXT_1";
            internal const string ADA_MSG_CD = "ADA_MSG_CD";
            internal const string ADA_MSG_TXT_2 = "ADA_MSG_TXT_2";
            internal const string ADA_MSG_NBR = "ADA_MSG_NBR";
            internal const string ADA_MSG_TXT_3 = "ADA_MSG_TXT_3";
            internal const string ADA_MSG_ACT = "ADA_MSG_ACT";
            internal const string ENV_MSG = "ENV_MSG";
            internal const string ENV_MSG_TXT_1 = "ENV_MSG_TXT_1";
            internal const string ENV_MSG_CD = "ENV_MSG_CD";
            internal const string ENV_MSG_TXT_2 = "ENV_MSG_TXT_2";
            internal const string ENV_MSG_RES = "ENV_MSG_RES";
            internal const string ENV_MSG_TXT_3 = "ENV_MSG_TXT_3";
            internal const string ENV_MSG_FUN = "ENV_MSG_FUN";
            internal const string SW1_SWITCHES = "SW1_SWITCHES";
            internal const string SW1_EOF_SW = "SW1_EOF_SW";
            internal const string SW1_EOF_NO = "SW1_EOF_NO";
            internal const string SW1_EOF_YES = "SW1_EOF_YES";
            internal const string SW1_ERR_SW = "SW1_ERR_SW";
            internal const string SW1_ERR_NO = "SW1_ERR_NO";
            internal const string SW1_ERR_YES = "SW1_ERR_YES";
            internal const string WS_MISC = "WS_MISC";
            internal const string WS_MSG_X = "WS_MSG_X";
            internal const string WS_MSG_PROG = "WS_MSG_PROG";
            internal const string WS_MSG_1 = "WS_MSG_1";
            internal const string WS_MSG = "WS_MSG";
            internal const string WS_MSG_CODE = "WS_MSG_CODE";
            internal const string WS_MSG_SQLCODE = "WS_MSG_SQLCODE";
            internal const string WS_MSG_2 = "WS_MSG_2";
            internal const string WS_MSG_FIELD = "WS_MSG_FIELD";
            internal const string WS_MSG_VALUE = "WS_MSG_VALUE";
            internal const string DBK1_KEYS = "DBK1_KEYS";
            internal const string DBK1_CLIENT_NUMBER = "DBK1_CLIENT_NUMBER";
            internal const string DBK1_COUNT = "DBK1_COUNT";
            internal const string PPR1_DCLKSD_PERSON_PGM_REQ = "PPR1_DCLKSD_PERSON_PGM_REQ";
            internal const string PPR1_PROGRAM_KEY = "PPR1_PROGRAM_KEY";
            internal const string PPR1_CREATED_BY = "PPR1_CREATED_BY";
            internal const string PPR1_CREATED_TIMESTAMP = "PPR1_CREATED_TIMESTAMP";
            internal const string PPR1_LAST_MODIFIED_BY = "PPR1_LAST_MODIFIED_BY";
            internal const string PPR1_LAST_MODIFIED_TMST = "PPR1_LAST_MODIFIED_TMST";
            internal const string PPR1_FK_CLB_CLIENT_NO = "PPR1_FK_CLB_CLIENT_NO";
        }
        #endregion

        #region Direct-access element properties
        public IGroup WRK_PGM_ERR { get { return GetElementByName<IGroup>(Names.WRK_PGM_ERR); } }
        public IField WRK_ERR_TYP { get { return GetElementByName<IField>(Names.WRK_ERR_TYP); } }
        public ICheckField WRK_ADA_ERR { get { return GetElementByName<ICheckField>(Names.WRK_ADA_ERR); } }
        public ICheckField WRK_ENV_ERR { get { return GetElementByName<ICheckField>(Names.WRK_ENV_ERR); } }
        public IField WRK_ADA_ACT { get { return GetElementByName<IField>(Names.WRK_ADA_ACT); } }
        public ICheckField WRK_ADD_ERR { get { return GetElementByName<ICheckField>(Names.WRK_ADD_ERR); } }
        public ICheckField WRK_BEG_ERR { get { return GetElementByName<ICheckField>(Names.WRK_BEG_ERR); } }
        public ICheckField WRK_END_ERR { get { return GetElementByName<ICheckField>(Names.WRK_END_ERR); } }
        public ICheckField WRK_REL_ERR { get { return GetElementByName<ICheckField>(Names.WRK_REL_ERR); } }
        public ICheckField WRK_RIN_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RIN_ERR); } }
        public ICheckField WRK_RLF_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RLF_ERR); } }
        public ICheckField WRK_RLN_ERR { get { return GetElementByName<ICheckField>(Names.WRK_RLN_ERR); } }
        public ICheckField WRK_UPD_ERR { get { return GetElementByName<ICheckField>(Names.WRK_UPD_ERR); } }
        public IField WRK_ADA_CD { get { return GetElementByName<IField>(Names.WRK_ADA_CD); } }
        public IField WRK_ADA_NBR { get { return GetElementByName<IField>(Names.WRK_ADA_NBR); } }
        public IField WRK_RES_NM { get { return GetElementByName<IField>(Names.WRK_RES_NM); } }
        public IField WRK_FUN_CD { get { return GetElementByName<IField>(Names.WRK_FUN_CD); } }
        public IField WRK_ERR_CD { get { return GetElementByName<IField>(Names.WRK_ERR_CD); } }
        public IField WRK_CLT_NBR { get { return GetElementByName<IField>(Names.WRK_CLT_NBR); } }
        public IField DUP_MSG { get { return GetElementByName<IField>(Names.DUP_MSG); } }
        public IField PRC_MSG { get { return GetElementByName<IField>(Names.PRC_MSG); } }
        public IField WRK_MSG { get { return GetElementByName<IField>(Names.WRK_MSG); } }
        public IField ADA_MSG { get { return GetElementByName<IField>(Names.ADA_MSG); } }
        public IField ADA_MSG_TXT_1 { get { return GetElementByName<IField>(Names.ADA_MSG_TXT_1); } }
        public IField ADA_MSG_CD { get { return GetElementByName<IField>(Names.ADA_MSG_CD); } }
        public IField ADA_MSG_TXT_2 { get { return GetElementByName<IField>(Names.ADA_MSG_TXT_2); } }
        public IField ADA_MSG_NBR { get { return GetElementByName<IField>(Names.ADA_MSG_NBR); } }
        public IField ADA_MSG_TXT_3 { get { return GetElementByName<IField>(Names.ADA_MSG_TXT_3); } }
        public IField ADA_MSG_ACT { get { return GetElementByName<IField>(Names.ADA_MSG_ACT); } }
        public IField ENV_MSG { get { return GetElementByName<IField>(Names.ENV_MSG); } }
        public IField ENV_MSG_TXT_1 { get { return GetElementByName<IField>(Names.ENV_MSG_TXT_1); } }
        public IField ENV_MSG_CD { get { return GetElementByName<IField>(Names.ENV_MSG_CD); } }
        public IField ENV_MSG_TXT_2 { get { return GetElementByName<IField>(Names.ENV_MSG_TXT_2); } }
        public IField ENV_MSG_RES { get { return GetElementByName<IField>(Names.ENV_MSG_RES); } }
        public IField ENV_MSG_TXT_3 { get { return GetElementByName<IField>(Names.ENV_MSG_TXT_3); } }
        public IField ENV_MSG_FUN { get { return GetElementByName<IField>(Names.ENV_MSG_FUN); } }
        public IGroup SW1_SWITCHES { get { return GetElementByName<IGroup>(Names.SW1_SWITCHES); } }
        public IField SW1_EOF_SW { get { return GetElementByName<IField>(Names.SW1_EOF_SW); } }
        public ICheckField SW1_EOF_NO { get { return GetElementByName<ICheckField>(Names.SW1_EOF_NO); } }
        public ICheckField SW1_EOF_YES { get { return GetElementByName<ICheckField>(Names.SW1_EOF_YES); } }
        public IField SW1_ERR_SW { get { return GetElementByName<IField>(Names.SW1_ERR_SW); } }
        public ICheckField SW1_ERR_NO { get { return GetElementByName<ICheckField>(Names.SW1_ERR_NO); } }
        public ICheckField SW1_ERR_YES { get { return GetElementByName<ICheckField>(Names.SW1_ERR_YES); } }
        public IGroup WS_MISC { get { return GetElementByName<IGroup>(Names.WS_MISC); } }
        public IGroup WS_MSG_X { get { return GetElementByName<IGroup>(Names.WS_MSG_X); } }
        public IField WS_MSG_PROG { get { return GetElementByName<IField>(Names.WS_MSG_PROG); } }
        public IGroup WS_MSG_1 { get { return GetElementByName<IGroup>(Names.WS_MSG_1); } }
        public IField WS_MSG { get { return GetElementByName<IField>(Names.WS_MSG); } }
        public IGroup WS_MSG_CODE { get { return GetElementByName<IGroup>(Names.WS_MSG_CODE); } }
        public IField WS_MSG_SQLCODE { get { return GetElementByName<IField>(Names.WS_MSG_SQLCODE); } }
        public IGroup WS_MSG_2 { get { return GetElementByName<IGroup>(Names.WS_MSG_2); } }
        public IField WS_MSG_FIELD { get { return GetElementByName<IField>(Names.WS_MSG_FIELD); } }
        public IField WS_MSG_VALUE { get { return GetElementByName<IField>(Names.WS_MSG_VALUE); } }
        public IGroup DBK1_KEYS { get { return GetElementByName<IGroup>(Names.DBK1_KEYS); } }
        public IField DBK1_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.DBK1_CLIENT_NUMBER); } }
        public IField DBK1_COUNT { get { return GetElementByName<IField>(Names.DBK1_COUNT); } }
        public IGroup PPR1_DCLKSD_PERSON_PGM_REQ { get { return GetElementByName<IGroup>(Names.PPR1_DCLKSD_PERSON_PGM_REQ); } }
        public IField PPR1_PROGRAM_KEY { get { return GetElementByName<IField>(Names.PPR1_PROGRAM_KEY); } }
        public IField PPR1_CREATED_BY { get { return GetElementByName<IField>(Names.PPR1_CREATED_BY); } }
        public IField PPR1_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.PPR1_CREATED_TIMESTAMP); } }
        public IField PPR1_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.PPR1_LAST_MODIFIED_BY); } }
        public IField PPR1_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.PPR1_LAST_MODIFIED_TMST); } }
        public IField PPR1_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.PPR1_FK_CLB_CLIENT_NO); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.WRK_PGM_ERR, (WRK_PGM_ERR) =>
           {
               WRK_PGM_ERR.CreateNewField(Names.WRK_ERR_TYP, FieldType.String, 1)
                   .NewCheckField(Names.WRK_ADA_ERR, "A")
                   .NewCheckField(Names.WRK_ENV_ERR, "C")
                   ;
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_ACT, FieldType.String, 3)
                   .NewCheckField(Names.WRK_ADD_ERR, "ADD")
                   .NewCheckField(Names.WRK_BEG_ERR, "INI")
                   .NewCheckField(Names.WRK_END_ERR, "EAT")
                   .NewCheckField(Names.WRK_REL_ERR, "REL")
                   .NewCheckField(Names.WRK_RIN_ERR, "RI ")
                   .NewCheckField(Names.WRK_RLF_ERR, "RLF")
                   .NewCheckField(Names.WRK_RLN_ERR, "RL ")
                   .NewCheckField(Names.WRK_UPD_ERR, "UPD")
                   ;
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_CD, FieldType.UnsignedNumeric, 4);
               WRK_PGM_ERR.CreateNewField(Names.WRK_ADA_NBR, FieldType.UnsignedNumeric, 4);
               WRK_PGM_ERR.CreateNewField(Names.WRK_RES_NM, FieldType.String, 8);
               WRK_PGM_ERR.CreateNewField(Names.WRK_FUN_CD, FieldType.String, 2);
               WRK_PGM_ERR.CreateNewField(Names.WRK_ERR_CD, FieldType.String, 6);
           });
            recordDef.CreateNewField(Names.WRK_CLT_NBR, FieldType.String, 10);
            recordDef.CreateNewField(Names.DUP_MSG, FieldType.String, 27, "SYNC REQUEST ALREADY EXISTS");
            recordDef.CreateNewField(Names.PRC_MSG, FieldType.String, 35, "SYNC REQUEST SUCCESSFULLY PROCESSED");
            recordDef.CreateNewField(Names.WRK_MSG, FieldType.String, 80);

            IField ADA_MSG_local = recordDef.CreateNewField(Names.ADA_MSG, FieldType.String, 50);
            recordDef.CreateNewGroupRedefine("FILLER", ADA_MSG_local, (FILLER) =>
            {
                FILLER.CreateNewField(Names.ADA_MSG_TXT_1, FieldType.String, 13);
                FILLER.CreateNewField(Names.ADA_MSG_CD, FieldType.UnsignedNumeric, 4);
                FILLER.CreateNewField(Names.ADA_MSG_TXT_2, FieldType.String, 9);
                FILLER.CreateNewField(Names.ADA_MSG_NBR, FieldType.UnsignedNumeric, 4);
                FILLER.CreateNewField(Names.ADA_MSG_TXT_3, FieldType.String, 17);
                FILLER.CreateNewField(Names.ADA_MSG_ACT, FieldType.String, 3);
            });

            IField ENV_MSG_local = recordDef.CreateNewField(Names.ENV_MSG, FieldType.String, 53);
            recordDef.CreateNewGroupRedefine("FILLER_d2", ENV_MSG_local, (FILLER_d2) =>
            {
                FILLER_d2.CreateNewField(Names.ENV_MSG_TXT_1, FieldType.String, 11);
                FILLER_d2.CreateNewField(Names.ENV_MSG_CD, FieldType.String, 6);
                FILLER_d2.CreateNewField(Names.ENV_MSG_TXT_2, FieldType.String, 9);
                FILLER_d2.CreateNewField(Names.ENV_MSG_RES, FieldType.String, 8);
                FILLER_d2.CreateNewField(Names.ENV_MSG_TXT_3, FieldType.String, 17);
                FILLER_d2.CreateNewField(Names.ENV_MSG_FUN, FieldType.String, 2);
            });

            recordDef.CreateNewGroup(Names.SW1_SWITCHES, (SW1_SWITCHES) =>
           {
               SW1_SWITCHES.CreateNewField(Names.SW1_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW1_EOF_NO, "N")
                   .NewCheckField(Names.SW1_EOF_YES, "Y")
                   ;
               SW1_SWITCHES.CreateNewField(Names.SW1_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW1_ERR_NO, "N")
                   .NewCheckField(Names.SW1_ERR_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.WS_MISC, (WS_MISC) =>
           {
               WS_MISC.CreateNewGroup(Names.WS_MSG_X, (WS_MSG_X) =>
               {
                   WS_MSG_X.CreateNewField(Names.WS_MSG_PROG, FieldType.String, 10);
                   IGroup WS_MSG_1_local = (IGroup)WS_MSG_X.CreateNewGroup(Names.WS_MSG_1, (WS_MSG_1) =>
                   {
                       WS_MSG_1.CreateNewField(Names.WS_MSG, FieldType.String, 50);
                       WS_MSG_1.CreateNewGroup(Names.WS_MSG_CODE, (WS_MSG_CODE) =>
                       {
                           WS_MSG_CODE.CreateNewField(Names.WS_MSG_SQLCODE, FieldType.NumericEdited, "---------9", 10);
                       });
                   });
                   WS_MSG_X.CreateNewGroupRedefine(Names.WS_MSG_2, WS_MSG_1_local, (WS_MSG_2) =>
                   {
                       WS_MSG_2.CreateNewField(Names.WS_MSG_FIELD, FieldType.String, 25);
                       WS_MSG_2.CreateNewField(Names.WS_MSG_VALUE, FieldType.String, 35);
                   });
               });
           });

            recordDef.CreateNewGroup(Names.DBK1_KEYS, (DBK1_KEYS) =>
           {
               DBK1_KEYS.CreateNewField(Names.DBK1_CLIENT_NUMBER, FieldType.String, 10);
               DBK1_KEYS.CreateNewField(Names.DBK1_COUNT, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.PPR1_DCLKSD_PERSON_PGM_REQ, (PPR1_DCLKSD_PERSON_PGM_REQ) =>
           {
               PPR1_DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PPR1_PROGRAM_KEY, FieldType.String, 28);
               PPR1_DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PPR1_CREATED_BY, FieldType.String, 8);
               PPR1_DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PPR1_CREATED_TIMESTAMP, FieldType.String, 26);
               PPR1_DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PPR1_LAST_MODIFIED_BY, FieldType.String, 8);
               PPR1_DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PPR1_LAST_MODIFIED_TMST, FieldType.String, 26);
               PPR1_DCLKSD_PERSON_PGM_REQ.CreateNewField(Names.PPR1_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXIL04_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXIL04_ls_LinkageSection";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string DB_ERROR_SF = "DB_ERROR_SF";
            internal const string ABORT_SHOW_DBMS_MSG_SF = "ABORT_SHOW_DBMS_MSG_SF";
            internal const string ABORT_SHOW_USER_MSG_SF = "ABORT_SHOW_USER_MSG_SF";
            internal const string RETRY_TRAN_REQUESTED_SF = "RETRY_TRAN_REQUESTED_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DB_DEADLOCK_TIMOUT_FL_LS = "DB_DEADLOCK_TIMOUT_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_TIRDATE_SKIP_VAL = "PSMGR_TIRDATE_SKIP_VAL";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string TX_RETRY_COUNT = "TX_RETRY_COUNT";
            internal const string TX_USER_RETRY_ALLOWED = "TX_USER_RETRY_ALLOWED";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string IMPORT_0001EV = "IMPORT_0001EV";
            internal const string CSE_PERSONS_WORK_SET_0001ET = "CSE_PERSONS_WORK_SET_0001ET";
            internal const string NUMBER_0001AS = "NUMBER_0001AS";
            internal const string NUMBER_0001 = "NUMBER_0001";
            internal const string NUMBER_0001XX = "NUMBER_0001XX";
            internal const string EXPORT_RETURN_CODE_0002EV = "EXPORT_RETURN_CODE_0002EV";
            internal const string EXTERNAL_0002ET = "EXTERNAL_0002ET";
            internal const string NUMERIC_RETURN_CODE_0002AS = "NUMERIC_RETURN_CODE_0002AS";
            internal const string NUMERIC_RETURN_CODE_0002 = "NUMERIC_RETURN_CODE_0002";
            internal const string NUMERIC_RETURN_CODE_0002XX = "NUMERIC_RETURN_CODE_0002XX";
            internal const string EXPORT_0003EV = "EXPORT_0003EV";
            internal const string ABEND_DATA_0003ET = "ABEND_DATA_0003ET";
            internal const string TYPE_0003AS = "TYPE_0003AS";
            internal const string TYPE_0003 = "TYPE_0003";
            internal const string TYPE_0003XX = "TYPE_0003XX";
            internal const string ADABAS_FILE_NUMBER_0003AS = "ADABAS_FILE_NUMBER_0003AS";
            internal const string ADABAS_FILE_NUMBER_0003 = "ADABAS_FILE_NUMBER_0003";
            internal const string ADABAS_FILE_NUMBER_0003XX = "ADABAS_FILE_NUMBER_0003XX";
            internal const string ADABAS_FILE_ACTION_0003AS = "ADABAS_FILE_ACTION_0003AS";
            internal const string ADABAS_FILE_ACTION_0003 = "ADABAS_FILE_ACTION_0003";
            internal const string ADABAS_FILE_ACTION_0003XX = "ADABAS_FILE_ACTION_0003XX";
            internal const string ADABAS_RESPONSE_CD_0003AS = "ADABAS_RESPONSE_CD_0003AS";
            internal const string ADABAS_RESPONSE_CD_0003 = "ADABAS_RESPONSE_CD_0003";
            internal const string ADABAS_RESPONSE_CD_0003XX = "ADABAS_RESPONSE_CD_0003XX";
            internal const string CICS_RESOURCE_NM_0003AS = "CICS_RESOURCE_NM_0003AS";
            internal const string CICS_RESOURCE_NM_0003 = "CICS_RESOURCE_NM_0003";
            internal const string CICS_RESOURCE_NM_0003XX = "CICS_RESOURCE_NM_0003XX";
            internal const string CICS_FUNCTION_CD_0003AS = "CICS_FUNCTION_CD_0003AS";
            internal const string CICS_FUNCTION_CD_0003 = "CICS_FUNCTION_CD_0003";
            internal const string CICS_FUNCTION_CD_0003XX = "CICS_FUNCTION_CD_0003XX";
            internal const string CICS_RESPONSE_CD_0003AS = "CICS_RESPONSE_CD_0003AS";
            internal const string CICS_RESPONSE_CD_0003 = "CICS_RESPONSE_CD_0003";
            internal const string CICS_RESPONSE_CD_0003XX = "CICS_RESPONSE_CD_0003XX";
            internal const string TWA = "TWA";
            internal const string TWA_ADABAS_PARMS = "TWA_ADABAS_PARMS";
            internal const string TWA_CICS_PARMS = "TWA_CICS_PARMS";
            internal const string TWA_PROGRAM_ID = "TWA_PROGRAM_ID";
            internal const string TWA_ADDR_LIST = "TWA_ADDR_LIST";
        }
        #endregion

        #region Direct-access element properties
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField DB_ERROR_SF { get { return GetElementByName<ICheckField>(Names.DB_ERROR_SF); } }
        public ICheckField ABORT_SHOW_DBMS_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_DBMS_MSG_SF); } }
        public ICheckField ABORT_SHOW_USER_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_USER_MSG_SF); } }
        public ICheckField RETRY_TRAN_REQUESTED_SF { get { return GetElementByName<ICheckField>(Names.RETRY_TRAN_REQUESTED_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DB_DEADLOCK_TIMOUT_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_DEADLOCK_TIMOUT_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_TIRDATE_SKIP_VAL { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SKIP_VAL); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IField TX_RETRY_COUNT { get { return GetElementByName<IField>(Names.TX_RETRY_COUNT); } }
        public IField TX_USER_RETRY_ALLOWED { get { return GetElementByName<IField>(Names.TX_USER_RETRY_ALLOWED); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup IMPORT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_0001EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0001ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0001ET); } }
        public IField NUMBER_0001AS { get { return GetElementByName<IField>(Names.NUMBER_0001AS); } }
        public IField NUMBER_0001 { get { return GetElementByName<IField>(Names.NUMBER_0001); } }
        public IField NUMBER_0001XX { get { return GetElementByName<IField>(Names.NUMBER_0001XX); } }
        public IGroup EXPORT_RETURN_CODE_0002EV { get { return GetElementByName<IGroup>(Names.EXPORT_RETURN_CODE_0002EV); } }
        public IGroup EXTERNAL_0002ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0002ET); } }
        public IField NUMERIC_RETURN_CODE_0002AS { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0002AS); } }
        public IField NUMERIC_RETURN_CODE_0002 { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0002); } }
        public IField NUMERIC_RETURN_CODE_0002XX { get { return GetElementByName<IField>(Names.NUMERIC_RETURN_CODE_0002XX); } }
        public IGroup EXPORT_0003EV { get { return GetElementByName<IGroup>(Names.EXPORT_0003EV); } }
        public IGroup ABEND_DATA_0003ET { get { return GetElementByName<IGroup>(Names.ABEND_DATA_0003ET); } }
        public IField TYPE_0003AS { get { return GetElementByName<IField>(Names.TYPE_0003AS); } }
        public IField TYPE_0003 { get { return GetElementByName<IField>(Names.TYPE_0003); } }
        public IField TYPE_0003XX { get { return GetElementByName<IField>(Names.TYPE_0003XX); } }
        public IField ADABAS_FILE_NUMBER_0003AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0003AS); } }
        public IField ADABAS_FILE_NUMBER_0003 { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0003); } }
        public IField ADABAS_FILE_NUMBER_0003XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0003XX); } }
        public IField ADABAS_FILE_ACTION_0003AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0003AS); } }
        public IField ADABAS_FILE_ACTION_0003 { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0003); } }
        public IField ADABAS_FILE_ACTION_0003XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0003XX); } }
        public IField ADABAS_RESPONSE_CD_0003AS { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0003AS); } }
        public IField ADABAS_RESPONSE_CD_0003 { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0003); } }
        public IField ADABAS_RESPONSE_CD_0003XX { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0003XX); } }
        public IField CICS_RESOURCE_NM_0003AS { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0003AS); } }
        public IField CICS_RESOURCE_NM_0003 { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0003); } }
        public IField CICS_RESOURCE_NM_0003XX { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0003XX); } }
        public IField CICS_FUNCTION_CD_0003AS { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0003AS); } }
        public IField CICS_FUNCTION_CD_0003 { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0003); } }
        public IField CICS_FUNCTION_CD_0003XX { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0003XX); } }
        public IField CICS_RESPONSE_CD_0003AS { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0003AS); } }
        public IField CICS_RESPONSE_CD_0003 { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0003); } }
        public IField CICS_RESPONSE_CD_0003XX { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0003XX); } }
        public IGroup TWA { get { return GetElementByName<IGroup>(Names.TWA); } }
        public IGroup TWA_ADABAS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_ADABAS_PARMS); } }
        public IGroup TWA_CICS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_CICS_PARMS); } }
        public IField TWA_PROGRAM_ID { get { return GetElementByName<IField>(Names.TWA_PROGRAM_ID); } }
        public IGroup TWA_ADDR_LIST { get { return GetElementByName<IGroup>(Names.TWA_ADDR_LIST); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.DB_ERROR_SF, "DB")
                       .NewCheckField(Names.ABORT_SHOW_DBMS_MSG_SF, "AB")
                       .NewCheckField(Names.ABORT_SHOW_USER_MSG_SF, "AM")
                       .NewCheckField(Names.RETRY_TRAN_REQUESTED_SF, "RT")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DB_DEADLOCK_TIMOUT_FL_LS, "DT")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d7", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d7) =>
                   {
                       FILLER_d7.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d7.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d7.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_SKIP_VAL, FieldType.String, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(95, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 8);
               });
               GLOBDATA.CreateNewField(Names.TX_RETRY_COUNT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_USER_RETRY_ALLOWED, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(3, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewFillerField(199, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_0001EV, (IMPORT_0001EV) =>
           {
               IMPORT_0001EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0001ET, (CSE_PERSONS_WORK_SET_0001ET) =>
               {
                   CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.NUMBER_0001AS, FieldType.String, 1);

                   IField NUMBER_0001_local = CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.NUMBER_0001, FieldType.String, 10);
                   CSE_PERSONS_WORK_SET_0001ET.CreateNewFieldRedefine(Names.NUMBER_0001XX, FieldType.String, NUMBER_0001_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_RETURN_CODE_0002EV, (EXPORT_RETURN_CODE_0002EV) =>
           {
               EXPORT_RETURN_CODE_0002EV.CreateNewGroup(Names.EXTERNAL_0002ET, (EXTERNAL_0002ET) =>
               {
                   EXTERNAL_0002ET.CreateNewField(Names.NUMERIC_RETURN_CODE_0002AS, FieldType.String, 1);

                   IField NUMERIC_RETURN_CODE_0002_local = EXTERNAL_0002ET.CreateNewField(Names.NUMERIC_RETURN_CODE_0002, FieldType.SignedNumeric, 2);
                   EXTERNAL_0002ET.CreateNewFieldRedefine(Names.NUMERIC_RETURN_CODE_0002XX, FieldType.String, NUMERIC_RETURN_CODE_0002_local, 2);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_0003EV, (EXPORT_0003EV) =>
           {
               EXPORT_0003EV.CreateNewGroup(Names.ABEND_DATA_0003ET, (ABEND_DATA_0003ET) =>
               {
                   ABEND_DATA_0003ET.CreateNewField(Names.TYPE_0003AS, FieldType.String, 1);

                   IField TYPE_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.TYPE_0003, FieldType.String, 1);
                   ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.TYPE_0003XX, FieldType.String, TYPE_0003_local, 1);
                   ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0003AS, FieldType.String, 1);

                   IField ADABAS_FILE_NUMBER_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0003, FieldType.String, 4);
                   ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.ADABAS_FILE_NUMBER_0003XX, FieldType.String, ADABAS_FILE_NUMBER_0003_local, 4);
                   ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_ACTION_0003AS, FieldType.String, 1);

                   IField ADABAS_FILE_ACTION_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_ACTION_0003, FieldType.String, 3);
                   ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.ADABAS_FILE_ACTION_0003XX, FieldType.String, ADABAS_FILE_ACTION_0003_local, 3);
                   ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0003AS, FieldType.String, 1);

                   IField ADABAS_RESPONSE_CD_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0003, FieldType.String, 4);
                   ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.ADABAS_RESPONSE_CD_0003XX, FieldType.String, ADABAS_RESPONSE_CD_0003_local, 4);
                   ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESOURCE_NM_0003AS, FieldType.String, 1);

                   IField CICS_RESOURCE_NM_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESOURCE_NM_0003, FieldType.String, 8);
                   ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.CICS_RESOURCE_NM_0003XX, FieldType.String, CICS_RESOURCE_NM_0003_local, 8);
                   ABEND_DATA_0003ET.CreateNewField(Names.CICS_FUNCTION_CD_0003AS, FieldType.String, 1);

                   IField CICS_FUNCTION_CD_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.CICS_FUNCTION_CD_0003, FieldType.String, 2);
                   ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.CICS_FUNCTION_CD_0003XX, FieldType.String, CICS_FUNCTION_CD_0003_local, 2);
                   ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESPONSE_CD_0003AS, FieldType.String, 1);

                   IField CICS_RESPONSE_CD_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESPONSE_CD_0003, FieldType.String, 6);
                   ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.CICS_RESPONSE_CD_0003XX, FieldType.String, CICS_RESPONSE_CD_0003_local, 6);
               });
           });

            recordDef.CreateNewGroup(Names.TWA, (TWA) =>
           {
               IGroup TWA_ADABAS_PARMS_local = (IGroup)TWA.CreateNewGroup(Names.TWA_ADABAS_PARMS, (TWA_ADABAS_PARMS) =>
               {
                   TWA_ADABAS_PARMS.CreateNewFieldArray("FILLER_d13", 7, FieldType.CompInt, 4);
               });
               TWA.CreateNewGroupRedefine(Names.TWA_CICS_PARMS, TWA_ADABAS_PARMS_local, (TWA_CICS_PARMS) =>
               {
                   TWA_CICS_PARMS.CreateNewField(Names.TWA_PROGRAM_ID, FieldType.String, 8);
                   TWA_CICS_PARMS.CreateNewGroup(Names.TWA_ADDR_LIST, (TWA_ADDR_LIST) =>
                   {
                       TWA_ADDR_LIST.CreateNewFieldArray("FILLER_d14", 5, FieldType.CompInt, 4);
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(GLOBDATA, args, 0);
            SetPassedParm(IMPORT_0001EV, args, 1);
            SetPassedParm(EXPORT_RETURN_CODE_0002EV, args, 2);
            SetPassedParm(EXPORT_0003EV, args, 3);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(GLOBDATA, args, 0);
            SetReturnParm(IMPORT_0001EV, args, 1);
            SetReturnParm(EXPORT_RETURN_CODE_0002EV, args, 2);
            SetReturnParm(EXPORT_0003EV, args, 3);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXIL04 : OnlineEABBase
    {

        #region Public Constructors
        public SWEXIL04()
            : base()
        {
            SetUpProgram();
        }

        public SWEXIL04(OnlineControl controlData) : base(controlData)
        {
            SetUpProgram();
        }

        private void SetUpProgram()
        {
            this.ProgramName = "SWEXIL04";

            WS = new SWEXIL04_ws();
            LS = new SWEXIL04_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXIL04_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXIL04_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING GLOBDATA , IMPORT-0001EV , EXPORT-RETURN-CODE-0002EV , EXPORT-0003EV.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_0063179058(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_0063179058
        /// </summary>
        /// <remarks>
        ///COMMENT: **************************************************************
        /// </remarks>
        private void M_MAIN_0063179058(string returnMethod = "")
        {
            M_PARA_0063179058_INIT("M_PARA_0063179058_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-0063179058-INIT THRU PARA-0063179058-INIT-EXIT
            M_PARA_0063179058("M_PARA_0063179058_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-0063179058 THRU PARA-0063179058-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_0063179058
        /// </summary>
        private void M_PARA_0063179058(string returnMethod = "")
        {
            if (returnMethod != "" && returnMethod != "M_PARA_0063179058") { M_0000_BEG_PGM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_BEG_PGM
        /// </summary>
        /// <remarks>
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT: *******************************************************
        ///COMMENT:  ATTENTION:  THIS MODULE MUST BE COMPILED AND LINKED  *
        ///COMMENT:              USING THE "OLD" OPTIONS (NON-DLL OPTIONS)*
        ///COMMENT:              BECAUSE IT IS CALLED IN "COMPATIBILITY"  *
        ///COMMENT:              MODE BY CA GEN.                          *
        ///COMMENT: *******************************************************
        ///COMMENT: *****************************************************************
        ///COMMENT:  INCLUDE NAME:  SWCSZG52
        ///COMMENT:      EAB NAME:  SWEXIL04
        ///COMMENT:   DESCRIPTION:  UPDATE PERSON-PROGRAM-REQ-DBF FOR SYNC
        ///COMMENT: *****************************************************************
        ///COMMENT:  11-01-00  MLS  CREATED
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_0000_BEG_PGM(string returnMethod = "")
        {
            //COMMENT: ** GQB 04/10/2014 - ADDED CODE FOR DISPLAY
            WS.WS_MSG_X.SetValue("*SWEXIL04*");                                                                 //COBOL==> MOVE '*SWEXIL04*' TO WS-MSG-X.
                                                                                                                //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
                                                                                                                //COMMENT:     MOVE 'PROGRAM STARTED...' TO WS-MSG-1.
                                                                                                                //COMMENT:     DISPLAY WS-MSG-X.
            WS.WRK_PGM_ERR.ResetToInitialValue();                                                               //COBOL==> INITIALIZE WRK-PGM-ERR.
            WS.WRK_MSG.ResetToInitialValue();                                                                   //COBOL==> INITIALIZE WRK-MSG.
            SetHandleCondtions(HandleCondition.ERROR, "M_9000_ERR_PGM");                                        //COBOL==> EXEC CICS HANDLE CONDITION ERROR ( 9000-ERR-PGM ) END-EXEC.
            WS.WRK_CLT_NBR.SetValue(LS.NUMBER_0001);                                                            //COBOL==> MOVE NUMBER-0001 TO WRK-CLT-NBR.
            LS.NUMERIC_RETURN_CODE_0002.SetValueWithZeroes();                                                   //COBOL==> MOVE ZERO TO NUMERIC-RETURN-CODE-0002.
                                                                                                                //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
                                                                                                                //COMMENT:     MOVE 'IMPORT CLIENT NO        =' TO WS-MSG-FIELD.
                                                                                                                //COMMENT:     MOVE NUMBER-0001                 TO WS-MSG-VALUE.
                                                                                                                //COMMENT:     DISPLAY WS-MSG-X.
            M_1000_CHK_REQ_REC("M_1000_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 1000-CHK-REQ-REC THRU 1000-EXIT.
            M_9200_END_PGM("M_9200_EXIT"); if (Control.ExitProgram) { return; }                                   //COBOL==> PERFORM 9200-END-PGM THRU 9200-EXIT.
            if (returnMethod != "" && returnMethod != "M_0000_BEG_PGM") { M_1000_CHK_REQ_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1000_CHK_REQ_REC
        /// </summary>
        private void M_1000_CHK_REQ_REC(string returnMethod = "")
        {
            //COMMENT: ** GQB 04/10/2014 - CHECK IF CLIENT HAS RECORDS
            WS.DBK1_CLIENT_NUMBER.SetValue(WS.WRK_CLT_NBR);                                                     //COBOL==> MOVE WRK-CLT-NBR TO DBK1-CLIENT-NUMBER.
            M_7100_CHECK_CLIENT_EXIST("M_7100_EXIT"); if (Control.ExitProgram) { return; }                        //COBOL==> PERFORM 7100-CHECK-CLIENT-EXIST THRU 7100-EXIT.
                                                                                                                  //COMMENT: ** GQB 04/10/2014 - DECIDE WHAT ACTION TO PERFORM
                                                                                                                  // EvaluateList !TRUE!                                                                              //COBOL==> EVALUATE TRUE
                                                                                                                  //COMMENT: ** GQB 04/10/2014 - CLIENT HAS NO RECORDS
            if (WS.DBK1_COUNT.IsEqualTo(0))                                                                 //COBOL==> WHEN DBK1-COUNT = ZERO
            {
                M_7500_ADD_RECORD("M_7500_EXIT"); if (Control.ExitProgram) { return; }                                //COBOL==> PERFORM 7500-ADD-RECORD THRU 7500-EXIT
                WS.WRK_MSG.SetValue(WS.PRC_MSG);                                                                    //COBOL==> MOVE PRC-MSG TO WRK-MSG
                                                                                                                    //COMMENT: ** GQB 04/10/2014 - CLIENT HAS RECORDS
            }                                                                                               //COBOL==> WHEN OTHER
            else
            {
                M_7200_CHECK_PROGRAM_EXIST("M_7200_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM 7200-CHECK-PROGRAM-EXIST THRU 7200-EXIT
                                                                                                                      //COMMENT: ** GQB 04/10/2014 - CLIENT HAS NO 'HIST' OR 'SYNC' RECORDS
                if (WS.DBK1_COUNT.IsEqualTo(0))                                                                     //COBOL==> IF DBK1-COUNT = ZERO
                {
                    M_7600_UPDATE_RECORD("M_7600_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 7600-UPDATE-RECORD THRU 7600-EXIT
                    WS.WRK_MSG.SetValue(WS.PRC_MSG);                                                                    //COBOL==> MOVE PRC-MSG TO WRK-MSG
                                                                                                                        //COMMENT: ** GQB 04/10/2014 - CLIENT HAS 'HIST' OR 'SYNC' RECORDS
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    LS.NUMERIC_RETURN_CODE_0002.SetValue(1);                                                            //COBOL==> MOVE 1 TO NUMERIC-RETURN-CODE-0002
                    WS.WRK_MSG.SetValue(WS.DUP_MSG);                                                                    //COBOL==> MOVE DUP-MSG TO WRK-MSG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_1000_CHK_REQ_REC") { M_1000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1000_EXIT
        /// </summary>
        private void M_1000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1000_EXIT") { M_7100_CHECK_CLIENT_EXIST(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7100_CHECK_CLIENT_EXIST
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 04/10/2014 - CHECK IF CLIENT HAS RECORDS
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_7100_CHECK_CLIENT_EXIST(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.DBK1_COUNT.ResetToInitialValue();                                                                //COBOL==> INITIALIZE DBK1-COUNT.
            DbConv.ExecuteSqlQuery("SELECT COUNT ( * ) INTO {0} FROM KSD_PERSON_PGM_REQ WHERE FK_CLB_CLIENT_NO = {1} ",  //COBOL==> EXEC SQL SELECT COUNT ( * ) INTO :DBK1-COUNT FROM KSD_PERSON_PGM_REQ WHERE FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER END-EXEC.
                                 WS.DBK1_COUNT, WS.DBK1_CLIENT_NUMBER);
            if ((!(DbConv.SQLCA.SQLCODE.IsEqualTo(0)))
             && (!(DbConv.SQLCA.SQLCODE.IsEqualTo(100))))  //COBOL==> IF SQLCODE NOT = ZERO AND SQLCODE NOT = 100
            {
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_RLF_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-RLF-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(043);                                                                       //COBOL==> MOVE 043 TO WRK-ADA-NBR
                M_9200_END_PGM("M_9200_EXIT"); if (Control.ExitProgram) { return; }                                   //COBOL==> PERFORM 9200-END-PGM THRU 9200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_7100_CHECK_CLIENT_EXIST") { M_7100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7100_EXIT
        /// </summary>
        private void M_7100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7100_EXIT") { M_7200_CHECK_PROGRAM_EXIST(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7200_CHECK_PROGRAM_EXIST
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 04/10/2014 - CHECK IF RECORD QUALIFIES FOR UPDATE
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_7200_CHECK_PROGRAM_EXIST(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.DBK1_COUNT.ResetToInitialValue();                                                                //COBOL==> INITIALIZE DBK1-COUNT.
            DbConv.ExecuteSqlQuery("SELECT COUNT ( * ) INTO {0} FROM KSD_PERSON_PGM_REQ WHERE FK_CLB_CLIENT_NO = {1} AND ( PROGRAM_KEY = 'HIST' OR PROGRAM_KEY = 'SYNC' ) ",  //COBOL==> EXEC SQL SELECT COUNT ( * ) INTO :DBK1-COUNT FROM KSD_PERSON_PGM_REQ WHERE FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER AND ( PROGRAM_KEY = 'HIST' OR PROGRAM_KEY = 'SYNC' ) END-EXEC.
                                 WS.DBK1_COUNT, WS.DBK1_CLIENT_NUMBER);
            if ((!(DbConv.SQLCA.SQLCODE.IsEqualTo(0)))
             && (!(DbConv.SQLCA.SQLCODE.IsEqualTo(100))))  //COBOL==> IF SQLCODE NOT = ZERO AND SQLCODE NOT = 100
            {
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_RLF_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-RLF-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(043);                                                                       //COBOL==> MOVE 043 TO WRK-ADA-NBR
                M_9200_END_PGM("M_9200_EXIT"); if (Control.ExitProgram) { return; }                                   //COBOL==> PERFORM 9200-END-PGM THRU 9200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_7200_CHECK_PROGRAM_EXIST") { M_7200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7200_EXIT
        /// </summary>
        private void M_7200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7200_EXIT") { M_7500_ADD_RECORD(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7500_ADD_RECORD
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 04/10/2014 - ADD NEW RECORD WITH REQUIRED PROGRAM KEY
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_7500_ADD_RECORD(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.PPR1_FK_CLB_CLIENT_NO.SetValue(WS.DBK1_CLIENT_NUMBER);                                           //COBOL==> MOVE DBK1-CLIENT-NUMBER TO PPR1-FK-CLB-CLIENT-NO.
            WS.PPR1_CREATED_BY.SetValue(Control.GetUserID());                                                   //COBOL==> EXEC CICS ASSIGN USERID ( PPR1-CREATED-BY ) END-EXEC.
            WS.PPR1_LAST_MODIFIED_BY.SetValue(WS.PPR1_CREATED_BY);                                              //COBOL==> MOVE PPR1-CREATED-BY TO PPR1-LAST-MODIFIED-BY.
            WS.PPR1_PROGRAM_KEY.SetValue("SYNC");                                                               //COBOL==> MOVE 'SYNC' TO PPR1-PROGRAM-KEY.
            DbConv.ExecuteSql("INSERT INTO KSD_PERSON_PGM_REQ  ( PROGRAM_KEY , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO  ) VALUES  ( {0}, {1}, CURRENT_TIMESTAMP , {2}, CURRENT_TIMESTAMP , {3} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_PERSON_PGM_REQ ( PROGRAM_KEY , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO ) VALUES ( :PPR1-PROGRAM-KEY , :PPR1-CREATED-BY , CURRENT_TIMESTAMP , :PPR1-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :PPR1-FK-CLB-CLIENT-NO ) END-EXEC.
                                 WS.PPR1_PROGRAM_KEY, WS.PPR1_CREATED_BY, WS.PPR1_LAST_MODIFIED_BY, WS.PPR1_FK_CLB_CLIENT_NO);
            if (!(DbConv.SQLCA.SQLCODE.IsEqualTo(0)))                                                           //COBOL==> IF SQLCODE NOT = ZERO
            {
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_ADD_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADD-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(043);                                                                       //COBOL==> MOVE 043 TO WRK-ADA-NBR
                M_9200_END_PGM("M_9200_EXIT"); if (Control.ExitProgram) { return; }                                   //COBOL==> PERFORM 9200-END-PGM THRU 9200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_7500_ADD_RECORD") { M_7500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7500_EXIT
        /// </summary>
        private void M_7500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7500_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7500_EXIT") { M_7600_UPDATE_RECORD(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7600_UPDATE_RECORD
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 04/10/2014 - UPDATE RECORD WITH REQUIRED PROGRAM KEY
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_7600_UPDATE_RECORD(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.PPR1_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                             //COBOL==> EXEC CICS ASSIGN USERID ( PPR1-LAST-MODIFIED-BY ) END-EXEC.
            WS.PPR1_PROGRAM_KEY.SetValue("SYNC");                                                               //COBOL==> MOVE 'SYNC' TO PPR1-PROGRAM-KEY.
            DbConv.ExecuteSql("UPDATE KSD_PERSON_PGM_REQ SET PROGRAM_KEY = {0},  LAST_MODIFIED_BY = {1},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE FK_CLB_CLIENT_NO = {2}", WS.PPR1_PROGRAM_KEY, WS.PPR1_LAST_MODIFIED_BY, WS.DBK1_CLIENT_NUMBER);  //COBOL==> EXEC SQL UPDATE KSD_PERSON_PGM_REQ SET PROGRAM_KEY = :PPR1-PROGRAM-KEY , LAST_MODIFIED_BY = :PPR1-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER END-EXEC.
            if (!(DbConv.SQLCA.SQLCODE.IsEqualTo(0)))                                                           //COBOL==> IF SQLCODE NOT = ZERO
            {
                WS.WRK_ADA_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ADA-ERR TO TRUE
                WS.WRK_UPD_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-UPD-ERR TO TRUE
                WS.WRK_ADA_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                       //COBOL==> MOVE SQLCODE TO WRK-ADA-CD
                WS.WRK_ADA_NBR.SetValue(043);                                                                       //COBOL==> MOVE 043 TO WRK-ADA-NBR
                M_9200_END_PGM("M_9200_EXIT"); if (Control.ExitProgram) { return; }                                   //COBOL==> PERFORM 9200-END-PGM THRU 9200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_7600_UPDATE_RECORD") { M_7600_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7600_EXIT
        /// </summary>
        private void M_7600_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7600_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7600_EXIT") { M_9000_ERR_PGM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9000_ERR_PGM
        /// </summary>
        private void M_9000_ERR_PGM(string returnMethod = "")
        {
            WS.WRK_ENV_ERR.SetValue(true);                                                                      //COBOL==> SET WRK-ENV-ERR TO TRUE.
            WS.WRK_RES_NM.SetValue(Control.EIBRSRCE);                                                           //COBOL==> MOVE EIBRSRCE TO WRK-RES-NM.
            WS.WRK_FUN_CD.SetValue(Control.EIBFN);                                                              //COBOL==> MOVE EIBFN TO WRK-FUN-CD.
            WS.WRK_ERR_CD.SetValue(Control.EIBRCODE);                                                           //COBOL==> MOVE EIBRCODE TO WRK-ERR-CD.
            M_9200_END_PGM("M_9200_EXIT"); if (Control.ExitProgram) { return; }                                   //COBOL==> PERFORM 9200-END-PGM THRU 9200-EXIT.
            if (returnMethod != "" && returnMethod != "M_9000_ERR_PGM") { M_9000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9000_EXIT
        /// </summary>
        private void M_9000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_9000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9000_EXIT") { M_9200_END_PGM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9200_END_PGM
        /// </summary>
        private void M_9200_END_PGM(string returnMethod = "")
        {
            if (WS.WRK_ADA_ERR.Value)                                                                           //COBOL==> IF WRK-ADA-ERR
            {
                LS.TYPE_0003.SetValue(WS.WRK_ERR_TYP);                                                              //COBOL==> MOVE WRK-ERR-TYP TO TYPE-0003
                LS.ADABAS_FILE_ACTION_0003.SetValue(WS.WRK_ADA_ACT);                                                //COBOL==> MOVE WRK-ADA-ACT TO ADABAS-FILE-ACTION-0003
                LS.ADABAS_FILE_NUMBER_0003.SetValue(WS.WRK_ADA_NBR);                                                //COBOL==> MOVE WRK-ADA-NBR TO ADABAS-FILE-NUMBER-0003
                LS.ADABAS_RESPONSE_CD_0003.SetValue(WS.WRK_ADA_CD);                                                 //COBOL==> MOVE WRK-ADA-CD TO ADABAS-RESPONSE-CD-0003
                LS.NUMERIC_RETURN_CODE_0002.SetValue(2);                                                            //COBOL==> MOVE 2 TO NUMERIC-RETURN-CODE-0002
                WS.ADA_MSG_TXT_1.SetValue("ADABAS ERROR");                                                          //COBOL==> MOVE 'ADABAS ERROR' TO ADA-MSG-TXT-1
                WS.ADA_MSG_CD.SetValue(WS.WRK_ADA_CD);                                                              //COBOL==> MOVE WRK-ADA-CD TO ADA-MSG-CD
                WS.ADA_MSG_TXT_2.SetValue(" ON FILE");                                                              //COBOL==> MOVE ' ON FILE' TO ADA-MSG-TXT-2
                WS.ADA_MSG_NBR.SetValue(WS.WRK_ADA_NBR);                                                            //COBOL==> MOVE WRK-ADA-NBR TO ADA-MSG-NBR
                WS.ADA_MSG_TXT_3.SetValue(" WHEN ATTEMPTING");                                                      //COBOL==> MOVE ' WHEN ATTEMPTING' TO ADA-MSG-TXT-3
                WS.ADA_MSG_ACT.SetValue(WS.WRK_ADA_ACT);                                                            //COBOL==> MOVE WRK-ADA-ACT TO ADA-MSG-ACT
                WS.WRK_MSG.SetValue(WS.ADA_MSG);                                                                    //COBOL==> MOVE ADA-MSG TO WRK-MSG
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WRK_ENV_ERR.Value)                                                                           //COBOL==> IF WRK-ENV-ERR
            {
                LS.TYPE_0003.SetValue(WS.WRK_ERR_TYP);                                                              //COBOL==> MOVE WRK-ERR-TYP TO TYPE-0003
                LS.CICS_RESOURCE_NM_0003.SetValue(WS.WRK_RES_NM);                                                   //COBOL==> MOVE WRK-RES-NM TO CICS-RESOURCE-NM-0003
                LS.CICS_FUNCTION_CD_0003.SetValue(WS.WRK_FUN_CD);                                                   //COBOL==> MOVE WRK-FUN-CD TO CICS-FUNCTION-CD-0003
                LS.CICS_RESPONSE_CD_0003.SetValue(WS.WRK_ERR_CD);                                                   //COBOL==> MOVE WRK-ERR-CD TO CICS-RESPONSE-CD-0003
                LS.NUMERIC_RETURN_CODE_0002.SetValue(3);                                                            //COBOL==> MOVE 3 TO NUMERIC-RETURN-CODE-0002
                WS.ENV_MSG_TXT_1.SetValue("CICS ERROR");                                                            //COBOL==> MOVE 'CICS ERROR' TO ENV-MSG-TXT-1
                WS.ENV_MSG_CD.SetValue(WS.WRK_ERR_CD);                                                              //COBOL==> MOVE WRK-ERR-CD TO ENV-MSG-CD
                WS.ENV_MSG_TXT_2.SetValue(" ON RESOURCE");                                                          //COBOL==> MOVE ' ON RESOURCE' TO ENV-MSG-TXT-2
                WS.ENV_MSG_RES.SetValue(WS.WRK_RES_NM);                                                             //COBOL==> MOVE WRK-RES-NM TO ENV-MSG-RES
                WS.ENV_MSG_TXT_3.SetValue(" WHEN ATTEMPTING");                                                      //COBOL==> MOVE ' WHEN ATTEMPTING' TO ENV-MSG-TXT-3
                WS.ENV_MSG_FUN.SetValue(WS.WRK_FUN_CD);                                                             //COBOL==> MOVE WRK-FUN-CD TO ENV-MSG-FUN
                WS.WRK_MSG.SetValue(WS.ENV_MSG);                                                                    //COBOL==> MOVE ENV-MSG TO WRK-MSG
            }                                                                                                   //COBOL==> END-IF.
            LS.PSMGR_EXIT_INFOMSG.SetValue(WS.WRK_MSG);                                                         //COBOL==> MOVE WRK-MSG TO PSMGR-EXIT-INFOMSG.
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_9200_EXIT
        /// </summary>
        private void M_9200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_9200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9200_EXIT") { M_PARA_0063179058_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0063179058_EXIT
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 04/09/2014
        ///COMMENT: **************************************************************
        ///COMMENT:  ORIGINAL PROGRAM USING ADABAS - COMMENTED OUT
        ///COMMENT: **************************************************************
        ///COMMENT:  INCLUDE NAME:  SWCSZG52
        ///COMMENT:      EAB NAME:  SWEXIL04
        ///COMMENT:   DESCRIPTION:  UPDATE PERSON-PROGRAM-REQ-DBF FOR SYNC
        ///COMMENT: *****************************************************************
        ///COMMENT:  11-01-00  MLS  CREATED
        ///COMMENT: *****************************************************************
        ///COMMENT: 0000-BEG-PGM.
        ///COMMENT:      INITIALIZE WRK-PGM-ERR.
        ///COMMENT:      INITIALIZE WRK-MSG.
        ///COMMENT:      EXEC CICS HANDLE CONDITION
        ///COMMENT:                ERROR (9000-ERR-PGM)
        ///COMMENT:      END-EXEC.
        ///COMMENT:      EXEC CICS ADDRESS
        ///COMMENT:                TWA (ADDRESS OF TWA)
        ///COMMENT:      END-EXEC.
        ///COMMENT:      CALL 'ADASTWA' USING TWA CONTROL-BLOCK.
        ///COMMENT:      CALL SRADALNK  USING DFHEIBLK DFHCOMMAREA TWA SRMODLNK.
        ///COMMENT:      IF  RESPONSE-CODE     > 0
        ///COMMENT:      AND RESPONSE-CODE NOT = 9
        ///COMMENT:          SET  WRK-ADA-ERR   TO TRUE
        ///COMMENT:          SET  WRK-BEG-ERR   TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODE TO WRK-ADA-CD
        ///COMMENT:          PERFORM 9200-END-PGM
        ///COMMENT:      END-IF.
        ///COMMENT:      MOVE NUMBER-0001 TO WRK-CLT-NBR.
        ///COMMENT:      MOVE 0           TO NUMERIC-RETURN-CODE-0002.
        ///COMMENT:      PERFORM 1000-CHK-REQ-REC.
        ///COMMENT:      PERFORM 9200-END-PGM.
        ///COMMENT: 1000-CHK-REQ-REC.
        ///COMMENT:      MOVE WRK-CLT-NBR TO V-CLIENT-NUMBER043.
        ///COMMENT:      @READLOGICAL043 HOLD FIRST.
        ///COMMENT:      IF  RESPONSE-CODE043 = 0
        ///COMMENT:          IF  CLIENT-NUMBER043 = WRK-CLT-NBR
        ///COMMENT:              IF  PROGRAM-KEY043-1 = 'HIST'
        ///COMMENT:              OR  PROGRAM-KEY043-1 = 'SYNC'
        ///COMMENT:                  PERFORM 1200-REL-REQ-REC
        ///COMMENT:              ELSE
        ///COMMENT:                  PERFORM 1400-UPD-REQ-REC
        ///COMMENT:              END-IF
        ///COMMENT:          ELSE
        ///COMMENT:              PERFORM 1600-ADD-REQ-REC
        ///COMMENT:          END-IF
        ///COMMENT:      ELSE
        ///COMMENT:          IF  EOF043
        ///COMMENT:              PERFORM 1600-ADD-REQ-REC
        ///COMMENT:          ELSE
        ///COMMENT:              SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:              SET  WRK-RLF-ERR      TO TRUE
        ///COMMENT:              MOVE RESPONSE-CODE043 TO WRK-ADA-CD
        ///COMMENT:              MOVE 043              TO WRK-ADA-NBR
        ///COMMENT:              PERFORM 9200-END-PGM
        ///COMMENT:          END-IF
        ///COMMENT:      END-IF.
        ///COMMENT: 1200-REL-REQ-REC.
        ///COMMENT:      @RELISN043.
        ///COMMENT:      IF  RESPONSE-CODE043 > 0
        ///COMMENT:          SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:          SET  WRK-REL-ERR      TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODE043 TO WRK-ADA-CD
        ///COMMENT:          MOVE 043              TO WRK-ADA-NBR
        ///COMMENT:          PERFORM 9200-END-PGM
        ///COMMENT:      END-IF.
        ///COMMENT:      PERFORM 1800-END-REQ-REC.
        ///COMMENT:      MOVE 1       TO NUMERIC-RETURN-CODE-0002.
        ///COMMENT:      MOVE DUP-MSG TO WRK-MSG.
        ///COMMENT: 1400-UPD-REQ-REC.
        ///COMMENT:      MOVE 'SYNC' TO PROGRAM-KEY043-1.
        ///COMMENT:      @UPDATE043.
        ///COMMENT:      IF  RESPONSE-CODE043 > 0
        ///COMMENT:          SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:          SET  WRK-UPD-ERR      TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODE043 TO WRK-ADA-CD
        ///COMMENT:          MOVE 043              TO WRK-ADA-NBR
        ///COMMENT:          PERFORM 9200-END-PGM
        ///COMMENT:      END-IF.
        ///COMMENT:      PERFORM 1800-END-REQ-REC.
        ///COMMENT:      MOVE PRC-MSG TO WRK-MSG.
        ///COMMENT: 1600-ADD-REQ-REC.
        ///COMMENT:      MOVE WRK-CLT-NBR TO CLIENT-NUMBER043.
        ///COMMENT:      MOVE 'SYNC'      TO PROGRAM-KEY043-1.
        ///COMMENT:      @ADD043.
        ///COMMENT:      IF  RESPONSE-CODE043 > 0
        ///COMMENT:          SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:          SET  WRK-ADD-ERR      TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODE043 TO WRK-ADA-CD
        ///COMMENT:          MOVE 043              TO WRK-ADA-NBR
        ///COMMENT:          PERFORM 9200-END-PGM
        ///COMMENT:      END-IF.
        ///COMMENT:      PERFORM 1800-END-REQ-REC.
        ///COMMENT:      MOVE PRC-MSG TO WRK-MSG.
        ///COMMENT: 1800-END-REQ-REC.
        ///COMMENT:      @END-TRANSACTION.
        ///COMMENT:      IF  RESPONSE-CODEOPN > 0
        ///COMMENT:          SET  WRK-ADA-ERR      TO TRUE
        ///COMMENT:          SET  WRK-END-ERR      TO TRUE
        ///COMMENT:          MOVE RESPONSE-CODEOPN TO WRK-ADA-CD
        ///COMMENT:          PERFORM 9200-END-PGM
        ///COMMENT:      END-IF.
        ///COMMENT: 9000-ERR-PGM.
        ///COMMENT:      SET  WRK-ENV-ERR TO TRUE.
        ///COMMENT:      MOVE EIBRSRCE    TO WRK-RES-NM.
        ///COMMENT:      MOVE EIBFN       TO WRK-FUN-CD.
        ///COMMENT:      MOVE EIBRCODE    TO WRK-ERR-CD.
        ///COMMENT:      PERFORM 9200-END-PGM.
        ///COMMENT: 9200-END-PGM.
        ///COMMENT:      IF  WRK-ADA-ERR
        ///COMMENT:          MOVE WRK-ERR-TYP        TO TYPE-0003
        ///COMMENT:          MOVE WRK-ADA-ACT        TO ADABAS-FILE-ACTION-0003
        ///COMMENT:          MOVE WRK-ADA-NBR        TO ADABAS-FILE-NUMBER-0003
        ///COMMENT:          MOVE WRK-ADA-CD         TO ADABAS-RESPONSE-CD-0003
        ///COMMENT:          MOVE 2                  TO NUMERIC-RETURN-CODE-0002
        ///COMMENT:          MOVE 'ADABAS ERROR'     TO ADA-MSG-TXT-1
        ///COMMENT:          MOVE WRK-ADA-CD         TO ADA-MSG-CD
        ///COMMENT:          MOVE ' ON FILE'         TO ADA-MSG-TXT-2
        ///COMMENT:          MOVE WRK-ADA-NBR        TO ADA-MSG-NBR
        ///COMMENT:          MOVE ' WHEN ATTEMPTING' TO ADA-MSG-TXT-3
        ///COMMENT:          MOVE WRK-ADA-ACT        TO ADA-MSG-ACT
        ///COMMENT:          MOVE ADA-MSG            TO WRK-MSG
        ///COMMENT:      END-IF.
        ///COMMENT:      IF  WRK-ENV-ERR
        ///COMMENT:          MOVE WRK-ERR-TYP        TO TYPE-0003
        ///COMMENT:          MOVE WRK-RES-NM         TO CICS-RESOURCE-NM-0003
        ///COMMENT:          MOVE WRK-FUN-CD         TO CICS-FUNCTION-CD-0003
        ///COMMENT:          MOVE WRK-ERR-CD         TO CICS-RESPONSE-CD-0003
        ///COMMENT:          MOVE 3                  TO NUMERIC-RETURN-CODE-0002
        ///COMMENT:          MOVE 'CICS ERROR'       TO ENV-MSG-TXT-1
        ///COMMENT:          MOVE WRK-ERR-CD         TO ENV-MSG-CD
        ///COMMENT:          MOVE ' ON RESOURCE'     TO ENV-MSG-TXT-2
        ///COMMENT:          MOVE WRK-RES-NM         TO ENV-MSG-RES
        ///COMMENT:          MOVE ' WHEN ATTEMPTING' TO ENV-MSG-TXT-3
        ///COMMENT:          MOVE WRK-FUN-CD         TO ENV-MSG-FUN
        ///COMMENT:          MOVE ENV-MSG            TO WRK-MSG
        ///COMMENT:      END-IF.
        ///COMMENT:      MOVE WRK-MSG TO PSMGR-EXIT-INFOMSG.
        ///COMMENT:      GOBACK.
        /// </remarks>
        private void M_PARA_0063179058_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0063179058_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_0063179058_EXIT") { M_PARA_0063179058_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0063179058_INIT
        /// </summary>
        private void M_PARA_0063179058_INIT(string returnMethod = "")
        {
            LS.EXPORT_RETURN_CODE_0002EV.ResetToInitialValue();                                                 //COBOL==> INITIALIZE EXPORT-RETURN-CODE-0002EV
            LS.EXPORT_0003EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0003EV .
            if (returnMethod != "" && returnMethod != "M_PARA_0063179058_INIT") { M_PARA_0063179058_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0063179058_INIT_EXIT
        /// </summary>
        private void M_PARA_0063179058_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0063179058_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
