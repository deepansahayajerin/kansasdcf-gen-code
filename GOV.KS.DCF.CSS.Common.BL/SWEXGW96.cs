#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:49:16 PM
   **        *   FROM COBOL PGM   :  SWEXGW96
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                              COOL:GEN
               COPYRIGHT 1998, STERLING SOFTWARE, INC.
       NAME: EAB_CONVERT_NUMERIC              DATE: 1998/11/30
       TARGET OS:   MVS                       TIME: 16:51:23
       TARGET DBMS: DB2                       USER: SWSREXL
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
   **************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Core;
using System;
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXGW96_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXGW96_ws_WorkingStorage";
            internal const string WS_STOP_SUPPRESS = "WS_STOP_SUPPRESS";
            internal const string WS_IMPORT_AMT = "WS_IMPORT_AMT";
            internal const string WS_POS = "WS_POS";
            internal const string WS_PARENS_AMT = "WS_PARENS_AMT";
            internal const string WS_P_PAREN_START = "WS_P_PAREN_START";
            internal const string WS_P_TRILLIONS = "WS_P_TRILLIONS";
            internal const string WS_P_COMMA_FOUR = "WS_P_COMMA_FOUR";
            internal const string WS_P_HUNDRED_BILLIONS = "WS_P_HUNDRED_BILLIONS";
            internal const string WS_P_TEN_BILLIONS = "WS_P_TEN_BILLIONS";
            internal const string WS_P_BILLIONS = "WS_P_BILLIONS";
            internal const string WS_P_COMMA_THREE = "WS_P_COMMA_THREE";
            internal const string WS_P_HUNDRED_MILLIONS = "WS_P_HUNDRED_MILLIONS";
            internal const string WS_P_TEN_MILLIONS = "WS_P_TEN_MILLIONS";
            internal const string WS_P_MILLIONS = "WS_P_MILLIONS";
            internal const string WS_P_COMMA_TWO = "WS_P_COMMA_TWO";
            internal const string WS_P_HUNDRED_THOUSANDS = "WS_P_HUNDRED_THOUSANDS";
            internal const string WS_P_TEN_THOUSANDS = "WS_P_TEN_THOUSANDS";
            internal const string WS_P_THOUSANDS = "WS_P_THOUSANDS";
            internal const string WS_P_COMMA_ONE = "WS_P_COMMA_ONE";
            internal const string WS_P_HUNDREDS = "WS_P_HUNDREDS";
            internal const string WS_P_TENS = "WS_P_TENS";
            internal const string WS_P_ONES = "WS_P_ONES";
            internal const string WS_P_DECIMAL_POINT = "WS_P_DECIMAL_POINT";
            internal const string WS_P_TENTHS = "WS_P_TENTHS";
            internal const string WS_P_HUNDRETHS = "WS_P_HUNDRETHS";
            internal const string WS_P_PAREN_END = "WS_P_PAREN_END";
            internal const string WS_CURRENCY_AMT = "WS_CURRENCY_AMT";
            internal const string WS_TRILLIONS = "WS_TRILLIONS";
            internal const string WS_COMMA_FOUR = "WS_COMMA_FOUR";
            internal const string WS_HUNDRED_BILLIONS = "WS_HUNDRED_BILLIONS";
            internal const string WS_TEN_BILLIONS = "WS_TEN_BILLIONS";
            internal const string WS_BILLIONS = "WS_BILLIONS";
            internal const string WS_COMMA_THREE = "WS_COMMA_THREE";
            internal const string WS_HUNDRED_MILLIONS = "WS_HUNDRED_MILLIONS";
            internal const string WS_TEN_MILLIONS = "WS_TEN_MILLIONS";
            internal const string WS_MILLIONS = "WS_MILLIONS";
            internal const string WS_COMMA_TWO = "WS_COMMA_TWO";
            internal const string WS_HUNDRED_THOUSANDS = "WS_HUNDRED_THOUSANDS";
            internal const string WS_TEN_THOUSANDS = "WS_TEN_THOUSANDS";
            internal const string WS_THOUSANDS = "WS_THOUSANDS";
            internal const string WS_COMMA_ONE = "WS_COMMA_ONE";
            internal const string WS_HUNDREDS = "WS_HUNDREDS";
            internal const string WS_TENS = "WS_TENS";
            internal const string WS_ONES = "WS_ONES";
            internal const string WS_DECIMAL_POINT = "WS_DECIMAL_POINT";
            internal const string WS_TENTHS = "WS_TENTHS";
            internal const string WS_HUNDRETHS = "WS_HUNDRETHS";
            internal const string WS_CURR_SIGN = "WS_CURR_SIGN";
            internal const string WS_NON_DECIMAL_AMT = "WS_NON_DECIMAL_AMT";
            internal const string WS_ND_HUNDRED_TRILLIONS = "WS_ND_HUNDRED_TRILLIONS";
            internal const string WS_ND_TEN_TRILLIONS = "WS_ND_TEN_TRILLIONS";
            internal const string WS_ND_TRILLIONS = "WS_ND_TRILLIONS";
            internal const string WS_ND_COMMA_FOUR = "WS_ND_COMMA_FOUR";
            internal const string WS_ND_HUNDRED_BILLIONS = "WS_ND_HUNDRED_BILLIONS";
            internal const string WS_ND_TEN_BILLIONS = "WS_ND_TEN_BILLIONS";
            internal const string WS_ND_BILLIONS = "WS_ND_BILLIONS";
            internal const string WS_ND_COMMA_THREE = "WS_ND_COMMA_THREE";
            internal const string WS_ND_HUNDRED_MILLIONS = "WS_ND_HUNDRED_MILLIONS";
            internal const string WS_ND_TEN_MILLIONS = "WS_ND_TEN_MILLIONS";
            internal const string WS_ND_MILLIONS = "WS_ND_MILLIONS";
            internal const string WS_ND_COMMA_TWO = "WS_ND_COMMA_TWO";
            internal const string WS_ND_HUNDRED_THOUSANDS = "WS_ND_HUNDRED_THOUSANDS";
            internal const string WS_ND_TEN_THOUSANDS = "WS_ND_TEN_THOUSANDS";
            internal const string WS_ND_THOUSANDS = "WS_ND_THOUSANDS";
            internal const string WS_ND_COMMA_ONE = "WS_ND_COMMA_ONE";
            internal const string WS_ND_HUNDREDS = "WS_ND_HUNDREDS";
            internal const string WS_ND_TENS = "WS_ND_TENS";
            internal const string WS_ND_ONES = "WS_ND_ONES";
            internal const string WS_ND_SIGN = "WS_ND_SIGN";
            internal const string WS_NO_COMMAS_AMT = "WS_NO_COMMAS_AMT";
            internal const string WS_NC_HUNDRED_TRILLIONS = "WS_NC_HUNDRED_TRILLIONS";
            internal const string WS_NC_TEN_TRILLIONS = "WS_NC_TEN_TRILLIONS";
            internal const string WS_NC_TRILLIONS = "WS_NC_TRILLIONS";
            internal const string WS_NC_HUNDRED_BILLIONS = "WS_NC_HUNDRED_BILLIONS";
            internal const string WS_NC_TEN_BILLIONS = "WS_NC_TEN_BILLIONS";
            internal const string WS_NC_BILLIONS = "WS_NC_BILLIONS";
            internal const string WS_NC_HUNDRED_MILLIONS = "WS_NC_HUNDRED_MILLIONS";
            internal const string WS_NC_TEN_MILLIONS = "WS_NC_TEN_MILLIONS";
            internal const string WS_NC_MILLIONS = "WS_NC_MILLIONS";
            internal const string WS_NC_HUNDRED_THOUSANDS = "WS_NC_HUNDRED_THOUSANDS";
            internal const string WS_NC_TEN_THOUSANDS = "WS_NC_TEN_THOUSANDS";
            internal const string WS_NC_THOUSANDS = "WS_NC_THOUSANDS";
            internal const string WS_NC_HUNDREDS = "WS_NC_HUNDREDS";
            internal const string WS_NC_TENS = "WS_NC_TENS";
            internal const string WS_NC_ONES = "WS_NC_ONES";
            internal const string WS_NC_SIGN = "WS_NC_SIGN";
        }
        #endregion

        #region Direct-access element properties
        public IField WS_STOP_SUPPRESS { get { return GetElementByName<IField>(Names.WS_STOP_SUPPRESS); } }
        public IField WS_IMPORT_AMT { get { return GetElementByName<IField>(Names.WS_IMPORT_AMT); } }
        public IArrayElementAccessor<IField> WS_POS { get { return GetArrayElementAccessor<IField>(Names.WS_POS); } }
        public IGroup WS_PARENS_AMT { get { return GetElementByName<IGroup>(Names.WS_PARENS_AMT); } }
        public IField WS_P_PAREN_START { get { return GetElementByName<IField>(Names.WS_P_PAREN_START); } }
        public IField WS_P_TRILLIONS { get { return GetElementByName<IField>(Names.WS_P_TRILLIONS); } }
        public IField WS_P_COMMA_FOUR { get { return GetElementByName<IField>(Names.WS_P_COMMA_FOUR); } }
        public IField WS_P_HUNDRED_BILLIONS { get { return GetElementByName<IField>(Names.WS_P_HUNDRED_BILLIONS); } }
        public IField WS_P_TEN_BILLIONS { get { return GetElementByName<IField>(Names.WS_P_TEN_BILLIONS); } }
        public IField WS_P_BILLIONS { get { return GetElementByName<IField>(Names.WS_P_BILLIONS); } }
        public IField WS_P_COMMA_THREE { get { return GetElementByName<IField>(Names.WS_P_COMMA_THREE); } }
        public IField WS_P_HUNDRED_MILLIONS { get { return GetElementByName<IField>(Names.WS_P_HUNDRED_MILLIONS); } }
        public IField WS_P_TEN_MILLIONS { get { return GetElementByName<IField>(Names.WS_P_TEN_MILLIONS); } }
        public IField WS_P_MILLIONS { get { return GetElementByName<IField>(Names.WS_P_MILLIONS); } }
        public IField WS_P_COMMA_TWO { get { return GetElementByName<IField>(Names.WS_P_COMMA_TWO); } }
        public IField WS_P_HUNDRED_THOUSANDS { get { return GetElementByName<IField>(Names.WS_P_HUNDRED_THOUSANDS); } }
        public IField WS_P_TEN_THOUSANDS { get { return GetElementByName<IField>(Names.WS_P_TEN_THOUSANDS); } }
        public IField WS_P_THOUSANDS { get { return GetElementByName<IField>(Names.WS_P_THOUSANDS); } }
        public IField WS_P_COMMA_ONE { get { return GetElementByName<IField>(Names.WS_P_COMMA_ONE); } }
        public IField WS_P_HUNDREDS { get { return GetElementByName<IField>(Names.WS_P_HUNDREDS); } }
        public IField WS_P_TENS { get { return GetElementByName<IField>(Names.WS_P_TENS); } }
        public IField WS_P_ONES { get { return GetElementByName<IField>(Names.WS_P_ONES); } }
        public IField WS_P_DECIMAL_POINT { get { return GetElementByName<IField>(Names.WS_P_DECIMAL_POINT); } }
        public IField WS_P_TENTHS { get { return GetElementByName<IField>(Names.WS_P_TENTHS); } }
        public IField WS_P_HUNDRETHS { get { return GetElementByName<IField>(Names.WS_P_HUNDRETHS); } }
        public IField WS_P_PAREN_END { get { return GetElementByName<IField>(Names.WS_P_PAREN_END); } }
        public IGroup WS_CURRENCY_AMT { get { return GetElementByName<IGroup>(Names.WS_CURRENCY_AMT); } }
        public IField WS_TRILLIONS { get { return GetElementByName<IField>(Names.WS_TRILLIONS); } }
        public IField WS_COMMA_FOUR { get { return GetElementByName<IField>(Names.WS_COMMA_FOUR); } }
        public IField WS_HUNDRED_BILLIONS { get { return GetElementByName<IField>(Names.WS_HUNDRED_BILLIONS); } }
        public IField WS_TEN_BILLIONS { get { return GetElementByName<IField>(Names.WS_TEN_BILLIONS); } }
        public IField WS_BILLIONS { get { return GetElementByName<IField>(Names.WS_BILLIONS); } }
        public IField WS_COMMA_THREE { get { return GetElementByName<IField>(Names.WS_COMMA_THREE); } }
        public IField WS_HUNDRED_MILLIONS { get { return GetElementByName<IField>(Names.WS_HUNDRED_MILLIONS); } }
        public IField WS_TEN_MILLIONS { get { return GetElementByName<IField>(Names.WS_TEN_MILLIONS); } }
        public IField WS_MILLIONS { get { return GetElementByName<IField>(Names.WS_MILLIONS); } }
        public IField WS_COMMA_TWO { get { return GetElementByName<IField>(Names.WS_COMMA_TWO); } }
        public IField WS_HUNDRED_THOUSANDS { get { return GetElementByName<IField>(Names.WS_HUNDRED_THOUSANDS); } }
        public IField WS_TEN_THOUSANDS { get { return GetElementByName<IField>(Names.WS_TEN_THOUSANDS); } }
        public IField WS_THOUSANDS { get { return GetElementByName<IField>(Names.WS_THOUSANDS); } }
        public IField WS_COMMA_ONE { get { return GetElementByName<IField>(Names.WS_COMMA_ONE); } }
        public IField WS_HUNDREDS { get { return GetElementByName<IField>(Names.WS_HUNDREDS); } }
        public IField WS_TENS { get { return GetElementByName<IField>(Names.WS_TENS); } }
        public IField WS_ONES { get { return GetElementByName<IField>(Names.WS_ONES); } }
        public IField WS_DECIMAL_POINT { get { return GetElementByName<IField>(Names.WS_DECIMAL_POINT); } }
        public IField WS_TENTHS { get { return GetElementByName<IField>(Names.WS_TENTHS); } }
        public IField WS_HUNDRETHS { get { return GetElementByName<IField>(Names.WS_HUNDRETHS); } }
        public IField WS_CURR_SIGN { get { return GetElementByName<IField>(Names.WS_CURR_SIGN); } }
        public IGroup WS_NON_DECIMAL_AMT { get { return GetElementByName<IGroup>(Names.WS_NON_DECIMAL_AMT); } }
        public IField WS_ND_HUNDRED_TRILLIONS { get { return GetElementByName<IField>(Names.WS_ND_HUNDRED_TRILLIONS); } }
        public IField WS_ND_TEN_TRILLIONS { get { return GetElementByName<IField>(Names.WS_ND_TEN_TRILLIONS); } }
        public IField WS_ND_TRILLIONS { get { return GetElementByName<IField>(Names.WS_ND_TRILLIONS); } }
        public IField WS_ND_COMMA_FOUR { get { return GetElementByName<IField>(Names.WS_ND_COMMA_FOUR); } }
        public IField WS_ND_HUNDRED_BILLIONS { get { return GetElementByName<IField>(Names.WS_ND_HUNDRED_BILLIONS); } }
        public IField WS_ND_TEN_BILLIONS { get { return GetElementByName<IField>(Names.WS_ND_TEN_BILLIONS); } }
        public IField WS_ND_BILLIONS { get { return GetElementByName<IField>(Names.WS_ND_BILLIONS); } }
        public IField WS_ND_COMMA_THREE { get { return GetElementByName<IField>(Names.WS_ND_COMMA_THREE); } }
        public IField WS_ND_HUNDRED_MILLIONS { get { return GetElementByName<IField>(Names.WS_ND_HUNDRED_MILLIONS); } }
        public IField WS_ND_TEN_MILLIONS { get { return GetElementByName<IField>(Names.WS_ND_TEN_MILLIONS); } }
        public IField WS_ND_MILLIONS { get { return GetElementByName<IField>(Names.WS_ND_MILLIONS); } }
        public IField WS_ND_COMMA_TWO { get { return GetElementByName<IField>(Names.WS_ND_COMMA_TWO); } }
        public IField WS_ND_HUNDRED_THOUSANDS { get { return GetElementByName<IField>(Names.WS_ND_HUNDRED_THOUSANDS); } }
        public IField WS_ND_TEN_THOUSANDS { get { return GetElementByName<IField>(Names.WS_ND_TEN_THOUSANDS); } }
        public IField WS_ND_THOUSANDS { get { return GetElementByName<IField>(Names.WS_ND_THOUSANDS); } }
        public IField WS_ND_COMMA_ONE { get { return GetElementByName<IField>(Names.WS_ND_COMMA_ONE); } }
        public IField WS_ND_HUNDREDS { get { return GetElementByName<IField>(Names.WS_ND_HUNDREDS); } }
        public IField WS_ND_TENS { get { return GetElementByName<IField>(Names.WS_ND_TENS); } }
        public IField WS_ND_ONES { get { return GetElementByName<IField>(Names.WS_ND_ONES); } }
        public IField WS_ND_SIGN { get { return GetElementByName<IField>(Names.WS_ND_SIGN); } }
        public IGroup WS_NO_COMMAS_AMT { get { return GetElementByName<IGroup>(Names.WS_NO_COMMAS_AMT); } }
        public IField WS_NC_HUNDRED_TRILLIONS { get { return GetElementByName<IField>(Names.WS_NC_HUNDRED_TRILLIONS); } }
        public IField WS_NC_TEN_TRILLIONS { get { return GetElementByName<IField>(Names.WS_NC_TEN_TRILLIONS); } }
        public IField WS_NC_TRILLIONS { get { return GetElementByName<IField>(Names.WS_NC_TRILLIONS); } }
        public IField WS_NC_HUNDRED_BILLIONS { get { return GetElementByName<IField>(Names.WS_NC_HUNDRED_BILLIONS); } }
        public IField WS_NC_TEN_BILLIONS { get { return GetElementByName<IField>(Names.WS_NC_TEN_BILLIONS); } }
        public IField WS_NC_BILLIONS { get { return GetElementByName<IField>(Names.WS_NC_BILLIONS); } }
        public IField WS_NC_HUNDRED_MILLIONS { get { return GetElementByName<IField>(Names.WS_NC_HUNDRED_MILLIONS); } }
        public IField WS_NC_TEN_MILLIONS { get { return GetElementByName<IField>(Names.WS_NC_TEN_MILLIONS); } }
        public IField WS_NC_MILLIONS { get { return GetElementByName<IField>(Names.WS_NC_MILLIONS); } }
        public IField WS_NC_HUNDRED_THOUSANDS { get { return GetElementByName<IField>(Names.WS_NC_HUNDRED_THOUSANDS); } }
        public IField WS_NC_TEN_THOUSANDS { get { return GetElementByName<IField>(Names.WS_NC_TEN_THOUSANDS); } }
        public IField WS_NC_THOUSANDS { get { return GetElementByName<IField>(Names.WS_NC_THOUSANDS); } }
        public IField WS_NC_HUNDREDS { get { return GetElementByName<IField>(Names.WS_NC_HUNDREDS); } }
        public IField WS_NC_TENS { get { return GetElementByName<IField>(Names.WS_NC_TENS); } }
        public IField WS_NC_ONES { get { return GetElementByName<IField>(Names.WS_NC_ONES); } }
        public IField WS_NC_SIGN { get { return GetElementByName<IField>(Names.WS_NC_SIGN); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.WS_STOP_SUPPRESS, FieldType.String, 1);

            IField WS_IMPORT_AMT_local = recordDef.CreateNewField(Names.WS_IMPORT_AMT, FieldType.String, 15);
            recordDef.CreateNewGroupRedefine("FILLER", WS_IMPORT_AMT_local, (FILLER) =>
            {
                FILLER.CreateNewFieldArray(Names.WS_POS, 15, FieldType.String, 1);
            });

            recordDef.CreateNewGroup(Names.WS_PARENS_AMT, (WS_PARENS_AMT) =>
           {
               WS_PARENS_AMT.CreateNewField(Names.WS_P_PAREN_START, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_TRILLIONS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_COMMA_FOUR, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_HUNDRED_BILLIONS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_TEN_BILLIONS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_BILLIONS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_COMMA_THREE, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_HUNDRED_MILLIONS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_TEN_MILLIONS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_MILLIONS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_COMMA_TWO, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_HUNDRED_THOUSANDS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_TEN_THOUSANDS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_THOUSANDS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_COMMA_ONE, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_HUNDREDS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_TENS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_ONES, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_DECIMAL_POINT, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_TENTHS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_HUNDRETHS, FieldType.String, 1);
               WS_PARENS_AMT.CreateNewField(Names.WS_P_PAREN_END, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.WS_CURRENCY_AMT, (WS_CURRENCY_AMT) =>
           {
               WS_CURRENCY_AMT.CreateNewField(Names.WS_TRILLIONS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_COMMA_FOUR, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_HUNDRED_BILLIONS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_TEN_BILLIONS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_BILLIONS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_COMMA_THREE, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_HUNDRED_MILLIONS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_TEN_MILLIONS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_MILLIONS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_COMMA_TWO, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_HUNDRED_THOUSANDS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_TEN_THOUSANDS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_THOUSANDS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_COMMA_ONE, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_HUNDREDS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_TENS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_ONES, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_DECIMAL_POINT, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_TENTHS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_HUNDRETHS, FieldType.String, 1);
               WS_CURRENCY_AMT.CreateNewField(Names.WS_CURR_SIGN, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.WS_NON_DECIMAL_AMT, (WS_NON_DECIMAL_AMT) =>
           {
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_HUNDRED_TRILLIONS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_TEN_TRILLIONS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_TRILLIONS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_COMMA_FOUR, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_HUNDRED_BILLIONS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_TEN_BILLIONS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_BILLIONS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_COMMA_THREE, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_HUNDRED_MILLIONS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_TEN_MILLIONS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_MILLIONS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_COMMA_TWO, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_HUNDRED_THOUSANDS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_TEN_THOUSANDS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_THOUSANDS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_COMMA_ONE, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_HUNDREDS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_TENS, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_ONES, FieldType.String, 1);
               WS_NON_DECIMAL_AMT.CreateNewField(Names.WS_ND_SIGN, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.WS_NO_COMMAS_AMT, (WS_NO_COMMAS_AMT) =>
           {
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_HUNDRED_TRILLIONS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_TEN_TRILLIONS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_TRILLIONS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_HUNDRED_BILLIONS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_TEN_BILLIONS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_BILLIONS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_HUNDRED_MILLIONS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_TEN_MILLIONS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_MILLIONS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_HUNDRED_THOUSANDS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_TEN_THOUSANDS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_THOUSANDS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_HUNDREDS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_TENS, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_ONES, FieldType.String, 1);
               WS_NO_COMMAS_AMT.CreateNewField(Names.WS_NC_SIGN, FieldType.String, 1);
           });

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXGW96_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXGW96_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string IMPORT_0001EV = "IMPORT_0001EV";
            internal const string EAB_CONVERT_NUMERIC_0001ET = "EAB_CONVERT_NUMERIC_0001ET";
            internal const string SEND_SIGN_0001AS = "SEND_SIGN_0001AS";
            internal const string SEND_SIGN_0001 = "SEND_SIGN_0001";
            internal const string SEND_SIGN_0001XX = "SEND_SIGN_0001XX";
            internal const string SEND_AMOUNT_0001AS = "SEND_AMOUNT_0001AS";
            internal const string SEND_AMOUNT_0001 = "SEND_AMOUNT_0001";
            internal const string SEND_AMOUNT_0001XX = "SEND_AMOUNT_0001XX";
            internal const string SEND_NON_SUPPRESS_POS_0001AS = "SEND_NON_SUPPRESS_POS_0001AS";
            internal const string SEND_NON_SUPPRESS_POS_0001 = "SEND_NON_SUPPRESS_POS_0001";
            internal const string SEND_NON_SUPPRESS_POS_0001XX = "SEND_NON_SUPPRESS_POS_0001XX";
            internal const string EXPORT_0002EV = "EXPORT_0002EV";
            internal const string EAB_CONVERT_NUMERIC_0002ET = "EAB_CONVERT_NUMERIC_0002ET";
            internal const string RETURN_CURRENCY_SIGNED_0002AS = "RETURN_CURRENCY_SIGNED_0002AS";
            internal const string RETURN_CURRENCY_SIGNED_0002 = "RETURN_CURRENCY_SIGNED_0002";
            internal const string RETURN_CURRENCY_SIGNED_0002XX = "RETURN_CURRENCY_SIGNED_0002XX";
            internal const string RETURN_CURRENCY_NEG_IN__0003AS = "RETURN_CURRENCY_NEG_IN__0003AS";
            internal const string RETURN_CURRENCY_NEG_IN_PA_0003 = "RETURN_CURRENCY_NEG_IN_PA_0003";
            internal const string RETURN_CURRENCY_NEG_IN__0003XX = "RETURN_CURRENCY_NEG_IN__0003XX";
            internal const string RETURN_AMOUNT_NON_DECIM_0004AS = "RETURN_AMOUNT_NON_DECIM_0004AS";
            internal const string RETURN_AMOUNT_NON_DECIMAL_0004 = "RETURN_AMOUNT_NON_DECIMAL_0004";
            internal const string RETURN_AMOUNT_NON_DECIM_0004XX = "RETURN_AMOUNT_NON_DECIM_0004XX";
            internal const string RETURN_NO_COMMAS_IN_NON_0005AS = "RETURN_NO_COMMAS_IN_NON_0005AS";
            internal const string RETURN_NO_COMMAS_IN_NON_D_0005 = "RETURN_NO_COMMAS_IN_NON_D_0005";
            internal const string RETURN_NO_COMMAS_IN_NON_0005XX = "RETURN_NO_COMMAS_IN_NON_0005XX";
            internal const string RETURN_OK_FLAG_0005AS = "RETURN_OK_FLAG_0005AS";
            internal const string RETURN_OK_FLAG_0005 = "RETURN_OK_FLAG_0005";
            internal const string RETURN_OK_FLAG_0005XX = "RETURN_OK_FLAG_0005XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup IMPORT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_0001EV); } }
        public IGroup EAB_CONVERT_NUMERIC_0001ET { get { return GetElementByName<IGroup>(Names.EAB_CONVERT_NUMERIC_0001ET); } }
        public IField SEND_SIGN_0001AS { get { return GetElementByName<IField>(Names.SEND_SIGN_0001AS); } }
        public IField SEND_SIGN_0001 { get { return GetElementByName<IField>(Names.SEND_SIGN_0001); } }
        public IField SEND_SIGN_0001XX { get { return GetElementByName<IField>(Names.SEND_SIGN_0001XX); } }
        public IField SEND_AMOUNT_0001AS { get { return GetElementByName<IField>(Names.SEND_AMOUNT_0001AS); } }
        public IField SEND_AMOUNT_0001 { get { return GetElementByName<IField>(Names.SEND_AMOUNT_0001); } }
        public IField SEND_AMOUNT_0001XX { get { return GetElementByName<IField>(Names.SEND_AMOUNT_0001XX); } }
        public IField SEND_NON_SUPPRESS_POS_0001AS { get { return GetElementByName<IField>(Names.SEND_NON_SUPPRESS_POS_0001AS); } }
        public IField SEND_NON_SUPPRESS_POS_0001 { get { return GetElementByName<IField>(Names.SEND_NON_SUPPRESS_POS_0001); } }
        public IField SEND_NON_SUPPRESS_POS_0001XX { get { return GetElementByName<IField>(Names.SEND_NON_SUPPRESS_POS_0001XX); } }
        public IGroup EXPORT_0002EV { get { return GetElementByName<IGroup>(Names.EXPORT_0002EV); } }
        public IGroup EAB_CONVERT_NUMERIC_0002ET { get { return GetElementByName<IGroup>(Names.EAB_CONVERT_NUMERIC_0002ET); } }
        public IField RETURN_CURRENCY_SIGNED_0002AS { get { return GetElementByName<IField>(Names.RETURN_CURRENCY_SIGNED_0002AS); } }
        public IField RETURN_CURRENCY_SIGNED_0002 { get { return GetElementByName<IField>(Names.RETURN_CURRENCY_SIGNED_0002); } }
        public IField RETURN_CURRENCY_SIGNED_0002XX { get { return GetElementByName<IField>(Names.RETURN_CURRENCY_SIGNED_0002XX); } }
        public IField RETURN_CURRENCY_NEG_IN__0003AS { get { return GetElementByName<IField>(Names.RETURN_CURRENCY_NEG_IN__0003AS); } }
        public IField RETURN_CURRENCY_NEG_IN_PA_0003 { get { return GetElementByName<IField>(Names.RETURN_CURRENCY_NEG_IN_PA_0003); } }
        public IField RETURN_CURRENCY_NEG_IN__0003XX { get { return GetElementByName<IField>(Names.RETURN_CURRENCY_NEG_IN__0003XX); } }
        public IField RETURN_AMOUNT_NON_DECIM_0004AS { get { return GetElementByName<IField>(Names.RETURN_AMOUNT_NON_DECIM_0004AS); } }
        public IField RETURN_AMOUNT_NON_DECIMAL_0004 { get { return GetElementByName<IField>(Names.RETURN_AMOUNT_NON_DECIMAL_0004); } }
        public IField RETURN_AMOUNT_NON_DECIM_0004XX { get { return GetElementByName<IField>(Names.RETURN_AMOUNT_NON_DECIM_0004XX); } }
        public IField RETURN_NO_COMMAS_IN_NON_0005AS { get { return GetElementByName<IField>(Names.RETURN_NO_COMMAS_IN_NON_0005AS); } }
        public IField RETURN_NO_COMMAS_IN_NON_D_0005 { get { return GetElementByName<IField>(Names.RETURN_NO_COMMAS_IN_NON_D_0005); } }
        public IField RETURN_NO_COMMAS_IN_NON_0005XX { get { return GetElementByName<IField>(Names.RETURN_NO_COMMAS_IN_NON_0005XX); } }
        public IField RETURN_OK_FLAG_0005AS { get { return GetElementByName<IField>(Names.RETURN_OK_FLAG_0005AS); } }
        public IField RETURN_OK_FLAG_0005 { get { return GetElementByName<IField>(Names.RETURN_OK_FLAG_0005); } }
        public IField RETURN_OK_FLAG_0005XX { get { return GetElementByName<IField>(Names.RETURN_OK_FLAG_0005XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d6", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d6) =>
                   {
                       FILLER_d6.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d6.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d6.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(96, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 16);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewFillerField(199, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_0001EV, (IMPORT_0001EV) =>
           {
               IMPORT_0001EV.CreateNewGroup(Names.EAB_CONVERT_NUMERIC_0001ET, (EAB_CONVERT_NUMERIC_0001ET) =>
               {
                   EAB_CONVERT_NUMERIC_0001ET.CreateNewField(Names.SEND_SIGN_0001AS, FieldType.String, 1);

                   IField SEND_SIGN_0001_local = EAB_CONVERT_NUMERIC_0001ET.CreateNewField(Names.SEND_SIGN_0001, FieldType.String, 1);
                   EAB_CONVERT_NUMERIC_0001ET.CreateNewFieldRedefine(Names.SEND_SIGN_0001XX, FieldType.String, SEND_SIGN_0001_local, 1);
                   EAB_CONVERT_NUMERIC_0001ET.CreateNewField(Names.SEND_AMOUNT_0001AS, FieldType.String, 1);

                   IField SEND_AMOUNT_0001_local = EAB_CONVERT_NUMERIC_0001ET.CreateNewField(Names.SEND_AMOUNT_0001, FieldType.String, 15);
                   EAB_CONVERT_NUMERIC_0001ET.CreateNewFieldRedefine(Names.SEND_AMOUNT_0001XX, FieldType.String, SEND_AMOUNT_0001_local, 15);
                   EAB_CONVERT_NUMERIC_0001ET.CreateNewField(Names.SEND_NON_SUPPRESS_POS_0001AS, FieldType.String, 1);

                   IField SEND_NON_SUPPRESS_POS_0001_local = EAB_CONVERT_NUMERIC_0001ET.CreateNewField(Names.SEND_NON_SUPPRESS_POS_0001, FieldType.SignedNumeric, 2);
                   EAB_CONVERT_NUMERIC_0001ET.CreateNewFieldRedefine(Names.SEND_NON_SUPPRESS_POS_0001XX, FieldType.String, SEND_NON_SUPPRESS_POS_0001_local, 2);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_0002EV, (EXPORT_0002EV) =>
           {
               EXPORT_0002EV.CreateNewGroup(Names.EAB_CONVERT_NUMERIC_0002ET, (EAB_CONVERT_NUMERIC_0002ET) =>
               {
                   EAB_CONVERT_NUMERIC_0002ET.CreateNewField(Names.RETURN_CURRENCY_SIGNED_0002AS, FieldType.String, 1);

                   IField RETURN_CURRENCY_SIGNED_0002_local = EAB_CONVERT_NUMERIC_0002ET.CreateNewField(Names.RETURN_CURRENCY_SIGNED_0002, FieldType.String, 21);
                   EAB_CONVERT_NUMERIC_0002ET.CreateNewFieldRedefine(Names.RETURN_CURRENCY_SIGNED_0002XX, FieldType.String, RETURN_CURRENCY_SIGNED_0002_local, 21);
                   EAB_CONVERT_NUMERIC_0002ET.CreateNewField(Names.RETURN_CURRENCY_NEG_IN__0003AS, FieldType.String, 1);

                   IField RETURN_CURRENCY_NEG_IN_PA_0003_local = EAB_CONVERT_NUMERIC_0002ET.CreateNewField(Names.RETURN_CURRENCY_NEG_IN_PA_0003, FieldType.String, 22);
                   EAB_CONVERT_NUMERIC_0002ET.CreateNewFieldRedefine(Names.RETURN_CURRENCY_NEG_IN__0003XX, FieldType.String, RETURN_CURRENCY_NEG_IN_PA_0003_local, 22);
                   EAB_CONVERT_NUMERIC_0002ET.CreateNewField(Names.RETURN_AMOUNT_NON_DECIM_0004AS, FieldType.String, 1);

                   IField RETURN_AMOUNT_NON_DECIMAL_0004_local = EAB_CONVERT_NUMERIC_0002ET.CreateNewField(Names.RETURN_AMOUNT_NON_DECIMAL_0004, FieldType.String, 20);
                   EAB_CONVERT_NUMERIC_0002ET.CreateNewFieldRedefine(Names.RETURN_AMOUNT_NON_DECIM_0004XX, FieldType.String, RETURN_AMOUNT_NON_DECIMAL_0004_local, 20);
                   EAB_CONVERT_NUMERIC_0002ET.CreateNewField(Names.RETURN_NO_COMMAS_IN_NON_0005AS, FieldType.String, 1);

                   IField RETURN_NO_COMMAS_IN_NON_D_0005_local = EAB_CONVERT_NUMERIC_0002ET.CreateNewField(Names.RETURN_NO_COMMAS_IN_NON_D_0005, FieldType.String, 16);
                   EAB_CONVERT_NUMERIC_0002ET.CreateNewFieldRedefine(Names.RETURN_NO_COMMAS_IN_NON_0005XX, FieldType.String, RETURN_NO_COMMAS_IN_NON_D_0005_local, 16);
                   EAB_CONVERT_NUMERIC_0002ET.CreateNewField(Names.RETURN_OK_FLAG_0005AS, FieldType.String, 1);

                   IField RETURN_OK_FLAG_0005_local = EAB_CONVERT_NUMERIC_0002ET.CreateNewField(Names.RETURN_OK_FLAG_0005, FieldType.String, 1);
                   EAB_CONVERT_NUMERIC_0002ET.CreateNewFieldRedefine(Names.RETURN_OK_FLAG_0005XX, FieldType.String, RETURN_OK_FLAG_0005_local, 1);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(GLOBDATA, args, 2);
            SetPassedParm(IMPORT_0001EV, args, 3);
            SetPassedParm(EXPORT_0002EV, args, 4);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(GLOBDATA, args, 2);
            SetReturnParm(IMPORT_0001EV, args, 3);
            SetReturnParm(EXPORT_0002EV, args, 4);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXGW96 : EABBase
    {

        #region Public Constructors
        public SWEXGW96()
            : base()
        {
            this.ProgramName.SetValue("SWEXGW96");

            WS = new SWEXGW96_ws();
            LS = new SWEXGW96_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXGW96_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXGW96_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , GLOBDATA , IMPORT-0001EV , EXPORT-0002EV.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_2024281902(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_2024281902
        /// </summary>
        private void M_MAIN_2024281902(string returnMethod = "")
        {
            M_PARA_2024281902_INIT("M_PARA_2024281902_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-2024281902-INIT THRU PARA-2024281902-INIT-EXIT
            M_PARA_2024281902("M_PARA_2024281902_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-2024281902 THRU PARA-2024281902-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_2024281902
        /// </summary>
        private void M_PARA_2024281902(string returnMethod = "")
        {
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            //COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            LS.RETURN_OK_FLAG_0005.SetValueWithSpaces();                                                        //COBOL==> MOVE SPACES TO RETURN-OK-FLAG-0005
            if (!(LS.SEND_NON_SUPPRESS_POS_0001.IsNumericValue()))                                             //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 NOT NUMERIC
            {
                LS.RETURN_OK_FLAG_0005.SetValue("N");                                                               //COBOL==> MOVE 'N' TO RETURN-OK-FLAG-0005
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((LS.SEND_NON_SUPPRESS_POS_0001.IsLessThan(ZEROS))
             || (LS.SEND_NON_SUPPRESS_POS_0001.IsGreaterThan(15)))  //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 LESS THAN ZERO OR SEND-NON-SUPPRESS-POS-0001 GREATER THAN 15
                {
                    LS.RETURN_OK_FLAG_0005.SetValue("N");                                                               //COBOL==> MOVE 'N' TO RETURN-OK-FLAG-0005
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF
            if (!(LS.SEND_AMOUNT_0001.IsNumericValue()))                                                       //COBOL==> IF SEND-AMOUNT-0001 NOT NUMERIC
            {
                LS.RETURN_OK_FLAG_0005.SetValue("N");                                                               //COBOL==> MOVE 'N' TO RETURN-OK-FLAG-0005
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_IMPORT_AMT.SetValue(LS.SEND_AMOUNT_0001);                                                     //COBOL==> MOVE SEND-AMOUNT-0001 TO WS-IMPORT-AMT
            }                                                                                                   //COBOL==> END-IF
            if (((!(LS.SEND_SIGN_0001.IsSpaces()))
             && (!(LS.SEND_SIGN_0001.IsEqualTo("+"))))
             && (!(LS.SEND_SIGN_0001.IsEqualTo("-"))))  //COBOL==> IF SEND-SIGN-0001 NOT EQUAL SPACES AND SEND-SIGN-0001 NOT EQUAL '+' AND SEND-SIGN-0001 NOT EQUAL '-'
            {
                LS.RETURN_OK_FLAG_0005.SetValue("N");                                                               //COBOL==> MOVE 'N' TO RETURN-OK-FLAG-0005
            }                                                                                                   //COBOL==> END-IF
            if (LS.RETURN_OK_FLAG_0005.IsSpaces())                                                              //COBOL==> IF RETURN-OK-FLAG-0005 EQUAL SPACES
            {
                M_PARA_XXXX("M_PARA_XXXX_EXIT"); if (Control.ExitProgram) { return; }                                 //COBOL==> PERFORM PARA-XXXX THRU PARA-XXXX-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PARA_2024281902") { M_PARA_2024281902_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_2024281902_EXIT
        /// </summary>
        private void M_PARA_2024281902_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_2024281902_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_2024281902_EXIT") { M_PARA_0341838586_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0341838586_EXIT
        /// </summary>
        private void M_PARA_0341838586_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0341838586_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_0341838586_EXIT") { M_PARA_XXXX(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_XXXX
        /// </summary>
        private void M_PARA_XXXX(string returnMethod = "")
        {
            WS.WS_STOP_SUPPRESS.SetValue("N");                                                                  //COBOL==> MOVE 'N' TO WS-STOP-SUPPRESS.
            WS.WS_CURRENCY_AMT.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO WS-CURRENCY-AMT.
            WS.WS_NON_DECIMAL_AMT.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO WS-NON-DECIMAL-AMT.
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(15))                                                    //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 15
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[1].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))            //COBOL==> IF WS-POS ( 1 ) IS EQUAL ZERO AND WS-STOP-SUPPRESS IS EQUAL 'N'
            {
                goto EndOfSentence_1;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_TRILLIONS.SetValue(WS.WS_POS[1]);                                                             //COBOL==> MOVE WS-POS ( 1 ) TO WS-TRILLIONS
                WS.WS_P_TRILLIONS.SetValue(WS.WS_POS[1]);                                                           //COBOL==> MOVE WS-POS ( 1 ) TO WS-P-TRILLIONS
                if (LS.SEND_SIGN_0001.IsEqualTo("-"))                                                               //COBOL==> IF SEND-SIGN-0001 EQUAL '-'
                {
                    WS.WS_P_PAREN_START.SetValue("(");                                                                  //COBOL==> MOVE '(' TO WS-P-PAREN-START
                }                                                                                                   //COBOL==> END-IF
                WS.WS_COMMA_FOUR.SetValue(",");                                                                     //COBOL==> MOVE ',' TO WS-COMMA-FOUR
                WS.WS_P_COMMA_FOUR.SetValue(",");                                                                   //COBOL==> MOVE ',' TO WS-P-COMMA-FOUR
                WS.WS_ND_HUNDRED_TRILLIONS.SetValue(WS.WS_POS[1]);                                                  //COBOL==> MOVE WS-POS ( 1 ) TO WS-ND-HUNDRED-TRILLIONS
                WS.WS_NC_HUNDRED_TRILLIONS.SetValue(WS.WS_POS[1]);                                                  //COBOL==> MOVE WS-POS ( 1 ) TO WS-NC-HUNDRED-TRILLIONS
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
        EndOfSentence_1:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(14))                                                    //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 14
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[2].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))            //COBOL==> IF WS-POS ( 2 ) IS EQUAL ZERO AND WS-STOP-SUPPRESS IS EQUAL 'N'
            {
                goto EndOfSentence_2;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_HUNDRED_BILLIONS.SetValue(WS.WS_POS[2]);                                                      //COBOL==> MOVE WS-POS ( 2 ) TO WS-HUNDRED-BILLIONS
                WS.WS_P_HUNDRED_BILLIONS.SetValue(WS.WS_POS[2]);                                                    //COBOL==> MOVE WS-POS ( 2 ) TO WS-P-HUNDRED-BILLIONS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_COMMA_FOUR.IsSpaces()))          //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-COMMA-FOUR EQUAL SPACE
                {
                    WS.WS_P_COMMA_FOUR.SetValue("(");                                                                   //COBOL==> MOVE '(' TO WS-P-COMMA-FOUR
                }                                                                                                   //COBOL==> END-IF
                WS.WS_ND_TEN_TRILLIONS.SetValue(WS.WS_POS[2]);                                                      //COBOL==> MOVE WS-POS ( 2 ) TO WS-ND-TEN-TRILLIONS
                WS.WS_NC_TEN_TRILLIONS.SetValue(WS.WS_POS[2]);                                                      //COBOL==> MOVE WS-POS ( 2 ) TO WS-NC-TEN-TRILLIONS
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
        EndOfSentence_2:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(13))                                                    //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 13
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[3].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))            //COBOL==> IF WS-POS ( 3 ) IS EQUAL ZERO AND WS-STOP-SUPPRESS IS EQUAL 'N'
            {
                goto EndOfSentence_3;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_TEN_BILLIONS.SetValue(WS.WS_POS[3]);                                                          //COBOL==> MOVE WS-POS ( 3 ) TO WS-TEN-BILLIONS
                WS.WS_P_TEN_BILLIONS.SetValue(WS.WS_POS[3]);                                                        //COBOL==> MOVE WS-POS ( 3 ) TO WS-P-TEN-BILLIONS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_HUNDRED_BILLIONS.IsSpaces()))    //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-HUNDRED-BILLIONS = SPACES
                {
                    WS.WS_P_HUNDRED_BILLIONS.SetValue("(");                                                             //COBOL==> MOVE '(' TO WS-P-HUNDRED-BILLIONS
                }                                                                                                   //COBOL==> END-IF
                WS.WS_ND_TRILLIONS.SetValue(WS.WS_POS[3]);                                                          //COBOL==> MOVE WS-POS ( 3 ) TO WS-ND-TRILLIONS
                WS.WS_NC_TRILLIONS.SetValue(WS.WS_POS[3]);                                                          //COBOL==> MOVE WS-POS ( 3 ) TO WS-NC-TRILLIONS
                WS.WS_ND_COMMA_FOUR.SetValue(",");                                                                  //COBOL==> MOVE ',' TO WS-ND-COMMA-FOUR
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_3:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(12))                                                    //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 12
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[4].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))            //COBOL==> IF WS-POS ( 4 ) IS EQUAL ZERO AND WS-STOP-SUPPRESS IS EQUAL 'N'
            {
                goto EndOfSentence_4;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_BILLIONS.SetValue(WS.WS_POS[4]);                                                              //COBOL==> MOVE WS-POS ( 4 ) TO WS-BILLIONS
                WS.WS_P_BILLIONS.SetValue(WS.WS_POS[4]);                                                            //COBOL==> MOVE WS-POS ( 4 ) TO WS-P-BILLIONS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_TEN_BILLIONS.IsEqualTo(" ")))    //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-TEN-BILLIONS = ' '
                {
                    WS.WS_P_TEN_BILLIONS.SetValue("(");                                                                 //COBOL==> MOVE '(' TO WS-P-TEN-BILLIONS
                }                                                                                                   //COBOL==> END-IF
                WS.WS_COMMA_THREE.SetValue(",");                                                                    //COBOL==> MOVE ',' TO WS-COMMA-THREE
                WS.WS_P_COMMA_THREE.SetValue(",");                                                                  //COBOL==> MOVE ',' TO WS-P-COMMA-THREE
                WS.WS_ND_HUNDRED_BILLIONS.SetValue(WS.WS_POS[4]);                                                   //COBOL==> MOVE WS-POS ( 4 ) TO WS-ND-HUNDRED-BILLIONS
                WS.WS_NC_HUNDRED_BILLIONS.SetValue(WS.WS_POS[4]);                                                   //COBOL==> MOVE WS-POS ( 4 ) TO WS-NC-HUNDRED-BILLIONS
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
        EndOfSentence_4:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(11))                                                    //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 11
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[5].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))            //COBOL==> IF WS-POS ( 5 ) IS EQUAL ZERO AND WS-STOP-SUPPRESS IS EQUAL 'N'
            {
                goto EndOfSentence_5;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_HUNDRED_MILLIONS.SetValue(WS.WS_POS[5]);                                                      //COBOL==> MOVE WS-POS ( 5 ) TO WS-HUNDRED-MILLIONS
                WS.WS_P_HUNDRED_MILLIONS.SetValue(WS.WS_POS[5]);                                                    //COBOL==> MOVE WS-POS ( 5 ) TO WS-P-HUNDRED-MILLIONS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_COMMA_THREE.IsEqualTo(" ")))     //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-COMMA-THREE = ' '
                {
                    WS.WS_P_COMMA_THREE.SetValue("(");                                                                  //COBOL==> MOVE '(' TO WS-P-COMMA-THREE
                }                                                                                                   //COBOL==> END-IF
                WS.WS_ND_TEN_BILLIONS.SetValue(WS.WS_POS[5]);                                                       //COBOL==> MOVE WS-POS ( 5 ) TO WS-ND-TEN-BILLIONS
                WS.WS_NC_TEN_BILLIONS.SetValue(WS.WS_POS[5]);                                                       //COBOL==> MOVE WS-POS ( 5 ) TO WS-NC-TEN-BILLIONS
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
        EndOfSentence_5:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(10))                                                    //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 10
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[6].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))            //COBOL==> IF WS-POS ( 6 ) IS EQUAL ZERO AND WS-STOP-SUPPRESS IS EQUAL 'N'
            {
                goto EndOfSentence_6;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_TEN_MILLIONS.SetValue(WS.WS_POS[6]);                                                          //COBOL==> MOVE WS-POS ( 6 ) TO WS-TEN-MILLIONS
                WS.WS_P_TEN_MILLIONS.SetValue(WS.WS_POS[6]);                                                        //COBOL==> MOVE WS-POS ( 6 ) TO WS-P-TEN-MILLIONS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_HUNDRED_MILLIONS.IsEqualTo(" ")))  //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-HUNDRED-MILLIONS = ' '
                {
                    WS.WS_P_HUNDRED_MILLIONS.SetValue("(");                                                             //COBOL==> MOVE '(' TO WS-P-HUNDRED-MILLIONS
                }                                                                                                   //COBOL==> END-IF
                WS.WS_ND_BILLIONS.SetValue(WS.WS_POS[6]);                                                           //COBOL==> MOVE WS-POS ( 6 ) TO WS-ND-BILLIONS
                WS.WS_NC_BILLIONS.SetValue(WS.WS_POS[6]);                                                           //COBOL==> MOVE WS-POS ( 6 ) TO WS-NC-BILLIONS
                WS.WS_ND_COMMA_THREE.SetValue(",");                                                                 //COBOL==> MOVE ',' TO WS-ND-COMMA-THREE
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
        EndOfSentence_6:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(9))                                                     //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 9
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[7].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))            //COBOL==> IF WS-POS ( 7 ) IS EQUAL ZERO AND WS-STOP-SUPPRESS IS EQUAL 'N'
            {
                goto EndOfSentence_7;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_MILLIONS.SetValue(WS.WS_POS[7]);                                                              //COBOL==> MOVE WS-POS ( 7 ) TO WS-MILLIONS
                WS.WS_P_MILLIONS.SetValue(WS.WS_POS[7]);                                                            //COBOL==> MOVE WS-POS ( 7 ) TO WS-P-MILLIONS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_TEN_MILLIONS.IsEqualTo(" ")))    //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-TEN-MILLIONS = ' '
                {
                    WS.WS_P_TEN_MILLIONS.SetValue("(");                                                                 //COBOL==> MOVE '(' TO WS-P-TEN-MILLIONS
                }                                                                                                   //COBOL==> END-IF
                WS.WS_COMMA_TWO.SetValue(",");                                                                      //COBOL==> MOVE ',' TO WS-COMMA-TWO
                WS.WS_P_COMMA_TWO.SetValue(",");                                                                    //COBOL==> MOVE ',' TO WS-P-COMMA-TWO
                WS.WS_ND_HUNDRED_MILLIONS.SetValue(WS.WS_POS[7]);                                                   //COBOL==> MOVE WS-POS ( 7 ) TO WS-ND-HUNDRED-MILLIONS
                WS.WS_NC_HUNDRED_MILLIONS.SetValue(WS.WS_POS[7]);                                                   //COBOL==> MOVE WS-POS ( 7 ) TO WS-NC-HUNDRED-MILLIONS
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
        EndOfSentence_7:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(8))                                                     //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 8
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[8].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))            //COBOL==> IF WS-POS ( 8 ) IS EQUAL ZERO AND WS-STOP-SUPPRESS IS EQUAL 'N'
            {
                goto EndOfSentence_8;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_HUNDRED_THOUSANDS.SetValue(WS.WS_POS[8]);                                                     //COBOL==> MOVE WS-POS ( 8 ) TO WS-HUNDRED-THOUSANDS
                WS.WS_P_HUNDRED_THOUSANDS.SetValue(WS.WS_POS[8]);                                                   //COBOL==> MOVE WS-POS ( 8 ) TO WS-P-HUNDRED-THOUSANDS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_COMMA_TWO.IsEqualTo(" ")))       //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-COMMA-TWO = ' '
                {
                    WS.WS_P_COMMA_TWO.SetValue("(");                                                                    //COBOL==> MOVE '(' TO WS-P-COMMA-TWO
                }                                                                                                   //COBOL==> END-IF
                WS.WS_ND_TEN_MILLIONS.SetValue(WS.WS_POS[8]);                                                       //COBOL==> MOVE WS-POS ( 8 ) TO WS-ND-TEN-MILLIONS
                WS.WS_NC_TEN_MILLIONS.SetValue(WS.WS_POS[8]);                                                       //COBOL==> MOVE WS-POS ( 8 ) TO WS-NC-TEN-MILLIONS
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
        EndOfSentence_8:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(7))                                                     //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 7
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[9].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))            //COBOL==> IF WS-POS ( 9 ) IS EQUAL ZERO AND WS-STOP-SUPPRESS IS EQUAL 'N'
            {
                goto EndOfSentence_9;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_TEN_THOUSANDS.SetValue(WS.WS_POS[9]);                                                         //COBOL==> MOVE WS-POS ( 9 ) TO WS-TEN-THOUSANDS
                WS.WS_P_TEN_THOUSANDS.SetValue(WS.WS_POS[9]);                                                       //COBOL==> MOVE WS-POS ( 9 ) TO WS-P-TEN-THOUSANDS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_HUNDRED_THOUSANDS.IsEqualTo(" ")))  //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-HUNDRED-THOUSANDS = ' '
                {
                    WS.WS_P_HUNDRED_THOUSANDS.SetValue("(");                                                            //COBOL==> MOVE '(' TO WS-P-HUNDRED-THOUSANDS
                }                                                                                                   //COBOL==> END-IF
                WS.WS_ND_MILLIONS.SetValue(WS.WS_POS[9]);                                                           //COBOL==> MOVE WS-POS ( 9 ) TO WS-ND-MILLIONS
                WS.WS_NC_MILLIONS.SetValue(WS.WS_POS[9]);                                                           //COBOL==> MOVE WS-POS ( 9 ) TO WS-NC-MILLIONS
                WS.WS_ND_COMMA_TWO.SetValue(",");                                                                   //COBOL==> MOVE ',' TO WS-ND-COMMA-TWO
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
        EndOfSentence_9:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(6))                                                     //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 6
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[10].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))           //COBOL==> IF WS-POS ( 10 ) EQUAL ZERO AND WS-STOP-SUPPRESS EQUAL 'N'
            {
                goto EndOfSentence_10;                                                                              //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_THOUSANDS.SetValue(WS.WS_POS[10]);                                                            //COBOL==> MOVE WS-POS ( 10 ) TO WS-THOUSANDS
                WS.WS_P_THOUSANDS.SetValue(WS.WS_POS[10]);                                                          //COBOL==> MOVE WS-POS ( 10 ) TO WS-P-THOUSANDS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_TEN_THOUSANDS.IsEqualTo(" ")))   //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-TEN-THOUSANDS = ' '
                {
                    WS.WS_P_TEN_THOUSANDS.SetValue("(");                                                                //COBOL==> MOVE '(' TO WS-P-TEN-THOUSANDS
                }                                                                                                   //COBOL==> END-IF
                WS.WS_COMMA_ONE.SetValue(",");                                                                      //COBOL==> MOVE ',' TO WS-COMMA-ONE
                WS.WS_P_COMMA_ONE.SetValue(",");                                                                    //COBOL==> MOVE ',' TO WS-P-COMMA-ONE
                WS.WS_ND_HUNDRED_THOUSANDS.SetValue(WS.WS_POS[10]);                                                 //COBOL==> MOVE WS-POS ( 10 ) TO WS-ND-HUNDRED-THOUSANDS
                WS.WS_NC_HUNDRED_THOUSANDS.SetValue(WS.WS_POS[10]);                                                 //COBOL==> MOVE WS-POS ( 10 ) TO WS-NC-HUNDRED-THOUSANDS
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
        EndOfSentence_10:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(5))                                                     //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 5
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[11].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))           //COBOL==> IF WS-POS ( 11 ) EQUAL ZERO AND WS-STOP-SUPPRESS EQUAL 'N'
            {
                goto EndOfSentence_11;                                                                              //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_HUNDREDS.SetValue(WS.WS_POS[11]);                                                             //COBOL==> MOVE WS-POS ( 11 ) TO WS-HUNDREDS
                WS.WS_P_HUNDREDS.SetValue(WS.WS_POS[11]);                                                           //COBOL==> MOVE WS-POS ( 11 ) TO WS-P-HUNDREDS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_COMMA_ONE.IsSpaces()))           //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-COMMA-ONE = SPACES
                {
                    WS.WS_P_COMMA_ONE.SetValue("(");                                                                    //COBOL==> MOVE '(' TO WS-P-COMMA-ONE
                }                                                                                                   //COBOL==> END-IF
                WS.WS_ND_TEN_THOUSANDS.SetValue(WS.WS_POS[11]);                                                     //COBOL==> MOVE WS-POS ( 11 ) TO WS-ND-TEN-THOUSANDS
                WS.WS_NC_TEN_THOUSANDS.SetValue(WS.WS_POS[11]);                                                     //COBOL==> MOVE WS-POS ( 11 ) TO WS-NC-TEN-THOUSANDS
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_11:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(4))                                                     //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 4
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[12].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))           //COBOL==> IF WS-POS ( 12 ) EQUAL ZERO AND WS-STOP-SUPPRESS EQUAL 'N'
            {
                goto EndOfSentence_12;                                                                              //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_TENS.SetValue(WS.WS_POS[12]);                                                                 //COBOL==> MOVE WS-POS ( 12 ) TO WS-TENS
                WS.WS_P_TENS.SetValue(WS.WS_POS[12]);                                                               //COBOL==> MOVE WS-POS ( 12 ) TO WS-P-TENS
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_HUNDREDS.IsSpaces()))            //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-HUNDREDS = SPACES
                {
                    WS.WS_P_HUNDREDS.SetValue("(");                                                                     //COBOL==> MOVE '(' TO WS-P-HUNDREDS
                }                                                                                                   //COBOL==> END-IF
                WS.WS_ND_THOUSANDS.SetValue(WS.WS_POS[12]);                                                         //COBOL==> MOVE WS-POS ( 12 ) TO WS-ND-THOUSANDS
                WS.WS_NC_THOUSANDS.SetValue(WS.WS_POS[12]);                                                         //COBOL==> MOVE WS-POS ( 12 ) TO WS-NC-THOUSANDS
                WS.WS_ND_COMMA_ONE.SetValue(",");                                                                   //COBOL==> MOVE ',' TO WS-ND-COMMA-ONE
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_12:;
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(3))                                                     //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 3
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[13].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))           //COBOL==> IF WS-POS ( 13 ) EQUAL ZERO AND WS-STOP-SUPPRESS EQUAL 'N'
            {
                WS.WS_DECIMAL_POINT.SetValue(".");                                                                  //COBOL==> MOVE '.' TO WS-DECIMAL-POINT
                WS.WS_P_DECIMAL_POINT.SetValue(".");                                                                //COBOL==> MOVE '.' TO WS-P-DECIMAL-POINT
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_TENS.IsSpaces()))                //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-TENS = SPACES
                {
                    WS.WS_P_TENS.SetValue("(");                                                                         //COBOL==> MOVE '(' TO WS-P-TENS
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_ONES.SetValue(WS.WS_POS[13]);                                                                 //COBOL==> MOVE WS-POS ( 13 ) TO WS-ONES
                WS.WS_P_ONES.SetValue(WS.WS_POS[13]);                                                               //COBOL==> MOVE WS-POS ( 13 ) TO WS-P-ONES
                WS.WS_DECIMAL_POINT.SetValue(".");                                                                  //COBOL==> MOVE '.' TO WS-DECIMAL-POINT
                WS.WS_P_DECIMAL_POINT.SetValue(".");                                                                //COBOL==> MOVE '.' TO WS-P-DECIMAL-POINT
                if ((LS.SEND_SIGN_0001.IsEqualTo("-"))
             && (WS.WS_P_TENS.IsSpaces()))                //COBOL==> IF SEND-SIGN-0001 EQUAL '-' AND WS-P-TENS = SPACES
                {
                    WS.WS_P_TENS.SetValue("(");                                                                         //COBOL==> MOVE '(' TO WS-P-TENS
                }                                                                                                   //COBOL==> END-IF
                WS.WS_ND_HUNDREDS.SetValue(WS.WS_POS[13]);                                                          //COBOL==> MOVE WS-POS ( 13 ) TO WS-ND-HUNDREDS
                WS.WS_NC_HUNDREDS.SetValue(WS.WS_POS[13]);                                                          //COBOL==> MOVE WS-POS ( 13 ) TO WS-NC-HUNDREDS
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS
            }                                                                                                   //COBOL==> END-IF.
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(2))                                                     //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 2
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[14].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))           //COBOL==> IF WS-POS ( 14 ) EQUAL ZERO AND WS-STOP-SUPPRESS EQUAL 'N'
            {
                WS.WS_TENTHS.SetValue(WS.WS_POS[14]);                                                               //COBOL==> MOVE WS-POS ( 14 ) TO WS-TENTHS
                WS.WS_P_TENTHS.SetValue(WS.WS_POS[14]);                                                             //COBOL==> MOVE WS-POS ( 14 ) TO WS-P-TENTHS
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_TENTHS.SetValue(WS.WS_POS[14]);                                                               //COBOL==> MOVE WS-POS ( 14 ) TO WS-TENTHS
                WS.WS_P_TENTHS.SetValue(WS.WS_POS[14]);                                                             //COBOL==> MOVE WS-POS ( 14 ) TO WS-P-TENTHS
                WS.WS_ND_TENS.SetValue(WS.WS_POS[14]);                                                              //COBOL==> MOVE WS-POS ( 14 ) TO WS-ND-TENS
                WS.WS_NC_TENS.SetValue(WS.WS_POS[14]);                                                              //COBOL==> MOVE WS-POS ( 14 ) TO WS-NC-TENS
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if (LS.SEND_NON_SUPPRESS_POS_0001.IsEqualTo(1))                                                     //COBOL==> IF SEND-NON-SUPPRESS-POS-0001 EQUAL 1
            {
                WS.WS_STOP_SUPPRESS.SetValue("Y");                                                                  //COBOL==> MOVE 'Y' TO WS-STOP-SUPPRESS.
            }
            if ((WS.WS_POS[15].IsEqualTo(0))
             && (WS.WS_STOP_SUPPRESS.IsEqualTo("N")))           //COBOL==> IF WS-POS ( 15 ) EQUAL ZERO AND WS-STOP-SUPPRESS EQUAL 'N'
            {
                WS.WS_HUNDRETHS.SetValue(WS.WS_POS[15]);                                                            //COBOL==> MOVE WS-POS ( 15 ) TO WS-HUNDRETHS
                WS.WS_P_HUNDRETHS.SetValue(WS.WS_POS[15]);                                                          //COBOL==> MOVE WS-POS ( 15 ) TO WS-P-HUNDRETHS
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_HUNDRETHS.SetValue(WS.WS_POS[15]);                                                            //COBOL==> MOVE WS-POS ( 15 ) TO WS-HUNDRETHS
                WS.WS_P_HUNDRETHS.SetValue(WS.WS_POS[15]);                                                          //COBOL==> MOVE WS-POS ( 15 ) TO WS-P-HUNDRETHS
                WS.WS_ND_ONES.SetValue(WS.WS_POS[15]);                                                              //COBOL==> MOVE WS-POS ( 15 ) TO WS-ND-ONES
                WS.WS_NC_ONES.SetValue(WS.WS_POS[15]);                                                              //COBOL==> MOVE WS-POS ( 15 ) TO WS-NC-ONES.
            }
            WS.WS_CURR_SIGN.SetValue(LS.SEND_SIGN_0001);                                                        //COBOL==> MOVE SEND-SIGN-0001 TO WS-CURR-SIGN.
            WS.WS_ND_SIGN.SetValue(LS.SEND_SIGN_0001);                                                          //COBOL==> MOVE SEND-SIGN-0001 TO WS-ND-SIGN.
            WS.WS_NC_SIGN.SetValue(LS.SEND_SIGN_0001);                                                          //COBOL==> MOVE SEND-SIGN-0001 TO WS-NC-SIGN.
            if (LS.SEND_SIGN_0001.IsEqualTo("-"))                                                               //COBOL==> IF SEND-SIGN-0001 EQUAL '-'
            {
                WS.WS_P_PAREN_END.SetValue(")");                                                                    //COBOL==> MOVE ')' TO WS-P-PAREN-END
            }                                                                                                   //COBOL==> END-IF.
            LS.RETURN_CURRENCY_SIGNED_0002.SetValue(WS.WS_CURRENCY_AMT);                                        //COBOL==> MOVE WS-CURRENCY-AMT TO RETURN-CURRENCY-SIGNED-0002.
            LS.RETURN_CURRENCY_NEG_IN_PA_0003.SetValue(WS.WS_PARENS_AMT);                                       //COBOL==> MOVE WS-PARENS-AMT TO RETURN-CURRENCY-NEG-IN-PA-0003.
            LS.RETURN_AMOUNT_NON_DECIMAL_0004.SetValue(WS.WS_NON_DECIMAL_AMT);                                  //COBOL==> MOVE WS-NON-DECIMAL-AMT TO RETURN-AMOUNT-NON-DECIMAL-0004.
            LS.RETURN_NO_COMMAS_IN_NON_D_0005.SetValue(WS.WS_NO_COMMAS_AMT);                                    //COBOL==> MOVE WS-NO-COMMAS-AMT TO RETURN-NO-COMMAS-IN-NON-D-0005.
            LS.RETURN_OK_FLAG_0005.SetValue("Y");                                                               //COBOL==> MOVE 'Y' TO RETURN-OK-FLAG-0005.
            if (returnMethod != "" && returnMethod != "M_PARA_XXXX") { M_PARA_XXXX_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_XXXX_EXIT
        /// </summary>
        private void M_PARA_XXXX_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_XXXX_EXIT") { return; }                                                 //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_XXXX_EXIT") { M_PARA_2024281902_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_2024281902_INIT
        /// </summary>
        private void M_PARA_2024281902_INIT(string returnMethod = "")
        {
            WS.WS_CURRENCY_AMT.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO WS-CURRENCY-AMT.
            WS.WS_PARENS_AMT.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACES TO WS-PARENS-AMT.
            WS.WS_NON_DECIMAL_AMT.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO WS-NON-DECIMAL-AMT.
            WS.WS_NO_COMMAS_AMT.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO WS-NO-COMMAS-AMT.
            LS.EXPORT_0002EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0002EV .
            if (returnMethod != "" && returnMethod != "M_PARA_2024281902_INIT") { M_PARA_2024281902_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_2024281902_INIT_EXIT
        /// </summary>
        private void M_PARA_2024281902_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_2024281902_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
