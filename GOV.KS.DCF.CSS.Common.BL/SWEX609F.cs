#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2021
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2021-12-07 03:02:42 PM
   **        *   FROM COBOL PGM   :  SWEX609F
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   *********************************************************
     SOURCE CODE GENERATED BY CANAM REPORT COMPOSER V4.0.25A
     COPYRIGHT (C) CANAM SOFTWARE LABS, INC. 1995-1998,1999
     REPORT COMPOSER LICENSE INFORMATION:
           STATE OF KANSAS
    EAB DEFINITION NAME:  SRRUN162 ATT/CNTR COLL FILE READER
    ACTION BLOCK NAME:    EAB-B609-FILE-READER
    LANGUAGE:             COBOL
    STYLE:                READER - POSITIONAL FILE
                          CHECKPOINT RESTART NOT ENABLED
    TARGET OS:            MVS
    SOURCE:               C:\KEHWORK\MODELS\EXTRN\SWEX609F.CBL
    GEN DATE:             8/12/1999
    GEN TIME:             16:56:24
    LAST UPDATE USER:     HILSON , KEN
    LAST UPDATE DATE:     8/12/1999 4:56:24 PM
    IMPORT VIEW SPECIAL ATTRIBUTES
    ------------------------------
    PARM1 - USED TO CONTROL REPORT ACTION AND I/O TYPE
    I/O CONTROL CODE VALUES:
       'OF' - OPEN SEQUENTIAL FILE
       'AF' - APPEND TO SEQUENTIAL FILE
       'CF' - CLOSE SEQUENTIAL FILE
       'GR' - GET RECORD
    EXPORT VIEW SPECIAL ATTRIBUTES
    ------------------------------
    PARM1 - USED TO INDICATE:
            END OF FILE,
            ERROR ON I/O,
            NUMERIC FIELD VIOLATION,
            INVALID IMPORT PARM1
               (SEE VALID CODES IN PARM1 ABOVE)
    RETURN CODE VALUES:
       'EF' - END OF FILE - FILE READERS
            - END OF FILE BEFORE GETTING TO RECORDNUMBER WHEN RE-REA
       'EO' - ERROR ON OPEN FILE
       'EC' - ERROR ON CLOSE FILE
       'ER' - ERROR ON GR COMMAND
       'SY' - SYMBOLIC FILE NAME NOT DEFINED IN ENVIRONMENT
       'EN' - NUMERIC FIELD READ HAS NON-NUMERIC VALUE
       'II' - INVALID I/O CONTROL CODE
       '  ' - SUCCESSFUL EXECUTION
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Core;
using MDSY.Framework.IO.Common;
using System;
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region File Section Class
    internal class SWEX609F_fd : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string FileSection = "SWEX609F_fd_FileSection";
            internal const string SEQ_FILE = "SEQ_FILE";
            internal const string SEQ_FILE_RECORD = "SEQ_FILE_RECORD";
        }
        #endregion

        #region Direct-access element properties
        public IFileLink SEQ_FILE { get; set; }
        public IGroup SEQ_FILE_RECORD { get { return GetElementByName<IGroup>(Names.SEQ_FILE_RECORD); } }


        internal SWEX609F_ws WS;
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the FileSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.SEQ_FILE_RECORD, (SEQ_FILE_RECORD) =>
           {
               SEQ_FILE_RECORD.CreateNewFillerField(350, FillWith.Hashes);
           });

        }

        protected override string GetRecordName()
        {
            return Names.FileSection;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            IFileHandler FileHandler = InversionContainer.GetImplementingObject<IFileHandler>();

            SEQ_FILE = FileHandler.GetFile("EXTT162S");
            SEQ_FILE.StatusField = WS.WS_FILE_STATUS;
            SEQ_FILE.AssociatedBuffer = SEQ_FILE_RECORD;
        }
        #endregion

        #region Constructors
        public SWEX609F_fd(SWEX609F_ws ws)
            : base()
        {
            this.WS = ws;
            Initialize();

        }
        #endregion
    }
    #endregion File Section Class
    #region Working Storage Class
    internal class SWEX609F_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEX609F_ws_WorkingStorage";
            internal const string MISC_FIELDS = "MISC_FIELDS";
            internal const string MORE_TO_REWRITE = "MORE_TO_REWRITE";
            internal const string WS_FILE_STATUS = "WS_FILE_STATUS";
            internal const string WS_RECORD = "WS_RECORD";
            internal const string WS_1_WS52_TEXT_1_X = "WS_1_WS52_TEXT_1_X";
            internal const string WS_2_WS22_LAST_NAME_X = "WS_2_WS22_LAST_NAME_X";
            internal const string WS_19_WS39_FIRST_NAME_X = "WS_19_WS39_FIRST_NAME_X";
            internal const string WS_31_WS51_MIDDLE_INITIAL_X = "WS_31_WS51_MIDDLE_INITIAL_X";
            internal const string WS_32_WS74_ADJUSTED_IND_X = "WS_32_WS74_ADJUSTED_IND_X";
            internal const string WS_33_WS75_TEXT_1_X = "WS_33_WS75_TEXT_1_X";
            internal const string WS_34_WS99_FORMATTED_NAME_X = "WS_34_WS99_FORMATTED_NAME_X";
            internal const string WS_67_WS172_FORMATTED_NAME_X = "WS_67_WS172_FORMATTED_NAME_X";
            internal const string WS_100_WS1_DATE_X = "WS_100_WS1_DATE_X";
            internal const string WS_100_WS1_DATE_9 = "WS_100_WS1_DATE_9";
            internal const string WS_108_WS9_SYSTEM_GENERATED__X = "WS_108_WS9_SYSTEM_GENERATED__X";
            internal const string WS_108_WS9_SYSTEM_GENERATED__9 = "WS_108_WS9_SYSTEM_GENERATED__9";
            internal const string WS_113_WS14_USER_ID_X = "WS_113_WS14_USER_ID_X";
            internal const string WS_121_WS53_PROGRAM_APPLIED__X = "WS_121_WS53_PROGRAM_APPLIED__X";
            internal const string WS_124_WS56_AMOUNT_X = "WS_124_WS56_AMOUNT_X";
            internal const string WS_124_WS56_AMOUNT_9 = "WS_124_WS56_AMOUNT_9";
            internal const string WS_133_WS65_APPLIED_TO_CODE_X = "WS_133_WS65_APPLIED_TO_CODE_X";
            internal const string WS_134_WS66_COLLECTION_DT_X = "WS_134_WS66_COLLECTION_DT_X";
            internal const string WS_134_WS66_COLLECTION_DT_9 = "WS_134_WS66_COLLECTION_DT_9";
            internal const string WS_142_WS76_NUMBER_X = "WS_142_WS76_NUMBER_X";
            internal const string WS_152_WS86_FIRST_NAME_X = "WS_152_WS86_FIRST_NAME_X";
            internal const string WS_164_WS98_MIDDLE_INITIAL_X = "WS_164_WS98_MIDDLE_INITIAL_X";
            internal const string WS_165_WS132_LAST_NAME_X = "WS_165_WS132_LAST_NAME_X";
            internal const string WS_182_WS149_NUMBER_X = "WS_182_WS149_NUMBER_X";
            internal const string WS_192_WS159_FIRST_NAME_X = "WS_192_WS159_FIRST_NAME_X";
            internal const string WS_204_WS171_MIDDLE_INITIAL_X = "WS_204_WS171_MIDDLE_INITIAL_X";
            internal const string WS_205_WS205_LAST_NAME_X = "WS_205_WS205_LAST_NAME_X";
            internal const string WS_222_WS222_IDENTIFIER_X = "WS_222_WS222_IDENTIFIER_X";
            internal const string WS_222_WS222_IDENTIFIER_9 = "WS_222_WS222_IDENTIFIER_9";
            internal const string WS_231_WS231_COURT_CASE_NUMB_X = "WS_231_WS231_COURT_CASE_NUMB_X";
            internal const string WS_248_WS248_STANDARD_NUMBER_X = "WS_248_WS248_STANDARD_NUMBER_X";
            internal const string WS_268_WS268_NUMBER_X = "WS_268_WS268_NUMBER_X";
            internal const string WS_278_WS278_CODE_X = "WS_278_WS278_CODE_X";
            internal const string WS_288_WS288_EFFECTIVE_DATE_X = "WS_288_WS288_EFFECTIVE_DATE_X";
            internal const string WS_288_WS288_EFFECTIVE_DATE_9 = "WS_288_WS288_EFFECTIVE_DATE_9";
            internal const string WS_296_WS296_JUDICIAL_DISTRI_X = "WS_296_WS296_JUDICIAL_DISTRI_X";
            internal const string WS_301_WS301_NAME_X = "WS_301_WS301_NAME_X";
            internal const string WS_331_WS331_COUNTY_DESCRIPT_X = "WS_331_WS331_COUNTY_DESCRIPT_X";
            internal const string NUMERIC_EDIT_PATTERNS = "NUMERIC_EDIT_PATTERNS";
            internal const string EP_INTEGER2 = "EP_INTEGER2";
            internal const string EP_INTEGER = "EP_INTEGER";
            internal const string EP_INTEGER_XX = "EP_INTEGER_XX";
            internal const string EP_INTEGER_X = "EP_INTEGER_X";
            internal const string EP_DECIMAL = "EP_DECIMAL";
            internal const string EP_DECIMAL_XX = "EP_DECIMAL_XX";
            internal const string EP_DECIMAL_X = "EP_DECIMAL_X";
            internal const string EP_PRECISION = "EP_PRECISION";
            internal const string EP_SCALE = "EP_SCALE";
            internal const string EP_INP_INDEX = "EP_INP_INDEX";
            internal const string EP_OUT_INDEX = "EP_OUT_INDEX";
            internal const string EP_INDEX = "EP_INDEX";
            internal const string EP_COUNT = "EP_COUNT";
            internal const string EP_COUNT2 = "EP_COUNT2";
            internal const string EP_SIGN = "EP_SIGN";
            internal const string EP_DPOINT_USED = "EP_DPOINT_USED";
            internal const string EP_SIGN_USED = "EP_SIGN_USED";
            internal const string EP_DOLLAR_USED = "EP_DOLLAR_USED";
            internal const string EP_FIRST_DIGIT = "EP_FIRST_DIGIT";
            internal const string EP_ISTHERE_DCML = "EP_ISTHERE_DCML";
            internal const string EP_ISTHERE_V = "EP_ISTHERE_V";
            internal const string EP_INTEGER_LEN = "EP_INTEGER_LEN";
            internal const string EP_SZNUMERIC = "EP_SZNUMERIC";
            internal const string EP_SZNUMERIC_X = "EP_SZNUMERIC_X";
            internal const string EP_FORMATTED_VALUE = "EP_FORMATTED_VALUE";
            internal const string EP_FORMATTED_VALUE_X = "EP_FORMATTED_VALUE_X";
            internal const string EP_EDIT_PATTERN = "EP_EDIT_PATTERN";
            internal const string EP_EDIT_PATTERN_X = "EP_EDIT_PATTERN_X";
            internal const string EP_EDIT_PATTERN_LEN = "EP_EDIT_PATTERN_LEN";
            internal const string EP_SZNUMERIC_LEN = "EP_SZNUMERIC_LEN";
            internal const string EP_STOP = "EP_STOP";
            internal const string EP_CURRENCY_COUNT = "EP_CURRENCY_COUNT";
        }
        #endregion

        #region Direct-access element properties
        public IGroup MISC_FIELDS { get { return GetElementByName<IGroup>(Names.MISC_FIELDS); } }
        public IField MORE_TO_REWRITE { get { return GetElementByName<IField>(Names.MORE_TO_REWRITE); } }
        public IField WS_FILE_STATUS { get { return GetElementByName<IField>(Names.WS_FILE_STATUS); } }
        public IGroup WS_RECORD { get { return GetElementByName<IGroup>(Names.WS_RECORD); } }
        public IField WS_1_WS52_TEXT_1_X { get { return GetElementByName<IField>(Names.WS_1_WS52_TEXT_1_X); } }
        public IField WS_2_WS22_LAST_NAME_X { get { return GetElementByName<IField>(Names.WS_2_WS22_LAST_NAME_X); } }
        public IField WS_19_WS39_FIRST_NAME_X { get { return GetElementByName<IField>(Names.WS_19_WS39_FIRST_NAME_X); } }
        public IField WS_31_WS51_MIDDLE_INITIAL_X { get { return GetElementByName<IField>(Names.WS_31_WS51_MIDDLE_INITIAL_X); } }
        public IField WS_32_WS74_ADJUSTED_IND_X { get { return GetElementByName<IField>(Names.WS_32_WS74_ADJUSTED_IND_X); } }
        public IField WS_33_WS75_TEXT_1_X { get { return GetElementByName<IField>(Names.WS_33_WS75_TEXT_1_X); } }
        public IField WS_34_WS99_FORMATTED_NAME_X { get { return GetElementByName<IField>(Names.WS_34_WS99_FORMATTED_NAME_X); } }
        public IField WS_67_WS172_FORMATTED_NAME_X { get { return GetElementByName<IField>(Names.WS_67_WS172_FORMATTED_NAME_X); } }
        public IField WS_100_WS1_DATE_X { get { return GetElementByName<IField>(Names.WS_100_WS1_DATE_X); } }
        public IField WS_100_WS1_DATE_9 { get { return GetElementByName<IField>(Names.WS_100_WS1_DATE_9); } }
        public IField WS_108_WS9_SYSTEM_GENERATED__X { get { return GetElementByName<IField>(Names.WS_108_WS9_SYSTEM_GENERATED__X); } }
        public IField WS_108_WS9_SYSTEM_GENERATED__9 { get { return GetElementByName<IField>(Names.WS_108_WS9_SYSTEM_GENERATED__9); } }
        public IField WS_113_WS14_USER_ID_X { get { return GetElementByName<IField>(Names.WS_113_WS14_USER_ID_X); } }
        public IField WS_121_WS53_PROGRAM_APPLIED__X { get { return GetElementByName<IField>(Names.WS_121_WS53_PROGRAM_APPLIED__X); } }
        public IField WS_124_WS56_AMOUNT_X { get { return GetElementByName<IField>(Names.WS_124_WS56_AMOUNT_X); } }
        public IField WS_124_WS56_AMOUNT_9 { get { return GetElementByName<IField>(Names.WS_124_WS56_AMOUNT_9); } }
        public IField WS_133_WS65_APPLIED_TO_CODE_X { get { return GetElementByName<IField>(Names.WS_133_WS65_APPLIED_TO_CODE_X); } }
        public IField WS_134_WS66_COLLECTION_DT_X { get { return GetElementByName<IField>(Names.WS_134_WS66_COLLECTION_DT_X); } }
        public IField WS_134_WS66_COLLECTION_DT_9 { get { return GetElementByName<IField>(Names.WS_134_WS66_COLLECTION_DT_9); } }
        public IField WS_142_WS76_NUMBER_X { get { return GetElementByName<IField>(Names.WS_142_WS76_NUMBER_X); } }
        public IField WS_152_WS86_FIRST_NAME_X { get { return GetElementByName<IField>(Names.WS_152_WS86_FIRST_NAME_X); } }
        public IField WS_164_WS98_MIDDLE_INITIAL_X { get { return GetElementByName<IField>(Names.WS_164_WS98_MIDDLE_INITIAL_X); } }
        public IField WS_165_WS132_LAST_NAME_X { get { return GetElementByName<IField>(Names.WS_165_WS132_LAST_NAME_X); } }
        public IField WS_182_WS149_NUMBER_X { get { return GetElementByName<IField>(Names.WS_182_WS149_NUMBER_X); } }
        public IField WS_192_WS159_FIRST_NAME_X { get { return GetElementByName<IField>(Names.WS_192_WS159_FIRST_NAME_X); } }
        public IField WS_204_WS171_MIDDLE_INITIAL_X { get { return GetElementByName<IField>(Names.WS_204_WS171_MIDDLE_INITIAL_X); } }
        public IField WS_205_WS205_LAST_NAME_X { get { return GetElementByName<IField>(Names.WS_205_WS205_LAST_NAME_X); } }
        public IField WS_222_WS222_IDENTIFIER_X { get { return GetElementByName<IField>(Names.WS_222_WS222_IDENTIFIER_X); } }
        public IField WS_222_WS222_IDENTIFIER_9 { get { return GetElementByName<IField>(Names.WS_222_WS222_IDENTIFIER_9); } }
        public IField WS_231_WS231_COURT_CASE_NUMB_X { get { return GetElementByName<IField>(Names.WS_231_WS231_COURT_CASE_NUMB_X); } }
        public IField WS_248_WS248_STANDARD_NUMBER_X { get { return GetElementByName<IField>(Names.WS_248_WS248_STANDARD_NUMBER_X); } }
        public IField WS_268_WS268_NUMBER_X { get { return GetElementByName<IField>(Names.WS_268_WS268_NUMBER_X); } }
        public IField WS_278_WS278_CODE_X { get { return GetElementByName<IField>(Names.WS_278_WS278_CODE_X); } }
        public IField WS_288_WS288_EFFECTIVE_DATE_X { get { return GetElementByName<IField>(Names.WS_288_WS288_EFFECTIVE_DATE_X); } }
        public IField WS_288_WS288_EFFECTIVE_DATE_9 { get { return GetElementByName<IField>(Names.WS_288_WS288_EFFECTIVE_DATE_9); } }
        public IField WS_296_WS296_JUDICIAL_DISTRI_X { get { return GetElementByName<IField>(Names.WS_296_WS296_JUDICIAL_DISTRI_X); } }
        public IField WS_301_WS301_NAME_X { get { return GetElementByName<IField>(Names.WS_301_WS301_NAME_X); } }
        public IField WS_331_WS331_COUNTY_DESCRIPT_X { get { return GetElementByName<IField>(Names.WS_331_WS331_COUNTY_DESCRIPT_X); } }
        public IGroup NUMERIC_EDIT_PATTERNS { get { return GetElementByName<IGroup>(Names.NUMERIC_EDIT_PATTERNS); } }
        public IField EP_INTEGER2 { get { return GetElementByName<IField>(Names.EP_INTEGER2); } }
        public IField EP_INTEGER { get { return GetElementByName<IField>(Names.EP_INTEGER); } }
        public IGroup EP_INTEGER_XX { get { return GetElementByName<IGroup>(Names.EP_INTEGER_XX); } }
        public IArrayElementAccessor<IField> EP_INTEGER_X { get { return GetArrayElementAccessor<IField>(Names.EP_INTEGER_X); } }
        public IField EP_DECIMAL { get { return GetElementByName<IField>(Names.EP_DECIMAL); } }
        public IGroup EP_DECIMAL_XX { get { return GetElementByName<IGroup>(Names.EP_DECIMAL_XX); } }
        public IArrayElementAccessor<IField> EP_DECIMAL_X { get { return GetArrayElementAccessor<IField>(Names.EP_DECIMAL_X); } }
        public IField EP_PRECISION { get { return GetElementByName<IField>(Names.EP_PRECISION); } }
        public IField EP_SCALE { get { return GetElementByName<IField>(Names.EP_SCALE); } }
        public IField EP_INP_INDEX { get { return GetElementByName<IField>(Names.EP_INP_INDEX); } }
        public IField EP_OUT_INDEX { get { return GetElementByName<IField>(Names.EP_OUT_INDEX); } }
        public IField EP_INDEX { get { return GetElementByName<IField>(Names.EP_INDEX); } }
        public IField EP_COUNT { get { return GetElementByName<IField>(Names.EP_COUNT); } }
        public IField EP_COUNT2 { get { return GetElementByName<IField>(Names.EP_COUNT2); } }
        public IField EP_SIGN { get { return GetElementByName<IField>(Names.EP_SIGN); } }
        public IField EP_DPOINT_USED { get { return GetElementByName<IField>(Names.EP_DPOINT_USED); } }
        public IField EP_SIGN_USED { get { return GetElementByName<IField>(Names.EP_SIGN_USED); } }
        public IField EP_DOLLAR_USED { get { return GetElementByName<IField>(Names.EP_DOLLAR_USED); } }
        public IField EP_FIRST_DIGIT { get { return GetElementByName<IField>(Names.EP_FIRST_DIGIT); } }
        public IField EP_ISTHERE_DCML { get { return GetElementByName<IField>(Names.EP_ISTHERE_DCML); } }
        public IField EP_ISTHERE_V { get { return GetElementByName<IField>(Names.EP_ISTHERE_V); } }
        public IField EP_INTEGER_LEN { get { return GetElementByName<IField>(Names.EP_INTEGER_LEN); } }
        public IGroup EP_SZNUMERIC { get { return GetElementByName<IGroup>(Names.EP_SZNUMERIC); } }
        public IArrayElementAccessor<IField> EP_SZNUMERIC_X { get { return GetArrayElementAccessor<IField>(Names.EP_SZNUMERIC_X); } }
        public IGroup EP_FORMATTED_VALUE { get { return GetElementByName<IGroup>(Names.EP_FORMATTED_VALUE); } }
        public IArrayElementAccessor<IField> EP_FORMATTED_VALUE_X { get { return GetArrayElementAccessor<IField>(Names.EP_FORMATTED_VALUE_X); } }
        public IGroup EP_EDIT_PATTERN { get { return GetElementByName<IGroup>(Names.EP_EDIT_PATTERN); } }
        public IArrayElementAccessor<IField> EP_EDIT_PATTERN_X { get { return GetArrayElementAccessor<IField>(Names.EP_EDIT_PATTERN_X); } }
        public IField EP_EDIT_PATTERN_LEN { get { return GetElementByName<IField>(Names.EP_EDIT_PATTERN_LEN); } }
        public IField EP_SZNUMERIC_LEN { get { return GetElementByName<IField>(Names.EP_SZNUMERIC_LEN); } }
        public IField EP_STOP { get { return GetElementByName<IField>(Names.EP_STOP); } }
        public IField EP_CURRENCY_COUNT { get { return GetElementByName<IField>(Names.EP_CURRENCY_COUNT); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewFillerField(FieldType.String, 40, "SWEX609F WORKING STORAGE STARTS HERE");

            recordDef.CreateNewGroup(Names.MISC_FIELDS, (MISC_FIELDS) =>
           {
               MISC_FIELDS.CreateNewField(Names.MORE_TO_REWRITE, FieldType.String, 1, "Y");
           });
            recordDef.CreateNewField(Names.WS_FILE_STATUS, FieldType.String, 2);

            recordDef.CreateNewGroup(Names.WS_RECORD, (WS_RECORD) =>
           {
               WS_RECORD.CreateNewField(Names.WS_1_WS52_TEXT_1_X, FieldType.String, 1);
               WS_RECORD.CreateNewField(Names.WS_2_WS22_LAST_NAME_X, FieldType.String, 17);
               WS_RECORD.CreateNewField(Names.WS_19_WS39_FIRST_NAME_X, FieldType.String, 12);
               WS_RECORD.CreateNewField(Names.WS_31_WS51_MIDDLE_INITIAL_X, FieldType.String, 1);
               WS_RECORD.CreateNewField(Names.WS_32_WS74_ADJUSTED_IND_X, FieldType.String, 1);
               WS_RECORD.CreateNewField(Names.WS_33_WS75_TEXT_1_X, FieldType.String, 1);
               WS_RECORD.CreateNewField(Names.WS_34_WS99_FORMATTED_NAME_X, FieldType.String, 33);
               WS_RECORD.CreateNewField(Names.WS_67_WS172_FORMATTED_NAME_X, FieldType.String, 33);

               IField WS_100_WS1_DATE_X_local = WS_RECORD.CreateNewField(Names.WS_100_WS1_DATE_X, FieldType.String, 8);
               WS_RECORD.CreateNewFieldRedefine(Names.WS_100_WS1_DATE_9, FieldType.SignedNumeric, WS_100_WS1_DATE_X_local, 8);

               IField WS_108_WS9_SYSTEM_GENERATED__X_local = WS_RECORD.CreateNewField(Names.WS_108_WS9_SYSTEM_GENERATED__X, FieldType.String, 5);
               WS_RECORD.CreateNewFieldRedefine(Names.WS_108_WS9_SYSTEM_GENERATED__9, FieldType.SignedNumeric, WS_108_WS9_SYSTEM_GENERATED__X_local, 5);
               WS_RECORD.CreateNewField(Names.WS_113_WS14_USER_ID_X, FieldType.String, 8);
               WS_RECORD.CreateNewField(Names.WS_121_WS53_PROGRAM_APPLIED__X, FieldType.String, 3);

               IField WS_124_WS56_AMOUNT_X_local = WS_RECORD.CreateNewField(Names.WS_124_WS56_AMOUNT_X, FieldType.String, 9);
               WS_RECORD.CreateNewFieldRedefine(Names.WS_124_WS56_AMOUNT_9, FieldType.SignedNumeric, WS_124_WS56_AMOUNT_X_local, 9, null, 2);
               WS_RECORD.CreateNewField(Names.WS_133_WS65_APPLIED_TO_CODE_X, FieldType.String, 1);

               IField WS_134_WS66_COLLECTION_DT_X_local = WS_RECORD.CreateNewField(Names.WS_134_WS66_COLLECTION_DT_X, FieldType.String, 8);
               WS_RECORD.CreateNewFieldRedefine(Names.WS_134_WS66_COLLECTION_DT_9, FieldType.SignedNumeric, WS_134_WS66_COLLECTION_DT_X_local, 8);
               WS_RECORD.CreateNewField(Names.WS_142_WS76_NUMBER_X, FieldType.String, 10);
               WS_RECORD.CreateNewField(Names.WS_152_WS86_FIRST_NAME_X, FieldType.String, 12);
               WS_RECORD.CreateNewField(Names.WS_164_WS98_MIDDLE_INITIAL_X, FieldType.String, 1);
               WS_RECORD.CreateNewField(Names.WS_165_WS132_LAST_NAME_X, FieldType.String, 17);
               WS_RECORD.CreateNewField(Names.WS_182_WS149_NUMBER_X, FieldType.String, 10);
               WS_RECORD.CreateNewField(Names.WS_192_WS159_FIRST_NAME_X, FieldType.String, 12);
               WS_RECORD.CreateNewField(Names.WS_204_WS171_MIDDLE_INITIAL_X, FieldType.String, 1);
               WS_RECORD.CreateNewField(Names.WS_205_WS205_LAST_NAME_X, FieldType.String, 17);

               IField WS_222_WS222_IDENTIFIER_X_local = WS_RECORD.CreateNewField(Names.WS_222_WS222_IDENTIFIER_X, FieldType.String, 9);
               WS_RECORD.CreateNewFieldRedefine(Names.WS_222_WS222_IDENTIFIER_9, FieldType.SignedNumeric, WS_222_WS222_IDENTIFIER_X_local, 9);
               WS_RECORD.CreateNewField(Names.WS_231_WS231_COURT_CASE_NUMB_X, FieldType.String, 17);
               WS_RECORD.CreateNewField(Names.WS_248_WS248_STANDARD_NUMBER_X, FieldType.String, 20);
               WS_RECORD.CreateNewField(Names.WS_268_WS268_NUMBER_X, FieldType.String, 10);
               WS_RECORD.CreateNewField(Names.WS_278_WS278_CODE_X, FieldType.String, 10);

               IField WS_288_WS288_EFFECTIVE_DATE_X_local = WS_RECORD.CreateNewField(Names.WS_288_WS288_EFFECTIVE_DATE_X, FieldType.String, 8);
               WS_RECORD.CreateNewFieldRedefine(Names.WS_288_WS288_EFFECTIVE_DATE_9, FieldType.SignedNumeric, WS_288_WS288_EFFECTIVE_DATE_X_local, 8);
               WS_RECORD.CreateNewField(Names.WS_296_WS296_JUDICIAL_DISTRI_X, FieldType.String, 5);
               WS_RECORD.CreateNewField(Names.WS_301_WS301_NAME_X, FieldType.String, 30);
               WS_RECORD.CreateNewField(Names.WS_331_WS331_COUNTY_DESCRIPT_X, FieldType.String, 20);
           });

            recordDef.CreateNewGroup(Names.NUMERIC_EDIT_PATTERNS, (NUMERIC_EDIT_PATTERNS) =>
           {
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INTEGER2, FieldType.SignedNumeric, 18);

               IField EP_INTEGER_local = NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INTEGER, FieldType.NumericEdited, "-ZZZZZZZZZZZZZZZZZ9.", 20, null, 0);
               NUMERIC_EDIT_PATTERNS.CreateNewGroupRedefine(Names.EP_INTEGER_XX, EP_INTEGER_local, (EP_INTEGER_XX) =>
               {
                   EP_INTEGER_XX.CreateNewFieldArray(Names.EP_INTEGER_X, 20, FieldType.String, 1);
               });

               IField EP_DECIMAL_local = NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_DECIMAL, FieldType.UnsignedNumeric, 18, null, 18);
               NUMERIC_EDIT_PATTERNS.CreateNewGroupRedefine(Names.EP_DECIMAL_XX, EP_DECIMAL_local, (EP_DECIMAL_XX) =>
               {
                   EP_DECIMAL_XX.CreateNewFieldArray(Names.EP_DECIMAL_X, 18, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_PRECISION, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SCALE, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INP_INDEX, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_OUT_INDEX, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INDEX, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_COUNT, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_COUNT2, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SIGN, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_DPOINT_USED, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SIGN_USED, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_DOLLAR_USED, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_FIRST_DIGIT, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_ISTHERE_DCML, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_ISTHERE_V, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INTEGER_LEN, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewGroup(Names.EP_SZNUMERIC, (EP_SZNUMERIC) =>
               {
                   EP_SZNUMERIC.CreateNewFieldArray(Names.EP_SZNUMERIC_X, 40, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewGroup(Names.EP_FORMATTED_VALUE, (EP_FORMATTED_VALUE) =>
               {
                   EP_FORMATTED_VALUE.CreateNewFieldArray(Names.EP_FORMATTED_VALUE_X, 40, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewGroup(Names.EP_EDIT_PATTERN, (EP_EDIT_PATTERN) =>
               {
                   EP_EDIT_PATTERN.CreateNewFieldArray(Names.EP_EDIT_PATTERN_X, 40, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_EDIT_PATTERN_LEN, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SZNUMERIC_LEN, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_STOP, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_CURRENCY_COUNT, FieldType.UnsignedNumeric, 2);
           });

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEX609F_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEX609F_ls_LinkageSection";
            internal const string TI_RUNTIME_PARM1 = "TI_RUNTIME_PARM1";
            internal const string TI_RUNTIME_PARM2 = "TI_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string I_IMPORT_EV1 = "I_IMPORT_EV1";
            internal const string I_REPORT_PARMS_ET = "I_REPORT_PARMS_ET";
            internal const string I_PARM1_0001_001MS = "I_PARM1_0001_001MS";
            internal const string I_PARM1_0001_001 = "I_PARM1_0001_001";
            internal const string I_PARM1_0001_001XX = "I_PARM1_0001_001XX";
            internal const string IO_CONTROL_CD = "IO_CONTROL_CD";
            internal const string LS_OPEN_FILE_PASS = "LS_OPEN_FILE_PASS";
            internal const string LS_APPEND_FILE_PASS = "LS_APPEND_FILE_PASS";
            internal const string LS_CLOSE_FILE_PASS = "LS_CLOSE_FILE_PASS";
            internal const string LS_GEN_REPORT_PASS = "LS_GEN_REPORT_PASS";
            internal const string I_PARM2_0001_002MS = "I_PARM2_0001_002MS";
            internal const string I_PARM2_0001_002 = "I_PARM2_0001_002";
            internal const string I_PARM2_0001_002XX = "I_PARM2_0001_002XX";
            internal const string LS_RUNTIME_RPT_TYPE_CD = "LS_RUNTIME_RPT_TYPE_CD";
            internal const string I_SUBREPORT_CODE_0001_003MS = "I_SUBREPORT_CODE_0001_003MS";
            internal const string I_SUBREPORT_CODE_0001_003 = "I_SUBREPORT_CODE_0001_003";
            internal const string I_SUBREPORT_CODE_0001_003XX = "I_SUBREPORT_CODE_0001_003XX";
            internal const string E_EXPORT_BOM_EV2 = "E_EXPORT_BOM_EV2";
            internal const string E_DATE_WORK_AREA_ET = "E_DATE_WORK_AREA_ET";
            internal const string E_DATE_0002_004MS = "E_DATE_0002_004MS";
            internal const string E_DATE_0002_004 = "E_DATE_0002_004";
            internal const string E_DATE_0002_004XX = "E_DATE_0002_004XX";
            internal const string E_EXPORT_EV3 = "E_EXPORT_EV3";
            internal const string E_SERVICE_PROVIDER_ET = "E_SERVICE_PROVIDER_ET";
            internal const string E_SYSTEM_GENERATED_ID_000305MS = "E_SYSTEM_GENERATED_ID_000305MS";
            internal const string E_SYSTEM_GENERATED_ID_0003_005 = "E_SYSTEM_GENERATED_ID_0003_005";
            internal const string E_SYSTEM_GENERATED_ID_000305XX = "E_SYSTEM_GENERATED_ID_000305XX";
            internal const string E_USER_ID_0003_006MS = "E_USER_ID_0003_006MS";
            internal const string E_USER_ID_0003_006 = "E_USER_ID_0003_006";
            internal const string E_USER_ID_0003_006XX = "E_USER_ID_0003_006XX";
            internal const string E_LAST_NAME_0003_007MS = "E_LAST_NAME_0003_007MS";
            internal const string E_LAST_NAME_0003_007 = "E_LAST_NAME_0003_007";
            internal const string E_LAST_NAME_0003_007XX = "E_LAST_NAME_0003_007XX";
            internal const string E_FIRST_NAME_0003_008MS = "E_FIRST_NAME_0003_008MS";
            internal const string E_FIRST_NAME_0003_008 = "E_FIRST_NAME_0003_008";
            internal const string E_FIRST_NAME_0003_008XX = "E_FIRST_NAME_0003_008XX";
            internal const string E_MIDDLE_INITIAL_0003_009MS = "E_MIDDLE_INITIAL_0003_009MS";
            internal const string E_MIDDLE_INITIAL_0003_009 = "E_MIDDLE_INITIAL_0003_009";
            internal const string E_MIDDLE_INITIAL_0003_009XX = "E_MIDDLE_INITIAL_0003_009XX";
            internal const string E_EXPORT_K_O_EV4 = "E_EXPORT_K_O_EV4";
            internal const string E_TEXT_WORK_AREA_ET = "E_TEXT_WORK_AREA_ET";
            internal const string E_TEXT_1_0004_010MS = "E_TEXT_1_0004_010MS";
            internal const string E_TEXT_1_0004_010 = "E_TEXT_1_0004_010";
            internal const string E_TEXT_1_0004_010XX = "E_TEXT_1_0004_010XX";
            internal const string E_EXPORT_EV5 = "E_EXPORT_EV5";
            internal const string E_COLLECTION_ET = "E_COLLECTION_ET";
            internal const string E_PROGRAM_APPLIED_TO_000511MS = "E_PROGRAM_APPLIED_TO_000511MS";
            internal const string E_PROGRAM_APPLIED_TO_0005_011 = "E_PROGRAM_APPLIED_TO_0005_011";
            internal const string E_PROGRAM_APPLIED_TO_000511XX = "E_PROGRAM_APPLIED_TO_000511XX";
            internal const string E_AMOUNT_0005_012MS = "E_AMOUNT_0005_012MS";
            internal const string E_AMOUNT_0005_012 = "E_AMOUNT_0005_012";
            internal const string E_AMOUNT_0005_012XX = "E_AMOUNT_0005_012XX";
            internal const string E_APPLIED_TO_CODE_0005_013MS = "E_APPLIED_TO_CODE_0005_013MS";
            internal const string E_APPLIED_TO_CODE_0005_013 = "E_APPLIED_TO_CODE_0005_013";
            internal const string E_APPLIED_TO_CODE_0005_013XX = "E_APPLIED_TO_CODE_0005_013XX";
            internal const string E_COLLECTION_DT_0005_014MS = "E_COLLECTION_DT_0005_014MS";
            internal const string E_COLLECTION_DT_0005_014 = "E_COLLECTION_DT_0005_014";
            internal const string E_COLLECTION_DT_0005_014XX = "E_COLLECTION_DT_0005_014XX";
            internal const string E_ADJUSTED_IND_0005_015MS = "E_ADJUSTED_IND_0005_015MS";
            internal const string E_ADJUSTED_IND_0005_015 = "E_ADJUSTED_IND_0005_015";
            internal const string E_ADJUSTED_IND_0005_015XX = "E_ADJUSTED_IND_0005_015XX";
            internal const string E_EXPORT_PROG_GRP_EV6 = "E_EXPORT_PROG_GRP_EV6";
            internal const string E_TEXT_WORK_AREA_ET_d2 = "E_TEXT_WORK_AREA_ET_d2";
            internal const string E_TEXT_1_0006_016MS = "E_TEXT_1_0006_016MS";
            internal const string E_TEXT_1_0006_016 = "E_TEXT_1_0006_016";
            internal const string E_TEXT_1_0006_016XX = "E_TEXT_1_0006_016XX";
            internal const string E_EXPORT_AP_EV7 = "E_EXPORT_AP_EV7";
            internal const string E_CSE_PERSONS_WORK_SET_ET = "E_CSE_PERSONS_WORK_SET_ET";
            internal const string E_NUMBER_0007_017MS = "E_NUMBER_0007_017MS";
            internal const string E_NUMBER_0007_017 = "E_NUMBER_0007_017";
            internal const string E_NUMBER_0007_017XX = "E_NUMBER_0007_017XX";
            internal const string E_FIRST_NAME_0007_018MS = "E_FIRST_NAME_0007_018MS";
            internal const string E_FIRST_NAME_0007_018 = "E_FIRST_NAME_0007_018";
            internal const string E_FIRST_NAME_0007_018XX = "E_FIRST_NAME_0007_018XX";
            internal const string E_MIDDLE_INITIAL_0007_019MS = "E_MIDDLE_INITIAL_0007_019MS";
            internal const string E_MIDDLE_INITIAL_0007_019 = "E_MIDDLE_INITIAL_0007_019";
            internal const string E_MIDDLE_INITIAL_0007_019XX = "E_MIDDLE_INITIAL_0007_019XX";
            internal const string E_FORMATTED_NAME_0007_020MS = "E_FORMATTED_NAME_0007_020MS";
            internal const string E_FORMATTED_NAME_0007_020 = "E_FORMATTED_NAME_0007_020";
            internal const string E_FORMATTED_NAME_0007_020XX = "E_FORMATTED_NAME_0007_020XX";
            internal const string E_LAST_NAME_0007_021MS = "E_LAST_NAME_0007_021MS";
            internal const string E_LAST_NAME_0007_021 = "E_LAST_NAME_0007_021";
            internal const string E_LAST_NAME_0007_021XX = "E_LAST_NAME_0007_021XX";
            internal const string E_EXPORT_AR_EV8 = "E_EXPORT_AR_EV8";
            internal const string E_CSE_PERSONS_WORK_SET_ET_d2 = "E_CSE_PERSONS_WORK_SET_ET_d2";
            internal const string E_NUMBER_0008_022MS = "E_NUMBER_0008_022MS";
            internal const string E_NUMBER_0008_022 = "E_NUMBER_0008_022";
            internal const string E_NUMBER_0008_022XX = "E_NUMBER_0008_022XX";
            internal const string E_FIRST_NAME_0008_023MS = "E_FIRST_NAME_0008_023MS";
            internal const string E_FIRST_NAME_0008_023 = "E_FIRST_NAME_0008_023";
            internal const string E_FIRST_NAME_0008_023XX = "E_FIRST_NAME_0008_023XX";
            internal const string E_MIDDLE_INITIAL_0008_024MS = "E_MIDDLE_INITIAL_0008_024MS";
            internal const string E_MIDDLE_INITIAL_0008_024 = "E_MIDDLE_INITIAL_0008_024";
            internal const string E_MIDDLE_INITIAL_0008_024XX = "E_MIDDLE_INITIAL_0008_024XX";
            internal const string E_FORMATTED_NAME_0008_025MS = "E_FORMATTED_NAME_0008_025MS";
            internal const string E_FORMATTED_NAME_0008_025 = "E_FORMATTED_NAME_0008_025";
            internal const string E_FORMATTED_NAME_0008_025XX = "E_FORMATTED_NAME_0008_025XX";
            internal const string E_LAST_NAME_0008_026MS = "E_LAST_NAME_0008_026MS";
            internal const string E_LAST_NAME_0008_026 = "E_LAST_NAME_0008_026";
            internal const string E_LAST_NAME_0008_026XX = "E_LAST_NAME_0008_026XX";
            internal const string E_EXPORT_EV9 = "E_EXPORT_EV9";
            internal const string E_LEGAL_ACTION_ET = "E_LEGAL_ACTION_ET";
            internal const string E_IDENTIFIER_0009_027MS = "E_IDENTIFIER_0009_027MS";
            internal const string E_IDENTIFIER_0009_027 = "E_IDENTIFIER_0009_027";
            internal const string E_IDENTIFIER_0009_027XX = "E_IDENTIFIER_0009_027XX";
            internal const string E_COURT_CASE_NUMBER_0009_028MS = "E_COURT_CASE_NUMBER_0009_028MS";
            internal const string E_COURT_CASE_NUMBER_0009_028 = "E_COURT_CASE_NUMBER_0009_028";
            internal const string E_COURT_CASE_NUMBER_0009_028XX = "E_COURT_CASE_NUMBER_0009_028XX";
            internal const string E_STANDARD_NUMBER_0009_029MS = "E_STANDARD_NUMBER_0009_029MS";
            internal const string E_STANDARD_NUMBER_0009_029 = "E_STANDARD_NUMBER_0009_029";
            internal const string E_STANDARD_NUMBER_0009_029XX = "E_STANDARD_NUMBER_0009_029XX";
            internal const string E_EXPORT_EV10 = "E_EXPORT_EV10";
            internal const string E_CASE_ET = "E_CASE_ET";
            internal const string E_NUMBER_0010_030MS = "E_NUMBER_0010_030MS";
            internal const string E_NUMBER_0010_030 = "E_NUMBER_0010_030";
            internal const string E_NUMBER_0010_030XX = "E_NUMBER_0010_030XX";
            internal const string E_EXPORT_EV11 = "E_EXPORT_EV11";
            internal const string E_COLLECTION_TYPE_ET = "E_COLLECTION_TYPE_ET";
            internal const string E_CODE_0011_031MS = "E_CODE_0011_031MS";
            internal const string E_CODE_0011_031 = "E_CODE_0011_031";
            internal const string E_CODE_0011_031XX = "E_CODE_0011_031XX";
            internal const string E_EXPORT_EV12 = "E_EXPORT_EV12";
            internal const string E_LEGAL_REFERRAL_ASSIGNMENT_ET = "E_LEGAL_REFERRAL_ASSIGNMENT_ET";
            internal const string E_EFFECTIVE_DATE_0012_032MS = "E_EFFECTIVE_DATE_0012_032MS";
            internal const string E_EFFECTIVE_DATE_0012_032 = "E_EFFECTIVE_DATE_0012_032";
            internal const string E_EFFECTIVE_DATE_0012_032XX = "E_EFFECTIVE_DATE_0012_032XX";
            internal const string E_EXPORT_EV13 = "E_EXPORT_EV13";
            internal const string E_TRIBUNAL_ET = "E_TRIBUNAL_ET";
            internal const string E_JUDICIAL_DISTRICT_0013_033MS = "E_JUDICIAL_DISTRICT_0013_033MS";
            internal const string E_JUDICIAL_DISTRICT_0013_033 = "E_JUDICIAL_DISTRICT_0013_033";
            internal const string E_JUDICIAL_DISTRICT_0013_033XX = "E_JUDICIAL_DISTRICT_0013_033XX";
            internal const string E_NAME_0013_034MS = "E_NAME_0013_034MS";
            internal const string E_NAME_0013_034 = "E_NAME_0013_034";
            internal const string E_NAME_0013_034XX = "E_NAME_0013_034XX";
            internal const string E_EXPORT_EV14 = "E_EXPORT_EV14";
            internal const string E_FIPS_ET = "E_FIPS_ET";
            internal const string E_COUNTY_DESCRIPTION_001435MS = "E_COUNTY_DESCRIPTION_001435MS";
            internal const string E_COUNTY_DESCRIPTION_0014_035 = "E_COUNTY_DESCRIPTION_0014_035";
            internal const string E_COUNTY_DESCRIPTION_001435XX = "E_COUNTY_DESCRIPTION_001435XX";
            internal const string E_EXPORT_EV15 = "E_EXPORT_EV15";
            internal const string E_REPORT_PARMS_ET = "E_REPORT_PARMS_ET";
            internal const string E_PARM1_0015_036MS = "E_PARM1_0015_036MS";
            internal const string E_PARM1_0015_036 = "E_PARM1_0015_036";
            internal const string E_PARM1_0015_036XX = "E_PARM1_0015_036XX";
            internal const string LS_RETURN_CD = "LS_RETURN_CD";
            internal const string E_PARM2_0015_037MS = "E_PARM2_0015_037MS";
            internal const string E_PARM2_0015_037 = "E_PARM2_0015_037";
            internal const string E_PARM2_0015_037XX = "E_PARM2_0015_037XX";
            internal const string E_SUBREPORT_CODE_0015_038MS = "E_SUBREPORT_CODE_0015_038MS";
            internal const string E_SUBREPORT_CODE_0015_038 = "E_SUBREPORT_CODE_0015_038";
            internal const string E_SUBREPORT_CODE_0015_038XX = "E_SUBREPORT_CODE_0015_038XX";
        }
        #endregion

        #region Direct-access element properties
        public IField TI_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.TI_RUNTIME_PARM1); } }
        public IField TI_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.TI_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup I_IMPORT_EV1 { get { return GetElementByName<IGroup>(Names.I_IMPORT_EV1); } }
        public IGroup I_REPORT_PARMS_ET { get { return GetElementByName<IGroup>(Names.I_REPORT_PARMS_ET); } }
        public IField I_PARM1_0001_001MS { get { return GetElementByName<IField>(Names.I_PARM1_0001_001MS); } }
        public IField I_PARM1_0001_001 { get { return GetElementByName<IField>(Names.I_PARM1_0001_001); } }
        public IField I_PARM1_0001_001XX { get { return GetElementByName<IField>(Names.I_PARM1_0001_001XX); } }
        public IField IO_CONTROL_CD { get { return GetElementByName<IField>(Names.IO_CONTROL_CD); } }
        public ICheckField LS_OPEN_FILE_PASS { get { return GetElementByName<ICheckField>(Names.LS_OPEN_FILE_PASS); } }
        public ICheckField LS_APPEND_FILE_PASS { get { return GetElementByName<ICheckField>(Names.LS_APPEND_FILE_PASS); } }
        public ICheckField LS_CLOSE_FILE_PASS { get { return GetElementByName<ICheckField>(Names.LS_CLOSE_FILE_PASS); } }
        public ICheckField LS_GEN_REPORT_PASS { get { return GetElementByName<ICheckField>(Names.LS_GEN_REPORT_PASS); } }
        public IField I_PARM2_0001_002MS { get { return GetElementByName<IField>(Names.I_PARM2_0001_002MS); } }
        public IField I_PARM2_0001_002 { get { return GetElementByName<IField>(Names.I_PARM2_0001_002); } }
        public IField I_PARM2_0001_002XX { get { return GetElementByName<IField>(Names.I_PARM2_0001_002XX); } }
        public IField LS_RUNTIME_RPT_TYPE_CD { get { return GetElementByName<IField>(Names.LS_RUNTIME_RPT_TYPE_CD); } }
        public IField I_SUBREPORT_CODE_0001_003MS { get { return GetElementByName<IField>(Names.I_SUBREPORT_CODE_0001_003MS); } }
        public IField I_SUBREPORT_CODE_0001_003 { get { return GetElementByName<IField>(Names.I_SUBREPORT_CODE_0001_003); } }
        public IField I_SUBREPORT_CODE_0001_003XX { get { return GetElementByName<IField>(Names.I_SUBREPORT_CODE_0001_003XX); } }
        public IGroup E_EXPORT_BOM_EV2 { get { return GetElementByName<IGroup>(Names.E_EXPORT_BOM_EV2); } }
        public IGroup E_DATE_WORK_AREA_ET { get { return GetElementByName<IGroup>(Names.E_DATE_WORK_AREA_ET); } }
        public IField E_DATE_0002_004MS { get { return GetElementByName<IField>(Names.E_DATE_0002_004MS); } }
        public IField E_DATE_0002_004 { get { return GetElementByName<IField>(Names.E_DATE_0002_004); } }
        public IField E_DATE_0002_004XX { get { return GetElementByName<IField>(Names.E_DATE_0002_004XX); } }
        public IGroup E_EXPORT_EV3 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV3); } }
        public IGroup E_SERVICE_PROVIDER_ET { get { return GetElementByName<IGroup>(Names.E_SERVICE_PROVIDER_ET); } }
        public IField E_SYSTEM_GENERATED_ID_000305MS { get { return GetElementByName<IField>(Names.E_SYSTEM_GENERATED_ID_000305MS); } }
        public IField E_SYSTEM_GENERATED_ID_0003_005 { get { return GetElementByName<IField>(Names.E_SYSTEM_GENERATED_ID_0003_005); } }
        public IField E_SYSTEM_GENERATED_ID_000305XX { get { return GetElementByName<IField>(Names.E_SYSTEM_GENERATED_ID_000305XX); } }
        public IField E_USER_ID_0003_006MS { get { return GetElementByName<IField>(Names.E_USER_ID_0003_006MS); } }
        public IField E_USER_ID_0003_006 { get { return GetElementByName<IField>(Names.E_USER_ID_0003_006); } }
        public IField E_USER_ID_0003_006XX { get { return GetElementByName<IField>(Names.E_USER_ID_0003_006XX); } }
        public IField E_LAST_NAME_0003_007MS { get { return GetElementByName<IField>(Names.E_LAST_NAME_0003_007MS); } }
        public IField E_LAST_NAME_0003_007 { get { return GetElementByName<IField>(Names.E_LAST_NAME_0003_007); } }
        public IField E_LAST_NAME_0003_007XX { get { return GetElementByName<IField>(Names.E_LAST_NAME_0003_007XX); } }
        public IField E_FIRST_NAME_0003_008MS { get { return GetElementByName<IField>(Names.E_FIRST_NAME_0003_008MS); } }
        public IField E_FIRST_NAME_0003_008 { get { return GetElementByName<IField>(Names.E_FIRST_NAME_0003_008); } }
        public IField E_FIRST_NAME_0003_008XX { get { return GetElementByName<IField>(Names.E_FIRST_NAME_0003_008XX); } }
        public IField E_MIDDLE_INITIAL_0003_009MS { get { return GetElementByName<IField>(Names.E_MIDDLE_INITIAL_0003_009MS); } }
        public IField E_MIDDLE_INITIAL_0003_009 { get { return GetElementByName<IField>(Names.E_MIDDLE_INITIAL_0003_009); } }
        public IField E_MIDDLE_INITIAL_0003_009XX { get { return GetElementByName<IField>(Names.E_MIDDLE_INITIAL_0003_009XX); } }
        public IGroup E_EXPORT_K_O_EV4 { get { return GetElementByName<IGroup>(Names.E_EXPORT_K_O_EV4); } }
        public IGroup E_TEXT_WORK_AREA_ET { get { return GetElementByName<IGroup>(Names.E_TEXT_WORK_AREA_ET); } }
        public IField E_TEXT_1_0004_010MS { get { return GetElementByName<IField>(Names.E_TEXT_1_0004_010MS); } }
        public IField E_TEXT_1_0004_010 { get { return GetElementByName<IField>(Names.E_TEXT_1_0004_010); } }
        public IField E_TEXT_1_0004_010XX { get { return GetElementByName<IField>(Names.E_TEXT_1_0004_010XX); } }
        public IGroup E_EXPORT_EV5 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV5); } }
        public IGroup E_COLLECTION_ET { get { return GetElementByName<IGroup>(Names.E_COLLECTION_ET); } }
        public IField E_PROGRAM_APPLIED_TO_000511MS { get { return GetElementByName<IField>(Names.E_PROGRAM_APPLIED_TO_000511MS); } }
        public IField E_PROGRAM_APPLIED_TO_0005_011 { get { return GetElementByName<IField>(Names.E_PROGRAM_APPLIED_TO_0005_011); } }
        public IField E_PROGRAM_APPLIED_TO_000511XX { get { return GetElementByName<IField>(Names.E_PROGRAM_APPLIED_TO_000511XX); } }
        public IField E_AMOUNT_0005_012MS { get { return GetElementByName<IField>(Names.E_AMOUNT_0005_012MS); } }
        public IField E_AMOUNT_0005_012 { get { return GetElementByName<IField>(Names.E_AMOUNT_0005_012); } }
        public IField E_AMOUNT_0005_012XX { get { return GetElementByName<IField>(Names.E_AMOUNT_0005_012XX); } }
        public IField E_APPLIED_TO_CODE_0005_013MS { get { return GetElementByName<IField>(Names.E_APPLIED_TO_CODE_0005_013MS); } }
        public IField E_APPLIED_TO_CODE_0005_013 { get { return GetElementByName<IField>(Names.E_APPLIED_TO_CODE_0005_013); } }
        public IField E_APPLIED_TO_CODE_0005_013XX { get { return GetElementByName<IField>(Names.E_APPLIED_TO_CODE_0005_013XX); } }
        public IField E_COLLECTION_DT_0005_014MS { get { return GetElementByName<IField>(Names.E_COLLECTION_DT_0005_014MS); } }
        public IField E_COLLECTION_DT_0005_014 { get { return GetElementByName<IField>(Names.E_COLLECTION_DT_0005_014); } }
        public IField E_COLLECTION_DT_0005_014XX { get { return GetElementByName<IField>(Names.E_COLLECTION_DT_0005_014XX); } }
        public IField E_ADJUSTED_IND_0005_015MS { get { return GetElementByName<IField>(Names.E_ADJUSTED_IND_0005_015MS); } }
        public IField E_ADJUSTED_IND_0005_015 { get { return GetElementByName<IField>(Names.E_ADJUSTED_IND_0005_015); } }
        public IField E_ADJUSTED_IND_0005_015XX { get { return GetElementByName<IField>(Names.E_ADJUSTED_IND_0005_015XX); } }
        public IGroup E_EXPORT_PROG_GRP_EV6 { get { return GetElementByName<IGroup>(Names.E_EXPORT_PROG_GRP_EV6); } }
        public IGroup E_TEXT_WORK_AREA_ET_d2 { get { return GetElementByName<IGroup>(Names.E_TEXT_WORK_AREA_ET_d2); } }
        public IField E_TEXT_1_0006_016MS { get { return GetElementByName<IField>(Names.E_TEXT_1_0006_016MS); } }
        public IField E_TEXT_1_0006_016 { get { return GetElementByName<IField>(Names.E_TEXT_1_0006_016); } }
        public IField E_TEXT_1_0006_016XX { get { return GetElementByName<IField>(Names.E_TEXT_1_0006_016XX); } }
        public IGroup E_EXPORT_AP_EV7 { get { return GetElementByName<IGroup>(Names.E_EXPORT_AP_EV7); } }
        public IGroup E_CSE_PERSONS_WORK_SET_ET { get { return GetElementByName<IGroup>(Names.E_CSE_PERSONS_WORK_SET_ET); } }
        public IField E_NUMBER_0007_017MS { get { return GetElementByName<IField>(Names.E_NUMBER_0007_017MS); } }
        public IField E_NUMBER_0007_017 { get { return GetElementByName<IField>(Names.E_NUMBER_0007_017); } }
        public IField E_NUMBER_0007_017XX { get { return GetElementByName<IField>(Names.E_NUMBER_0007_017XX); } }
        public IField E_FIRST_NAME_0007_018MS { get { return GetElementByName<IField>(Names.E_FIRST_NAME_0007_018MS); } }
        public IField E_FIRST_NAME_0007_018 { get { return GetElementByName<IField>(Names.E_FIRST_NAME_0007_018); } }
        public IField E_FIRST_NAME_0007_018XX { get { return GetElementByName<IField>(Names.E_FIRST_NAME_0007_018XX); } }
        public IField E_MIDDLE_INITIAL_0007_019MS { get { return GetElementByName<IField>(Names.E_MIDDLE_INITIAL_0007_019MS); } }
        public IField E_MIDDLE_INITIAL_0007_019 { get { return GetElementByName<IField>(Names.E_MIDDLE_INITIAL_0007_019); } }
        public IField E_MIDDLE_INITIAL_0007_019XX { get { return GetElementByName<IField>(Names.E_MIDDLE_INITIAL_0007_019XX); } }
        public IField E_FORMATTED_NAME_0007_020MS { get { return GetElementByName<IField>(Names.E_FORMATTED_NAME_0007_020MS); } }
        public IField E_FORMATTED_NAME_0007_020 { get { return GetElementByName<IField>(Names.E_FORMATTED_NAME_0007_020); } }
        public IField E_FORMATTED_NAME_0007_020XX { get { return GetElementByName<IField>(Names.E_FORMATTED_NAME_0007_020XX); } }
        public IField E_LAST_NAME_0007_021MS { get { return GetElementByName<IField>(Names.E_LAST_NAME_0007_021MS); } }
        public IField E_LAST_NAME_0007_021 { get { return GetElementByName<IField>(Names.E_LAST_NAME_0007_021); } }
        public IField E_LAST_NAME_0007_021XX { get { return GetElementByName<IField>(Names.E_LAST_NAME_0007_021XX); } }
        public IGroup E_EXPORT_AR_EV8 { get { return GetElementByName<IGroup>(Names.E_EXPORT_AR_EV8); } }
        public IGroup E_CSE_PERSONS_WORK_SET_ET_d2 { get { return GetElementByName<IGroup>(Names.E_CSE_PERSONS_WORK_SET_ET_d2); } }
        public IField E_NUMBER_0008_022MS { get { return GetElementByName<IField>(Names.E_NUMBER_0008_022MS); } }
        public IField E_NUMBER_0008_022 { get { return GetElementByName<IField>(Names.E_NUMBER_0008_022); } }
        public IField E_NUMBER_0008_022XX { get { return GetElementByName<IField>(Names.E_NUMBER_0008_022XX); } }
        public IField E_FIRST_NAME_0008_023MS { get { return GetElementByName<IField>(Names.E_FIRST_NAME_0008_023MS); } }
        public IField E_FIRST_NAME_0008_023 { get { return GetElementByName<IField>(Names.E_FIRST_NAME_0008_023); } }
        public IField E_FIRST_NAME_0008_023XX { get { return GetElementByName<IField>(Names.E_FIRST_NAME_0008_023XX); } }
        public IField E_MIDDLE_INITIAL_0008_024MS { get { return GetElementByName<IField>(Names.E_MIDDLE_INITIAL_0008_024MS); } }
        public IField E_MIDDLE_INITIAL_0008_024 { get { return GetElementByName<IField>(Names.E_MIDDLE_INITIAL_0008_024); } }
        public IField E_MIDDLE_INITIAL_0008_024XX { get { return GetElementByName<IField>(Names.E_MIDDLE_INITIAL_0008_024XX); } }
        public IField E_FORMATTED_NAME_0008_025MS { get { return GetElementByName<IField>(Names.E_FORMATTED_NAME_0008_025MS); } }
        public IField E_FORMATTED_NAME_0008_025 { get { return GetElementByName<IField>(Names.E_FORMATTED_NAME_0008_025); } }
        public IField E_FORMATTED_NAME_0008_025XX { get { return GetElementByName<IField>(Names.E_FORMATTED_NAME_0008_025XX); } }
        public IField E_LAST_NAME_0008_026MS { get { return GetElementByName<IField>(Names.E_LAST_NAME_0008_026MS); } }
        public IField E_LAST_NAME_0008_026 { get { return GetElementByName<IField>(Names.E_LAST_NAME_0008_026); } }
        public IField E_LAST_NAME_0008_026XX { get { return GetElementByName<IField>(Names.E_LAST_NAME_0008_026XX); } }
        public IGroup E_EXPORT_EV9 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV9); } }
        public IGroup E_LEGAL_ACTION_ET { get { return GetElementByName<IGroup>(Names.E_LEGAL_ACTION_ET); } }
        public IField E_IDENTIFIER_0009_027MS { get { return GetElementByName<IField>(Names.E_IDENTIFIER_0009_027MS); } }
        public IField E_IDENTIFIER_0009_027 { get { return GetElementByName<IField>(Names.E_IDENTIFIER_0009_027); } }
        public IField E_IDENTIFIER_0009_027XX { get { return GetElementByName<IField>(Names.E_IDENTIFIER_0009_027XX); } }
        public IField E_COURT_CASE_NUMBER_0009_028MS { get { return GetElementByName<IField>(Names.E_COURT_CASE_NUMBER_0009_028MS); } }
        public IField E_COURT_CASE_NUMBER_0009_028 { get { return GetElementByName<IField>(Names.E_COURT_CASE_NUMBER_0009_028); } }
        public IField E_COURT_CASE_NUMBER_0009_028XX { get { return GetElementByName<IField>(Names.E_COURT_CASE_NUMBER_0009_028XX); } }
        public IField E_STANDARD_NUMBER_0009_029MS { get { return GetElementByName<IField>(Names.E_STANDARD_NUMBER_0009_029MS); } }
        public IField E_STANDARD_NUMBER_0009_029 { get { return GetElementByName<IField>(Names.E_STANDARD_NUMBER_0009_029); } }
        public IField E_STANDARD_NUMBER_0009_029XX { get { return GetElementByName<IField>(Names.E_STANDARD_NUMBER_0009_029XX); } }
        public IGroup E_EXPORT_EV10 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV10); } }
        public IGroup E_CASE_ET { get { return GetElementByName<IGroup>(Names.E_CASE_ET); } }
        public IField E_NUMBER_0010_030MS { get { return GetElementByName<IField>(Names.E_NUMBER_0010_030MS); } }
        public IField E_NUMBER_0010_030 { get { return GetElementByName<IField>(Names.E_NUMBER_0010_030); } }
        public IField E_NUMBER_0010_030XX { get { return GetElementByName<IField>(Names.E_NUMBER_0010_030XX); } }
        public IGroup E_EXPORT_EV11 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV11); } }
        public IGroup E_COLLECTION_TYPE_ET { get { return GetElementByName<IGroup>(Names.E_COLLECTION_TYPE_ET); } }
        public IField E_CODE_0011_031MS { get { return GetElementByName<IField>(Names.E_CODE_0011_031MS); } }
        public IField E_CODE_0011_031 { get { return GetElementByName<IField>(Names.E_CODE_0011_031); } }
        public IField E_CODE_0011_031XX { get { return GetElementByName<IField>(Names.E_CODE_0011_031XX); } }
        public IGroup E_EXPORT_EV12 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV12); } }
        public IGroup E_LEGAL_REFERRAL_ASSIGNMENT_ET { get { return GetElementByName<IGroup>(Names.E_LEGAL_REFERRAL_ASSIGNMENT_ET); } }
        public IField E_EFFECTIVE_DATE_0012_032MS { get { return GetElementByName<IField>(Names.E_EFFECTIVE_DATE_0012_032MS); } }
        public IField E_EFFECTIVE_DATE_0012_032 { get { return GetElementByName<IField>(Names.E_EFFECTIVE_DATE_0012_032); } }
        public IField E_EFFECTIVE_DATE_0012_032XX { get { return GetElementByName<IField>(Names.E_EFFECTIVE_DATE_0012_032XX); } }
        public IGroup E_EXPORT_EV13 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV13); } }
        public IGroup E_TRIBUNAL_ET { get { return GetElementByName<IGroup>(Names.E_TRIBUNAL_ET); } }
        public IField E_JUDICIAL_DISTRICT_0013_033MS { get { return GetElementByName<IField>(Names.E_JUDICIAL_DISTRICT_0013_033MS); } }
        public IField E_JUDICIAL_DISTRICT_0013_033 { get { return GetElementByName<IField>(Names.E_JUDICIAL_DISTRICT_0013_033); } }
        public IField E_JUDICIAL_DISTRICT_0013_033XX { get { return GetElementByName<IField>(Names.E_JUDICIAL_DISTRICT_0013_033XX); } }
        public IField E_NAME_0013_034MS { get { return GetElementByName<IField>(Names.E_NAME_0013_034MS); } }
        public IField E_NAME_0013_034 { get { return GetElementByName<IField>(Names.E_NAME_0013_034); } }
        public IField E_NAME_0013_034XX { get { return GetElementByName<IField>(Names.E_NAME_0013_034XX); } }
        public IGroup E_EXPORT_EV14 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV14); } }
        public IGroup E_FIPS_ET { get { return GetElementByName<IGroup>(Names.E_FIPS_ET); } }
        public IField E_COUNTY_DESCRIPTION_001435MS { get { return GetElementByName<IField>(Names.E_COUNTY_DESCRIPTION_001435MS); } }
        public IField E_COUNTY_DESCRIPTION_0014_035 { get { return GetElementByName<IField>(Names.E_COUNTY_DESCRIPTION_0014_035); } }
        public IField E_COUNTY_DESCRIPTION_001435XX { get { return GetElementByName<IField>(Names.E_COUNTY_DESCRIPTION_001435XX); } }
        public IGroup E_EXPORT_EV15 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV15); } }
        public IGroup E_REPORT_PARMS_ET { get { return GetElementByName<IGroup>(Names.E_REPORT_PARMS_ET); } }
        public IField E_PARM1_0015_036MS { get { return GetElementByName<IField>(Names.E_PARM1_0015_036MS); } }
        public IField E_PARM1_0015_036 { get { return GetElementByName<IField>(Names.E_PARM1_0015_036); } }
        public IField E_PARM1_0015_036XX { get { return GetElementByName<IField>(Names.E_PARM1_0015_036XX); } }
        public IField LS_RETURN_CD { get { return GetElementByName<IField>(Names.LS_RETURN_CD); } }
        public IField E_PARM2_0015_037MS { get { return GetElementByName<IField>(Names.E_PARM2_0015_037MS); } }
        public IField E_PARM2_0015_037 { get { return GetElementByName<IField>(Names.E_PARM2_0015_037); } }
        public IField E_PARM2_0015_037XX { get { return GetElementByName<IField>(Names.E_PARM2_0015_037XX); } }
        public IField E_SUBREPORT_CODE_0015_038MS { get { return GetElementByName<IField>(Names.E_SUBREPORT_CODE_0015_038MS); } }
        public IField E_SUBREPORT_CODE_0015_038 { get { return GetElementByName<IField>(Names.E_SUBREPORT_CODE_0015_038); } }
        public IField E_SUBREPORT_CODE_0015_038XX { get { return GetElementByName<IField>(Names.E_SUBREPORT_CODE_0015_038XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.TI_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.TI_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d7", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d7) =>
                   {
                       FILLER_d7.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d7.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d7.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(96, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 16);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewFillerField(199, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_EV1, (I_IMPORT_EV1) =>
           {
               I_IMPORT_EV1.CreateNewGroup(Names.I_REPORT_PARMS_ET, (I_REPORT_PARMS_ET) =>
               {
                   I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM1_0001_001MS, FieldType.String, 1);

                   IField I_PARM1_0001_001_local = I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM1_0001_001, FieldType.String, 2);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.I_PARM1_0001_001XX, FieldType.String, I_PARM1_0001_001_local, 2);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.IO_CONTROL_CD, FieldType.String, I_PARM1_0001_001_local, 2)
                       .NewCheckField(Names.LS_OPEN_FILE_PASS, "OF")
                       .NewCheckField(Names.LS_APPEND_FILE_PASS, "AF")
                       .NewCheckField(Names.LS_CLOSE_FILE_PASS, "CF")
                       .NewCheckField(Names.LS_GEN_REPORT_PASS, "GR")
                       ;
                   I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM2_0001_002MS, FieldType.String, 1);

                   IField I_PARM2_0001_002_local = I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM2_0001_002, FieldType.String, 2);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.I_PARM2_0001_002XX, FieldType.String, I_PARM2_0001_002_local, 2);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.LS_RUNTIME_RPT_TYPE_CD, FieldType.String, I_PARM2_0001_002_local, 2);
                   I_REPORT_PARMS_ET.CreateNewField(Names.I_SUBREPORT_CODE_0001_003MS, FieldType.String, 1);

                   IField I_SUBREPORT_CODE_0001_003_local = I_REPORT_PARMS_ET.CreateNewField(Names.I_SUBREPORT_CODE_0001_003, FieldType.String, 4);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.I_SUBREPORT_CODE_0001_003XX, FieldType.String, I_SUBREPORT_CODE_0001_003_local, 4);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_BOM_EV2, (E_EXPORT_BOM_EV2) =>
           {
               E_EXPORT_BOM_EV2.CreateNewGroup(Names.E_DATE_WORK_AREA_ET, (E_DATE_WORK_AREA_ET) =>
               {
                   E_DATE_WORK_AREA_ET.CreateNewField(Names.E_DATE_0002_004MS, FieldType.String, 1);

                   IField E_DATE_0002_004_local = E_DATE_WORK_AREA_ET.CreateNewField(Names.E_DATE_0002_004, FieldType.SignedNumeric, 8);
                   E_DATE_WORK_AREA_ET.CreateNewFieldRedefine(Names.E_DATE_0002_004XX, FieldType.String, E_DATE_0002_004_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV3, (E_EXPORT_EV3) =>
           {
               E_EXPORT_EV3.CreateNewGroup(Names.E_SERVICE_PROVIDER_ET, (E_SERVICE_PROVIDER_ET) =>
               {
                   E_SERVICE_PROVIDER_ET.CreateNewField(Names.E_SYSTEM_GENERATED_ID_000305MS, FieldType.String, 1);

                   IField E_SYSTEM_GENERATED_ID_0003_005_local = E_SERVICE_PROVIDER_ET.CreateNewField(Names.E_SYSTEM_GENERATED_ID_0003_005, FieldType.SignedNumeric, 5);
                   E_SERVICE_PROVIDER_ET.CreateNewFieldRedefine(Names.E_SYSTEM_GENERATED_ID_000305XX, FieldType.String, E_SYSTEM_GENERATED_ID_0003_005_local, 5);
                   E_SERVICE_PROVIDER_ET.CreateNewField(Names.E_USER_ID_0003_006MS, FieldType.String, 1);

                   IField E_USER_ID_0003_006_local = E_SERVICE_PROVIDER_ET.CreateNewField(Names.E_USER_ID_0003_006, FieldType.String, 8);
                   E_SERVICE_PROVIDER_ET.CreateNewFieldRedefine(Names.E_USER_ID_0003_006XX, FieldType.String, E_USER_ID_0003_006_local, 8);
                   E_SERVICE_PROVIDER_ET.CreateNewField(Names.E_LAST_NAME_0003_007MS, FieldType.String, 1);

                   IField E_LAST_NAME_0003_007_local = E_SERVICE_PROVIDER_ET.CreateNewField(Names.E_LAST_NAME_0003_007, FieldType.String, 17);
                   E_SERVICE_PROVIDER_ET.CreateNewFieldRedefine(Names.E_LAST_NAME_0003_007XX, FieldType.String, E_LAST_NAME_0003_007_local, 17);
                   E_SERVICE_PROVIDER_ET.CreateNewField(Names.E_FIRST_NAME_0003_008MS, FieldType.String, 1);

                   IField E_FIRST_NAME_0003_008_local = E_SERVICE_PROVIDER_ET.CreateNewField(Names.E_FIRST_NAME_0003_008, FieldType.String, 12);
                   E_SERVICE_PROVIDER_ET.CreateNewFieldRedefine(Names.E_FIRST_NAME_0003_008XX, FieldType.String, E_FIRST_NAME_0003_008_local, 12);
                   E_SERVICE_PROVIDER_ET.CreateNewField(Names.E_MIDDLE_INITIAL_0003_009MS, FieldType.String, 1);

                   IField E_MIDDLE_INITIAL_0003_009_local = E_SERVICE_PROVIDER_ET.CreateNewField(Names.E_MIDDLE_INITIAL_0003_009, FieldType.String, 1);
                   E_SERVICE_PROVIDER_ET.CreateNewFieldRedefine(Names.E_MIDDLE_INITIAL_0003_009XX, FieldType.String, E_MIDDLE_INITIAL_0003_009_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_K_O_EV4, (E_EXPORT_K_O_EV4) =>
           {
               E_EXPORT_K_O_EV4.CreateNewGroup(Names.E_TEXT_WORK_AREA_ET, (E_TEXT_WORK_AREA_ET) =>
               {
                   E_TEXT_WORK_AREA_ET.CreateNewField(Names.E_TEXT_1_0004_010MS, FieldType.String, 1);

                   IField E_TEXT_1_0004_010_local = E_TEXT_WORK_AREA_ET.CreateNewField(Names.E_TEXT_1_0004_010, FieldType.String, 1);
                   E_TEXT_WORK_AREA_ET.CreateNewFieldRedefine(Names.E_TEXT_1_0004_010XX, FieldType.String, E_TEXT_1_0004_010_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV5, (E_EXPORT_EV5) =>
           {
               E_EXPORT_EV5.CreateNewGroup(Names.E_COLLECTION_ET, (E_COLLECTION_ET) =>
               {
                   E_COLLECTION_ET.CreateNewField(Names.E_PROGRAM_APPLIED_TO_000511MS, FieldType.String, 1);

                   IField E_PROGRAM_APPLIED_TO_0005_011_local = E_COLLECTION_ET.CreateNewField(Names.E_PROGRAM_APPLIED_TO_0005_011, FieldType.String, 3);
                   E_COLLECTION_ET.CreateNewFieldRedefine(Names.E_PROGRAM_APPLIED_TO_000511XX, FieldType.String, E_PROGRAM_APPLIED_TO_0005_011_local, 3);
                   E_COLLECTION_ET.CreateNewField(Names.E_AMOUNT_0005_012MS, FieldType.String, 1);

                   IField E_AMOUNT_0005_012_local = E_COLLECTION_ET.CreateNewField(Names.E_AMOUNT_0005_012, FieldType.SignedNumeric, 9, null, 2);
                   E_COLLECTION_ET.CreateNewFieldRedefine(Names.E_AMOUNT_0005_012XX, FieldType.String, E_AMOUNT_0005_012_local, 9);
                   E_COLLECTION_ET.CreateNewField(Names.E_APPLIED_TO_CODE_0005_013MS, FieldType.String, 1);

                   IField E_APPLIED_TO_CODE_0005_013_local = E_COLLECTION_ET.CreateNewField(Names.E_APPLIED_TO_CODE_0005_013, FieldType.String, 1);
                   E_COLLECTION_ET.CreateNewFieldRedefine(Names.E_APPLIED_TO_CODE_0005_013XX, FieldType.String, E_APPLIED_TO_CODE_0005_013_local, 1);
                   E_COLLECTION_ET.CreateNewField(Names.E_COLLECTION_DT_0005_014MS, FieldType.String, 1);

                   IField E_COLLECTION_DT_0005_014_local = E_COLLECTION_ET.CreateNewField(Names.E_COLLECTION_DT_0005_014, FieldType.SignedNumeric, 8);
                   E_COLLECTION_ET.CreateNewFieldRedefine(Names.E_COLLECTION_DT_0005_014XX, FieldType.String, E_COLLECTION_DT_0005_014_local, 8);
                   E_COLLECTION_ET.CreateNewField(Names.E_ADJUSTED_IND_0005_015MS, FieldType.String, 1);

                   IField E_ADJUSTED_IND_0005_015_local = E_COLLECTION_ET.CreateNewField(Names.E_ADJUSTED_IND_0005_015, FieldType.String, 1);
                   E_COLLECTION_ET.CreateNewFieldRedefine(Names.E_ADJUSTED_IND_0005_015XX, FieldType.String, E_ADJUSTED_IND_0005_015_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_PROG_GRP_EV6, (E_EXPORT_PROG_GRP_EV6) =>
           {
               E_EXPORT_PROG_GRP_EV6.CreateNewGroup(Names.E_TEXT_WORK_AREA_ET_d2, (E_TEXT_WORK_AREA_ET_d2) =>
               {
                   E_TEXT_WORK_AREA_ET_d2.CreateNewField(Names.E_TEXT_1_0006_016MS, FieldType.String, 1);

                   IField E_TEXT_1_0006_016_local = E_TEXT_WORK_AREA_ET_d2.CreateNewField(Names.E_TEXT_1_0006_016, FieldType.String, 1);
                   E_TEXT_WORK_AREA_ET_d2.CreateNewFieldRedefine(Names.E_TEXT_1_0006_016XX, FieldType.String, E_TEXT_1_0006_016_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_AP_EV7, (E_EXPORT_AP_EV7) =>
           {
               E_EXPORT_AP_EV7.CreateNewGroup(Names.E_CSE_PERSONS_WORK_SET_ET, (E_CSE_PERSONS_WORK_SET_ET) =>
               {
                   E_CSE_PERSONS_WORK_SET_ET.CreateNewField(Names.E_NUMBER_0007_017MS, FieldType.String, 1);

                   IField E_NUMBER_0007_017_local = E_CSE_PERSONS_WORK_SET_ET.CreateNewField(Names.E_NUMBER_0007_017, FieldType.String, 10);
                   E_CSE_PERSONS_WORK_SET_ET.CreateNewFieldRedefine(Names.E_NUMBER_0007_017XX, FieldType.String, E_NUMBER_0007_017_local, 10);
                   E_CSE_PERSONS_WORK_SET_ET.CreateNewField(Names.E_FIRST_NAME_0007_018MS, FieldType.String, 1);

                   IField E_FIRST_NAME_0007_018_local = E_CSE_PERSONS_WORK_SET_ET.CreateNewField(Names.E_FIRST_NAME_0007_018, FieldType.String, 12);
                   E_CSE_PERSONS_WORK_SET_ET.CreateNewFieldRedefine(Names.E_FIRST_NAME_0007_018XX, FieldType.String, E_FIRST_NAME_0007_018_local, 12);
                   E_CSE_PERSONS_WORK_SET_ET.CreateNewField(Names.E_MIDDLE_INITIAL_0007_019MS, FieldType.String, 1);

                   IField E_MIDDLE_INITIAL_0007_019_local = E_CSE_PERSONS_WORK_SET_ET.CreateNewField(Names.E_MIDDLE_INITIAL_0007_019, FieldType.String, 1);
                   E_CSE_PERSONS_WORK_SET_ET.CreateNewFieldRedefine(Names.E_MIDDLE_INITIAL_0007_019XX, FieldType.String, E_MIDDLE_INITIAL_0007_019_local, 1);
                   E_CSE_PERSONS_WORK_SET_ET.CreateNewField(Names.E_FORMATTED_NAME_0007_020MS, FieldType.String, 1);

                   IField E_FORMATTED_NAME_0007_020_local = E_CSE_PERSONS_WORK_SET_ET.CreateNewField(Names.E_FORMATTED_NAME_0007_020, FieldType.String, 33);
                   E_CSE_PERSONS_WORK_SET_ET.CreateNewFieldRedefine(Names.E_FORMATTED_NAME_0007_020XX, FieldType.String, E_FORMATTED_NAME_0007_020_local, 33);
                   E_CSE_PERSONS_WORK_SET_ET.CreateNewField(Names.E_LAST_NAME_0007_021MS, FieldType.String, 1);

                   IField E_LAST_NAME_0007_021_local = E_CSE_PERSONS_WORK_SET_ET.CreateNewField(Names.E_LAST_NAME_0007_021, FieldType.String, 17);
                   E_CSE_PERSONS_WORK_SET_ET.CreateNewFieldRedefine(Names.E_LAST_NAME_0007_021XX, FieldType.String, E_LAST_NAME_0007_021_local, 17);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_AR_EV8, (E_EXPORT_AR_EV8) =>
           {
               E_EXPORT_AR_EV8.CreateNewGroup(Names.E_CSE_PERSONS_WORK_SET_ET_d2, (E_CSE_PERSONS_WORK_SET_ET_d2) =>
               {
                   E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewField(Names.E_NUMBER_0008_022MS, FieldType.String, 1);

                   IField E_NUMBER_0008_022_local = E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewField(Names.E_NUMBER_0008_022, FieldType.String, 10);
                   E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewFieldRedefine(Names.E_NUMBER_0008_022XX, FieldType.String, E_NUMBER_0008_022_local, 10);
                   E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewField(Names.E_FIRST_NAME_0008_023MS, FieldType.String, 1);

                   IField E_FIRST_NAME_0008_023_local = E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewField(Names.E_FIRST_NAME_0008_023, FieldType.String, 12);
                   E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewFieldRedefine(Names.E_FIRST_NAME_0008_023XX, FieldType.String, E_FIRST_NAME_0008_023_local, 12);
                   E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewField(Names.E_MIDDLE_INITIAL_0008_024MS, FieldType.String, 1);

                   IField E_MIDDLE_INITIAL_0008_024_local = E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewField(Names.E_MIDDLE_INITIAL_0008_024, FieldType.String, 1);
                   E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewFieldRedefine(Names.E_MIDDLE_INITIAL_0008_024XX, FieldType.String, E_MIDDLE_INITIAL_0008_024_local, 1);
                   E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewField(Names.E_FORMATTED_NAME_0008_025MS, FieldType.String, 1);

                   IField E_FORMATTED_NAME_0008_025_local = E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewField(Names.E_FORMATTED_NAME_0008_025, FieldType.String, 33);
                   E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewFieldRedefine(Names.E_FORMATTED_NAME_0008_025XX, FieldType.String, E_FORMATTED_NAME_0008_025_local, 33);
                   E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewField(Names.E_LAST_NAME_0008_026MS, FieldType.String, 1);

                   IField E_LAST_NAME_0008_026_local = E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewField(Names.E_LAST_NAME_0008_026, FieldType.String, 17);
                   E_CSE_PERSONS_WORK_SET_ET_d2.CreateNewFieldRedefine(Names.E_LAST_NAME_0008_026XX, FieldType.String, E_LAST_NAME_0008_026_local, 17);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV9, (E_EXPORT_EV9) =>
           {
               E_EXPORT_EV9.CreateNewGroup(Names.E_LEGAL_ACTION_ET, (E_LEGAL_ACTION_ET) =>
               {
                   E_LEGAL_ACTION_ET.CreateNewField(Names.E_IDENTIFIER_0009_027MS, FieldType.String, 1);

                   IField E_IDENTIFIER_0009_027_local = E_LEGAL_ACTION_ET.CreateNewField(Names.E_IDENTIFIER_0009_027, FieldType.SignedNumeric, 9);
                   E_LEGAL_ACTION_ET.CreateNewFieldRedefine(Names.E_IDENTIFIER_0009_027XX, FieldType.String, E_IDENTIFIER_0009_027_local, 9);
                   E_LEGAL_ACTION_ET.CreateNewField(Names.E_COURT_CASE_NUMBER_0009_028MS, FieldType.String, 1);

                   IField E_COURT_CASE_NUMBER_0009_028_local = E_LEGAL_ACTION_ET.CreateNewField(Names.E_COURT_CASE_NUMBER_0009_028, FieldType.String, 17);
                   E_LEGAL_ACTION_ET.CreateNewFieldRedefine(Names.E_COURT_CASE_NUMBER_0009_028XX, FieldType.String, E_COURT_CASE_NUMBER_0009_028_local, 17);
                   E_LEGAL_ACTION_ET.CreateNewField(Names.E_STANDARD_NUMBER_0009_029MS, FieldType.String, 1);

                   IField E_STANDARD_NUMBER_0009_029_local = E_LEGAL_ACTION_ET.CreateNewField(Names.E_STANDARD_NUMBER_0009_029, FieldType.String, 20);
                   E_LEGAL_ACTION_ET.CreateNewFieldRedefine(Names.E_STANDARD_NUMBER_0009_029XX, FieldType.String, E_STANDARD_NUMBER_0009_029_local, 20);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV10, (E_EXPORT_EV10) =>
           {
               E_EXPORT_EV10.CreateNewGroup(Names.E_CASE_ET, (E_CASE_ET) =>
               {
                   E_CASE_ET.CreateNewField(Names.E_NUMBER_0010_030MS, FieldType.String, 1);

                   IField E_NUMBER_0010_030_local = E_CASE_ET.CreateNewField(Names.E_NUMBER_0010_030, FieldType.String, 10);
                   E_CASE_ET.CreateNewFieldRedefine(Names.E_NUMBER_0010_030XX, FieldType.String, E_NUMBER_0010_030_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV11, (E_EXPORT_EV11) =>
           {
               E_EXPORT_EV11.CreateNewGroup(Names.E_COLLECTION_TYPE_ET, (E_COLLECTION_TYPE_ET) =>
               {
                   E_COLLECTION_TYPE_ET.CreateNewField(Names.E_CODE_0011_031MS, FieldType.String, 1);

                   IField E_CODE_0011_031_local = E_COLLECTION_TYPE_ET.CreateNewField(Names.E_CODE_0011_031, FieldType.String, 10);
                   E_COLLECTION_TYPE_ET.CreateNewFieldRedefine(Names.E_CODE_0011_031XX, FieldType.String, E_CODE_0011_031_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV12, (E_EXPORT_EV12) =>
           {
               E_EXPORT_EV12.CreateNewGroup(Names.E_LEGAL_REFERRAL_ASSIGNMENT_ET, (E_LEGAL_REFERRAL_ASSIGNMENT_ET) =>
               {
                   E_LEGAL_REFERRAL_ASSIGNMENT_ET.CreateNewField(Names.E_EFFECTIVE_DATE_0012_032MS, FieldType.String, 1);

                   IField E_EFFECTIVE_DATE_0012_032_local = E_LEGAL_REFERRAL_ASSIGNMENT_ET.CreateNewField(Names.E_EFFECTIVE_DATE_0012_032, FieldType.SignedNumeric, 8);
                   E_LEGAL_REFERRAL_ASSIGNMENT_ET.CreateNewFieldRedefine(Names.E_EFFECTIVE_DATE_0012_032XX, FieldType.String, E_EFFECTIVE_DATE_0012_032_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV13, (E_EXPORT_EV13) =>
           {
               E_EXPORT_EV13.CreateNewGroup(Names.E_TRIBUNAL_ET, (E_TRIBUNAL_ET) =>
               {
                   E_TRIBUNAL_ET.CreateNewField(Names.E_JUDICIAL_DISTRICT_0013_033MS, FieldType.String, 1);

                   IField E_JUDICIAL_DISTRICT_0013_033_local = E_TRIBUNAL_ET.CreateNewField(Names.E_JUDICIAL_DISTRICT_0013_033, FieldType.String, 5);
                   E_TRIBUNAL_ET.CreateNewFieldRedefine(Names.E_JUDICIAL_DISTRICT_0013_033XX, FieldType.String, E_JUDICIAL_DISTRICT_0013_033_local, 5);
                   E_TRIBUNAL_ET.CreateNewField(Names.E_NAME_0013_034MS, FieldType.String, 1);

                   IField E_NAME_0013_034_local = E_TRIBUNAL_ET.CreateNewField(Names.E_NAME_0013_034, FieldType.String, 30);
                   E_TRIBUNAL_ET.CreateNewFieldRedefine(Names.E_NAME_0013_034XX, FieldType.String, E_NAME_0013_034_local, 30);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV14, (E_EXPORT_EV14) =>
           {
               E_EXPORT_EV14.CreateNewGroup(Names.E_FIPS_ET, (E_FIPS_ET) =>
               {
                   E_FIPS_ET.CreateNewField(Names.E_COUNTY_DESCRIPTION_001435MS, FieldType.String, 1);

                   IField E_COUNTY_DESCRIPTION_0014_035_local = E_FIPS_ET.CreateNewField(Names.E_COUNTY_DESCRIPTION_0014_035, FieldType.String, 20);
                   E_FIPS_ET.CreateNewFieldRedefine(Names.E_COUNTY_DESCRIPTION_001435XX, FieldType.String, E_COUNTY_DESCRIPTION_0014_035_local, 20);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV15, (E_EXPORT_EV15) =>
           {
               E_EXPORT_EV15.CreateNewGroup(Names.E_REPORT_PARMS_ET, (E_REPORT_PARMS_ET) =>
               {
                   E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM1_0015_036MS, FieldType.String, 1);

                   IField E_PARM1_0015_036_local = E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM1_0015_036, FieldType.String, 2);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.E_PARM1_0015_036XX, FieldType.String, E_PARM1_0015_036_local, 2);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.LS_RETURN_CD, FieldType.String, E_PARM1_0015_036_local, 2);
                   E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM2_0015_037MS, FieldType.String, 1);

                   IField E_PARM2_0015_037_local = E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM2_0015_037, FieldType.String, 2);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.E_PARM2_0015_037XX, FieldType.String, E_PARM2_0015_037_local, 2);
                   E_REPORT_PARMS_ET.CreateNewField(Names.E_SUBREPORT_CODE_0015_038MS, FieldType.String, 1);

                   IField E_SUBREPORT_CODE_0015_038_local = E_REPORT_PARMS_ET.CreateNewField(Names.E_SUBREPORT_CODE_0015_038, FieldType.String, 4);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.E_SUBREPORT_CODE_0015_038XX, FieldType.String, E_SUBREPORT_CODE_0015_038_local, 4);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(TI_RUNTIME_PARM1, args, 0);
            SetPassedParm(TI_RUNTIME_PARM2, args, 1);
            SetPassedParm(GLOBDATA, args, 2);
            SetPassedParm(I_IMPORT_EV1, args, 3);
            SetPassedParm(E_EXPORT_BOM_EV2, args, 4);
            SetPassedParm(E_EXPORT_EV3, args, 5);
            SetPassedParm(E_EXPORT_K_O_EV4, args, 6);
            SetPassedParm(E_EXPORT_EV5, args, 7);
            SetPassedParm(E_EXPORT_PROG_GRP_EV6, args, 8);
            SetPassedParm(E_EXPORT_AP_EV7, args, 9);
            SetPassedParm(E_EXPORT_AR_EV8, args, 10);
            SetPassedParm(E_EXPORT_EV9, args, 11);
            SetPassedParm(E_EXPORT_EV10, args, 12);
            SetPassedParm(E_EXPORT_EV11, args, 13);
            SetPassedParm(E_EXPORT_EV12, args, 14);
            SetPassedParm(E_EXPORT_EV13, args, 15);
            SetPassedParm(E_EXPORT_EV14, args, 16);
            SetPassedParm(E_EXPORT_EV15, args, 17);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(TI_RUNTIME_PARM1, args, 0);
            SetReturnParm(TI_RUNTIME_PARM2, args, 1);
            SetReturnParm(GLOBDATA, args, 2);
            SetReturnParm(I_IMPORT_EV1, args, 3);
            SetReturnParm(E_EXPORT_BOM_EV2, args, 4);
            SetReturnParm(E_EXPORT_EV3, args, 5);
            SetReturnParm(E_EXPORT_K_O_EV4, args, 6);
            SetReturnParm(E_EXPORT_EV5, args, 7);
            SetReturnParm(E_EXPORT_PROG_GRP_EV6, args, 8);
            SetReturnParm(E_EXPORT_AP_EV7, args, 9);
            SetReturnParm(E_EXPORT_AR_EV8, args, 10);
            SetReturnParm(E_EXPORT_EV9, args, 11);
            SetReturnParm(E_EXPORT_EV10, args, 12);
            SetReturnParm(E_EXPORT_EV11, args, 13);
            SetReturnParm(E_EXPORT_EV12, args, 14);
            SetReturnParm(E_EXPORT_EV13, args, 15);
            SetReturnParm(E_EXPORT_EV14, args, 16);
            SetReturnParm(E_EXPORT_EV15, args, 17);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEX609F : EABBase
    {

        #region Public Constructors
        public SWEX609F()
            : base()
        {
            this.ProgramName.SetValue("SWEX609F");

            WS = new SWEX609F_ws();
            FD = new SWEX609F_fd(WS);
            LS = new SWEX609F_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEX609F_ws WS;

        //==== File Data Class ========================================
        private SWEX609F_fd FD;

        //==== Linkage Section Data Class ========================================
        private SWEX609F_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING TI-RUNTIME-PARM1 , TI-RUNTIME-PARM2 , GLOBDATA , I-IMPORT-EV1 , E-EXPORT-BOM-EV2 , E-EXPORT-EV3 , E-EXPORT-K-O-EV4 , E-EXPORT-EV5 , E-EXPORT-PROG-GRP-EV6 , E-EXPORT-AP-EV7 , E-EXPORT-AR-EV8 , E-EXPORT-EV9 , E-EXPORT-EV10 , E-EXPORT-EV11 , E-EXPORT-EV12 , E-EXPORT-EV13 , E-EXPORT-EV14 , E-EXPORT-EV15.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_LINE(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_LINE
        /// </summary>
        private void M_MAIN_LINE(string returnMethod = "")
        {
            LS.E_PARM1_0015_036.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO E-PARM1-0015-036.
            M_INIT_LINKAGE("M_INIT_LINKAGE_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM INIT-LINKAGE THRU INIT-LINKAGE-EXIT.
            if ((LS.I_PARM1_0001_001.IsEqualTo("OF"))
             || (LS.I_PARM1_0001_001.IsEqualTo("AF"))) //COBOL==> IF I-PARM1-0001-001 = 'OF' OR I-PARM1-0001-001 = 'AF'
            {
                M_OPEN_FILE("M_OPEN_FILE_EXIT"); if (Control.ExitProgram) { return; }                                 //COBOL==> PERFORM OPEN-FILE THRU OPEN-FILE-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (LS.I_PARM1_0001_001.IsEqualTo("CF"))                                                            //COBOL==> IF I-PARM1-0001-001 = 'CF'
                {
                    M_CLOSE_FILE("M_CLOSE_FILE_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM CLOSE-FILE THRU CLOSE-FILE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (LS.I_PARM1_0001_001.IsEqualTo("GR"))                                                            //COBOL==> IF I-PARM1-0001-001 = 'GR'
                    {
                        M_PROCESS_RECORD("M_PROCESS_RECORD_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM PROCESS-RECORD THRU PROCESS-RECORD-EXIT
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        LS.E_PARM1_0015_036.SetValue("II");                                                                 //COBOL==> MOVE 'II' TO E-PARM1-0015-036
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            LS.E_PARM2_0015_037.SetValue(WS.WS_FILE_STATUS);                                                    //COBOL==> MOVE WS-FILE-STATUS TO E-PARM2-0015-037.
            if (returnMethod != "" && returnMethod != "M_MAIN_LINE") { M_MAINLINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAINLINE_EXIT
        /// </summary>
        private void M_MAINLINE_EXIT(string returnMethod = "")
        {
            return;                                                                                             //COBOL==> EXIT PROGRAM.
        }
        /// <summary>
        /// Method M_OPEN_FILE
        /// </summary>
        private void M_OPEN_FILE(string returnMethod = "")
        {
            FD.SEQ_FILE.OpenFile(FileAccessMode.Read);                                                          //COBOL==> OPEN INPUT SEQ-FILE.
            if (!(WS.WS_FILE_STATUS.IsEqualTo("00")))                                                           //COBOL==> IF WS-FILE-STATUS NOT = '00'
            {
                LS.E_PARM1_0015_036.SetValue("EO");                                                                 //COBOL==> MOVE 'EO' TO E-PARM1-0015-036
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_OPEN_FILE") { M_OPEN_FILE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_OPEN_FILE_EXIT
        /// </summary>
        private void M_OPEN_FILE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_OPEN_FILE_EXIT") { return; }                                                 //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_OPEN_FILE_EXIT") { M_PROCESS_RECORD(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PROCESS_RECORD
        /// </summary>
        private void M_PROCESS_RECORD(string returnMethod = "")
        {
            WS.WS_RECORD.SetValue(FD.SEQ_FILE.ReadLineInto());                                                  //COBOL==> READ SEQ-FILE INTO WS-RECORD
            if (FD.SEQ_FILE.FileStatus == FileStatus.End_of_file)                                               //COBOL==> AT END
            {
                LS.E_PARM1_0015_036.SetValue("EF");                                                                 //COBOL==> MOVE 'EF' TO E-PARM1-0015-036.
            }
            if (!(LS.E_PARM1_0015_036.IsEqualTo("EF")))                                                         //COBOL==> IF E-PARM1-0015-036 NOT EQUAL 'EF'
            {
                M_POPULATE_ATTRIBUTES("M_POPULATE_ATTRIBUTES_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM POPULATE-ATTRIBUTES THROUGH POPULATE-ATTRIBUTES-EXIT
                if (!(WS.WS_FILE_STATUS.IsEqualTo("00")))                                                           //COBOL==> IF WS-FILE-STATUS NOT = '00'
                {
                    LS.E_PARM1_0015_036.SetValue("ER");                                                                 //COBOL==> MOVE 'ER' TO E-PARM1-0015-036
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PROCESS_RECORD") { M_PROCESS_RECORD_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PROCESS_RECORD_EXIT
        /// </summary>
        private void M_PROCESS_RECORD_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PROCESS_RECORD_EXIT") { return; }                                            //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PROCESS_RECORD_EXIT") { M_POPULATE_ATTRIBUTES(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_POPULATE_ATTRIBUTES
        /// </summary>
        private void M_POPULATE_ATTRIBUTES(string returnMethod = "")
        {
            LS.E_TEXT_1_0004_010.SetValue(WS.WS_1_WS52_TEXT_1_X);                                               //COBOL==> MOVE WS-1-WS52-TEXT-1-X TO E-TEXT-1-0004-010.
            LS.E_LAST_NAME_0003_007.SetValue(WS.WS_2_WS22_LAST_NAME_X);                                         //COBOL==> MOVE WS-2-WS22-LAST-NAME-X TO E-LAST-NAME-0003-007.
            LS.E_FIRST_NAME_0003_008.SetValue(WS.WS_19_WS39_FIRST_NAME_X);                                      //COBOL==> MOVE WS-19-WS39-FIRST-NAME-X TO E-FIRST-NAME-0003-008.
            LS.E_MIDDLE_INITIAL_0003_009.SetValue(WS.WS_31_WS51_MIDDLE_INITIAL_X);                              //COBOL==> MOVE WS-31-WS51-MIDDLE-INITIAL-X TO E-MIDDLE-INITIAL-0003-009.
            LS.E_ADJUSTED_IND_0005_015.SetValue(WS.WS_32_WS74_ADJUSTED_IND_X);                                  //COBOL==> MOVE WS-32-WS74-ADJUSTED-IND-X TO E-ADJUSTED-IND-0005-015.
            LS.E_TEXT_1_0006_016.SetValue(WS.WS_33_WS75_TEXT_1_X);                                              //COBOL==> MOVE WS-33-WS75-TEXT-1-X TO E-TEXT-1-0006-016.
            LS.E_FORMATTED_NAME_0007_020.SetValue(WS.WS_34_WS99_FORMATTED_NAME_X);                              //COBOL==> MOVE WS-34-WS99-FORMATTED-NAME-X TO E-FORMATTED-NAME-0007-020.
            LS.E_FORMATTED_NAME_0008_025.SetValue(WS.WS_67_WS172_FORMATTED_NAME_X);                             //COBOL==> MOVE WS-67-WS172-FORMATTED-NAME-X TO E-FORMATTED-NAME-0008-025.
            if (!(WS.WS_100_WS1_DATE_9.IsNumericValue()))                                                      //COBOL==> IF WS-100-WS1-DATE-9 NOT NUMERIC
            {
                DisplayToLog(" NON-NUMERIC DATA FOUND IN POSITION  100 ");                                          //COBOL==> DISPLAY ' NON-NUMERIC DATA FOUND IN POSITION  100 '
                WS.WS_100_WS1_DATE_9.SetValueWithZeroes();                                                          //COBOL==> MOVE ZERO TO WS-100-WS1-DATE-9
                LS.E_PARM1_0015_036.SetValue("EN");                                                                 //COBOL==> MOVE 'EN' TO E-PARM1-0015-036
            }                                                                                                   //COBOL==> END-IF.
            LS.E_DATE_0002_004.SetValue(WS.WS_100_WS1_DATE_9);                                                  //COBOL==> MOVE WS-100-WS1-DATE-9 TO E-DATE-0002-004.
            if (!(WS.WS_108_WS9_SYSTEM_GENERATED__9.IsNumericValue()))                                         //COBOL==> IF WS-108-WS9-SYSTEM-GENERATED--9 NOT NUMERIC
            {
                DisplayToLog(" NON-NUMERIC DATA FOUND IN POSITION  108 ");                                          //COBOL==> DISPLAY ' NON-NUMERIC DATA FOUND IN POSITION  108 '
                WS.WS_108_WS9_SYSTEM_GENERATED__9.SetValueWithZeroes();                                             //COBOL==> MOVE ZERO TO WS-108-WS9-SYSTEM-GENERATED--9
                LS.E_PARM1_0015_036.SetValue("EN");                                                                 //COBOL==> MOVE 'EN' TO E-PARM1-0015-036
            }                                                                                                   //COBOL==> END-IF.
            LS.E_SYSTEM_GENERATED_ID_0003_005.SetValue(WS.WS_108_WS9_SYSTEM_GENERATED__9);                      //COBOL==> MOVE WS-108-WS9-SYSTEM-GENERATED--9 TO E-SYSTEM-GENERATED-ID-0003-005.
            LS.E_USER_ID_0003_006.SetValue(WS.WS_113_WS14_USER_ID_X);                                           //COBOL==> MOVE WS-113-WS14-USER-ID-X TO E-USER-ID-0003-006.
            LS.E_PROGRAM_APPLIED_TO_0005_011.SetValue(WS.WS_121_WS53_PROGRAM_APPLIED__X);                       //COBOL==> MOVE WS-121-WS53-PROGRAM-APPLIED--X TO E-PROGRAM-APPLIED-TO-0005-011.
            if (!(WS.WS_124_WS56_AMOUNT_9.IsNumericValue()))                                                   //COBOL==> IF WS-124-WS56-AMOUNT-9 NOT NUMERIC
            {
                DisplayToLog(" NON-NUMERIC DATA FOUND IN POSITION  124 ");                                          //COBOL==> DISPLAY ' NON-NUMERIC DATA FOUND IN POSITION  124 '
                WS.WS_124_WS56_AMOUNT_9.SetValueWithZeroes();                                                       //COBOL==> MOVE ZERO TO WS-124-WS56-AMOUNT-9
                LS.E_PARM1_0015_036.SetValue("EN");                                                                 //COBOL==> MOVE 'EN' TO E-PARM1-0015-036
            }                                                                                                   //COBOL==> END-IF.
            LS.E_AMOUNT_0005_012.SetValue(WS.WS_124_WS56_AMOUNT_9);                                             //COBOL==> MOVE WS-124-WS56-AMOUNT-9 TO E-AMOUNT-0005-012.
            LS.E_APPLIED_TO_CODE_0005_013.SetValue(WS.WS_133_WS65_APPLIED_TO_CODE_X);                           //COBOL==> MOVE WS-133-WS65-APPLIED-TO-CODE-X TO E-APPLIED-TO-CODE-0005-013.
            if (!(WS.WS_134_WS66_COLLECTION_DT_9.IsNumericValue()))                                            //COBOL==> IF WS-134-WS66-COLLECTION-DT-9 NOT NUMERIC
            {
                DisplayToLog(" NON-NUMERIC DATA FOUND IN POSITION  134 ");                                          //COBOL==> DISPLAY ' NON-NUMERIC DATA FOUND IN POSITION  134 '
                WS.WS_134_WS66_COLLECTION_DT_9.SetValueWithZeroes();                                                //COBOL==> MOVE ZERO TO WS-134-WS66-COLLECTION-DT-9
                LS.E_PARM1_0015_036.SetValue("EN");                                                                 //COBOL==> MOVE 'EN' TO E-PARM1-0015-036
            }                                                                                                   //COBOL==> END-IF.
            LS.E_COLLECTION_DT_0005_014.SetValue(WS.WS_134_WS66_COLLECTION_DT_9);                               //COBOL==> MOVE WS-134-WS66-COLLECTION-DT-9 TO E-COLLECTION-DT-0005-014.
            LS.E_NUMBER_0007_017.SetValue(WS.WS_142_WS76_NUMBER_X);                                             //COBOL==> MOVE WS-142-WS76-NUMBER-X TO E-NUMBER-0007-017.
            LS.E_FIRST_NAME_0007_018.SetValue(WS.WS_152_WS86_FIRST_NAME_X);                                     //COBOL==> MOVE WS-152-WS86-FIRST-NAME-X TO E-FIRST-NAME-0007-018.
            LS.E_MIDDLE_INITIAL_0007_019.SetValue(WS.WS_164_WS98_MIDDLE_INITIAL_X);                             //COBOL==> MOVE WS-164-WS98-MIDDLE-INITIAL-X TO E-MIDDLE-INITIAL-0007-019.
            LS.E_LAST_NAME_0007_021.SetValue(WS.WS_165_WS132_LAST_NAME_X);                                      //COBOL==> MOVE WS-165-WS132-LAST-NAME-X TO E-LAST-NAME-0007-021.
            LS.E_NUMBER_0008_022.SetValue(WS.WS_182_WS149_NUMBER_X);                                            //COBOL==> MOVE WS-182-WS149-NUMBER-X TO E-NUMBER-0008-022.
            LS.E_FIRST_NAME_0008_023.SetValue(WS.WS_192_WS159_FIRST_NAME_X);                                    //COBOL==> MOVE WS-192-WS159-FIRST-NAME-X TO E-FIRST-NAME-0008-023.
            LS.E_MIDDLE_INITIAL_0008_024.SetValue(WS.WS_204_WS171_MIDDLE_INITIAL_X);                            //COBOL==> MOVE WS-204-WS171-MIDDLE-INITIAL-X TO E-MIDDLE-INITIAL-0008-024.
            LS.E_LAST_NAME_0008_026.SetValue(WS.WS_205_WS205_LAST_NAME_X);                                      //COBOL==> MOVE WS-205-WS205-LAST-NAME-X TO E-LAST-NAME-0008-026.
            if (!(WS.WS_222_WS222_IDENTIFIER_9.IsNumericValue()))                                              //COBOL==> IF WS-222-WS222-IDENTIFIER-9 NOT NUMERIC
            {
                DisplayToLog(" NON-NUMERIC DATA FOUND IN POSITION  222 ");                                          //COBOL==> DISPLAY ' NON-NUMERIC DATA FOUND IN POSITION  222 '
                WS.WS_222_WS222_IDENTIFIER_9.SetValueWithZeroes();                                                  //COBOL==> MOVE ZERO TO WS-222-WS222-IDENTIFIER-9
                LS.E_PARM1_0015_036.SetValue("EN");                                                                 //COBOL==> MOVE 'EN' TO E-PARM1-0015-036
            }                                                                                                   //COBOL==> END-IF.
            LS.E_IDENTIFIER_0009_027.SetValue(WS.WS_222_WS222_IDENTIFIER_9);                                    //COBOL==> MOVE WS-222-WS222-IDENTIFIER-9 TO E-IDENTIFIER-0009-027.
            LS.E_COURT_CASE_NUMBER_0009_028.SetValue(WS.WS_231_WS231_COURT_CASE_NUMB_X);                        //COBOL==> MOVE WS-231-WS231-COURT-CASE-NUMB-X TO E-COURT-CASE-NUMBER-0009-028.
            LS.E_STANDARD_NUMBER_0009_029.SetValue(WS.WS_248_WS248_STANDARD_NUMBER_X);                          //COBOL==> MOVE WS-248-WS248-STANDARD-NUMBER-X TO E-STANDARD-NUMBER-0009-029.
            LS.E_NUMBER_0010_030.SetValue(WS.WS_268_WS268_NUMBER_X);                                            //COBOL==> MOVE WS-268-WS268-NUMBER-X TO E-NUMBER-0010-030.
            LS.E_CODE_0011_031.SetValue(WS.WS_278_WS278_CODE_X);                                                //COBOL==> MOVE WS-278-WS278-CODE-X TO E-CODE-0011-031.
            if (!(WS.WS_288_WS288_EFFECTIVE_DATE_9.IsNumericValue()))                                          //COBOL==> IF WS-288-WS288-EFFECTIVE-DATE-9 NOT NUMERIC
            {
                DisplayToLog(" NON-NUMERIC DATA FOUND IN POSITION  288 ");                                          //COBOL==> DISPLAY ' NON-NUMERIC DATA FOUND IN POSITION  288 '
                WS.WS_288_WS288_EFFECTIVE_DATE_9.SetValueWithZeroes();                                              //COBOL==> MOVE ZERO TO WS-288-WS288-EFFECTIVE-DATE-9
                LS.E_PARM1_0015_036.SetValue("EN");                                                                 //COBOL==> MOVE 'EN' TO E-PARM1-0015-036
            }                                                                                                   //COBOL==> END-IF.
            LS.E_EFFECTIVE_DATE_0012_032.SetValue(WS.WS_288_WS288_EFFECTIVE_DATE_9);                            //COBOL==> MOVE WS-288-WS288-EFFECTIVE-DATE-9 TO E-EFFECTIVE-DATE-0012-032.
            LS.E_JUDICIAL_DISTRICT_0013_033.SetValue(WS.WS_296_WS296_JUDICIAL_DISTRI_X);                        //COBOL==> MOVE WS-296-WS296-JUDICIAL-DISTRI-X TO E-JUDICIAL-DISTRICT-0013-033.
            LS.E_NAME_0013_034.SetValue(WS.WS_301_WS301_NAME_X);                                                //COBOL==> MOVE WS-301-WS301-NAME-X TO E-NAME-0013-034.
            LS.E_COUNTY_DESCRIPTION_0014_035.SetValue(WS.WS_331_WS331_COUNTY_DESCRIPT_X);                       //COBOL==> MOVE WS-331-WS331-COUNTY-DESCRIPT-X TO E-COUNTY-DESCRIPTION-0014-035.
            if (LS.E_PARM1_0015_036.IsEqualTo("EN"))                                                            //COBOL==> IF E-PARM1-0015-036 = 'EN'
            {
                DisplayToLog(WS.WS_RECORD.AsString());                                                              //COBOL==> DISPLAY WS-RECORD
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_POPULATE_ATTRIBUTES") { M_POPULATE_ATTRIBUTES_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_POPULATE_ATTRIBUTES_EXIT
        /// </summary>
        private void M_POPULATE_ATTRIBUTES_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_POPULATE_ATTRIBUTES_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_POPULATE_ATTRIBUTES_EXIT") { M_CLOSE_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CLOSE_FILE
        /// </summary>
        private void M_CLOSE_FILE(string returnMethod = "")
        {
            FD.SEQ_FILE.CloseFile();                                                                            //COBOL==> CLOSE SEQ-FILE.
            if (!(WS.WS_FILE_STATUS.IsEqualTo("00")))                                                           //COBOL==> IF WS-FILE-STATUS NOT = '00'
            {
                LS.E_PARM1_0015_036.SetValue("EC");                                                                 //COBOL==> MOVE 'EC' TO E-PARM1-0015-036
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.E_PARM1_0015_036.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO E-PARM1-0015-036
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_CLOSE_FILE") { M_CLOSE_FILE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CLOSE_FILE_EXIT
        /// </summary>
        private void M_CLOSE_FILE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_CLOSE_FILE_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_CLOSE_FILE_EXIT") { M_INIT_LINKAGE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_INIT_LINKAGE
        /// </summary>
        private void M_INIT_LINKAGE(string returnMethod = "")
        {
            if ((LS.I_PARM1_0001_001XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_PARM1_0001_001XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-PARM1-0001-001XX = HIGH-VALUES OR I-PARM1-0001-001XX = LOW-VALUES
            {
                LS.I_PARM1_0001_001.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO I-PARM1-0001-001
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_PARM2_0001_002XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_PARM2_0001_002XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-PARM2-0001-002XX = HIGH-VALUES OR I-PARM2-0001-002XX = LOW-VALUES
            {
                LS.I_PARM2_0001_002.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO I-PARM2-0001-002
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_SUBREPORT_CODE_0001_003XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_SUBREPORT_CODE_0001_003XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-SUBREPORT-CODE-0001-003XX = HIGH-VALUES OR I-SUBREPORT-CODE-0001-003XX = LOW-VALUES
            {
                LS.I_SUBREPORT_CODE_0001_003.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO I-SUBREPORT-CODE-0001-003
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.E_DATE_0002_004.IsNumericValue()))                                                        //COBOL==> IF E-DATE-0002-004 IS NOT NUMERIC
            {
                LS.E_DATE_0002_004.SetValueWithZeroes();                                                            //COBOL==> MOVE ZEROS TO E-DATE-0002-004
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.E_SYSTEM_GENERATED_ID_0003_005.IsNumericValue()))                                         //COBOL==> IF E-SYSTEM-GENERATED-ID-0003-005 IS NOT NUMERIC
            {
                LS.E_SYSTEM_GENERATED_ID_0003_005.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO E-SYSTEM-GENERATED-ID-0003-005
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_USER_ID_0003_006XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_USER_ID_0003_006XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-USER-ID-0003-006XX = HIGH-VALUES OR E-USER-ID-0003-006XX = LOW-VALUES
            {
                LS.E_USER_ID_0003_006.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO E-USER-ID-0003-006
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_LAST_NAME_0003_007XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_LAST_NAME_0003_007XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-LAST-NAME-0003-007XX = HIGH-VALUES OR E-LAST-NAME-0003-007XX = LOW-VALUES
            {
                LS.E_LAST_NAME_0003_007.SetValueWithSpaces();                                                       //COBOL==> MOVE SPACES TO E-LAST-NAME-0003-007
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_FIRST_NAME_0003_008XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_FIRST_NAME_0003_008XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-FIRST-NAME-0003-008XX = HIGH-VALUES OR E-FIRST-NAME-0003-008XX = LOW-VALUES
            {
                LS.E_FIRST_NAME_0003_008.SetValueWithSpaces();                                                      //COBOL==> MOVE SPACES TO E-FIRST-NAME-0003-008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_MIDDLE_INITIAL_0003_009XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_MIDDLE_INITIAL_0003_009XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-MIDDLE-INITIAL-0003-009XX = HIGH-VALUES OR E-MIDDLE-INITIAL-0003-009XX = LOW-VALUES
            {
                LS.E_MIDDLE_INITIAL_0003_009.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO E-MIDDLE-INITIAL-0003-009
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_TEXT_1_0004_010XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_TEXT_1_0004_010XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-TEXT-1-0004-010XX = HIGH-VALUES OR E-TEXT-1-0004-010XX = LOW-VALUES
            {
                LS.E_TEXT_1_0004_010.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO E-TEXT-1-0004-010
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_PROGRAM_APPLIED_TO_000511XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_PROGRAM_APPLIED_TO_000511XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-PROGRAM-APPLIED-TO-000511XX = HIGH-VALUES OR E-PROGRAM-APPLIED-TO-000511XX = LOW-VALUES
            {
                LS.E_PROGRAM_APPLIED_TO_0005_011.SetValueWithSpaces();                                              //COBOL==> MOVE SPACES TO E-PROGRAM-APPLIED-TO-0005-011
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.E_AMOUNT_0005_012.IsNumericValue()))                                                      //COBOL==> IF E-AMOUNT-0005-012 IS NOT NUMERIC
            {
                LS.E_AMOUNT_0005_012.SetValueWithZeroes();                                                          //COBOL==> MOVE ZEROS TO E-AMOUNT-0005-012
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_APPLIED_TO_CODE_0005_013XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_APPLIED_TO_CODE_0005_013XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-APPLIED-TO-CODE-0005-013XX = HIGH-VALUES OR E-APPLIED-TO-CODE-0005-013XX = LOW-VALUES
            {
                LS.E_APPLIED_TO_CODE_0005_013.SetValueWithSpaces();                                                 //COBOL==> MOVE SPACES TO E-APPLIED-TO-CODE-0005-013
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.E_COLLECTION_DT_0005_014.IsNumericValue()))                                               //COBOL==> IF E-COLLECTION-DT-0005-014 IS NOT NUMERIC
            {
                LS.E_COLLECTION_DT_0005_014.SetValueWithZeroes();                                                   //COBOL==> MOVE ZEROS TO E-COLLECTION-DT-0005-014
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_ADJUSTED_IND_0005_015XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_ADJUSTED_IND_0005_015XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-ADJUSTED-IND-0005-015XX = HIGH-VALUES OR E-ADJUSTED-IND-0005-015XX = LOW-VALUES
            {
                LS.E_ADJUSTED_IND_0005_015.SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO E-ADJUSTED-IND-0005-015
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_TEXT_1_0006_016XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_TEXT_1_0006_016XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-TEXT-1-0006-016XX = HIGH-VALUES OR E-TEXT-1-0006-016XX = LOW-VALUES
            {
                LS.E_TEXT_1_0006_016.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO E-TEXT-1-0006-016
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_NUMBER_0007_017XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_NUMBER_0007_017XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-NUMBER-0007-017XX = HIGH-VALUES OR E-NUMBER-0007-017XX = LOW-VALUES
            {
                LS.E_NUMBER_0007_017.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO E-NUMBER-0007-017
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_FIRST_NAME_0007_018XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_FIRST_NAME_0007_018XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-FIRST-NAME-0007-018XX = HIGH-VALUES OR E-FIRST-NAME-0007-018XX = LOW-VALUES
            {
                LS.E_FIRST_NAME_0007_018.SetValueWithSpaces();                                                      //COBOL==> MOVE SPACES TO E-FIRST-NAME-0007-018
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_MIDDLE_INITIAL_0007_019XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_MIDDLE_INITIAL_0007_019XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-MIDDLE-INITIAL-0007-019XX = HIGH-VALUES OR E-MIDDLE-INITIAL-0007-019XX = LOW-VALUES
            {
                LS.E_MIDDLE_INITIAL_0007_019.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO E-MIDDLE-INITIAL-0007-019
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_FORMATTED_NAME_0007_020XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_FORMATTED_NAME_0007_020XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-FORMATTED-NAME-0007-020XX = HIGH-VALUES OR E-FORMATTED-NAME-0007-020XX = LOW-VALUES
            {
                LS.E_FORMATTED_NAME_0007_020.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO E-FORMATTED-NAME-0007-020
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_LAST_NAME_0007_021XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_LAST_NAME_0007_021XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-LAST-NAME-0007-021XX = HIGH-VALUES OR E-LAST-NAME-0007-021XX = LOW-VALUES
            {
                LS.E_LAST_NAME_0007_021.SetValueWithSpaces();                                                       //COBOL==> MOVE SPACES TO E-LAST-NAME-0007-021
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_NUMBER_0008_022XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_NUMBER_0008_022XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-NUMBER-0008-022XX = HIGH-VALUES OR E-NUMBER-0008-022XX = LOW-VALUES
            {
                LS.E_NUMBER_0008_022.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO E-NUMBER-0008-022
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_FIRST_NAME_0008_023XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_FIRST_NAME_0008_023XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-FIRST-NAME-0008-023XX = HIGH-VALUES OR E-FIRST-NAME-0008-023XX = LOW-VALUES
            {
                LS.E_FIRST_NAME_0008_023.SetValueWithSpaces();                                                      //COBOL==> MOVE SPACES TO E-FIRST-NAME-0008-023
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_MIDDLE_INITIAL_0008_024XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_MIDDLE_INITIAL_0008_024XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-MIDDLE-INITIAL-0008-024XX = HIGH-VALUES OR E-MIDDLE-INITIAL-0008-024XX = LOW-VALUES
            {
                LS.E_MIDDLE_INITIAL_0008_024.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO E-MIDDLE-INITIAL-0008-024
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_FORMATTED_NAME_0008_025XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_FORMATTED_NAME_0008_025XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-FORMATTED-NAME-0008-025XX = HIGH-VALUES OR E-FORMATTED-NAME-0008-025XX = LOW-VALUES
            {
                LS.E_FORMATTED_NAME_0008_025.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO E-FORMATTED-NAME-0008-025
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_LAST_NAME_0008_026XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_LAST_NAME_0008_026XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-LAST-NAME-0008-026XX = HIGH-VALUES OR E-LAST-NAME-0008-026XX = LOW-VALUES
            {
                LS.E_LAST_NAME_0008_026.SetValueWithSpaces();                                                       //COBOL==> MOVE SPACES TO E-LAST-NAME-0008-026
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.E_IDENTIFIER_0009_027.IsNumericValue()))                                                  //COBOL==> IF E-IDENTIFIER-0009-027 IS NOT NUMERIC
            {
                LS.E_IDENTIFIER_0009_027.SetValueWithZeroes();                                                      //COBOL==> MOVE ZEROS TO E-IDENTIFIER-0009-027
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_COURT_CASE_NUMBER_0009_028XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_COURT_CASE_NUMBER_0009_028XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-COURT-CASE-NUMBER-0009-028XX = HIGH-VALUES OR E-COURT-CASE-NUMBER-0009-028XX = LOW-VALUES
            {
                LS.E_COURT_CASE_NUMBER_0009_028.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO E-COURT-CASE-NUMBER-0009-028
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_STANDARD_NUMBER_0009_029XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_STANDARD_NUMBER_0009_029XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-STANDARD-NUMBER-0009-029XX = HIGH-VALUES OR E-STANDARD-NUMBER-0009-029XX = LOW-VALUES
            {
                LS.E_STANDARD_NUMBER_0009_029.SetValueWithSpaces();                                                 //COBOL==> MOVE SPACES TO E-STANDARD-NUMBER-0009-029
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_NUMBER_0010_030XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_NUMBER_0010_030XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-NUMBER-0010-030XX = HIGH-VALUES OR E-NUMBER-0010-030XX = LOW-VALUES
            {
                LS.E_NUMBER_0010_030.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO E-NUMBER-0010-030
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_CODE_0011_031XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_CODE_0011_031XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-CODE-0011-031XX = HIGH-VALUES OR E-CODE-0011-031XX = LOW-VALUES
            {
                LS.E_CODE_0011_031.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO E-CODE-0011-031
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.E_EFFECTIVE_DATE_0012_032.IsNumericValue()))                                              //COBOL==> IF E-EFFECTIVE-DATE-0012-032 IS NOT NUMERIC
            {
                LS.E_EFFECTIVE_DATE_0012_032.SetValueWithZeroes();                                                  //COBOL==> MOVE ZEROS TO E-EFFECTIVE-DATE-0012-032
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_JUDICIAL_DISTRICT_0013_033XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_JUDICIAL_DISTRICT_0013_033XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-JUDICIAL-DISTRICT-0013-033XX = HIGH-VALUES OR E-JUDICIAL-DISTRICT-0013-033XX = LOW-VALUES
            {
                LS.E_JUDICIAL_DISTRICT_0013_033.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO E-JUDICIAL-DISTRICT-0013-033
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_NAME_0013_034XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_NAME_0013_034XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-NAME-0013-034XX = HIGH-VALUES OR E-NAME-0013-034XX = LOW-VALUES
            {
                LS.E_NAME_0013_034.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO E-NAME-0013-034
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_COUNTY_DESCRIPTION_001435XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_COUNTY_DESCRIPTION_001435XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-COUNTY-DESCRIPTION-001435XX = HIGH-VALUES OR E-COUNTY-DESCRIPTION-001435XX = LOW-VALUES
            {
                LS.E_COUNTY_DESCRIPTION_0014_035.SetValueWithSpaces();                                              //COBOL==> MOVE SPACES TO E-COUNTY-DESCRIPTION-0014-035
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_PARM1_0015_036XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_PARM1_0015_036XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-PARM1-0015-036XX = HIGH-VALUES OR E-PARM1-0015-036XX = LOW-VALUES
            {
                LS.E_PARM1_0015_036.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO E-PARM1-0015-036
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_PARM2_0015_037XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_PARM2_0015_037XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-PARM2-0015-037XX = HIGH-VALUES OR E-PARM2-0015-037XX = LOW-VALUES
            {
                LS.E_PARM2_0015_037.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO E-PARM2-0015-037
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.E_SUBREPORT_CODE_0015_038XX.IsEqualTo(HIGH_VALUES))
             || (LS.E_SUBREPORT_CODE_0015_038XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF E-SUBREPORT-CODE-0015-038XX = HIGH-VALUES OR E-SUBREPORT-CODE-0015-038XX = LOW-VALUES
            {
                LS.E_SUBREPORT_CODE_0015_038.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO E-SUBREPORT-CODE-0015-038
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_INIT_LINKAGE") { M_INIT_LINKAGE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_INIT_LINKAGE_EXIT
        /// </summary>
        private void M_INIT_LINKAGE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_INIT_LINKAGE_EXIT") { return; }                                              //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_INIT_LINKAGE_EXIT") { M_NUMERIC_FORMATTER(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_NUMERIC_FORMATTER
        /// </summary>
        private void M_NUMERIC_FORMATTER(string returnMethod = "")
        {
            WS.EP_SIGN_USED.SetValue("N");                                                                      //COBOL==> MOVE 'N' TO EP-SIGN-USED.
            WS.EP_DOLLAR_USED.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO EP-DOLLAR-USED.
            WS.EP_DPOINT_USED.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO EP-DPOINT-USED.
            WS.EP_FIRST_DIGIT.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO EP-FIRST-DIGIT.
            WS.EP_ISTHERE_DCML.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO EP-ISTHERE-DCML.
            WS.EP_ISTHERE_V.SetValue("N");                                                                      //COBOL==> MOVE 'N' TO EP-ISTHERE-V.
            WS.EP_CURRENCY_COUNT.SetValueWithZeroes();                                                          //COBOL==> MOVE 0 TO EP-CURRENCY-COUNT.
            WS.EP_PRECISION.SetValueWithZeroes();                                                               //COBOL==> MOVE 0 TO EP-PRECISION.
            WS.EP_SCALE.SetValueWithZeroes();                                                                   //COBOL==> MOVE 0 TO EP-SCALE.
            WS.EP_SZNUMERIC.SetValueWithSpaces();                                                               //COBOL==> MOVE SPACES TO EP-SZNUMERIC.
            WS.EP_FORMATTED_VALUE.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO EP-FORMATTED-VALUE.
                                                                                                                //COMMENT:     CALCULATE PRECISION AND SCALE
            for (WS.EP_COUNT.SetValue(1); (!(WS.EP_COUNT.IsEqualTo(40))); WS.EP_COUNT.Add(1))                  //COBOL==> PERFORM VARYING EP-COUNT FROM 1 BY 1 UNTIL EP-COUNT = 40
            {
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("."))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("V")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '.' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = 'V'
                {
                    WS.EP_ISTHERE_DCML.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO EP-ISTHERE-DCML
                    WS.EP_ISTHERE_V.SetValue("Y");                                                                      //COBOL==> MOVE 'Y' TO EP-ISTHERE-V
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            for (WS.EP_COUNT.SetValue(WS.EP_EDIT_PATTERN_LEN); (!(WS.EP_COUNT.IsEqualTo(0))); WS.EP_COUNT.Add(-1))  //COBOL==> PERFORM VARYING EP-COUNT FROM EP-EDIT-PATTERN-LEN BY -1 UNTIL EP-COUNT = 0
            {
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("9"))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("Z")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '9' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = 'Z'
                {
                    if (WS.EP_ISTHERE_DCML.IsEqualTo("Y"))                                                              //COBOL==> IF EP-ISTHERE-DCML = 'Y'
                    {
                        WS.EP_SCALE.Add(1);                                                                                 //COBOL==> ADD 1 TO EP-SCALE
                        WS.EP_PRECISION.Add(1);                                                                             //COBOL==> ADD 1 TO EP-PRECISION
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_PRECISION.Add(1);                                                                             //COBOL==> ADD 1 TO EP-PRECISION
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if ((((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("-"))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("+")))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("*")))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("$")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '-' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = '+' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = '*' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = '$'
                {
                    if (WS.EP_ISTHERE_DCML.IsEqualTo("Y"))                                                              //COBOL==> IF EP-ISTHERE-DCML = 'Y'
                    {
                        WS.EP_PRECISION.Add(1);                                                                             //COBOL==> ADD 1 TO EP-PRECISION
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("."))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("V")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '.' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = 'V'
                {
                    WS.EP_ISTHERE_DCML.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO EP-ISTHERE-DCML
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
                                                                                                                //COMMENT:     GET THE SIGN, CONVERT INTEGER PART TO ABSOLUTE VALUE
            if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN EQUAL '-'
            {
                WS.EP_INTEGER2.SetComputeValue(WS.EP_INTEGER2.AsInt() * -1);                                        //COBOL==> COMPUTE EP-INTEGER2 = EP-INTEGER2 * -1
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_INTEGER.SetValue(WS.EP_INTEGER2);                                                             //COBOL==> MOVE EP-INTEGER2 TO EP-INTEGER.
                                                                                                                //COMMENT:     CONVERT TO STRING WITH INTEGER AND DECIMALS
            WS.EP_COUNT2.SetValueWithZeroes();                                                                  //COBOL==> MOVE 0 TO EP-COUNT2.
            for (WS.EP_COUNT.SetValue(1); (!(WS.EP_COUNT.IsEqualTo(20))); WS.EP_COUNT.Add(1))                  //COBOL==> PERFORM VARYING EP-COUNT FROM 1 BY 1 UNTIL EP-COUNT = 20
            {
                if (!(WS.EP_INTEGER_X[WS.EP_COUNT.AsInt()].IsSpaces()))                                             //COBOL==> IF EP-INTEGER-X ( EP-COUNT ) NOT EQUAL SPACE
                {
                    WS.EP_COUNT2.Add(1);                                                                                //COBOL==> ADD 1 TO EP-COUNT2
                    WS.EP_SZNUMERIC_X[WS.EP_COUNT2.AsInt()].SetValue(WS.EP_INTEGER_X[WS.EP_COUNT.AsInt()]);             //COBOL==> MOVE EP-INTEGER-X ( EP-COUNT ) TO EP-SZNUMERIC-X ( EP-COUNT2 )
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            if (WS.EP_SCALE.IsGreaterThan(0))                                                                   //COBOL==> IF EP-SCALE > 0 THEN
            {
                WS.EP_COUNT2.Add(1);                                                                                //COBOL==> ADD 1 TO EP-COUNT2
                WS.EP_SZNUMERIC_X[WS.EP_COUNT2.AsInt()].SetValue(".");                                              //COBOL==> MOVE '.' TO EP-SZNUMERIC-X ( EP-COUNT2 )
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:     STRIP OFF TRAILING ZERO'S IN DECIMAL PLACES
            WS.EP_STOP.SetValue("N");                                                                           //COBOL==> MOVE 'N' TO EP-STOP.
            for (WS.EP_COUNT.SetValue(18); (!(((WS.EP_COUNT.IsEqualTo(0)) || (WS.EP_STOP.IsEqualTo("Y"))) || (WS.EP_COUNT.IsEqualTo(WS.EP_SCALE)))); WS.EP_COUNT.Add(-1))  //COBOL==> PERFORM VARYING EP-COUNT FROM 18 BY -1 UNTIL EP-COUNT = 0 OR EP-STOP = 'Y' OR EP-COUNT = EP-SCALE
            {
                if ((WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()].IsEqualTo(0))
             || (WS.EP_ISTHERE_DCML.IsEqualTo("N")))  //COBOL==> IF EP-DECIMAL-X ( EP-COUNT ) EQUAL 0 OR EP-ISTHERE-DCML = 'N'
                {
                    WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()].SetValueWithSpaces();                                          //COBOL==> MOVE SPACE TO EP-DECIMAL-X ( EP-COUNT )
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.EP_STOP.SetValue("Y");                                                                           //COBOL==> MOVE 'Y' TO EP-STOP
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM
            for (WS.EP_COUNT.SetValue(1); (!(WS.EP_COUNT.IsEqualTo(19))); WS.EP_COUNT.Add(1))                  //COBOL==> PERFORM VARYING EP-COUNT FROM 1 BY 1 UNTIL EP-COUNT = 19
            {
                if (!(WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()].IsSpaces()))                                             //COBOL==> IF EP-DECIMAL-X ( EP-COUNT ) NOT EQUAL SPACE
                {
                    WS.EP_COUNT2.Add(1);                                                                                //COBOL==> ADD 1 TO EP-COUNT2
                    WS.EP_SZNUMERIC_X[WS.EP_COUNT2.AsInt()].SetValue(WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()]);             //COBOL==> MOVE EP-DECIMAL-X ( EP-COUNT ) TO EP-SZNUMERIC-X ( EP-COUNT2 )
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            WS.EP_SZNUMERIC_LEN.SetValue(WS.EP_COUNT2);                                                         //COBOL==> MOVE EP-COUNT2 TO EP-SZNUMERIC-LEN.
                                                                                                                //COMMENT:     SET INITIAL INDEX
            WS.EP_INP_INDEX.SetValue(WS.EP_SZNUMERIC_LEN);                                                      //COBOL==> MOVE EP-SZNUMERIC-LEN TO EP-INP-INDEX.
            WS.EP_OUT_INDEX.SetValue(WS.EP_EDIT_PATTERN_LEN);                                                   //COBOL==> MOVE EP-EDIT-PATTERN-LEN TO EP-OUT-INDEX.
            WS.EP_INDEX.SetValue(WS.EP_EDIT_PATTERN_LEN);                                                       //COBOL==> MOVE EP-EDIT-PATTERN-LEN TO EP-INDEX.
                                                                                                                //COMMENT:     START PARSING
            while (!(WS.EP_INDEX.IsEqualTo(0)))                                                                 //COBOL==> PERFORM UNTIL EP-INDEX = 0
            {
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("9"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '9'
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("0");                                     //COBOL==> MOVE '0' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("Z"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'Z'
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        if (WS.EP_INTEGER2.IsEqualTo(0))                                                                    //COBOL==> IF EP-INTEGER2 = 0
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("*"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '*'
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("*");                                     //COBOL==> MOVE '*' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_OUT_INDEX.AsInt()].IsEqualTo("$"))                                   //COBOL==> IF EP-EDIT-PATTERN-X ( EP-OUT-INDEX ) = '$'
                {
                    WS.EP_CURRENCY_COUNT.Add(1);                                                                        //COBOL==> ADD 1 TO EP-CURRENCY-COUNT
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if (WS.EP_DOLLAR_USED.IsEqualTo("N"))                                                               //COBOL==> IF EP-DOLLAR-USED = 'N'
                        {
                            WS.EP_DOLLAR_USED.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO EP-DOLLAR-USED
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("$");                                     //COBOL==> MOVE '$' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("/"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '/'
                {
                    WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("/");                                     //COBOL==> MOVE '/' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("0"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '0'
                {
                    WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("0");                                     //COBOL==> MOVE '0' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo(","))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = ','
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(",");                                     //COBOL==> MOVE ',' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((!(WS.EP_OUT_INDEX.IsEqualTo(1)))
             && (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("*")))  //COBOL==> IF EP-OUT-INDEX NOT = 1 AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = '*'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("*");                                     //COBOL==> MOVE '*' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if ((!(WS.EP_OUT_INDEX.IsEqualTo(1)))
             && (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("9")))  //COBOL==> IF EP-OUT-INDEX NOT = 1 AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = '9'
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(",");                                     //COBOL==> MOVE ',' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("."))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '.'
                {
                    if (WS.EP_DPOINT_USED.IsEqualTo("N"))                                                               //COBOL==> IF EP-DPOINT-USED = 'N'
                    {
                        if (WS.EP_INTEGER2.IsEqualTo(0))                                                                    //COBOL==> IF EP-INTEGER2 = 0
                        {
                            if ((WS.EP_OUT_INDEX.IsGreaterThan(1))
             && (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("Z")))  //COBOL==> IF EP-OUT-INDEX > 1 AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = 'Z'
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(".");                                     //COBOL==> MOVE '.' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_DPOINT_USED.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO EP-DPOINT-USED
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(".");                                     //COBOL==> MOVE '.' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            if (WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()].IsEqualTo("."))                                      //COBOL==> IF EP-SZNUMERIC-X ( EP-INP-INDEX ) = '.' THEN
                            {
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("-"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '-'
                {
                    if ((WS.EP_INTEGER2.IsEqualTo(0))
             && (!(WS.EP_SIGN.IsEqualTo("-"))))                //COBOL==> IF EP-INTEGER2 = 0 AND EP-SIGN NOT = '-'
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((WS.EP_SIGN_USED.IsEqualTo("N"))
             && ((WS.EP_INP_INDEX.IsLessThan(1))
             || ((WS.EP_FIRST_DIGIT.IsEqualTo("Y"))
             && (!(WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("-"))))))  //COBOL==> IF EP-SIGN-USED = 'N' AND ( EP-INP-INDEX LESS THAN 1 OR ( EP-FIRST-DIGIT = 'Y' AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) NOT = '-' ) )
                        {
                            WS.EP_SIGN_USED.SetValue("Y");                                                                      //COBOL==> MOVE 'Y' TO EP-SIGN-USED
                            if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SIGN);                              //COBOL==> MOVE EP-SIGN TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("+"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '+'
                {
                    if (WS.EP_INTEGER2.IsEqualTo(0))                                                                    //COBOL==> IF EP-INTEGER2 = 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((WS.EP_SIGN_USED.IsEqualTo("N"))
             && ((WS.EP_INP_INDEX.IsLessThan(1))
             || ((WS.EP_FIRST_DIGIT.IsEqualTo("Y"))
             && (!(WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("-"))))))  //COBOL==> IF EP-SIGN-USED = 'N' AND ( EP-INP-INDEX LESS THAN 1 OR ( EP-FIRST-DIGIT = 'Y' AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) NOT = '-' ) )
                        {
                            WS.EP_SIGN_USED.SetValue("Y");                                                                      //COBOL==> MOVE 'Y' TO EP-SIGN-USED
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SIGN);                              //COBOL==> MOVE EP-SIGN TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("C"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'C'
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() + 1)].IsEqualTo("R"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX + 1 ) = 'R'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("C");                                     //COBOL==> MOVE 'C' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("R"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'R'
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("C"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = 'C'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("R");                                     //COBOL==> MOVE 'R' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("D"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'D'
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() + 1)].IsEqualTo("B"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX + 1 ) = 'B'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("D");                                     //COBOL==> MOVE 'D' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("B"))
             && (WS.EP_OUT_INDEX.IsGreaterThan(1)))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'B' AND EP-OUT-INDEX > 1
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("D"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = 'D'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("B");                                     //COBOL==> MOVE 'B' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("V"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'V'
                {
                    WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.EP_OUT_INDEX.SetValue(WS.EP_OUT_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-OUT-INDEX
                }                                                                                                   //COBOL==> END-IF
                WS.EP_INDEX.SetValue(WS.EP_INDEX.AsInt() - 1);                                                      //COBOL==> SUBTRACT 1 FROM EP-INDEX
                WS.EP_FIRST_DIGIT.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO EP-FIRST-DIGIT
            }                                                                                                   //COBOL==> END-PERFORM.
                                                                                                                //COMMENT:     POST PROCESS TO ADJUST FLOATING CURRENCY SYMBOL
                                                                                                                //COMMENT:     INTO THOUSANDS SEPARATOR POSITION
            if (WS.EP_CURRENCY_COUNT.IsGreaterThan(1))                                                          //COBOL==> IF EP-CURRENCY-COUNT > 1 THEN
            {
                WS.EP_OUT_INDEX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO EP-OUT-INDEX
                WS.EP_INDEX.SetComputeValue(WS.EP_OUT_INDEX.AsDecimal() + 1m);                                      //COBOL==> COMPUTE EP-INDEX = EP-OUT-INDEX + 1
                while (!(WS.EP_INDEX.IsEqualTo(WS.EP_EDIT_PATTERN_LEN)))                                            //COBOL==> PERFORM UNTIL EP-INDEX = EP-EDIT-PATTERN-LEN
                {
                    if (((WS.EP_EDIT_PATTERN_X[WS.EP_OUT_INDEX.AsInt()].IsEqualTo("$"))
             && (WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].IsEqualTo("$")))
             && (WS.EP_FORMATTED_VALUE_X[WS.EP_INDEX.AsInt()].IsEqualTo(" ")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-OUT-INDEX ) = '$' AND EP-FORMATTED-VALUE-X ( EP-OUT-INDEX ) = '$' AND EP-FORMATTED-VALUE-X ( EP-INDEX ) = ' '
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_FORMATTED_VALUE_X[WS.EP_INDEX.AsInt()].SetValue("$");                                         //COBOL==> MOVE '$' TO EP-FORMATTED-VALUE-X ( EP-INDEX )
                        WS.EP_OUT_INDEX.SetValue(WS.EP_EDIT_PATTERN_LEN);                                                   //COBOL==> MOVE EP-EDIT-PATTERN-LEN TO EP-OUT-INDEX
                    }                                                                                                   //COBOL==> END-IF
                    WS.EP_OUT_INDEX.Add(1);                                                                             //COBOL==> ADD 1 TO EP-OUT-INDEX
                    WS.EP_INDEX.Add(1);                                                                                 //COBOL==> ADD 1 TO EP-INDEX
                }                                                                                                   //COBOL==> END-PERFORM
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_NUMERIC_FORMATTER") { M_NUMERIC_FORMATTER_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_NUMERIC_FORMATTER_EXIT
        /// </summary>
        private void M_NUMERIC_FORMATTER_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_NUMERIC_FORMATTER_EXIT") { return; }                                         //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
