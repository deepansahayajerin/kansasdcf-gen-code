#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:51:18 PM
   **        *   FROM COBOL PGM   :  SWEXIR12
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                              COOL:GEN
       COPYRIGHT 2002, COMPUTER ASSOCIATES INTERNATIONAL, INC.
       NAME: EAB_ALTS_READ_ALIAS              DATE: 2002/06/19
       TARGET OS:   MVS                       TIME: 08:31:35
       TARGET DBMS: DB2                       USER: SWSRVXM
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING NOT SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
         ACTIONS:  RECEIVE CSE-PERSON-NUMBER
                           NEXT-READLOGICAL-KEY.
                   READVALUE CLIENT-DBF USING
                           NEXT-READLOGICAL-KEY, IF NOT BLANK, OR
                           CSE-PERSON-NUMBER.
                   RETURN  UPTO 4 OCCURRANCES FOR
                                  CSE-PERSON-NUMBER
                           CLIENT-SURNAME
                           CLIENT-FIRST-NAME
                           CLIENT-MIDDLE-INITIAL
                           CLIENT-SOCIAL-SECURITY-NUMBER
                           CLIENT-DATE-OF-BIRTH
                           CLIENT-SEX
                           CLIENT-SYSTEM-PART-INDICATORS.
                                1 OCCURRANCE  OF
                           ABEND-FIELDS
                           NEXT-READLOGICAL-KEY, IF AT LEAST
                               1 MORE RECORD EXISTS FOR
                                  CSE-PERSON-NUMBER.
   **************************************************************
   ** MAINTENANCE *************************************************
                         CHANGE
      DATE      AUTHOR   CONTROL DESCRIPTION
    ---------- --------- ------- ----------------------------------
    04/04/2014 G.BRAMSON CQ35825 ADABAS TO DB2 KEES PHASE 3 CHANGES
    .......... ......... ....... KEEP ADABAS ERROR RESPONSE FIELDS.
    08/29/2017 RKM               ADDED WITH UR TO QUERIES
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Control.CICS;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXIR12_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXIR12_ws_WorkingStorage";
            internal const string ADIM1 = "ADIM1";
            internal const string ADIM2 = "ADIM2";
            internal const string ADIM3 = "ADIM3";
            internal const string OUTPUT_GROUP_ALIASES_0001FL = "OUTPUT_GROUP_ALIASES_0001FL";
            internal const string OUTPUT_GROUP_ALIASES_0001PS = "OUTPUT_GROUP_ALIASES_0001PS";
            internal const string OUTPUT_GROUP_ALIASES_0001RF = "OUTPUT_GROUP_ALIASES_0001RF";
            internal const string OUTPUT_GROUP_ALIASES_0001MM = "OUTPUT_GROUP_ALIASES_0001MM";
            internal const string ABEND_FIELDS = "ABEND_FIELDS";
            internal const string ABEND_TYPE = "ABEND_TYPE";
            internal const string ABEND_ADABAS = "ABEND_ADABAS";
            internal const string ADA_FILE_NUMBER = "ADA_FILE_NUMBER";
            internal const string ADA_FILE_ACTION = "ADA_FILE_ACTION";
            internal const string ADA_RESPONSE_CD = "ADA_RESPONSE_CD";
            internal const string ABEND_CICS = "ABEND_CICS";
            internal const string CICS_RESOURCE_NM = "CICS_RESOURCE_NM";
            internal const string CICS_FUNCTION_CD = "CICS_FUNCTION_CD";
            internal const string CICS_RESPONSE_CD = "CICS_RESPONSE_CD";
            internal const string OCCUR_MAX = "OCCUR_MAX";
            internal const string OCCUR_EXP = "OCCUR_EXP";
            internal const string I1 = "I1";
            internal const string I2 = "I2";
            internal const string ABS_TIME = "ABS_TIME";
            internal const string CUR_DATE = "CUR_DATE";
            internal const string CMP_DATE = "CMP_DATE";
            internal const string EXIT_READ = "EXIT_READ";
            internal const string EXIT_ACT = "EXIT_ACT";
            internal const string BASIC_DATA = "BASIC_DATA";
            internal const string BSC_ID = "BSC_ID";
            internal const string BSC_SSN = "BSC_SSN";
            internal const string BSC_NAME = "BSC_NAME";
            internal const string BSC_LAST_NAME = "BSC_LAST_NAME";
            internal const string BSC_FIRST_NAME = "BSC_FIRST_NAME";
            internal const string BSC_INITIAL = "BSC_INITIAL";
            internal const string BSC_DOB_SEX = "BSC_DOB_SEX";
            internal const string BSC_DOB = "BSC_DOB";
            internal const string BSC_SEX = "BSC_SEX";
            internal const string IMP_DATA = "IMP_DATA";
            internal const string IMP_CLIENT_NUMBER_X10 = "IMP_CLIENT_NUMBER_X10";
            internal const string IMP_CLIENT_NUMBER = "IMP_CLIENT_NUMBER";
            internal const string IMP_CLIENT_KEY = "IMP_CLIENT_KEY";
            internal const string KSC_CLIENT = "KSC_CLIENT";
            internal const string CUR_DATA = "CUR_DATA";
            internal const string CUR_ID = "CUR_ID";
            internal const string CUR_NAME = "CUR_NAME";
            internal const string CUR_LAST_NAME = "CUR_LAST_NAME";
            internal const string CUR_FIRST_NAME = "CUR_FIRST_NAME";
            internal const string CUR_INITIAL = "CUR_INITIAL";
            internal const string CUR_DOB_SEX = "CUR_DOB_SEX";
            internal const string CUR_DOB_X8 = "CUR_DOB_X8";
            internal const string CUR_DOB = "CUR_DOB";
            internal const string CUR_SEX = "CUR_SEX";
            internal const string CUR_SSN_X9 = "CUR_SSN_X9";
            internal const string CUR_SSN = "CUR_SSN";
            internal const string CUR_SYSTEM_PART = "CUR_SYSTEM_PART";
            internal const string CUR_VERIFIED_SSN_FLAG = "CUR_VERIFIED_SSN_FLAG";
            internal const string CUR_SYS_PART_AE = "CUR_SYS_PART_AE";
            internal const string CUR_SYS_PART_CSE = "CUR_SYS_PART_CSE";
            internal const string CUR_SYS_PART_KANPAY = "CUR_SYS_PART_KANPAY";
            internal const string CUR_SYS_PART_KSCARES = "CUR_SYS_PART_KSCARES";
            internal const string CUR_SYS_PART_FACTS = "CUR_SYS_PART_FACTS";
            internal const string CUR_ACTIVE = "CUR_ACTIVE";
            internal const string CUR_ACT_AE = "CUR_ACT_AE";
            internal const string CUR_ACT_CSE = "CUR_ACT_CSE";
            internal const string CUR_ACT_KANPAY = "CUR_ACT_KANPAY";
            internal const string CUR_ACT_KSCARES = "CUR_ACT_KSCARES";
            internal const string CUR_ACT_FACTS = "CUR_ACT_FACTS";
            internal const string CUR_KEY = "CUR_KEY";
            internal const string SW1_SWITCHES = "SW1_SWITCHES";
            internal const string SW1_EOF_SW = "SW1_EOF_SW";
            internal const string SW1_EOF_NO = "SW1_EOF_NO";
            internal const string SW1_EOF_YES = "SW1_EOF_YES";
            internal const string SW1_ERR_SW = "SW1_ERR_SW";
            internal const string SW1_ERR_NO = "SW1_ERR_NO";
            internal const string SW1_ERR_YES = "SW1_ERR_YES";
            internal const string DBK1_KEYS = "DBK1_KEYS";
            internal const string DBK1_CLIENT_NUMBER = "DBK1_CLIENT_NUMBER";
            internal const string DBK1_CLIENT_NAME = "DBK1_CLIENT_NAME";
            internal const string DBK1_SSN = "DBK1_SSN";
            internal const string DBK1_DATE_OF_BIRTH = "DBK1_DATE_OF_BIRTH";
            internal const string DBK1_GENDER = "DBK1_GENDER";
            internal const string DBK1_PHONETIC_DATA = "DBK1_PHONETIC_DATA";
            internal const string DBK1_COUNT = "DBK1_COUNT";
            internal const string DBK1_CCYYMMDD_X = "DBK1_CCYYMMDD_X";
            internal const string DBK1_CCYY = "DBK1_CCYY";
            internal const string DBK1_MM = "DBK1_MM";
            internal const string DBK1_DD = "DBK1_DD";
            internal const string DBK1_CCYYMMDD = "DBK1_CCYYMMDD";
            internal const string ADA4_ID_KEY = "ADA4_ID_KEY";
            internal const string ADA4_CLIENT_NUMBER = "ADA4_CLIENT_NUMBER";
            internal const string ADA4_CLIENT_NAME = "ADA4_CLIENT_NAME";
            internal const string ADA4_SSN = "ADA4_SSN";
            internal const string ADA4_DATE_OF_BIRTH = "ADA4_DATE_OF_BIRTH";
            internal const string ADA4_SEX = "ADA4_SEX";
            internal const string ADA4_CLIENT_POINTER21 = "ADA4_CLIENT_POINTER21";
            internal const string CL1_DCLKSD_CLIENT = "CL1_DCLKSD_CLIENT";
            internal const string CL1_SSN = "CL1_SSN";
            internal const string CL1_PREVIOUS_SSN = "CL1_PREVIOUS_SSN";
            internal const string CL1_PHONETIC_DATA = "CL1_PHONETIC_DATA";
            internal const string CL1_DT_OF_LAST_UPDATE = "CL1_DT_OF_LAST_UPDATE";
            internal const string CL1_DATE_OF_BIRTH = "CL1_DATE_OF_BIRTH";
            internal const string CL1_GENDER = "CL1_GENDER";
            internal const string CL1_VERIFIED_SSN_FLAG = "CL1_VERIFIED_SSN_FLAG";
            internal const string CL1_CLIENT_NAME = "CL1_CLIENT_NAME";
            internal const string CL1_CREATED_BY = "CL1_CREATED_BY";
            internal const string CL1_CREATED_TIMESTAMP = "CL1_CREATED_TIMESTAMP";
            internal const string CL1_LAST_MODIFIED_BY = "CL1_LAST_MODIFIED_BY";
            internal const string CL1_LAST_MODIFIED_TMST = "CL1_LAST_MODIFIED_TMST";
            internal const string CL1_FK_CLB_CLIENT_NO = "CL1_FK_CLB_CLIENT_NO";
            internal const string WS9_SYSTEM_CODES = "WS9_SYSTEM_CODES";
            internal const string WS9_SYSTEM_CODE_AE = "WS9_SYSTEM_CODE_AE";
            internal const string WS9_SYSTEM_CODE_CS = "WS9_SYSTEM_CODE_CS";
            internal const string WS9_SYSTEM_CODE_KA = "WS9_SYSTEM_CODE_KA";
            internal const string WS9_SYSTEM_CODE_KS = "WS9_SYSTEM_CODE_KS";
            internal const string WS9_SYSTEM_CODE_FA = "WS9_SYSTEM_CODE_FA";
            internal const string SW9_SWITCHES = "SW9_SWITCHES";
            internal const string SW9_EOF_SW = "SW9_EOF_SW";
            internal const string SW9_EOF_NOT_FOUND = "SW9_EOF_NOT_FOUND";
            internal const string SW9_EOF_NO = "SW9_EOF_NO";
            internal const string SW9_EOF_YES = "SW9_EOF_YES";
            internal const string SW9_ERR_SW = "SW9_ERR_SW";
            internal const string SW9_ERR_NO = "SW9_ERR_NO";
            internal const string SW9_ERR_YES = "SW9_ERR_YES";
            internal const string SW9_SELECT_CLIENT_SW = "SW9_SELECT_CLIENT_SW";
            internal const string SW9_SELECT_CLIENT_NO = "SW9_SELECT_CLIENT_NO";
            internal const string SW9_SELECT_CLIENT_YES = "SW9_SELECT_CLIENT_YES";
            internal const string WS9_CLIENT_POINTER = "WS9_CLIENT_POINTER";
            internal const string WS9_CLIENT_ID = "WS9_CLIENT_ID";
            internal const string WS9_VERIFIED_SSN_FLAG = "WS9_VERIFIED_SSN_FLAG";
            internal const string WS9_SYSTEM_PARTICIPATION = "WS9_SYSTEM_PARTICIPATION";
            internal const string WS9_SYS_PART_AE = "WS9_SYS_PART_AE";
            internal const string WS9_SYS_PART_CSE = "WS9_SYS_PART_CSE";
            internal const string WS9_SYS_PART_KANPAY = "WS9_SYS_PART_KANPAY";
            internal const string WS9_SYS_PART_KSCARES = "WS9_SYS_PART_KSCARES";
            internal const string WS9_SYS_PART_FACTS = "WS9_SYS_PART_FACTS";
            internal const string WS9_ABEND_FIELDS = "WS9_ABEND_FIELDS";
            internal const string WS9_ABEND_TYPE = "WS9_ABEND_TYPE";
            internal const string WS9_ABEND_TYPE_NONE = "WS9_ABEND_TYPE_NONE";
            internal const string WS9_ABEND_TYPE_ADABAS = "WS9_ABEND_TYPE_ADABAS";
            internal const string WS9_ABEND_TYPE_CICS = "WS9_ABEND_TYPE_CICS";
            internal const string WS9_ABEND_ADABAS = "WS9_ABEND_ADABAS";
            internal const string WS9_ADA_FILE_NUMBER = "WS9_ADA_FILE_NUMBER";
            internal const string WS9_ADA_FILE_ACTION = "WS9_ADA_FILE_ACTION";
            internal const string WS9_ADA_RESPONSE_CD = "WS9_ADA_RESPONSE_CD";
            internal const string WS9_ABEND_CICS = "WS9_ABEND_CICS";
            internal const string WS9_CICS_RESOURCE_NM = "WS9_CICS_RESOURCE_NM";
            internal const string WS9_CICS_FUNCTION_CD = "WS9_CICS_FUNCTION_CD";
            internal const string WS9_CICS_RESPONSE_CD = "WS9_CICS_RESPONSE_CD";
            internal const string WS9_MISC = "WS9_MISC";
            internal const string WS9_MSG_X = "WS9_MSG_X";
            internal const string WS9_MSG_PROG = "WS9_MSG_PROG";
            internal const string WS9_MSG_1 = "WS9_MSG_1";
            internal const string WS9_MSG = "WS9_MSG";
            internal const string WS9_MSG_CODE = "WS9_MSG_CODE";
            internal const string WS9_MSG_SQLCODE = "WS9_MSG_SQLCODE";
            internal const string WS9_MSG_2 = "WS9_MSG_2";
            internal const string WS9_MSG_FIELD = "WS9_MSG_FIELD";
            internal const string WS9_MSG_VALUE = "WS9_MSG_VALUE";
            internal const string WS9_DATE_ADA = "WS9_DATE_ADA";
            internal const string WS9_DATE_DB2 = "WS9_DATE_DB2";
            internal const string DBK9_KEYS = "DBK9_KEYS";
            internal const string DBK9_CLIENT_NUMBER = "DBK9_CLIENT_NUMBER";
            internal const string DBK9_CLIENT_NAME = "DBK9_CLIENT_NAME";
            internal const string DBK9_SSN = "DBK9_SSN";
            internal const string CLB9_DCLKSD_CLIENT_BASIC = "CLB9_DCLKSD_CLIENT_BASIC";
            internal const string CLB9_CLIENT_NUMBER = "CLB9_CLIENT_NUMBER";
            internal const string CLB9_CLIENT_GIVEN_NAME = "CLB9_CLIENT_GIVEN_NAME";
            internal const string CLB9_CLIENT_INITIALS = "CLB9_CLIENT_INITIALS";
            internal const string CLB9_CLIENT_SURNAME = "CLB9_CLIENT_SURNAME";
            internal const string CLB9_CIS_REPL_IND = "CLB9_CIS_REPL_IND";
            internal const string CLB9_WORK_PHONE = "CLB9_WORK_PHONE";
            internal const string CLB9_SSN = "CLB9_SSN";
            internal const string CLB9_GENDER = "CLB9_GENDER";
            internal const string CLB9_PARENT_RGHTS_SEV = "CLB9_PARENT_RGHTS_SEV";
            internal const string CLB9_PRNT_RGHTS_SEV_DT = "CLB9_PRNT_RGHTS_SEV_DT";
            internal const string CLB9_LEGAL_STATUS = "CLB9_LEGAL_STATUS";
            internal const string CLB9_INSURANCE_CODE = "CLB9_INSURANCE_CODE";
            internal const string CLB9_INITIAL_CUSTODY_DT = "CLB9_INITIAL_CUSTODY_DT";
            internal const string CLB9_HOME_PHONE = "CLB9_HOME_PHONE";
            internal const string CLB9_DATE_OF_BIRTH = "CLB9_DATE_OF_BIRTH";
            internal const string CLB9_CURR_PLACEMNT_DT = "CLB9_CURR_PLACEMNT_DT";
            internal const string CLB9_CURRENT_PLACEMENT = "CLB9_CURRENT_PLACEMENT";
            internal const string CLB9_CSEA_G_CAUSE_CODE = "CLB9_CSEA_G_CAUSE_CODE";
            internal const string CLB9_CSEA_G_CAUSE_CL_DT = "CLB9_CSEA_G_CAUSE_CL_DT";
            internal const string CLB9_CSEA_COOP_CODE = "CLB9_CSEA_COOP_CODE";
            internal const string CLB9_COUNTY_CRT_COMMIT = "CLB9_COUNTY_CRT_COMMIT";
            internal const string CLB9_MONTHS_ASST_AF = "CLB9_MONTHS_ASST_AF";
            internal const string CLB9_MONTHS_ASST_GA = "CLB9_MONTHS_ASST_GA";
            internal const string CLB9_MO_DEATH_DT = "CLB9_MO_DEATH_DT";
            internal const string CLB9_MO_PRT_DT = "CLB9_MO_PRT_DT";
            internal const string CLB9_FA_DEATH_DT = "CLB9_FA_DEATH_DT";
            internal const string CLB9_FA_PRT_DT = "CLB9_FA_PRT_DT";
            internal const string CLB9_MPI_ID = "CLB9_MPI_ID";
            internal const string CLB9_MED_COVERAGE_IND = "CLB9_MED_COVERAGE_IND";
            internal const string CLB9_INSURANCE_CARRIER = "CLB9_INSURANCE_CARRIER";
            internal const string CLB9_INSURANCE_POLCY_NO = "CLB9_INSURANCE_POLCY_NO";
            internal const string CLB9_SPOKEN_LANGUAGE = "CLB9_SPOKEN_LANGUAGE";
            internal const string CLB9_WRITTEN_LANGUAGE = "CLB9_WRITTEN_LANGUAGE";
            internal const string CLB9_STATE_OF_BIRTH = "CLB9_STATE_OF_BIRTH";
            internal const string CLB9_SCHOOL_DISTRICT = "CLB9_SCHOOL_DISTRICT";
            internal const string CLB9_ETHNIC_CLASS = "CLB9_ETHNIC_CLASS";
            internal const string CLB9_SUFFIX_NAME = "CLB9_SUFFIX_NAME";
            internal const string CLB9_EMPLOYER_NAME = "CLB9_EMPLOYER_NAME";
            internal const string CLB9_EARNED_INCOME_AMT = "CLB9_EARNED_INCOME_AMT";
            internal const string CLB9_INCOME_FREQUENCY = "CLB9_INCOME_FREQUENCY";
            internal const string CLB9_KEES_ABMS_ID = "CLB9_KEES_ABMS_ID";
            internal const string CLB9_EMAIL_ADDRESS = "CLB9_EMAIL_ADDRESS";
            internal const string CLB9_EMAIL_ADDRESS_LEN = "CLB9_EMAIL_ADDRESS_LEN";
            internal const string CLB9_EMAIL_ADDRESS_TEXT = "CLB9_EMAIL_ADDRESS_TEXT";
            internal const string CLB9_OCCUPATION = "CLB9_OCCUPATION";
            internal const string CLB9_OCCUPATION_LEN = "CLB9_OCCUPATION_LEN";
            internal const string CLB9_OCCUPATION_TEXT = "CLB9_OCCUPATION_TEXT";
            internal const string CLB9_CREATED_BY = "CLB9_CREATED_BY";
            internal const string CLB9_CREATED_TIMESTAMP = "CLB9_CREATED_TIMESTAMP";
            internal const string CLB9_LAST_MODIFIED_BY = "CLB9_LAST_MODIFIED_BY";
            internal const string CLB9_LAST_MODIFIED_TMST = "CLB9_LAST_MODIFIED_TMST";
            internal const string CL9_DCLKSD_CLIENT = "CL9_DCLKSD_CLIENT";
            internal const string CL9_SSN = "CL9_SSN";
            internal const string CL9_PREVIOUS_SSN = "CL9_PREVIOUS_SSN";
            internal const string CL9_PHONETIC_DATA = "CL9_PHONETIC_DATA";
            internal const string CL9_DT_OF_LAST_UPDATE = "CL9_DT_OF_LAST_UPDATE";
            internal const string CL9_DATE_OF_BIRTH = "CL9_DATE_OF_BIRTH";
            internal const string CL9_GENDER = "CL9_GENDER";
            internal const string CL9_VERIFIED_SSN_FLAG = "CL9_VERIFIED_SSN_FLAG";
            internal const string CL9_CLIENT_NAME = "CL9_CLIENT_NAME";
            internal const string CL9_CREATED_BY = "CL9_CREATED_BY";
            internal const string CL9_CREATED_TIMESTAMP = "CL9_CREATED_TIMESTAMP";
            internal const string CL9_LAST_MODIFIED_BY = "CL9_LAST_MODIFIED_BY";
            internal const string CL9_LAST_MODIFIED_TMST = "CL9_LAST_MODIFIED_TMST";
            internal const string CL9_FK_CLB_CLIENT_NO = "CL9_FK_CLB_CLIENT_NO";
            internal const string SP9_DCLKSD_SYSTEM_PART = "SP9_DCLKSD_SYSTEM_PART";
            internal const string SP9_SYSTEM_CODE = "SP9_SYSTEM_CODE";
            internal const string SP9_PARTICIPATION_FLAG = "SP9_PARTICIPATION_FLAG";
            internal const string SP9_CREATED_TIMESTAMP = "SP9_CREATED_TIMESTAMP";
            internal const string SP9_CREATED_BY = "SP9_CREATED_BY";
            internal const string SP9_LAST_MODIFIED_BY = "SP9_LAST_MODIFIED_BY";
            internal const string SP9_LAST_MODIFIED_TMST = "SP9_LAST_MODIFIED_TMST";
            internal const string SP9_FK_CLB_CLIENT_NO = "SP9_FK_CLB_CLIENT_NO";
            internal const string SP9_FK_CLI_CLIENT_NAME = "SP9_FK_CLI_CLIENT_NAME";
            internal const string SP9_FK_CLI_SSN = "SP9_FK_CLI_SSN";
        }
        #endregion

        #region Direct-access element properties
        public IField ADIM1 { get { return GetElementByName<IField>(Names.ADIM1); } }
        public IField ADIM2 { get { return GetElementByName<IField>(Names.ADIM2); } }
        public IField ADIM3 { get { return GetElementByName<IField>(Names.ADIM3); } }
        public IField OUTPUT_GROUP_ALIASES_0001FL { get { return GetElementByName<IField>(Names.OUTPUT_GROUP_ALIASES_0001FL); } }
        public IField OUTPUT_GROUP_ALIASES_0001PS { get { return GetElementByName<IField>(Names.OUTPUT_GROUP_ALIASES_0001PS); } }
        public IField OUTPUT_GROUP_ALIASES_0001RF { get { return GetElementByName<IField>(Names.OUTPUT_GROUP_ALIASES_0001RF); } }
        public IField OUTPUT_GROUP_ALIASES_0001MM { get { return GetElementByName<IField>(Names.OUTPUT_GROUP_ALIASES_0001MM); } }
        public IGroup ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.ABEND_FIELDS); } }
        public IField ABEND_TYPE { get { return GetElementByName<IField>(Names.ABEND_TYPE); } }
        public IGroup ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.ABEND_ADABAS); } }
        public IField ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.ADA_FILE_NUMBER); } }
        public IField ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.ADA_FILE_ACTION); } }
        public IField ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.ADA_RESPONSE_CD); } }
        public IGroup ABEND_CICS { get { return GetElementByName<IGroup>(Names.ABEND_CICS); } }
        public IField CICS_RESOURCE_NM { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM); } }
        public IField CICS_FUNCTION_CD { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD); } }
        public IField CICS_RESPONSE_CD { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD); } }
        public IField OCCUR_MAX { get { return GetElementByName<IField>(Names.OCCUR_MAX); } }
        public IField OCCUR_EXP { get { return GetElementByName<IField>(Names.OCCUR_EXP); } }
        public IField I1 { get { return GetElementByName<IField>(Names.I1); } }
        public IField I2 { get { return GetElementByName<IField>(Names.I2); } }
        public IField ABS_TIME { get { return GetElementByName<IField>(Names.ABS_TIME); } }
        public IField CUR_DATE { get { return GetElementByName<IField>(Names.CUR_DATE); } }
        public IField CMP_DATE { get { return GetElementByName<IField>(Names.CMP_DATE); } }
        public IField EXIT_READ { get { return GetElementByName<IField>(Names.EXIT_READ); } }
        public IField EXIT_ACT { get { return GetElementByName<IField>(Names.EXIT_ACT); } }
        public IGroup BASIC_DATA { get { return GetElementByName<IGroup>(Names.BASIC_DATA); } }
        public IField BSC_ID { get { return GetElementByName<IField>(Names.BSC_ID); } }
        public IField BSC_SSN { get { return GetElementByName<IField>(Names.BSC_SSN); } }
        public IGroup BSC_NAME { get { return GetElementByName<IGroup>(Names.BSC_NAME); } }
        public IField BSC_LAST_NAME { get { return GetElementByName<IField>(Names.BSC_LAST_NAME); } }
        public IField BSC_FIRST_NAME { get { return GetElementByName<IField>(Names.BSC_FIRST_NAME); } }
        public IField BSC_INITIAL { get { return GetElementByName<IField>(Names.BSC_INITIAL); } }
        public IGroup BSC_DOB_SEX { get { return GetElementByName<IGroup>(Names.BSC_DOB_SEX); } }
        public IField BSC_DOB { get { return GetElementByName<IField>(Names.BSC_DOB); } }
        public IField BSC_SEX { get { return GetElementByName<IField>(Names.BSC_SEX); } }
        public IGroup IMP_DATA { get { return GetElementByName<IGroup>(Names.IMP_DATA); } }
        public IGroup IMP_CLIENT_NUMBER_X10 { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_NUMBER_X10); } }
        public IField IMP_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.IMP_CLIENT_NUMBER); } }
        public IField IMP_CLIENT_KEY { get { return GetElementByName<IField>(Names.IMP_CLIENT_KEY); } }
        public IField KSC_CLIENT { get { return GetElementByName<IField>(Names.KSC_CLIENT); } }
        public IGroup CUR_DATA { get { return GetElementByName<IGroup>(Names.CUR_DATA); } }
        public IField CUR_ID { get { return GetElementByName<IField>(Names.CUR_ID); } }
        public IGroup CUR_NAME { get { return GetElementByName<IGroup>(Names.CUR_NAME); } }
        public IField CUR_LAST_NAME { get { return GetElementByName<IField>(Names.CUR_LAST_NAME); } }
        public IField CUR_FIRST_NAME { get { return GetElementByName<IField>(Names.CUR_FIRST_NAME); } }
        public IField CUR_INITIAL { get { return GetElementByName<IField>(Names.CUR_INITIAL); } }
        public IGroup CUR_DOB_SEX { get { return GetElementByName<IGroup>(Names.CUR_DOB_SEX); } }
        public IGroup CUR_DOB_X8 { get { return GetElementByName<IGroup>(Names.CUR_DOB_X8); } }
        public IField CUR_DOB { get { return GetElementByName<IField>(Names.CUR_DOB); } }
        public IField CUR_SEX { get { return GetElementByName<IField>(Names.CUR_SEX); } }
        public IGroup CUR_SSN_X9 { get { return GetElementByName<IGroup>(Names.CUR_SSN_X9); } }
        public IField CUR_SSN { get { return GetElementByName<IField>(Names.CUR_SSN); } }
        public IGroup CUR_SYSTEM_PART { get { return GetElementByName<IGroup>(Names.CUR_SYSTEM_PART); } }
        public IField CUR_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CUR_VERIFIED_SSN_FLAG); } }
        public IField CUR_SYS_PART_AE { get { return GetElementByName<IField>(Names.CUR_SYS_PART_AE); } }
        public IField CUR_SYS_PART_CSE { get { return GetElementByName<IField>(Names.CUR_SYS_PART_CSE); } }
        public IField CUR_SYS_PART_KANPAY { get { return GetElementByName<IField>(Names.CUR_SYS_PART_KANPAY); } }
        public IField CUR_SYS_PART_KSCARES { get { return GetElementByName<IField>(Names.CUR_SYS_PART_KSCARES); } }
        public IField CUR_SYS_PART_FACTS { get { return GetElementByName<IField>(Names.CUR_SYS_PART_FACTS); } }
        public IGroup CUR_ACTIVE { get { return GetElementByName<IGroup>(Names.CUR_ACTIVE); } }
        public IField CUR_ACT_AE { get { return GetElementByName<IField>(Names.CUR_ACT_AE); } }
        public IField CUR_ACT_CSE { get { return GetElementByName<IField>(Names.CUR_ACT_CSE); } }
        public IField CUR_ACT_KANPAY { get { return GetElementByName<IField>(Names.CUR_ACT_KANPAY); } }
        public IField CUR_ACT_KSCARES { get { return GetElementByName<IField>(Names.CUR_ACT_KSCARES); } }
        public IField CUR_ACT_FACTS { get { return GetElementByName<IField>(Names.CUR_ACT_FACTS); } }
        public IField CUR_KEY { get { return GetElementByName<IField>(Names.CUR_KEY); } }
        public IGroup SW1_SWITCHES { get { return GetElementByName<IGroup>(Names.SW1_SWITCHES); } }
        public IField SW1_EOF_SW { get { return GetElementByName<IField>(Names.SW1_EOF_SW); } }
        public ICheckField SW1_EOF_NO { get { return GetElementByName<ICheckField>(Names.SW1_EOF_NO); } }
        public ICheckField SW1_EOF_YES { get { return GetElementByName<ICheckField>(Names.SW1_EOF_YES); } }
        public IField SW1_ERR_SW { get { return GetElementByName<IField>(Names.SW1_ERR_SW); } }
        public ICheckField SW1_ERR_NO { get { return GetElementByName<ICheckField>(Names.SW1_ERR_NO); } }
        public ICheckField SW1_ERR_YES { get { return GetElementByName<ICheckField>(Names.SW1_ERR_YES); } }
        public IGroup DBK1_KEYS { get { return GetElementByName<IGroup>(Names.DBK1_KEYS); } }
        public IField DBK1_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.DBK1_CLIENT_NUMBER); } }
        public IField DBK1_CLIENT_NAME { get { return GetElementByName<IField>(Names.DBK1_CLIENT_NAME); } }
        public IField DBK1_SSN { get { return GetElementByName<IField>(Names.DBK1_SSN); } }
        public IField DBK1_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.DBK1_DATE_OF_BIRTH); } }
        public IField DBK1_GENDER { get { return GetElementByName<IField>(Names.DBK1_GENDER); } }
        public IField DBK1_PHONETIC_DATA { get { return GetElementByName<IField>(Names.DBK1_PHONETIC_DATA); } }
        public IField DBK1_COUNT { get { return GetElementByName<IField>(Names.DBK1_COUNT); } }
        public IGroup DBK1_CCYYMMDD_X { get { return GetElementByName<IGroup>(Names.DBK1_CCYYMMDD_X); } }
        public IField DBK1_CCYY { get { return GetElementByName<IField>(Names.DBK1_CCYY); } }
        public IField DBK1_MM { get { return GetElementByName<IField>(Names.DBK1_MM); } }
        public IField DBK1_DD { get { return GetElementByName<IField>(Names.DBK1_DD); } }
        public IField DBK1_CCYYMMDD { get { return GetElementByName<IField>(Names.DBK1_CCYYMMDD); } }
        public IGroup ADA4_ID_KEY { get { return GetElementByName<IGroup>(Names.ADA4_ID_KEY); } }
        public IField ADA4_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.ADA4_CLIENT_NUMBER); } }
        public IField ADA4_CLIENT_NAME { get { return GetElementByName<IField>(Names.ADA4_CLIENT_NAME); } }
        public IField ADA4_SSN { get { return GetElementByName<IField>(Names.ADA4_SSN); } }
        public IField ADA4_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.ADA4_DATE_OF_BIRTH); } }
        public IField ADA4_SEX { get { return GetElementByName<IField>(Names.ADA4_SEX); } }
        public IField ADA4_CLIENT_POINTER21 { get { return GetElementByName<IField>(Names.ADA4_CLIENT_POINTER21); } }
        public IGroup CL1_DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.CL1_DCLKSD_CLIENT); } }
        public IField CL1_SSN { get { return GetElementByName<IField>(Names.CL1_SSN); } }
        public IField CL1_PREVIOUS_SSN { get { return GetElementByName<IField>(Names.CL1_PREVIOUS_SSN); } }
        public IField CL1_PHONETIC_DATA { get { return GetElementByName<IField>(Names.CL1_PHONETIC_DATA); } }
        public IField CL1_DT_OF_LAST_UPDATE { get { return GetElementByName<IField>(Names.CL1_DT_OF_LAST_UPDATE); } }
        public IField CL1_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CL1_DATE_OF_BIRTH); } }
        public IField CL1_GENDER { get { return GetElementByName<IField>(Names.CL1_GENDER); } }
        public IField CL1_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CL1_VERIFIED_SSN_FLAG); } }
        public IField CL1_CLIENT_NAME { get { return GetElementByName<IField>(Names.CL1_CLIENT_NAME); } }
        public IField CL1_CREATED_BY { get { return GetElementByName<IField>(Names.CL1_CREATED_BY); } }
        public IField CL1_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CL1_CREATED_TIMESTAMP); } }
        public IField CL1_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CL1_LAST_MODIFIED_BY); } }
        public IField CL1_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CL1_LAST_MODIFIED_TMST); } }
        public IField CL1_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CL1_FK_CLB_CLIENT_NO); } }
        public IGroup WS9_SYSTEM_CODES { get { return GetElementByName<IGroup>(Names.WS9_SYSTEM_CODES); } }
        public IField WS9_SYSTEM_CODE_AE { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_AE); } }
        public IField WS9_SYSTEM_CODE_CS { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_CS); } }
        public IField WS9_SYSTEM_CODE_KA { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_KA); } }
        public IField WS9_SYSTEM_CODE_KS { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_KS); } }
        public IField WS9_SYSTEM_CODE_FA { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_FA); } }
        public IGroup SW9_SWITCHES { get { return GetElementByName<IGroup>(Names.SW9_SWITCHES); } }
        public IField SW9_EOF_SW { get { return GetElementByName<IField>(Names.SW9_EOF_SW); } }
        public ICheckField SW9_EOF_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.SW9_EOF_NOT_FOUND); } }
        public ICheckField SW9_EOF_NO { get { return GetElementByName<ICheckField>(Names.SW9_EOF_NO); } }
        public ICheckField SW9_EOF_YES { get { return GetElementByName<ICheckField>(Names.SW9_EOF_YES); } }
        public IField SW9_ERR_SW { get { return GetElementByName<IField>(Names.SW9_ERR_SW); } }
        public ICheckField SW9_ERR_NO { get { return GetElementByName<ICheckField>(Names.SW9_ERR_NO); } }
        public ICheckField SW9_ERR_YES { get { return GetElementByName<ICheckField>(Names.SW9_ERR_YES); } }
        public IField SW9_SELECT_CLIENT_SW { get { return GetElementByName<IField>(Names.SW9_SELECT_CLIENT_SW); } }
        public ICheckField SW9_SELECT_CLIENT_NO { get { return GetElementByName<ICheckField>(Names.SW9_SELECT_CLIENT_NO); } }
        public ICheckField SW9_SELECT_CLIENT_YES { get { return GetElementByName<ICheckField>(Names.SW9_SELECT_CLIENT_YES); } }
        public IGroup WS9_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.WS9_CLIENT_POINTER); } }
        public IField WS9_CLIENT_ID { get { return GetElementByName<IField>(Names.WS9_CLIENT_ID); } }
        public IField WS9_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.WS9_VERIFIED_SSN_FLAG); } }
        public IGroup WS9_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.WS9_SYSTEM_PARTICIPATION); } }
        public IField WS9_SYS_PART_AE { get { return GetElementByName<IField>(Names.WS9_SYS_PART_AE); } }
        public IField WS9_SYS_PART_CSE { get { return GetElementByName<IField>(Names.WS9_SYS_PART_CSE); } }
        public IField WS9_SYS_PART_KANPAY { get { return GetElementByName<IField>(Names.WS9_SYS_PART_KANPAY); } }
        public IField WS9_SYS_PART_KSCARES { get { return GetElementByName<IField>(Names.WS9_SYS_PART_KSCARES); } }
        public IField WS9_SYS_PART_FACTS { get { return GetElementByName<IField>(Names.WS9_SYS_PART_FACTS); } }
        public IGroup WS9_ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.WS9_ABEND_FIELDS); } }
        public IField WS9_ABEND_TYPE { get { return GetElementByName<IField>(Names.WS9_ABEND_TYPE); } }
        public ICheckField WS9_ABEND_TYPE_NONE { get { return GetElementByName<ICheckField>(Names.WS9_ABEND_TYPE_NONE); } }
        public ICheckField WS9_ABEND_TYPE_ADABAS { get { return GetElementByName<ICheckField>(Names.WS9_ABEND_TYPE_ADABAS); } }
        public ICheckField WS9_ABEND_TYPE_CICS { get { return GetElementByName<ICheckField>(Names.WS9_ABEND_TYPE_CICS); } }
        public IGroup WS9_ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.WS9_ABEND_ADABAS); } }
        public IField WS9_ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.WS9_ADA_FILE_NUMBER); } }
        public IField WS9_ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.WS9_ADA_FILE_ACTION); } }
        public IField WS9_ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.WS9_ADA_RESPONSE_CD); } }
        public IGroup WS9_ABEND_CICS { get { return GetElementByName<IGroup>(Names.WS9_ABEND_CICS); } }
        public IField WS9_CICS_RESOURCE_NM { get { return GetElementByName<IField>(Names.WS9_CICS_RESOURCE_NM); } }
        public IField WS9_CICS_FUNCTION_CD { get { return GetElementByName<IField>(Names.WS9_CICS_FUNCTION_CD); } }
        public IField WS9_CICS_RESPONSE_CD { get { return GetElementByName<IField>(Names.WS9_CICS_RESPONSE_CD); } }
        public IGroup WS9_MISC { get { return GetElementByName<IGroup>(Names.WS9_MISC); } }
        public IGroup WS9_MSG_X { get { return GetElementByName<IGroup>(Names.WS9_MSG_X); } }
        public IField WS9_MSG_PROG { get { return GetElementByName<IField>(Names.WS9_MSG_PROG); } }
        public IGroup WS9_MSG_1 { get { return GetElementByName<IGroup>(Names.WS9_MSG_1); } }
        public IField WS9_MSG { get { return GetElementByName<IField>(Names.WS9_MSG); } }
        public IGroup WS9_MSG_CODE { get { return GetElementByName<IGroup>(Names.WS9_MSG_CODE); } }
        public IField WS9_MSG_SQLCODE { get { return GetElementByName<IField>(Names.WS9_MSG_SQLCODE); } }
        public IGroup WS9_MSG_2 { get { return GetElementByName<IGroup>(Names.WS9_MSG_2); } }
        public IField WS9_MSG_FIELD { get { return GetElementByName<IField>(Names.WS9_MSG_FIELD); } }
        public IField WS9_MSG_VALUE { get { return GetElementByName<IField>(Names.WS9_MSG_VALUE); } }
        public IField WS9_DATE_ADA { get { return GetElementByName<IField>(Names.WS9_DATE_ADA); } }
        public IField WS9_DATE_DB2 { get { return GetElementByName<IField>(Names.WS9_DATE_DB2); } }
        public IGroup DBK9_KEYS { get { return GetElementByName<IGroup>(Names.DBK9_KEYS); } }
        public IField DBK9_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.DBK9_CLIENT_NUMBER); } }
        public IField DBK9_CLIENT_NAME { get { return GetElementByName<IField>(Names.DBK9_CLIENT_NAME); } }
        public IField DBK9_SSN { get { return GetElementByName<IField>(Names.DBK9_SSN); } }
        public IGroup CLB9_DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.CLB9_DCLKSD_CLIENT_BASIC); } }
        public IField CLB9_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLB9_CLIENT_NUMBER); } }
        public IField CLB9_CLIENT_GIVEN_NAME { get { return GetElementByName<IField>(Names.CLB9_CLIENT_GIVEN_NAME); } }
        public IField CLB9_CLIENT_INITIALS { get { return GetElementByName<IField>(Names.CLB9_CLIENT_INITIALS); } }
        public IField CLB9_CLIENT_SURNAME { get { return GetElementByName<IField>(Names.CLB9_CLIENT_SURNAME); } }
        public IField CLB9_CIS_REPL_IND { get { return GetElementByName<IField>(Names.CLB9_CIS_REPL_IND); } }
        public IField CLB9_WORK_PHONE { get { return GetElementByName<IField>(Names.CLB9_WORK_PHONE); } }
        public IField CLB9_SSN { get { return GetElementByName<IField>(Names.CLB9_SSN); } }
        public IField CLB9_GENDER { get { return GetElementByName<IField>(Names.CLB9_GENDER); } }
        public IField CLB9_PARENT_RGHTS_SEV { get { return GetElementByName<IField>(Names.CLB9_PARENT_RGHTS_SEV); } }
        public IField CLB9_PRNT_RGHTS_SEV_DT { get { return GetElementByName<IField>(Names.CLB9_PRNT_RGHTS_SEV_DT); } }
        public IField CLB9_LEGAL_STATUS { get { return GetElementByName<IField>(Names.CLB9_LEGAL_STATUS); } }
        public IField CLB9_INSURANCE_CODE { get { return GetElementByName<IField>(Names.CLB9_INSURANCE_CODE); } }
        public IField CLB9_INITIAL_CUSTODY_DT { get { return GetElementByName<IField>(Names.CLB9_INITIAL_CUSTODY_DT); } }
        public IField CLB9_HOME_PHONE { get { return GetElementByName<IField>(Names.CLB9_HOME_PHONE); } }
        public IField CLB9_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLB9_DATE_OF_BIRTH); } }
        public IField CLB9_CURR_PLACEMNT_DT { get { return GetElementByName<IField>(Names.CLB9_CURR_PLACEMNT_DT); } }
        public IField CLB9_CURRENT_PLACEMENT { get { return GetElementByName<IField>(Names.CLB9_CURRENT_PLACEMENT); } }
        public IField CLB9_CSEA_G_CAUSE_CODE { get { return GetElementByName<IField>(Names.CLB9_CSEA_G_CAUSE_CODE); } }
        public IField CLB9_CSEA_G_CAUSE_CL_DT { get { return GetElementByName<IField>(Names.CLB9_CSEA_G_CAUSE_CL_DT); } }
        public IField CLB9_CSEA_COOP_CODE { get { return GetElementByName<IField>(Names.CLB9_CSEA_COOP_CODE); } }
        public IField CLB9_COUNTY_CRT_COMMIT { get { return GetElementByName<IField>(Names.CLB9_COUNTY_CRT_COMMIT); } }
        public IField CLB9_MONTHS_ASST_AF { get { return GetElementByName<IField>(Names.CLB9_MONTHS_ASST_AF); } }
        public IField CLB9_MONTHS_ASST_GA { get { return GetElementByName<IField>(Names.CLB9_MONTHS_ASST_GA); } }
        public IField CLB9_MO_DEATH_DT { get { return GetElementByName<IField>(Names.CLB9_MO_DEATH_DT); } }
        public IField CLB9_MO_PRT_DT { get { return GetElementByName<IField>(Names.CLB9_MO_PRT_DT); } }
        public IField CLB9_FA_DEATH_DT { get { return GetElementByName<IField>(Names.CLB9_FA_DEATH_DT); } }
        public IField CLB9_FA_PRT_DT { get { return GetElementByName<IField>(Names.CLB9_FA_PRT_DT); } }
        public IField CLB9_MPI_ID { get { return GetElementByName<IField>(Names.CLB9_MPI_ID); } }
        public IField CLB9_MED_COVERAGE_IND { get { return GetElementByName<IField>(Names.CLB9_MED_COVERAGE_IND); } }
        public IField CLB9_INSURANCE_CARRIER { get { return GetElementByName<IField>(Names.CLB9_INSURANCE_CARRIER); } }
        public IField CLB9_INSURANCE_POLCY_NO { get { return GetElementByName<IField>(Names.CLB9_INSURANCE_POLCY_NO); } }
        public IField CLB9_SPOKEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLB9_SPOKEN_LANGUAGE); } }
        public IField CLB9_WRITTEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLB9_WRITTEN_LANGUAGE); } }
        public IField CLB9_STATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLB9_STATE_OF_BIRTH); } }
        public IField CLB9_SCHOOL_DISTRICT { get { return GetElementByName<IField>(Names.CLB9_SCHOOL_DISTRICT); } }
        public IField CLB9_ETHNIC_CLASS { get { return GetElementByName<IField>(Names.CLB9_ETHNIC_CLASS); } }
        public IField CLB9_SUFFIX_NAME { get { return GetElementByName<IField>(Names.CLB9_SUFFIX_NAME); } }
        public IField CLB9_EMPLOYER_NAME { get { return GetElementByName<IField>(Names.CLB9_EMPLOYER_NAME); } }
        public IField CLB9_EARNED_INCOME_AMT { get { return GetElementByName<IField>(Names.CLB9_EARNED_INCOME_AMT); } }
        public IField CLB9_INCOME_FREQUENCY { get { return GetElementByName<IField>(Names.CLB9_INCOME_FREQUENCY); } }
        public IField CLB9_KEES_ABMS_ID { get { return GetElementByName<IField>(Names.CLB9_KEES_ABMS_ID); } }
        public IGroup CLB9_EMAIL_ADDRESS { get { return GetElementByName<IGroup>(Names.CLB9_EMAIL_ADDRESS); } }
        public IField CLB9_EMAIL_ADDRESS_LEN { get { return GetElementByName<IField>(Names.CLB9_EMAIL_ADDRESS_LEN); } }
        public IField CLB9_EMAIL_ADDRESS_TEXT { get { return GetElementByName<IField>(Names.CLB9_EMAIL_ADDRESS_TEXT); } }
        public IGroup CLB9_OCCUPATION { get { return GetElementByName<IGroup>(Names.CLB9_OCCUPATION); } }
        public IField CLB9_OCCUPATION_LEN { get { return GetElementByName<IField>(Names.CLB9_OCCUPATION_LEN); } }
        public IField CLB9_OCCUPATION_TEXT { get { return GetElementByName<IField>(Names.CLB9_OCCUPATION_TEXT); } }
        public IField CLB9_CREATED_BY { get { return GetElementByName<IField>(Names.CLB9_CREATED_BY); } }
        public IField CLB9_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CLB9_CREATED_TIMESTAMP); } }
        public IField CLB9_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CLB9_LAST_MODIFIED_BY); } }
        public IField CLB9_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CLB9_LAST_MODIFIED_TMST); } }
        public IGroup CL9_DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.CL9_DCLKSD_CLIENT); } }
        public IField CL9_SSN { get { return GetElementByName<IField>(Names.CL9_SSN); } }
        public IField CL9_PREVIOUS_SSN { get { return GetElementByName<IField>(Names.CL9_PREVIOUS_SSN); } }
        public IField CL9_PHONETIC_DATA { get { return GetElementByName<IField>(Names.CL9_PHONETIC_DATA); } }
        public IField CL9_DT_OF_LAST_UPDATE { get { return GetElementByName<IField>(Names.CL9_DT_OF_LAST_UPDATE); } }
        public IField CL9_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CL9_DATE_OF_BIRTH); } }
        public IField CL9_GENDER { get { return GetElementByName<IField>(Names.CL9_GENDER); } }
        public IField CL9_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CL9_VERIFIED_SSN_FLAG); } }
        public IField CL9_CLIENT_NAME { get { return GetElementByName<IField>(Names.CL9_CLIENT_NAME); } }
        public IField CL9_CREATED_BY { get { return GetElementByName<IField>(Names.CL9_CREATED_BY); } }
        public IField CL9_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CL9_CREATED_TIMESTAMP); } }
        public IField CL9_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CL9_LAST_MODIFIED_BY); } }
        public IField CL9_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CL9_LAST_MODIFIED_TMST); } }
        public IField CL9_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CL9_FK_CLB_CLIENT_NO); } }
        public IGroup SP9_DCLKSD_SYSTEM_PART { get { return GetElementByName<IGroup>(Names.SP9_DCLKSD_SYSTEM_PART); } }
        public IField SP9_SYSTEM_CODE { get { return GetElementByName<IField>(Names.SP9_SYSTEM_CODE); } }
        public IField SP9_PARTICIPATION_FLAG { get { return GetElementByName<IField>(Names.SP9_PARTICIPATION_FLAG); } }
        public IField SP9_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.SP9_CREATED_TIMESTAMP); } }
        public IField SP9_CREATED_BY { get { return GetElementByName<IField>(Names.SP9_CREATED_BY); } }
        public IField SP9_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.SP9_LAST_MODIFIED_BY); } }
        public IField SP9_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.SP9_LAST_MODIFIED_TMST); } }
        public IField SP9_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.SP9_FK_CLB_CLIENT_NO); } }
        public IField SP9_FK_CLI_CLIENT_NAME { get { return GetElementByName<IField>(Names.SP9_FK_CLI_CLIENT_NAME); } }
        public IField SP9_FK_CLI_SSN { get { return GetElementByName<IField>(Names.SP9_FK_CLI_SSN); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup("FILLER", (FILLER) =>
           {
               FILLER.CreateNewField(Names.ADIM1, FieldType.CompInt, 8);
               FILLER.CreateNewField(Names.ADIM2, FieldType.CompInt, 8);
               FILLER.CreateNewField(Names.ADIM3, FieldType.CompInt, 8);
           });

            recordDef.CreateNewGroup("FILLER_d2", (FILLER_d2) =>
           {
               FILLER_d2.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001FL, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001PS, FieldType.CompShort, 4);
               FILLER_d2.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001RF, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001MM, FieldType.CompInt, 9, 3);
           });

            recordDef.CreateNewGroup(Names.ABEND_FIELDS, (ABEND_FIELDS) =>
           {
               ABEND_FIELDS.CreateNewField(Names.ABEND_TYPE, FieldType.String, 1);
               ABEND_FIELDS.CreateNewGroup(Names.ABEND_ADABAS, (ABEND_ADABAS) =>
               {
                   ABEND_ADABAS.CreateNewField(Names.ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                   ABEND_ADABAS.CreateNewField(Names.ADA_FILE_ACTION, FieldType.String, 3);
                   ABEND_ADABAS.CreateNewField(Names.ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
               });
               ABEND_FIELDS.CreateNewGroup(Names.ABEND_CICS, (ABEND_CICS) =>
               {
                   ABEND_CICS.CreateNewField(Names.CICS_RESOURCE_NM, FieldType.String, 8);
                   ABEND_CICS.CreateNewField(Names.CICS_FUNCTION_CD, FieldType.String, 2);
                   ABEND_CICS.CreateNewField(Names.CICS_RESPONSE_CD, FieldType.String, 6);
               });
           });
            recordDef.CreateNewField(Names.OCCUR_MAX, FieldType.CompShort, 4, 4);
            recordDef.CreateNewField(Names.OCCUR_EXP, FieldType.CompShort, 4, 3);
            recordDef.CreateNewField(Names.I1, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.I2, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.ABS_TIME, FieldType.PackedDecimal, 15);
            recordDef.CreateNewField(Names.CUR_DATE, FieldType.UnsignedNumeric, 8);
            recordDef.CreateNewField(Names.CMP_DATE, FieldType.UnsignedPackedDecimal, 9);
            recordDef.CreateNewField(Names.EXIT_READ, FieldType.String, 1, "N");
            recordDef.CreateNewField(Names.EXIT_ACT, FieldType.String, 1, "N");

            recordDef.CreateNewGroup(Names.BASIC_DATA, (BASIC_DATA) =>
           {
               BASIC_DATA.CreateNewField(Names.BSC_ID, FieldType.String, 10);
               BASIC_DATA.CreateNewField(Names.BSC_SSN, FieldType.UnsignedNumeric, 9);
               BASIC_DATA.CreateNewGroup(Names.BSC_NAME, (BSC_NAME) =>
               {
                   BSC_NAME.CreateNewField(Names.BSC_LAST_NAME, FieldType.String, 17);
                   BSC_NAME.CreateNewField(Names.BSC_FIRST_NAME, FieldType.String, 12);
                   BSC_NAME.CreateNewField(Names.BSC_INITIAL, FieldType.String, 1);
               });
               BASIC_DATA.CreateNewGroup(Names.BSC_DOB_SEX, (BSC_DOB_SEX) =>
               {
                   BSC_DOB_SEX.CreateNewField(Names.BSC_DOB, FieldType.String, 8);
                   BSC_DOB_SEX.CreateNewField(Names.BSC_SEX, FieldType.String, 1);
               });
           });

            recordDef.CreateNewGroup(Names.IMP_DATA, (IMP_DATA) =>
           {
               IMP_DATA.CreateNewGroup(Names.IMP_CLIENT_NUMBER_X10, (IMP_CLIENT_NUMBER_X10) =>
               {
                   IMP_CLIENT_NUMBER_X10.CreateNewField(Names.IMP_CLIENT_NUMBER, FieldType.UnsignedNumeric, 10);
               });
               IMP_DATA.CreateNewField(Names.IMP_CLIENT_KEY, FieldType.String, 100);
           });
            recordDef.CreateNewField(Names.KSC_CLIENT, FieldType.String, 10);

            recordDef.CreateNewGroup(Names.CUR_DATA, (CUR_DATA) =>
           {
               CUR_DATA.CreateNewField(Names.CUR_ID, FieldType.String, 10);
               CUR_DATA.CreateNewGroup(Names.CUR_NAME, (CUR_NAME) =>
               {
                   CUR_NAME.CreateNewField(Names.CUR_LAST_NAME, FieldType.String, 17);
                   CUR_NAME.CreateNewField(Names.CUR_FIRST_NAME, FieldType.String, 12);
                   CUR_NAME.CreateNewField(Names.CUR_INITIAL, FieldType.String, 1);
               });
               CUR_DATA.CreateNewGroup(Names.CUR_DOB_SEX, (CUR_DOB_SEX) =>
               {
                   CUR_DOB_SEX.CreateNewGroup(Names.CUR_DOB_X8, (CUR_DOB_X8) =>
                   {
                       CUR_DOB_X8.CreateNewField(Names.CUR_DOB, FieldType.UnsignedNumeric, 8);
                   });
                   CUR_DOB_SEX.CreateNewField(Names.CUR_SEX, FieldType.String, 1);
               });
               CUR_DATA.CreateNewGroup(Names.CUR_SSN_X9, (CUR_SSN_X9) =>
               {
                   CUR_SSN_X9.CreateNewField(Names.CUR_SSN, FieldType.UnsignedNumeric, 9);
               });
               CUR_DATA.CreateNewGroup(Names.CUR_SYSTEM_PART, (CUR_SYSTEM_PART) =>
               {
                   CUR_SYSTEM_PART.CreateNewField(Names.CUR_VERIFIED_SSN_FLAG, FieldType.String, 1);
                   CUR_SYSTEM_PART.CreateNewField(Names.CUR_SYS_PART_AE, FieldType.String, 1);
                   CUR_SYSTEM_PART.CreateNewField(Names.CUR_SYS_PART_CSE, FieldType.String, 1);
                   CUR_SYSTEM_PART.CreateNewField(Names.CUR_SYS_PART_KANPAY, FieldType.String, 1);
                   CUR_SYSTEM_PART.CreateNewField(Names.CUR_SYS_PART_KSCARES, FieldType.String, 1);
                   CUR_SYSTEM_PART.CreateNewField(Names.CUR_SYS_PART_FACTS, FieldType.String, 1);
                   CUR_SYSTEM_PART.CreateNewFillerField(15, FillWith.Hashes);
               });
               CUR_DATA.CreateNewGroup(Names.CUR_ACTIVE, (CUR_ACTIVE) =>
               {
                   CUR_ACTIVE.CreateNewField(Names.CUR_ACT_AE, FieldType.String, 1);
                   CUR_ACTIVE.CreateNewField(Names.CUR_ACT_CSE, FieldType.String, 1);
                   CUR_ACTIVE.CreateNewField(Names.CUR_ACT_KANPAY, FieldType.String, 1);
                   CUR_ACTIVE.CreateNewField(Names.CUR_ACT_KSCARES, FieldType.String, 1);
                   CUR_ACTIVE.CreateNewField(Names.CUR_ACT_FACTS, FieldType.String, 1);
               });
               CUR_DATA.CreateNewField(Names.CUR_KEY, FieldType.String, 100);
           });

            recordDef.CreateNewGroup(Names.SW1_SWITCHES, (SW1_SWITCHES) =>
           {
               SW1_SWITCHES.CreateNewField(Names.SW1_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW1_EOF_NO, "N")
                   .NewCheckField(Names.SW1_EOF_YES, "Y")
                   ;
               SW1_SWITCHES.CreateNewField(Names.SW1_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW1_ERR_NO, "N")
                   .NewCheckField(Names.SW1_ERR_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.DBK1_KEYS, (DBK1_KEYS) =>
           {
               DBK1_KEYS.CreateNewField(Names.DBK1_CLIENT_NUMBER, FieldType.String, 10);
               DBK1_KEYS.CreateNewField(Names.DBK1_CLIENT_NAME, FieldType.String, 30);
               DBK1_KEYS.CreateNewField(Names.DBK1_SSN, FieldType.CompInt, 9);
               DBK1_KEYS.CreateNewField(Names.DBK1_DATE_OF_BIRTH, FieldType.String, 10);
               DBK1_KEYS.CreateNewField(Names.DBK1_GENDER, FieldType.String, 1);
               DBK1_KEYS.CreateNewField(Names.DBK1_PHONETIC_DATA, FieldType.String, 21);
               DBK1_KEYS.CreateNewField(Names.DBK1_COUNT, FieldType.CompInt, 9);
               IGroup DBK1_CCYYMMDD_X_local = (IGroup)DBK1_KEYS.CreateNewGroup(Names.DBK1_CCYYMMDD_X, (DBK1_CCYYMMDD_X) =>
               {
                   DBK1_CCYYMMDD_X.CreateNewField(Names.DBK1_CCYY, FieldType.UnsignedNumeric, 4);
                   DBK1_CCYYMMDD_X.CreateNewFillerField(FieldType.String, 1, "-");
                   DBK1_CCYYMMDD_X.CreateNewField(Names.DBK1_MM, FieldType.UnsignedNumeric, 2);
                   DBK1_CCYYMMDD_X.CreateNewFillerField(FieldType.String, 1, "-");
                   DBK1_CCYYMMDD_X.CreateNewField(Names.DBK1_DD, FieldType.UnsignedNumeric, 2);
               });
               DBK1_KEYS.CreateNewFieldRedefine(Names.DBK1_CCYYMMDD, FieldType.String, DBK1_CCYYMMDD_X_local, 10);
           });

            recordDef.CreateNewGroup(Names.ADA4_ID_KEY, (ADA4_ID_KEY) =>
           {
               ADA4_ID_KEY.CreateNewField(Names.ADA4_CLIENT_NUMBER, FieldType.String, 10);
               ADA4_ID_KEY.CreateNewField(Names.ADA4_CLIENT_NAME, FieldType.String, 30);
               ADA4_ID_KEY.CreateNewField(Names.ADA4_SSN, FieldType.UnsignedNumeric, 9);
               ADA4_ID_KEY.CreateNewField(Names.ADA4_DATE_OF_BIRTH, FieldType.String, 8);
               ADA4_ID_KEY.CreateNewField(Names.ADA4_SEX, FieldType.String, 1);
               ADA4_ID_KEY.CreateNewField(Names.ADA4_CLIENT_POINTER21, FieldType.String, 21);
           });

            recordDef.CreateNewGroup(Names.CL1_DCLKSD_CLIENT, (CL1_DCLKSD_CLIENT) =>
           {
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_SSN, FieldType.CompInt, 9);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_PREVIOUS_SSN, FieldType.CompInt, 9);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_PHONETIC_DATA, FieldType.String, 21);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_DT_OF_LAST_UPDATE, FieldType.String, 10);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_DATE_OF_BIRTH, FieldType.String, 10);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_GENDER, FieldType.String, 1);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_VERIFIED_SSN_FLAG, FieldType.String, 1);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_CLIENT_NAME, FieldType.String, 30);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_CREATED_BY, FieldType.String, 8);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_CREATED_TIMESTAMP, FieldType.String, 26);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_LAST_MODIFIED_BY, FieldType.String, 8);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_LAST_MODIFIED_TMST, FieldType.String, 26);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.WS9_SYSTEM_CODES, (WS9_SYSTEM_CODES) =>
           {
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_AE, FieldType.String, 2, "AE");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_CS, FieldType.String, 2, "CS");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_KA, FieldType.String, 2, "KA");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_KS, FieldType.String, 2, "KS");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_FA, FieldType.String, 2, "FA");
           });

            recordDef.CreateNewGroup(Names.SW9_SWITCHES, (SW9_SWITCHES) =>
           {
               SW9_SWITCHES.CreateNewField(Names.SW9_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW9_EOF_NOT_FOUND, SPACE)
                   .NewCheckField(Names.SW9_EOF_NO, "N")
                   .NewCheckField(Names.SW9_EOF_YES, "Y")
                   ;
               SW9_SWITCHES.CreateNewField(Names.SW9_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW9_ERR_NO, "N")
                   .NewCheckField(Names.SW9_ERR_YES, "Y")
                   ;
               SW9_SWITCHES.CreateNewField(Names.SW9_SELECT_CLIENT_SW, FieldType.String, 1, "Y")
                   .NewCheckField(Names.SW9_SELECT_CLIENT_NO, "N")
                   .NewCheckField(Names.SW9_SELECT_CLIENT_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.WS9_CLIENT_POINTER, (WS9_CLIENT_POINTER) =>
           {
               WS9_CLIENT_POINTER.CreateNewField(Names.WS9_CLIENT_ID, FieldType.String, 10);
               WS9_CLIENT_POINTER.CreateNewField(Names.WS9_VERIFIED_SSN_FLAG, FieldType.String, 1);
               WS9_CLIENT_POINTER.CreateNewGroup(Names.WS9_SYSTEM_PARTICIPATION, (WS9_SYSTEM_PARTICIPATION) =>
               {
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_AE, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_CSE, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_KANPAY, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_KSCARES, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_FACTS, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewFillerField(15, FillWith.Hashes);
               });
           });

            recordDef.CreateNewGroup(Names.WS9_ABEND_FIELDS, (WS9_ABEND_FIELDS) =>
           {
               WS9_ABEND_FIELDS.CreateNewField(Names.WS9_ABEND_TYPE, FieldType.String, 1)
                   .NewCheckField(Names.WS9_ABEND_TYPE_NONE, SPACE)
                   .NewCheckField(Names.WS9_ABEND_TYPE_ADABAS, "A")
                   .NewCheckField(Names.WS9_ABEND_TYPE_CICS, "C")
                   ;
               WS9_ABEND_FIELDS.CreateNewGroup(Names.WS9_ABEND_ADABAS, (WS9_ABEND_ADABAS) =>
               {
                   WS9_ABEND_ADABAS.CreateNewField(Names.WS9_ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                   WS9_ABEND_ADABAS.CreateNewField(Names.WS9_ADA_FILE_ACTION, FieldType.String, 3);
                   WS9_ABEND_ADABAS.CreateNewField(Names.WS9_ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
               });
               WS9_ABEND_FIELDS.CreateNewGroup(Names.WS9_ABEND_CICS, (WS9_ABEND_CICS) =>
               {
                   WS9_ABEND_CICS.CreateNewField(Names.WS9_CICS_RESOURCE_NM, FieldType.String, 8);
                   WS9_ABEND_CICS.CreateNewField(Names.WS9_CICS_FUNCTION_CD, FieldType.String, 2);
                   WS9_ABEND_CICS.CreateNewField(Names.WS9_CICS_RESPONSE_CD, FieldType.String, 6);
               });
           });

            recordDef.CreateNewGroup(Names.WS9_MISC, (WS9_MISC) =>
           {
               WS9_MISC.CreateNewGroup(Names.WS9_MSG_X, (WS9_MSG_X) =>
               {
                   WS9_MSG_X.CreateNewField(Names.WS9_MSG_PROG, FieldType.String, 10);
                   IGroup WS9_MSG_1_local = (IGroup)WS9_MSG_X.CreateNewGroup(Names.WS9_MSG_1, (WS9_MSG_1) =>
                   {
                       WS9_MSG_1.CreateNewField(Names.WS9_MSG, FieldType.String, 50);
                       WS9_MSG_1.CreateNewGroup(Names.WS9_MSG_CODE, (WS9_MSG_CODE) =>
                       {
                           WS9_MSG_CODE.CreateNewField(Names.WS9_MSG_SQLCODE, FieldType.NumericEdited, "---------9", 10);
                       });
                   });
                   WS9_MSG_X.CreateNewGroupRedefine(Names.WS9_MSG_2, WS9_MSG_1_local, (WS9_MSG_2) =>
                   {
                       WS9_MSG_2.CreateNewField(Names.WS9_MSG_FIELD, FieldType.String, 25);
                       WS9_MSG_2.CreateNewField(Names.WS9_MSG_VALUE, FieldType.String, 35);
                   });
               });
               WS9_MISC.CreateNewField(Names.WS9_DATE_ADA, FieldType.String, 8);
               WS9_MISC.CreateNewField(Names.WS9_DATE_DB2, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DBK9_KEYS, (DBK9_KEYS) =>
           {
               DBK9_KEYS.CreateNewField(Names.DBK9_CLIENT_NUMBER, FieldType.String, 10);
               DBK9_KEYS.CreateNewField(Names.DBK9_CLIENT_NAME, FieldType.String, 30);
               DBK9_KEYS.CreateNewField(Names.DBK9_SSN, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.CLB9_DCLKSD_CLIENT_BASIC, (CLB9_DCLKSD_CLIENT_BASIC) =>
           {
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_NUMBER, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_GIVEN_NAME, FieldType.String, 12);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_INITIALS, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_SURNAME, FieldType.String, 17);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CIS_REPL_IND, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_WORK_PHONE, FieldType.PackedDecimal, 10, null, 0);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SSN, FieldType.CompInt, 9);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_GENDER, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_PARENT_RGHTS_SEV, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_PRNT_RGHTS_SEV_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_LEGAL_STATUS, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INSURANCE_CODE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INITIAL_CUSTODY_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_HOME_PHONE, FieldType.PackedDecimal, 10, null, 0);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_DATE_OF_BIRTH, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CURR_PLACEMNT_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CURRENT_PLACEMENT, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CSEA_G_CAUSE_CODE, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CSEA_G_CAUSE_CL_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CSEA_COOP_CODE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_COUNTY_CRT_COMMIT, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MONTHS_ASST_AF, FieldType.CompInt, 9);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MONTHS_ASST_GA, FieldType.CompInt, 9);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MO_DEATH_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MO_PRT_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_FA_DEATH_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_FA_PRT_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MPI_ID, FieldType.String, 38);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MED_COVERAGE_IND, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INSURANCE_CARRIER, FieldType.String, 30);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INSURANCE_POLCY_NO, FieldType.String, 30);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SPOKEN_LANGUAGE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_WRITTEN_LANGUAGE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_STATE_OF_BIRTH, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SCHOOL_DISTRICT, FieldType.String, 3);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_ETHNIC_CLASS, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SUFFIX_NAME, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_EMPLOYER_NAME, FieldType.String, 28);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_EARNED_INCOME_AMT, FieldType.PackedDecimal, 8, null, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INCOME_FREQUENCY, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_KEES_ABMS_ID, FieldType.String, 38);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLB9_EMAIL_ADDRESS, (CLB9_EMAIL_ADDRESS) =>
               {
                   CLB9_EMAIL_ADDRESS.CreateNewField(Names.CLB9_EMAIL_ADDRESS_LEN, FieldType.CompShort, 4);
                   CLB9_EMAIL_ADDRESS.CreateNewField(Names.CLB9_EMAIL_ADDRESS_TEXT, FieldType.String, 100);
               });
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLB9_OCCUPATION, (CLB9_OCCUPATION) =>
               {
                   CLB9_OCCUPATION.CreateNewField(Names.CLB9_OCCUPATION_LEN, FieldType.CompShort, 4);
                   CLB9_OCCUPATION.CreateNewField(Names.CLB9_OCCUPATION_TEXT, FieldType.String, 100);
               });
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CREATED_BY, FieldType.String, 8);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CREATED_TIMESTAMP, FieldType.String, 26);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_LAST_MODIFIED_BY, FieldType.String, 8);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_LAST_MODIFIED_TMST, FieldType.String, 26);
           });

            recordDef.CreateNewGroup(Names.CL9_DCLKSD_CLIENT, (CL9_DCLKSD_CLIENT) =>
           {
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_SSN, FieldType.CompInt, 9);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_PREVIOUS_SSN, FieldType.CompInt, 9);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_PHONETIC_DATA, FieldType.String, 21);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_DT_OF_LAST_UPDATE, FieldType.String, 10);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_DATE_OF_BIRTH, FieldType.String, 10);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_GENDER, FieldType.String, 1);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_VERIFIED_SSN_FLAG, FieldType.String, 1);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_CLIENT_NAME, FieldType.String, 30);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_CREATED_BY, FieldType.String, 8);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_CREATED_TIMESTAMP, FieldType.String, 26);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_LAST_MODIFIED_BY, FieldType.String, 8);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_LAST_MODIFIED_TMST, FieldType.String, 26);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.SP9_DCLKSD_SYSTEM_PART, (SP9_DCLKSD_SYSTEM_PART) =>
           {
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_SYSTEM_CODE, FieldType.String, 2);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_PARTICIPATION_FLAG, FieldType.String, 1);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_CREATED_TIMESTAMP, FieldType.String, 26);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_CREATED_BY, FieldType.String, 8);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_LAST_MODIFIED_BY, FieldType.String, 8);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_LAST_MODIFIED_TMST, FieldType.String, 26);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_FK_CLB_CLIENT_NO, FieldType.String, 10);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_FK_CLI_CLIENT_NAME, FieldType.String, 30);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_FK_CLI_SSN, FieldType.CompInt, 9);
           });


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXIR12_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXIR12_ls_LinkageSection";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_1148977858_IA = "A_1148977858_IA";
            internal const string INPUT_0001EV = "INPUT_0001EV";
            internal const string CSE_PERSONS_WORK_SET_0001ET = "CSE_PERSONS_WORK_SET_0001ET";
            internal const string NUMBER_0001 = "NUMBER_0001";
            internal const string UNIQUE_KEY_0001 = "UNIQUE_KEY_0001";
            internal const string W_OA = "W_OA";
            internal const string A_1148977860_OA = "A_1148977860_OA";
            internal const string OUTPUT_0002EV = "OUTPUT_0002EV";
            internal const string ABEND_DATA_0002ET = "ABEND_DATA_0002ET";
            internal const string TYPE_0002 = "TYPE_0002";
            internal const string ADABAS_FILE_NUMBER_0002 = "ADABAS_FILE_NUMBER_0002";
            internal const string ADABAS_FILE_ACTION_0002 = "ADABAS_FILE_ACTION_0002";
            internal const string ADABAS_RESPONSE_CD_0002 = "ADABAS_RESPONSE_CD_0002";
            internal const string CICS_RESOURCE_NM_0002 = "CICS_RESOURCE_NM_0002";
            internal const string CICS_FUNCTION_CD_0002 = "CICS_FUNCTION_CD_0002";
            internal const string CICS_RESPONSE_CD_0002 = "CICS_RESPONSE_CD_0002";
            internal const string OUTPUT_NEXT_KEY_0003EV = "OUTPUT_NEXT_KEY_0003EV";
            internal const string CSE_PERSONS_WORK_SET_0003ET = "CSE_PERSONS_WORK_SET_0003ET";
            internal const string UNIQUE_KEY_0003 = "UNIQUE_KEY_0003";
            internal const string OUTPUT_GROUP_ALIASES_0001RG = "OUTPUT_GROUP_ALIASES_0001RG";
            internal const string OUTPUT_GROUP_ALIASES_0001MA = "OUTPUT_GROUP_ALIASES_0001MA";
            internal const string OUTPUT_GROUP_ALIASES_0001 = "OUTPUT_GROUP_ALIASES_0001";
            internal const string OUTPUT_GROUP_ALIASES_0001AC = "OUTPUT_GROUP_ALIASES_0001AC";
            internal const string OUTPUT_G_0004EV = "OUTPUT_G_0004EV";
            internal const string CSE_PERSONS_WORK_SET_0004ET = "CSE_PERSONS_WORK_SET_0004ET";
            internal const string UNIQUE_KEY_0004 = "UNIQUE_KEY_0004";
            internal const string SSN_0004 = "SSN_0004";
            internal const string FIRST_NAME_0004 = "FIRST_NAME_0004";
            internal const string MIDDLE_INITIAL_0004 = "MIDDLE_INITIAL_0004";
            internal const string LAST_NAME_0004 = "LAST_NAME_0004";
            internal const string SEX_0004 = "SEX_0004";
            internal const string DOB_0004 = "DOB_0004";
            internal const string DOB_0004XX = "DOB_0004XX";
            internal const string OUTPUT_G_KSCARES_0005EV = "OUTPUT_G_KSCARES_0005EV";
            internal const string FLAG_0005 = "FLAG_0005";
            internal const string OUTPUT_G_KANPAY_0006EV = "OUTPUT_G_KANPAY_0006EV";
            internal const string FLAG_0006 = "FLAG_0006";
            internal const string OUTPUT_G_CSE_0007EV = "OUTPUT_G_CSE_0007EV";
            internal const string FLAG_0007 = "FLAG_0007";
            internal const string OUTPUT_G_AE_0008EV = "OUTPUT_G_AE_0008EV";
            internal const string FLAG_0008 = "FLAG_0008";
            internal const string OUTPUT_G_FACTS_0009EV = "OUTPUT_G_FACTS_0009EV";
            internal const string FLAG_0009 = "FLAG_0009";
            internal const string OUTPUT_G_ACTIVE_ON_KSCA_0010EV = "OUTPUT_G_ACTIVE_ON_KSCA_0010EV";
            internal const string FLAG_0010 = "FLAG_0010";
            internal const string OUTPUT_G_ACTIVE_ON_KANP_0011EV = "OUTPUT_G_ACTIVE_ON_KANP_0011EV";
            internal const string FLAG_0011 = "FLAG_0011";
            internal const string OUTPUT_G_ACTIVE_ON_CSE_0012EV = "OUTPUT_G_ACTIVE_ON_CSE_0012EV";
            internal const string FLAG_0012 = "FLAG_0012";
            internal const string OUTPUT_G_ACTIVE_ON_AE_0013EV = "OUTPUT_G_ACTIVE_ON_AE_0013EV";
            internal const string FLAG_0013 = "FLAG_0013";
            internal const string OUTPUT_G_ACTIVE_ON_FACT_0014EV = "OUTPUT_G_ACTIVE_ON_FACT_0014EV";
            internal const string FLAG_0014 = "FLAG_0014";
            internal const string TWA = "TWA";
            internal const string TWA_ADABAS_PARMS = "TWA_ADABAS_PARMS";
            internal const string TWA_CICS_PARMS = "TWA_CICS_PARMS";
            internal const string TWA_PROGRAM_ID = "TWA_PROGRAM_ID";
            internal const string TWA_ADDR_LIST = "TWA_ADDR_LIST";
        }
        #endregion

        #region Direct-access element properties
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_1148977858_IA { get { return GetElementByName<IGroup>(Names.A_1148977858_IA); } }
        public IGroup INPUT_0001EV { get { return GetElementByName<IGroup>(Names.INPUT_0001EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0001ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0001ET); } }
        public IField NUMBER_0001 { get { return GetElementByName<IField>(Names.NUMBER_0001); } }
        public IField UNIQUE_KEY_0001 { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0001); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_1148977860_OA { get { return GetElementByName<IGroup>(Names.A_1148977860_OA); } }
        public IGroup OUTPUT_0002EV { get { return GetElementByName<IGroup>(Names.OUTPUT_0002EV); } }
        public IGroup ABEND_DATA_0002ET { get { return GetElementByName<IGroup>(Names.ABEND_DATA_0002ET); } }
        public IField TYPE_0002 { get { return GetElementByName<IField>(Names.TYPE_0002); } }
        public IField ADABAS_FILE_NUMBER_0002 { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0002); } }
        public IField ADABAS_FILE_ACTION_0002 { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0002); } }
        public IField ADABAS_RESPONSE_CD_0002 { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0002); } }
        public IField CICS_RESOURCE_NM_0002 { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0002); } }
        public IField CICS_FUNCTION_CD_0002 { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0002); } }
        public IField CICS_RESPONSE_CD_0002 { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0002); } }
        public IGroup OUTPUT_NEXT_KEY_0003EV { get { return GetElementByName<IGroup>(Names.OUTPUT_NEXT_KEY_0003EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0003ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0003ET); } }
        public IField UNIQUE_KEY_0003 { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0003); } }
        public IGroup OUTPUT_GROUP_ALIASES_0001RG { get { return GetElementByName<IGroup>(Names.OUTPUT_GROUP_ALIASES_0001RG); } }
        public IField OUTPUT_GROUP_ALIASES_0001MA { get { return GetElementByName<IField>(Names.OUTPUT_GROUP_ALIASES_0001MA); } }
        public IArrayElementAccessor<IGroup> OUTPUT_GROUP_ALIASES_0001 { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_GROUP_ALIASES_0001); } }
        public IArrayElementAccessor<IField> OUTPUT_GROUP_ALIASES_0001AC { get { return GetArrayElementAccessor<IField>(Names.OUTPUT_GROUP_ALIASES_0001AC); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_0004EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_0004EV); } }
        public IArrayElementAccessor<IGroup> CSE_PERSONS_WORK_SET_0004ET { get { return GetArrayElementAccessor<IGroup>(Names.CSE_PERSONS_WORK_SET_0004ET); } }
        public IArrayElementAccessor<IField> UNIQUE_KEY_0004 { get { return GetArrayElementAccessor<IField>(Names.UNIQUE_KEY_0004); } }
        public IArrayElementAccessor<IField> SSN_0004 { get { return GetArrayElementAccessor<IField>(Names.SSN_0004); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0004 { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0004); } }
        public IArrayElementAccessor<IField> MIDDLE_INITIAL_0004 { get { return GetArrayElementAccessor<IField>(Names.MIDDLE_INITIAL_0004); } }
        public IArrayElementAccessor<IField> LAST_NAME_0004 { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0004); } }
        public IArrayElementAccessor<IField> SEX_0004 { get { return GetArrayElementAccessor<IField>(Names.SEX_0004); } }
        public IArrayElementAccessor<IField> DOB_0004 { get { return GetArrayElementAccessor<IField>(Names.DOB_0004); } }
        public IArrayElementAccessor<IField> DOB_0004XX { get { return GetArrayElementAccessor<IField>(Names.DOB_0004XX); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_KSCARES_0005EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_KSCARES_0005EV); } }
        public IArrayElementAccessor<IField> FLAG_0005 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0005); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_KANPAY_0006EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_KANPAY_0006EV); } }
        public IArrayElementAccessor<IField> FLAG_0006 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0006); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_CSE_0007EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_CSE_0007EV); } }
        public IArrayElementAccessor<IField> FLAG_0007 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0007); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_AE_0008EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_AE_0008EV); } }
        public IArrayElementAccessor<IField> FLAG_0008 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0008); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_FACTS_0009EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_FACTS_0009EV); } }
        public IArrayElementAccessor<IField> FLAG_0009 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0009); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_ACTIVE_ON_KSCA_0010EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_ACTIVE_ON_KSCA_0010EV); } }
        public IArrayElementAccessor<IField> FLAG_0010 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0010); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_ACTIVE_ON_KANP_0011EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_ACTIVE_ON_KANP_0011EV); } }
        public IArrayElementAccessor<IField> FLAG_0011 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0011); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_ACTIVE_ON_CSE_0012EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_ACTIVE_ON_CSE_0012EV); } }
        public IArrayElementAccessor<IField> FLAG_0012 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0012); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_ACTIVE_ON_AE_0013EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_ACTIVE_ON_AE_0013EV); } }
        public IArrayElementAccessor<IField> FLAG_0013 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0013); } }
        public IArrayElementAccessor<IGroup> OUTPUT_G_ACTIVE_ON_FACT_0014EV { get { return GetArrayElementAccessor<IGroup>(Names.OUTPUT_G_ACTIVE_ON_FACT_0014EV); } }
        public IArrayElementAccessor<IField> FLAG_0014 { get { return GetArrayElementAccessor<IField>(Names.FLAG_0014); } }
        public IGroup TWA { get { return GetElementByName<IGroup>(Names.TWA); } }
        public IGroup TWA_ADABAS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_ADABAS_PARMS); } }
        public IGroup TWA_CICS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_CICS_PARMS); } }
        public IField TWA_PROGRAM_ID { get { return GetElementByName<IField>(Names.TWA_PROGRAM_ID); } }
        public IGroup TWA_ADDR_LIST { get { return GetElementByName<IGroup>(Names.TWA_ADDR_LIST); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_1148977858_IA, (A_1148977858_IA) =>
               {
                   A_1148977858_IA.CreateNewGroup(Names.INPUT_0001EV, (INPUT_0001EV) =>
                   {
                       INPUT_0001EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0001ET, (CSE_PERSONS_WORK_SET_0001ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewFillerField(1, FillWith.Hashes);
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.NUMBER_0001, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewFillerField(1, FillWith.Hashes);
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.UNIQUE_KEY_0001, FieldType.String, 100);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_1148977860_OA, (A_1148977860_OA) =>
               {
                   A_1148977860_OA.CreateNewGroup(Names.OUTPUT_0002EV, (OUTPUT_0002EV) =>
                   {
                       OUTPUT_0002EV.CreateNewGroup(Names.ABEND_DATA_0002ET, (ABEND_DATA_0002ET) =>
                       {
                           ABEND_DATA_0002ET.CreateNewFillerField(1, FillWith.Hashes);
                           ABEND_DATA_0002ET.CreateNewField(Names.TYPE_0002, FieldType.String, 1);
                           ABEND_DATA_0002ET.CreateNewFillerField(1, FillWith.Hashes);
                           ABEND_DATA_0002ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0002, FieldType.String, 4);
                           ABEND_DATA_0002ET.CreateNewFillerField(1, FillWith.Hashes);
                           ABEND_DATA_0002ET.CreateNewField(Names.ADABAS_FILE_ACTION_0002, FieldType.String, 3);
                           ABEND_DATA_0002ET.CreateNewFillerField(1, FillWith.Hashes);
                           ABEND_DATA_0002ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0002, FieldType.String, 4);
                           ABEND_DATA_0002ET.CreateNewFillerField(1, FillWith.Hashes);
                           ABEND_DATA_0002ET.CreateNewField(Names.CICS_RESOURCE_NM_0002, FieldType.String, 8);
                           ABEND_DATA_0002ET.CreateNewFillerField(1, FillWith.Hashes);
                           ABEND_DATA_0002ET.CreateNewField(Names.CICS_FUNCTION_CD_0002, FieldType.String, 2);
                           ABEND_DATA_0002ET.CreateNewFillerField(1, FillWith.Hashes);
                           ABEND_DATA_0002ET.CreateNewField(Names.CICS_RESPONSE_CD_0002, FieldType.String, 6);
                       });
                   });
                   A_1148977860_OA.CreateNewGroup(Names.OUTPUT_NEXT_KEY_0003EV, (OUTPUT_NEXT_KEY_0003EV) =>
                   {
                       OUTPUT_NEXT_KEY_0003EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0003ET, (CSE_PERSONS_WORK_SET_0003ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewFillerField(1, FillWith.Hashes);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.UNIQUE_KEY_0003, FieldType.String, 100);
                       });
                   });
                   A_1148977860_OA.CreateNewGroup(Names.OUTPUT_GROUP_ALIASES_0001RG, (OUTPUT_GROUP_ALIASES_0001RG) =>
                   {
                       OUTPUT_GROUP_ALIASES_0001RG.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001MA, FieldType.SignedNumeric, 4);
                       OUTPUT_GROUP_ALIASES_0001RG.CreateNewGroupArray(Names.OUTPUT_GROUP_ALIASES_0001, 3, (OUTPUT_GROUP_ALIASES_0001) =>
                       {
                           OUTPUT_GROUP_ALIASES_0001.CreateNewField(Names.OUTPUT_GROUP_ALIASES_0001AC, FieldType.String, 1);
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_0004EV, (OUTPUT_G_0004EV) =>
                           {
                               OUTPUT_G_0004EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0004ET, (CSE_PERSONS_WORK_SET_0004ET) =>
                               {
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFillerField(1, FillWith.Hashes);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.UNIQUE_KEY_0004, FieldType.String, 100);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFillerField(1, FillWith.Hashes);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.SSN_0004, FieldType.String, 9);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFillerField(1, FillWith.Hashes);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.FIRST_NAME_0004, FieldType.String, 12);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFillerField(1, FillWith.Hashes);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.MIDDLE_INITIAL_0004, FieldType.String, 1);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFillerField(1, FillWith.Hashes);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.LAST_NAME_0004, FieldType.String, 17);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFillerField(1, FillWith.Hashes);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.SEX_0004, FieldType.String, 1);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFillerField(1, FillWith.Hashes);

                                   IField DOB_0004_local = CSE_PERSONS_WORK_SET_0004ET.CreateNewField(Names.DOB_0004, FieldType.SignedNumeric, 8);
                                   CSE_PERSONS_WORK_SET_0004ET.CreateNewFieldRedefine(Names.DOB_0004XX, FieldType.String, DOB_0004_local, 8);
                               });
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_KSCARES_0005EV, (OUTPUT_G_KSCARES_0005EV) =>
                           {
                               OUTPUT_G_KSCARES_0005EV.CreateNewFillerField(1, FillWith.Hashes);
                               OUTPUT_G_KSCARES_0005EV.CreateNewField(Names.FLAG_0005, FieldType.String, 1);
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_KANPAY_0006EV, (OUTPUT_G_KANPAY_0006EV) =>
                           {
                               OUTPUT_G_KANPAY_0006EV.CreateNewFillerField(1, FillWith.Hashes);
                               OUTPUT_G_KANPAY_0006EV.CreateNewField(Names.FLAG_0006, FieldType.String, 1);
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_CSE_0007EV, (OUTPUT_G_CSE_0007EV) =>
                           {
                               OUTPUT_G_CSE_0007EV.CreateNewFillerField(1, FillWith.Hashes);
                               OUTPUT_G_CSE_0007EV.CreateNewField(Names.FLAG_0007, FieldType.String, 1);
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_AE_0008EV, (OUTPUT_G_AE_0008EV) =>
                           {
                               OUTPUT_G_AE_0008EV.CreateNewFillerField(1, FillWith.Hashes);
                               OUTPUT_G_AE_0008EV.CreateNewField(Names.FLAG_0008, FieldType.String, 1);
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_FACTS_0009EV, (OUTPUT_G_FACTS_0009EV) =>
                           {
                               OUTPUT_G_FACTS_0009EV.CreateNewFillerField(1, FillWith.Hashes);
                               OUTPUT_G_FACTS_0009EV.CreateNewField(Names.FLAG_0009, FieldType.String, 1);
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_ACTIVE_ON_KSCA_0010EV, (OUTPUT_G_ACTIVE_ON_KSCA_0010EV) =>
                           {
                               OUTPUT_G_ACTIVE_ON_KSCA_0010EV.CreateNewFillerField(1, FillWith.Hashes);
                               OUTPUT_G_ACTIVE_ON_KSCA_0010EV.CreateNewField(Names.FLAG_0010, FieldType.String, 1);
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_ACTIVE_ON_KANP_0011EV, (OUTPUT_G_ACTIVE_ON_KANP_0011EV) =>
                           {
                               OUTPUT_G_ACTIVE_ON_KANP_0011EV.CreateNewFillerField(1, FillWith.Hashes);
                               OUTPUT_G_ACTIVE_ON_KANP_0011EV.CreateNewField(Names.FLAG_0011, FieldType.String, 1);
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_ACTIVE_ON_CSE_0012EV, (OUTPUT_G_ACTIVE_ON_CSE_0012EV) =>
                           {
                               OUTPUT_G_ACTIVE_ON_CSE_0012EV.CreateNewFillerField(1, FillWith.Hashes);
                               OUTPUT_G_ACTIVE_ON_CSE_0012EV.CreateNewField(Names.FLAG_0012, FieldType.String, 1);
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_ACTIVE_ON_AE_0013EV, (OUTPUT_G_ACTIVE_ON_AE_0013EV) =>
                           {
                               OUTPUT_G_ACTIVE_ON_AE_0013EV.CreateNewFillerField(1, FillWith.Hashes);
                               OUTPUT_G_ACTIVE_ON_AE_0013EV.CreateNewField(Names.FLAG_0013, FieldType.String, 1);
                           });
                           OUTPUT_GROUP_ALIASES_0001.CreateNewGroup(Names.OUTPUT_G_ACTIVE_ON_FACT_0014EV, (OUTPUT_G_ACTIVE_ON_FACT_0014EV) =>
                           {
                               OUTPUT_G_ACTIVE_ON_FACT_0014EV.CreateNewFillerField(1, FillWith.Hashes);
                               OUTPUT_G_ACTIVE_ON_FACT_0014EV.CreateNewField(Names.FLAG_0014, FieldType.String, 1);
                           });
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.TWA, (TWA) =>
           {
               IGroup TWA_ADABAS_PARMS_local = (IGroup)TWA.CreateNewGroup(Names.TWA_ADABAS_PARMS, (TWA_ADABAS_PARMS) =>
               {
                   TWA_ADABAS_PARMS.CreateNewFieldArray("FILLER_d34", 7, FieldType.CompInt, 4);
               });
               TWA.CreateNewGroupRedefine(Names.TWA_CICS_PARMS, TWA_ADABAS_PARMS_local, (TWA_CICS_PARMS) =>
               {
                   TWA_CICS_PARMS.CreateNewField(Names.TWA_PROGRAM_ID, FieldType.String, 8);
                   TWA_CICS_PARMS.CreateNewGroup(Names.TWA_ADDR_LIST, (TWA_ADDR_LIST) =>
                   {
                       TWA_ADDR_LIST.CreateNewFieldArray("FILLER_d35", 5, FieldType.CompInt, 4);
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(W_IA, args, 0);
            SetPassedParm(W_OA, args, 1);
            SetPassedParm(PSMGR_EAB_DATA, args, 2);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(W_IA, args, 0);
            SetReturnParm(W_OA, args, 1);
            SetReturnParm(PSMGR_EAB_DATA, args, 2);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXIR12 : OnlineEABBase
    {

        #region Public Constructors
        public SWEXIR12()
            : base()
        {
            SetUpProgram();
        }

        public SWEXIR12(OnlineControl controlData) : base(controlData)
        {
            SetUpProgram();
        }

        private void SetUpProgram()
        {
            this.ProgramName = "SWEXIR12";

            WS = new SWEXIR12_ws();
            LS = new SWEXIR12_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryTextWithUR("ID-VIEW", "SELECT FK_CLB_CLIENT_NO, CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( FK_CLB_CLIENT_NO = {0}  AND CLIENT_NAME = {1}  AND SSN = {2}  AND DATE_OF_BIRTH = {3}  AND GENDER >= {4}  ) OR ( FK_CLB_CLIENT_NO = {5}  AND CLIENT_NAME = {6}  AND SSN = {7}  AND DATE_OF_BIRTH > {8}  ) OR ( FK_CLB_CLIENT_NO = {9}  AND CLIENT_NAME = {10}  AND SSN > {11}  ) OR ( FK_CLB_CLIENT_NO = {12}  AND CLIENT_NAME > {13}  ) OR ( FK_CLB_CLIENT_NO > {14}  ) ORDER BY FK_CLB_CLIENT_NO, CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE ID-VIEW CURSOR FOR SELECT FK_CLB_CLIENT_NO , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER >= :DBK1-GENDER ) OR ( FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH > :DBK1-DATE-OF-BIRTH ) OR ( FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN > :DBK1-SSN ) OR ( FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER AND CLIENT_NAME > :DBK1-CLIENT-NAME ) OR ( FK_CLB_CLIENT_NO > :DBK1-CLIENT-NUMBER ) ORDER BY FK_CLB_CLIENT_NO , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG WITH UR END-EXEC
                                WS.DBK1_CLIENT_NUMBER, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_CLIENT_NUMBER, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_CLIENT_NUMBER, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_CLIENT_NUMBER, WS.DBK1_CLIENT_NAME, WS.DBK1_CLIENT_NUMBER);

            DbConv.SetQueryTextWithUR("SPA-VIEW", "SELECT SYSTEM_CODE, PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {0}  AND FK_CLI_CLIENT_NAME = {1}  AND FK_CLI_SSN = {2} ",  //COBOL==>EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER AND FK_CLI_CLIENT_NAME = :DBK9-CLIENT-NAME AND FK_CLI_SSN = :DBK9-SSN WITH UR END-EXEC
                                WS.DBK9_CLIENT_NUMBER, WS.DBK9_CLIENT_NAME, WS.DBK9_SSN);

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXIR12_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXIR12_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_MAIN(string returnMethod = "")
        {
            M_INITIALIZE_DATA(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM INITIALIZE-DATA
            M_MAIN_LOGIC(); if (Control.ExitProgram) { return; }                                                  //COBOL==> PERFORM MAIN-LOGIC
            M_END_PROGRAM(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM END-PROGRAM .
            if (returnMethod != "" && returnMethod != "M_MAIN") { M_MAIN_LOGIC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_LOGIC
        /// </summary>
        private void M_MAIN_LOGIC(string returnMethod = "")
        {
            //COMMENT: ** GQB 04/04/2014 - ADDED NEW CODE FOR DB2
            WS.WS9_MSG_X.SetValue("*SWEXIR12*");                                                                //COBOL==> MOVE '*SWEXIR12*' TO WS9-MSG-X.
            WS.IMP_CLIENT_NUMBER_X10.SetValue(LS.NUMBER_0001);                                                  //COBOL==> MOVE NUMBER-0001 TO IMP-CLIENT-NUMBER-X10.
            WS.IMP_CLIENT_KEY.SetValue(LS.UNIQUE_KEY_0001);                                                     //COBOL==> MOVE UNIQUE-KEY-0001 TO IMP-CLIENT-KEY.
            M_READ_BASIC(); if (Control.ExitProgram) { return; }                                                  //COBOL==> PERFORM READ-BASIC
            M_READ_CLIENT_1ST(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM READ-CLIENT-1ST
            while (!(WS.EXIT_READ.IsEqualTo("Y")))                                                              //COBOL==> PERFORM READ-CLIENT-NXT UNTIL EXIT-READ = 'Y'
            {
                M_READ_CLIENT_NXT(); if (Control.ExitProgram) { return; }
            }
            if (WS.I1.IsLessThan(WS.OCCUR_EXP))                                                                 //COBOL==> IF I1 < OCCUR-EXP
            {
                LS.OUTPUT_GROUP_ALIASES_0001MA.SetValue(WS.I1);                                                     //COBOL==> MOVE I1 TO OUTPUT-GROUP-ALIASES-0001MA
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.OUTPUT_GROUP_ALIASES_0001MA.SetValue(WS.OCCUR_EXP);                                              //COBOL==> MOVE OCCUR-EXP TO OUTPUT-GROUP-ALIASES-0001MA
            }                                                                                                   //COBOL==> END-IF .
            if (returnMethod != "" && returnMethod != "M_MAIN_LOGIC") { M_READ_BASIC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_READ_BASIC
        /// </summary>
        /// <remarks>
        ///COMMENT:  READ BASIC, TO SEE IF IT EXISTS
        ///COMMENT: ** GQB 04/04/2014 - READ CLIENT BASIC
        /// </remarks>
        private void M_READ_BASIC(string returnMethod = "")
        {
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.IMP_CLIENT_NUMBER);                                               //COBOL==> MOVE IMP-CLIENT-NUMBER TO DBK9-CLIENT-NUMBER.
            M_98000_SELECT_CLIENT_BASIC("M_98000_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 98000-SELECT-CLIENT-BASIC.
            WS.ABEND_FIELDS.SetValue(WS.WS9_ABEND_FIELDS);                                                      //COBOL==> MOVE WS9-ABEND-FIELDS TO ABEND-FIELDS.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.ADA_FILE_ACTION.SetValue(" NE");                                                                 //COBOL==> MOVE ' NE' TO ADA-FILE-ACTION
                M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
            }                                                                                                   //COBOL==> END-EVALUATE.
            WS.BSC_LAST_NAME.SetValue(WS.CLB9_CLIENT_SURNAME);                                                  //COBOL==> MOVE CLB9-CLIENT-SURNAME TO BSC-LAST-NAME.
            WS.BSC_FIRST_NAME.SetValue(WS.CLB9_CLIENT_GIVEN_NAME);                                              //COBOL==> MOVE CLB9-CLIENT-GIVEN-NAME TO BSC-FIRST-NAME.
            WS.BSC_INITIAL.SetValue(WS.CLB9_CLIENT_INITIALS);                                                   //COBOL==> MOVE CLB9-CLIENT-INITIALS TO BSC-INITIAL.
            WS.WS9_DATE_DB2.SetValue(WS.CLB9_DATE_OF_BIRTH);                                                    //COBOL==> MOVE CLB9-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
                                                                                                                  //COMMENT: ** GQB 08/22/2014 - ADDED GENDER TO SEX
            WS.BSC_DOB.SetValue(WS.WS9_DATE_ADA);                                                               //COBOL==> MOVE WS9-DATE-ADA TO BSC-DOB.
            WS.BSC_SEX.SetValue(WS.CLB9_GENDER);                                                                //COBOL==> MOVE CLB9-GENDER TO BSC-SEX.
            WS.BSC_ID.SetValue(WS.CLB9_CLIENT_NUMBER);                                                          //COBOL==> MOVE CLB9-CLIENT-NUMBER TO BSC-ID.
            WS.BSC_SSN.SetValue(WS.CLB9_SSN);                                                                   //COBOL==> MOVE CLB9-SSN TO BSC-SSN.
            if (returnMethod != "" && returnMethod != "M_READ_BASIC") { M_READ_CLIENT_1ST(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_READ_CLIENT_1ST
        /// </summary>
        /// <remarks>
        ///COMMENT:  READ FIRST RECORD BY ID FROM BEGINNING OR START POSITION
        ///COMMENT: ** GQB 04/04/2014 - OPEN CLIENT CURSOR ON DB2
        /// </remarks>
        private void M_READ_CLIENT_1ST(string returnMethod = "")
        {
            WS.ADA4_ID_KEY.ResetToInitialValue();                                                               //COBOL==> INITIALIZE ADA4-ID-KEY.
            if (!(WS.IMP_CLIENT_KEY.IsSpaces()))                                                                //COBOL==> IF IMP-CLIENT-KEY NOT = SPACES
            {
                WS.ADA4_ID_KEY.SetValue(WS.IMP_CLIENT_KEY);                                                         //COBOL==> MOVE IMP-CLIENT-KEY TO ADA4-ID-KEY
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.ADA4_CLIENT_NUMBER.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                           //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO ADA4-CLIENT-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            WS.DBK1_CLIENT_NUMBER.SetValue(WS.ADA4_CLIENT_NUMBER);                                              //COBOL==> MOVE ADA4-CLIENT-NUMBER TO DBK1-CLIENT-NUMBER.
            WS.DBK1_CLIENT_NAME.SetValue(WS.ADA4_CLIENT_NAME);                                                  //COBOL==> MOVE ADA4-CLIENT-NAME TO DBK1-CLIENT-NAME.
            WS.DBK1_SSN.SetValue(WS.ADA4_SSN);                                                                  //COBOL==> MOVE ADA4-SSN TO DBK1-SSN.
            WS.WS9_DATE_ADA.SetValue(WS.ADA4_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA4-DATE-OF-BIRTH TO WS9-DATE-ADA.
            M_91100_CONVERT_DATE_ADA_TO_DB2("M_91100_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2.
            WS.DBK1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                    //COBOL==> MOVE WS9-DATE-DB2 TO DBK1-DATE-OF-BIRTH.
            WS.DBK1_GENDER.SetValue(WS.ADA4_SEX);                                                               //COBOL==> MOVE ADA4-SEX TO DBK1-GENDER.
            M_4100_OPEN_ID_VIEW("M_4100_EXIT"); if (Control.ExitProgram) { return; }                              //COBOL==> PERFORM 4100-OPEN-ID-VIEW.
            if (returnMethod != "" && returnMethod != "M_READ_CLIENT_1ST") { M_READ_CLIENT_NXT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_READ_CLIENT_NXT
        /// </summary>
        /// <remarks>
        ///COMMENT:  READ NEXT RECORD BY ID
        ///COMMENT: ** GQB 04/04/2014 - FETCH NEXT CLIENT RECORD ON DB2
        /// </remarks>
        private void M_READ_CLIENT_NXT(string returnMethod = "")
        {
            if (WS.SW1_ERR_NO.Value)                                                                            //COBOL==> IF SW1-ERR-NO
            {
                M_4200_FETCH_ID_VIEW("M_4200_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 4200-FETCH-ID-VIEW
            }                                                                                                   //COBOL==> END-IF.
            M_ASSIGN_CLIENT_DATA(); if (Control.ExitProgram) { return; }                                          //COBOL==> PERFORM ASSIGN-CLIENT-DATA.
            if (returnMethod != "" && returnMethod != "M_READ_CLIENT_NXT") { M_ASSIGN_CLIENT_DATA(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ASSIGN_CLIENT_DATA
        /// </summary>
        /// <remarks>
        ///COMMENT:  CHECK RETURN CODE FROM READ
        /// </remarks>
        private void M_ASSIGN_CLIENT_DATA(string returnMethod = "")
        {
            if ((WS.SW1_ERR_NO.Value)
             && (WS.SW1_EOF_NO.Value))                                 //COBOL==> IF SW1-ERR-NO AND SW1-EOF-NO
            {
                if (WS.CL1_FK_CLB_CLIENT_NO.IsGreaterThan(WS.IMP_CLIENT_NUMBER_X10))                                //COBOL==> IF CL1-FK-CLB-CLIENT-NO > IMP-CLIENT-NUMBER-X10
                {
                    WS.EXIT_READ.SetValue("Y");                                                                         //COBOL==> MOVE 'Y' TO EXIT-READ
                    M_4300_CLOSE_ID_VIEW("M_7200_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 4300-CLOSE-ID-VIEW
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        WS.ABEND_TYPE.SetValue("A");                                                                        //COBOL==> MOVE 'A' TO ABEND-TYPE
                        WS.ADA_FILE_ACTION.SetValue("RVF");                                                                 //COBOL==> MOVE 'RVF' TO ADA-FILE-ACTION
                        WS.ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                                //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO ADA-FILE-NUMBER
                        WS.ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                                //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO ADA-RESPONSE-CD
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_GET_ACTIVE(); if (Control.ExitProgram) { return; }                                                  //COBOL==> PERFORM GET-ACTIVE
                    M_LOAD_ARRAY(); if (Control.ExitProgram) { return; }                                                  //COBOL==> PERFORM LOAD-ARRAY
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.SW1_EOF_YES.Value)                                                                           //COBOL==> IF SW1-EOF-YES
                {
                    WS.EXIT_READ.SetValue("Y");                                                                         //COBOL==> MOVE 'Y' TO EXIT-READ
                    M_4300_CLOSE_ID_VIEW("M_7200_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 4300-CLOSE-ID-VIEW
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        WS.ABEND_TYPE.SetValue("A");                                                                        //COBOL==> MOVE 'A' TO ABEND-TYPE
                        WS.ADA_FILE_ACTION.SetValue("RVF");                                                                 //COBOL==> MOVE 'RVF' TO ADA-FILE-ACTION
                        WS.ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                                //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO ADA-FILE-NUMBER
                        WS.ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                                //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO ADA-RESPONSE-CD
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        WS.ABEND_TYPE.SetValue("A");                                                                        //COBOL==> MOVE 'A' TO ABEND-TYPE
                        WS.ADA_FILE_ACTION.SetValue("RVF");                                                                 //COBOL==> MOVE 'RVF' TO ADA-FILE-ACTION
                        WS.ADA_FILE_NUMBER.SetValue(WS.WS9_ADA_FILE_NUMBER);                                                //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO ADA-FILE-NUMBER
                        WS.ADA_RESPONSE_CD.SetValue(WS.WS9_ADA_RESPONSE_CD);                                                //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO ADA-RESPONSE-CD
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_ASSIGN_CLIENT_DATA") { M_LOAD_ARRAY(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_LOAD_ARRAY
        /// </summary>
        /// <remarks>
        ///COMMENT:  LOAD ARRAY
        /// </remarks>
        private void M_LOAD_ARRAY(string returnMethod = "")
        {
            WS.CUR_ID.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                                        //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO CUR-ID
            WS.CUR_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                           //COBOL==> MOVE CL1-CLIENT-NAME TO CUR-NAME
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.CUR_DOB.SetValue(WS.WS9_DATE_ADA);                                                               //COBOL==> MOVE WS9-DATE-ADA TO CUR-DOB.
            WS.CUR_SEX.SetValue(WS.CL1_GENDER);                                                                 //COBOL==> MOVE CL1-GENDER TO CUR-SEX.
            WS.CUR_SSN.SetValue(WS.CL1_SSN);                                                                    //COBOL==> MOVE CL1-SSN TO CUR-SSN.
                                                                                                                //COMMENT: ** GQB 07/24/2014 - CODE FOR CLIENT POINTER INFORMATION
                                                                                                                //COMMENT: **                  SWCSZG87 AND SWCSZG88 MUST BE INCLUDED
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                            //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO DBK9-CLIENT-NUMBER.
            WS.DBK9_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                          //COBOL==> MOVE CUR-NAME TO DBK9-CLIENT-NAME.
            WS.DBK9_SSN.SetValue(WS.CUR_SSN);                                                                   //COBOL==> MOVE CUR-SSN TO DBK9-SSN.
            WS.WS9_CLIENT_POINTER.ResetToInitialValue();                                                        //COBOL==> INITIALIZE WS9-CLIENT-POINTER.
            WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL1_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL1-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG.
            WS.SW9_SELECT_CLIENT_NO.SetValue(true);                                                             //COBOL==> SET SW9-SELECT-CLIENT-NO TO TRUE.
            M_99000_CLIENT_POINTER_ROUTINE("M_99000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 99000-CLIENT-POINTER-ROUTINE.
                                                                                                                  //COMMENT: ** GQB 07/25/2014 - IGNORE ERRORS AND PASS CLIENT POINTER
                                                                                                                  //COMMENT: **                  TO ENABLE CONTINUATION OF THE PROCESS
            WS.CUR_SYSTEM_PART.SetValue(WS.WS9_CLIENT_POINTER.GetSubstring(11));                                //COBOL==> MOVE WS9-CLIENT-POINTER ( 11: ) TO CUR-SYSTEM-PART.
                                                                                                                //COMMENT:     MOVE WS9-ABEND-FIELDS TO ABEND-FIELDS.
                                                                                                                //COMMENT:     IF NOT ABEND-TYPE-NONE
                                                                                                                //COMMENT:        MOVE 'RVF' TO ADA-FILE-ACTION
                                                                                                                //COMMENT:        PERFORM ADABAS-ABEND
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT: ** GQB 04/04/2014 - POPULATE CLIENT ID KEY
            WS.ADA4_ID_KEY.ResetToInitialValue();                                                               //COBOL==> INITIALIZE ADA4-ID-KEY.
            WS.ADA4_CLIENT_NUMBER.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                            //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO ADA4-CLIENT-NUMBER.
            WS.ADA4_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO ADA4-CLIENT-NAME.
            WS.ADA4_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO ADA4-SSN.
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.ADA4_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_ADA);                                                    //COBOL==> MOVE WS9-DATE-ADA TO ADA4-DATE-OF-BIRTH.
            WS.ADA4_SEX.SetValue(WS.CL1_GENDER);                                                                //COBOL==> MOVE CL1-GENDER TO ADA4-SEX.
            WS.ADA4_CLIENT_POINTER21.SetValue(WS.WS9_CLIENT_POINTER.GetSubstring(11));                          //COBOL==> MOVE WS9-CLIENT-POINTER ( 11: ) TO ADA4-CLIENT-POINTER21.
            WS.CUR_KEY.SetValue(WS.ADA4_ID_KEY);                                                                //COBOL==> MOVE ADA4-ID-KEY TO CUR-KEY.
            if ((((!(WS.CUR_ID.IsEqualTo(WS.BSC_ID)))
             || (!(WS.CUR_NAME.IsEqualTo(WS.BSC_NAME))))
             || (!(WS.CUR_SSN.IsEqualTo(WS.BSC_SSN))))
             || (!(WS.CUR_DOB_SEX.IsEqualTo(WS.BSC_DOB_SEX))))  //COBOL==> IF CUR-ID NOT = BSC-ID OR CUR-NAME NOT = BSC-NAME OR CUR-SSN NOT = BSC-SSN OR CUR-DOB-SEX NOT = BSC-DOB-SEX
            {
                WS.I1.Add(1);                                                                                       //COBOL==> ADD 1 TO I1
                if (WS.I1.IsEqualTo(WS.OCCUR_MAX))                                                                  //COBOL==> IF I1 = OCCUR-MAX
                {
                    LS.UNIQUE_KEY_0003.SetValue(WS.CUR_KEY);                                                            //COBOL==> MOVE CUR-KEY TO UNIQUE-KEY-0003
                    WS.EXIT_READ.SetValue("Y");                                                                         //COBOL==> MOVE 'Y' TO EXIT-READ
                    M_4300_CLOSE_ID_VIEW("M_7200_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 4300-CLOSE-ID-VIEW
                }                                                                                                   //COBOL==> END-IF
                if (WS.I1.IsLessThan(WS.OCCUR_MAX))                                                                 //COBOL==> IF I1 < OCCUR-MAX
                {
                    LS.LAST_NAME_0004[WS.I1.AsInt()].SetValue(WS.CUR_LAST_NAME);                                        //COBOL==> MOVE CUR-LAST-NAME TO LAST-NAME-0004 ( I1 )
                    LS.FIRST_NAME_0004[WS.I1.AsInt()].SetValue(WS.CUR_FIRST_NAME);                                      //COBOL==> MOVE CUR-FIRST-NAME TO FIRST-NAME-0004 ( I1 )
                    LS.MIDDLE_INITIAL_0004[WS.I1.AsInt()].SetValue(WS.CUR_INITIAL);                                     //COBOL==> MOVE CUR-INITIAL TO MIDDLE-INITIAL-0004 ( I1 )
                    LS.DOB_0004XX[WS.I1.AsInt()].SetValue("00000000");                                                  //COBOL==> MOVE '00000000' TO DOB-0004XX ( I1 )
                    if ((WS.CUR_DOB_X8.IsNumericValue())
             && (WS.CUR_DOB_X8.IsGreaterThan("00010101")))  //COBOL==> IF CUR-DOB-X8 NUMERIC AND CUR-DOB-X8 > '00010101'
                    {
                        LS.DOB_0004XX[WS.I1.AsInt()].SetValue(WS.CUR_DOB_X8);                                               //COBOL==> MOVE CUR-DOB-X8 TO DOB-0004XX ( I1 )
                    }                                                                                                   //COBOL==> END-IF
                    LS.SEX_0004[WS.I1.AsInt()].SetValue(WS.CUR_SEX);                                                    //COBOL==> MOVE CUR-SEX TO SEX-0004 ( I1 )
                    LS.SSN_0004[WS.I1.AsInt()].SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO SSN-0004 ( I1 )
                    if ((WS.CUR_SSN_X9.IsNumericValue())
             && (WS.CUR_SSN_X9.IsGreaterThan("000000000"))) //COBOL==> IF CUR-SSN-X9 NUMERIC AND CUR-SSN-X9 > '000000000'
                    {
                        LS.SSN_0004[WS.I1.AsInt()].SetValue(WS.CUR_SSN_X9);                                                 //COBOL==> MOVE CUR-SSN-X9 TO SSN-0004 ( I1 )
                    }                                                                                                   //COBOL==> END-IF
                    LS.FLAG_0009[WS.I1.AsInt()].SetValue(WS.CUR_SYS_PART_FACTS);                                        //COBOL==> MOVE CUR-SYS-PART-FACTS TO FLAG-0009 ( I1 )
                    LS.FLAG_0008[WS.I1.AsInt()].SetValue(WS.CUR_SYS_PART_AE);                                           //COBOL==> MOVE CUR-SYS-PART-AE TO FLAG-0008 ( I1 )
                    LS.FLAG_0007[WS.I1.AsInt()].SetValue(WS.CUR_SYS_PART_CSE);                                          //COBOL==> MOVE CUR-SYS-PART-CSE TO FLAG-0007 ( I1 )
                    LS.FLAG_0006[WS.I1.AsInt()].SetValue(WS.CUR_SYS_PART_KANPAY);                                       //COBOL==> MOVE CUR-SYS-PART-KANPAY TO FLAG-0006 ( I1 )
                    LS.FLAG_0005[WS.I1.AsInt()].SetValue(WS.CUR_SYS_PART_KSCARES);                                      //COBOL==> MOVE CUR-SYS-PART-KSCARES TO FLAG-0005 ( I1 )
                    LS.UNIQUE_KEY_0004[WS.I1.AsInt()].SetValue(WS.CUR_KEY);                                             //COBOL==> MOVE CUR-KEY TO UNIQUE-KEY-0004 ( I1 )
                    LS.FLAG_0014[WS.I1.AsInt()].SetValue(WS.CUR_ACT_FACTS);                                             //COBOL==> MOVE CUR-ACT-FACTS TO FLAG-0014 ( I1 )
                    LS.FLAG_0013[WS.I1.AsInt()].SetValue(WS.CUR_ACT_AE);                                                //COBOL==> MOVE CUR-ACT-AE TO FLAG-0013 ( I1 )
                    LS.FLAG_0012[WS.I1.AsInt()].SetValue(WS.CUR_ACT_CSE);                                               //COBOL==> MOVE CUR-ACT-CSE TO FLAG-0012 ( I1 )
                    LS.FLAG_0011[WS.I1.AsInt()].SetValue(WS.CUR_ACT_KANPAY);                                            //COBOL==> MOVE CUR-ACT-KANPAY TO FLAG-0011 ( I1 )
                    LS.FLAG_0010[WS.I1.AsInt()].SetValue(WS.CUR_ACT_KSCARES);                                           //COBOL==> MOVE CUR-ACT-KSCARES TO FLAG-0010 ( I1 )
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_LOAD_ARRAY") { M_GET_ACTIVE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_ACTIVE
        /// </summary>
        /// <remarks>
        ///COMMENT:  DETERMINE WHICH SYSTEMS THE CLIENT IS ACTIVE ON
        ///COMMENT: ** GQB 04/04/2014 - CHECK PARTICIPATION TABLE
        /// </remarks>
        private void M_GET_ACTIVE(string returnMethod = "")
        {
            M_7200_CHECK_AE_PARTICIPATION("M_7200_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 7200-CHECK-AE-PARTICIPATION THRU 7200-EXIT.
            if (!(WS.WS9_ABEND_TYPE_NONE.Value))                                                               //COBOL==> IF NOT WS9-ABEND-TYPE-NONE
            {
                WS.ABEND_TYPE.SetValue("A");                                                                        //COBOL==> MOVE 'A' TO ABEND-TYPE
                WS.ADA_FILE_ACTION.SetValue("RLF");                                                                 //COBOL==> MOVE 'RLF' TO ADA-FILE-ACTION
                WS.ADA_FILE_NUMBER.SetValue(161);                                                                   //COBOL==> MOVE 161 TO ADA-FILE-NUMBER
                WS.ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO ADA-RESPONSE-CD
                M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
            }                                                                                                   //COBOL==> END-IF.
            if (WS.DBK1_COUNT.IsGreaterThan(ZEROS))                                                             //COBOL==> IF DBK1-COUNT > ZERO
            {
                WS.CUR_ACT_AE.SetValue("A");                                                                        //COBOL==> MOVE 'A' TO CUR-ACT-AE
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_GET_ACTIVE") { M_CICS_ABEND(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CICS_ABEND
        /// </summary>
        private void M_CICS_ABEND(string returnMethod = "")
        {
            WS.ABEND_TYPE.SetValue("C");                                                                        //COBOL==> MOVE 'C' TO ABEND-TYPE.
            WS.CICS_RESOURCE_NM.SetValue(Control.EIBRSRCE);                                                     //COBOL==> MOVE EIBRSRCE TO CICS-RESOURCE-NM.
            WS.CICS_FUNCTION_CD.SetValue(Control.EIBFN);                                                        //COBOL==> MOVE EIBFN TO CICS-FUNCTION-CD.
            WS.CICS_RESPONSE_CD.SetValue(Control.EIBRCODE);                                                     //COBOL==> MOVE EIBRCODE TO CICS-RESPONSE-CD.
            M_END_PROGRAM(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM END-PROGRAM.
            if (returnMethod != "" && returnMethod != "M_CICS_ABEND") { M_ADABAS_ABEND(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ADABAS_ABEND
        /// </summary>
        private void M_ADABAS_ABEND(string returnMethod = "")
        {
            LS.TYPE_0002.SetValue(WS.ABEND_TYPE);                                                               //COBOL==> MOVE ABEND-TYPE TO TYPE-0002.
            LS.ADABAS_FILE_NUMBER_0002.SetValue(WS.ADA_FILE_NUMBER);                                            //COBOL==> MOVE ADA-FILE-NUMBER TO ADABAS-FILE-NUMBER-0002.
            LS.ADABAS_FILE_ACTION_0002.SetValue(WS.ADA_FILE_ACTION);                                            //COBOL==> MOVE ADA-FILE-ACTION TO ADABAS-FILE-ACTION-0002.
            LS.ADABAS_RESPONSE_CD_0002.SetValue(WS.ADA_RESPONSE_CD);                                            //COBOL==> MOVE ADA-RESPONSE-CD TO ADABAS-RESPONSE-CD-0002.
            LS.CICS_RESOURCE_NM_0002.SetValue(WS.CICS_RESOURCE_NM);                                             //COBOL==> MOVE CICS-RESOURCE-NM TO CICS-RESOURCE-NM-0002.
            LS.CICS_FUNCTION_CD_0002.SetValue(WS.CICS_FUNCTION_CD);                                             //COBOL==> MOVE CICS-FUNCTION-CD TO CICS-FUNCTION-CD-0002.
            LS.CICS_RESPONSE_CD_0002.SetValue(WS.CICS_RESPONSE_CD);                                             //COBOL==> MOVE CICS-RESPONSE-CD TO CICS-RESPONSE-CD-0002.
            M_END_PROGRAM(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM END-PROGRAM.
            if (returnMethod != "" && returnMethod != "M_ADABAS_ABEND") { M_INITIALIZE_DATA(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_INITIALIZE_DATA
        /// </summary>
        private void M_INITIALIZE_DATA(string returnMethod = "")
        {
            LS.OUTPUT_0002EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE OUTPUT-0002EV.
            LS.OUTPUT_NEXT_KEY_0003EV.ResetToInitialValue();                                                    //COBOL==> INITIALIZE OUTPUT-NEXT-KEY-0003EV.
            WS.OUTPUT_GROUP_ALIASES_0001PS.SetValue(1);                                                         //COBOL==> MOVE 1 TO OUTPUT-GROUP-ALIASES-0001PS.
            LS.OUTPUT_GROUP_ALIASES_0001RG.ResetToInitialValue();                                               //COBOL==> INITIALIZE OUTPUT-GROUP-ALIASES-0001RG.
            WS.ABEND_FIELDS.ResetToInitialValue();                                                              //COBOL==> INITIALIZE ABEND-FIELDS.
            WS.CUR_DATA.ResetToInitialValue();                                                                  //COBOL==> INITIALIZE CUR-DATA.
            WS.I1.ResetToInitialValue();                                                                        //COBOL==> INITIALIZE I1.
            WS.EXIT_READ.ResetToInitialValue();                                                                 //COBOL==> INITIALIZE EXIT-READ.
            SetHandleCondtions(HandleCondition.ERROR, "M_CICS_ABEND");                                          //COBOL==> EXEC CICS HANDLE CONDITION ERROR ( CICS-ABEND ) END-EXEC.
            Control.GetLatestDateTime(WS.ABS_TIME);                                                             //COBOL==> EXEC CICS ASKTIME ABSTIME ( ABS-TIME ) END-EXEC.
            DateConverter.ConvertABSTime(WS.ABS_TIME, DateTimeFormat.YYYYMMDD, WS.CUR_DATE, "", null, "");      //COBOL==> EXEC CICS FORMATTIME ABSTIME ( ABS-TIME ) YYYYMMDD ( CUR-DATE ) END-EXEC.
            WS.CMP_DATE.SetComputeValue(99999999m - WS.CUR_DATE.AsDecimal());                                   //COBOL==> COMPUTE CMP-DATE = 99999999 - CUR-DATE.
                                                                                                                //COMMENT: ** GQB 04/04/2014 - CREATE TODAYS DATE IN DB2 FORMAT
            WS.DBK1_CCYY.SetValue(WS.CUR_DATE.GetSubstring(1, 4));                                              //COBOL==> MOVE CUR-DATE ( 1:4 ) TO DBK1-CCYY.
            WS.DBK1_MM.SetValue(WS.CUR_DATE.GetSubstring(5, 2));                                                //COBOL==> MOVE CUR-DATE ( 5:2 ) TO DBK1-MM.
            WS.DBK1_DD.SetValue(WS.CUR_DATE.GetSubstring(7, 2));                                                //COBOL==> MOVE CUR-DATE ( 7:2 ) TO DBK1-DD.
            if (returnMethod != "" && returnMethod != "M_INITIALIZE_DATA") { M_END_PROGRAM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_END_PROGRAM
        /// </summary>
        private void M_END_PROGRAM(string returnMethod = "")
        {
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_4100_OPEN_ID_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 04/04/2014 - ADDED NEW CODE FOR DB2 ID-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_4100_OPEN_ID_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'DBK1-CLIENT-NUMBER    ID=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NAME      ID=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-SSN              ID=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-DATE-OF-BIRTH    ID=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-DATE-OF-BIRTH          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-GENDER           ID=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-GENDER                 TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.OpenReader("ID-VIEW");                                                                       //COBOL==> EXEC SQL OPEN ID-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_4100_OPEN_ID_VIEW") { M_4100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4100_EXIT
        /// </summary>
        private void M_4100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4100_EXIT") { M_4200_FETCH_ID_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4200_FETCH_ID_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 04/04/2014 - ADDED NEW CODE FOR DB2 ID-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_4200_FETCH_ID_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.FetchReaderRow("ID-VIEW",                                                                 //COBOL==> EXEC SQL FETCH ID-VIEW INTO :CL1-FK-CLB-CLIENT-NO , :CL1-CLIENT-NAME , :CL1-SSN , :CL1-DATE-OF-BIRTH , :CL1-GENDER , :CL1-VERIFIED-SSN-FLAG END-EXEC.
                             WS.CL1_FK_CLB_CLIENT_NO, WS.CL1_CLIENT_NAME, WS.CL1_SSN, WS.CL1_DATE_OF_BIRTH, WS.CL1_GENDER, WS.CL1_VERIFIED_SSN_FLAG);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_4200_FETCH_ID_VIEW") { M_4200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4200_EXIT
        /// </summary>
        private void M_4200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4200_EXIT") { M_4300_CLOSE_ID_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4300_CLOSE_ID_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 04/04/2014 - ADDED NEW CODE FOR DB2 ID-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_4300_CLOSE_ID_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            DbConv.CloseReader("ID-VIEW");                                                                      //COBOL==> EXEC SQL CLOSE ID-VIEW END-EXEC.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                M_4300_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 4300-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_4300_CLOSE_ID_VIEW") { M_4300_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4300_EXIT
        /// </summary>
        private void M_4300_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4300_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4300_EXIT") { M_7200_CHECK_AE_PARTICIPATION(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7200_CHECK_AE_PARTICIPATION
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 07/25/2014 - MODIFICATION PERFORMED.
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_7200_CHECK_AE_PARTICIPATION(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.DBK1_COUNT.ResetToInitialValue();                                                                //COBOL==> INITIALIZE DBK1-COUNT.
            DbConv.ExecuteSqlQueryWithUR("SELECT COUNT ( * ) INTO {0} FROM KSD_PARTICIPATION WHERE FK_CLB_CLIENT_NO = {1} AND PART_START_DATE <= {2} AND PART_END_DATE >= {3} ",  //COBOL==> EXEC SQL SELECT COUNT ( * ) INTO :DBK1-COUNT FROM KSD_PARTICIPATION WHERE FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER AND PART_START_DATE <= :DBK1-CCYYMMDD AND PART_END_DATE >= :DBK1-CCYYMMDD WITH UR END-EXEC.
                                 WS.DBK1_COUNT, WS.DBK9_CLIENT_NUMBER, WS.DBK1_CCYYMMDD, WS.DBK1_CCYYMMDD);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            // Process Multiple  WHEN  statements                                                               //COBOL==> WHEN ZERO
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()) || ((DbConv.SQLCA.SQLCODE.IsEqualTo(100))))                   //COBOL==> WHEN 100
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(161);                                                               //COBOL==> MOVE 161 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_7200_CHECK_AE_PARTICIPATION") { M_7200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7200_EXIT
        /// </summary>
        private void M_7200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7200_EXIT") { M_91100_CONVERT_DATE_ADA_TO_DB2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_91100_CONVERT_DATE_ADA_TO_DB2 //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 04/04/2014 - CLIENT POINTER INFORMATION CODE AREA
        ///COMMENT: ****************************************************************
        ///COMMENT:                                                                *
        ///COMMENT:  INCLUDE NAME:  SWCSZG88.                                      *
        ///COMMENT:      EAB NAME:  EXTERNAL PROGRAMS CONVERTED TO DB2             *
        ///COMMENT:   DESCRIPTION:  98000-SELECT-CLIENT-BASIC.                     *
        ///COMMENT:                 99000-CLIENT-POINTER-ROUTINE.                  *
        ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                            *
        ///COMMENT:                                                                *
        ///COMMENT:       ACTIONS:  1. SELECT KSD_CLIENT
        ///COMMENT:                    USING CLIENT NUMBER, CLIENT NAME, CLIENT SSN
        ///COMMENT:                      RETURN VERIFIED-SSN-FLAG
        ///COMMENT:                 2. FETCH KSD_SYSTEM_PART
        ///COMMENT:                    USING CLIENT NUMBER, CLIENT NAME, CLIENT SSN
        ///COMMENT:                      RETURN SYSTEM CODE, PARTICIPATION FLAG
        ///COMMENT:                 3. POPULATE CLIENT POINTER WITH RETURN FIELDS
        ///COMMENT:       CREATED:  27-FEB-2014.
        ///COMMENT:            BY:  GQB - GADI BRAMSON                             *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                       CHANGE
        ///COMMENT:    DATE      AUTHOR   CONTROL DESCRIPTION
        ///COMMENT:  ---------- --------- ------- ----------------------------------
        ///COMMENT:  02/17/2014 G.BRAMSON CQ35825 ADABAS TO DB2 KEES PHASE 3 CHANGES
        ///COMMENT:  02/27/2014 G.BRAMSON CQ35825 BUILD AND RETURN CLIENT POINTER
        ///COMMENT:  03/04/2014 G.BRAMSON CQ35825 READ CLIENT BASIC
        ///COMMENT:  03/05/2014 G.BRAMSON CQ35825 CONVERT DATES ADABAS TO DB2 VERS.
        ///COMMENT:  07/24/2014 G.BRAMSON CQ35825 SKIP CLIENT SELECT DEPENDING FLAG.
        ///COMMENT:  08/29/2017 RKM               ADD WITH UR TO QUERIES
        ///COMMENT: ****************************************************************
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_91100_CONVERT_DATE_ADA_TO_DB2(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            // EvaluateList !TRUE!                                                                              //COBOL==> EVALUATE TRUE
            if ((WS.WS9_DATE_ADA.IsSpaces()) || (WS.WS9_DATE_ADA.IsEqualTo(0)))                             //COBOL==> WHEN WS9-DATE-ADA = SPACE OR WS9-DATE-ADA = ZERO
            {
                WS.WS9_DATE_ADA.SetValue("00010101");                                                               //COBOL==> MOVE '00010101' TO WS9-DATE-ADA
            }                                                                                               //COBOL==> WHEN WS9-DATE-ADA = '99999999'
            else
            if (WS.WS9_DATE_ADA.IsEqualTo("99999999"))
            {
                WS.WS9_DATE_ADA.SetValue("20991231");                                                               //COBOL==> MOVE '20991231' TO WS9-DATE-ADA
            }                                                                                                   //COBOL==> END-EVALUATE.
            WS.WS9_DATE_DB2.SetValueOfSubstring(5, 1, "-");                                                     //COBOL==> MOVE '-' TO WS9-DATE-DB2 ( 5:1 ) WS9-DATE-DB2 ( 8:1 ) .
            WS.WS9_DATE_DB2.SetValueOfSubstring(8, 1, "-");
            WS.WS9_DATE_DB2.SetValueOfSubstring(1, 4, WS.WS9_DATE_ADA.GetSubstring(1, 4).AsString());           //COBOL==> MOVE WS9-DATE-ADA ( 1:4 ) TO WS9-DATE-DB2 ( 1:4 ) .
            WS.WS9_DATE_DB2.SetValueOfSubstring(6, 2, WS.WS9_DATE_ADA.GetSubstring(5, 2).AsString());           //COBOL==> MOVE WS9-DATE-ADA ( 5:2 ) TO WS9-DATE-DB2 ( 6:2 ) .
            WS.WS9_DATE_DB2.SetValueOfSubstring(9, 2, WS.WS9_DATE_ADA.GetSubstring(7, 2).AsString());           //COBOL==> MOVE WS9-DATE-ADA ( 7:2 ) TO WS9-DATE-DB2 ( 9:2 ) .
            if (returnMethod != "" && returnMethod != "M_91100_CONVERT_DATE_ADA_TO_DB2") { M_91100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_91100_EXIT
        /// </summary>
        private void M_91100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_91100_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_91100_EXIT") { M_91200_CONVERT_DATE_DB2_TO_ADA(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_91200_CONVERT_DATE_DB2_TO_ADA //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_91200_CONVERT_DATE_DB2_TO_ADA(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.WS9_DATE_ADA.SetValueOfSubstring(1, 4, WS.WS9_DATE_DB2.GetSubstring(1, 4).AsString());           //COBOL==> MOVE WS9-DATE-DB2 ( 1:4 ) TO WS9-DATE-ADA ( 1:4 ) .
            WS.WS9_DATE_ADA.SetValueOfSubstring(5, 2, WS.WS9_DATE_DB2.GetSubstring(6, 2).AsString());           //COBOL==> MOVE WS9-DATE-DB2 ( 6:2 ) TO WS9-DATE-ADA ( 5:2 ) .
            WS.WS9_DATE_ADA.SetValueOfSubstring(7, 2, WS.WS9_DATE_DB2.GetSubstring(9, 2).AsString());           //COBOL==> MOVE WS9-DATE-DB2 ( 9:2 ) TO WS9-DATE-ADA ( 7:2 ) .
            if (returnMethod != "" && returnMethod != "M_91200_CONVERT_DATE_DB2_TO_ADA") { M_91200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_91200_EXIT
        /// </summary>
        private void M_91200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_91200_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_91200_EXIT") { M_98000_SELECT_CLIENT_BASIC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_98000_SELECT_CLIENT_BASIC //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_98000_SELECT_CLIENT_BASIC(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.ExecuteSqlQueryWithUR("SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , SSN , GENDER , DATE_OF_BIRTH INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {8} ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , SSN , GENDER , DATE_OF_BIRTH INTO :CLB9-CLIENT-NUMBER , :CLB9-CLIENT-GIVEN-NAME , :CLB9-CLIENT-INITIALS , :CLB9-CLIENT-SURNAME , :CLB9-CIS-REPL-IND , :CLB9-SSN , :CLB9-GENDER , :CLB9-DATE-OF-BIRTH FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :DBK9-CLIENT-NUMBER WITH UR END-EXEC.
                                 WS.CLB9_CLIENT_NUMBER, WS.CLB9_CLIENT_GIVEN_NAME, WS.CLB9_CLIENT_INITIALS, WS.CLB9_CLIENT_SURNAME, WS.CLB9_CIS_REPL_IND, WS.CLB9_SSN, WS.CLB9_GENDER, WS.CLB9_DATE_OF_BIRTH, WS.DBK9_CLIENT_NUMBER);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(154);                                                               //COBOL==> MOVE 154 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue(" NF");                                                             //COBOL==> MOVE ' NF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO WS9-ADA-RESPONSE-CD
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(154);                                                               //COBOL==> MOVE 154 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RI");                                                              //COBOL==> MOVE 'RI' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_98000_SELECT_CLIENT_BASIC") { M_98000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_98000_EXIT
        /// </summary>
        private void M_98000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_98000_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_98000_EXIT") { M_98100_SELECT_CLIENT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_98100_SELECT_CLIENT //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_98100_SELECT_CLIENT(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '98100-SELECT-CLIENT:' SW9-SELECT-CLIENT-SW
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.ExecuteSqlQueryWithUR("SELECT VERIFIED_SSN_FLAG INTO {0} FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = {1} AND CLIENT_NAME = {2} AND SSN = {3} ",  //COBOL==> EXEC SQL SELECT VERIFIED_SSN_FLAG INTO :CL9-VERIFIED-SSN-FLAG FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER AND CLIENT_NAME = :DBK9-CLIENT-NAME AND SSN = :DBK9-SSN WITH UR END-EXEC.
                                 WS.CL9_VERIFIED_SSN_FLAG, WS.DBK9_CLIENT_NUMBER, WS.DBK9_CLIENT_NAME, WS.DBK9_SSN);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL9_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL9-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue(" NF");                                                             //COBOL==> MOVE ' NF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO WS9-ADA-RESPONSE-CD
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_98100_SELECT_CLIENT") { M_98100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_98100_EXIT
        /// </summary>
        private void M_98100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_98100_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_98100_EXIT") { M_99000_CLIENT_POINTER_ROUTINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99000_CLIENT_POINTER_ROUTINE //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99000_CLIENT_POINTER_ROUTINE(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            M_99100_PROCESS_INIT("M_99100_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 99100-PROCESS-INIT.
            M_99200_PROCESS_MAIN("M_99200_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 99200-PROCESS-MAIN.
            if (returnMethod != "" && returnMethod != "M_99000_CLIENT_POINTER_ROUTINE") { M_99000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99000_EXIT
        /// </summary>
        private void M_99000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99000_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99000_EXIT") { M_99100_PROCESS_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99100_PROCESS_INIT //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99100_PROCESS_INIT(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     INITIALIZE WS9-CLIENT-POINTER
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            WS.WS9_CLIENT_ID.SetValue(WS.DBK9_CLIENT_NUMBER);                                                   //COBOL==> MOVE DBK9-CLIENT-NUMBER TO WS9-CLIENT-ID.
            WS.SW9_EOF_NOT_FOUND.SetValue(true);                                                                //COBOL==> SET SW9-EOF-NOT-FOUND TO TRUE.
            WS.SW9_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW9-ERR-NO TO TRUE.
            if (returnMethod != "" && returnMethod != "M_99100_PROCESS_INIT") { M_99100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99100_EXIT
        /// </summary>
        private void M_99100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99100_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99100_EXIT") { M_99200_PROCESS_MAIN(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99200_PROCESS_MAIN //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99200_PROCESS_MAIN(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '992200- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            if (WS.SW9_SELECT_CLIENT_YES.Value)                                                                 //COBOL==> IF SW9-SELECT-CLIENT-YES
            {
                M_98100_SELECT_CLIENT("M_98100_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 98100-SELECT-CLIENT
                if (!(DbConv.SQLCA.SQLCODE.IsEqualTo(0)))                                                           //COBOL==> IF SQLCODE NOT = ZERO
                {
                    M_99200_EXIT(CheckGotoReturn(returnMethod)); return;                                                //COBOL==> GO TO 99200-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:     PERFORM 99400-DECLARE-SPA-VIEW.
                                                                                                                //COMMENT:     IF SW9-ERR-YES
                                                                                                                //COMMENT:        GO TO 99200-EXIT
                                                                                                                //COMMENT:     END-IF.
            M_99500_OPEN_SPA_VIEW("M_99500_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 99500-OPEN-SPA-VIEW.
            if (WS.SW9_ERR_YES.Value)                                                                           //COBOL==> IF SW9-ERR-YES
            {
                M_99200_EXIT(CheckGotoReturn(returnMethod)); return;                                                //COBOL==> GO TO 99200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            while (!((WS.SW9_EOF_YES.Value) || (WS.SW9_ERR_YES.Value)))                                         //COBOL==> PERFORM 99600-FETCH-SPA-VIEW UNTIL SW9-EOF-YES OR SW9-ERR-YES.
            {
                M_99600_FETCH_SPA_VIEW("M_99600_EXIT"); if (Control.ExitProgram) { return; }
            }
            M_99900_CLOSE_SPA_VIEW("M_99900_EXIT"); if (Control.ExitProgram) { return; }                          //COBOL==> PERFORM 99900-CLOSE-SPA-VIEW THRU 99900-EXIT.
            if (returnMethod != "" && returnMethod != "M_99200_PROCESS_MAIN") { M_99200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99200_EXIT
        /// </summary>
        private void M_99200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99200_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99200_EXIT") { M_99400_DECLARE_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99400_DECLARE_SPA_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99400_DECLARE_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99400- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW.
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'CLIENT NUMBER/SPA-VIEW  =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK9-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'SSN/SPA-VIEW            =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK9-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'CLIENT NAME/SPA-VIEW    =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK9-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER AND FK_CLI_CLIENT_NAME = :DBK9-CLIENT-NAME AND FK_CLI_SSN = :DBK9-SSN WITH UR END-EXEC.
            if (returnMethod != "" && returnMethod != "M_99400_DECLARE_SPA_VIEW") { M_99400_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99400_EXIT
        /// </summary>
        private void M_99400_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99400_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99400_EXIT") { M_99500_OPEN_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99500_OPEN_SPA_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99500_OPEN_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99500- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            DbConv.OpenReader("SPA-VIEW");                                                                      //COBOL==> EXEC SQL OPEN SPA-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW9_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW9-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99500_OPEN_SPA_VIEW") { M_99500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99500_EXIT
        /// </summary>
        private void M_99500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99500_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99500_EXIT") { M_99600_FETCH_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99600_FETCH_SPA_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99600_FETCH_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99600- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            DbConv.FetchReaderRow("SPA-VIEW",                                                                //COBOL==> EXEC SQL FETCH SPA-VIEW INTO :SP9-SYSTEM-CODE , :SP9-PARTICIPATION-FLAG END-EXEC.
                             WS.SP9_SYSTEM_CODE, WS.SP9_PARTICIPATION_FLAG);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.SW9_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW9-EOF-NO TO TRUE
                M_99610_POPULATE_SYSTEM_CODE("M_99610_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 99610-POPULATE-SYSTEM-CODE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW9_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW9-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW9_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW9-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99600_FETCH_SPA_VIEW") { M_99600_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99600_EXIT
        /// </summary>
        private void M_99600_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99600_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99600_EXIT") { M_99610_POPULATE_SYSTEM_CODE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99610_POPULATE_SYSTEM_CODE //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99610_POPULATE_SYSTEM_CODE(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            // EvaluateList !TRUE!                                                                              //COBOL==> EVALUATE TRUE
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_AE))                                        //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-AE
            {
                WS.WS9_SYS_PART_AE.SetValue(WS.SP9_PARTICIPATION_FLAG);                                             //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-AE
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-CS
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_CS))
            {
                WS.WS9_SYS_PART_CSE.SetValue(WS.SP9_PARTICIPATION_FLAG);                                            //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-CSE
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-KA
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_KA))
            {
                WS.WS9_SYS_PART_KANPAY.SetValue(WS.SP9_PARTICIPATION_FLAG);                                         //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-KANPAY
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-KS
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_KS))
            {
                WS.WS9_SYS_PART_KSCARES.SetValue(WS.SP9_PARTICIPATION_FLAG);                                        //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-KSCARES
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-FA
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_FA))
            {
                WS.WS9_SYS_PART_FACTS.SetValue(WS.SP9_PARTICIPATION_FLAG);                                          //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-FACTS
            }                                                                                               //COBOL==> WHEN OTHER
            else
            {
                //COMMENT: ** GQB DISPLAY SQL ERROR MESSAGE ***
                WS.WS9_MSG_1.SetValue("99610-POPULATE FAILED.    SYSTEM-CODE NOT DEFINED=");                        //COBOL==> MOVE '99610-POPULATE FAILED.    SYSTEM-CODE NOT DEFINED=' TO WS9-MSG-1
                WS.WS9_MSG_CODE.SetValue(WS.SP9_SYSTEM_CODE);                                                       //COBOL==> MOVE SP9-SYSTEM-CODE TO WS9-MSG-CODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99610_POPULATE_SYSTEM_CODE") { M_99610_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99610_EXIT
        /// </summary>
        private void M_99610_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99610_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99610_EXIT") { M_99900_CLOSE_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99900_CLOSE_SPA_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99900_CLOSE_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99900- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            DbConv.CloseReader("SPA-VIEW");                                                                     //COBOL==> EXEC SQL CLOSE SPA-VIEW END-EXEC.
            if (WS.SW9_ERR_YES.Value)                                                                           //COBOL==> IF SW9-ERR-YES
            {
                M_99900_EXIT(CheckGotoReturn(returnMethod)); return;                                                //COBOL==> GO TO 99900-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                              //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW9_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW9-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99900_CLOSE_SPA_VIEW") { M_99900_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99900_EXIT
        /// </summary>
        private void M_99900_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99900_EXIT") { return; }                                                     //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
