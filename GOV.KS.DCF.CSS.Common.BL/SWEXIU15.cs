#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:51:52 PM
   **        *   FROM COBOL PGM   :  SWEXIU15
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                              COOL:GEN
               COPYRIGHT 1999, STERLING SOFTWARE, INC.
       NAME: EAB_UPDATE_NON_CASE_PERSON       DATE: 1999/01/05
       TARGET OS:   MVS                       TIME: 13:39:14
       TARGET DBMS: DB2                       USER: SWSRGMB
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
   **************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Control.CICS;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXIU15_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXIU15_ws_WorkingStorage";
            internal const string EXTERNAL_ACTION_BLOCK_WS = "EXTERNAL_ACTION_BLOCK_WS";
            internal const string SRADALNK = "SRADALNK";
            internal const string SRMODLNK = "SRMODLNK";
            internal const string MV_ABEND_FIELDS = "MV_ABEND_FIELDS";
            internal const string MV_ABEND_TYPE = "MV_ABEND_TYPE";
            internal const string MV_ABEND_TYPE_NONE = "MV_ABEND_TYPE_NONE";
            internal const string MV_ABEND_TYPE_ADABAS = "MV_ABEND_TYPE_ADABAS";
            internal const string MV_ABEND_TYPE_CICS = "MV_ABEND_TYPE_CICS";
            internal const string MV_ABEND_ADABAS = "MV_ABEND_ADABAS";
            internal const string MV_ADA_FILE_NUMBER = "MV_ADA_FILE_NUMBER";
            internal const string MV_ADA_FILE_ACTION = "MV_ADA_FILE_ACTION";
            internal const string MV_ADA_RESPONSE_CD = "MV_ADA_RESPONSE_CD";
            internal const string MV_ABEND_CICS = "MV_ABEND_CICS";
            internal const string MV_CICS_RESOURCE_NM = "MV_CICS_RESOURCE_NM";
            internal const string MV_CICS_FUNCTION_CD = "MV_CICS_FUNCTION_CD";
            internal const string MV_CICS_RESPONSE_CD = "MV_CICS_RESPONSE_CD";
            internal const string MV_ABS_TIME = "MV_ABS_TIME";
            internal const string MV_CCYYMMDD_X8 = "MV_CCYYMMDD_X8";
            internal const string MV_CC = "MV_CC";
            internal const string MV_YYMMDD_X6 = "MV_YYMMDD_X6";
            internal const string MV_YY = "MV_YY";
            internal const string MV_MM = "MV_MM";
            internal const string MV_DD = "MV_DD";
            internal const string MV_YYMMDD = "MV_YYMMDD";
            internal const string MV_CURRENT_CCYY = "MV_CURRENT_CCYY";
            internal const string MV_CURRENT_MMDD = "MV_CURRENT_MMDD";
            internal const string MV_CCYYMMDD = "MV_CCYYMMDD";
            internal const string MV_COMPLEMENT_DATE = "MV_COMPLEMENT_DATE";
            internal const string MV_WRK_PTR = "MV_WRK_PTR";
            internal const string MV_ISN = "MV_ISN";
            internal const string MV_CLIENT_INFO_NUMBER = "MV_CLIENT_INFO_NUMBER";
            internal const string MV_CLIENT_FOUND_IND = "MV_CLIENT_FOUND_IND";
            internal const string MV_CLIENT_FOUND = "MV_CLIENT_FOUND";
            internal const string MV_CLIENT_POINTER_X31 = "MV_CLIENT_POINTER_X31";
            internal const string MV_CLIENT_POINTER_X10 = "MV_CLIENT_POINTER_X10";
            internal const string MV_CLIENT_POINTER_X21 = "MV_CLIENT_POINTER_X21";
            internal const string MV_CLIENT_ID_KEY = "MV_CLIENT_ID_KEY";
            internal const string MV_CIK_CLIENT_POINTER_X10 = "MV_CIK_CLIENT_POINTER_X10";
            internal const string MV_CIK_CLIENT_NAME = "MV_CIK_CLIENT_NAME";
            internal const string MV_CIK_SSN = "MV_CIK_SSN";
            internal const string MV_CIK_DATE_OF_BIRTH_SEX = "MV_CIK_DATE_OF_BIRTH_SEX";
            internal const string MV_CIK_DATE_OF_BIRTH = "MV_CIK_DATE_OF_BIRTH";
            internal const string MV_CIK_SEX = "MV_CIK_SEX";
            internal const string MV_CIK_CLIENT_POINTER_X21 = "MV_CIK_CLIENT_POINTER_X21";
            internal const string MV_CIK_VERIFIED_SSN_FLAG = "MV_CIK_VERIFIED_SSN_FLAG";
            internal const string MV_CIK_SYSTEM_PARTICIPATION = "MV_CIK_SYSTEM_PARTICIPATION";
            internal const string MV_CIK_SYS_PART_AE = "MV_CIK_SYS_PART_AE";
            internal const string MV_CIK_SYS_PART_CSE = "MV_CIK_SYS_PART_CSE";
            internal const string MV_CIK_SYS_PART_KANPAY = "MV_CIK_SYS_PART_KANPAY";
            internal const string MV_CIK_SYS_PART_KSCARES = "MV_CIK_SYS_PART_KSCARES";
            internal const string MV_CIK_SYS_PART_FACTS = "MV_CIK_SYS_PART_FACTS";
            internal const string MV_RECORD_NAME = "MV_RECORD_NAME";
            internal const string MV_RECORD_LAST_NAME = "MV_RECORD_LAST_NAME";
            internal const string MV_RECORD_FIRST_NAME = "MV_RECORD_FIRST_NAME";
            internal const string MV_RECORD_FIRST_NAME_1 = "MV_RECORD_FIRST_NAME_1";
            internal const string MV_RECORD_FIRST_NAME_11 = "MV_RECORD_FIRST_NAME_11";
            internal const string MV_RECORD_INITIAL = "MV_RECORD_INITIAL";
            internal const string MV_PHONETIC_DATA = "MV_PHONETIC_DATA";
            internal const string MV_PHONETIC_1 = "MV_PHONETIC_1";
            internal const string MV_PHONETIC_CODE = "MV_PHONETIC_CODE";
            internal const string MV_PHONETIC_3 = "MV_PHONETIC_3";
            internal const string MV_DATE_OF_BIRTH_SEX = "MV_DATE_OF_BIRTH_SEX";
            internal const string MV_DATE_OF_BIRTH_X = "MV_DATE_OF_BIRTH_X";
            internal const string MV_SEX = "MV_SEX";
            internal const string MV_CLIENT_POINTER = "MV_CLIENT_POINTER";
            internal const string MV_CLIENT_ID = "MV_CLIENT_ID";
            internal const string MV_CLIENT_ID_910 = "MV_CLIENT_ID_910";
            internal const string MV_CLIENT_POINTER_FLAGS = "MV_CLIENT_POINTER_FLAGS";
            internal const string MV_VERIFIED_SSN_FLAG = "MV_VERIFIED_SSN_FLAG";
            internal const string MV_SYSTEM_PARTICIPATION = "MV_SYSTEM_PARTICIPATION";
            internal const string MV_SYS_PART_AE = "MV_SYS_PART_AE";
            internal const string MV_SYS_PART_AE_YES = "MV_SYS_PART_AE_YES";
            internal const string MV_SYS_PART_CSE = "MV_SYS_PART_CSE";
            internal const string MV_SYS_PART_CSE_YES = "MV_SYS_PART_CSE_YES";
            internal const string MV_SYS_PART_CSE_NON = "MV_SYS_PART_CSE_NON";
            internal const string MV_SYS_PART_KANPAY = "MV_SYS_PART_KANPAY";
            internal const string MV_SYS_PART_KANPAY_YES = "MV_SYS_PART_KANPAY_YES";
            internal const string MV_SYS_PART_KSCARES = "MV_SYS_PART_KSCARES";
            internal const string MV_SYS_PART_KSCARES_YES = "MV_SYS_PART_KSCARES_YES";
            internal const string MV_SYS_PART_FACTS = "MV_SYS_PART_FACTS";
            internal const string MV_SYS_PART_FACTS_YES = "MV_SYS_PART_FACTS_YES";
            internal const string IMP_CLIENT_NUMBER_X10 = "IMP_CLIENT_NUMBER_X10";
            internal const string IMP_CLIENT_NUMBER = "IMP_CLIENT_NUMBER";
            internal const string IMP_CLIENT_KEY = "IMP_CLIENT_KEY";
            internal const string IMP_CLIENT_KEY_RED = "IMP_CLIENT_KEY_RED";
            internal const string IMP_CLIKEY_CLIENT_NUMBER = "IMP_CLIKEY_CLIENT_NUMBER";
            internal const string IMP_CLIKEY_CLIENT_NAME = "IMP_CLIKEY_CLIENT_NAME";
            internal const string IMP_CLIKEY_SSN = "IMP_CLIKEY_SSN";
            internal const string IMP_CLIKEY_DATE_OF_BIRTH = "IMP_CLIKEY_DATE_OF_BIRTH";
            internal const string IMP_CLIKEY_SEX = "IMP_CLIKEY_SEX";
            internal const string IMP_CLIKEY_VERIFIED_SSN_FLAG = "IMP_CLIKEY_VERIFIED_SSN_FLAG";
            internal const string IMP_CLIKEY_SYS_PART = "IMP_CLIKEY_SYS_PART";
            internal const string IMP_CLIENT_INFO = "IMP_CLIENT_INFO";
            internal const string IMP_NAME = "IMP_NAME";
            internal const string IMP_LAST_NAME = "IMP_LAST_NAME";
            internal const string IMP_FIRST_NAME = "IMP_FIRST_NAME";
            internal const string IMP_INITIAL = "IMP_INITIAL";
            internal const string IMP_DATE_OF_BIRTH_SEX = "IMP_DATE_OF_BIRTH_SEX";
            internal const string IMP_DATE_OF_BIRTH = "IMP_DATE_OF_BIRTH";
            internal const string IMP_SEX = "IMP_SEX";
            internal const string IMP_SOC_SEC_NUM_X9 = "IMP_SOC_SEC_NUM_X9";
            internal const string IMP_SOC_SEC_NUM = "IMP_SOC_SEC_NUM";
            internal const string IMP_SOC_SEC_NUM_3 = "IMP_SOC_SEC_NUM_3";
            internal const string IMP_SOC_SEC_NUM_3_VALID = "IMP_SOC_SEC_NUM_3_VALID";
            internal const string IMP_SOC_SEC_NUM_2 = "IMP_SOC_SEC_NUM_2";
            internal const string IMP_SOC_SEC_NUM_2_VALID = "IMP_SOC_SEC_NUM_2_VALID";
            internal const string IMP_SOC_SEC_NUM_4 = "IMP_SOC_SEC_NUM_4";
            internal const string IMP_SOC_SEC_NUM_4_VALID = "IMP_SOC_SEC_NUM_4_VALID";
            internal const string IMP_CONVERT_FLAG = "IMP_CONVERT_FLAG";
            internal const string CUR_CLIENT_INFO = "CUR_CLIENT_INFO";
            internal const string CUR_NAME = "CUR_NAME";
            internal const string CUR_LAST_NAME = "CUR_LAST_NAME";
            internal const string CUR_FIRST_NAME = "CUR_FIRST_NAME";
            internal const string CUR_INITIAL = "CUR_INITIAL";
            internal const string CUR_DATE_OF_BIRTH_SEX = "CUR_DATE_OF_BIRTH_SEX";
            internal const string CUR_DATE_OF_BIRTH_X8 = "CUR_DATE_OF_BIRTH_X8";
            internal const string CUR_DATE_OF_BIRTH = "CUR_DATE_OF_BIRTH";
            internal const string CUR_SEX = "CUR_SEX";
            internal const string CUR_SOC_SEC_NUM_X9 = "CUR_SOC_SEC_NUM_X9";
            internal const string CUR_SOC_SEC_NUM = "CUR_SOC_SEC_NUM";
            internal const string DCLKSD_CLIENT = "DCLKSD_CLIENT";
            internal const string CLIENT_SSN = "CLIENT_SSN";
            internal const string CLIENT_PREVIOUS_SSN = "CLIENT_PREVIOUS_SSN";
            internal const string CLIENT_PHONETIC_DATA = "CLIENT_PHONETIC_DATA";
            internal const string CLIENT_DT_OF_LAST_UPDATE = "CLIENT_DT_OF_LAST_UPDATE";
            internal const string CLIENT_DATE_OF_BIRTH = "CLIENT_DATE_OF_BIRTH";
            internal const string CLIENT_GENDER = "CLIENT_GENDER";
            internal const string CLIENT_VERIFIED_SSN_FLAG = "CLIENT_VERIFIED_SSN_FLAG";
            internal const string CLIENT_CLIENT_NAME = "CLIENT_CLIENT_NAME";
            internal const string CLIENT_CREATED_BY = "CLIENT_CREATED_BY";
            internal const string CLIENT_CREATED_TIMESTAMP = "CLIENT_CREATED_TIMESTAMP";
            internal const string CLIENT_LAST_MODIFIED_BY = "CLIENT_LAST_MODIFIED_BY";
            internal const string CLIENT_LAST_MODIFIED_TMST = "CLIENT_LAST_MODIFIED_TMST";
            internal const string CLIENT_FK_CLB_CLIENT_NO = "CLIENT_FK_CLB_CLIENT_NO";
            internal const string CLIENT_NAME_TYPE = "CLIENT_NAME_TYPE";
            internal const string DCLKSD_CLIENT_BASIC = "DCLKSD_CLIENT_BASIC";
            internal const string CLIENTB_CLIENT_NUMBER = "CLIENTB_CLIENT_NUMBER";
            internal const string CLIENTB_CLIENT_GIVEN_NAME = "CLIENTB_CLIENT_GIVEN_NAME";
            internal const string CLIENTB_CLIENT_INITIALS = "CLIENTB_CLIENT_INITIALS";
            internal const string CLIENTB_CLIENT_SURNAME = "CLIENTB_CLIENT_SURNAME";
            internal const string CLIENTB_CIS_REPL_IND = "CLIENTB_CIS_REPL_IND";
            internal const string CLIENTB_WORK_PHONE = "CLIENTB_WORK_PHONE";
            internal const string CLIENTB_SSN = "CLIENTB_SSN";
            internal const string CLIENTB_GENDER = "CLIENTB_GENDER";
            internal const string CLIENTB_PARENT_RGHTS_SEV = "CLIENTB_PARENT_RGHTS_SEV";
            internal const string CLIENTB_PRNT_RGHTS_SEV_DT = "CLIENTB_PRNT_RGHTS_SEV_DT";
            internal const string CLIENTB_LEGAL_STATUS = "CLIENTB_LEGAL_STATUS";
            internal const string CLIENTB_INSURANCE_CODE = "CLIENTB_INSURANCE_CODE";
            internal const string CLIENTB_INITIAL_CUSTODY_DT = "CLIENTB_INITIAL_CUSTODY_DT";
            internal const string CLIENTB_HOME_PHONE = "CLIENTB_HOME_PHONE";
            internal const string CLIENTB_DATE_OF_BIRTH = "CLIENTB_DATE_OF_BIRTH";
            internal const string CLIENTB_CURR_PLACEMNT_DT = "CLIENTB_CURR_PLACEMNT_DT";
            internal const string CLIENTB_CURRENT_PLACEMENT = "CLIENTB_CURRENT_PLACEMENT";
            internal const string CLIENTB_CSEA_G_CAUSE_CODE = "CLIENTB_CSEA_G_CAUSE_CODE";
            internal const string CLIENTB_CSEA_G_CAUSE_CL_DT = "CLIENTB_CSEA_G_CAUSE_CL_DT";
            internal const string CLIENTB_CSEA_COOP_CODE = "CLIENTB_CSEA_COOP_CODE";
            internal const string CLIENTB_COUNTY_CRT_COMMIT = "CLIENTB_COUNTY_CRT_COMMIT";
            internal const string CLIENTB_MONTHS_ASST_AF = "CLIENTB_MONTHS_ASST_AF";
            internal const string CLIENTB_MONTHS_ASST_GA = "CLIENTB_MONTHS_ASST_GA";
            internal const string CLIENTB_MO_DEATH_DT = "CLIENTB_MO_DEATH_DT";
            internal const string CLIENTB_MO_PRT_DT = "CLIENTB_MO_PRT_DT";
            internal const string CLIENTB_FA_DEATH_DT = "CLIENTB_FA_DEATH_DT";
            internal const string CLIENTB_FA_PRT_DT = "CLIENTB_FA_PRT_DT";
            internal const string CLIENTB_MPI_ID = "CLIENTB_MPI_ID";
            internal const string CLIENTB_MED_COVERAGE_IND = "CLIENTB_MED_COVERAGE_IND";
            internal const string CLIENTB_INSURANCE_CARRIER = "CLIENTB_INSURANCE_CARRIER";
            internal const string CLIENTB_INSURANCE_POLCY_NO = "CLIENTB_INSURANCE_POLCY_NO";
            internal const string CLIENTB_SPOKEN_LANGUAGE = "CLIENTB_SPOKEN_LANGUAGE";
            internal const string CLIENTB_WRITTEN_LANGUAGE = "CLIENTB_WRITTEN_LANGUAGE";
            internal const string CLIENTB_STATE_OF_BIRTH = "CLIENTB_STATE_OF_BIRTH";
            internal const string CLIENTB_SCHOOL_DISTRICT = "CLIENTB_SCHOOL_DISTRICT";
            internal const string CLIENTB_ETHNIC_CLASS = "CLIENTB_ETHNIC_CLASS";
            internal const string CLIENTB_SUFFIX_NAME = "CLIENTB_SUFFIX_NAME";
            internal const string CLIENTB_EMPLOYER_NAME = "CLIENTB_EMPLOYER_NAME";
            internal const string CLIENTB_EARNED_INCOME_AMT = "CLIENTB_EARNED_INCOME_AMT";
            internal const string CLIENTB_INCOME_FREQUENCY = "CLIENTB_INCOME_FREQUENCY";
            internal const string CLIENTB_KEES_ABMS_ID = "CLIENTB_KEES_ABMS_ID";
            internal const string CLIENTB_EMAIL_ADDRESS = "CLIENTB_EMAIL_ADDRESS";
            internal const string CLIENTB_EMAIL_ADDRESS_LEN = "CLIENTB_EMAIL_ADDRESS_LEN";
            internal const string CLIENTB_EMAIL_ADDRESS_TEXT = "CLIENTB_EMAIL_ADDRESS_TEXT";
            internal const string CLIENTB_OCCUPATION = "CLIENTB_OCCUPATION";
            internal const string CLIENTB_OCCUPATION_LEN = "CLIENTB_OCCUPATION_LEN";
            internal const string CLIENTB_OCCUPATION_TEXT = "CLIENTB_OCCUPATION_TEXT";
            internal const string CLIENTB_CREATED_BY = "CLIENTB_CREATED_BY";
            internal const string CLIENTB_CREATED_TIMESTAMP = "CLIENTB_CREATED_TIMESTAMP";
            internal const string CLIENTB_LAST_MODIFIED_BY = "CLIENTB_LAST_MODIFIED_BY";
            internal const string CLIENTB_LAST_MODIFIED_TMST = "CLIENTB_LAST_MODIFIED_TMST";
            internal const string CLIENTB_SENSITIVE_FLAG = "CLIENTB_SENSITIVE_FLAG";
            internal const string CLIENTB_CIS_PREFERRED_ID = "CLIENTB_CIS_PREFERRED_ID";
            internal const string CLIENTB_NAME_TYPE = "CLIENTB_NAME_TYPE";
            internal const string DCLKSD_SYSTEM_PART = "DCLKSD_SYSTEM_PART";
            internal const string SYSPART_SYSTEM_CODE = "SYSPART_SYSTEM_CODE";
            internal const string SYSPART_PARTICIPATION_FLAG = "SYSPART_PARTICIPATION_FLAG";
            internal const string SYSPART_CREATED_TIMESTAMP = "SYSPART_CREATED_TIMESTAMP";
            internal const string SYSPART_CREATED_BY = "SYSPART_CREATED_BY";
            internal const string SYSPART_LAST_MODIFIED_BY = "SYSPART_LAST_MODIFIED_BY";
            internal const string SYSPART_LAST_MODIFIED_TMST = "SYSPART_LAST_MODIFIED_TMST";
            internal const string SYSPART_FK_CLB_CLIENT_NO = "SYSPART_FK_CLB_CLIENT_NO";
            internal const string SYSPART_FK_CLI_CLIENT_NAME = "SYSPART_FK_CLI_CLIENT_NAME";
            internal const string SYSPART_FK_CLI_SSN = "SYSPART_FK_CLI_SSN";
            internal const string DCLKSD_NEXT_CLIENT_ID = "DCLKSD_NEXT_CLIENT_ID";
            internal const string NEXTCLI_IDENT = "NEXTCLI_IDENT";
            internal const string NEXTCLI_NEXT_CLIENT_ID = "NEXTCLI_NEXT_CLIENT_ID";
            internal const string NEXTCLI_CREATED_TIMESTAMP = "NEXTCLI_CREATED_TIMESTAMP";
            internal const string NEXTCLI_CREATED_BY = "NEXTCLI_CREATED_BY";
            internal const string NEXTCLI_LAST_MODIFIED_BY = "NEXTCLI_LAST_MODIFIED_BY";
            internal const string NEXTCLI_LAST_MODIFIED_TMST = "NEXTCLI_LAST_MODIFIED_TMST";
            internal const string WS_DB2_CONSTANT_AREAS = "WS_DB2_CONSTANT_AREAS";
            internal const string WS_SYS_CD_AE = "WS_SYS_CD_AE";
            internal const string WS_SYS_CD_CS = "WS_SYS_CD_CS";
            internal const string WS_SYS_CD_KA = "WS_SYS_CD_KA";
            internal const string WS_SYS_CD_KS = "WS_SYS_CD_KS";
            internal const string WS_SYS_CD_FA = "WS_SYS_CD_FA";
            internal const string WS_SYS_CD_KM = "WS_SYS_CD_KM";
            internal const string WS_YES_Y = "WS_YES_Y";
            internal const string WS_IDENT_0000000001 = "WS_IDENT_0000000001";
            internal const string WS_DB2_WORK_AREAS = "WS_DB2_WORK_AREAS";
            internal const string CLIENT_WS_DATE_OF_BIRTH = "CLIENT_WS_DATE_OF_BIRTH";
            internal const string WS_CLIENT_DATE_OF_BIRTH = "WS_CLIENT_DATE_OF_BIRTH";
            internal const string WS_DB2_SWITCHES = "WS_DB2_SWITCHES";
            internal const string WS_CLIENT_EOF_SW = "WS_CLIENT_EOF_SW";
            internal const string WS_CLIENT_EOF_NO = "WS_CLIENT_EOF_NO";
            internal const string WS_CLIENT_EOF_YES = "WS_CLIENT_EOF_YES";
            internal const string WS_CLIENTB_EOF_SW = "WS_CLIENTB_EOF_SW";
            internal const string WS_CLIENTB_EOF_NO = "WS_CLIENTB_EOF_NO";
            internal const string WS_CLIENTB_EOF_YES = "WS_CLIENTB_EOF_YES";
            internal const string WS_SYSPART_EOF_SW = "WS_SYSPART_EOF_SW";
            internal const string WS_SYSPART_EOF_NO = "WS_SYSPART_EOF_NO";
            internal const string WS_SYSPART_EOF_YES = "WS_SYSPART_EOF_YES";
            internal const string WS_DUP_SSN_SW = "WS_DUP_SSN_SW";
            internal const string WS_DUP_SSN_NO = "WS_DUP_SSN_NO";
            internal const string WS_DUP_SSN_YES = "WS_DUP_SSN_YES";
            internal const string WS_PROCESS_SW = "WS_PROCESS_SW";
            internal const string WS_PROCESS_ADD = "WS_PROCESS_ADD";
            internal const string WS_PROCESS_UPD = "WS_PROCESS_UPD";
            internal const string WS_CLIENT_POINTER = "WS_CLIENT_POINTER";
            internal const string WS_CLIPTR_CLIENT_ID = "WS_CLIPTR_CLIENT_ID";
            internal const string WS_CLIPTR_VERIFIED_SSN_FLAG = "WS_CLIPTR_VERIFIED_SSN_FLAG";
            internal const string WS_CLIPTR_SYSTEM_PARTICIPATION = "WS_CLIPTR_SYSTEM_PARTICIPATION";
            internal const string WS_CLIPTR_SYSPART_AE = "WS_CLIPTR_SYSPART_AE";
            internal const string WS_CLIPTR_SYSPART_CS = "WS_CLIPTR_SYSPART_CS";
            internal const string WS_CLIPTR_SYSPART_KA = "WS_CLIPTR_SYSPART_KA";
            internal const string WS_CLIPTR_SYSPART_KS = "WS_CLIPTR_SYSPART_KS";
            internal const string WS_CLIPTR_SYSPART_FA = "WS_CLIPTR_SYSPART_FA";
            internal const string CONTROL_BLOCK = "CONTROL_BLOCK";
            internal const string COMMAND_CODE = "COMMAND_CODE";
            internal const string COMMAND_ID = "COMMAND_ID";
            internal const string FILE_NUMBER = "FILE_NUMBER";
            internal const string RESPONSE_CODE = "RESPONSE_CODE";
            internal const string ISN = "ISN";
            internal const string ISN_LOWER_LIMIT = "ISN_LOWER_LIMIT";
            internal const string ISN_QUANTITY = "ISN_QUANTITY";
            internal const string FORMAT_BUFFER_LENGTH = "FORMAT_BUFFER_LENGTH";
            internal const string RECORD_BUFFER_LENGTH = "RECORD_BUFFER_LENGTH";
            internal const string SEARCH_BUFFER_LENGTH = "SEARCH_BUFFER_LENGTH";
            internal const string VALUE_BUFFER_LENGTH = "VALUE_BUFFER_LENGTH";
            internal const string ISN_BUFFER_LENGTH = "ISN_BUFFER_LENGTH";
            internal const string COMMAND_OPTION_1 = "COMMAND_OPTION_1";
            internal const string COMMAND_OPTION_2 = "COMMAND_OPTION_2";
            internal const string ADDITIONS_1 = "ADDITIONS_1";
            internal const string ADDITIONS_2 = "ADDITIONS_2";
            internal const string ADDITIONS_3 = "ADDITIONS_3";
            internal const string ADDITIONS_4 = "ADDITIONS_4";
            internal const string COMMAND_TIME = "COMMAND_TIME";
            internal const string USER_AREA = "USER_AREA";
            internal const string PH_FNTIC_C1 = "PH_FNTIC_C1";
            internal const string PH_FNTIC_C2 = "PH_FNTIC_C2";
            internal const string PH_FNTIC_C3 = "PH_FNTIC_C3";
            internal const string PH_FNTIC_CX = "PH_FNTIC_CX";
            internal const string PH_SUSS_ID = "PH_SUSS_ID";
            internal const string PH_HIT = "PH_HIT";
            internal const string PH_ERR_NAME = "PH_ERR_NAME";
            internal const string PH_COUNT_UP = "PH_COUNT_UP";
            internal const string PH_COUNT_INQUIRY = "PH_COUNT_INQUIRY";
            internal const string PH_COUNT_DB = "PH_COUNT_DB";
            internal const string PH_L1 = "PH_L1";
            internal const string PH_CR1_INDXX = "PH_CR1_INDXX";
            internal const string PH_CR2_INDXX = "PH_CR2_INDXX";
            internal const string PH_CF1_INDXX = "PH_CF1_INDXX";
            internal const string PH_CF2_INDXX = "PH_CF2_INDXX";
            internal const string PH_DEGREE = "PH_DEGREE";
            internal const string PH_PERCENT = "PH_PERCENT";
            internal const string PH_NAME_RAW_INQ = "PH_NAME_RAW_INQ";
            internal const string PH_NAME_RAW_MSTR = "PH_NAME_RAW_MSTR";
            internal const string PH_NAME_CRUNCH_INQ = "PH_NAME_CRUNCH_INQ";
            internal const string PH_L_CRNCH = "PH_L_CRNCH";
            internal const string PH_NAME_REDUC_INQ = "PH_NAME_REDUC_INQ";
            internal const string PH_L_REDUC = "PH_L_REDUC";
            internal const string PH_SAVE_REDUC_INQ = "PH_SAVE_REDUC_INQ";
            internal const string PH_S_REDUC = "PH_S_REDUC";
            internal const string PH_NAME_PARTS = "PH_NAME_PARTS";
            internal const string PH_THREE_LETTERS = "PH_THREE_LETTERS";
            internal const string PH_LETTERS_3 = "PH_LETTERS_3";
            internal const string PH_TWO_LETTERS = "PH_TWO_LETTERS";
            internal const string PH_ONE_LETTER = "PH_ONE_LETTER";
            internal const string PH_NAME_34_NUMERIC = "PH_NAME_34_NUMERIC";
            internal const string PH_NAME_NUM_34 = "PH_NAME_NUM_34";
            internal const string PH_NAME_17_NUMERIC = "PH_NAME_17_NUMERIC";
            internal const string PH_NAME_NUM_17 = "PH_NAME_NUM_17";
            internal const string PH_REFMT_34_17 = "PH_REFMT_34_17";
            internal const string PH_DIGIT_1 = "PH_DIGIT_1";
            internal const string PH_DIGIT_2 = "PH_DIGIT_2";
            internal const string PH_FIRST_2_TABLE = "PH_FIRST_2_TABLE";
            internal const string PH_FIRST_2_TBL = "PH_FIRST_2_TBL";
            internal const string PH_FR2_NUM = "PH_FR2_NUM";
            internal const string PH_ALPH2 = "PH_ALPH2";
            internal const string PH_NUM2 = "PH_NUM2";
            internal const string PH_FIRST_1_TABLE = "PH_FIRST_1_TABLE";
            internal const string PH_FIRST_1_TBL = "PH_FIRST_1_TBL";
            internal const string PH_FR1_NUM = "PH_FR1_NUM";
            internal const string PH_ALPH1 = "PH_ALPH1";
            internal const string PH_NUM1 = "PH_NUM1";
            internal const string PH_REMAIN_2_TABLE = "PH_REMAIN_2_TABLE";
            internal const string PH_REMAIN_2_TBL = "PH_REMAIN_2_TBL";
            internal const string PH_RR2_NUM = "PH_RR2_NUM";
            internal const string PH_ALPHR2 = "PH_ALPHR2";
            internal const string PH_NUMR2 = "PH_NUMR2";
            internal const string PH_REMAIN_1_TABLE = "PH_REMAIN_1_TABLE";
            internal const string PH_REMAIN_1_TBL = "PH_REMAIN_1_TBL";
            internal const string PH_RR1_NUM = "PH_RR1_NUM";
            internal const string PH_ALPHR1 = "PH_ALPHR1";
            internal const string PH_NUMR1 = "PH_NUMR1";
            internal const string PH_CF2_INDEX = "PH_CF2_INDEX";
            internal const string PH_CF1_INDEX = "PH_CF1_INDEX";
            internal const string PH_CR2_INDEX = "PH_CR2_INDEX";
            internal const string PH_CR1_INDEX = "PH_CR1_INDEX";
        }
        #endregion

        #region Direct-access element properties
        public IGroup EXTERNAL_ACTION_BLOCK_WS { get { return GetElementByName<IGroup>(Names.EXTERNAL_ACTION_BLOCK_WS); } }
        public IField SRADALNK { get { return GetElementByName<IField>(Names.SRADALNK); } }
        public IField SRMODLNK { get { return GetElementByName<IField>(Names.SRMODLNK); } }
        public IGroup MV_ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.MV_ABEND_FIELDS); } }
        public IField MV_ABEND_TYPE { get { return GetElementByName<IField>(Names.MV_ABEND_TYPE); } }
        public ICheckField MV_ABEND_TYPE_NONE { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_NONE); } }
        public ICheckField MV_ABEND_TYPE_ADABAS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_ADABAS); } }
        public ICheckField MV_ABEND_TYPE_CICS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_CICS); } }
        public IGroup MV_ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.MV_ABEND_ADABAS); } }
        public IField MV_ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.MV_ADA_FILE_NUMBER); } }
        public IField MV_ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.MV_ADA_FILE_ACTION); } }
        public IField MV_ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_ADA_RESPONSE_CD); } }
        public IGroup MV_ABEND_CICS { get { return GetElementByName<IGroup>(Names.MV_ABEND_CICS); } }
        public IField MV_CICS_RESOURCE_NM { get { return GetElementByName<IField>(Names.MV_CICS_RESOURCE_NM); } }
        public IField MV_CICS_FUNCTION_CD { get { return GetElementByName<IField>(Names.MV_CICS_FUNCTION_CD); } }
        public IField MV_CICS_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_CICS_RESPONSE_CD); } }
        public IField MV_ABS_TIME { get { return GetElementByName<IField>(Names.MV_ABS_TIME); } }
        public IGroup MV_CCYYMMDD_X8 { get { return GetElementByName<IGroup>(Names.MV_CCYYMMDD_X8); } }
        public IField MV_CC { get { return GetElementByName<IField>(Names.MV_CC); } }
        public IGroup MV_YYMMDD_X6 { get { return GetElementByName<IGroup>(Names.MV_YYMMDD_X6); } }
        public IField MV_YY { get { return GetElementByName<IField>(Names.MV_YY); } }
        public IField MV_MM { get { return GetElementByName<IField>(Names.MV_MM); } }
        public IField MV_DD { get { return GetElementByName<IField>(Names.MV_DD); } }
        public IField MV_YYMMDD { get { return GetElementByName<IField>(Names.MV_YYMMDD); } }
        public IField MV_CURRENT_CCYY { get { return GetElementByName<IField>(Names.MV_CURRENT_CCYY); } }
        public IField MV_CURRENT_MMDD { get { return GetElementByName<IField>(Names.MV_CURRENT_MMDD); } }
        public IField MV_CCYYMMDD { get { return GetElementByName<IField>(Names.MV_CCYYMMDD); } }
        public IField MV_COMPLEMENT_DATE { get { return GetElementByName<IField>(Names.MV_COMPLEMENT_DATE); } }
        public IField MV_WRK_PTR { get { return GetElementByName<IField>(Names.MV_WRK_PTR); } }
        public IField MV_ISN { get { return GetElementByName<IField>(Names.MV_ISN); } }
        public IField MV_CLIENT_INFO_NUMBER { get { return GetElementByName<IField>(Names.MV_CLIENT_INFO_NUMBER); } }
        public IField MV_CLIENT_FOUND_IND { get { return GetElementByName<IField>(Names.MV_CLIENT_FOUND_IND); } }
        public ICheckField MV_CLIENT_FOUND { get { return GetElementByName<ICheckField>(Names.MV_CLIENT_FOUND); } }
        public IGroup MV_CLIENT_POINTER_X31 { get { return GetElementByName<IGroup>(Names.MV_CLIENT_POINTER_X31); } }
        public IField MV_CLIENT_POINTER_X10 { get { return GetElementByName<IField>(Names.MV_CLIENT_POINTER_X10); } }
        public IField MV_CLIENT_POINTER_X21 { get { return GetElementByName<IField>(Names.MV_CLIENT_POINTER_X21); } }
        public IGroup MV_CLIENT_ID_KEY { get { return GetElementByName<IGroup>(Names.MV_CLIENT_ID_KEY); } }
        public IField MV_CIK_CLIENT_POINTER_X10 { get { return GetElementByName<IField>(Names.MV_CIK_CLIENT_POINTER_X10); } }
        public IField MV_CIK_CLIENT_NAME { get { return GetElementByName<IField>(Names.MV_CIK_CLIENT_NAME); } }
        public IField MV_CIK_SSN { get { return GetElementByName<IField>(Names.MV_CIK_SSN); } }
        public IField MV_CIK_DATE_OF_BIRTH_SEX { get { return GetElementByName<IField>(Names.MV_CIK_DATE_OF_BIRTH_SEX); } }
        public IField MV_CIK_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.MV_CIK_DATE_OF_BIRTH); } }
        public IField MV_CIK_SEX { get { return GetElementByName<IField>(Names.MV_CIK_SEX); } }
        public IGroup MV_CIK_CLIENT_POINTER_X21 { get { return GetElementByName<IGroup>(Names.MV_CIK_CLIENT_POINTER_X21); } }
        public IField MV_CIK_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.MV_CIK_VERIFIED_SSN_FLAG); } }
        public IGroup MV_CIK_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.MV_CIK_SYSTEM_PARTICIPATION); } }
        public IField MV_CIK_SYS_PART_AE { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_AE); } }
        public IField MV_CIK_SYS_PART_CSE { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_CSE); } }
        public IField MV_CIK_SYS_PART_KANPAY { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_KANPAY); } }
        public IField MV_CIK_SYS_PART_KSCARES { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_KSCARES); } }
        public IField MV_CIK_SYS_PART_FACTS { get { return GetElementByName<IField>(Names.MV_CIK_SYS_PART_FACTS); } }
        public IGroup MV_RECORD_NAME { get { return GetElementByName<IGroup>(Names.MV_RECORD_NAME); } }
        public IField MV_RECORD_LAST_NAME { get { return GetElementByName<IField>(Names.MV_RECORD_LAST_NAME); } }
        public IGroup MV_RECORD_FIRST_NAME { get { return GetElementByName<IGroup>(Names.MV_RECORD_FIRST_NAME); } }
        public IField MV_RECORD_FIRST_NAME_1 { get { return GetElementByName<IField>(Names.MV_RECORD_FIRST_NAME_1); } }
        public IField MV_RECORD_FIRST_NAME_11 { get { return GetElementByName<IField>(Names.MV_RECORD_FIRST_NAME_11); } }
        public IField MV_RECORD_INITIAL { get { return GetElementByName<IField>(Names.MV_RECORD_INITIAL); } }
        public IGroup MV_PHONETIC_DATA { get { return GetElementByName<IGroup>(Names.MV_PHONETIC_DATA); } }
        public IField MV_PHONETIC_1 { get { return GetElementByName<IField>(Names.MV_PHONETIC_1); } }
        public IField MV_PHONETIC_CODE { get { return GetElementByName<IField>(Names.MV_PHONETIC_CODE); } }
        public IField MV_PHONETIC_3 { get { return GetElementByName<IField>(Names.MV_PHONETIC_3); } }
        public IGroup MV_DATE_OF_BIRTH_SEX { get { return GetElementByName<IGroup>(Names.MV_DATE_OF_BIRTH_SEX); } }
        public IField MV_DATE_OF_BIRTH_X { get { return GetElementByName<IField>(Names.MV_DATE_OF_BIRTH_X); } }
        public IField MV_SEX { get { return GetElementByName<IField>(Names.MV_SEX); } }
        public IGroup MV_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.MV_CLIENT_POINTER); } }
        public IGroup MV_CLIENT_ID { get { return GetElementByName<IGroup>(Names.MV_CLIENT_ID); } }
        public IField MV_CLIENT_ID_910 { get { return GetElementByName<IField>(Names.MV_CLIENT_ID_910); } }
        public IGroup MV_CLIENT_POINTER_FLAGS { get { return GetElementByName<IGroup>(Names.MV_CLIENT_POINTER_FLAGS); } }
        public IField MV_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.MV_VERIFIED_SSN_FLAG); } }
        public IGroup MV_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.MV_SYSTEM_PARTICIPATION); } }
        public IField MV_SYS_PART_AE { get { return GetElementByName<IField>(Names.MV_SYS_PART_AE); } }
        public ICheckField MV_SYS_PART_AE_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_AE_YES); } }
        public IField MV_SYS_PART_CSE { get { return GetElementByName<IField>(Names.MV_SYS_PART_CSE); } }
        public ICheckField MV_SYS_PART_CSE_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_CSE_YES); } }
        public ICheckField MV_SYS_PART_CSE_NON { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_CSE_NON); } }
        public IField MV_SYS_PART_KANPAY { get { return GetElementByName<IField>(Names.MV_SYS_PART_KANPAY); } }
        public ICheckField MV_SYS_PART_KANPAY_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_KANPAY_YES); } }
        public IField MV_SYS_PART_KSCARES { get { return GetElementByName<IField>(Names.MV_SYS_PART_KSCARES); } }
        public ICheckField MV_SYS_PART_KSCARES_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_KSCARES_YES); } }
        public IField MV_SYS_PART_FACTS { get { return GetElementByName<IField>(Names.MV_SYS_PART_FACTS); } }
        public ICheckField MV_SYS_PART_FACTS_YES { get { return GetElementByName<ICheckField>(Names.MV_SYS_PART_FACTS_YES); } }
        public IGroup IMP_CLIENT_NUMBER_X10 { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_NUMBER_X10); } }
        public IField IMP_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.IMP_CLIENT_NUMBER); } }
        public IField IMP_CLIENT_KEY { get { return GetElementByName<IField>(Names.IMP_CLIENT_KEY); } }
        public IGroup IMP_CLIENT_KEY_RED { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_KEY_RED); } }
        public IField IMP_CLIKEY_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.IMP_CLIKEY_CLIENT_NUMBER); } }
        public IField IMP_CLIKEY_CLIENT_NAME { get { return GetElementByName<IField>(Names.IMP_CLIKEY_CLIENT_NAME); } }
        public IField IMP_CLIKEY_SSN { get { return GetElementByName<IField>(Names.IMP_CLIKEY_SSN); } }
        public IField IMP_CLIKEY_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.IMP_CLIKEY_DATE_OF_BIRTH); } }
        public IField IMP_CLIKEY_SEX { get { return GetElementByName<IField>(Names.IMP_CLIKEY_SEX); } }
        public IField IMP_CLIKEY_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.IMP_CLIKEY_VERIFIED_SSN_FLAG); } }
        public IField IMP_CLIKEY_SYS_PART { get { return GetElementByName<IField>(Names.IMP_CLIKEY_SYS_PART); } }
        public IGroup IMP_CLIENT_INFO { get { return GetElementByName<IGroup>(Names.IMP_CLIENT_INFO); } }
        public IGroup IMP_NAME { get { return GetElementByName<IGroup>(Names.IMP_NAME); } }
        public IField IMP_LAST_NAME { get { return GetElementByName<IField>(Names.IMP_LAST_NAME); } }
        public IField IMP_FIRST_NAME { get { return GetElementByName<IField>(Names.IMP_FIRST_NAME); } }
        public IField IMP_INITIAL { get { return GetElementByName<IField>(Names.IMP_INITIAL); } }
        public IGroup IMP_DATE_OF_BIRTH_SEX { get { return GetElementByName<IGroup>(Names.IMP_DATE_OF_BIRTH_SEX); } }
        public IField IMP_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.IMP_DATE_OF_BIRTH); } }
        public IField IMP_SEX { get { return GetElementByName<IField>(Names.IMP_SEX); } }
        public IGroup IMP_SOC_SEC_NUM_X9 { get { return GetElementByName<IGroup>(Names.IMP_SOC_SEC_NUM_X9); } }
        public IField IMP_SOC_SEC_NUM { get { return GetElementByName<IField>(Names.IMP_SOC_SEC_NUM); } }
        public IField IMP_SOC_SEC_NUM_3 { get { return GetElementByName<IField>(Names.IMP_SOC_SEC_NUM_3); } }
        public ICheckField IMP_SOC_SEC_NUM_3_VALID { get { return GetElementByName<ICheckField>(Names.IMP_SOC_SEC_NUM_3_VALID); } }
        public IField IMP_SOC_SEC_NUM_2 { get { return GetElementByName<IField>(Names.IMP_SOC_SEC_NUM_2); } }
        public ICheckField IMP_SOC_SEC_NUM_2_VALID { get { return GetElementByName<ICheckField>(Names.IMP_SOC_SEC_NUM_2_VALID); } }
        public IField IMP_SOC_SEC_NUM_4 { get { return GetElementByName<IField>(Names.IMP_SOC_SEC_NUM_4); } }
        public ICheckField IMP_SOC_SEC_NUM_4_VALID { get { return GetElementByName<ICheckField>(Names.IMP_SOC_SEC_NUM_4_VALID); } }
        public IField IMP_CONVERT_FLAG { get { return GetElementByName<IField>(Names.IMP_CONVERT_FLAG); } }
        public IGroup CUR_CLIENT_INFO { get { return GetElementByName<IGroup>(Names.CUR_CLIENT_INFO); } }
        public IGroup CUR_NAME { get { return GetElementByName<IGroup>(Names.CUR_NAME); } }
        public IField CUR_LAST_NAME { get { return GetElementByName<IField>(Names.CUR_LAST_NAME); } }
        public IField CUR_FIRST_NAME { get { return GetElementByName<IField>(Names.CUR_FIRST_NAME); } }
        public IField CUR_INITIAL { get { return GetElementByName<IField>(Names.CUR_INITIAL); } }
        public IGroup CUR_DATE_OF_BIRTH_SEX { get { return GetElementByName<IGroup>(Names.CUR_DATE_OF_BIRTH_SEX); } }
        public IGroup CUR_DATE_OF_BIRTH_X8 { get { return GetElementByName<IGroup>(Names.CUR_DATE_OF_BIRTH_X8); } }
        public IField CUR_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CUR_DATE_OF_BIRTH); } }
        public IField CUR_SEX { get { return GetElementByName<IField>(Names.CUR_SEX); } }
        public IGroup CUR_SOC_SEC_NUM_X9 { get { return GetElementByName<IGroup>(Names.CUR_SOC_SEC_NUM_X9); } }
        public IField CUR_SOC_SEC_NUM { get { return GetElementByName<IField>(Names.CUR_SOC_SEC_NUM); } }
        public IGroup DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT); } }
        public IField CLIENT_SSN { get { return GetElementByName<IField>(Names.CLIENT_SSN); } }
        public IField CLIENT_PREVIOUS_SSN { get { return GetElementByName<IField>(Names.CLIENT_PREVIOUS_SSN); } }
        public IField CLIENT_PHONETIC_DATA { get { return GetElementByName<IField>(Names.CLIENT_PHONETIC_DATA); } }
        public IField CLIENT_DT_OF_LAST_UPDATE { get { return GetElementByName<IField>(Names.CLIENT_DT_OF_LAST_UPDATE); } }
        public IField CLIENT_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENT_DATE_OF_BIRTH); } }
        public IField CLIENT_GENDER { get { return GetElementByName<IField>(Names.CLIENT_GENDER); } }
        public IField CLIENT_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CLIENT_VERIFIED_SSN_FLAG); } }
        public IField CLIENT_CLIENT_NAME { get { return GetElementByName<IField>(Names.CLIENT_CLIENT_NAME); } }
        public IField CLIENT_CREATED_BY { get { return GetElementByName<IField>(Names.CLIENT_CREATED_BY); } }
        public IField CLIENT_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CLIENT_CREATED_TIMESTAMP); } }
        public IField CLIENT_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CLIENT_LAST_MODIFIED_BY); } }
        public IField CLIENT_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CLIENT_LAST_MODIFIED_TMST); } }
        public IField CLIENT_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CLIENT_FK_CLB_CLIENT_NO); } }
        public IField CLIENT_NAME_TYPE { get { return GetElementByName<IField>(Names.CLIENT_NAME_TYPE); } }
        public IGroup DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT_BASIC); } }
        public IField CLIENTB_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_NUMBER); } }
        public IField CLIENTB_CLIENT_GIVEN_NAME { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_GIVEN_NAME); } }
        public IField CLIENTB_CLIENT_INITIALS { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_INITIALS); } }
        public IField CLIENTB_CLIENT_SURNAME { get { return GetElementByName<IField>(Names.CLIENTB_CLIENT_SURNAME); } }
        public IField CLIENTB_CIS_REPL_IND { get { return GetElementByName<IField>(Names.CLIENTB_CIS_REPL_IND); } }
        public IField CLIENTB_WORK_PHONE { get { return GetElementByName<IField>(Names.CLIENTB_WORK_PHONE); } }
        public IField CLIENTB_SSN { get { return GetElementByName<IField>(Names.CLIENTB_SSN); } }
        public IField CLIENTB_GENDER { get { return GetElementByName<IField>(Names.CLIENTB_GENDER); } }
        public IField CLIENTB_PARENT_RGHTS_SEV { get { return GetElementByName<IField>(Names.CLIENTB_PARENT_RGHTS_SEV); } }
        public IField CLIENTB_PRNT_RGHTS_SEV_DT { get { return GetElementByName<IField>(Names.CLIENTB_PRNT_RGHTS_SEV_DT); } }
        public IField CLIENTB_LEGAL_STATUS { get { return GetElementByName<IField>(Names.CLIENTB_LEGAL_STATUS); } }
        public IField CLIENTB_INSURANCE_CODE { get { return GetElementByName<IField>(Names.CLIENTB_INSURANCE_CODE); } }
        public IField CLIENTB_INITIAL_CUSTODY_DT { get { return GetElementByName<IField>(Names.CLIENTB_INITIAL_CUSTODY_DT); } }
        public IField CLIENTB_HOME_PHONE { get { return GetElementByName<IField>(Names.CLIENTB_HOME_PHONE); } }
        public IField CLIENTB_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENTB_DATE_OF_BIRTH); } }
        public IField CLIENTB_CURR_PLACEMNT_DT { get { return GetElementByName<IField>(Names.CLIENTB_CURR_PLACEMNT_DT); } }
        public IField CLIENTB_CURRENT_PLACEMENT { get { return GetElementByName<IField>(Names.CLIENTB_CURRENT_PLACEMENT); } }
        public IField CLIENTB_CSEA_G_CAUSE_CODE { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_G_CAUSE_CODE); } }
        public IField CLIENTB_CSEA_G_CAUSE_CL_DT { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_G_CAUSE_CL_DT); } }
        public IField CLIENTB_CSEA_COOP_CODE { get { return GetElementByName<IField>(Names.CLIENTB_CSEA_COOP_CODE); } }
        public IField CLIENTB_COUNTY_CRT_COMMIT { get { return GetElementByName<IField>(Names.CLIENTB_COUNTY_CRT_COMMIT); } }
        public IField CLIENTB_MONTHS_ASST_AF { get { return GetElementByName<IField>(Names.CLIENTB_MONTHS_ASST_AF); } }
        public IField CLIENTB_MONTHS_ASST_GA { get { return GetElementByName<IField>(Names.CLIENTB_MONTHS_ASST_GA); } }
        public IField CLIENTB_MO_DEATH_DT { get { return GetElementByName<IField>(Names.CLIENTB_MO_DEATH_DT); } }
        public IField CLIENTB_MO_PRT_DT { get { return GetElementByName<IField>(Names.CLIENTB_MO_PRT_DT); } }
        public IField CLIENTB_FA_DEATH_DT { get { return GetElementByName<IField>(Names.CLIENTB_FA_DEATH_DT); } }
        public IField CLIENTB_FA_PRT_DT { get { return GetElementByName<IField>(Names.CLIENTB_FA_PRT_DT); } }
        public IField CLIENTB_MPI_ID { get { return GetElementByName<IField>(Names.CLIENTB_MPI_ID); } }
        public IField CLIENTB_MED_COVERAGE_IND { get { return GetElementByName<IField>(Names.CLIENTB_MED_COVERAGE_IND); } }
        public IField CLIENTB_INSURANCE_CARRIER { get { return GetElementByName<IField>(Names.CLIENTB_INSURANCE_CARRIER); } }
        public IField CLIENTB_INSURANCE_POLCY_NO { get { return GetElementByName<IField>(Names.CLIENTB_INSURANCE_POLCY_NO); } }
        public IField CLIENTB_SPOKEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLIENTB_SPOKEN_LANGUAGE); } }
        public IField CLIENTB_WRITTEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLIENTB_WRITTEN_LANGUAGE); } }
        public IField CLIENTB_STATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENTB_STATE_OF_BIRTH); } }
        public IField CLIENTB_SCHOOL_DISTRICT { get { return GetElementByName<IField>(Names.CLIENTB_SCHOOL_DISTRICT); } }
        public IField CLIENTB_ETHNIC_CLASS { get { return GetElementByName<IField>(Names.CLIENTB_ETHNIC_CLASS); } }
        public IField CLIENTB_SUFFIX_NAME { get { return GetElementByName<IField>(Names.CLIENTB_SUFFIX_NAME); } }
        public IField CLIENTB_EMPLOYER_NAME { get { return GetElementByName<IField>(Names.CLIENTB_EMPLOYER_NAME); } }
        public IField CLIENTB_EARNED_INCOME_AMT { get { return GetElementByName<IField>(Names.CLIENTB_EARNED_INCOME_AMT); } }
        public IField CLIENTB_INCOME_FREQUENCY { get { return GetElementByName<IField>(Names.CLIENTB_INCOME_FREQUENCY); } }
        public IField CLIENTB_KEES_ABMS_ID { get { return GetElementByName<IField>(Names.CLIENTB_KEES_ABMS_ID); } }
        public IGroup CLIENTB_EMAIL_ADDRESS { get { return GetElementByName<IGroup>(Names.CLIENTB_EMAIL_ADDRESS); } }
        public IField CLIENTB_EMAIL_ADDRESS_LEN { get { return GetElementByName<IField>(Names.CLIENTB_EMAIL_ADDRESS_LEN); } }
        public IField CLIENTB_EMAIL_ADDRESS_TEXT { get { return GetElementByName<IField>(Names.CLIENTB_EMAIL_ADDRESS_TEXT); } }
        public IGroup CLIENTB_OCCUPATION { get { return GetElementByName<IGroup>(Names.CLIENTB_OCCUPATION); } }
        public IField CLIENTB_OCCUPATION_LEN { get { return GetElementByName<IField>(Names.CLIENTB_OCCUPATION_LEN); } }
        public IField CLIENTB_OCCUPATION_TEXT { get { return GetElementByName<IField>(Names.CLIENTB_OCCUPATION_TEXT); } }
        public IField CLIENTB_CREATED_BY { get { return GetElementByName<IField>(Names.CLIENTB_CREATED_BY); } }
        public IField CLIENTB_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CLIENTB_CREATED_TIMESTAMP); } }
        public IField CLIENTB_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CLIENTB_LAST_MODIFIED_BY); } }
        public IField CLIENTB_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CLIENTB_LAST_MODIFIED_TMST); } }
        public IField CLIENTB_SENSITIVE_FLAG { get { return GetElementByName<IField>(Names.CLIENTB_SENSITIVE_FLAG); } }
        public IField CLIENTB_CIS_PREFERRED_ID { get { return GetElementByName<IField>(Names.CLIENTB_CIS_PREFERRED_ID); } }
        public IField CLIENTB_NAME_TYPE { get { return GetElementByName<IField>(Names.CLIENTB_NAME_TYPE); } }
        public IGroup DCLKSD_SYSTEM_PART { get { return GetElementByName<IGroup>(Names.DCLKSD_SYSTEM_PART); } }
        public IField SYSPART_SYSTEM_CODE { get { return GetElementByName<IField>(Names.SYSPART_SYSTEM_CODE); } }
        public IField SYSPART_PARTICIPATION_FLAG { get { return GetElementByName<IField>(Names.SYSPART_PARTICIPATION_FLAG); } }
        public IField SYSPART_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.SYSPART_CREATED_TIMESTAMP); } }
        public IField SYSPART_CREATED_BY { get { return GetElementByName<IField>(Names.SYSPART_CREATED_BY); } }
        public IField SYSPART_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.SYSPART_LAST_MODIFIED_BY); } }
        public IField SYSPART_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.SYSPART_LAST_MODIFIED_TMST); } }
        public IField SYSPART_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.SYSPART_FK_CLB_CLIENT_NO); } }
        public IField SYSPART_FK_CLI_CLIENT_NAME { get { return GetElementByName<IField>(Names.SYSPART_FK_CLI_CLIENT_NAME); } }
        public IField SYSPART_FK_CLI_SSN { get { return GetElementByName<IField>(Names.SYSPART_FK_CLI_SSN); } }
        public IGroup DCLKSD_NEXT_CLIENT_ID { get { return GetElementByName<IGroup>(Names.DCLKSD_NEXT_CLIENT_ID); } }
        public IField NEXTCLI_IDENT { get { return GetElementByName<IField>(Names.NEXTCLI_IDENT); } }
        public IField NEXTCLI_NEXT_CLIENT_ID { get { return GetElementByName<IField>(Names.NEXTCLI_NEXT_CLIENT_ID); } }
        public IField NEXTCLI_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.NEXTCLI_CREATED_TIMESTAMP); } }
        public IField NEXTCLI_CREATED_BY { get { return GetElementByName<IField>(Names.NEXTCLI_CREATED_BY); } }
        public IField NEXTCLI_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.NEXTCLI_LAST_MODIFIED_BY); } }
        public IField NEXTCLI_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.NEXTCLI_LAST_MODIFIED_TMST); } }
        public IGroup WS_DB2_CONSTANT_AREAS { get { return GetElementByName<IGroup>(Names.WS_DB2_CONSTANT_AREAS); } }
        public IField WS_SYS_CD_AE { get { return GetElementByName<IField>(Names.WS_SYS_CD_AE); } }
        public IField WS_SYS_CD_CS { get { return GetElementByName<IField>(Names.WS_SYS_CD_CS); } }
        public IField WS_SYS_CD_KA { get { return GetElementByName<IField>(Names.WS_SYS_CD_KA); } }
        public IField WS_SYS_CD_KS { get { return GetElementByName<IField>(Names.WS_SYS_CD_KS); } }
        public IField WS_SYS_CD_FA { get { return GetElementByName<IField>(Names.WS_SYS_CD_FA); } }
        public IField WS_SYS_CD_KM { get { return GetElementByName<IField>(Names.WS_SYS_CD_KM); } }
        public IField WS_YES_Y { get { return GetElementByName<IField>(Names.WS_YES_Y); } }
        public IField WS_IDENT_0000000001 { get { return GetElementByName<IField>(Names.WS_IDENT_0000000001); } }
        public IGroup WS_DB2_WORK_AREAS { get { return GetElementByName<IGroup>(Names.WS_DB2_WORK_AREAS); } }
        public IField CLIENT_WS_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENT_WS_DATE_OF_BIRTH); } }
        public IField WS_CLIENT_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.WS_CLIENT_DATE_OF_BIRTH); } }
        public IGroup WS_DB2_SWITCHES { get { return GetElementByName<IGroup>(Names.WS_DB2_SWITCHES); } }
        public IField WS_CLIENT_EOF_SW { get { return GetElementByName<IField>(Names.WS_CLIENT_EOF_SW); } }
        public ICheckField WS_CLIENT_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_CLIENT_EOF_NO); } }
        public ICheckField WS_CLIENT_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_CLIENT_EOF_YES); } }
        public IField WS_CLIENTB_EOF_SW { get { return GetElementByName<IField>(Names.WS_CLIENTB_EOF_SW); } }
        public ICheckField WS_CLIENTB_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_CLIENTB_EOF_NO); } }
        public ICheckField WS_CLIENTB_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_CLIENTB_EOF_YES); } }
        public IField WS_SYSPART_EOF_SW { get { return GetElementByName<IField>(Names.WS_SYSPART_EOF_SW); } }
        public ICheckField WS_SYSPART_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_SYSPART_EOF_NO); } }
        public ICheckField WS_SYSPART_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_SYSPART_EOF_YES); } }
        public IField WS_DUP_SSN_SW { get { return GetElementByName<IField>(Names.WS_DUP_SSN_SW); } }
        public ICheckField WS_DUP_SSN_NO { get { return GetElementByName<ICheckField>(Names.WS_DUP_SSN_NO); } }
        public ICheckField WS_DUP_SSN_YES { get { return GetElementByName<ICheckField>(Names.WS_DUP_SSN_YES); } }
        public IField WS_PROCESS_SW { get { return GetElementByName<IField>(Names.WS_PROCESS_SW); } }
        public ICheckField WS_PROCESS_ADD { get { return GetElementByName<ICheckField>(Names.WS_PROCESS_ADD); } }
        public ICheckField WS_PROCESS_UPD { get { return GetElementByName<ICheckField>(Names.WS_PROCESS_UPD); } }
        public IGroup WS_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.WS_CLIENT_POINTER); } }
        public IField WS_CLIPTR_CLIENT_ID { get { return GetElementByName<IField>(Names.WS_CLIPTR_CLIENT_ID); } }
        public IField WS_CLIPTR_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.WS_CLIPTR_VERIFIED_SSN_FLAG); } }
        public IGroup WS_CLIPTR_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.WS_CLIPTR_SYSTEM_PARTICIPATION); } }
        public IField WS_CLIPTR_SYSPART_AE { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_AE); } }
        public IField WS_CLIPTR_SYSPART_CS { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_CS); } }
        public IField WS_CLIPTR_SYSPART_KA { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_KA); } }
        public IField WS_CLIPTR_SYSPART_KS { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_KS); } }
        public IField WS_CLIPTR_SYSPART_FA { get { return GetElementByName<IField>(Names.WS_CLIPTR_SYSPART_FA); } }
        public IGroup CONTROL_BLOCK { get { return GetElementByName<IGroup>(Names.CONTROL_BLOCK); } }
        public IField COMMAND_CODE { get { return GetElementByName<IField>(Names.COMMAND_CODE); } }
        public IField COMMAND_ID { get { return GetElementByName<IField>(Names.COMMAND_ID); } }
        public IField FILE_NUMBER { get { return GetElementByName<IField>(Names.FILE_NUMBER); } }
        public IField RESPONSE_CODE { get { return GetElementByName<IField>(Names.RESPONSE_CODE); } }
        public IField ISN { get { return GetElementByName<IField>(Names.ISN); } }
        public IField ISN_LOWER_LIMIT { get { return GetElementByName<IField>(Names.ISN_LOWER_LIMIT); } }
        public IField ISN_QUANTITY { get { return GetElementByName<IField>(Names.ISN_QUANTITY); } }
        public IField FORMAT_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.FORMAT_BUFFER_LENGTH); } }
        public IField RECORD_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.RECORD_BUFFER_LENGTH); } }
        public IField SEARCH_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.SEARCH_BUFFER_LENGTH); } }
        public IField VALUE_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.VALUE_BUFFER_LENGTH); } }
        public IField ISN_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.ISN_BUFFER_LENGTH); } }
        public IField COMMAND_OPTION_1 { get { return GetElementByName<IField>(Names.COMMAND_OPTION_1); } }
        public IField COMMAND_OPTION_2 { get { return GetElementByName<IField>(Names.COMMAND_OPTION_2); } }
        public IField ADDITIONS_1 { get { return GetElementByName<IField>(Names.ADDITIONS_1); } }
        public IField ADDITIONS_2 { get { return GetElementByName<IField>(Names.ADDITIONS_2); } }
        public IField ADDITIONS_3 { get { return GetElementByName<IField>(Names.ADDITIONS_3); } }
        public IField ADDITIONS_4 { get { return GetElementByName<IField>(Names.ADDITIONS_4); } }
        public IField COMMAND_TIME { get { return GetElementByName<IField>(Names.COMMAND_TIME); } }
        public IField USER_AREA { get { return GetElementByName<IField>(Names.USER_AREA); } }
        public IField PH_FNTIC_C1 { get { return GetElementByName<IField>(Names.PH_FNTIC_C1); } }
        public IField PH_FNTIC_C2 { get { return GetElementByName<IField>(Names.PH_FNTIC_C2); } }
        public IField PH_FNTIC_C3 { get { return GetElementByName<IField>(Names.PH_FNTIC_C3); } }
        public IField PH_FNTIC_CX { get { return GetElementByName<IField>(Names.PH_FNTIC_CX); } }
        public IField PH_SUSS_ID { get { return GetElementByName<IField>(Names.PH_SUSS_ID); } }
        public IField PH_HIT { get { return GetElementByName<IField>(Names.PH_HIT); } }
        public IField PH_ERR_NAME { get { return GetElementByName<IField>(Names.PH_ERR_NAME); } }
        public IField PH_COUNT_UP { get { return GetElementByName<IField>(Names.PH_COUNT_UP); } }
        public IField PH_COUNT_INQUIRY { get { return GetElementByName<IField>(Names.PH_COUNT_INQUIRY); } }
        public IField PH_COUNT_DB { get { return GetElementByName<IField>(Names.PH_COUNT_DB); } }
        public IField PH_L1 { get { return GetElementByName<IField>(Names.PH_L1); } }
        public IField PH_CR1_INDXX { get { return GetElementByName<IField>(Names.PH_CR1_INDXX); } }
        public IField PH_CR2_INDXX { get { return GetElementByName<IField>(Names.PH_CR2_INDXX); } }
        public IField PH_CF1_INDXX { get { return GetElementByName<IField>(Names.PH_CF1_INDXX); } }
        public IField PH_CF2_INDXX { get { return GetElementByName<IField>(Names.PH_CF2_INDXX); } }
        public IField PH_DEGREE { get { return GetElementByName<IField>(Names.PH_DEGREE); } }
        public IField PH_PERCENT { get { return GetElementByName<IField>(Names.PH_PERCENT); } }
        public IField PH_NAME_RAW_INQ { get { return GetElementByName<IField>(Names.PH_NAME_RAW_INQ); } }
        public IField PH_NAME_RAW_MSTR { get { return GetElementByName<IField>(Names.PH_NAME_RAW_MSTR); } }
        public IGroup PH_NAME_CRUNCH_INQ { get { return GetElementByName<IGroup>(Names.PH_NAME_CRUNCH_INQ); } }
        public IArrayElementAccessor<IField> PH_L_CRNCH { get { return GetArrayElementAccessor<IField>(Names.PH_L_CRNCH); } }
        public IGroup PH_NAME_REDUC_INQ { get { return GetElementByName<IGroup>(Names.PH_NAME_REDUC_INQ); } }
        public IArrayElementAccessor<IField> PH_L_REDUC { get { return GetArrayElementAccessor<IField>(Names.PH_L_REDUC); } }
        public IGroup PH_SAVE_REDUC_INQ { get { return GetElementByName<IGroup>(Names.PH_SAVE_REDUC_INQ); } }
        public IArrayElementAccessor<IField> PH_S_REDUC { get { return GetArrayElementAccessor<IField>(Names.PH_S_REDUC); } }
        public IGroup PH_NAME_PARTS { get { return GetElementByName<IGroup>(Names.PH_NAME_PARTS); } }
        public IGroup PH_THREE_LETTERS { get { return GetElementByName<IGroup>(Names.PH_THREE_LETTERS); } }
        public IArrayElementAccessor<IField> PH_LETTERS_3 { get { return GetArrayElementAccessor<IField>(Names.PH_LETTERS_3); } }
        public IField PH_TWO_LETTERS { get { return GetElementByName<IField>(Names.PH_TWO_LETTERS); } }
        public IField PH_ONE_LETTER { get { return GetElementByName<IField>(Names.PH_ONE_LETTER); } }
        public IGroup PH_NAME_34_NUMERIC { get { return GetElementByName<IGroup>(Names.PH_NAME_34_NUMERIC); } }
        public IArrayElementAccessor<IField> PH_NAME_NUM_34 { get { return GetArrayElementAccessor<IField>(Names.PH_NAME_NUM_34); } }
        public IGroup PH_NAME_17_NUMERIC { get { return GetElementByName<IGroup>(Names.PH_NAME_17_NUMERIC); } }
        public IArrayElementAccessor<IField> PH_NAME_NUM_17 { get { return GetArrayElementAccessor<IField>(Names.PH_NAME_NUM_17); } }
        public IGroup PH_REFMT_34_17 { get { return GetElementByName<IGroup>(Names.PH_REFMT_34_17); } }
        public IField PH_DIGIT_1 { get { return GetElementByName<IField>(Names.PH_DIGIT_1); } }
        public IField PH_DIGIT_2 { get { return GetElementByName<IField>(Names.PH_DIGIT_2); } }
        public IGroup PH_FIRST_2_TABLE { get { return GetElementByName<IGroup>(Names.PH_FIRST_2_TABLE); } }
        public IGroup PH_FIRST_2_TBL { get { return GetElementByName<IGroup>(Names.PH_FIRST_2_TBL); } }
        public IArrayElementAccessor<IGroup> PH_FR2_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_FR2_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPH2 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPH2); } }
        public IArrayElementAccessor<IField> PH_NUM2 { get { return GetArrayElementAccessor<IField>(Names.PH_NUM2); } }
        public IGroup PH_FIRST_1_TABLE { get { return GetElementByName<IGroup>(Names.PH_FIRST_1_TABLE); } }
        public IGroup PH_FIRST_1_TBL { get { return GetElementByName<IGroup>(Names.PH_FIRST_1_TBL); } }
        public IArrayElementAccessor<IGroup> PH_FR1_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_FR1_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPH1 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPH1); } }
        public IArrayElementAccessor<IField> PH_NUM1 { get { return GetArrayElementAccessor<IField>(Names.PH_NUM1); } }
        public IGroup PH_REMAIN_2_TABLE { get { return GetElementByName<IGroup>(Names.PH_REMAIN_2_TABLE); } }
        public IGroup PH_REMAIN_2_TBL { get { return GetElementByName<IGroup>(Names.PH_REMAIN_2_TBL); } }
        public IArrayElementAccessor<IGroup> PH_RR2_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_RR2_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPHR2 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPHR2); } }
        public IArrayElementAccessor<IField> PH_NUMR2 { get { return GetArrayElementAccessor<IField>(Names.PH_NUMR2); } }
        public IGroup PH_REMAIN_1_TABLE { get { return GetElementByName<IGroup>(Names.PH_REMAIN_1_TABLE); } }
        public IGroup PH_REMAIN_1_TBL { get { return GetElementByName<IGroup>(Names.PH_REMAIN_1_TBL); } }
        public IArrayElementAccessor<IGroup> PH_RR1_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_RR1_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPHR1 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPHR1); } }
        public IArrayElementAccessor<IField> PH_NUMR1 { get { return GetArrayElementAccessor<IField>(Names.PH_NUMR1); } }
        public IField PH_CF2_INDEX { get { return GetElementByName<IField>(Names.PH_CF2_INDEX); } }
        public IField PH_CF1_INDEX { get { return GetElementByName<IField>(Names.PH_CF1_INDEX); } }
        public IField PH_CR2_INDEX { get { return GetElementByName<IField>(Names.PH_CR2_INDEX); } }
        public IField PH_CR1_INDEX { get { return GetElementByName<IField>(Names.PH_CR1_INDEX); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.EXTERNAL_ACTION_BLOCK_WS, (EXTERNAL_ACTION_BLOCK_WS) =>
           {
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.SRADALNK, FieldType.String, 8, "SWASZ990");
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.SRMODLNK, FieldType.String, 8, "SWEXIU15");
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_ABEND_FIELDS, (MV_ABEND_FIELDS) =>
               {
                   MV_ABEND_FIELDS.CreateNewField(Names.MV_ABEND_TYPE, FieldType.String, 1)
                       .NewCheckField(Names.MV_ABEND_TYPE_NONE, SPACE)
                       .NewCheckField(Names.MV_ABEND_TYPE_ADABAS, "A")
                       .NewCheckField(Names.MV_ABEND_TYPE_CICS, "C")
                       ;
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_ADABAS, (MV_ABEND_ADABAS) =>
                   {
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_ACTION, FieldType.String, 3);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
                   });
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_CICS, (MV_ABEND_CICS) =>
                   {
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_RESOURCE_NM, FieldType.String, 8);
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_FUNCTION_CD, FieldType.String, 2);
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_RESPONSE_CD, FieldType.String, 6);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_ABS_TIME, FieldType.PackedDecimal, 15);
               IGroup MV_CCYYMMDD_X8_local = (IGroup)EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CCYYMMDD_X8, (MV_CCYYMMDD_X8) =>
               {
                   MV_CCYYMMDD_X8.CreateNewField(Names.MV_CC, FieldType.UnsignedNumeric, 2);
                   IGroup MV_YYMMDD_X6_local = (IGroup)MV_CCYYMMDD_X8.CreateNewGroup(Names.MV_YYMMDD_X6, (MV_YYMMDD_X6) =>
                   {
                       MV_YYMMDD_X6.CreateNewField(Names.MV_YY, FieldType.UnsignedNumeric, 2);
                       MV_YYMMDD_X6.CreateNewField(Names.MV_MM, FieldType.UnsignedNumeric, 2);
                       MV_YYMMDD_X6.CreateNewField(Names.MV_DD, FieldType.UnsignedNumeric, 2);
                       MV_YYMMDD_X6.CreateNewFillerField(2, FillWith.Hashes);
                   });
                   MV_CCYYMMDD_X8.CreateNewGroupRedefine("FILLER_d2", MV_YYMMDD_X6_local, (FILLER_d2) =>
                   {
                       FILLER_d2.CreateNewField(Names.MV_YYMMDD, FieldType.UnsignedNumeric, 6);
                       FILLER_d2.CreateNewFillerField(2, FillWith.Hashes);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d4", MV_CCYYMMDD_X8_local, (FILLER_d4) =>
               {
                   FILLER_d4.CreateNewField(Names.MV_CURRENT_CCYY, FieldType.UnsignedNumeric, 4);
                   FILLER_d4.CreateNewField(Names.MV_CURRENT_MMDD, FieldType.UnsignedNumeric, 4);
                   FILLER_d4.CreateNewFillerField(2, FillWith.Hashes);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d6", MV_CCYYMMDD_X8_local, (FILLER_d6) =>
               {
                   FILLER_d6.CreateNewField(Names.MV_CCYYMMDD, FieldType.UnsignedNumeric, 8);
                   FILLER_d6.CreateNewFillerField(2, FillWith.Hashes);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_COMPLEMENT_DATE, FieldType.UnsignedPackedDecimal, 9);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_WRK_PTR, FieldType.CompShort, 4);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_ISN, FieldType.CompInt, 9);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_CLIENT_INFO_NUMBER, FieldType.String, 10);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_CLIENT_FOUND_IND, FieldType.String, 1)
                   .NewCheckField(Names.MV_CLIENT_FOUND, "Y")
                   ;
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_POINTER_X31, (MV_CLIENT_POINTER_X31) =>
               {
                   MV_CLIENT_POINTER_X31.CreateNewField(Names.MV_CLIENT_POINTER_X10, FieldType.String, 10);
                   MV_CLIENT_POINTER_X31.CreateNewField(Names.MV_CLIENT_POINTER_X21, FieldType.String, 21);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_ID_KEY, (MV_CLIENT_ID_KEY) =>
               {
                   MV_CLIENT_ID_KEY.CreateNewField(Names.MV_CIK_CLIENT_POINTER_X10, FieldType.String, 10);
                   MV_CLIENT_ID_KEY.CreateNewField(Names.MV_CIK_CLIENT_NAME, FieldType.String, 30);
                   MV_CLIENT_ID_KEY.CreateNewField(Names.MV_CIK_SSN, FieldType.UnsignedNumeric, 9);

                   IField MV_CIK_DATE_OF_BIRTH_SEX_local = MV_CLIENT_ID_KEY.CreateNewField(Names.MV_CIK_DATE_OF_BIRTH_SEX, FieldType.String, 9);
                   MV_CLIENT_ID_KEY.CreateNewGroupRedefine("FILLER_d8", MV_CIK_DATE_OF_BIRTH_SEX_local, (FILLER_d8) =>
                   {
                       FILLER_d8.CreateNewField(Names.MV_CIK_DATE_OF_BIRTH, FieldType.String, 8);
                       FILLER_d8.CreateNewField(Names.MV_CIK_SEX, FieldType.String, 1);
                   });
                   MV_CLIENT_ID_KEY.CreateNewGroup(Names.MV_CIK_CLIENT_POINTER_X21, (MV_CIK_CLIENT_POINTER_X21) =>
                   {
                       MV_CIK_CLIENT_POINTER_X21.CreateNewField(Names.MV_CIK_VERIFIED_SSN_FLAG, FieldType.String, 1);
                       MV_CIK_CLIENT_POINTER_X21.CreateNewGroup(Names.MV_CIK_SYSTEM_PARTICIPATION, (MV_CIK_SYSTEM_PARTICIPATION) =>
                       {
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_AE, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_CSE, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_KANPAY, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_KSCARES, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_CIK_SYS_PART_FACTS, FieldType.String, 1);
                           MV_CIK_SYSTEM_PARTICIPATION.CreateNewFillerField(15, FillWith.Hashes);
                       });
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_RECORD_NAME, (MV_RECORD_NAME) =>
               {
                   MV_RECORD_NAME.CreateNewField(Names.MV_RECORD_LAST_NAME, FieldType.String, 17);
                   MV_RECORD_NAME.CreateNewGroup(Names.MV_RECORD_FIRST_NAME, (MV_RECORD_FIRST_NAME) =>
                   {
                       MV_RECORD_FIRST_NAME.CreateNewField(Names.MV_RECORD_FIRST_NAME_1, FieldType.String, 1);
                       MV_RECORD_FIRST_NAME.CreateNewField(Names.MV_RECORD_FIRST_NAME_11, FieldType.String, 11);
                   });
                   MV_RECORD_NAME.CreateNewField(Names.MV_RECORD_INITIAL, FieldType.String, 1);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_PHONETIC_DATA, (MV_PHONETIC_DATA) =>
               {
                   MV_PHONETIC_DATA.CreateNewField(Names.MV_PHONETIC_1, FieldType.String, 1);
                   MV_PHONETIC_DATA.CreateNewField(Names.MV_PHONETIC_CODE, FieldType.String, 17);
                   MV_PHONETIC_DATA.CreateNewField(Names.MV_PHONETIC_3, FieldType.String, 3);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_DATE_OF_BIRTH_SEX, (MV_DATE_OF_BIRTH_SEX) =>
               {
                   MV_DATE_OF_BIRTH_SEX.CreateNewField(Names.MV_DATE_OF_BIRTH_X, FieldType.String, 8);
                   MV_DATE_OF_BIRTH_SEX.CreateNewField(Names.MV_SEX, FieldType.String, 1);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_POINTER, (MV_CLIENT_POINTER) =>
               {
                   MV_CLIENT_POINTER.CreateNewGroup(Names.MV_CLIENT_ID, (MV_CLIENT_ID) =>
                   {
                       MV_CLIENT_ID.CreateNewField(Names.MV_CLIENT_ID_910, FieldType.UnsignedNumeric, 10);
                   });
                   MV_CLIENT_POINTER.CreateNewGroup(Names.MV_CLIENT_POINTER_FLAGS, (MV_CLIENT_POINTER_FLAGS) =>
                   {
                       MV_CLIENT_POINTER_FLAGS.CreateNewField(Names.MV_VERIFIED_SSN_FLAG, FieldType.String, 1);
                       MV_CLIENT_POINTER_FLAGS.CreateNewGroup(Names.MV_SYSTEM_PARTICIPATION, (MV_SYSTEM_PARTICIPATION) =>
                       {
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_AE, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_AE_YES, "Y")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_CSE, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_CSE_YES, "Y", "A")
                               .NewCheckField(Names.MV_SYS_PART_CSE_NON, "N")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_KANPAY, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_KANPAY_YES, "Y")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_KSCARES, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_KSCARES_YES, "Y")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_FACTS, FieldType.String, 1)
                               .NewCheckField(Names.MV_SYS_PART_FACTS_YES, "Y")
                               ;
                           MV_SYSTEM_PARTICIPATION.CreateNewFillerField(15, FillWith.Hashes);
                       });
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.IMP_CLIENT_NUMBER_X10, (IMP_CLIENT_NUMBER_X10) =>
               {
                   IMP_CLIENT_NUMBER_X10.CreateNewField(Names.IMP_CLIENT_NUMBER, FieldType.UnsignedNumeric, 10);
               });

               IField IMP_CLIENT_KEY_local = EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.IMP_CLIENT_KEY, FieldType.String, 100);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine(Names.IMP_CLIENT_KEY_RED, IMP_CLIENT_KEY_local, (IMP_CLIENT_KEY_RED) =>
               {
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_CLIENT_NUMBER, FieldType.String, 10);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_CLIENT_NAME, FieldType.String, 30);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_SSN, FieldType.UnsignedNumeric, 8);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_DATE_OF_BIRTH, FieldType.String, 8);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_SEX, FieldType.String, 1);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_VERIFIED_SSN_FLAG, FieldType.String, 1);
                   IMP_CLIENT_KEY_RED.CreateNewField(Names.IMP_CLIKEY_SYS_PART, FieldType.String, 20);
                   IMP_CLIENT_KEY_RED.CreateNewFillerField(22, FillWith.Hashes);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.IMP_CLIENT_INFO, (IMP_CLIENT_INFO) =>
               {
                   IMP_CLIENT_INFO.CreateNewGroup(Names.IMP_NAME, (IMP_NAME) =>
                   {
                       IMP_NAME.CreateNewField(Names.IMP_LAST_NAME, FieldType.String, 17);
                       IMP_NAME.CreateNewField(Names.IMP_FIRST_NAME, FieldType.String, 12);
                       IMP_NAME.CreateNewField(Names.IMP_INITIAL, FieldType.String, 1);
                   });
                   IMP_CLIENT_INFO.CreateNewGroup(Names.IMP_DATE_OF_BIRTH_SEX, (IMP_DATE_OF_BIRTH_SEX) =>
                   {
                       IMP_DATE_OF_BIRTH_SEX.CreateNewField(Names.IMP_DATE_OF_BIRTH, FieldType.String, 8);
                       IMP_DATE_OF_BIRTH_SEX.CreateNewField(Names.IMP_SEX, FieldType.String, 1);
                   });
                   IMP_CLIENT_INFO.CreateNewGroup(Names.IMP_SOC_SEC_NUM_X9, (IMP_SOC_SEC_NUM_X9) =>
                   {

                       IField IMP_SOC_SEC_NUM_local = IMP_SOC_SEC_NUM_X9.CreateNewField(Names.IMP_SOC_SEC_NUM, FieldType.UnsignedNumeric, 9);
                       IMP_SOC_SEC_NUM_X9.CreateNewGroupRedefine("FILLER_d12", IMP_SOC_SEC_NUM_local, (FILLER_d12) =>
                       {
                           FILLER_d12.CreateNewField(Names.IMP_SOC_SEC_NUM_3, FieldType.UnsignedNumeric, 3)
                               .NewCheckFieldRange(Names.IMP_SOC_SEC_NUM_3_VALID, 001, 665, 667, 899)
                               ;
                           FILLER_d12.CreateNewField(Names.IMP_SOC_SEC_NUM_2, FieldType.UnsignedNumeric, 2)
                               .NewCheckFieldRange(Names.IMP_SOC_SEC_NUM_2_VALID, 01, 99)
                               ;
                           FILLER_d12.CreateNewField(Names.IMP_SOC_SEC_NUM_4, FieldType.UnsignedNumeric, 4)
                               .NewCheckFieldRange(Names.IMP_SOC_SEC_NUM_4_VALID, 0001, 9999)
                               ;
                       });
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.IMP_CONVERT_FLAG, FieldType.String, 1);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.CUR_CLIENT_INFO, (CUR_CLIENT_INFO) =>
               {
                   CUR_CLIENT_INFO.CreateNewGroup(Names.CUR_NAME, (CUR_NAME) =>
                   {
                       CUR_NAME.CreateNewField(Names.CUR_LAST_NAME, FieldType.String, 17);
                       CUR_NAME.CreateNewField(Names.CUR_FIRST_NAME, FieldType.String, 12);
                       CUR_NAME.CreateNewField(Names.CUR_INITIAL, FieldType.String, 1);
                   });
                   CUR_CLIENT_INFO.CreateNewGroup(Names.CUR_DATE_OF_BIRTH_SEX, (CUR_DATE_OF_BIRTH_SEX) =>
                   {
                       CUR_DATE_OF_BIRTH_SEX.CreateNewGroup(Names.CUR_DATE_OF_BIRTH_X8, (CUR_DATE_OF_BIRTH_X8) =>
                       {
                           CUR_DATE_OF_BIRTH_X8.CreateNewField(Names.CUR_DATE_OF_BIRTH, FieldType.String, 8);
                       });
                       CUR_DATE_OF_BIRTH_SEX.CreateNewField(Names.CUR_SEX, FieldType.String, 1);
                   });
                   CUR_CLIENT_INFO.CreateNewGroup(Names.CUR_SOC_SEC_NUM_X9, (CUR_SOC_SEC_NUM_X9) =>
                   {
                       CUR_SOC_SEC_NUM_X9.CreateNewField(Names.CUR_SOC_SEC_NUM, FieldType.UnsignedNumeric, 9);
                   });
               });
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT, (DCLKSD_CLIENT) =>
           {
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_SSN, FieldType.String, 9);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_PREVIOUS_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_PHONETIC_DATA, FieldType.String, 21);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_DT_OF_LAST_UPDATE, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_DATE_OF_BIRTH, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_VERIFIED_SSN_FLAG, FieldType.String, 1);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_CLIENT_NAME, FieldType.String, 30);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_CREATED_BY, FieldType.String, 8);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_FK_CLB_CLIENT_NO, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_NAME_TYPE, FieldType.String, 1, SPACES);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT_BASIC, (DCLKSD_CLIENT_BASIC) =>
           {
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_NUMBER, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_INITIALS, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CLIENT_SURNAME, FieldType.String, 17);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CIS_REPL_IND, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_WORK_PHONE, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_PARENT_RGHTS_SEV, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_PRNT_RGHTS_SEV_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_LEGAL_STATUS, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INSURANCE_CODE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INITIAL_CUSTODY_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_HOME_PHONE, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_DATE_OF_BIRTH, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CURR_PLACEMNT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CURRENT_PLACEMENT, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_G_CAUSE_CODE, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_G_CAUSE_CL_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CSEA_COOP_CODE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_COUNTY_CRT_COMMIT, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MONTHS_ASST_AF, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MONTHS_ASST_GA, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MO_DEATH_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MO_PRT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_FA_DEATH_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_FA_PRT_DT, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MPI_ID, FieldType.String, 38);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_MED_COVERAGE_IND, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INSURANCE_CARRIER, FieldType.String, 30);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INSURANCE_POLCY_NO, FieldType.String, 30);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SPOKEN_LANGUAGE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_WRITTEN_LANGUAGE, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_STATE_OF_BIRTH, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SCHOOL_DISTRICT, FieldType.String, 3);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_ETHNIC_CLASS, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SUFFIX_NAME, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_EMPLOYER_NAME, FieldType.String, 28);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_EARNED_INCOME_AMT, FieldType.PackedDecimal, 8, null, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_INCOME_FREQUENCY, FieldType.String, 2);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_KEES_ABMS_ID, FieldType.String, 38);
               DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLIENTB_EMAIL_ADDRESS, (CLIENTB_EMAIL_ADDRESS) =>
               {
                   CLIENTB_EMAIL_ADDRESS.CreateNewField(Names.CLIENTB_EMAIL_ADDRESS_LEN, FieldType.CompShort, 4);
                   CLIENTB_EMAIL_ADDRESS.CreateNewField(Names.CLIENTB_EMAIL_ADDRESS_TEXT, FieldType.String, 100);
               });
               DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLIENTB_OCCUPATION, (CLIENTB_OCCUPATION) =>
               {
                   CLIENTB_OCCUPATION.CreateNewField(Names.CLIENTB_OCCUPATION_LEN, FieldType.CompShort, 4);
                   CLIENTB_OCCUPATION.CreateNewField(Names.CLIENTB_OCCUPATION_TEXT, FieldType.String, 100);
               });
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CREATED_BY, FieldType.String, 8);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_SENSITIVE_FLAG, FieldType.String, 1, SPACES);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_CIS_PREFERRED_ID, FieldType.String, 10, SPACES);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLIENTB_NAME_TYPE, FieldType.String, 1, SPACES);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_SYSTEM_PART, (DCLKSD_SYSTEM_PART) =>
           {
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_SYSTEM_CODE, FieldType.String, 2);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_PARTICIPATION_FLAG, FieldType.String, 1);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_CREATED_BY, FieldType.String, 8);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_FK_CLB_CLIENT_NO, FieldType.String, 10);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_FK_CLI_CLIENT_NAME, FieldType.String, 30);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SYSPART_FK_CLI_SSN, FieldType.String, 9);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_NEXT_CLIENT_ID, (DCLKSD_NEXT_CLIENT_ID) =>
           {
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_IDENT, FieldType.String, 10);
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_NEXT_CLIENT_ID, FieldType.String, 10);
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_CREATED_BY, FieldType.String, 8);
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_NEXT_CLIENT_ID.CreateNewField(Names.NEXTCLI_LAST_MODIFIED_TMST, FieldType.String, 26);
           });

            recordDef.CreateNewGroup(Names.WS_DB2_CONSTANT_AREAS, (WS_DB2_CONSTANT_AREAS) =>
           {
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_AE, FieldType.String, 2, "AE");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_CS, FieldType.String, 2, "CS");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_KA, FieldType.String, 2, "KA");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_KS, FieldType.String, 2, "KS");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_FA, FieldType.String, 2, "FA");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_SYS_CD_KM, FieldType.String, 2, "KM");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_YES_Y, FieldType.String, 1, "Y");
               WS_DB2_CONSTANT_AREAS.CreateNewField(Names.WS_IDENT_0000000001, FieldType.String, 10, "0000000001");
           });

            recordDef.CreateNewGroup(Names.WS_DB2_WORK_AREAS, (WS_DB2_WORK_AREAS) =>
           {
               WS_DB2_WORK_AREAS.CreateNewField(Names.CLIENT_WS_DATE_OF_BIRTH, FieldType.String, 8, SPACES);
               WS_DB2_WORK_AREAS.CreateNewField(Names.WS_CLIENT_DATE_OF_BIRTH, FieldType.String, 10, SPACES);
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_DB2_SWITCHES, (WS_DB2_SWITCHES) =>
               {
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_CLIENT_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_CLIENT_EOF_NO, "N")
                       .NewCheckField(Names.WS_CLIENT_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_CLIENTB_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_CLIENTB_EOF_NO, "N")
                       .NewCheckField(Names.WS_CLIENTB_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_SYSPART_EOF_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_SYSPART_EOF_NO, "N")
                       .NewCheckField(Names.WS_SYSPART_EOF_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_DUP_SSN_SW, FieldType.String, 1, "N")
                       .NewCheckField(Names.WS_DUP_SSN_NO, "N")
                       .NewCheckField(Names.WS_DUP_SSN_YES, "Y")
                       ;
                   WS_DB2_SWITCHES.CreateNewField(Names.WS_PROCESS_SW, FieldType.String, 1, SPACE)
                       .NewCheckField(Names.WS_PROCESS_ADD, "A")
                       .NewCheckField(Names.WS_PROCESS_UPD, "U")
                       ;
               });
               WS_DB2_WORK_AREAS.CreateNewGroup(Names.WS_CLIENT_POINTER, (WS_CLIENT_POINTER) =>
               {
                   WS_CLIENT_POINTER.CreateNewField(Names.WS_CLIPTR_CLIENT_ID, FieldType.String, 10, SPACES);
                   WS_CLIENT_POINTER.CreateNewField(Names.WS_CLIPTR_VERIFIED_SSN_FLAG, FieldType.String, 1, SPACES);
                   WS_CLIENT_POINTER.CreateNewGroup(Names.WS_CLIPTR_SYSTEM_PARTICIPATION, (WS_CLIPTR_SYSTEM_PARTICIPATION) =>
                   {
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_AE, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_CS, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_KA, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_KS, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewField(Names.WS_CLIPTR_SYSPART_FA, FieldType.String, 1, SPACES);
                       WS_CLIPTR_SYSTEM_PARTICIPATION.CreateNewFillerField(FieldType.String, 15, SPACES);
                   });
               });
           });

            recordDef.CreateNewGroup(Names.CONTROL_BLOCK, (CONTROL_BLOCK) =>
           {
               CONTROL_BLOCK.CreateNewFillerField(FieldType.String, 2, "AP");
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_CODE, FieldType.String, 2, "RC");
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_ID, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.FILE_NUMBER, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.RESPONSE_CODE, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_LOWER_LIMIT, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_QUANTITY, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.FORMAT_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.RECORD_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.SEARCH_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.VALUE_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_OPTION_1, FieldType.String, 1, SPACE);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_OPTION_2, FieldType.String, 1, SPACE);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_1, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_2, FieldType.String, 4, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_3, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_4, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewFillerField(FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_TIME, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.USER_AREA, FieldType.String, 4, SPACES);
           });
            recordDef.CreateNewField(Names.PH_FNTIC_C1, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_C2, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_C3, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_CX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_SUSS_ID, FieldType.String, 1);
            recordDef.CreateNewField(Names.PH_HIT, FieldType.String, 2);
            recordDef.CreateNewField(Names.PH_ERR_NAME, FieldType.String, 1);
            recordDef.CreateNewField(Names.PH_COUNT_UP, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_COUNT_INQUIRY, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_COUNT_DB, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_L1, FieldType.UnsignedNumeric, 1);
            recordDef.CreateNewField(Names.PH_CR1_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CR2_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CF1_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CF2_INDXX, FieldType.UnsignedNumeric, 2);

            IField PH_DEGREE_local = recordDef.CreateNewField(Names.PH_DEGREE, FieldType.UnsignedNumeric, 3, null, 2);
            recordDef.CreateNewFieldRedefine(Names.PH_PERCENT, FieldType.String, PH_DEGREE_local, 3);
            recordDef.CreateNewField(Names.PH_NAME_RAW_INQ, FieldType.String, 17);
            recordDef.CreateNewField(Names.PH_NAME_RAW_MSTR, FieldType.String, 17);

            recordDef.CreateNewGroup(Names.PH_NAME_CRUNCH_INQ, (PH_NAME_CRUNCH_INQ) =>
           {
               PH_NAME_CRUNCH_INQ.CreateNewFieldArray(Names.PH_L_CRNCH, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_REDUC_INQ, (PH_NAME_REDUC_INQ) =>
           {
               PH_NAME_REDUC_INQ.CreateNewFieldArray(Names.PH_L_REDUC, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_SAVE_REDUC_INQ, (PH_SAVE_REDUC_INQ) =>
           {
               PH_SAVE_REDUC_INQ.CreateNewFieldArray(Names.PH_S_REDUC, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_PARTS, (PH_NAME_PARTS) =>
           {
               PH_NAME_PARTS.CreateNewGroup(Names.PH_THREE_LETTERS, (PH_THREE_LETTERS) =>
               {
                   PH_THREE_LETTERS.CreateNewFieldArray(Names.PH_LETTERS_3, 3, FieldType.String, 1);
               });
               PH_NAME_PARTS.CreateNewField(Names.PH_TWO_LETTERS, FieldType.String, 2);
               PH_NAME_PARTS.CreateNewField(Names.PH_ONE_LETTER, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_34_NUMERIC, (PH_NAME_34_NUMERIC) =>
           {
               PH_NAME_34_NUMERIC.CreateNewFieldArray(Names.PH_NAME_NUM_34, 17, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_17_NUMERIC, (PH_NAME_17_NUMERIC) =>
           {
               PH_NAME_17_NUMERIC.CreateNewFieldArray(Names.PH_NAME_NUM_17, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_REFMT_34_17, (PH_REFMT_34_17) =>
           {
               PH_REFMT_34_17.CreateNewField(Names.PH_DIGIT_1, FieldType.String, 1);
               PH_REFMT_34_17.CreateNewField(Names.PH_DIGIT_2, FieldType.String, 1);
           });

            IGroup PH_FIRST_2_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_FIRST_2_TABLE, (PH_FIRST_2_TABLE) =>
           {
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 24, "DG07GF08GM03GN02KN02PH08");
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 24, "PF08PN02PS00SH06TS00TZ00");
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 20, "WR04CE00CH06CI00CY00");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_FIRST_2_TBL, PH_FIRST_2_TABLE_local, (PH_FIRST_2_TBL) =>
            {
                PH_FIRST_2_TBL.CreateNewGroupArray(Names.PH_FR2_NUM, 17, (PH_FR2_NUM) =>
                {
                    PH_FR2_NUM.CreateNewField(Names.PH_ALPH2, FieldType.String, 2);
                    PH_FR2_NUM.CreateNewField(Names.PH_NUM2, FieldType.String, 2);
                });
            });

            IGroup PH_FIRST_1_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_FIRST_1_TABLE, (PH_FIRST_1_TABLE) =>
           {
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "A 1B09C07D01E 1F08G07H 2");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "I 1J 3K07L05M03N02O 1P09");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "Q07R04S00T01U 1V08W 4X07");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 6, "Y 5Z00");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_FIRST_1_TBL, PH_FIRST_1_TABLE_local, (PH_FIRST_1_TBL) =>
            {
                PH_FIRST_1_TBL.CreateNewGroupArray(Names.PH_FR1_NUM, 26, (PH_FR1_NUM) =>
                {
                    PH_FR1_NUM.CreateNewField(Names.PH_ALPH1, FieldType.String, 1);
                    PH_FR1_NUM.CreateNewField(Names.PH_NUM1, FieldType.String, 2);
                });
            });

            IGroup PH_REMAIN_2_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_REMAIN_2_TABLE, (PH_REMAIN_2_TABLE) =>
           {
               PH_REMAIN_2_TABLE.CreateNewFillerField(FieldType.String, 24, "CE 0CI 0CH 6CY 0DG 7PH 8");
               PH_REMAIN_2_TABLE.CreateNewFillerField(FieldType.String, 16, "SH 6TS 0TZ 0    ");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_REMAIN_2_TBL, PH_REMAIN_2_TABLE_local, (PH_REMAIN_2_TBL) =>
            {
                PH_REMAIN_2_TBL.CreateNewGroupArray(Names.PH_RR2_NUM, 10, (PH_RR2_NUM) =>
                {
                    PH_RR2_NUM.CreateNewField(Names.PH_ALPHR2, FieldType.String, 2);
                    PH_RR2_NUM.CreateNewField(Names.PH_NUMR2, FieldType.String, 2);
                });
            });

            IGroup PH_REMAIN_1_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_REMAIN_1_TABLE, (PH_REMAIN_1_TABLE) =>
           {
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 24, "B 9C 7D 1F 8G 7J 6K 7L 5");
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 24, "M 3N 2P 9Q 7R 4S 0T 1V 8");
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 6, "X 7Z 0");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_REMAIN_1_TBL, PH_REMAIN_1_TABLE_local, (PH_REMAIN_1_TBL) =>
            {
                PH_REMAIN_1_TBL.CreateNewGroupArray(Names.PH_RR1_NUM, 18, (PH_RR1_NUM) =>
                {
                    PH_RR1_NUM.CreateNewField(Names.PH_ALPHR1, FieldType.String, 1);
                    PH_RR1_NUM.CreateNewField(Names.PH_NUMR1, FieldType.String, 2);
                });
            });
            recordDef.CreateNewField(Names.PH_CF2_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CF1_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CR2_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CR1_INDEX, FieldType.CompShort, 4);


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXIU15_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXIU15_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string IMPORT_CURRENT_0001EV = "IMPORT_CURRENT_0001EV";
            internal const string DATE_WORK_AREA_0001ET = "DATE_WORK_AREA_0001ET";
            internal const string DATE_0001AS = "DATE_0001AS";
            internal const string DATE_0001 = "DATE_0001";
            internal const string DATE_0001XX = "DATE_0001XX";
            internal const string IMPORT_0002EV = "IMPORT_0002EV";
            internal const string CSE_PERSONS_WORK_SET_0002ET = "CSE_PERSONS_WORK_SET_0002ET";
            internal const string LAST_NAME_0002AS = "LAST_NAME_0002AS";
            internal const string LAST_NAME_0002 = "LAST_NAME_0002";
            internal const string LAST_NAME_0002XX = "LAST_NAME_0002XX";
            internal const string FIRST_NAME_0002AS = "FIRST_NAME_0002AS";
            internal const string FIRST_NAME_0002 = "FIRST_NAME_0002";
            internal const string FIRST_NAME_0002XX = "FIRST_NAME_0002XX";
            internal const string MIDDLE_INITIAL_0002AS = "MIDDLE_INITIAL_0002AS";
            internal const string MIDDLE_INITIAL_0002 = "MIDDLE_INITIAL_0002";
            internal const string MIDDLE_INITIAL_0002XX = "MIDDLE_INITIAL_0002XX";
            internal const string SSN_0002AS = "SSN_0002AS";
            internal const string SSN_0002 = "SSN_0002";
            internal const string SSN_0002XX = "SSN_0002XX";
            internal const string DOB_0002AS = "DOB_0002AS";
            internal const string DOB_0002 = "DOB_0002";
            internal const string DOB_0002XX = "DOB_0002XX";
            internal const string SEX_0002AS = "SEX_0002AS";
            internal const string SEX_0002 = "SEX_0002";
            internal const string SEX_0002XX = "SEX_0002XX";
            internal const string NUMBER_0002AS = "NUMBER_0002AS";
            internal const string NUMBER_0002 = "NUMBER_0002";
            internal const string NUMBER_0002XX = "NUMBER_0002XX";
            internal const string IMPORT_CONVERTED_0003EV = "IMPORT_CONVERTED_0003EV";
            internal const string IEF_SUPPLIED_0003ET = "IEF_SUPPLIED_0003ET";
            internal const string FLAG_0003AS = "FLAG_0003AS";
            internal const string FLAG_0003 = "FLAG_0003";
            internal const string FLAG_0003XX = "FLAG_0003XX";
            internal const string EXPORT_0004EV = "EXPORT_0004EV";
            internal const string ABEND_DATA_0004ET = "ABEND_DATA_0004ET";
            internal const string TYPE_0004AS = "TYPE_0004AS";
            internal const string TYPE_0004 = "TYPE_0004";
            internal const string TYPE_0004XX = "TYPE_0004XX";
            internal const string ADABAS_FILE_NUMBER_0004AS = "ADABAS_FILE_NUMBER_0004AS";
            internal const string ADABAS_FILE_NUMBER_0004 = "ADABAS_FILE_NUMBER_0004";
            internal const string ADABAS_FILE_NUMBER_0004XX = "ADABAS_FILE_NUMBER_0004XX";
            internal const string ADABAS_FILE_ACTION_0004AS = "ADABAS_FILE_ACTION_0004AS";
            internal const string ADABAS_FILE_ACTION_0004 = "ADABAS_FILE_ACTION_0004";
            internal const string ADABAS_FILE_ACTION_0004XX = "ADABAS_FILE_ACTION_0004XX";
            internal const string ADABAS_RESPONSE_CD_0004AS = "ADABAS_RESPONSE_CD_0004AS";
            internal const string ADABAS_RESPONSE_CD_0004 = "ADABAS_RESPONSE_CD_0004";
            internal const string ADABAS_RESPONSE_CD_0004XX = "ADABAS_RESPONSE_CD_0004XX";
            internal const string CICS_RESOURCE_NM_0004AS = "CICS_RESOURCE_NM_0004AS";
            internal const string CICS_RESOURCE_NM_0004 = "CICS_RESOURCE_NM_0004";
            internal const string CICS_RESOURCE_NM_0004XX = "CICS_RESOURCE_NM_0004XX";
            internal const string CICS_FUNCTION_CD_0004AS = "CICS_FUNCTION_CD_0004AS";
            internal const string CICS_FUNCTION_CD_0004 = "CICS_FUNCTION_CD_0004";
            internal const string CICS_FUNCTION_CD_0004XX = "CICS_FUNCTION_CD_0004XX";
            internal const string CICS_RESPONSE_CD_0004AS = "CICS_RESPONSE_CD_0004AS";
            internal const string CICS_RESPONSE_CD_0004 = "CICS_RESPONSE_CD_0004";
            internal const string CICS_RESPONSE_CD_0004XX = "CICS_RESPONSE_CD_0004XX";
            internal const string TWA = "TWA";
            internal const string TWA_ADABAS_PARMS = "TWA_ADABAS_PARMS";
            internal const string TWA_CICS_PARMS = "TWA_CICS_PARMS";
            internal const string TWA_PROGRAM_ID = "TWA_PROGRAM_ID";
            internal const string TWA_ADDR_LIST = "TWA_ADDR_LIST";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup IMPORT_CURRENT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_CURRENT_0001EV); } }
        public IGroup DATE_WORK_AREA_0001ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0001ET); } }
        public IField DATE_0001AS { get { return GetElementByName<IField>(Names.DATE_0001AS); } }
        public IField DATE_0001 { get { return GetElementByName<IField>(Names.DATE_0001); } }
        public IField DATE_0001XX { get { return GetElementByName<IField>(Names.DATE_0001XX); } }
        public IGroup IMPORT_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_0002EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0002ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0002ET); } }
        public IField LAST_NAME_0002AS { get { return GetElementByName<IField>(Names.LAST_NAME_0002AS); } }
        public IField LAST_NAME_0002 { get { return GetElementByName<IField>(Names.LAST_NAME_0002); } }
        public IField LAST_NAME_0002XX { get { return GetElementByName<IField>(Names.LAST_NAME_0002XX); } }
        public IField FIRST_NAME_0002AS { get { return GetElementByName<IField>(Names.FIRST_NAME_0002AS); } }
        public IField FIRST_NAME_0002 { get { return GetElementByName<IField>(Names.FIRST_NAME_0002); } }
        public IField FIRST_NAME_0002XX { get { return GetElementByName<IField>(Names.FIRST_NAME_0002XX); } }
        public IField MIDDLE_INITIAL_0002AS { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002AS); } }
        public IField MIDDLE_INITIAL_0002 { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002); } }
        public IField MIDDLE_INITIAL_0002XX { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002XX); } }
        public IField SSN_0002AS { get { return GetElementByName<IField>(Names.SSN_0002AS); } }
        public IField SSN_0002 { get { return GetElementByName<IField>(Names.SSN_0002); } }
        public IField SSN_0002XX { get { return GetElementByName<IField>(Names.SSN_0002XX); } }
        public IField DOB_0002AS { get { return GetElementByName<IField>(Names.DOB_0002AS); } }
        public IField DOB_0002 { get { return GetElementByName<IField>(Names.DOB_0002); } }
        public IField DOB_0002XX { get { return GetElementByName<IField>(Names.DOB_0002XX); } }
        public IField SEX_0002AS { get { return GetElementByName<IField>(Names.SEX_0002AS); } }
        public IField SEX_0002 { get { return GetElementByName<IField>(Names.SEX_0002); } }
        public IField SEX_0002XX { get { return GetElementByName<IField>(Names.SEX_0002XX); } }
        public IField NUMBER_0002AS { get { return GetElementByName<IField>(Names.NUMBER_0002AS); } }
        public IField NUMBER_0002 { get { return GetElementByName<IField>(Names.NUMBER_0002); } }
        public IField NUMBER_0002XX { get { return GetElementByName<IField>(Names.NUMBER_0002XX); } }
        public IGroup IMPORT_CONVERTED_0003EV { get { return GetElementByName<IGroup>(Names.IMPORT_CONVERTED_0003EV); } }
        public IGroup IEF_SUPPLIED_0003ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0003ET); } }
        public IField FLAG_0003AS { get { return GetElementByName<IField>(Names.FLAG_0003AS); } }
        public IField FLAG_0003 { get { return GetElementByName<IField>(Names.FLAG_0003); } }
        public IField FLAG_0003XX { get { return GetElementByName<IField>(Names.FLAG_0003XX); } }
        public IGroup EXPORT_0004EV { get { return GetElementByName<IGroup>(Names.EXPORT_0004EV); } }
        public IGroup ABEND_DATA_0004ET { get { return GetElementByName<IGroup>(Names.ABEND_DATA_0004ET); } }
        public IField TYPE_0004AS { get { return GetElementByName<IField>(Names.TYPE_0004AS); } }
        public IField TYPE_0004 { get { return GetElementByName<IField>(Names.TYPE_0004); } }
        public IField TYPE_0004XX { get { return GetElementByName<IField>(Names.TYPE_0004XX); } }
        public IField ADABAS_FILE_NUMBER_0004AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0004AS); } }
        public IField ADABAS_FILE_NUMBER_0004 { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0004); } }
        public IField ADABAS_FILE_NUMBER_0004XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0004XX); } }
        public IField ADABAS_FILE_ACTION_0004AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0004AS); } }
        public IField ADABAS_FILE_ACTION_0004 { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0004); } }
        public IField ADABAS_FILE_ACTION_0004XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0004XX); } }
        public IField ADABAS_RESPONSE_CD_0004AS { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0004AS); } }
        public IField ADABAS_RESPONSE_CD_0004 { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0004); } }
        public IField ADABAS_RESPONSE_CD_0004XX { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0004XX); } }
        public IField CICS_RESOURCE_NM_0004AS { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0004AS); } }
        public IField CICS_RESOURCE_NM_0004 { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0004); } }
        public IField CICS_RESOURCE_NM_0004XX { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0004XX); } }
        public IField CICS_FUNCTION_CD_0004AS { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0004AS); } }
        public IField CICS_FUNCTION_CD_0004 { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0004); } }
        public IField CICS_FUNCTION_CD_0004XX { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0004XX); } }
        public IField CICS_RESPONSE_CD_0004AS { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0004AS); } }
        public IField CICS_RESPONSE_CD_0004 { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0004); } }
        public IField CICS_RESPONSE_CD_0004XX { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0004XX); } }
        public IGroup TWA { get { return GetElementByName<IGroup>(Names.TWA); } }
        public IGroup TWA_ADABAS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_ADABAS_PARMS); } }
        public IGroup TWA_CICS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_CICS_PARMS); } }
        public IField TWA_PROGRAM_ID { get { return GetElementByName<IField>(Names.TWA_PROGRAM_ID); } }
        public IGroup TWA_ADDR_LIST { get { return GetElementByName<IGroup>(Names.TWA_ADDR_LIST); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d32", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d32) =>
                   {
                       FILLER_d32.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d32.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d32.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(96, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 16);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewFillerField(199, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_CURRENT_0001EV, (IMPORT_CURRENT_0001EV) =>
           {
               IMPORT_CURRENT_0001EV.CreateNewGroup(Names.DATE_WORK_AREA_0001ET, (DATE_WORK_AREA_0001ET) =>
               {
                   DATE_WORK_AREA_0001ET.CreateNewField(Names.DATE_0001AS, FieldType.String, 1);

                   IField DATE_0001_local = DATE_WORK_AREA_0001ET.CreateNewField(Names.DATE_0001, FieldType.SignedNumeric, 8);
                   DATE_WORK_AREA_0001ET.CreateNewFieldRedefine(Names.DATE_0001XX, FieldType.String, DATE_0001_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0002EV, (IMPORT_0002EV) =>
           {
               IMPORT_0002EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0002ET, (CSE_PERSONS_WORK_SET_0002ET) =>
               {
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.LAST_NAME_0002AS, FieldType.String, 1);

                   IField LAST_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.LAST_NAME_0002, FieldType.String, 17);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.LAST_NAME_0002XX, FieldType.String, LAST_NAME_0002_local, 17);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FIRST_NAME_0002AS, FieldType.String, 1);

                   IField FIRST_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FIRST_NAME_0002, FieldType.String, 12);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.FIRST_NAME_0002XX, FieldType.String, FIRST_NAME_0002_local, 12);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.MIDDLE_INITIAL_0002AS, FieldType.String, 1);

                   IField MIDDLE_INITIAL_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.MIDDLE_INITIAL_0002, FieldType.String, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0002XX, FieldType.String, MIDDLE_INITIAL_0002_local, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SSN_0002AS, FieldType.String, 1);

                   IField SSN_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SSN_0002, FieldType.String, 9);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.SSN_0002XX, FieldType.String, SSN_0002_local, 9);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.DOB_0002AS, FieldType.String, 1);

                   IField DOB_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.DOB_0002, FieldType.SignedNumeric, 8);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.DOB_0002XX, FieldType.String, DOB_0002_local, 8);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SEX_0002AS, FieldType.String, 1);

                   IField SEX_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SEX_0002, FieldType.String, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.SEX_0002XX, FieldType.String, SEX_0002_local, 1);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.NUMBER_0002AS, FieldType.String, 1);

                   IField NUMBER_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.NUMBER_0002, FieldType.String, 10);
                   CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.NUMBER_0002XX, FieldType.String, NUMBER_0002_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_CONVERTED_0003EV, (IMPORT_CONVERTED_0003EV) =>
           {
               IMPORT_CONVERTED_0003EV.CreateNewGroup(Names.IEF_SUPPLIED_0003ET, (IEF_SUPPLIED_0003ET) =>
               {
                   IEF_SUPPLIED_0003ET.CreateNewField(Names.FLAG_0003AS, FieldType.String, 1);

                   IField FLAG_0003_local = IEF_SUPPLIED_0003ET.CreateNewField(Names.FLAG_0003, FieldType.String, 1);
                   IEF_SUPPLIED_0003ET.CreateNewFieldRedefine(Names.FLAG_0003XX, FieldType.String, FLAG_0003_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_0004EV, (EXPORT_0004EV) =>
           {
               EXPORT_0004EV.CreateNewGroup(Names.ABEND_DATA_0004ET, (ABEND_DATA_0004ET) =>
               {
                   ABEND_DATA_0004ET.CreateNewField(Names.TYPE_0004AS, FieldType.String, 1);

                   IField TYPE_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.TYPE_0004, FieldType.String, 1);
                   ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.TYPE_0004XX, FieldType.String, TYPE_0004_local, 1);
                   ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0004AS, FieldType.String, 1);

                   IField ADABAS_FILE_NUMBER_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0004, FieldType.String, 4);
                   ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.ADABAS_FILE_NUMBER_0004XX, FieldType.String, ADABAS_FILE_NUMBER_0004_local, 4);
                   ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_ACTION_0004AS, FieldType.String, 1);

                   IField ADABAS_FILE_ACTION_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_ACTION_0004, FieldType.String, 3);
                   ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.ADABAS_FILE_ACTION_0004XX, FieldType.String, ADABAS_FILE_ACTION_0004_local, 3);
                   ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0004AS, FieldType.String, 1);

                   IField ADABAS_RESPONSE_CD_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0004, FieldType.String, 4);
                   ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.ADABAS_RESPONSE_CD_0004XX, FieldType.String, ADABAS_RESPONSE_CD_0004_local, 4);
                   ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESOURCE_NM_0004AS, FieldType.String, 1);

                   IField CICS_RESOURCE_NM_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESOURCE_NM_0004, FieldType.String, 8);
                   ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.CICS_RESOURCE_NM_0004XX, FieldType.String, CICS_RESOURCE_NM_0004_local, 8);
                   ABEND_DATA_0004ET.CreateNewField(Names.CICS_FUNCTION_CD_0004AS, FieldType.String, 1);

                   IField CICS_FUNCTION_CD_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.CICS_FUNCTION_CD_0004, FieldType.String, 2);
                   ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.CICS_FUNCTION_CD_0004XX, FieldType.String, CICS_FUNCTION_CD_0004_local, 2);
                   ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESPONSE_CD_0004AS, FieldType.String, 1);

                   IField CICS_RESPONSE_CD_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESPONSE_CD_0004, FieldType.String, 6);
                   ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.CICS_RESPONSE_CD_0004XX, FieldType.String, CICS_RESPONSE_CD_0004_local, 6);
               });
           });

            recordDef.CreateNewGroup(Names.TWA, (TWA) =>
           {
               IGroup TWA_ADABAS_PARMS_local = (IGroup)TWA.CreateNewGroup(Names.TWA_ADABAS_PARMS, (TWA_ADABAS_PARMS) =>
               {
                   TWA_ADABAS_PARMS.CreateNewFieldArray("FILLER_d37", 7, FieldType.CompInt, 4);
               });
               TWA.CreateNewGroupRedefine(Names.TWA_CICS_PARMS, TWA_ADABAS_PARMS_local, (TWA_CICS_PARMS) =>
               {
                   TWA_CICS_PARMS.CreateNewField(Names.TWA_PROGRAM_ID, FieldType.String, 8);
                   TWA_CICS_PARMS.CreateNewGroup(Names.TWA_ADDR_LIST, (TWA_ADDR_LIST) =>
                   {
                       TWA_ADDR_LIST.CreateNewFieldArray("FILLER_d38", 5, FieldType.CompInt, 4);
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(GLOBDATA, args, 0);
            SetPassedParm(IMPORT_CURRENT_0001EV, args, 1);
            SetPassedParm(IMPORT_0002EV, args, 2);
            SetPassedParm(IMPORT_CONVERTED_0003EV, args, 3);
            SetPassedParm(EXPORT_0004EV, args, 4);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(GLOBDATA, args, 0);
            SetReturnParm(IMPORT_CURRENT_0001EV, args, 1);
            SetReturnParm(IMPORT_0002EV, args, 2);
            SetReturnParm(IMPORT_CONVERTED_0003EV, args, 3);
            SetReturnParm(EXPORT_0004EV, args, 4);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXIU15 : OnlineEABBase
    {

        #region Public Constructors
        public SWEXIU15()
            : base()
        {
            SetUpProgram();
        }

        public SWEXIU15(OnlineControl controlData) : base(controlData)
        {
            SetUpProgram();
        }

        private void SetUpProgram()
        {
            this.ProgramName = "SWEXIU15";

            WS = new SWEXIU15_ws();
            LS = new SWEXIU15_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryText("SYSPART", "SELECT SYSTEM_CODE, PARTICIPATION_FLAG, CREATED_TIMESTAMP, CREATED_BY, LAST_MODIFIED_BY, LAST_MODIFIED_TMST, FK_CLB_CLIENT_NO, FK_CLI_CLIENT_NAME, FK_CLI_SSN FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {0}  AND FK_CLI_CLIENT_NAME = {1}  AND FK_CLI_SSN = {2}  ORDER BY SYSTEM_CODE",  //COBOL==>EXEC SQL DECLARE SYSPART CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :SYSPART-FK-CLB-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN ORDER BY SYSTEM_CODE END-EXEC
                                WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN);

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXIU15_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXIU15_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING GLOBDATA , IMPORT-CURRENT-0001EV IMPORT-0002EV IMPORT-CONVERTED-0003EV , EXPORT-0004EV.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_2112890412(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_2112890412
        /// </summary>
        private void M_MAIN_2112890412(string returnMethod = "")
        {
            M_PARA_2112890412_INIT("M_PARA_2112890412_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-2112890412-INIT THRU PARA-2112890412-INIT-EXIT
            M_PARA_2112890412("M_PARA_2112890412_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-2112890412 THRU PARA-2112890412-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_2112890412
        /// </summary>
        private void M_PARA_2112890412(string returnMethod = "")
        {
            if (returnMethod != "" && returnMethod != "M_PARA_2112890412") { M_0000_ADABAS_ROUTINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_ADABAS_ROUTINE
        /// </summary>
        /// <remarks>
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT: ****************************************************************
        ///COMMENT:                                                                *
        ///COMMENT:  INCLUDE NAME:  SWCSZG78.                                      *
        ///COMMENT:      EAB NAME:  SWEXIU15.                                      *
        ///COMMENT:   DESCRIPTION:  0000-ADABAS-ROUTINE.                           *
        ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                            *
        ///COMMENT:                                                                *
        ///COMMENT:      INCLUDES:  SWCSZG17  WORKING-STORAGE SECTION.             *
        ///COMMENT:                 SWCSZ053  WORKING-STORAGE SECTION.             *
        ///COMMENT:                 SWAPH001  WORKING-STORAGE SECTION.             *
        ///COMMENT:                 SWCTWA    LINKAGE SECTION.                     *
        ///COMMENT:                 SWCSZG83  PROCEDURE DIVISION.                  *
        ///COMMENT:                 SWAPH002  PROCEDURE DIVISION.                  *
        ///COMMENT:                 SWAPH003  PROCEDURE DIVISION.                  *
        ///COMMENT:                 SWAPH004  PROCEDURE DIVISION.                  *
        ///COMMENT:                                                                *
        ///COMMENT:       ACTIONS:  RECEIVE SEARCH-TYPE-INDICATOR                  *
        ///COMMENT:                         PERCENT-OF-MATCH                       *
        ///COMMENT:                         SEARCH-SURNAME                         *
        ///COMMENT:                         SEARCH-FIRST-NAME                      *
        ///COMMENT:                         SEARCH-MIDDLE-INITIAL                  *
        ///COMMENT:                         SEARCH-SEX                             *
        ///COMMENT:                         SEARCH-AGE                             *
        ///COMMENT:                         SEARCH-DATE-OF-BIRTH                   *
        ///COMMENT:                         SEARCH-SOCIAL-SECURITY-NUMBER          *
        ///COMMENT:                         NEXT-READLOGICAL-KEY.                  *
        ///COMMENT:                 READVALUE CLIENT-DBF USING                     *
        ///COMMENT: *** SOC SEC NUM ------- 1.  IF SEARCH-TYPE-INDICATOR = '1',    *
        ///COMMENT:                                 CLIENT-SSN-KEY.                *
        ///COMMENT: ** EXACT   NAME ------- 2.  IF SEARCH-TYPE-INDICATOR = '2'     *
        ///COMMENT:                                AND PERCENT-OF-MATCH  = 100,    *
        ///COMMENT:                                 CLIENT-NAME-KEY.               *
        ///COMMENT: * PHONETIC NAME ------- 3.  IF SEARCH-TYPE-INDICATOR = '2'     *
        ///COMMENT:                                AND PERCENT-OF-MATCH  < 100,    *
        ///COMMENT:                                 PHONETIC-KEY.                  *
        ///COMMENT:                 RETURN  UPTO 125 OCCURRANCES OF MATCHED        *
        ///COMMENT:                         CLIENT-SURNAME                         *
        ///COMMENT:                         CLIENT-FIRST-NAME                      *
        ///COMMENT:                         CLIENT-MIDDLE-INITIAL                  *
        ///COMMENT:                         CLIENT-SOCIAL-SECURITY-NUMBER          *
        ///COMMENT:                         CLIENT-DATE-OF-BIRTH                   *
        ///COMMENT:                         CLIENT-SEX                             *
        ///COMMENT:                         CLIENT-SYSTEM-PARTICIPATION-INDICATORS.*
        ///COMMENT:                                1 OCCURRANCE  OF                *
        ///COMMENT:                         ABEND-FIELDS                           *
        ///COMMENT:                         NEXT-READLOGICAL-KEY, IF AT LEAST      *
        ///COMMENT:                             1 MORE MATCH RECORD EXISTS.        *
        ///COMMENT:                 SAVE    IF A PHONETIC SEARCH AND               *
        ///COMMENT:                            AND NEXT-READLOGICAL-KEY IS VALID,  *
        ///COMMENT:                             SAVE THE PHONETIC CALCULATED DATA  *
        ///COMMENT:                             IN A CICS TEMPORARY STORAGE (TS)   *
        ///COMMENT:                             QUEUE, FOR RETRIEVAL AND USE IF    *
        ///COMMENT:                             A PAGE FORWARD IS REQUESTED.       *
        ///COMMENT:                                                                *
        ///COMMENT:       CREATED:  01-AUG-95.                                     *
        ///COMMENT:            BY:  CTG/CEB.                                       *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:                   CONTRL                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:  12/12/99 MAUREEN 80435   ENABLE UPDATE OF SYS FLAG TO 'N'     *
        ///COMMENT:           BROWN           FROM 'Y', WHEN IMPORTED CONVERT FLAG *
        ///COMMENT:                           = 'Y' (THIS IS SET BY IEF NPER TXN)  *
        ///COMMENT:  02/10/00 MAUREEN 87058   SET BIRTH DATE TO SPACES IF ZERO     *
        ///COMMENT:           BROWN                                                *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_0000_ADABAS_ROUTINE(string returnMethod = "")
        {
            WS.MV_ABEND_FIELDS.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO MV-ABEND-FIELDS.
            SetHandleCondtions(HandleCondition.ERROR, "M_9999_CICS_ABEND");                                     //COBOL==> EXEC CICS HANDLE CONDITION ERROR ( 9999-CICS-ABEND ) END-EXEC.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: *** MOVE IMPORTED FIELDS TO IMP FIELDS IN WORKING-STORAGE.
                                                                                                                //COMMENT: ****************************************************************
            WS.IMP_CLIENT_NUMBER_X10.SetValue(LS.NUMBER_0002);                                                  //COBOL==> MOVE NUMBER-0002 TO IMP-CLIENT-NUMBER-X10.
            WS.IMP_CLIENT_INFO.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO IMP-CLIENT-INFO.
            WS.IMP_LAST_NAME.SetValue(LS.LAST_NAME_0002);                                                       //COBOL==> MOVE LAST-NAME-0002 TO IMP-LAST-NAME.
            WS.IMP_FIRST_NAME.SetValue(LS.FIRST_NAME_0002);                                                     //COBOL==> MOVE FIRST-NAME-0002 TO IMP-FIRST-NAME.
            WS.IMP_INITIAL.SetValue(LS.MIDDLE_INITIAL_0002);                                                    //COBOL==> MOVE MIDDLE-INITIAL-0002 TO IMP-INITIAL.
            WS.IMP_DATE_OF_BIRTH.SetValue(LS.DOB_0002);                                                         //COBOL==> MOVE DOB-0002 TO IMP-DATE-OF-BIRTH.
                                                                                                                //COMMENT:  MAUREEN BROWN, PR#87058, FEB 10, 2000
            if (WS.IMP_DATE_OF_BIRTH.IsEqualTo(0))                                                              //COBOL==> IF IMP-DATE-OF-BIRTH = ZEROS
            {
                //COMMENT:         MOVE SPACES TO IMP-DATE-OF-BIRTH
                WS.IMP_DATE_OF_BIRTH.SetValue(00010101);                                                            //COBOL==> MOVE 00010101 TO IMP-DATE-OF-BIRTH
            }                                                                                                   //COBOL==> END-IF.
            WS.IMP_SEX.SetValue(LS.SEX_0002);                                                                   //COBOL==> MOVE SEX-0002 TO IMP-SEX.
            WS.IMP_SOC_SEC_NUM_X9.SetValue(LS.SSN_0002);                                                        //COBOL==> MOVE SSN-0002 TO IMP-SOC-SEC-NUM-X9.
                                                                                                                //COMMENT:  MAUREEN BROWN, PR#80435, DEC 12, 1999
            WS.IMP_CONVERT_FLAG.SetValue(LS.FLAG_0003);                                                         //COBOL==> MOVE FLAG-0003 TO IMP-CONVERT-FLAG.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: ****************************************************************
            M_0500_COMMON_CLIENT_ROUTINE("M_0500_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 0500-COMMON-CLIENT-ROUTINE THRU 0500-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_0000_ADABAS_EXIT(CheckGotoReturn(returnMethod)); return;                                          //COBOL==> GO TO 0000-ADABAS-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_CCYYMMDD.SetValue(LS.DATE_0001);                                                              //COBOL==> MOVE DATE-0001 TO MV-CCYYMMDD.
            WS.MV_COMPLEMENT_DATE.SetComputeValue(99999999m - WS.MV_CCYYMMDD.AsDecimal());                      //COBOL==> COMPUTE MV-COMPLEMENT-DATE = 99999999 - MV-CCYYMMDD.
            M_2000_UPDT_CSE_NON_CASE_CLIENT("M_2000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 2000-UPDT-CSE-NON-CASE-CLIENT THRU 2000-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_0000_ADABAS_EXIT(CheckGotoReturn(returnMethod)); return;                                          //COBOL==> GO TO 0000-ADABAS-EXIT
            }                                                                                                   //COBOL==> END-IF.
            M_8999_END_ADABAS_TRANSACTION("M_8999_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8999-END-ADABAS-TRANSACTION THRU 8999-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_0000_ADABAS_EXIT(CheckGotoReturn(returnMethod)); return;                                          //COBOL==> GO TO 0000-ADABAS-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: *** MOVE IMP FIELDS TO EXPORTED FIELDS IN LINKAGE.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT:     NONE.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: ****************************************************************
            M_0000_ADABAS_EXIT(CheckGotoReturn(returnMethod)); return;                                          //COBOL==> GO TO 0000-ADABAS-EXIT.
        }
        /// <summary>
        /// Method M_9999_CICS_ABEND
        /// </summary>
        private void M_9999_CICS_ABEND(string returnMethod = "")
        {
            WS.MV_ABEND_TYPE.SetValue("C");                                                                     //COBOL==> MOVE 'C' TO MV-ABEND-TYPE.
            WS.MV_CICS_RESOURCE_NM.SetValue(Control.EIBRSRCE);                                                  //COBOL==> MOVE EIBRSRCE TO MV-CICS-RESOURCE-NM.
            WS.MV_CICS_FUNCTION_CD.SetValue(Control.EIBFN);                                                     //COBOL==> MOVE EIBFN TO MV-CICS-FUNCTION-CD.
            WS.MV_CICS_RESPONSE_CD.SetValue(Control.EIBRCODE);                                                  //COBOL==> MOVE EIBRCODE TO MV-CICS-RESPONSE-CD.
            if (returnMethod != "" && returnMethod != "M_9999_CICS_ABEND") { M_0000_ADABAS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_ADABAS_EXIT
        /// </summary>
        private void M_0000_ADABAS_EXIT(string returnMethod = "")
        {
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                LS.TYPE_0004.SetValue(WS.MV_ABEND_TYPE);                                                            //COBOL==> MOVE MV-ABEND-TYPE TO TYPE-0004
                LS.ADABAS_FILE_NUMBER_0004.SetValue(WS.MV_ADA_FILE_NUMBER);                                         //COBOL==> MOVE MV-ADA-FILE-NUMBER TO ADABAS-FILE-NUMBER-0004
                LS.ADABAS_FILE_ACTION_0004.SetValue(WS.MV_ADA_FILE_ACTION);                                         //COBOL==> MOVE MV-ADA-FILE-ACTION TO ADABAS-FILE-ACTION-0004
                LS.ADABAS_RESPONSE_CD_0004.SetValue(WS.MV_ADA_RESPONSE_CD);                                         //COBOL==> MOVE MV-ADA-RESPONSE-CD TO ADABAS-RESPONSE-CD-0004
                LS.CICS_RESOURCE_NM_0004.SetValue(WS.MV_CICS_RESOURCE_NM);                                          //COBOL==> MOVE MV-CICS-RESOURCE-NM TO CICS-RESOURCE-NM-0004
                LS.CICS_FUNCTION_CD_0004.SetValue(WS.MV_CICS_FUNCTION_CD);                                          //COBOL==> MOVE MV-CICS-FUNCTION-CD TO CICS-FUNCTION-CD-0004
                LS.CICS_RESPONSE_CD_0004.SetValue(WS.MV_CICS_RESPONSE_CD);                                          //COBOL==> MOVE MV-CICS-RESPONSE-CD TO CICS-RESPONSE-CD-0004
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_0000_ADABAS_EXIT") { M_PARA_2112890412_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_2112890412_EXIT
        /// </summary>
        private void M_PARA_2112890412_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_2112890412_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_2112890412_EXIT") { M_0500_COMMON_CLIENT_ROUTINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0500_COMMON_CLIENT_ROUTINE
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:                                                                 *
        ///COMMENT:  INCLUDE NAME:  SWCSZG83.                                       *
        ///COMMENT:      EAB NAME:  SWEXIC15,SWEXIU15.                              *
        ///COMMENT:   DESCRIPTION:  0500-COMMON-CLIENT-ROUTINE                      *
        ///COMMENT:                 1000-ADD-CSE-NON-CASE-CLIENT                    *
        ///COMMENT:                 2000-UPDT-CSE-NON-CASE-CLIENT                   *
        ///COMMENT:                 8999-END-ADABAS-TRANSACTION.                    *
        ///COMMENT:                                                                 *
        ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                             *
        ///COMMENT:                                                                 *
        ///COMMENT:      INCLUDES:  SWCSZG16  WORKING-STORAGE SECTION.              *
        ///COMMENT:                 SWCSZ053  WORKING-STORAGE SECTION.              *
        ///COMMENT:                 SWAPH001  WORKING-STORAGE SECTION.              *
        ///COMMENT:                 SWCTWA    LINKAGE SECTION.                      *
        ///COMMENT:                                                                 *
        ///COMMENT:                 SWCSZG77  PROCEDURE DIVISION                    *
        ///COMMENT:              OR SWCSZG78  PROCEDURE DIVISION.                   *
        ///COMMENT:                                                                 *
        ///COMMENT:                 SWAPH002  PROCEDURE DIVISION.                   *
        ///COMMENT:                 SWAPH003  PROCEDURE DIVISION.                   *
        ///COMMENT:                 SWAPH004  PROCEDURE DIVISION.                   *
        ///COMMENT:                                                                 *
        ///COMMENT:       ACTIONS:  RECEIVE IMPORT FIELDS (W-IA).                   *
        ///COMMENT:                 PROCESS (DEPENDS ON REQUESTED ACTIVITY).        *
        ///COMMENT:                 RETURN  EXPORT FIELDS (W-OA).                   *
        ///COMMENT:                                                                 *
        ///COMMENT:       CREATED:  05-JAN-99.                                      *
        ///COMMENT:            BY:  CTG/CEB.                                        *
        ///COMMENT:                                                                 *
        ///COMMENT: ** MAINTENANCE **************************************************
        ///COMMENT:                   CHANGE                                        *
        ///COMMENT:                   CONTRL                                        *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                           *
        ///COMMENT:  -------  ------  ------  ------------------------------------- *
        ///COMMENT:  12/12/99 MAUREEN 80435   ENABLE UPDATE OF SYS FLAG TO 'N'      *
        ///COMMENT:           BROWN           FROM 'Y', WHEN IMPORTED CONVERT FLAG  *
        ///COMMENT:                           = 'Y' (THIS IS SET BY IEF NPER TXN)   *
        ///COMMENT:  02/01/00 MAUREEN 87058   SET DATE TO SPACE IF IMPORTED AS ZERO *
        ///COMMENT:                                                                 *
        ///COMMENT:  SEPT 25, 2000, MAUREEN BROWN, PR# 103286 - CHANGE SO THAT THE  *
        ///COMMENT:  CSE SYSTEM FLAG CAN BE UPDATED TO 'N' FOR NON CASE, AS LONG AS *
        ///COMMENT:  IT IS NOT ALREADY 'Y' (CASE RELATED).  WE NO LONGER CARE       *
        ///COMMENT:  WHETHER OR NOT THE PERSON IS 'OWNED' BY ANOTHER SYSTEM WHEN WE *
        ///COMMENT:  SET THE CSE SYSTEM FLAG TO NON CASE.                           *
        ///COMMENT:                                                                 *
        ///COMMENT:  12/17/00 WBR     CQ35825 CHANGE ADABAS TO DB2 FOR KEES PHASE 3 *
        ///COMMENT:                                                                 *
        ///COMMENT:  02/10/16 RAJ     CQ35825 MODIFIED TO INCORPORATE PREFERRED ID  *
        ///COMMENT:                           CHANGES.                              *
        ///COMMENT:                               REMOVED DUPLICATE SSN CHECK WHILE *
        ///COMMENT:                               UPDATING THE SSN VLAUE FOR CSS    *
        ///COMMENT:                               CLIETNS.                          *
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_0500_COMMON_CLIENT_ROUTINE(string returnMethod = "")
        {
            //COMMENT: *****************************************************************
            //COMMENT:                                                                 *
            //COMMENT:  INCLUDE NAME:  SWCSZ954 (FROM SWCSZ054).                       *
            //COMMENT:                                                                 *
            //COMMENT:      EAB NAME:  SWCSZ???.                                       *
            //COMMENT:                                                                 *
            //COMMENT:   DESCRIPTION:  ADABAS INITIALIZATION.                          *
            //COMMENT:                                                                 *
            //COMMENT:      LOCATION:  PROCEDURE DIVISION.                             *
            //COMMENT:                 MUST BE HARDCOPIED INTO EAB MAIN PROCEDURE      *
            //COMMENT:                   DIVISION INCLUDE SWCSZ???.                    *
            //COMMENT:                                                                 *
            //COMMENT:       ACTIONS:  RELEASES ANY OUTSTANDING COMMAND ID'S.          *
            //COMMENT:                 THIS ROUTINE REQUIRES INCLUDE SWCSZ053 IN THE   *
            //COMMENT:                   WORKING-STORAGE SECTION OF THIS PROGRAM.      *
            //COMMENT:                                                                 *
            //COMMENT:       CREATED:  21-AUG-95.                                      *
            //COMMENT:            BY:  CTG/CEB.                                        *
            //COMMENT:                                                                 *
            //COMMENT: ** MAINTENANCE **************************************************
            //COMMENT:                   CHANGE                                        *
            //COMMENT:                   CONTRL                                        *
            //COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                           *
            //COMMENT:  -------  ------  ------  ------------------------------------- *
            //COMMENT:                                                                 *
            //COMMENT: *****************************************************************
            //COMMENT:     CALL 'ADASTWA' USING TWA CONTROL-BLOCK.
            //COMMENT:     CALL SRADALNK  USING DFHEIBLK DFHCOMMAREA TWA SRMODLNK.
            //COMMENT:     IF RESPONSE-CODE > ZERO AND NOT = 9
            //COMMENT:         MOVE 'A'           TO MV-ABEND-TYPE
            //COMMENT:         MOVE ZERO          TO MV-ADA-FILE-NUMBER
            //COMMENT:         MOVE 'INI'         TO MV-ADA-FILE-ACTION
            //COMMENT:         MOVE RESPONSE-CODE TO MV-ADA-RESPONSE-CD
            //COMMENT:         GO TO 0500-EXIT
            //COMMENT:     END-IF.
            //COMMENT: *****************************************************************
            //COMMENT:  GET     SYSTEM DATE        *         YEAR/MONTH/DAY   (YYMMDD) *
            //COMMENT:                                                                 *
            //COMMENT:  APPEND  CENTURY            * CENTURY/YEAR/MONTH/DAY (CCYYMMDD) *
            //COMMENT:                                                                 *
            //COMMENT:  COMPUTE COMPLEMENTARY DATE *             (99999999 - CCYYMMDD) *
            //COMMENT: *****************************************************************
            Control.GetLatestDateTime(WS.MV_ABS_TIME);                                                          //COBOL==> EXEC CICS ASKTIME ABSTIME ( MV-ABS-TIME ) END-EXEC.
            DateConverter.ConvertABSTime(WS.MV_ABS_TIME, DateTimeFormat.YYMMDD, WS.MV_YYMMDD_X6, "", null, ""); //COBOL==> EXEC CICS FORMATTIME ABSTIME ( MV-ABS-TIME ) YYMMDD ( MV-YYMMDD-X6 ) END-EXEC.
            if (WS.MV_YY.IsGreaterThan(94))                                                                     //COBOL==> IF MV-YY > 94
            {
                WS.MV_CC.SetValue(19);                                                                              //COBOL==> MOVE 19 TO MV-CC
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.MV_CC.SetValue(20);                                                                              //COBOL==> MOVE 20 TO MV-CC
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_COMPLEMENT_DATE.SetComputeValue(99999999m - WS.MV_CCYYMMDD.AsDecimal());                      //COBOL==> COMPUTE MV-COMPLEMENT-DATE = 99999999 - MV-CCYYMMDD.
            if (returnMethod != "" && returnMethod != "M_0500_COMMON_CLIENT_ROUTINE") { M_0500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0500_EXIT
        /// </summary>
        private void M_0500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_0500_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_0500_EXIT") { M_1000_ADD_CSE_NON_CASE_CLIENT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1000_ADD_CSE_NON_CASE_CLIENT
        /// </summary>
        /// <remarks>
        ///COMMENT: 1000-ADD-CSE-NON-CASE-CLIENT.
        ///COMMENT: *****************************************************************
        ///COMMENT:                      SUMMARY OF PROCESSING                      *
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
        ///COMMENT:                                                                 *
        ///COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
        ///COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
        ///COMMENT:      MATCHING THOSE IMPORTED.                                   *
        ///COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
        ///COMMENT:    EXIT ROUTINE.                                                *
        ///COMMENT:                                                                 *
        ///COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
        ///COMMENT:    SSN                                                          *
        ///COMMENT:      MATCHING THE SSN IMPORTED.                                 *
        ///COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
        ///COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
        ///COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
        ///COMMENT:                                                                 *
        ///COMMENT:  CALCULATE PHONETIC VALUE OF                                    *
        ///COMMENT:    NAME.                                                        *
        ///COMMENT:                                                                 *
        ///COMMENT:  GET FIRST RECORD OF CLIENT-DBF TO OBTAIN NEXT-CLIENT-ID.       *
        ///COMMENT:                                                                 *
        ///COMMENT:  ADD 1 TO NEXT-CLIENT-ID IN FIRST CLIENT-DBF RECORD AND UPDATE. *
        ///COMMENT:                                                                 *
        ///COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-DBF.                        *
        ///COMMENT:                                                                 *
        ///COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-BASIC-DBF.                  *
        ///COMMENT: *****************************************************************
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
        ///COMMENT: *****************************************************************
        ///COMMENT:     IF IMP-SOC-SEC-NUM   NOT =  ZERO
        ///COMMENT:       IF IMP-SOC-SEC-NUM-3-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-2-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-4-VALID
        ///COMMENT:           NEXT SENTENCE
        ///COMMENT:       ELSE
        ///COMMENT:           MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:           MOVE ZERO  TO MV-ADA-FILE-NUMBER
        ///COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
        ///COMMENT:           MOVE 'SSN' TO MV-ADA-FILE-ACTION
        ///COMMENT:           MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:           GO TO 1000-EXIT
        ///COMMENT:       END-IF
        ///COMMENT:     END-IF.
        ///COMMENT: /
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
        ///COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
        ///COMMENT:      MATCHING THOSE IMPORTED.                                   *
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE IMP-NAME              TO V-CLIENT-NAME149D.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM       TO V-SSN149D.
        ///COMMENT:   M. BROWN PR# 87058, FEB 1, 2000
        ///COMMENT:     IF IMP-DATE-OF-BIRTH = ZEROS
        ///COMMENT:         MOVE SPACES TO IMP-DATE-OF-BIRTH.
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-SEX TO V-DATE-OF-BIRTH-SEX149D.
        ///COMMENT:     PERFORM 8149DF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149DF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 1000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF EOF149D
        ///COMMENT:         NEXT SENTENCE
        ///COMMENT:     ELSE
        ///COMMENT:         IF CLIENT-NAME149D       = V-CLIENT-NAME149D AND
        ///COMMENT:            SSN149D               = V-SSN149D         AND
        ///COMMENT:            DATE-OF-BIRTH-SEX149D = V-DATE-OF-BIRTH-SEX149D
        ///COMMENT: *****************************************************************
        ///COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
        ///COMMENT:    EXIT ROUTINE.                                                *
        ///COMMENT: *****************************************************************
        ///COMMENT:             MOVE CLIENT-POINTER149D TO MV-CLIENT-POINTER
        ///COMMENT:             MOVE MV-CLIENT-ID       TO IMP-CLIENT-NUMBER-X10
        ///COMMENT:             PERFORM 8149D-RELISN-CLIENT-DBF
        ///COMMENT:                THRU 8149D-RELISN-EXIT
        ///COMMENT:             GO TO 1000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT: /
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
        ///COMMENT:    SSN                                                          *
        ///COMMENT:      MATCHING THE SSN IMPORTED.                                 *
        ///COMMENT:  IF EXISTENT CLIENT-DBF RECORD IS FOUND,                        *
        ///COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
        ///COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
        ///COMMENT: *****************************************************************
        ///COMMENT:     PERFORM 7100-CHECK-DUP-SSN
        ///COMMENT:        THRU 7100-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 1000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CALCULATE PHONETIC VALUE OF NAME.                              *
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE IMP-NAME TO MV-RECORD-NAME.
        ///COMMENT:     PERFORM 9000-CALCULATE-PHONETIC-NAME
        ///COMMENT:        THRU 9000-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 1000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  GET FIRST RECORD OF CLIENT-DBF TO OBTAIN NEXT-CLIENT-ID.       *
        ///COMMENT: *****************************************************************
        ///COMMENT:     PERFORM 8149-READISN-CLIENT-DBF
        ///COMMENT:        THRU 8149-READISN-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 1000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE NEXT-CLIENT-ID149 TO IMP-CLIENT-NUMBER-X10,
        ///COMMENT:                               MV-CLIENT-ID.
        ///COMMENT: *****************************************************************
        ///COMMENT:  ADD 1 TO NEXT-CLIENT-ID IN FIRST CLIENT-DBF RECORD AND UPDATE. *
        ///COMMENT: *****************************************************************
        ///COMMENT:     ADD 1                  TO MV-CLIENT-ID-910.
        ///COMMENT:     MOVE MV-CLIENT-ID      TO NEXT-CLIENT-ID149.
        ///COMMENT:     PERFORM 8149-UPDT-CLIENT-DBF
        ///COMMENT:        THRU 8149-UPDT-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 1000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 8999-END-ADABAS-TRANSACTION
        ///COMMENT:        THRU 8999-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 1000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: /
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-DBF.                        *
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE IMP-NAME              TO CLIENT-NAME149B.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM       TO SSN149B.
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH-SEX TO DATE-OF-BIRTH-SEX149B.
        ///COMMENT:     MOVE SPACES                TO MV-CLIENT-POINTER.
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER     TO MV-CLIENT-ID-910.
        ///COMMENT:     MOVE 'N'                   TO MV-SYS-PART-CSE.
        ///COMMENT:     MOVE MV-CLIENT-POINTER     TO CLIENT-POINTER149B.
        ///COMMENT:     MOVE MV-YYMMDD             TO DATE-OF-LAST-UPDATE149B.
        ///COMMENT:     MOVE ZERO                  TO PREVIOUS-SSN149B.
        ///COMMENT:     MOVE MV-PHONETIC-DATA      TO PHONETIC-DATA149B.
        ///COMMENT:     PERFORM 8149B-ADD-CLIENT-DBF
        ///COMMENT:        THRU 8149B-ADD-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 1000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-BASIC-DBF.                  *
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-NUMBER154.
        ///COMMENT:     MOVE IMP-NAME              TO CLIENT-INFO154.
        ///COMMENT: MFB
        ///COMMENT:     MOVE IMP-DATE-OF-BIRTH     TO DATE-OF-BIRTH154.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM       TO SSN154.
        ///COMMENT:     MOVE IMP-SEX               TO SEX154.
        ///COMMENT:     PERFORM 8154-ADD-CLIENT-BASIC-DBF
        ///COMMENT:        THRU 8154-ADD-EXIT.
        ///COMMENT: 1000-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: WBR START
        /// </remarks>
        private void M_1000_ADD_CSE_NON_CASE_CLIENT(string returnMethod = "")
        {
            WS.WS_PROCESS_ADD.SetValue(true);                                                                   //COBOL==> SET WS-PROCESS-ADD TO TRUE.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:                      SUMMARY OF PROCESSING                      *
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  CHECK FOR EXISTENT KSD_CLIENT ROW WITH                         *
                                                                                                                //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
                                                                                                                //COMMENT:      MATCHING THOSE IMPORTED.                                   *
                                                                                                                //COMMENT:  IF MATCHING KSD_CLIENT ROW IS FOUND,                           *
                                                                                                                //COMMENT:    EXIT ROUTINE.                                                *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  CHECK FOR EXISTENT KSD_CLIENT ROW WITH                         *
                                                                                                                //COMMENT:    SSN                                                          *
                                                                                                                //COMMENT:      MATCHING THE SSN IMPORTED.                                 *
                                                                                                                //COMMENT:  IF MATCHING KSD-CLIENT ROW IS FOUND,                           *
                                                                                                                //COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
                                                                                                                //COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  CALCULATE PHONETIC VALUE OF                                    *
                                                                                                                //COMMENT:    NAME.                                                        *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  GET ROW FROM THE KSD_NEXT_CLIENT_ID TABLE OBTAIN NEXT-CLIENT-ID*
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  ADD 1 TO NEXT-CLIENT-ID IN KSD_NEXT_CLEINT_ID ROW AND UPDATE.  *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  BUILD AND INSERT NEW ROW INTO THE KSD_CLIENT TABLE.            *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  BUILD AND INSERT NEW ROW INTO KSD_CLIENT_BASIC TABLE.          *
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
                                                                                                                //COMMENT: *****************************************************************
            if (!(WS.IMP_SOC_SEC_NUM.IsEqualTo(0)))                                                             //COBOL==> IF IMP-SOC-SEC-NUM NOT = ZERO
            {
                if (((WS.IMP_SOC_SEC_NUM_3_VALID.Value)
             && (WS.IMP_SOC_SEC_NUM_2_VALID.Value))
             && (WS.IMP_SOC_SEC_NUM_4_VALID.Value))  //COBOL==> IF IMP-SOC-SEC-NUM-3-VALID AND IMP-SOC-SEC-NUM-2-VALID AND IMP-SOC-SEC-NUM-4-VALID
                {
                    goto EndOfSentence_1;                                                                               //COBOL==> NEXT SENTENCE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-FILE-NUMBER
                                                                                                                        //COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
                    WS.MV_ADA_FILE_ACTION.SetValue("SSN");                                                              //COBOL==> MOVE 'SSN' TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                    M_1000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_1:;
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
            //COMMENT:    NAME, SSN, DATE-OF-BIRTH, AND SEX                            *
            //COMMENT:      MATCHING THOSE IMPORTED.                                   *
            //COMMENT: *****************************************************************
            WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
                                                                                                                //COMMENT:   M. BROWN PR# 87058, FEB 1, 2000
            if (WS.IMP_DATE_OF_BIRTH.IsEqualTo(0))                                                              //COBOL==> IF IMP-DATE-OF-BIRTH = ZEROS
            {
                //COMMENT:         MOVE SPACES TO IMP-DATE-OF-BIRTH
                WS.IMP_DATE_OF_BIRTH.SetValue(00010101);                                                            //COBOL==> MOVE 00010101 TO IMP-DATE-OF-BIRTH
            }                                                                                                   //COBOL==> END-IF.
            if ((WS.IMP_DATE_OF_BIRTH.IsZeroes())
             || (WS.IMP_DATE_OF_BIRTH.IsSpaces()))         //COBOL==> IF IMP-DATE-OF-BIRTH = ZEROES OR IMP-DATE-OF-BIRTH = SPACES
            {
                WS.CLIENT_DATE_OF_BIRTH.SetValue("0001-01-01");                                                     //COBOL==> MOVE '0001-01-01' TO CLIENT-DATE-OF-BIRTH
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 )
            }                                                                                                   //COBOL==> END-IF.
            WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER.
            M_8149DF_READLOG_CLIENT_DBF("M_8149DF_READLOG_EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM 8149DF-READLOG-CLIENT-DBF THRU 8149DF-READLOG-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_1000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_CLIENT_EOF_YES.Value)                                                                     //COBOL==> IF WS-CLIENT-EOF-YES
            {
                goto EndOfSentence_2;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                //COMMENT: *****************************************************************
                //COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
                //COMMENT:    EXIT ROUTINE.                                                *
                //COMMENT: *****************************************************************
                M_1000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_2:;
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
            //COMMENT:    SSN                                                          *
            //COMMENT:      MATCHING THE SSN IMPORTED.                                 *
            //COMMENT:  IF EXISTENT CLIENT-DBF RECORD IS FOUND,                        *
            //COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
            //COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
            //COMMENT: *****************************************************************
            WS.WS_DUP_SSN_NO.SetValue(true);                                                                    //COBOL==> SET WS-DUP-SSN-NO TO TRUE.
            M_7100_CHECK_DUP_SSN("M_7100_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 7100-CHECK-DUP-SSN THRU 7100-EXIT.
            if (WS.WS_DUP_SSN_YES.Value)                                                                        //COBOL==> IF WS-DUP-SSN-YES
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("ADS");                                                              //COBOL==> MOVE 'ADS' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                M_1000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  CALCULATE PHONETIC VALUE OF NAME.                              *
                                                                                                                //COMMENT: *****************************************************************
            WS.MV_RECORD_NAME.SetValue(WS.IMP_NAME);                                                            //COBOL==> MOVE IMP-NAME TO MV-RECORD-NAME.
            M_9000_CALCULATE_PHONETIC_NAME("M_9000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM 9000-CALCULATE-PHONETIC-NAME THRU 9000-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_1000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  GET FIRST RECORD OF CLIENT-DBF TO OBTAIN NEXT-CLIENT-ID.       *
                                                                                                                //COMMENT: *****************************************************************
            M_8149_READISN_CLIENT_DBF("M_8149_READISN_EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 8149-READISN-CLIENT-DBF THRU 8149-READISN-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_1000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IMP_CLIENT_NUMBER_X10.SetValue(WS.NEXTCLI_NEXT_CLIENT_ID);                                       //COBOL==> MOVE NEXTCLI-NEXT-CLIENT-ID TO IMP-CLIENT-NUMBER-X10 MV-CLIENT-ID.
            WS.MV_CLIENT_ID.SetValue(WS.NEXTCLI_NEXT_CLIENT_ID);
            //COMMENT: *****************************************************************
            //COMMENT:  ADD 1 TO NEXT-CLIENT-ID IN FIRST CLIENT-DBF RECORD AND UPDATE. *
            //COMMENT: *****************************************************************
            WS.MV_CLIENT_ID_910.Add(1);                                                                         //COBOL==> ADD 1 TO MV-CLIENT-ID-910.
            WS.NEXTCLI_NEXT_CLIENT_ID.SetValue(WS.MV_CLIENT_ID);                                                //COBOL==> MOVE MV-CLIENT-ID TO NEXTCLI-NEXT-CLIENT-ID.
            M_8149_UPDT_CLIENT_DBF("M_8149_UPDT_EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8149-UPDT-CLIENT-DBF THRU 8149-UPDT-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_1000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: NOTE - THE CLIENT BASIC ROW HAS TO BE ADDED BEFORE THE CLINE ROW*
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-BASIC-DBF.                  *
                                                                                                                //COMMENT: *****************************************************************
            WS.DCLKSD_CLIENT_BASIC.ResetToInitialValue();                                                       //COBOL==> INITIALIZE DCLKSD-CLIENT-BASIC.
            WS.CLIENTB_CLIENT_NUMBER.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                        //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENTB-CLIENT-NUMBER CLIENTB-CIS-PREFERRED-ID.
            WS.CLIENTB_CIS_PREFERRED_ID.SetValue(WS.IMP_CLIENT_NUMBER_X10);
            WS.CLIENTB_CLIENT_SURNAME.SetValue(WS.IMP_LAST_NAME);                                               //COBOL==> MOVE IMP-LAST-NAME TO CLIENTB-CLIENT-SURNAME.
            WS.CLIENTB_CLIENT_GIVEN_NAME.SetValue(WS.IMP_FIRST_NAME);                                           //COBOL==> MOVE IMP-FIRST-NAME TO CLIENTB-CLIENT-GIVEN-NAME.
            WS.CLIENTB_CLIENT_INITIALS.SetValue(WS.IMP_INITIAL);                                                //COBOL==> MOVE IMP-INITIAL TO CLIENTB-CLIENT-INITIALS.
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 1:4 ) TO CLIENTB-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                            //COBOL==> MOVE '-' TO CLIENTB-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 5:2 ) TO CLIENTB-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                            //COBOL==> MOVE '-' TO CLIENTB-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 7:2 ) TO CLIENTB-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENTB_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                        //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENTB-SSN.
            WS.CLIENTB_GENDER.SetValue(WS.IMP_SEX);                                                             //COBOL==> MOVE IMP-SEX TO CLIENTB-GENDER.
            WS.CLIENTB_PRNT_RGHTS_SEV_DT.SetValue("0001-01-01");                                                //COBOL==> MOVE '0001-01-01' TO CLIENTB-PRNT-RGHTS-SEV-DT CLIENTB-INITIAL-CUSTODY-DT CLIENTB-CURR-PLACEMNT-DT CLIENTB-CSEA-G-CAUSE-CL-DT CLIENTB-MO-DEATH-DT CLIENTB-MO-PRT-DT CLIENTB-FA-DEATH-DT CLIENTB-FA-PRT-DT.
            WS.CLIENTB_INITIAL_CUSTODY_DT.SetValue("0001-01-01");
            WS.CLIENTB_CURR_PLACEMNT_DT.SetValue("0001-01-01");
            WS.CLIENTB_CSEA_G_CAUSE_CL_DT.SetValue("0001-01-01");
            WS.CLIENTB_MO_DEATH_DT.SetValue("0001-01-01");
            WS.CLIENTB_MO_PRT_DT.SetValue("0001-01-01");
            WS.CLIENTB_FA_DEATH_DT.SetValue("0001-01-01");
            WS.CLIENTB_FA_PRT_DT.SetValue("0001-01-01");
            WS.CLIENTB_EMAIL_ADDRESS_LEN.SetValue(ZEROES);                                                      //COBOL==> MOVE ZEROES TO CLIENTB-EMAIL-ADDRESS-LEN CLIENTB-OCCUPATION-LEN.
            WS.CLIENTB_OCCUPATION_LEN.SetValue(ZEROES);
            WS.CLIENTB_EMAIL_ADDRESS_TEXT.SetValueWithSpaces();                                                 //COBOL==> MOVE SPACES TO CLIENTB-EMAIL-ADDRESS-TEXT CLIENTB-OCCUPATION-TEXT.
            WS.CLIENTB_OCCUPATION_TEXT.SetValueWithSpaces();
            M_8154_ADD_CLIENT_BASIC_DBF("M_8154_ADD_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 8154-ADD-CLIENT-BASIC-DBF THRU 8154-ADD-EXIT.
                                                                                                                  //COMMENT: *****************************************************************
                                                                                                                  //COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-DBF.                        *
                                                                                                                  //COMMENT: *****************************************************************
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER);                                          //COBOL==> MOVE IMP-CLIENT-NUMBER TO CLIENT-FK-CLB-CLIENT-NO.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER.
            WS.MV_CLIENT_POINTER.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO MV-CLIENT-POINTER CLIENT-VERIFIED-SSN-FLAG.
            WS.CLIENT_VERIFIED_SSN_FLAG.SetValueWithSpaces();
            WS.MV_CLIENT_ID_910.SetValue(WS.IMP_CLIENT_NUMBER);                                                 //COBOL==> MOVE IMP-CLIENT-NUMBER TO MV-CLIENT-ID-910.
            WS.MV_SYS_PART_CSE.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO MV-SYS-PART-CSE.
            WS.WS_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                                //COBOL==> MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER.
            WS.CLIENT_PREVIOUS_SSN.SetValue(ZEROES);                                                            //COBOL==> MOVE ZEROES TO CLIENT-PREVIOUS-SSN
            WS.CLIENT_PHONETIC_DATA.SetValue(WS.MV_PHONETIC_DATA);                                              //COBOL==> MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA.
            M_8149B_ADD_CLIENT_DBF("M_8149B_ADD_EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8149B-ADD-CLIENT-DBF THRU 8149B-ADD-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_1000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT:  INSERT THE KSD SYSTEM PARTICIPATION DB2 ROW FOR CSS
                                                                                                                //COMMENT: ****************************************************************
            M_7920_BUILD_SYS_PART_CSS("M_7920_EXIT"); if (Control.ExitProgram) { return; }                        //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT.
            M_8240_INSERT_SYS_PART("M_8240_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT.
            if (returnMethod != "" && returnMethod != "M_1000_ADD_CSE_NON_CASE_CLIENT") { M_1000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1000_EXIT
        /// </summary>
        private void M_1000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1000_EXIT") { M_2000_UPDT_CSE_NON_CASE_CLIENT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_UPDT_CSE_NON_CASE_CLIENT
        /// </summary>
        /// <remarks>
        ///COMMENT: WBR END
        ///COMMENT: 2000-UPDT-CSE-NON-CASE-CLIENT.
        ///COMMENT: *****************************************************************
        ///COMMENT:                      SUMMARY OF PROCESSING                      *
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
        ///COMMENT:                                                                 *
        ///COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
        ///COMMENT:    SSN                                                          *
        ///COMMENT:      MATCHING THE SSN IMPORTED.                                 *
        ///COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
        ///COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
        ///COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
        ///COMMENT:                                                                 *
        ///COMMENT:  CHECK FOR EXISTENT CLIENT-BASIC-DBF RECORD WITH                *
        ///COMMENT:    CLIENT-NUMBER                                                *
        ///COMMENT:      MATCHING THE ONE IMPORTED.                                 *
        ///COMMENT:  IF CLIENT-BASIC-RECORD IS FOUND,                               *
        ///COMMENT:    IF IMPORTED                                                  *
        ///COMMENT:      NAME, SSN, DATE-OF-BIRTH, AND SEX                          *
        ///COMMENT:        ARE SAME AS CLIENT-BASIC-RECORD                          *
        ///COMMENT:      EXIT ROUTINE                                               *
        ///COMMENT:    ELSE                                                         *
        ///COMMENT:      GET CLIENT-DBF RECORD WITH SAME                            *
        ///COMMENT:        NAME, SSN, DATE-OF-BIRTH, AND SEX                        *
        ///COMMENT:  ELSE                                                           *
        ///COMMENT:    EXIT ROUTINE.                                                *
        ///COMMENT:  IF CSE SYSTEM PARTICIPATION FLAG IS NOT EQUAL 'N',             *
        ///COMMENT:    EXIT ROUTINE.                                                *
        ///COMMENT:                                                                 *
        ///COMMENT:  CALCULATE PHONETIC VALUE OF                                    *
        ///COMMENT:    NAME.                                                        *
        ///COMMENT:                                                                 *
        ///COMMENT:  UPDATE RECORD IN CLIENT-DBF.                                   *
        ///COMMENT:                                                                 *
        ///COMMENT:  UPDATE RECORD IN CLIENT-BASIC-DBF.                             *
        ///COMMENT: *****************************************************************
        ///COMMENT: /
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
        ///COMMENT: *****************************************************************
        ///COMMENT:     IF IMP-SOC-SEC-NUM   NOT =  ZERO
        ///COMMENT:       IF IMP-SOC-SEC-NUM-3-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-2-VALID AND
        ///COMMENT:          IMP-SOC-SEC-NUM-4-VALID
        ///COMMENT:           NEXT SENTENCE
        ///COMMENT:       ELSE
        ///COMMENT:           MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:           MOVE ZERO  TO MV-ADA-FILE-NUMBER
        ///COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
        ///COMMENT:           MOVE 'SSN' TO MV-ADA-FILE-ACTION
        ///COMMENT:           MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:           GO TO 2000-EXIT
        ///COMMENT:       END-IF
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
        ///COMMENT:    SSN                                                          *
        ///COMMENT:      MATCHING THE SSN IMPORTED.                                 *
        ///COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
        ///COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
        ///COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
        ///COMMENT: *****************************************************************
        ///COMMENT:     PERFORM 7100-CHECK-DUP-SSN
        ///COMMENT:        THRU 7100-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR EXISTENT CLIENT-BASIC-DBF RECORD WITH                *
        ///COMMENT:    CLIENT-NUMBER                                                *
        ///COMMENT:      MATCHING THE ONE IMPORTED.                                 *
        ///COMMENT: *****************************************************************
        ///COMMENT:     PERFORM 8154-READISN-CLIENT-BASIC-DBF
        ///COMMENT:        THRU 8154-READISN-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     IF EOF154
        ///COMMENT:     OR CLIENT-NUMBER154 NOT = IMP-CLIENT-NUMBER-X10
        ///COMMENT:         IF NOT EOF154
        ///COMMENT:             PERFORM 8154-RELISN-CLIENT-BASIC-DBF
        ///COMMENT:                THRU 8154-RELISN-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 154   TO MV-ADA-FILE-NUMBER
        ///COMMENT: ************** NE = ISN NOT EQUAL CLIENT NUMBER *************
        ///COMMENT:         MOVE ' NE' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: /
        ///COMMENT: *****************************************************************
        ///COMMENT:  IF CLIENT-BASIC-RECORD IS FOUND,                               *
        ///COMMENT:    IF IMPORTED                                                  *
        ///COMMENT:      NAME, SSN, DATE-OF-BIRTH, AND SEX                          *
        ///COMMENT:        ARE SAME AS CLIENT-BASIC-RECORD                          *
        ///COMMENT:      EXIT ROUTINE.                                              *
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE CLIENT-INFO154 TO CUR-CLIENT-INFO.
        ///COMMENT:     MOVE SEX154         TO CUR-SEX.
        ///COMMENT:     MOVE SSN154         TO CUR-SOC-SEC-NUM.
        ///COMMENT:  DEC 9, 1999, MAUREEN BROWN, PR#  80435 - UPDATE SYSTEM FLAG FROM
        ///COMMENT:  Y TO N,IF IMPORT CONVERSION FLAG IS SET.
        ///COMMENT:     IF IMP-CONVERT-FLAG = 'Y'
        ///COMMENT:         NEXT SENTENCE
        ///COMMENT:     ELSE
        ///COMMENT:         IF IMP-CLIENT-INFO = CUR-CLIENT-INFO
        ///COMMENT:             GO TO 2000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CALCULATE PHONETIC VALUE OF                                    *
        ///COMMENT:    NAME.                                                        *
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE IMP-NAME TO MV-RECORD-NAME.
        ///COMMENT:     PERFORM 9000-CALCULATE-PHONETIC-NAME
        ///COMMENT:        THRU 9000-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:    ELSE                                                         *
        ///COMMENT:      GET CLIENT-DBF RECORD WITH SAME                            *
        ///COMMENT:        NAME, SSN, DATE-OF-BIRTH, AND SEX.                       *
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE IMP-CLIENT-NUMBER-X10 TO V-CLIENT-ID-KEY149C.
        ///COMMENT:     MOVE CUR-NAME              TO V-CLIENT-NAME149C.
        ///COMMENT:     MOVE CUR-SOC-SEC-NUM       TO V-SSN149C.
        ///COMMENT:     MOVE CUR-DATE-OF-BIRTH-SEX TO V-DATE-OF-BIRTH-SEX149C.
        ///COMMENT:     PERFORM 8149CF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149CF-READLOG-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-POINTER149C TO MV-CLIENT-POINTER.
        ///COMMENT:     IF NOT EOF149C AND
        ///COMMENT:        MV-CLIENT-ID          = V-CLIENT-POINTER-1-10149C AND
        ///COMMENT:        CLIENT-NAME149C       = CUR-NAME                  AND
        ///COMMENT:        SSN149C               = CUR-SOC-SEC-NUM           AND
        ///COMMENT:        DATE-OF-BIRTH-SEX149C = CUR-DATE-OF-BIRTH-SEX
        ///COMMENT:  DEC 9, 1999, MAUREEN BROWN, PR#  80435 - UPDATE SYSTEM FLAG FROM
        ///COMMENT:  Y TO N,IF IMPORT CONVERSION FLAG IS SET.
        ///COMMENT: **
        ///COMMENT:  SEPT 25, 2000, MAUREEN BROWN, PR# 103286 - CHANGE NEXT STATEMENT
        ///COMMENT:  SO THAT ONLY CONVERT FLAG IS CHECKED BEFORE ALLOWING UPDATE OF
        ///COMMENT:  CSE SYSTEM FLAG TO 'N', FOR NON-CASE.
        ///COMMENT: **
        ///COMMENT: OLD***  IF MV-SYS-PART-CSE-NON OR (IMP-CONVERT-FLAG = 'Y' AND
        ///COMMENT: OLD***     MV-SYS-PART-CSE-YES)
        ///COMMENT:         IF MV-SYS-PART-CSE-NON OR IMP-CONVERT-FLAG = 'Y'
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE RECORD IN CLIENT-DBF.                                   *
        ///COMMENT: *****************************************************************
        ///COMMENT:             MOVE IMP-NAME              TO CLIENT-NAME149C
        ///COMMENT:             MOVE IMP-SOC-SEC-NUM       TO SSN149C
        ///COMMENT:             MOVE IMP-DATE-OF-BIRTH-SEX TO DATE-OF-BIRTH-SEX149C
        ///COMMENT:             IF CUR-SOC-SEC-NUM NOT = IMP-SOC-SEC-NUM
        ///COMMENT:                 MOVE SPACE               TO MV-VERIFIED-SSN-FLAG
        ///COMMENT:                 IF PREVIOUS-SSN149C NOT > ZERO
        ///COMMENT:                     MOVE CUR-SOC-SEC-NUM TO PREVIOUS-SSN149C
        ///COMMENT:                 END-IF
        ///COMMENT:             END-IF
        ///COMMENT:  DEC 9, 1999, MAUREEN BROWN, PR#  80435
        ///COMMENT:             MOVE 'N'               TO MV-SYS-PART-CSE
        ///COMMENT:             MOVE MV-CLIENT-POINTER TO CLIENT-POINTER149C
        ///COMMENT:             MOVE MV-PHONETIC-DATA  TO PHONETIC-DATA149C
        ///COMMENT:             MOVE MV-YYMMDD         TO DATE-OF-LAST-UPDATE149C
        ///COMMENT:             PERFORM 8149C-UPDT-CLIENT-DBF
        ///COMMENT:                THRU 8149C-UPDT-EXIT
        ///COMMENT:             IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:                 GO TO 2000-EXIT
        ///COMMENT:             END-IF
        ///COMMENT:         ELSE
        ///COMMENT: *****************************************************************
        ///COMMENT:  NOT A CSE NON-CASE PERSON.                                     *
        ///COMMENT: *****************************************************************
        ///COMMENT:             GO TO 2000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     ELSE
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-DBF,                        *
        ///COMMENT:      BECAUSE CLIENT-DBF RECORD NOT FOUND.                       *
        ///COMMENT: *****************************************************************
        ///COMMENT:         MOVE IMP-NAME              TO CLIENT-NAME149B
        ///COMMENT:         MOVE IMP-SOC-SEC-NUM       TO SSN149B
        ///COMMENT:         MOVE IMP-DATE-OF-BIRTH-SEX TO DATE-OF-BIRTH-SEX149B
        ///COMMENT:         MOVE SPACES                TO MV-CLIENT-POINTER
        ///COMMENT:         MOVE IMP-CLIENT-NUMBER     TO MV-CLIENT-ID-910
        ///COMMENT:         MOVE 'N'                   TO MV-SYS-PART-CSE
        ///COMMENT:         MOVE MV-CLIENT-POINTER     TO CLIENT-POINTER149B
        ///COMMENT:         MOVE MV-YYMMDD             TO DATE-OF-LAST-UPDATE149B
        ///COMMENT:         MOVE ZERO                  TO PREVIOUS-SSN149B
        ///COMMENT:         MOVE MV-PHONETIC-DATA      TO PHONETIC-DATA149B
        ///COMMENT:         PERFORM 8149B-ADD-CLIENT-DBF
        ///COMMENT:            THRU 8149B-ADD-EXIT
        ///COMMENT:         IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:             GO TO 2000-EXIT
        ///COMMENT:         END-IF
        ///COMMENT:     END-IF.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE RECORD IN CLIENT-BASIC-DBF.                             *
        ///COMMENT: *****************************************************************
        ///COMMENT:     MOVE IMP-CLIENT-INFO TO CLIENT-INFO154.
        ///COMMENT:     MOVE IMP-SEX         TO SEX154.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM TO SSN154.
        ///COMMENT:     PERFORM 8154-UPDT-CLIENT-BASIC-DBF
        ///COMMENT:        THRU 8154-UPDT-EXIT.
        ///COMMENT:     IF NOT MV-ABEND-TYPE-NONE
        ///COMMENT:         GO TO 2000-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT: 2000-EXIT.
        ///COMMENT:     EXIT.
        /// </remarks>
        private void M_2000_UPDT_CSE_NON_CASE_CLIENT(string returnMethod = "")
        {
            WS.WS_PROCESS_UPD.SetValue(true);                                                                   //COBOL==> SET WS-PROCESS-UPD TO TRUE.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:                      SUMMARY OF PROCESSING                      *
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
                                                                                                                //COMMENT:    SSN                                                          *
                                                                                                                //COMMENT:      MATCHING THE SSN IMPORTED.                                 *
                                                                                                                //COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
                                                                                                                //COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
                                                                                                                //COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  CHECK FOR EXISTENT CLIENT-BASIC-DBF RECORD WITH                *
                                                                                                                //COMMENT:    CLIENT-NUMBER                                                *
                                                                                                                //COMMENT:      MATCHING THE ONE IMPORTED.                                 *
                                                                                                                //COMMENT:  IF CLIENT-BASIC-RECORD IS FOUND,                               *
                                                                                                                //COMMENT:    IF IMPORTED                                                  *
                                                                                                                //COMMENT:      NAME, SSN, DATE-OF-BIRTH, AND SEX                          *
                                                                                                                //COMMENT:        ARE SAME AS CLIENT-BASIC-RECORD                          *
                                                                                                                //COMMENT:      EXIT ROUTINE                                               *
                                                                                                                //COMMENT:    ELSE                                                         *
                                                                                                                //COMMENT:      GET CLIENT-DBF RECORD WITH SAME                            *
                                                                                                                //COMMENT:        NAME, SSN, DATE-OF-BIRTH, AND SEX                        *
                                                                                                                //COMMENT:  ELSE                                                           *
                                                                                                                //COMMENT:    EXIT ROUTINE.                                                *
                                                                                                                //COMMENT:  IF CSE SYSTEM PARTICIPATION FLAG IS NOT EQUAL 'N',             *
                                                                                                                //COMMENT:    EXIT ROUTINE.                                                *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  CALCULATE PHONETIC VALUE OF                                    *
                                                                                                                //COMMENT:    NAME.                                                        *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  UPDATE RECORD IN CLIENT-DBF.                                   *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  UPDATE RECORD IN CLIENT-BASIC-DBF.                             *
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  CHECK FOR POTENTIALLY VALID SOCIAL SECURITY NUMBER.            *
                                                                                                                //COMMENT: *****************************************************************
            if (!(WS.IMP_SOC_SEC_NUM.IsEqualTo(0)))                                                             //COBOL==> IF IMP-SOC-SEC-NUM NOT = ZERO
            {
                if (((WS.IMP_SOC_SEC_NUM_3_VALID.Value)
             && (WS.IMP_SOC_SEC_NUM_2_VALID.Value))
             && (WS.IMP_SOC_SEC_NUM_4_VALID.Value))  //COBOL==> IF IMP-SOC-SEC-NUM-3-VALID AND IMP-SOC-SEC-NUM-2-VALID AND IMP-SOC-SEC-NUM-4-VALID
                {
                    goto EndOfSentence_3;                                                                               //COBOL==> NEXT SENTENCE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-FILE-NUMBER
                                                                                                                        //COMMENT: *************** SSN = NOT A VALID SOCIAL SECURITY NUMBER ********
                    WS.MV_ADA_FILE_ACTION.SetValue("SSN");                                                              //COBOL==> MOVE 'SSN' TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                    M_2000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_3:;
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR EXISTENT CLIENT-DBF RECORD WITH                      *
            //COMMENT:    SSN                                                          *
            //COMMENT:      MATCHING THE SSN IMPORTED.                                 *
            //COMMENT:  IF MATCHING CLIENT-DBF RECORD IS FOUND,                        *
            //COMMENT:    THE SSN IS ALREADY USED FOR ANOTHER CLIENT-NUMBER            *
            //COMMENT:      AND CANNOT BE USED FOR THIS CLIENT.                        *
            //COMMENT: *****************************************************************
            //COMMENT:     PERFORM 7100-CHECK-DUP-SSN
            //COMMENT:        THRU 7100-EXIT.
            //COMMENT:     IF NOT MV-ABEND-TYPE-NONE
            //COMMENT:         GO TO 2000-EXIT
            //COMMENT:     END-IF.
            //COMMENT: *****************************************************************
            //COMMENT:  CHECK FOR EXISTENT CLIENT-BASIC-DBF RECORD WITH                *
            //COMMENT:    CLIENT-NUMBER                                                *
            //COMMENT:      MATCHING THE ONE IMPORTED.                                 *
            //COMMENT: *****************************************************************
            WS.CLIENTB_CLIENT_NUMBER.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                        //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENTB-CLIENT-NUMBER CLIENTB-CIS-PREFERRED-ID.
            WS.CLIENTB_CIS_PREFERRED_ID.SetValue(WS.IMP_CLIENT_NUMBER_X10);
            M_8154_READISN_CLIENT_BASIC_DBF("M_8154_READISN_EXIT"); if (Control.ExitProgram) { return; }          //COBOL==> PERFORM 8154-READISN-CLIENT-BASIC-DBF THRU 8154-READISN-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_2000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_CLIENTB_EOF_YES.Value)                                                                    //COBOL==> IF WS-CLIENTB-EOF-YES
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                                                                                                                    //COMMENT: ************** NE = ISN NOT EQUAL CLIENT NUMBER *************
                WS.MV_ADA_FILE_ACTION.SetValue(" NE");                                                              //COBOL==> MOVE ' NE' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                M_2000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  IF CLIENT-BASIC-RECORD IS FOUND,                               *
                                                                                                                //COMMENT:    IF IMPORTED                                                  *
                                                                                                                //COMMENT:      NAME, SSN, DATE-OF-BIRTH, AND SEX                          *
                                                                                                                //COMMENT:        ARE SAME AS CLIENT-BASIC-RECORD                          *
                                                                                                                //COMMENT:      EXIT ROUTINE.                                              *
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: WBR MOVE CLIENT-INFO154 TO CUR-CLIENT-INFO.
            WS.CUR_LAST_NAME.SetValue(WS.CLIENTB_CLIENT_SURNAME);                                               //COBOL==> MOVE CLIENTB-CLIENT-SURNAME TO CUR-LAST-NAME.
            WS.CUR_FIRST_NAME.SetValue(WS.CLIENTB_CLIENT_GIVEN_NAME);                                           //COBOL==> MOVE CLIENTB-CLIENT-GIVEN-NAME TO CUR-FIRST-NAME.
            WS.CUR_INITIAL.SetValue(WS.CLIENTB_CLIENT_INITIALS);                                                //COBOL==> MOVE CLIENTB-CLIENT-INITIALS TO CUR-INITIAL
            WS.CUR_DATE_OF_BIRTH_X8.SetValueOfSubstring(1, 4, WS.CLIENTB_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH ( 1:4 ) TO CUR-DATE-OF-BIRTH-X8 ( 1:4 ) .
            WS.CUR_DATE_OF_BIRTH_X8.SetValueOfSubstring(5, 2, WS.CLIENTB_DATE_OF_BIRTH.GetSubstring(6, 2).AsString());  //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH ( 6:2 ) TO CUR-DATE-OF-BIRTH-X8 ( 5:2 ) .
            WS.CUR_DATE_OF_BIRTH_X8.SetValueOfSubstring(7, 2, WS.CLIENTB_DATE_OF_BIRTH.GetSubstring(9, 2).AsString());  //COBOL==> MOVE CLIENTB-DATE-OF-BIRTH ( 9:2 ) TO CUR-DATE-OF-BIRTH-X8 ( 7:2 ) .
            WS.CUR_SEX.SetValue(WS.CLIENTB_GENDER);                                                             //COBOL==> MOVE CLIENTB-GENDER TO CUR-SEX.
            WS.CUR_SOC_SEC_NUM.SetValue(WS.CLIENTB_SSN);                                                        //COBOL==> MOVE CLIENTB-SSN TO CUR-SOC-SEC-NUM.
                                                                                                                //COMMENT:  DEC 9, 1999, MAUREEN BROWN, PR#  80435 - UPDATE SYSTEM FLAG FROM
                                                                                                                //COMMENT:  Y TO N,IF IMPORT CONVERSION FLAG IS SET.
            if (WS.IMP_CONVERT_FLAG.IsEqualTo("Y"))                                                             //COBOL==> IF IMP-CONVERT-FLAG = 'Y'
            {
                goto EndOfSentence_4;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.IMP_CLIENT_INFO.IsEqualTo(WS.CUR_CLIENT_INFO))                                               //COBOL==> IF IMP-CLIENT-INFO = CUR-CLIENT-INFO
                {
                    M_2000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
        EndOfSentence_4:;
            //COMMENT: *****************************************************************
            //COMMENT:  CALCULATE PHONETIC VALUE OF                                    *
            //COMMENT:    NAME.                                                        *
            //COMMENT: *****************************************************************
            WS.MV_RECORD_NAME.SetValue(WS.IMP_NAME);                                                            //COBOL==> MOVE IMP-NAME TO MV-RECORD-NAME.
            M_9000_CALCULATE_PHONETIC_NAME("M_9000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM 9000-CALCULATE-PHONETIC-NAME THRU 9000-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_2000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:    ELSE                                                         *
                                                                                                                //COMMENT:      GET CLIENT-DBF RECORD WITH SAME                            *
                                                                                                                //COMMENT:        NAME, SSN, DATE-OF-BIRTH, AND SEX.                       *
                                                                                                                //COMMENT: *****************************************************************
            WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER_X10);                                      //COBOL==> MOVE IMP-CLIENT-NUMBER-X10 TO CLIENT-FK-CLB-CLIENT-NO.
            WS.CLIENT_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                        //COBOL==> MOVE CUR-NAME TO CLIENT-CLIENT-NAME.
            WS.CLIENT_SSN.SetValue(WS.CUR_SOC_SEC_NUM);                                                         //COBOL==> MOVE CUR-SOC-SEC-NUM TO CLIENT-SSN.
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.CUR_DATE_OF_BIRTH_X8.GetSubstring(1, 4).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-X8 ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.CUR_DATE_OF_BIRTH_X8.GetSubstring(5, 2).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-X8 ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 ) .
            WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.CUR_DATE_OF_BIRTH_X8.GetSubstring(7, 2).AsString());  //COBOL==> MOVE CUR-DATE-OF-BIRTH-X8 ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENT_GENDER.SetValue(WS.CUR_SEX);                                                              //COBOL==> MOVE CUR-SEX TO CLIENT-GENDER.
            M_8149CF_READLOG_CLIENT_DBF("M_8149CF_READLOG_EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM 8149CF-READLOG-CLIENT-DBF THRU 8149CF-READLOG-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_2000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  THE FOLLOWING LOGIC HAVE BEEN ADDED TO BUILD THE CLIENT POINTER
                                                                                                                //COMMENT:  INFORMATION.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: WBR MOVE CLIENT-POINTER149C TO MV-CLIENT-POINTER.
            if (WS.WS_CLIENT_EOF_NO.Value)                                                                      //COBOL==> IF WS-CLIENT-EOF-NO
            {
                M_7900_BUILD_CLI_PTR_DATA("M_7900_EXIT"); if (Control.ExitProgram) { return; }                        //COBOL==> PERFORM 7900-BUILD-CLI-PTR-DATA THRU 7900-EXIT
                WS.MV_CLIENT_ID.SetValue(WS.WS_CLIPTR_CLIENT_ID);                                                   //COBOL==> MOVE WS-CLIPTR-CLIENT-ID TO MV-CLIENT-ID
                WS.MV_VERIFIED_SSN_FLAG.SetValue(WS.WS_CLIPTR_VERIFIED_SSN_FLAG);                                   //COBOL==> MOVE WS-CLIPTR-VERIFIED-SSN-FLAG TO MV-VERIFIED-SSN-FLAG
                WS.MV_SYSTEM_PARTICIPATION.SetValue(WS.WS_CLIPTR_SYSTEM_PARTICIPATION);                             //COBOL==> MOVE WS-CLIPTR-SYSTEM-PARTICIPATION TO MV-SYSTEM-PARTICIPATION
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: WBR IF NOT EOF149C AND
                                                                                                                //COMMENT: WBR    MV-CLIENT-ID          = V-CLIENT-POINTER-1-10149C AND
                                                                                                                //COMMENT: WBR    CLIENT-NAME149C       = CUR-NAME                  AND
                                                                                                                //COMMENT: WBR    SSN149C               = CUR-SOC-SEC-NUM           AND
                                                                                                                //COMMENT: WBR    DATE-OF-BIRTH-SEX149C = CUR-DATE-OF-BIRTH-SEX
                                                                                                                //COMMENT:  DEC 9, 1999, MAUREEN BROWN, PR#  80435 - UPDATE SYSTEM FLAG FROM
                                                                                                                //COMMENT:  Y TO N,IF IMPORT CONVERSION FLAG IS SET.
                                                                                                                //COMMENT: **
                                                                                                                //COMMENT:  SEPT 25, 2000, MAUREEN BROWN, PR# 103286 - CHANGE NEXT STATEMENT
                                                                                                                //COMMENT:  SO THAT ONLY CONVERT FLAG IS CHECKED BEFORE ALLOWING UPDATE OF
                                                                                                                //COMMENT:  CSE SYSTEM FLAG TO 'N', FOR NON-CASE.
                                                                                                                //COMMENT: **
                                                                                                                //COMMENT: OLD***  IF MV-SYS-PART-CSE-NON OR (IMP-CONVERT-FLAG = 'Y' AND
                                                                                                                //COMMENT: OLD***     MV-SYS-PART-CSE-YES)
            if (WS.WS_CLIENT_EOF_NO.Value)                                                                      //COBOL==> IF WS-CLIENT-EOF-NO
            {
                if ((WS.MV_SYS_PART_CSE_NON.Value)
             || ((WS.IMP_CONVERT_FLAG.IsEqualTo("Y"))
             && (WS.MV_SYS_PART_CSE_YES.Value)))  //COBOL==> IF MV-SYS-PART-CSE-NON OR ( IMP-CONVERT-FLAG = 'Y' AND MV-SYS-PART-CSE-YES )
                {
                    //COMMENT: *****************************************************************
                    //COMMENT:  UPDATE RECORD IN CLIENT-DBF.                                   *
                    //COMMENT: *****************************************************************
                    WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME
                    WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN
                    WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 )
                    WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 )
                    WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 )
                    WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 )
                    WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 )
                    WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER
                    if (!(WS.CUR_SOC_SEC_NUM.IsEqualTo(WS.IMP_SOC_SEC_NUM)))                                            //COBOL==> IF CUR-SOC-SEC-NUM NOT = IMP-SOC-SEC-NUM
                    {
                        WS.MV_VERIFIED_SSN_FLAG.SetValueWithSpaces();                                                       //COBOL==> MOVE SPACE TO MV-VERIFIED-SSN-FLAG CLIENT-VERIFIED-SSN-FLAG
                        WS.CLIENT_VERIFIED_SSN_FLAG.SetValueWithSpaces();
                        if (WS.CLIENT_PREVIOUS_SSN.IsLessThanOrEqualTo(ZEROS))                                              //COBOL==> IF CLIENT-PREVIOUS-SSN NOT > ZERO
                        {
                            WS.CLIENT_PREVIOUS_SSN.SetValue(WS.CUR_SOC_SEC_NUM);                                                //COBOL==> MOVE CUR-SOC-SEC-NUM TO CLIENT-PREVIOUS-SSN
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                                                                                                                        //COMMENT:  DEC 9, 1999, MAUREEN BROWN, PR#  80435
                    WS.MV_SYS_PART_CSE.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO MV-SYS-PART-CSE
                    WS.WS_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                                //COBOL==> MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER
                    WS.CLIENT_PHONETIC_DATA.SetValue(WS.MV_PHONETIC_DATA);                                              //COBOL==> MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA
                    WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.MV_CLIENT_ID);                                               //COBOL==> MOVE MV-CLIENT-ID TO CLIENT-FK-CLB-CLIENT-NO
                    M_8149C_UPDT_CLIENT_DBF("M_8149C_UPDT_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 8149C-UPDT-CLIENT-DBF THRU 8149C-UPDT-EXIT
                    if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
                    {
                        M_2000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2000-EXIT
                    }                                                                                                   //COBOL==> END-IF
                                                                                                                        //COMMENT: ****************************************************************
                                                                                                                        //COMMENT:  INSERT THE KSD SYSTEM PARTICIPATION DB2 ROW FOR CSS
                                                                                                                        //COMMENT: ****************************************************************
                    M_7920_BUILD_SYS_PART_CSS("M_7920_EXIT"); if (Control.ExitProgram) { return; }                        //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT
                    M_8240_INSERT_SYS_PART("M_8240_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    //COMMENT: *****************************************************************
                    //COMMENT:  NOT A CSE NON-CASE PERSON.                                     *
                    //COMMENT: *****************************************************************
                    M_2000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                //COMMENT: *****************************************************************
                //COMMENT:  BUILD AND ADD NEW RECORD TO CLIENT-DBF,                        *
                //COMMENT:      BECAUSE CLIENT-DBF RECORD NOT FOUND.                       *
                //COMMENT: *****************************************************************
                WS.DCLKSD_CLIENT.ResetToInitialValue();                                                             //COBOL==> INITIALIZE DCLKSD-CLIENT
                WS.CLIENT_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                        //COBOL==> MOVE IMP-NAME TO CLIENT-CLIENT-NAME
                WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 1:4 ) TO CLIENT-DATE-OF-BIRTH ( 1:4 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(5, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 5:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 5:2 ) TO CLIENT-DATE-OF-BIRTH ( 6:2 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(8, 1, "-");                                             //COBOL==> MOVE '-' TO CLIENT-DATE-OF-BIRTH ( 8:1 )
                WS.CLIENT_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 7:2 ) TO CLIENT-DATE-OF-BIRTH ( 9:2 )
                WS.CLIENT_GENDER.SetValue(WS.IMP_SEX);                                                              //COBOL==> MOVE IMP-SEX TO CLIENT-GENDER
                WS.MV_CLIENT_POINTER.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO MV-CLIENT-POINTER
                WS.MV_CLIENT_ID_910.SetValue(WS.IMP_CLIENT_NUMBER);                                                 //COBOL==> MOVE IMP-CLIENT-NUMBER TO MV-CLIENT-ID-910 CLIENT-FK-CLB-CLIENT-NO
                WS.CLIENT_FK_CLB_CLIENT_NO.SetValue(WS.IMP_CLIENT_NUMBER);
                WS.MV_SYS_PART_CSE.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO MV-SYS-PART-CSE
                WS.WS_CLIENT_POINTER.SetValue(WS.MV_CLIENT_POINTER);                                                //COBOL==> MOVE MV-CLIENT-POINTER TO WS-CLIENT-POINTER
                WS.CLIENT_PREVIOUS_SSN.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO CLIENT-PREVIOUS-SSN
                WS.CLIENT_PHONETIC_DATA.SetValue(WS.MV_PHONETIC_DATA);                                              //COBOL==> MOVE MV-PHONETIC-DATA TO CLIENT-PHONETIC-DATA
                M_8149B_ADD_CLIENT_DBF("M_8149B_ADD_EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 8149B-ADD-CLIENT-DBF THRU 8149B-ADD-EXIT
                if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
                {
                    M_2000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2000-EXIT
                }                                                                                                   //COBOL==> END-IF
                                                                                                                    //COMMENT: ****************************************************************
                                                                                                                    //COMMENT:  INSERT THE KSD SYSTEM PARTICIPATION DB2 ROW FOR CSS
                                                                                                                    //COMMENT: ****************************************************************
                M_7920_BUILD_SYS_PART_CSS("M_7920_EXIT"); if (Control.ExitProgram) { return; }                        //COBOL==> PERFORM 7920-BUILD-SYS-PART-CSS THRU 7920-EXIT
                M_8240_INSERT_SYS_PART("M_8240_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 8240-INSERT-SYS-PART THRU 8240-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  UPDATE RECORD IN CLIENT-BASIC-DBF.                             *
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: WBR MOVE IMP-CLIENT-INFO TO CLIENT-INFO154.
            WS.CLIENTB_CLIENT_NUMBER.SetValue(WS.IMP_CLIENT_NUMBER);                                            //COBOL==> MOVE IMP-CLIENT-NUMBER TO CLIENTB-CLIENT-NUMBER CLIENTB-CIS-PREFERRED-ID.
            WS.CLIENTB_CIS_PREFERRED_ID.SetValue(WS.IMP_CLIENT_NUMBER);
            WS.CLIENTB_CLIENT_SURNAME.SetValue(WS.IMP_LAST_NAME);                                               //COBOL==> MOVE IMP-LAST-NAME TO CLIENTB-CLIENT-SURNAME.
            WS.CLIENTB_CLIENT_GIVEN_NAME.SetValue(WS.IMP_FIRST_NAME);                                           //COBOL==> MOVE IMP-FIRST-NAME TO CLIENTB-CLIENT-GIVEN-NAME.
            WS.CLIENTB_CLIENT_INITIALS.SetValue(WS.IMP_INITIAL);                                                //COBOL==> MOVE IMP-INITIAL TO CLIENTB-CLIENT-INITIALS.
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(1, 4, WS.IMP_DATE_OF_BIRTH.GetSubstring(1, 4).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 1:4 ) TO CLIENTB-DATE-OF-BIRTH ( 1:4 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(6, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(5, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 5:2 ) TO CLIENTB-DATE-OF-BIRTH ( 6:2 ) .
            WS.CLIENTB_DATE_OF_BIRTH.SetValueOfSubstring(9, 2, WS.IMP_DATE_OF_BIRTH.GetSubstring(7, 2).AsString());  //COBOL==> MOVE IMP-DATE-OF-BIRTH ( 7:2 ) TO CLIENTB-DATE-OF-BIRTH ( 9:2 ) .
            WS.CLIENTB_GENDER.SetValue(WS.IMP_SEX);                                                             //COBOL==> MOVE IMP-SEX TO CLIENTB-GENDER.
            WS.CLIENTB_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                        //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENTB-SSN.
            M_8154_UPDT_CLIENT_BASIC_DBF("M_8154_UPDT_EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 8154-UPDT-CLIENT-BASIC-DBF THRU 8154-UPDT-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_2000_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_2000_UPDT_CSE_NON_CASE_CLIENT") { M_2000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_EXIT
        /// </summary>
        private void M_2000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2000_EXIT") { M_7100_CHECK_DUP_SSN(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7100_CHECK_DUP_SSN
        /// </summary>
        /// <remarks>
        ///COMMENT: 7100-CHECK-DUP-SSN.
        ///COMMENT:     IF IMP-SOC-SEC-NUM      = 0
        ///COMMENT:       GO TO 7100-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE IMP-SOC-SEC-NUM    TO V-SSN149A.
        ///COMMENT:     PERFORM 8149AF-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149AF-READLOG-EXIT.
        ///COMMENT: 7100-CHECK-DUP-SSN-LOOP.
        ///COMMENT:     IF EOF149A OR
        ///COMMENT:        SSN149A NOT = V-SSN149A
        ///COMMENT:         GO TO 7100-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     MOVE CLIENT-POINTER149A TO MV-CLIENT-POINTER.
        ///COMMENT:     IF MV-CLIENT-ID NOT = IMP-CLIENT-NUMBER-X10
        ///COMMENT:         MOVE 'A'   TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149   TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'ADS' TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE ZERO  TO MV-ADA-RESPONSE-CD
        ///COMMENT:         GO TO 7100-EXIT
        ///COMMENT:     END-IF.
        ///COMMENT:     PERFORM 8149AN-READLOG-CLIENT-DBF
        ///COMMENT:        THRU 8149AN-READLOG-EXIT.
        ///COMMENT:     GO TO 7100-CHECK-DUP-SSN-LOOP.
        ///COMMENT: 7100-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK FOR DUPLICATE SSN ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_7100_CHECK_DUP_SSN(string returnMethod = "")
        {
            if (WS.IMP_SOC_SEC_NUM.IsEqualTo(0))                                                                //COBOL==> IF IMP-SOC-SEC-NUM = 0
            {
                M_7100_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 7100-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.CLIENT_SSN.SetValue(WS.IMP_SOC_SEC_NUM);                                                         //COBOL==> MOVE IMP-SOC-SEC-NUM TO CLIENT-SSN.
            WS.WS_DUP_SSN_NO.SetValue(true);                                                                    //COBOL==> SET WS-DUP-SSN-NO TO TRUE.
            M_8149AF_READLOG_CLIENT_DBF("M_8149AF_READLOG_EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM 8149AF-READLOG-CLIENT-DBF THRU 8149AF-READLOG-EXIT.
            if (returnMethod != "" && returnMethod != "M_7100_CHECK_DUP_SSN") { M_7100_CHECK_DUP_SSN_LOOP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7100_CHECK_DUP_SSN_LOOP
        /// </summary>
        private void M_7100_CHECK_DUP_SSN_LOOP(string returnMethod = "")
        {
            if (WS.WS_DUP_SSN_YES.Value)                                                                        //COBOL==> IF WS-DUP-SSN-YES
            {
                if (WS.WS_PROCESS_ADD.Value)                                                                        //COBOL==> IF WS-PROCESS-ADD
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                    WS.MV_ADA_FILE_ACTION.SetValue("ADS");                                                              //COBOL==> MOVE 'ADS' TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                    M_7100_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 7100-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_7100_CHECK_DUP_SSN_LOOP") { M_7100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7100_EXIT
        /// </summary>
        private void M_7100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7100_EXIT") { M_7900_BUILD_CLI_PTR_DATA(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7900_BUILD_CLI_PTR_DATA
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD CLIENT POINTER DATA FROM SYSTEM PARTICIPATION DB2 TABLE
        ///COMMENT:  ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_7900_BUILD_CLI_PTR_DATA(string returnMethod = "")
        {
            WS.WS_CLIENT_POINTER.ResetToInitialValue();                                                         //COBOL==> INITIALIZE WS-CLIENT-POINTER.
            WS.WS_CLIPTR_CLIENT_ID.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                        //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO WS-CLIPTR-CLIENT-ID SYSPART-FK-CLB-CLIENT-NO.
            WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);
            WS.WS_CLIPTR_VERIFIED_SSN_FLAG.SetValue(WS.CLIENT_VERIFIED_SSN_FLAG);                               //COBOL==> MOVE CLIENT-VERIFIED-SSN-FLAG TO WS-CLIPTR-VERIFIED-SSN-FLAG.
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                      //COBOL==> MOVE CLIENT-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME.
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.CLIENT_SSN);                                                      //COBOL==> MOVE CLIENT-SSN TO SYSPART-FK-CLI-SSN.
            WS.WS_SYSPART_EOF_NO.SetValue(true);                                                                //COBOL==> SET WS-SYSPART-EOF-NO TO TRUE.
            M_8200_DECLARE_SYSPART("M_8200_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 8200-DECLARE-SYSPART THRU 8200-EXIT.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                M_8210_OPEN_SYS_PART("M_8210_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 8210-OPEN-SYS-PART THRU 8210-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                while (!(WS.WS_SYSPART_EOF_YES.Value))                                                              //COBOL==> PERFORM 7910-CHK-SYS-CD THRU 7910-EXIT UNTIL WS-SYSPART-EOF-YES
                {
                    M_7910_CHK_SYS_CD("M_7910_EXIT"); if (Control.ExitProgram) { return; }
                }
            }                                                                                                   //COBOL==> END-IF.
            M_8230_CLOSE_SYS_PART("M_8230_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 8230-CLOSE-SYS-PART THRU 8230-EXIT.
            if (returnMethod != "" && returnMethod != "M_7900_BUILD_CLI_PTR_DATA") { M_7900_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7900_EXIT
        /// </summary>
        private void M_7900_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7900_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7900_EXIT") { M_7910_CHK_SYS_CD(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7910_CHK_SYS_CD
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  CHECK SYSTEM CODE FOR PARTICIPATION ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_7910_CHK_SYS_CD(string returnMethod = "")
        {
            M_8220_FETCH_SYS_PART("M_8220_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 8220-FETCH-SYS-PART THRU 8220-EXIT.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_AE))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-AE
                {
                    WS.WS_CLIPTR_SYSPART_AE.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-AE
                }                                                                                                   //COBOL==> END-IF
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_CS))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-CS
                {
                    WS.WS_CLIPTR_SYSPART_CS.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-CS
                }                                                                                                   //COBOL==> END-IF
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_KA))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-KA
                {
                    WS.WS_CLIPTR_SYSPART_KA.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-KA
                }                                                                                                   //COBOL==> END-IF
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_KS))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-KS
                {
                    WS.WS_CLIPTR_SYSPART_KS.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-KS
                }                                                                                                   //COBOL==> END-IF
                if (WS.SYSPART_SYSTEM_CODE.IsEqualTo(WS.WS_SYS_CD_FA))                                              //COBOL==> IF SYSPART-SYSTEM-CODE = WS-SYS-CD-FA
                {
                    WS.WS_CLIPTR_SYSPART_FA.SetValue(WS.SYSPART_PARTICIPATION_FLAG);                                    //COBOL==> MOVE SYSPART-PARTICIPATION-FLAG TO WS-CLIPTR-SYSPART-FA
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_7910_CHK_SYS_CD") { M_7910_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7910_EXIT
        /// </summary>
        private void M_7910_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7910_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7910_EXIT") { M_7920_BUILD_SYS_PART_CSS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7920_BUILD_SYS_PART_CSS
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  BUILD SYSTEM PARTICIPATION INFORMATION FOR CSS ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_7920_BUILD_SYS_PART_CSS(string returnMethod = "")
        {
            WS.SYSPART_FK_CLB_CLIENT_NO.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                   //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO SYSPART-FK-CLB-CLIENT-NO.
            WS.SYSPART_FK_CLI_CLIENT_NAME.SetValue(WS.CLIENT_CLIENT_NAME);                                      //COBOL==> MOVE CLIENT-CLIENT-NAME TO SYSPART-FK-CLI-CLIENT-NAME.
            WS.SYSPART_FK_CLI_SSN.SetValue(WS.CLIENT_SSN);                                                      //COBOL==> MOVE CLIENT-SSN TO SYSPART-FK-CLI-SSN.
            WS.SYSPART_SYSTEM_CODE.SetValue(WS.WS_SYS_CD_CS);                                                   //COBOL==> MOVE WS-SYS-CD-CS TO SYSPART-SYSTEM-CODE.
            WS.SYSPART_PARTICIPATION_FLAG.SetValue(WS.WS_CLIPTR_SYSPART_CS);                                    //COBOL==> MOVE WS-CLIPTR-SYSPART-CS TO SYSPART-PARTICIPATION-FLAG.
            if (returnMethod != "" && returnMethod != "M_7920_BUILD_SYS_PART_CSS") { M_7920_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7920_EXIT
        /// </summary>
        private void M_7920_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7920_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7920_EXIT") { M_8149_READISN_CLIENT_DBF(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149_READISN_CLIENT_DBF
        /// </summary>
        /// <remarks>
        ///COMMENT: 8149-READISN-CLIENT-DBF.
        ///COMMENT:     @READISN149  HOLD  ISN = 1.
        ///COMMENT:     IF RESPONSE-CODE149 > ZERO
        ///COMMENT:         MOVE 'A'              TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149              TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RH1'            TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149 TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149-READISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM THE KSD NEXT CLIENT ID DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8149_READISN_CLIENT_DBF(string returnMethod = "")
        {
            DbConv.ExecuteSqlQuery("SELECT IDENT , NEXT_CLIENT_ID INTO {0} , {1} FROM KSD_NEXT_CLIENT_ID WHERE IDENT = {2} ",  //COBOL==> EXEC SQL SELECT IDENT , NEXT_CLIENT_ID INTO :NEXTCLI-IDENT , :NEXTCLI-NEXT-CLIENT-ID FROM KSD_NEXT_CLIENT_ID WHERE IDENT = :WS-IDENT-0000000001 END-EXEC.
                                 WS.NEXTCLI_IDENT, WS.NEXTCLI_NEXT_CLIENT_ID, WS.WS_IDENT_0000000001);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RH1");                                                              //COBOL==> MOVE 'RH1' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8149_READISN_CLIENT_DBF") { M_8149_READISN_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149_READISN_EXIT
        /// </summary>
        private void M_8149_READISN_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8149_READISN_EXIT") { return; }                                              //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8149_READISN_EXIT") { M_8149_UPDT_CLIENT_DBF(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149_UPDT_CLIENT_DBF
        /// </summary>
        /// <remarks>
        ///COMMENT: 8149-UPDT-CLIENT-DBF.
        ///COMMENT:     @UPDATE149.
        ///COMMENT:     IF RESPONSE-CODE149 > ZERO
        ///COMMENT:         MOVE 'A'              TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149              TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'U  '            TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149 TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149-UPDT-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE ROW ON THE KSD NEXT CLIENT ID DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8149_UPDT_CLIENT_DBF(string returnMethod = "")
        {
            WS.NEXTCLI_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                          //COBOL==> EXEC CICS ASSIGN USERID ( NEXTCLI-LAST-MODIFIED-BY ) END-EXEC.
            DbConv.ExecuteSql("UPDATE KSD_NEXT_CLIENT_ID SET NEXT_CLIENT_ID = {0},  LAST_MODIFIED_BY = {1},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE IDENT = {2}", WS.NEXTCLI_NEXT_CLIENT_ID, WS.NEXTCLI_LAST_MODIFIED_BY, WS.WS_IDENT_0000000001);  //COBOL==> EXEC SQL UPDATE KSD_NEXT_CLIENT_ID SET NEXT_CLIENT_ID = :NEXTCLI-NEXT-CLIENT-ID , LAST_MODIFIED_BY = :NEXTCLI-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE IDENT = :WS-IDENT-0000000001 END-EXEC.
                                                                                                                                                                                                                                                          // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("U  ");                                                              //COBOL==> MOVE 'U  ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8149_UPDT_CLIENT_DBF") { M_8149_UPDT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149_UPDT_EXIT
        /// </summary>
        private void M_8149_UPDT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8149_UPDT_EXIT") { return; }                                                 //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8149_UPDT_EXIT") { M_8149AF_READLOG_CLIENT_DBF(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149AF_READLOG_CLIENT_DBF
        /// </summary>
        /// <remarks>
        ///COMMENT: 8149AF-READLOG-CLIENT-DBF.
        ///COMMENT:     @READLOGICAL149A  FIRST.
        ///COMMENT:     IF RESPONSE-CODE149A > ZERO AND NOT EOF149A
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'ARF'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149A TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149AF-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM THE KSD CLIENT DB2 TABLE BY SSN
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8149AF_READLOG_CLIENT_DBF(string returnMethod = "")
        {
            DbConv.ExecuteSqlQuery("SELECT SSN INTO {0} FROM KSD_CLIENT WHERE SSN = {1} ",                      //COBOL==> EXEC SQL SELECT SSN INTO :CLIENT-SSN FROM KSD_CLIENT WHERE SSN = :CLIENT-SSN END-EXEC.
                                 WS.CLIENT_SSN, WS.CLIENT_SSN);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //COMMENT:              CONTINUE
                WS.WS_DUP_SSN_YES.SetValue(true);                                                                   //COBOL==> SET WS-DUP-SSN-YES TO TRUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_DUP_SSN_NO.SetValue(true);                                                                    //COBOL==> SET WS-DUP-SSN-NO TO TRUE
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("ARF");                                                              //COBOL==> MOVE 'ARF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8149AF_READLOG_CLIENT_DBF") { M_8149AF_READLOG_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149AF_READLOG_EXIT
        /// </summary>
        private void M_8149AF_READLOG_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8149AF_READLOG_EXIT") { return; }                                            //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8149AF_READLOG_EXIT") { M_8149B_ADD_CLIENT_DBF(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149B_ADD_CLIENT_DBF
        /// </summary>
        /// <remarks>
        ///COMMENT: 8149AN-READLOG-CLIENT-DBF.
        ///COMMENT:     @READLOGICAL149A.
        ///COMMENT:     IF RESPONSE-CODE149A > ZERO AND NOT EOF149A
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'ARL'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149A TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149AN-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 8149B-ADD-CLIENT-DBF.
        ///COMMENT:     @ADD149B.
        ///COMMENT:     IF RESPONSE-CODE149B > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'BA '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149B TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149B-ADD-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  INSERT ROW INTO THE KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8149B_ADD_CLIENT_DBF(string returnMethod = "")
        {
            WS.CLIENT_CREATED_BY.SetValue(Control.GetUserID());                                                 //COBOL==> EXEC CICS ASSIGN USERID ( CLIENT-CREATED-BY ) END-EXEC.
            WS.CLIENT_LAST_MODIFIED_BY.SetValue(WS.CLIENT_CREATED_BY);                                          //COBOL==> MOVE CLIENT-CREATED-BY TO CLIENT-LAST-MODIFIED-BY.
            DbConv.ExecuteSql("INSERT INTO KSD_CLIENT  ( SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO  ) VALUES  ( {0}, {1}, {2}, CONVERT (DATE, CURRENT_TIMESTAMP) , {3}, {4}, {5}, {6}, {7}, CURRENT_TIMESTAMP , {8}, CURRENT_TIMESTAMP , {9} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_CLIENT ( SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO ) VALUES ( :CLIENT-SSN , :CLIENT-PREVIOUS-SSN , :CLIENT-PHONETIC-DATA , CONVERT (DATE, CURRENT_TIMESTAMP) , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-VERIFIED-SSN-FLAG , :CLIENT-CLIENT-NAME , :CLIENT-CREATED-BY , CURRENT_TIMESTAMP , :CLIENT-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :CLIENT-FK-CLB-CLIENT-NO ) END-EXEC.       //Replacement Code: 3/3/2022
                                 WS.CLIENT_SSN, WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_PHONETIC_DATA, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_CLIENT_NAME, WS.CLIENT_CREATED_BY, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_FK_CLB_CLIENT_NO);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("BA ");                                                              //COBOL==> MOVE 'BA ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8149B_ADD_CLIENT_DBF") { M_8149B_ADD_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149B_ADD_EXIT
        /// </summary>
        private void M_8149B_ADD_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8149B_ADD_EXIT") { return; }                                                 //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8149B_ADD_EXIT") { M_8149CF_READLOG_CLIENT_DBF(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149CF_READLOG_CLIENT_DBF
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM THE KSD_CLIENT ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8149CF_READLOG_CLIENT_DBF(string returnMethod = "")
        {
            DbConv.ExecuteSqlQuery("SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} , {10} , {11} , {12} FROM KSD_CLIENT WHERE SSN = {13} AND FK_CLB_CLIENT_NO = {14} AND CLIENT_NAME = {15} ",  //COBOL==> EXEC SQL SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO INTO :CLIENT-SSN , :CLIENT-PREVIOUS-SSN , :CLIENT-PHONETIC-DATA , :CLIENT-DT-OF-LAST-UPDATE , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-VERIFIED-SSN-FLAG , :CLIENT-CLIENT-NAME , :CLIENT-CREATED-BY , :CLIENT-CREATED-TIMESTAMP , :CLIENT-LAST-MODIFIED-BY , :CLIENT-LAST-MODIFIED-TMST , :CLIENT-FK-CLB-CLIENT-NO FROM KSD_CLIENT WHERE SSN = :CLIENT-SSN AND FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO AND CLIENT_NAME = :CLIENT-CLIENT-NAME END-EXEC.
                                 WS.CLIENT_SSN, WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_PHONETIC_DATA, WS.CLIENT_DT_OF_LAST_UPDATE, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_CLIENT_NAME, WS.CLIENT_CREATED_BY, WS.CLIENT_CREATED_TIMESTAMP, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_LAST_MODIFIED_TMST, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_SSN, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_CLIENT_NAME);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                WS.WS_CLIENT_EOF_NO.SetValue(true);                                                                 //COBOL==> SET WS-CLIENT-EOF-NO TO TRUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("CHF");                                                              //COBOL==> MOVE 'CHF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8149CF_READLOG_CLIENT_DBF") { M_8149CF_READLOG_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149CF_READLOG_EXIT
        /// </summary>
        private void M_8149CF_READLOG_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8149CF_READLOG_EXIT") { return; }                                            //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8149CF_READLOG_EXIT") { M_8149C_UPDT_CLIENT_DBF(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149C_UPDT_CLIENT_DBF
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING CODE WAS COMMENTED OUT BECAUSE IT IS NOT NEEDED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8149C-RELISN-CLIENT-DBF.
        ///COMMENT:     @RELISN149C.
        ///COMMENT:     IF RESPONSE-CODE149C > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'CRI'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149C TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149C-RELISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 8149C-UPDT-CLIENT-DBF.
        ///COMMENT:     @UPDATE149C.
        ///COMMENT:     IF RESPONSE-CODE149C > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'CU '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149C TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149C-UPDT-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE A ROW ON THE KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8149C_UPDT_CLIENT_DBF(string returnMethod = "")
        {
            WS.CLIENT_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                           //COBOL==> EXEC CICS ASSIGN USERID ( CLIENT-LAST-MODIFIED-BY ) END-EXEC.
            DbConv.ExecuteSql("UPDATE KSD_CLIENT SET PREVIOUS_SSN = {0},  DATE_OF_BIRTH = {1},  PHONETIC_DATA = {2},  DT_OF_LAST_UPDATE = CONVERT (DATE, CURRENT_TIMESTAMP),  GENDER = {3},  VERIFIED_SSN_FLAG = {4},  LAST_MODIFIED_BY = {5},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE FK_CLB_CLIENT_NO = {6} AND SSN = {7} AND CLIENT_NAME = {8}", WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_PHONETIC_DATA, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_SSN, WS.CLIENT_CLIENT_NAME);  //COBOL==> EXEC SQL UPDATE KSD_CLIENT SET PREVIOUS_SSN = :CLIENT-PREVIOUS-SSN , DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH , PHONETIC_DATA = :CLIENT-PHONETIC-DATA , DT_OF_LAST_UPDATE = CONVERT (DATE, CURRENT_TIMESTAMP) , GENDER = :CLIENT-GENDER , VERIFIED_SSN_FLAG = :CLIENT-VERIFIED-SSN-FLAG , LAST_MODIFIED_BY = :CLIENT-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE FK_CLB_CLIENT_NO = :CLIENT-FK-CLB-CLIENT-NO AND SSN = :CLIENT-SSN AND CLIENT_NAME = :CLIENT-CLIENT-NAME END-EXEC.       //Replacement Code: 3/3/2022       //Replacement Code: 3/3/2022
valuateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("CU ");                                                              //COBOL==> MOVE 'CU ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8149C_UPDT_CLIENT_DBF") { M_8149C_UPDT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149C_UPDT_EXIT
        /// </summary>
        private void M_8149C_UPDT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8149C_UPDT_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8149C_UPDT_EXIT") { M_8149DF_READLOG_CLIENT_DBF(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149DF_READLOG_CLIENT_DBF
        /// </summary>
        /// <remarks>
        ///COMMENT: 8149DF-READLOG-CLIENT-DBF.
        ///COMMENT:     @READLOGICAL149D  HOLD  FIRST.
        ///COMMENT:     IF RESPONSE-CODE149D > ZERO AND NOT EOF149D
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'DHF'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149D TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149DF-READLOG-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM THE KSD CLIENT DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8149DF_READLOG_CLIENT_DBF(string returnMethod = "")
        {
            DbConv.ExecuteSqlQuery("SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} , {10} , {11} , {12} , {13} FROM KSD_CLIENT WHERE SSN = {14} AND DATE_OF_BIRTH = {15} AND GENDER = {16} AND CLIENT_NAME = {17} ",  //COBOL==> EXEC SQL SELECT SSN , PREVIOUS_SSN , PHONETIC_DATA , DT_OF_LAST_UPDATE , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , NAME_TYPE INTO :CLIENT-SSN , :CLIENT-PREVIOUS-SSN , :CLIENT-PHONETIC-DATA , :CLIENT-DT-OF-LAST-UPDATE , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-VERIFIED-SSN-FLAG , :CLIENT-CLIENT-NAME , :CLIENT-CREATED-BY , :CLIENT-CREATED-TIMESTAMP , :CLIENT-LAST-MODIFIED-BY , :CLIENT-LAST-MODIFIED-TMST , :CLIENT-FK-CLB-CLIENT-NO , :CLIENT-NAME-TYPE FROM KSD_CLIENT WHERE SSN = :CLIENT-SSN AND DATE_OF_BIRTH = :CLIENT-DATE-OF-BIRTH AND GENDER = :CLIENT-GENDER AND CLIENT_NAME = :CLIENT-CLIENT-NAME END-EXEC.
                                 WS.CLIENT_SSN, WS.CLIENT_PREVIOUS_SSN, WS.CLIENT_PHONETIC_DATA, WS.CLIENT_DT_OF_LAST_UPDATE, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_CLIENT_NAME, WS.CLIENT_CREATED_BY, WS.CLIENT_CREATED_TIMESTAMP, WS.CLIENT_LAST_MODIFIED_BY, WS.CLIENT_LAST_MODIFIED_TMST, WS.CLIENT_FK_CLB_CLIENT_NO, WS.CLIENT_NAME_TYPE, WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_CLIENT_NAME);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENT_EOF_YES.SetValue(true);                                                                //COBOL==> SET WS-CLIENT-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("DHF");                                                              //COBOL==> MOVE 'DHF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8149DF_READLOG_CLIENT_DBF") { M_8149DF_READLOG_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8149DF_READLOG_EXIT
        /// </summary>
        private void M_8149DF_READLOG_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8149DF_READLOG_EXIT") { return; }                                            //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8149DF_READLOG_EXIT") { M_8154_ADD_CLIENT_BASIC_DBF(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8154_ADD_CLIENT_BASIC_DBF
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING CODE WAS COMMENTED OUT BECAUSE IT IS NOT NEEDED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8149D-RELISN-CLIENT-DBF.
        ///COMMENT:     @RELISN149D.
        ///COMMENT:     IF RESPONSE-CODE149D > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 149               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'DRI'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE149D TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8149D-RELISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 8154-ADD-CLIENT-BASIC-DBF.
        ///COMMENT:     @ADD154   ISN = IMP-CLIENT-NUMBER.
        ///COMMENT:     IF RESPONSE-CODE154 > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 154               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'AI '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE154  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8154-ADD-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  INSERT ROW INTO THE KSD CLIENT BASIC DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8154_ADD_CLIENT_BASIC_DBF(string returnMethod = "")
        {
            WS.CLIENTB_CREATED_BY.SetValue(Control.GetUserID());                                                //COBOL==> EXEC CICS ASSIGN USERID ( CLIENTB-CREATED-BY ) END-EXEC.
            WS.CLIENTB_LAST_MODIFIED_BY.SetValue(WS.CLIENTB_CREATED_BY);                                        //COBOL==> MOVE CLIENTB-CREATED-BY TO CLIENTB-LAST-MODIFIED-BY.
            DbConv.ExecuteSql("INSERT INTO KSD_CLIENT_BASIC  ( CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , SENSITIVE_FLAG , CIS_PREFERRED_ID , NAME_TYPE  ) VALUES  ( {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, CURRENT_TIMESTAMP , {44}, CURRENT_TIMESTAMP , {45}, {46}, {47} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_CLIENT_BASIC ( CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , SENSITIVE_FLAG , CIS_PREFERRED_ID , NAME_TYPE ) VALUES ( :CLIENTB-CLIENT-NUMBER , :CLIENTB-CLIENT-GIVEN-NAME , :CLIENTB-CLIENT-INITIALS , :CLIENTB-CLIENT-SURNAME , :CLIENTB-CIS-REPL-IND , :CLIENTB-WORK-PHONE , :CLIENTB-SSN , :CLIENTB-GENDER , :CLIENTB-PARENT-RGHTS-SEV , :CLIENTB-PRNT-RGHTS-SEV-DT , :CLIENTB-LEGAL-STATUS , :CLIENTB-INSURANCE-CODE , :CLIENTB-INITIAL-CUSTODY-DT , :CLIENTB-HOME-PHONE , :CLIENTB-DATE-OF-BIRTH , :CLIENTB-CURR-PLACEMNT-DT , :CLIENTB-CURRENT-PLACEMENT , :CLIENTB-CSEA-G-CAUSE-CODE , :CLIENTB-CSEA-G-CAUSE-CL-DT , :CLIENTB-CSEA-COOP-CODE , :CLIENTB-COUNTY-CRT-COMMIT , :CLIENTB-MONTHS-ASST-AF , :CLIENTB-MONTHS-ASST-GA , :CLIENTB-MO-DEATH-DT , :CLIENTB-MO-PRT-DT , :CLIENTB-FA-DEATH-DT , :CLIENTB-FA-PRT-DT , :CLIENTB-MPI-ID , :CLIENTB-MED-COVERAGE-IND , :CLIENTB-INSURANCE-CARRIER , :CLIENTB-INSURANCE-POLCY-NO , :CLIENTB-SPOKEN-LANGUAGE , :CLIENTB-WRITTEN-LANGUAGE , :CLIENTB-STATE-OF-BIRTH , :CLIENTB-SCHOOL-DISTRICT , :CLIENTB-ETHNIC-CLASS , :CLIENTB-SUFFIX-NAME , :CLIENTB-EMPLOYER-NAME , :CLIENTB-EARNED-INCOME-AMT , :CLIENTB-INCOME-FREQUENCY , :CLIENTB-KEES-ABMS-ID , :CLIENTB-EMAIL-ADDRESS , :CLIENTB-OCCUPATION , :CLIENTB-CREATED-BY , CURRENT_TIMESTAMP , :CLIENTB-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :CLIENTB-SENSITIVE-FLAG , :CLIENTB-CIS-PREFERRED-ID , :CLIENTB-NAME-TYPE ) END-EXEC.
                                 WS.CLIENTB_CLIENT_NUMBER, WS.CLIENTB_CLIENT_GIVEN_NAME, WS.CLIENTB_CLIENT_INITIALS, WS.CLIENTB_CLIENT_SURNAME, WS.CLIENTB_CIS_REPL_IND, WS.CLIENTB_WORK_PHONE, WS.CLIENTB_SSN, WS.CLIENTB_GENDER, WS.CLIENTB_PARENT_RGHTS_SEV, WS.CLIENTB_PRNT_RGHTS_SEV_DT, WS.CLIENTB_LEGAL_STATUS, WS.CLIENTB_INSURANCE_CODE, WS.CLIENTB_INITIAL_CUSTODY_DT, WS.CLIENTB_HOME_PHONE, WS.CLIENTB_DATE_OF_BIRTH, WS.CLIENTB_CURR_PLACEMNT_DT, WS.CLIENTB_CURRENT_PLACEMENT, WS.CLIENTB_CSEA_G_CAUSE_CODE, WS.CLIENTB_CSEA_G_CAUSE_CL_DT, WS.CLIENTB_CSEA_COOP_CODE, WS.CLIENTB_COUNTY_CRT_COMMIT, WS.CLIENTB_MONTHS_ASST_AF, WS.CLIENTB_MONTHS_ASST_GA, WS.CLIENTB_MO_DEATH_DT, WS.CLIENTB_MO_PRT_DT, WS.CLIENTB_FA_DEATH_DT, WS.CLIENTB_FA_PRT_DT, WS.CLIENTB_MPI_ID, WS.CLIENTB_MED_COVERAGE_IND, WS.CLIENTB_INSURANCE_CARRIER, WS.CLIENTB_INSURANCE_POLCY_NO, WS.CLIENTB_SPOKEN_LANGUAGE, WS.CLIENTB_WRITTEN_LANGUAGE, WS.CLIENTB_STATE_OF_BIRTH, WS.CLIENTB_SCHOOL_DISTRICT, WS.CLIENTB_ETHNIC_CLASS, WS.CLIENTB_SUFFIX_NAME, WS.CLIENTB_EMPLOYER_NAME, WS.CLIENTB_EARNED_INCOME_AMT, WS.CLIENTB_INCOME_FREQUENCY, WS.CLIENTB_KEES_ABMS_ID, WS.CLIENTB_EMAIL_ADDRESS, WS.CLIENTB_OCCUPATION, WS.CLIENTB_CREATED_BY, WS.CLIENTB_LAST_MODIFIED_BY, WS.CLIENTB_SENSITIVE_FLAG, WS.CLIENTB_CIS_PREFERRED_ID, WS.CLIENTB_NAME_TYPE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("AI ");                                                              //COBOL==> MOVE 'AI ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8154_ADD_CLIENT_BASIC_DBF") { M_8154_ADD_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8154_ADD_EXIT
        /// </summary>
        private void M_8154_ADD_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8154_ADD_EXIT") { return; }                                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8154_ADD_EXIT") { M_8154_READISN_CLIENT_BASIC_DBF(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8154_READISN_CLIENT_BASIC_DBF
        /// </summary>
        /// <remarks>
        ///COMMENT: 8154-READISN-CLIENT-BASIC-DBF.
        ///COMMENT:     @READISN154   HOLD  ISN = IMP-CLIENT-NUMBER.
        ///COMMENT:     IF RESPONSE-CODE154 > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 154               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'RHI'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE154  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8154-READISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  SELECT ROW FROM KSD CLIENT BASIC DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8154_READISN_CLIENT_BASIC_DBF(string returnMethod = "")
        {
            DbConv.ExecuteSqlQuery("SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , SENSITIVE_FLAG , CIS_PREFERRED_ID , NAME_TYPE INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} , {10} , {11} , {12} , {13} , {14} , {15} , {16} , {17} , {18} , {19} , {20} , {21} , {22} , {23} , {24} , {25} , {26} , {27} , {28} , {29} , {30} , {31} , {32} , {33} , {34} , {35} , {36} , {37} , {38} , {39} , {40} , {41} , {42} , {43} , {44} , {45} , {46} , {47} , {48} , {49} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {50} ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , WORK_PHONE , SSN , GENDER , PARENT_RGHTS_SEV , PRNT_RGHTS_SEV_DT , LEGAL_STATUS , INSURANCE_CODE , INITIAL_CUSTODY_DT , HOME_PHONE , DATE_OF_BIRTH , CURR_PLACEMNT_DT , CURRENT_PLACEMENT , CSEA_G_CAUSE_CODE , CSEA_G_CAUSE_CL_DT , CSEA_COOP_CODE , COUNTY_CRT_COMMIT , MONTHS_ASST_AF , MONTHS_ASST_GA , MO_DEATH_DT , MO_PRT_DT , FA_DEATH_DT , FA_PRT_DT , MPI_ID , MED_COVERAGE_IND , INSURANCE_CARRIER , INSURANCE_POLCY_NO , SPOKEN_LANGUAGE , WRITTEN_LANGUAGE , STATE_OF_BIRTH , SCHOOL_DISTRICT , ETHNIC_CLASS , SUFFIX_NAME , EMPLOYER_NAME , EARNED_INCOME_AMT , INCOME_FREQUENCY , KEES_ABMS_ID , EMAIL_ADDRESS , OCCUPATION , CREATED_BY , CREATED_TIMESTAMP , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , SENSITIVE_FLAG , CIS_PREFERRED_ID , NAME_TYPE INTO :CLIENTB-CLIENT-NUMBER , :CLIENTB-CLIENT-GIVEN-NAME , :CLIENTB-CLIENT-INITIALS , :CLIENTB-CLIENT-SURNAME , :CLIENTB-CIS-REPL-IND , :CLIENTB-WORK-PHONE , :CLIENTB-SSN , :CLIENTB-GENDER , :CLIENTB-PARENT-RGHTS-SEV , :CLIENTB-PRNT-RGHTS-SEV-DT , :CLIENTB-LEGAL-STATUS , :CLIENTB-INSURANCE-CODE , :CLIENTB-INITIAL-CUSTODY-DT , :CLIENTB-HOME-PHONE , :CLIENTB-DATE-OF-BIRTH , :CLIENTB-CURR-PLACEMNT-DT , :CLIENTB-CURRENT-PLACEMENT , :CLIENTB-CSEA-G-CAUSE-CODE , :CLIENTB-CSEA-G-CAUSE-CL-DT , :CLIENTB-CSEA-COOP-CODE , :CLIENTB-COUNTY-CRT-COMMIT , :CLIENTB-MONTHS-ASST-AF , :CLIENTB-MONTHS-ASST-GA , :CLIENTB-MO-DEATH-DT , :CLIENTB-MO-PRT-DT , :CLIENTB-FA-DEATH-DT , :CLIENTB-FA-PRT-DT , :CLIENTB-MPI-ID , :CLIENTB-MED-COVERAGE-IND , :CLIENTB-INSURANCE-CARRIER , :CLIENTB-INSURANCE-POLCY-NO , :CLIENTB-SPOKEN-LANGUAGE , :CLIENTB-WRITTEN-LANGUAGE , :CLIENTB-STATE-OF-BIRTH , :CLIENTB-SCHOOL-DISTRICT , :CLIENTB-ETHNIC-CLASS , :CLIENTB-SUFFIX-NAME , :CLIENTB-EMPLOYER-NAME , :CLIENTB-EARNED-INCOME-AMT , :CLIENTB-INCOME-FREQUENCY , :CLIENTB-KEES-ABMS-ID , :CLIENTB-EMAIL-ADDRESS , :CLIENTB-OCCUPATION , :CLIENTB-CREATED-BY , :CLIENTB-CREATED-TIMESTAMP , :CLIENTB-LAST-MODIFIED-BY , :CLIENTB-LAST-MODIFIED-TMST , :CLIENTB-SENSITIVE-FLAG , :CLIENTB-CIS-PREFERRED-ID , :CLIENTB-NAME-TYPE FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :CLIENTB-CLIENT-NUMBER END-EXEC.
                                 WS.CLIENTB_CLIENT_NUMBER, WS.CLIENTB_CLIENT_GIVEN_NAME, WS.CLIENTB_CLIENT_INITIALS, WS.CLIENTB_CLIENT_SURNAME, WS.CLIENTB_CIS_REPL_IND, WS.CLIENTB_WORK_PHONE, WS.CLIENTB_SSN, WS.CLIENTB_GENDER, WS.CLIENTB_PARENT_RGHTS_SEV, WS.CLIENTB_PRNT_RGHTS_SEV_DT, WS.CLIENTB_LEGAL_STATUS, WS.CLIENTB_INSURANCE_CODE, WS.CLIENTB_INITIAL_CUSTODY_DT, WS.CLIENTB_HOME_PHONE, WS.CLIENTB_DATE_OF_BIRTH, WS.CLIENTB_CURR_PLACEMNT_DT, WS.CLIENTB_CURRENT_PLACEMENT, WS.CLIENTB_CSEA_G_CAUSE_CODE, WS.CLIENTB_CSEA_G_CAUSE_CL_DT, WS.CLIENTB_CSEA_COOP_CODE, WS.CLIENTB_COUNTY_CRT_COMMIT, WS.CLIENTB_MONTHS_ASST_AF, WS.CLIENTB_MONTHS_ASST_GA, WS.CLIENTB_MO_DEATH_DT, WS.CLIENTB_MO_PRT_DT, WS.CLIENTB_FA_DEATH_DT, WS.CLIENTB_FA_PRT_DT, WS.CLIENTB_MPI_ID, WS.CLIENTB_MED_COVERAGE_IND, WS.CLIENTB_INSURANCE_CARRIER, WS.CLIENTB_INSURANCE_POLCY_NO, WS.CLIENTB_SPOKEN_LANGUAGE, WS.CLIENTB_WRITTEN_LANGUAGE, WS.CLIENTB_STATE_OF_BIRTH, WS.CLIENTB_SCHOOL_DISTRICT, WS.CLIENTB_ETHNIC_CLASS, WS.CLIENTB_SUFFIX_NAME, WS.CLIENTB_EMPLOYER_NAME, WS.CLIENTB_EARNED_INCOME_AMT, WS.CLIENTB_INCOME_FREQUENCY, WS.CLIENTB_KEES_ABMS_ID, WS.CLIENTB_EMAIL_ADDRESS, WS.CLIENTB_OCCUPATION, WS.CLIENTB_CREATED_BY, WS.CLIENTB_CREATED_TIMESTAMP, WS.CLIENTB_LAST_MODIFIED_BY, WS.CLIENTB_LAST_MODIFIED_TMST, WS.CLIENTB_SENSITIVE_FLAG, WS.CLIENTB_CIS_PREFERRED_ID, WS.CLIENTB_NAME_TYPE, WS.CLIENTB_CLIENT_NUMBER);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CLIENTB_EOF_YES.SetValue(true);                                                               //COBOL==> SET WS-CLIENTB-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RHI");                                                              //COBOL==> MOVE 'RHI' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8154_READISN_CLIENT_BASIC_DBF") { M_8154_READISN_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8154_READISN_EXIT
        /// </summary>
        private void M_8154_READISN_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8154_READISN_EXIT") { return; }                                              //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8154_READISN_EXIT") { M_8154_UPDT_CLIENT_BASIC_DBF(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8154_UPDT_CLIENT_BASIC_DBF
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  THE FOLLOWING CODE WAS COMMENTED OUT BECAUSE IT IS NOT NEEDED
        ///COMMENT: *****************************************************************
        ///COMMENT: 8154-RELISN-CLIENT-BASIC-DBF.
        ///COMMENT:     @RELISN154.
        ///COMMENT:     IF RESPONSE-CODE154 > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 154               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE ' RI'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE154  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8154-RELISN-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 8154-UPDT-CLIENT-BASIC-DBF.
        ///COMMENT:     @UPDATE154   ISN = IMP-CLIENT-NUMBER.
        ///COMMENT:     IF RESPONSE-CODE154 > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE 154               TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'UI '             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODE154  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8154-UPDT-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  UPDATE ROW ON THE KSD CLIENT BASIC DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8154_UPDT_CLIENT_BASIC_DBF(string returnMethod = "")
        {
            WS.CLIENTB_LAST_MODIFIED_BY.SetValue(Control.GetUserID());                                          //COBOL==> EXEC CICS ASSIGN USERID ( CLIENTB-LAST-MODIFIED-BY ) END-EXEC.
            DbConv.ExecuteSql("UPDATE KSD_CLIENT_BASIC SET CLIENT_GIVEN_NAME = {0},  CLIENT_INITIALS = {1},  CLIENT_SURNAME = {2},  SSN = {3},  GENDER = {4},  DATE_OF_BIRTH = {5},  LAST_MODIFIED_BY = {6},  LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE CLIENT_NUMBER = {7}", WS.CLIENTB_CLIENT_GIVEN_NAME, WS.CLIENTB_CLIENT_INITIALS, WS.CLIENTB_CLIENT_SURNAME, WS.CLIENTB_SSN, WS.CLIENTB_GENDER, WS.CLIENTB_DATE_OF_BIRTH, WS.CLIENTB_LAST_MODIFIED_BY, WS.CLIENTB_CLIENT_NUMBER);  //COBOL==> EXEC SQL UPDATE KSD_CLIENT_BASIC SET CLIENT_GIVEN_NAME = :CLIENTB-CLIENT-GIVEN-NAME , CLIENT_INITIALS = :CLIENTB-CLIENT-INITIALS , CLIENT_SURNAME = :CLIENTB-CLIENT-SURNAME , SSN = :CLIENTB-SSN , GENDER = :CLIENTB-GENDER , DATE_OF_BIRTH = :CLIENTB-DATE-OF-BIRTH , LAST_MODIFIED_BY = :CLIENTB-LAST-MODIFIED-BY , LAST_MODIFIED_TMST = CURRENT_TIMESTAMP WHERE CLIENT_NUMBER = :CLIENTB-CLIENT-NUMBER END-EXEC.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("UI ");                                                              //COBOL==> MOVE 'UI ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8154_UPDT_CLIENT_BASIC_DBF") { M_8154_UPDT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8154_UPDT_EXIT
        /// </summary>
        private void M_8154_UPDT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8154_UPDT_EXIT") { return; }                                                 //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8154_UPDT_EXIT") { M_8200_DECLARE_SYSPART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8200_DECLARE_SYSPART
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  DECLARE CURSOR FOR KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8200_DECLARE_SYSPART(string returnMethod = "")
        {
            // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE SYSPART CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :SYSPART-FK-CLB-CLIENT-NO AND FK_CLI_CLIENT_NAME = :SYSPART-FK-CLI-CLIENT-NAME AND FK_CLI_SSN = :SYSPART-FK-CLI-SSN ORDER BY SYSTEM_CODE END-EXEC.
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8200_DECLARE_SYSPART") { M_8200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8200_EXIT
        /// </summary>
        private void M_8200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8200_EXIT") { M_8210_OPEN_SYS_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8210_OPEN_SYS_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8210_OPEN_SYS_PART(string returnMethod = "")
        {
            DbConv.OpenReader("SYSPART");                                                                       //COBOL==> EXEC SQL OPEN SYSPART END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8210_OPEN_SYS_PART") { M_8210_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8210_EXIT
        /// </summary>
        private void M_8210_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8210_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8210_EXIT") { M_8220_FETCH_SYS_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8220_FETCH_SYS_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8220_FETCH_SYS_PART(string returnMethod = "")
        {
            DbConv.FetchReaderRow("SYSPART",                                                                 //COBOL==> EXEC SQL FETCH SYSPART INTO :SYSPART-SYSTEM-CODE , :SYSPART-PARTICIPATION-FLAG , :SYSPART-CREATED-TIMESTAMP , :SYSPART-CREATED-BY , :SYSPART-LAST-MODIFIED-BY , :SYSPART-LAST-MODIFIED-TMST , :SYSPART-FK-CLB-CLIENT-NO , :SYSPART-FK-CLI-CLIENT-NAME , :SYSPART-FK-CLI-SSN END-EXEC.
                             WS.SYSPART_SYSTEM_CODE, WS.SYSPART_PARTICIPATION_FLAG, WS.SYSPART_CREATED_TIMESTAMP, WS.SYSPART_CREATED_BY, WS.SYSPART_LAST_MODIFIED_BY, WS.SYSPART_LAST_MODIFIED_TMST, WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_SYSPART_EOF_YES.SetValue(true);                                                               //COBOL==> SET WS-SYSPART-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8220_FETCH_SYS_PART") { M_8220_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8220_EXIT
        /// </summary>
        private void M_8220_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8220_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8220_EXIT") { M_8230_CLOSE_SYS_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8230_CLOSE_SYS_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8230_CLOSE_SYS_PART(string returnMethod = "")
        {
            DbConv.CloseReader("SYSPART");                                                                      //COBOL==> EXEC SQL CLOSE SYSPART END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RL ");                                                              //COBOL==> MOVE 'RL ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8230_CLOSE_SYS_PART") { M_8230_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8230_EXIT
        /// </summary>
        private void M_8230_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8230_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8230_EXIT") { M_8240_INSERT_SYS_PART(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8240_INSERT_SYS_PART
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  INSERT ROW INTO KSD SYSTEM PARTICIPATION DB2 TABLE ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8240_INSERT_SYS_PART(string returnMethod = "")
        {
            WS.SYSPART_CREATED_BY.SetValue(Control.GetUserID());                                                //COBOL==> EXEC CICS ASSIGN USERID ( SYSPART-CREATED-BY ) END-EXEC.
            WS.SYSPART_LAST_MODIFIED_BY.SetValue(WS.SYSPART_CREATED_BY);                                        //COBOL==> MOVE SYSPART-CREATED-BY TO SYSPART-LAST-MODIFIED-BY.
            DbConv.ExecuteSql("INSERT INTO KSD_SYSTEM_PART  ( SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN  ) VALUES  ( {0}, {1}, CURRENT_TIMESTAMP , {2}, {3}, CURRENT_TIMESTAMP , {4}, {5}, {6} ) ",  //COBOL==> EXEC SQL INSERT INTO KSD_SYSTEM_PART ( SYSTEM_CODE , PARTICIPATION_FLAG , CREATED_TIMESTAMP , CREATED_BY , LAST_MODIFIED_BY , LAST_MODIFIED_TMST , FK_CLB_CLIENT_NO , FK_CLI_CLIENT_NAME , FK_CLI_SSN ) VALUES ( :SYSPART-SYSTEM-CODE , :SYSPART-PARTICIPATION-FLAG , CURRENT_TIMESTAMP , :SYSPART-CREATED-BY , :SYSPART-LAST-MODIFIED-BY , CURRENT_TIMESTAMP , :SYSPART-FK-CLB-CLIENT-NO , :SYSPART-FK-CLI-CLIENT-NAME , :SYSPART-FK-CLI-SSN ) END-EXEC.
                                 WS.SYSPART_SYSTEM_CODE, WS.SYSPART_PARTICIPATION_FLAG, WS.SYSPART_CREATED_BY, WS.SYSPART_LAST_MODIFIED_BY, WS.SYSPART_FK_CLB_CLIENT_NO, WS.SYSPART_FK_CLI_CLIENT_NAME, WS.SYSPART_FK_CLI_SSN);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN -803
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(-803)))
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("AI ");                                                              //COBOL==> MOVE 'AI ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8240_INSERT_SYS_PART") { M_8240_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8240_EXIT
        /// </summary>
        private void M_8240_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8240_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8240_EXIT") { M_8999_END_ADABAS_TRANSACTION(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8999_END_ADABAS_TRANSACTION
        /// </summary>
        /// <remarks>
        ///COMMENT: 8999-END-ADABAS-TRANSACTION.
        ///COMMENT:     @END-TRANSACTION.
        ///COMMENT:     IF RESPONSE-CODEOPN > ZERO
        ///COMMENT:         MOVE 'A'               TO MV-ABEND-TYPE
        ///COMMENT:         MOVE ZERO              TO MV-ADA-FILE-NUMBER
        ///COMMENT:         MOVE 'EAT'             TO MV-ADA-FILE-ACTION
        ///COMMENT:         MOVE RESPONSE-CODEOPN  TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 8999-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: *****************************************************************
        ///COMMENT:  END UNIT OF WORK ROUTINE
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8999_END_ADABAS_TRANSACTION(string returnMethod = "")
        {
            if (WS.MV_ABEND_TYPE_NONE.Value)                                                                    //COBOL==> IF MV-ABEND-TYPE-NONE
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("EAT");                                                              //COBOL==> MOVE 'EAT' TO MV-ADA-FILE-ACTION
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_8999_END_ADABAS_TRANSACTION") { M_8999_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8999_EXIT
        /// </summary>
        private void M_8999_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8999_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8999_EXIT") { M_9000_CALCULATE_PHONETIC_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9000_CALCULATE_PHONETIC_NAME
        /// </summary>
        /// <remarks>
        ///COMMENT: WBR END
        /// </remarks>
        private void M_9000_CALCULATE_PHONETIC_NAME(string returnMethod = "")
        {
            WS.PH_NAME_RAW_INQ.SetValue(WS.MV_RECORD_LAST_NAME);                                                //COBOL==> MOVE MV-RECORD-LAST-NAME TO PH-NAME-RAW-INQ.
            M_PH002_0000_CONVERT_NAME("M_PH002_0000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM PH002-0000-CONVERT-NAME THRU PH002-0000-EXIT.
            if (WS.PH_ERR_NAME.IsEqualTo("1"))                                                                  //COBOL==> IF PH-ERR-NAME = '1'
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                                                                                                                    //COMMENT: ******* CALCULATE PRIMARY LAST NAME *****************************
                WS.MV_ADA_FILE_ACTION.SetValue("CPL");                                                              //COBOL==> MOVE 'CPL' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((WS.MV_RECORD_FIRST_NAME_1.IsAlphaUpper())
             && (!(WS.MV_RECORD_FIRST_NAME_1.IsSpaces())))  //COBOL==> IF MV-RECORD-FIRST-NAME-1 ALPHABETIC-UPPER AND MV-RECORD-FIRST-NAME-1 NOT = SPACE
                {
                    WS.MV_PHONETIC_1.SetValue(WS.MV_RECORD_FIRST_NAME);                                                 //COBOL==> MOVE MV-RECORD-FIRST-NAME TO MV-PHONETIC-1
                    WS.MV_PHONETIC_CODE.SetValue(WS.PH_NAME_17_NUMERIC);                                                //COBOL==> MOVE PH-NAME-17-NUMERIC TO MV-PHONETIC-CODE
                    WS.MV_PHONETIC_3.SetValue(WS.MV_RECORD_FIRST_NAME);                                                 //COBOL==> MOVE MV-RECORD-FIRST-NAME TO MV-PHONETIC-3
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                                                                                                                        //COMMENT: *********** PHONETIC PRIMARY FIRST NAME *************************
                    WS.MV_ADA_FILE_ACTION.SetValue("PPF");                                                              //COBOL==> MOVE 'PPF' TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_9000_CALCULATE_PHONETIC_NAME") { M_9000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9000_EXIT
        /// </summary>
        private void M_9000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_9000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9000_EXIT") { M_PH002_0000_CONVERT_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_0000_CONVERT_NAME
        /// </summary>
        /// <remarks>
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH002                                       *
        ///COMMENT:   DESCRIPTION:  CONVERT LAST NAME TO PHONETIC VALUE            *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:                                                                *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_PH002_0000_CONVERT_NAME(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   CONVERT LAST NAME TO A PHONETIC VALUE                        *
            //COMMENT: ---------------------------------------------------------------*
            M_PH002_1000_INITIALIZE("M_PH002_1000_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM PH002-1000-INITIALIZE THRU PH002-1000-EXIT.
            WS.PH_THREE_LETTERS.SetValue(WS.PH_NAME_RAW_INQ);                                                   //COBOL==> MOVE PH-NAME-RAW-INQ TO PH-THREE-LETTERS.
            WS.PH_TWO_LETTERS.SetValue(WS.PH_THREE_LETTERS);                                                    //COBOL==> MOVE PH-THREE-LETTERS TO PH-TWO-LETTERS.
            WS.PH_ONE_LETTER.SetValue(WS.PH_THREE_LETTERS);                                                     //COBOL==> MOVE PH-THREE-LETTERS TO PH-ONE-LETTER.
            WS.PH_NAME_CRUNCH_INQ.SetValue(WS.PH_NAME_RAW_INQ);                                                 //COBOL==> MOVE PH-NAME-RAW-INQ TO PH-NAME-CRUNCH-INQ.
            M_PH003_0000_CRUNCH_NAME("M_PH003_0000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH003-0000-CRUNCH-NAME THRU PH003-0000-EXIT.
            WS.PH_FNTIC_CX.SetValue(01);                                                                        //COBOL==> MOVE 01 TO PH-FNTIC-CX.
                                                                                                                //COMMENT: ---------------------------------------------------------------*
                                                                                                                //COMMENT:   CHECKING FIRST THREE,TWO, OR 1 LETTER THEN CONVERT           *
                                                                                                                //COMMENT:      THE REMAINDER OF THE NAME                                 *
                                                                                                                //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_THREE_LETTERS.IsEqualTo("SCH"))                                                           //COBOL==> IF PH-THREE-LETTERS = 'SCH'
            {
                WS.PH_FNTIC_C3.SetValue(04);                                                                        //COBOL==> MOVE 04 TO PH-FNTIC-C3
                WS.PH_NAME_NUM_34[1].SetValue("06");                                                                //COBOL==> MOVE '06' TO PH-NAME-NUM-34 ( 1 )
                M_PH002_2000_REMAIN_NAME("M_PH002_2000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                M_PH002_0000_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_CF2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CF2-INDEX TO 1.
            WS.PH_CF2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CF2-INDXX.
            M_PH002_3000_FIRST_2_LETTERS("M_PH002_3000_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM PH002-3000-FIRST-2-LETTERS THRU PH002-3000-EXIT.
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_C3.SetValue(03);                                                                        //COBOL==> MOVE 03 TO PH-FNTIC-C3
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_NAME_NUM_34[1].SetValue(WS.PH_HIT);                                                           //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( 1 )
                M_PH002_2000_REMAIN_NAME("M_PH002_2000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                M_PH002_0000_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_CF1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CF1-INDEX TO 1.
            WS.PH_CF1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CF1-INDXX.
            M_PH002_4000_FIRST_1_LETTER("M_PH002_4000_EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM PH002-4000-FIRST-1-LETTER THRU PH002-4000-EXIT.
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_C3.SetValue(02);                                                                        //COBOL==> MOVE 02 TO PH-FNTIC-C3
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_NAME_NUM_34[1].SetValue(WS.PH_HIT);                                                           //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( 1 )
                M_PH002_2000_REMAIN_NAME("M_PH002_2000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                M_PH002_0000_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_ERR_NAME.SetValue("1");                                                                       //COBOL==> MOVE '1' TO PH-ERR-NAME.
            if (returnMethod != "" && returnMethod != "M_PH002_0000_CONVERT_NAME") { M_PH002_0000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_0000_EXIT
        /// </summary>
        private void M_PH002_0000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_0000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_0000_EXIT") { M_PH002_1000_INITIALIZE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_1000_INITIALIZE
        /// </summary>
        private void M_PH002_1000_INITIALIZE(string returnMethod = "")
        {
            WS.PH_NAME_CRUNCH_INQ.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO PH-NAME-CRUNCH-INQ.
            WS.PH_NAME_REDUC_INQ.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO PH-NAME-REDUC-INQ.
            WS.PH_NAME_PARTS.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACES TO PH-NAME-PARTS.
            WS.PH_NAME_34_NUMERIC.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO PH-NAME-34-NUMERIC.
            WS.PH_HIT.SetValueWithSpaces();                                                                     //COBOL==> MOVE SPACES TO PH-HIT.
            WS.PH_NAME_17_NUMERIC.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO PH-NAME-17-NUMERIC.
            WS.PH_FNTIC_C1.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C2.
            WS.PH_FNTIC_C3.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C3.
            WS.PH_FNTIC_CX.SetValue(01);                                                                        //COBOL==> MOVE 01 TO PH-FNTIC-CX.
            WS.PH_SUSS_ID.SetValueWithZeroes();                                                                 //COBOL==> MOVE ZEROS TO PH-SUSS-ID.
            WS.PH_ERR_NAME.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-ERR-NAME.
            if (returnMethod != "" && returnMethod != "M_PH002_1000_INITIALIZE") { M_PH002_1000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_1000_EXIT
        /// </summary>
        private void M_PH002_1000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_1000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_1000_EXIT") { M_PH002_2000_REMAIN_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2000_REMAIN_NAME
        /// </summary>
        private void M_PH002_2000_REMAIN_NAME(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     CONVERT REMAINDER OF NAME                                  *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_FNTIC_C3.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH002-2010-FINISH-NAME THRU PH002-2010-EXIT UNTIL PH-FNTIC-C3 > 17.
            {
                M_PH002_2010_FINISH_NAME("M_PH002_2010_EXIT"); if (Control.ExitProgram) { return; }
            }
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C2.
            while (!(WS.PH_FNTIC_C1.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH002-2020-WRAP-UP THRU PH002-2020-EXIT UNTIL PH-FNTIC-C1 > 17.
            {
                M_PH002_2020_WRAP_UP("M_PH002_2020_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2000_REMAIN_NAME") { M_PH002_2000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2000_EXIT
        /// </summary>
        private void M_PH002_2000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2000_EXIT") { M_PH002_2010_FINISH_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2010_FINISH_NAME
        /// </summary>
        private void M_PH002_2010_FINISH_NAME(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    IF ON THE LAST 2 CHARACTERS OF THE NAME THEN HANDLE         *
            //COMMENT:    SPERATELY.                                                  *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C3.IsEqualTo(17))                                                                   //COBOL==> IF PH-FNTIC-C3 = 17
            {
                M_PH002_2011_LAST_LETTER("M_PH002_2011_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH002-2011-LAST-LETTER THRU PH002-2011-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                // next                                                                                             //COBOL==> NEXT SENTENCE.
            }
            if (WS.PH_FNTIC_C3.IsEqualTo(16))                                                                   //COBOL==> IF PH-FNTIC-C3 = 16
            {
                M_PH002_2901_BUILD_2_1("M_PH002_2901_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PH002-2901-BUILD-2-1 THRU PH002-2901-EXIT
                M_PH002_2012_CHECK_2_LETTERS("M_PH002_2012_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM PH002-2012-CHECK-2-LETTERS THRU PH002-2012-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PH002_2014_MIDDLE_LETTERS("M_PH002_2014_EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM PH002-2014-MIDDLE-LETTERS THRU PH002-2014-EXIT.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2010_FINISH_NAME") { M_PH002_2010_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2010_EXIT
        /// </summary>
        private void M_PH002_2010_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2010_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2010_EXIT") { M_PH002_2011_LAST_LETTER(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_LAST_LETTER
        /// </summary>
        private void M_PH002_2011_LAST_LETTER(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CONVERT LAST LETTER OF THE NAME                             *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_REDUC[17].IsSpaces())                                                                   //COBOL==> IF PH-L-REDUC ( 17 ) = SPACE
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_ONE_LETTER.SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C3.AsInt()]);                                   //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C3 ) TO PH-ONE-LETTER
                WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1
                WS.PH_SUSS_ID.SetValueWithZeroes();                                                                 //COBOL==> MOVE 0 TO PH-SUSS-ID
                WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX
                M_PH002_2011_1_RE_ONE("M_PH002_2011_1_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM PH002-2011-1-RE-ONE THRU PH002-2011-1-EXIT
                M_PH002_2011_2_CK_SU_ID("M_PH002_2011_2_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM PH002-2011-2-CK-SU-ID THRU PH002-2011-2-EXIT.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2011_LAST_LETTER") { M_PH002_2011_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_EXIT
        /// </summary>
        private void M_PH002_2011_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2011_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2011_EXIT") { M_PH002_2011_1_RE_ONE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_1_RE_ONE
        /// </summary>
        private void M_PH002_2011_1_RE_ONE(string returnMethod = "")
        {
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                M_PH002_2903_REM_ONE("M_PH002_2903_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2011_1_RE_ONE") { M_PH002_2011_1_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_1_EXIT
        /// </summary>
        private void M_PH002_2011_1_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2011_1_EXIT") { return; }                                              //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2011_1_EXIT") { M_PH002_2011_2_CK_SU_ID(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_2_CK_SU_ID
        /// </summary>
        private void M_PH002_2011_2_CK_SU_ID(string returnMethod = "")
        {
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX ) .
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2011_2_CK_SU_ID") { M_PH002_2011_2_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_2_EXIT
        /// </summary>
        private void M_PH002_2011_2_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2011_2_EXIT") { return; }                                              //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2011_2_EXIT") { M_PH002_2012_CHECK_2_LETTERS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2012_CHECK_2_LETTERS
        /// </summary>
        private void M_PH002_2012_CHECK_2_LETTERS(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   CONVERT LAST 2 LETTERS OF NAME.                              *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_TWO_LETTERS.IsSpaces())                                                                   //COBOL==> IF PH-TWO-LETTERS = SPACES
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                M_PH002_2012_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-2012-EXIT.
            }
            WS.PH_CR2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR2-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR2-INDXX.
            while (!(WS.PH_CR2_INDXX.IsGreaterThan(9)))                                                         //COBOL==> PERFORM PH002-2902-REM-TWO THRU PH002-2902-EXIT UNTIL PH-CR2-INDXX > 9.
            {
                M_PH002_2902_REM_TWO("M_PH002_2902_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                M_PH002_2012_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-2012-EXIT.
            }
            WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX.
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                M_PH002_2903_REM_ONE("M_PH002_2903_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2012_CHECK_2_LETTERS") { M_PH002_2012_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2012_EXIT
        /// </summary>
        private void M_PH002_2012_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2012_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2012_EXIT") { M_PH002_2014_MIDDLE_LETTERS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2014_MIDDLE_LETTERS
        /// </summary>
        private void M_PH002_2014_MIDDLE_LETTERS(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    THE FOLLOWING WILL CONVERT THE MIDDLE CHARATERS OF THE NAME.*
            //COMMENT: ---------------------------------------------------------------*
            M_PH002_2900_BUILD_3_2_1("M_PH002_2900_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH002-2900-BUILD-3-2-1 THRU PH002-2900-EXIT.
            if (WS.PH_THREE_LETTERS.IsSpaces())                                                                 //COBOL==> IF PH-THREE-LETTERS = SPACES
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                M_PH002_2014_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-2014-EXIT.
            }
            if (WS.PH_THREE_LETTERS.IsEqualTo("SCH"))                                                           //COBOL==> IF PH-THREE-LETTERS = 'SCH'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue("06");                                           //COBOL==> MOVE '06' TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(3);                                                                              //COBOL==> ADD 3 TO PH-FNTIC-C3
                M_PH002_2014_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-2014-EXIT.
            }
            WS.PH_CR2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR2-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR2-INDXX.
            while (!(WS.PH_CR2_INDXX.IsGreaterThan(9)))                                                         //COBOL==> PERFORM PH002-2902-REM-TWO THRU PH002-2902-EXIT UNTIL PH-CR2-INDXX > 9.
            {
                M_PH002_2902_REM_TWO("M_PH002_2902_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(2);                                                                              //COBOL==> ADD 2 TO PH-FNTIC-C3
                M_PH002_2014_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-2014-EXIT.
            }
            WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX.
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                M_PH002_2903_REM_ONE("M_PH002_2903_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2014_MIDDLE_LETTERS") { M_PH002_2014_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2014_EXIT
        /// </summary>
        private void M_PH002_2014_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2014_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2014_EXIT") { M_PH002_2020_WRAP_UP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2020_WRAP_UP
        /// </summary>
        private void M_PH002_2020_WRAP_UP(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   REDUCES THE 34 BYTE PHONETIC VALUE NAME TO A 17 BYTE         *
            //COMMENT:   PHONETIC VALUE.                                              *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_REFMT_34_17.SetValue(WS.PH_NAME_NUM_34[WS.PH_FNTIC_C1.AsInt()]);                              //COBOL==> MOVE PH-NAME-NUM-34 ( PH-FNTIC-C1 ) TO PH-REFMT-34-17.
            if (WS.PH_DIGIT_1.IsSpaces())                                                                       //COBOL==> IF PH-DIGIT-1 = SPACE
            {
                M_PH002_2021_DIGIT_1("M_PH002_2021_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM PH002-2021-DIGIT-1 THRU PH002-2021-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_1);                                  //COBOL==> MOVE PH-DIGIT-1 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 )
                M_PH002_2022_DIGIT_2("M_PH002_2022_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM PH002-2022-DIGIT-2 THRU PH002-2022-EXIT.
            }
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (returnMethod != "" && returnMethod != "M_PH002_2020_WRAP_UP") { M_PH002_2020_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2020_EXIT
        /// </summary>
        private void M_PH002_2020_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2020_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2020_EXIT") { M_PH002_2021_DIGIT_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2021_DIGIT_1
        /// </summary>
        private void M_PH002_2021_DIGIT_1(string returnMethod = "")
        {
            if (WS.PH_DIGIT_2.IsSpaces())                                                                       //COBOL==> IF PH-DIGIT-2 = SPACE
            {
                WS.PH_FNTIC_C1.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C1
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_2);                                  //COBOL==> MOVE PH-DIGIT-2 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 ) .
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2021_DIGIT_1") { M_PH002_2021_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2021_EXIT
        /// </summary>
        private void M_PH002_2021_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2021_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2021_EXIT") { M_PH002_2022_DIGIT_2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2022_DIGIT_2
        /// </summary>
        private void M_PH002_2022_DIGIT_2(string returnMethod = "")
        {
            if (!(WS.PH_DIGIT_2.IsSpaces()))                                                                    //COBOL==> IF PH-DIGIT-2 NOT EQUAL SPACE
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_2);                                  //COBOL==> MOVE PH-DIGIT-2 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 ) .
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2022_DIGIT_2") { M_PH002_2022_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2022_EXIT
        /// </summary>
        private void M_PH002_2022_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2022_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2022_EXIT") { M_PH002_3000_FIRST_2_LETTERS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_3000_FIRST_2_LETTERS
        /// </summary>
        private void M_PH002_3000_FIRST_2_LETTERS(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST 2 LETTERS OF NAME                *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_CF2_INDXX.IsGreaterThan(17)))                                                        //COBOL==> PERFORM PH002-3010-FIRST-2 THRU PH002-3010-EXIT UNTIL PH-CF2-INDXX > 17.
            {
                M_PH002_3010_FIRST_2("M_PH002_3010_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnMethod != "" && returnMethod != "M_PH002_3000_FIRST_2_LETTERS") { M_PH002_3000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_3000_EXIT
        /// </summary>
        private void M_PH002_3000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_3000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_3000_EXIT") { M_PH002_3010_FIRST_2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_3010_FIRST_2
        /// </summary>
        private void M_PH002_3010_FIRST_2(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST 2 LETTERS OF NAME.               *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPH2[WS.PH_CF2_INDEX.AsInt()].IsEqualTo(WS.PH_TWO_LETTERS))                              //COBOL==> IF PH-ALPH2 ( PH-CF2-INDEX ) = PH-TWO-LETTERS
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUM2[WS.PH_CF2_INDEX.AsInt()]);                                            //COBOL==> MOVE PH-NUM2 ( PH-CF2-INDEX ) TO PH-HIT
                WS.PH_CF2_INDXX.SetValue(18);                                                                       //COBOL==> MOVE 18 TO PH-CF2-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CF2_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CF2-INDXX
                WS.PH_CF2_INDEX.Add(1);                                                                             //COBOL==> SET PH-CF2-INDEX UP BY 1.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_3010_FIRST_2") { M_PH002_3010_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_3010_EXIT
        /// </summary>
        private void M_PH002_3010_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_3010_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_3010_EXIT") { M_PH002_4000_FIRST_1_LETTER(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_4000_FIRST_1_LETTER
        /// </summary>
        private void M_PH002_4000_FIRST_1_LETTER(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR 1ST LETTER OF NAME                     *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_CF1_INDXX.IsGreaterThan(26)))                                                        //COBOL==> PERFORM PH002-4010-FIRST-1 THRU PH002-4010-EXIT UNTIL PH-CF1-INDXX > 26.
            {
                M_PH002_4010_FIRST_1("M_PH002_4010_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnMethod != "" && returnMethod != "M_PH002_4000_FIRST_1_LETTER") { M_PH002_4000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_4000_EXIT
        /// </summary>
        private void M_PH002_4000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_4000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_4000_EXIT") { M_PH002_4010_FIRST_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_4010_FIRST_1
        /// </summary>
        private void M_PH002_4010_FIRST_1(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST LETTER OF NAME                   *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPH1[WS.PH_CF1_INDEX.AsInt()].IsEqualTo(WS.PH_ONE_LETTER))                               //COBOL==> IF PH-ALPH1 ( PH-CF1-INDEX ) = PH-ONE-LETTER
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUM1[WS.PH_CF1_INDEX.AsInt()]);                                            //COBOL==> MOVE PH-NUM1 ( PH-CF1-INDEX ) TO PH-HIT
                WS.PH_CF1_INDXX.SetValue(27);                                                                       //COBOL==> MOVE 27 TO PH-CF1-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CF1_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CF1-INDXX
                WS.PH_CF1_INDEX.Add(1);                                                                             //COBOL==> SET PH-CF1-INDEX UP BY 1.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_4010_FIRST_1") { M_PH002_4010_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_4010_EXIT
        /// </summary>
        private void M_PH002_4010_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_4010_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_4010_EXIT") { M_PH002_2900_BUILD_3_2_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2900_BUILD_3_2_1
        /// </summary>
        private void M_PH002_2900_BUILD_3_2_1(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     SETS UP THE 3 LETTER FIELD                                 *
            //COMMENT: ---------------------------------------------------------------*
            M_PH002_2901_BUILD_2_1("M_PH002_2901_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PH002-2901-BUILD-2-1 THRU PH002-2901-EXIT.
            WS.PH_FNTIC_C2.SetValue(2 + WS.PH_FNTIC_C3.AsDecimal());                                            //COBOL==> ADD 2 PH-FNTIC-C3 GIVING PH-FNTIC-C2.
            WS.PH_LETTERS_3[3].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C2 ) TO PH-LETTERS-3 ( 3 ) .
            if (returnMethod != "" && returnMethod != "M_PH002_2900_BUILD_3_2_1") { M_PH002_2900_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2900_EXIT
        /// </summary>
        private void M_PH002_2900_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2900_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2900_EXIT") { M_PH002_2901_BUILD_2_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2901_BUILD_2_1
        /// </summary>
        private void M_PH002_2901_BUILD_2_1(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    SETS UP FIELDS TO CHECK 2 LETTERS AND 1 LETTER              *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_LETTERS_3[1].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C3.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C3 ) TO PH-LETTERS-3 ( 1 ) .
            WS.PH_FNTIC_C2.SetValue(1 + WS.PH_FNTIC_C3.AsDecimal());                                            //COBOL==> ADD 1 PH-FNTIC-C3 GIVING PH-FNTIC-C2.
            WS.PH_LETTERS_3[2].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C2 ) TO PH-LETTERS-3 ( 2 ) .
            WS.PH_LETTERS_3[3].SetValueWithSpaces();                                                            //COBOL==> MOVE SPACE TO PH-LETTERS-3 ( 3 ) .
            WS.PH_TWO_LETTERS.SetValue(WS.PH_THREE_LETTERS);                                                    //COBOL==> MOVE PH-THREE-LETTERS TO PH-TWO-LETTERS.
            WS.PH_ONE_LETTER.SetValue(WS.PH_THREE_LETTERS);                                                     //COBOL==> MOVE PH-THREE-LETTERS TO PH-ONE-LETTER.
            if (returnMethod != "" && returnMethod != "M_PH002_2901_BUILD_2_1") { M_PH002_2901_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2901_EXIT
        /// </summary>
        private void M_PH002_2901_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2901_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2901_EXIT") { M_PH002_2902_REM_TWO(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2902_REM_TWO
        /// </summary>
        private void M_PH002_2902_REM_TWO(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    SEARCHES REMAINING 2 LETTER TABLE                           *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPHR2[WS.PH_CR2_INDEX.AsInt()].IsEqualTo(WS.PH_TWO_LETTERS))                             //COBOL==> IF PH-ALPHR2 ( PH-CR2-INDEX ) = PH-TWO-LETTERS
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUMR2[WS.PH_CR2_INDEX.AsInt()]);                                           //COBOL==> MOVE PH-NUMR2 ( PH-CR2-INDEX ) TO PH-HIT
                WS.PH_CR2_INDXX.SetValue(10);                                                                       //COBOL==> MOVE 10 TO PH-CR2-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CR2_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CR2-INDXX
                WS.PH_CR2_INDEX.Add(1);                                                                             //COBOL==> SET PH-CR2-INDEX UP BY 1.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2902_REM_TWO") { M_PH002_2902_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2902_EXIT
        /// </summary>
        private void M_PH002_2902_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2902_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2902_EXIT") { M_PH002_2903_REM_ONE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2903_REM_ONE
        /// </summary>
        private void M_PH002_2903_REM_ONE(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     SEARCHES REMAINING 1 LETTER TABLE                          *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPHR1[WS.PH_CR1_INDEX.AsInt()].IsEqualTo(WS.PH_ONE_LETTER))                              //COBOL==> IF PH-ALPHR1 ( PH-CR1-INDEX ) = PH-ONE-LETTER
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUMR1[WS.PH_CR1_INDEX.AsInt()]);                                           //COBOL==> MOVE PH-NUMR1 ( PH-CR1-INDEX ) TO PH-HIT
                WS.PH_CR1_INDXX.SetValue(19);                                                                       //COBOL==> MOVE 19 TO PH-CR1-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CR1_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CR1-INDXX
                WS.PH_CR1_INDEX.Add(1);                                                                             //COBOL==> SET PH-CR1-INDEX UP BY 1.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2903_REM_ONE") { M_PH002_2903_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2903_EXIT
        /// </summary>
        private void M_PH002_2903_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2903_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2903_EXIT") { M_PH003_0000_CRUNCH_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_0000_CRUNCH_NAME
        /// </summary>
        /// <remarks>
        ///COMMENT: ********************************************
        ///COMMENT: ***  THIS IS THE END OF MODULE SWAPH002   **
        ///COMMENT: ********************************************
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH003                                       *
        ///COMMENT:   DESCRIPTION:  REMOVE DUPLICATE LETTERS AND EMBEDDED BLANKS   *
        ///COMMENT:                 AND SPECIAL CHARACTERS (INCLUDING NUMBERS).    *
        ///COMMENT:                 ALSO REMOVE ANY NAME SUFFIX (JR, SR, ETC).     *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:  12/12/03 PAM LEAK I21982 UPDATE PHOENTIC SEARCH TO INCLUDE    *
        ///COMMENT:                           SUFFIX I,III,V,VI,VII,VIII,DR,RN,MD, *
        ///COMMENT:                           PHD                                  *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_PH003_0000_CRUNCH_NAME(string returnMethod = "")
        {
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE 0 TO PH-FNTIC-C2.
            M_PH003_0500_REMOVE_SUFFIX("M_PH003_0500_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PH003-0500-REMOVE-SUFFIX THRU PH003-0500-EXIT.
            while (!(WS.PH_FNTIC_C1.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH003-1000-CRUNCH-REM THRU PH003-1000-EXIT UNTIL PH-FNTIC-C1 > 17.
            {
                M_PH003_1000_CRUNCH_REM("M_PH003_1000_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnMethod != "" && returnMethod != "M_PH003_0000_CRUNCH_NAME") { M_PH003_0000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_0000_EXIT
        /// </summary>
        private void M_PH003_0000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH003_0000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH003_0000_EXIT") { M_PH003_0500_REMOVE_SUFFIX(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_0500_REMOVE_SUFFIX
        /// </summary>
        private void M_PH003_0500_REMOVE_SUFFIX(string returnMethod = "")
        {
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " JR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' JR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",JR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',JR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " SR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' SR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",SR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',SR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " DR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' DR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",DR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',DR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " RN", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' RN' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",RN", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',RN' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " MD", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' MD' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",MD", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',MD' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " PHD", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' PHD' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",PHD", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',PHD' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " III", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' III' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",III", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',III' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " II", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' II' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",II", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',II' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " I", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' I' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",I", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',I' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " IV", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' IV' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",IV", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',IV' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VIII", "     ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VIII' BY '     '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VIII", "     ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VIII' BY '     '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VII", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VII' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VII", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VII' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VI", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VI' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VI", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VI' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " V", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' V' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",V", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',V' BY '  '.
            if (returnMethod != "" && returnMethod != "M_PH003_0500_REMOVE_SUFFIX") { M_PH003_0500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_0500_EXIT
        /// </summary>
        private void M_PH003_0500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH003_0500_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH003_0500_EXIT") { M_PH003_1000_CRUNCH_REM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1000_CRUNCH_REM
        /// </summary>
        private void M_PH003_1000_CRUNCH_REM(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    REMOVE BLANKS, DOUBLE LETTERS, NUMBERS, AND SPECIAL         *
            //COMMENT:    CHARACTERS.                                                 *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C1.IsEqualTo(17))                                                                   //COBOL==> IF PH-FNTIC-C1 = 17
            {
                M_PH003_1020_CHECK_SPACE("M_PH003_1020_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH003-1020-CHECK-SPACE THRU PH003-1020-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_CX.SetValue(1 + WS.PH_FNTIC_C1.AsDecimal());                                            //COBOL==> ADD 1 PH-FNTIC-C1 GIVING PH-FNTIC-CX
                M_PH003_1010_CHECK_DUP("M_PH003_1010_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PH003-1010-CHECK-DUP THRU PH003-1010-EXIT.
            }
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (returnMethod != "" && returnMethod != "M_PH003_1000_CRUNCH_REM") { M_PH003_1000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1000_EXIT
        /// </summary>
        private void M_PH003_1000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH003_1000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH003_1000_EXIT") { M_PH003_1010_CHECK_DUP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1010_CHECK_DUP
        /// </summary>
        private void M_PH003_1010_CHECK_DUP(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CHECK FOR DUPLICATE LETTERS                                 *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_CRNCH[WS.PH_FNTIC_CX.AsInt()]))         //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) = PH-L-CRNCH ( PH-FNTIC-CX )
            {
                goto EndOfSentence_5;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PH003_1020_CHECK_SPACE("M_PH003_1020_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH003-1020-CHECK-SPACE THRU PH003-1020-EXIT.
            }
        EndOfSentence_5:;
            if (returnMethod != "" && returnMethod != "M_PH003_1010_CHECK_DUP") { M_PH003_1010_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1010_EXIT
        /// </summary>
        private void M_PH003_1010_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH003_1010_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH003_1010_EXIT") { M_PH003_1020_CHECK_SPACE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1020_CHECK_SPACE
        /// </summary>
        private void M_PH003_1020_CHECK_SPACE(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CHECK A SPACE, A NUMBER, OR A SPECIAL CHARACTER IN          *
            //COMMENT:    A GIVEN POSITION.                                           *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) = SPACE
            {
                goto EndOfSentence_6;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsAlphabetic())                                           //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) IS ALPHABETIC
                {
                    WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                    WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()]);              //COBOL==> MOVE PH-L-CRNCH ( PH-FNTIC-C1 ) TO PH-L-REDUC ( PH-FNTIC-C2 )
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    // next                                                                                             //COBOL==> NEXT SENTENCE.
                }
            }
        EndOfSentence_6:;
            if (returnMethod != "" && returnMethod != "M_PH003_1020_CHECK_SPACE") { M_PH003_1020_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1020_EXIT
        /// </summary>
        private void M_PH003_1020_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH003_1020_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH003_1020_EXIT") { M_PH004_0000_LIKENESS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_0000_LIKENESS
        /// </summary>
        /// <remarks>
        ///COMMENT: ********************************
        ///COMMENT: ***   END MODULE SWAPH003   ****
        ///COMMENT: ********************************
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH004                                       *
        ///COMMENT:   DESCRIPTION:  COMPUTE PERCENTAGE OF LIKENESS BETWEEN THE     *
        ///COMMENT:                 INQUIRY NAME AND THE DATABASE NAME. BOTH NAMES *
        ///COMMENT:                 HAVE HAD DUPLICATE LETTERS AND EMBEDDED BLANKS *
        ///COMMENT:                 REMOVED.                                       *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:                                                                *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_PH004_0000_LIKENESS(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      REMOVE DUPLICATE LETTERS AND EMBEDDED BLANKS FROM THE     *
            //COMMENT:      DATABASE NAME.                                            *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_NAME_CRUNCH_INQ.SetValue(WS.PH_NAME_RAW_MSTR);                                                //COBOL==> MOVE PH-NAME-RAW-MSTR TO PH-NAME-CRUNCH-INQ.
            WS.PH_NAME_REDUC_INQ.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO PH-NAME-REDUC-INQ.
            M_PH003_0000_CRUNCH_NAME("M_PH003_0000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH003-0000-CRUNCH-NAME THRU PH003-0000-EXIT.
                                                                                                                  //COMMENT: ---------------------------------------------------------------*
                                                                                                                  //COMMENT:      INITIALIZE FIELDS.                                        *
                                                                                                                  //COMMENT: ---------------------------------------------------------------*
            WS.PH_COUNT_UP.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-COUNT-UP.
            WS.PH_DEGREE.SetValueWithZeroes();                                                                  //COBOL==> MOVE ZEROS TO PH-DEGREE.
            WS.PH_L1.SetValueWithZeroes();                                                                      //COBOL==> MOVE ZEROS TO PH-L1.
            WS.PH_COUNT_INQUIRY.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO PH-COUNT-INQUIRY.
            WS.PH_COUNT_DB.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-COUNT-DB.
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                M_PH004_1000_CHECK_DEGREE("M_PH004_1000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT
                M_PH004_0000_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-0000-EXIT.
            }
            WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                M_PH004_1000_CHECK_DEGREE("M_PH004_1000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT
                M_PH004_0000_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-0000-EXIT.
            }
            M_PH004_1000_CHECK_DEGREE("M_PH004_1000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT.
            if (returnMethod != "" && returnMethod != "M_PH004_0000_LIKENESS") { M_PH004_0000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_0000_EXIT
        /// </summary>
        private void M_PH004_0000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH004_0000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH004_0000_EXIT") { M_PH004_1000_CHECK_DEGREE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1000_CHECK_DEGREE
        /// </summary>
        private void M_PH004_1000_CHECK_DEGREE(string returnMethod = "")
        {
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            while (!(WS.PH_L1.IsEqualTo(1)))                                                                    //COBOL==> PERFORM PH004-1100-PROCESS-DEGREE THRU PH004-1100-EXIT UNTIL PH-L1 = 1.
            {
                M_PH004_1100_PROCESS_DEGREE("M_PH004_1100_EXIT"); if (Control.ExitProgram) { return; }
            }
            WS.PH_L1.SetValueWithZeroes();                                                                      //COBOL==> MOVE 0 TO PH-L1.
            WS.PH_FNTIC_C1.SetValueWithZeroes();                                                                //COBOL==> MOVE 0 TO PH-FNTIC-C1.
            while (!(WS.PH_L1.IsEqualTo(1)))                                                                    //COBOL==> PERFORM PH004-1200-COUNT-DIGITS THRU PH004-1200-EXIT UNTIL PH-L1 = 1.
            {
                M_PH004_1200_COUNT_DIGITS("M_PH004_1200_EXIT"); if (Control.ExitProgram) { return; }
            }
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COMPUTE DEGREE OF LIKENESS.                               *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_COUNT_INQUIRY.IsGreaterThan(WS.PH_COUNT_DB))                                              //COBOL==> IF PH-COUNT-INQUIRY > PH-COUNT-DB
            {
                WS.PH_DEGREE.SetValue(Math.Round(WS.PH_COUNT_UP.AsDecimal() / WS.PH_COUNT_INQUIRY.AsDecimal(), WS.PH_DEGREE.DecimalDigits, MidpointRounding.AwayFromZero));  //COBOL==> DIVIDE PH-COUNT-UP BY PH-COUNT-INQUIRY GIVING PH-DEGREE ROUNDED
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_DEGREE.SetValue(Math.Round(WS.PH_COUNT_UP.AsDecimal() / WS.PH_COUNT_DB.AsDecimal(), WS.PH_DEGREE.DecimalDigits, MidpointRounding.AwayFromZero));  //COBOL==> DIVIDE PH-COUNT-UP BY PH-COUNT-DB GIVING PH-DEGREE ROUNDED.
            }
            if (returnMethod != "" && returnMethod != "M_PH004_1000_CHECK_DEGREE") { M_PH004_1000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1000_EXIT
        /// </summary>
        private void M_PH004_1000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH004_1000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH004_1000_EXIT") { M_PH004_1100_PROCESS_DEGREE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1100_PROCESS_DEGREE
        /// </summary>
        private void M_PH004_1100_PROCESS_DEGREE(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COMPARE LETTERS IN THE INQUIRY NAME TO LETTERS IN THE     *
            //COMMENT:      DATABASE NAME.                                            *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C1.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C1 > 17
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C1);                                                            //COBOL==> MOVE PH-FNTIC-C1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = SPACE
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
            }
            if (WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C2 ) = SPACE
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
            if (WS.PH_FNTIC_C2.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C2 > 17
            {
                WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C2.AsInt() - 2);                                                //COBOL==> SUBTRACT 2 FROM PH-FNTIC-C2
                if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
                {
                    WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                    WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                    M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                    M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
                }
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C2.AsInt() - 2);                                                //COBOL==> SUBTRACT 2 FROM PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            }
            if (returnMethod != "" && returnMethod != "M_PH004_1100_PROCESS_DEGREE") { M_PH004_1100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1100_EXIT
        /// </summary>
        private void M_PH004_1100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH004_1100_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH004_1100_EXIT") { M_PH004_1200_COUNT_DIGITS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1200_COUNT_DIGITS
        /// </summary>
        private void M_PH004_1200_COUNT_DIGITS(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COUNT THE DIGITS IN THE INQUIRY AND DATABASE NAMES.       *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (WS.PH_FNTIC_C1.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C1 > 17
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                M_PH004_1200_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1200-EXIT.
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = SPACES
            {
                if (WS.PH_L_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C1 ) = SPACES
                {
                    WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.PH_COUNT_DB.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-DB
                }                                                                                                   //COBOL==> ELSE
            }
            else
            {
                WS.PH_COUNT_INQUIRY.Add(1);                                                                         //COBOL==> ADD 1 TO PH-COUNT-INQUIRY
                if (WS.PH_L_REDUC[WS.PH_FNTIC_C1.AsInt()].IsGreaterThan(SPACES))                                    //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C1 ) > SPACES
                {
                    WS.PH_COUNT_DB.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-DB.
                }
            }
            if (returnMethod != "" && returnMethod != "M_PH004_1200_COUNT_DIGITS") { M_PH004_1200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1200_EXIT
        /// </summary>
        private void M_PH004_1200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH004_1200_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH004_1200_EXIT") { M_PARA_2112890412_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_2112890412_INIT
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************
        ///COMMENT: **  END OF SWAPH004  ***
        ///COMMENT: ************************
        /// </remarks>
        private void M_PARA_2112890412_INIT(string returnMethod = "")
        {
            LS.EXPORT_0004EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0004EV .
            if (returnMethod != "" && returnMethod != "M_PARA_2112890412_INIT") { M_PARA_2112890412_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_2112890412_INIT_EXIT
        /// </summary>
        private void M_PARA_2112890412_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_2112890412_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
