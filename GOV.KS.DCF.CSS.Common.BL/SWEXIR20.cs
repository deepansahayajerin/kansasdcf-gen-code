#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:51:23 PM
   **        *   FROM COBOL PGM   :  SWEXIR20
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                   INFORMATION ENGINEERING FACILITY (TM)
                       TEXAS INSTRUMENTS INC.
                COPYRIGHT (C) TEXAS INSTRUMENTS INC. 1997
       NAME: EAB_READ_ADABAS_ADDRESS          DATE: 97/07/09
       TARGET OS:   MVS                       TIME: 15:50:30
       TARGET DBMS: DB2                       USER: SWMTSXC
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
   **************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Control.CICS;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXIR20_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXIR20_ws_WorkingStorage";
            internal const string FUNC_0544741180_ESC_FLAG = "FUNC_0544741180_ESC_FLAG";
            internal const string EXTERNAL_ACTION_BLOCK_WS = "EXTERNAL_ACTION_BLOCK_WS";
            internal const string SRADALNK = "SRADALNK";
            internal const string SRMODLNK = "SRMODLNK";
            internal const string MV_ABEND_FIELDS = "MV_ABEND_FIELDS";
            internal const string MV_ABEND_TYPE = "MV_ABEND_TYPE";
            internal const string MV_ABEND_TYPE_NONE = "MV_ABEND_TYPE_NONE";
            internal const string MV_ABEND_TYPE_ADABAS = "MV_ABEND_TYPE_ADABAS";
            internal const string MV_ABEND_TYPE_CICS = "MV_ABEND_TYPE_CICS";
            internal const string MV_ABEND_ADABAS = "MV_ABEND_ADABAS";
            internal const string MV_ADA_FILE_NUMBER = "MV_ADA_FILE_NUMBER";
            internal const string MV_ADA_FILE_ACTION = "MV_ADA_FILE_ACTION";
            internal const string MV_ADA_RESPONSE_CD = "MV_ADA_RESPONSE_CD";
            internal const string MV_ABEND_CICS = "MV_ABEND_CICS";
            internal const string MV_CICS_RESOURCE_NM = "MV_CICS_RESOURCE_NM";
            internal const string MV_CICS_FUNCTION_CD = "MV_CICS_FUNCTION_CD";
            internal const string MV_CICS_RESPONSE_CD = "MV_CICS_RESPONSE_CD";
            internal const string MC_PART_TBL_0_MAX = "MC_PART_TBL_0_MAX";
            internal const string MC_PARTICIPATION_TABLE_0 = "MC_PARTICIPATION_TABLE_0";
            internal const string MC_PART_TBL_0_ENTRY = "MC_PART_TBL_0_ENTRY";
            internal const string MC_PART_TBL_0_X2 = "MC_PART_TBL_0_X2";
            internal const string MC_PART_TBL_1_MAX = "MC_PART_TBL_1_MAX";
            internal const string MC_PARTICIPATION_TABLE_1 = "MC_PARTICIPATION_TABLE_1";
            internal const string MC_PART_TBL_1_ENTRY = "MC_PART_TBL_1_ENTRY";
            internal const string MC_PART_TBL_1_92 = "MC_PART_TBL_1_92";
            internal const string MC_PART_TBL_2_MAX = "MC_PART_TBL_2_MAX";
            internal const string MC_PARTICIPATION_TABLE_2 = "MC_PARTICIPATION_TABLE_2";
            internal const string MC_PART_TBL_2_ENTRY = "MC_PART_TBL_2_ENTRY";
            internal const string MC_PART_TBL_2_92 = "MC_PART_TBL_2_92";
            internal const string MC_PART_TBL_3_MAX = "MC_PART_TBL_3_MAX";
            internal const string MC_PARTICIPATION_TABLE_3 = "MC_PARTICIPATION_TABLE_3";
            internal const string MC_PART_TBL_3_ENTRY = "MC_PART_TBL_3_ENTRY";
            internal const string MC_PART_TBL_3_92 = "MC_PART_TBL_3_92";
            internal const string MC_DATE_VALUES = "MC_DATE_VALUES";
            internal const string JAN_01 = "JAN_01";
            internal const string FEB_02 = "FEB_02";
            internal const string MAR_03 = "MAR_03";
            internal const string APR_04 = "APR_04";
            internal const string MAY_05 = "MAY_05";
            internal const string JUN_06 = "JUN_06";
            internal const string JUL_07 = "JUL_07";
            internal const string AUG_08 = "AUG_08";
            internal const string SEP_09 = "SEP_09";
            internal const string OCT_10 = "OCT_10";
            internal const string NOV_11 = "NOV_11";
            internal const string DEC_12 = "DEC_12";
            internal const string MC_DATE_ENTRY = "MC_DATE_ENTRY";
            internal const string MC_DATE_MM_MINUS_2 = "MC_DATE_MM_MINUS_2";
            internal const string MC_DATE_YY_MINUS_2 = "MC_DATE_YY_MINUS_2";
            internal const string MC_DATE_MM_MINUS_6 = "MC_DATE_MM_MINUS_6";
            internal const string MC_DATE_YY_MINUS_6 = "MC_DATE_YY_MINUS_6";
            internal const string MV_BENEFIT_DATES = "MV_BENEFIT_DATES";
            internal const string MV_BENEFIT_DATE = "MV_BENEFIT_DATE";
            internal const string MV_BENEFIT_DATE_42 = "MV_BENEFIT_DATE_42";
            internal const string MV_BENEFIT_CCYY = "MV_BENEFIT_CCYY";
            internal const string MV_BENEFIT_MM = "MV_BENEFIT_MM";
            internal const string MV_BENEFIT_CCYYMM = "MV_BENEFIT_CCYYMM";
            internal const string MC_BENEFIT_DATE_INDEX = "MC_BENEFIT_DATE_INDEX";
            internal const string MC_BENEFIT_DATE_MAX = "MC_BENEFIT_DATE_MAX";
            internal const string MV_BENEFIT_DATE_PTR = "MV_BENEFIT_DATE_PTR";
            internal const string MC_BENEFIT_DATE_PROCESS_TABLE = "MC_BENEFIT_DATE_PROCESS_TABLE";
            internal const string MC_BENE_DT_PROC_ENTRY = "MC_BENE_DT_PROC_ENTRY";
            internal const string MC_BENE_DT_PROC_PTR = "MC_BENE_DT_PROC_PTR";
            internal const string MV_ABS_TIME = "MV_ABS_TIME";
            internal const string MV_CCYYMMDD_X8 = "MV_CCYYMMDD_X8";
            internal const string MV_CC = "MV_CC";
            internal const string MV_YYMM_X4 = "MV_YYMM_X4";
            internal const string MV_YY = "MV_YY";
            internal const string MV_MM = "MV_MM";
            internal const string MV_CCYYMM = "MV_CCYYMM";
            internal const string MV_CCYY = "MV_CCYY";
            internal const string MV_COMPLEMENT_DATE = "MV_COMPLEMENT_DATE";
            internal const string MV_WRK_PTR = "MV_WRK_PTR";
            internal const string MV_PRT_PTR = "MV_PRT_PTR";
            internal const string MV_RTE_PTR = "MV_RTE_PTR";
            internal const string MV_RTE_PTR_SET = "MV_RTE_PTR_SET";
            internal const string MV_CLIENT_NUMBER_X10 = "MV_CLIENT_NUMBER_X10";
            internal const string MV_CLIENT_NUMBER = "MV_CLIENT_NUMBER";
            internal const string MV_ADDRESS_REQUEST = "MV_ADDRESS_REQUEST";
            internal const string MV_ADDR_REQ_RES = "MV_ADDR_REQ_RES";
            internal const string MV_ADDR_REQ_MAIL = "MV_ADDR_REQ_MAIL";
            internal const string MV_ADDRESS_SOURCE = "MV_ADDRESS_SOURCE";
            internal const string MV_ADDRESS_RESIDENCE = "MV_ADDRESS_RESIDENCE";
            internal const string MV_ADDRESS_MAILING = "MV_ADDRESS_MAILING";
            internal const string MV_COUNTY_ABBR = "MV_COUNTY_ABBR";
            internal const string MV_ADDRESS = "MV_ADDRESS";
            internal const string MV_STREET1 = "MV_STREET1";
            internal const string MV_STREET2 = "MV_STREET2";
            internal const string MV_CITY = "MV_CITY";
            internal const string MV_STATE = "MV_STATE";
            internal const string MV_ZIP_CODE = "MV_ZIP_CODE";
            internal const string MV_ZIP_CODE_5_X5 = "MV_ZIP_CODE_5_X5";
            internal const string MV_ZIP_CODE_5 = "MV_ZIP_CODE_5";
            internal const string MV_ZIP_CODE_4_X4 = "MV_ZIP_CODE_4_X4";
            internal const string MV_ZIP_CODE_4 = "MV_ZIP_CODE_4";
            internal const string SUBC = "SUBC";
            internal const string WS_CLIENT_INFO = "WS_CLIENT_INFO";
            internal const string WS_CLIENT_ID = "WS_CLIENT_ID";
            internal const string WS_RELATIONSHIP = "WS_RELATIONSHIP";
            internal const string WS_KAECSES_REF_CASE = "WS_KAECSES_REF_CASE";
            internal const string DCLKSD_ADDRESS = "DCLKSD_ADDRESS";
            internal const string ADDR_ADDRESS_TYPE = "ADDR_ADDRESS_TYPE";
            internal const string ADDR_STREET1 = "ADDR_STREET1";
            internal const string ADDR_STREET2 = "ADDR_STREET2";
            internal const string ADDR_CITY = "ADDR_CITY";
            internal const string ADDR_STATE = "ADDR_STATE";
            internal const string ADDR_ZIP_CODE = "ADDR_ZIP_CODE";
            internal const string ADDR_ZIP_PLUS_4 = "ADDR_ZIP_PLUS_4";
            internal const string ADDR_COUNTY_CODE = "ADDR_COUNTY_CODE";
            internal const string ADDR_EFFECTIVE_DATE = "ADDR_EFFECTIVE_DATE";
            internal const string ADDR_CREATED_TIMESTAMP = "ADDR_CREATED_TIMESTAMP";
            internal const string ADDR_CREATED_BY = "ADDR_CREATED_BY";
            internal const string ADDR_LAST_MODIFIED_BY = "ADDR_LAST_MODIFIED_BY";
            internal const string ADDR_LAST_MODIFIED_TMST = "ADDR_LAST_MODIFIED_TMST";
            internal const string ADDR_FK_CSB_CASE_NO = "ADDR_FK_CSB_CASE_NO";
            internal const string DCLKSD_BENEFITS = "DCLKSD_BENEFITS";
            internal const string BEN_BUDGETING_METHOD = "BEN_BUDGETING_METHOD";
            internal const string BEN_BENEFIT_TYPE = "BEN_BENEFIT_TYPE";
            internal const string BEN_PAYEE_STREET1 = "BEN_PAYEE_STREET1";
            internal const string BEN_PAYEE_STREET2 = "BEN_PAYEE_STREET2";
            internal const string BEN_PAYEE_CITY = "BEN_PAYEE_CITY";
            internal const string BEN_PAYEE_STATE = "BEN_PAYEE_STATE";
            internal const string BEN_PAYEE_ZIP_CODE = "BEN_PAYEE_ZIP_CODE";
            internal const string BEN_PAYEE_ZIP_PLUS_4 = "BEN_PAYEE_ZIP_PLUS_4";
            internal const string BEN_PAYMENT_START_DATE = "BEN_PAYMENT_START_DATE";
            internal const string BEN_PAYMENT_END_DATE = "BEN_PAYMENT_END_DATE";
            internal const string BEN_COUNTABLE_INCOME = "BEN_COUNTABLE_INCOME";
            internal const string BEN_DEPENDENT_CARE = "BEN_DEPENDENT_CARE";
            internal const string BEN_RECOUPED_AMT = "BEN_RECOUPED_AMT";
            internal const string BEN_NUM_OF_CHILDREN = "BEN_NUM_OF_CHILDREN";
            internal const string BEN_NUMBER_IN_HH = "BEN_NUMBER_IN_HH";
            internal const string BEN_ISSUED_DATE = "BEN_ISSUED_DATE";
            internal const string BEN_ISSUED_AMT = "BEN_ISSUED_AMT";
            internal const string BEN_ISSUANCE_TYPE = "BEN_ISSUANCE_TYPE";
            internal const string BEN_HOUSEHOLD_SIZE = "BEN_HOUSEHOLD_SIZE";
            internal const string BEN_HOUSEHOLD_TYPE = "BEN_HOUSEHOLD_TYPE";
            internal const string BEN_CSE_PROC_FLAG = "BEN_CSE_PROC_FLAG";
            internal const string BEN_BENEFIT_AMT = "BEN_BENEFIT_AMT";
            internal const string BEN_THIRTY_ONE_THIRD = "BEN_THIRTY_ONE_THIRD";
            internal const string BEN_THIRTY_DISREGARD = "BEN_THIRTY_DISREGARD";
            internal const string BEN_CREATED_TIMESTAMP = "BEN_CREATED_TIMESTAMP";
            internal const string BEN_CREATED_BY = "BEN_CREATED_BY";
            internal const string BEN_LAST_MODIFIED_BY = "BEN_LAST_MODIFIED_BY";
            internal const string BEN_LAST_MODIFIED_TMST = "BEN_LAST_MODIFIED_TMST";
            internal const string BEN_FK_CSB_CASE_NO = "BEN_FK_CSB_CASE_NO";
            internal const string BEN_FK_PGB_PROG_TYPE = "BEN_FK_PGB_PROG_TYPE";
            internal const string BEN_FK_PMO_PROG_SUBT = "BEN_FK_PMO_PROG_SUBT";
            internal const string BEN_FK_PMO_PROG_BEN_MO = "BEN_FK_PMO_PROG_BEN_MO";
            internal const string DCLKSD_CASE_COMP = "DCLKSD_CASE_COMP";
            internal const string CC_BENEFIT_MONTH = "CC_BENEFIT_MONTH";
            internal const string CC_PARTICIPATION_CODE = "CC_PARTICIPATION_CODE";
            internal const string CC_MEDICAL_SUBTYPE = "CC_MEDICAL_SUBTYPE";
            internal const string CC_POSITION_ON_APP = "CC_POSITION_ON_APP";
            internal const string CC_CASE_OPEN_DT = "CC_CASE_OPEN_DT";
            internal const string CC_CASE_CLOSE_DT = "CC_CASE_CLOSE_DT";
            internal const string CC_CREATED_TIMESTAMP = "CC_CREATED_TIMESTAMP";
            internal const string CC_CREATED_BY = "CC_CREATED_BY";
            internal const string CC_LAST_MODIFIED_BY = "CC_LAST_MODIFIED_BY";
            internal const string CC_LAST_MODIFIED_TMST = "CC_LAST_MODIFIED_TMST";
            internal const string CC_FK_CLB_CLIENT_NO = "CC_FK_CLB_CLIENT_NO";
            internal const string CC_FK_CSB_CASE_NO = "CC_FK_CSB_CASE_NO";
            internal const string CC_FK_PGB_PROG_TYPE = "CC_FK_PGB_PROG_TYPE";
            internal const string DCLKSD_CLIENT_BASIC = "DCLKSD_CLIENT_BASIC";
            internal const string CLB_CLIENT_NUMBER = "CLB_CLIENT_NUMBER";
            internal const string CLB_CIS_PREFERRED_ID = "CLB_CIS_PREFERRED_ID";
            internal const string DB2_FIELDS = "DB2_FIELDS";
            internal const string DB2_CLIENT_NUMBER = "DB2_CLIENT_NUMBER";
            internal const string DB2_BENEFIT_MONTH = "DB2_BENEFIT_MONTH";
            internal const string DB2_ADDRESS_TYPE = "DB2_ADDRESS_TYPE";
            internal const string WS_SWITCHES = "WS_SWITCHES";
            internal const string WS_BEN_EOFSW = "WS_BEN_EOFSW";
            internal const string WS_BEN_EOF_NO = "WS_BEN_EOF_NO";
            internal const string WS_BEN_EOF_YES = "WS_BEN_EOF_YES";
            internal const string WS_ADDR_EOFSW = "WS_ADDR_EOFSW";
            internal const string WS_ADDR_EOF_NO = "WS_ADDR_EOF_NO";
            internal const string WS_ADDR_EOF_YES = "WS_ADDR_EOF_YES";
            internal const string WS_CC_EOFSW = "WS_CC_EOFSW";
            internal const string WS_CC_EOF_NO = "WS_CC_EOF_NO";
            internal const string WS_CC_EOF_YES = "WS_CC_EOF_YES";
            internal const string WS_PAR_EOFSW = "WS_PAR_EOFSW";
            internal const string WS_PAR_EOF_NO = "WS_PAR_EOF_NO";
            internal const string WS_PAR_EOF_YES = "WS_PAR_EOF_YES";
            internal const string CONTROL_BLOCK = "CONTROL_BLOCK";
            internal const string COMMAND_CODE = "COMMAND_CODE";
            internal const string COMMAND_ID = "COMMAND_ID";
            internal const string FILE_NUMBER = "FILE_NUMBER";
            internal const string RESPONSE_CODE = "RESPONSE_CODE";
            internal const string ISN = "ISN";
            internal const string ISN_LOWER_LIMIT = "ISN_LOWER_LIMIT";
            internal const string ISN_QUANTITY = "ISN_QUANTITY";
            internal const string FORMAT_BUFFER_LENGTH = "FORMAT_BUFFER_LENGTH";
            internal const string RECORD_BUFFER_LENGTH = "RECORD_BUFFER_LENGTH";
            internal const string SEARCH_BUFFER_LENGTH = "SEARCH_BUFFER_LENGTH";
            internal const string VALUE_BUFFER_LENGTH = "VALUE_BUFFER_LENGTH";
            internal const string ISN_BUFFER_LENGTH = "ISN_BUFFER_LENGTH";
            internal const string COMMAND_OPTION_1 = "COMMAND_OPTION_1";
            internal const string COMMAND_OPTION_2 = "COMMAND_OPTION_2";
            internal const string ADDITIONS_1 = "ADDITIONS_1";
            internal const string ADDITIONS_2 = "ADDITIONS_2";
            internal const string ADDITIONS_3 = "ADDITIONS_3";
            internal const string ADDITIONS_4 = "ADDITIONS_4";
            internal const string COMMAND_TIME = "COMMAND_TIME";
            internal const string USER_AREA = "USER_AREA";
        }
        #endregion

        #region Direct-access element properties
        public IField FUNC_0544741180_ESC_FLAG { get { return GetElementByName<IField>(Names.FUNC_0544741180_ESC_FLAG); } }
        public IGroup EXTERNAL_ACTION_BLOCK_WS { get { return GetElementByName<IGroup>(Names.EXTERNAL_ACTION_BLOCK_WS); } }
        public IField SRADALNK { get { return GetElementByName<IField>(Names.SRADALNK); } }
        public IField SRMODLNK { get { return GetElementByName<IField>(Names.SRMODLNK); } }
        public IGroup MV_ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.MV_ABEND_FIELDS); } }
        public IField MV_ABEND_TYPE { get { return GetElementByName<IField>(Names.MV_ABEND_TYPE); } }
        public ICheckField MV_ABEND_TYPE_NONE { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_NONE); } }
        public ICheckField MV_ABEND_TYPE_ADABAS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_ADABAS); } }
        public ICheckField MV_ABEND_TYPE_CICS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_CICS); } }
        public IGroup MV_ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.MV_ABEND_ADABAS); } }
        public IField MV_ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.MV_ADA_FILE_NUMBER); } }
        public IField MV_ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.MV_ADA_FILE_ACTION); } }
        public IField MV_ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_ADA_RESPONSE_CD); } }
        public IGroup MV_ABEND_CICS { get { return GetElementByName<IGroup>(Names.MV_ABEND_CICS); } }
        public IField MV_CICS_RESOURCE_NM { get { return GetElementByName<IField>(Names.MV_CICS_RESOURCE_NM); } }
        public IField MV_CICS_FUNCTION_CD { get { return GetElementByName<IField>(Names.MV_CICS_FUNCTION_CD); } }
        public IField MV_CICS_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_CICS_RESPONSE_CD); } }
        public IField MC_PART_TBL_0_MAX { get { return GetElementByName<IField>(Names.MC_PART_TBL_0_MAX); } }
        public IGroup MC_PARTICIPATION_TABLE_0 { get { return GetElementByName<IGroup>(Names.MC_PARTICIPATION_TABLE_0); } }
        public IArrayElementAccessor<IGroup> MC_PART_TBL_0_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.MC_PART_TBL_0_ENTRY); } }
        public IArrayElementAccessor<IField> MC_PART_TBL_0_X2 { get { return GetArrayElementAccessor<IField>(Names.MC_PART_TBL_0_X2); } }
        public IField MC_PART_TBL_1_MAX { get { return GetElementByName<IField>(Names.MC_PART_TBL_1_MAX); } }
        public IGroup MC_PARTICIPATION_TABLE_1 { get { return GetElementByName<IGroup>(Names.MC_PARTICIPATION_TABLE_1); } }
        public IArrayElementAccessor<IGroup> MC_PART_TBL_1_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.MC_PART_TBL_1_ENTRY); } }
        public IArrayElementAccessor<IField> MC_PART_TBL_1_92 { get { return GetArrayElementAccessor<IField>(Names.MC_PART_TBL_1_92); } }
        public IField MC_PART_TBL_2_MAX { get { return GetElementByName<IField>(Names.MC_PART_TBL_2_MAX); } }
        public IGroup MC_PARTICIPATION_TABLE_2 { get { return GetElementByName<IGroup>(Names.MC_PARTICIPATION_TABLE_2); } }
        public IArrayElementAccessor<IGroup> MC_PART_TBL_2_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.MC_PART_TBL_2_ENTRY); } }
        public IArrayElementAccessor<IField> MC_PART_TBL_2_92 { get { return GetArrayElementAccessor<IField>(Names.MC_PART_TBL_2_92); } }
        public IField MC_PART_TBL_3_MAX { get { return GetElementByName<IField>(Names.MC_PART_TBL_3_MAX); } }
        public IGroup MC_PARTICIPATION_TABLE_3 { get { return GetElementByName<IGroup>(Names.MC_PARTICIPATION_TABLE_3); } }
        public IArrayElementAccessor<IGroup> MC_PART_TBL_3_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.MC_PART_TBL_3_ENTRY); } }
        public IArrayElementAccessor<IField> MC_PART_TBL_3_92 { get { return GetArrayElementAccessor<IField>(Names.MC_PART_TBL_3_92); } }
        public IGroup MC_DATE_VALUES { get { return GetElementByName<IGroup>(Names.MC_DATE_VALUES); } }
        public IField JAN_01 { get { return GetElementByName<IField>(Names.JAN_01); } }
        public IField FEB_02 { get { return GetElementByName<IField>(Names.FEB_02); } }
        public IField MAR_03 { get { return GetElementByName<IField>(Names.MAR_03); } }
        public IField APR_04 { get { return GetElementByName<IField>(Names.APR_04); } }
        public IField MAY_05 { get { return GetElementByName<IField>(Names.MAY_05); } }
        public IField JUN_06 { get { return GetElementByName<IField>(Names.JUN_06); } }
        public IField JUL_07 { get { return GetElementByName<IField>(Names.JUL_07); } }
        public IField AUG_08 { get { return GetElementByName<IField>(Names.AUG_08); } }
        public IField SEP_09 { get { return GetElementByName<IField>(Names.SEP_09); } }
        public IField OCT_10 { get { return GetElementByName<IField>(Names.OCT_10); } }
        public IField NOV_11 { get { return GetElementByName<IField>(Names.NOV_11); } }
        public IField DEC_12 { get { return GetElementByName<IField>(Names.DEC_12); } }
        public IArrayElementAccessor<IGroup> MC_DATE_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.MC_DATE_ENTRY); } }
        public IArrayElementAccessor<IField> MC_DATE_MM_MINUS_2 { get { return GetArrayElementAccessor<IField>(Names.MC_DATE_MM_MINUS_2); } }
        public IArrayElementAccessor<IField> MC_DATE_YY_MINUS_2 { get { return GetArrayElementAccessor<IField>(Names.MC_DATE_YY_MINUS_2); } }
        public IArrayElementAccessor<IField> MC_DATE_MM_MINUS_6 { get { return GetArrayElementAccessor<IField>(Names.MC_DATE_MM_MINUS_6); } }
        public IArrayElementAccessor<IField> MC_DATE_YY_MINUS_6 { get { return GetArrayElementAccessor<IField>(Names.MC_DATE_YY_MINUS_6); } }
        public IGroup MV_BENEFIT_DATES { get { return GetElementByName<IGroup>(Names.MV_BENEFIT_DATES); } }
        public IGroup MV_BENEFIT_DATE { get { return GetElementByName<IGroup>(Names.MV_BENEFIT_DATE); } }
        public IArrayElementAccessor<IGroup> MV_BENEFIT_DATE_42 { get { return GetArrayElementAccessor<IGroup>(Names.MV_BENEFIT_DATE_42); } }
        public IArrayElementAccessor<IField> MV_BENEFIT_CCYY { get { return GetArrayElementAccessor<IField>(Names.MV_BENEFIT_CCYY); } }
        public IArrayElementAccessor<IField> MV_BENEFIT_MM { get { return GetArrayElementAccessor<IField>(Names.MV_BENEFIT_MM); } }
        public IArrayElementAccessor<IField> MV_BENEFIT_CCYYMM { get { return GetArrayElementAccessor<IField>(Names.MV_BENEFIT_CCYYMM); } }
        public IField MC_BENEFIT_DATE_INDEX { get { return GetElementByName<IField>(Names.MC_BENEFIT_DATE_INDEX); } }
        public IField MC_BENEFIT_DATE_MAX { get { return GetElementByName<IField>(Names.MC_BENEFIT_DATE_MAX); } }
        public IField MV_BENEFIT_DATE_PTR { get { return GetElementByName<IField>(Names.MV_BENEFIT_DATE_PTR); } }
        public IGroup MC_BENEFIT_DATE_PROCESS_TABLE { get { return GetElementByName<IGroup>(Names.MC_BENEFIT_DATE_PROCESS_TABLE); } }
        public IArrayElementAccessor<IGroup> MC_BENE_DT_PROC_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.MC_BENE_DT_PROC_ENTRY); } }
        public IArrayElementAccessor<IField> MC_BENE_DT_PROC_PTR { get { return GetArrayElementAccessor<IField>(Names.MC_BENE_DT_PROC_PTR); } }
        public IField MV_ABS_TIME { get { return GetElementByName<IField>(Names.MV_ABS_TIME); } }
        public IGroup MV_CCYYMMDD_X8 { get { return GetElementByName<IGroup>(Names.MV_CCYYMMDD_X8); } }
        public IField MV_CC { get { return GetElementByName<IField>(Names.MV_CC); } }
        public IGroup MV_YYMM_X4 { get { return GetElementByName<IGroup>(Names.MV_YYMM_X4); } }
        public IField MV_YY { get { return GetElementByName<IField>(Names.MV_YY); } }
        public IField MV_MM { get { return GetElementByName<IField>(Names.MV_MM); } }
        public IField MV_CCYYMM { get { return GetElementByName<IField>(Names.MV_CCYYMM); } }
        public IField MV_CCYY { get { return GetElementByName<IField>(Names.MV_CCYY); } }
        public IField MV_COMPLEMENT_DATE { get { return GetElementByName<IField>(Names.MV_COMPLEMENT_DATE); } }
        public IField MV_WRK_PTR { get { return GetElementByName<IField>(Names.MV_WRK_PTR); } }
        public IField MV_PRT_PTR { get { return GetElementByName<IField>(Names.MV_PRT_PTR); } }
        public IField MV_RTE_PTR { get { return GetElementByName<IField>(Names.MV_RTE_PTR); } }
        public ICheckField MV_RTE_PTR_SET { get { return GetElementByName<ICheckField>(Names.MV_RTE_PTR_SET); } }
        public IGroup MV_CLIENT_NUMBER_X10 { get { return GetElementByName<IGroup>(Names.MV_CLIENT_NUMBER_X10); } }
        public IField MV_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.MV_CLIENT_NUMBER); } }
        public IField MV_ADDRESS_REQUEST { get { return GetElementByName<IField>(Names.MV_ADDRESS_REQUEST); } }
        public ICheckField MV_ADDR_REQ_RES { get { return GetElementByName<ICheckField>(Names.MV_ADDR_REQ_RES); } }
        public ICheckField MV_ADDR_REQ_MAIL { get { return GetElementByName<ICheckField>(Names.MV_ADDR_REQ_MAIL); } }
        public IField MV_ADDRESS_SOURCE { get { return GetElementByName<IField>(Names.MV_ADDRESS_SOURCE); } }
        public ICheckField MV_ADDRESS_RESIDENCE { get { return GetElementByName<ICheckField>(Names.MV_ADDRESS_RESIDENCE); } }
        public ICheckField MV_ADDRESS_MAILING { get { return GetElementByName<ICheckField>(Names.MV_ADDRESS_MAILING); } }
        public IField MV_COUNTY_ABBR { get { return GetElementByName<IField>(Names.MV_COUNTY_ABBR); } }
        public IGroup MV_ADDRESS { get { return GetElementByName<IGroup>(Names.MV_ADDRESS); } }
        public IField MV_STREET1 { get { return GetElementByName<IField>(Names.MV_STREET1); } }
        public IField MV_STREET2 { get { return GetElementByName<IField>(Names.MV_STREET2); } }
        public IField MV_CITY { get { return GetElementByName<IField>(Names.MV_CITY); } }
        public IField MV_STATE { get { return GetElementByName<IField>(Names.MV_STATE); } }
        public IGroup MV_ZIP_CODE { get { return GetElementByName<IGroup>(Names.MV_ZIP_CODE); } }
        public IGroup MV_ZIP_CODE_5_X5 { get { return GetElementByName<IGroup>(Names.MV_ZIP_CODE_5_X5); } }
        public IField MV_ZIP_CODE_5 { get { return GetElementByName<IField>(Names.MV_ZIP_CODE_5); } }
        public IGroup MV_ZIP_CODE_4_X4 { get { return GetElementByName<IGroup>(Names.MV_ZIP_CODE_4_X4); } }
        public IField MV_ZIP_CODE_4 { get { return GetElementByName<IField>(Names.MV_ZIP_CODE_4); } }
        public IField SUBC { get { return GetElementByName<IField>(Names.SUBC); } }
        public IGroup WS_CLIENT_INFO { get { return GetElementByName<IGroup>(Names.WS_CLIENT_INFO); } }
        public IField WS_CLIENT_ID { get { return GetElementByName<IField>(Names.WS_CLIENT_ID); } }
        public IField WS_RELATIONSHIP { get { return GetElementByName<IField>(Names.WS_RELATIONSHIP); } }
        public IField WS_KAECSES_REF_CASE { get { return GetElementByName<IField>(Names.WS_KAECSES_REF_CASE); } }
        public IGroup DCLKSD_ADDRESS { get { return GetElementByName<IGroup>(Names.DCLKSD_ADDRESS); } }
        public IField ADDR_ADDRESS_TYPE { get { return GetElementByName<IField>(Names.ADDR_ADDRESS_TYPE); } }
        public IField ADDR_STREET1 { get { return GetElementByName<IField>(Names.ADDR_STREET1); } }
        public IField ADDR_STREET2 { get { return GetElementByName<IField>(Names.ADDR_STREET2); } }
        public IField ADDR_CITY { get { return GetElementByName<IField>(Names.ADDR_CITY); } }
        public IField ADDR_STATE { get { return GetElementByName<IField>(Names.ADDR_STATE); } }
        public IField ADDR_ZIP_CODE { get { return GetElementByName<IField>(Names.ADDR_ZIP_CODE); } }
        public IField ADDR_ZIP_PLUS_4 { get { return GetElementByName<IField>(Names.ADDR_ZIP_PLUS_4); } }
        public IField ADDR_COUNTY_CODE { get { return GetElementByName<IField>(Names.ADDR_COUNTY_CODE); } }
        public IField ADDR_EFFECTIVE_DATE { get { return GetElementByName<IField>(Names.ADDR_EFFECTIVE_DATE); } }
        public IField ADDR_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.ADDR_CREATED_TIMESTAMP); } }
        public IField ADDR_CREATED_BY { get { return GetElementByName<IField>(Names.ADDR_CREATED_BY); } }
        public IField ADDR_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.ADDR_LAST_MODIFIED_BY); } }
        public IField ADDR_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.ADDR_LAST_MODIFIED_TMST); } }
        public IField ADDR_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.ADDR_FK_CSB_CASE_NO); } }
        public IGroup DCLKSD_BENEFITS { get { return GetElementByName<IGroup>(Names.DCLKSD_BENEFITS); } }
        public IField BEN_BUDGETING_METHOD { get { return GetElementByName<IField>(Names.BEN_BUDGETING_METHOD); } }
        public IField BEN_BENEFIT_TYPE { get { return GetElementByName<IField>(Names.BEN_BENEFIT_TYPE); } }
        public IField BEN_PAYEE_STREET1 { get { return GetElementByName<IField>(Names.BEN_PAYEE_STREET1); } }
        public IField BEN_PAYEE_STREET2 { get { return GetElementByName<IField>(Names.BEN_PAYEE_STREET2); } }
        public IField BEN_PAYEE_CITY { get { return GetElementByName<IField>(Names.BEN_PAYEE_CITY); } }
        public IField BEN_PAYEE_STATE { get { return GetElementByName<IField>(Names.BEN_PAYEE_STATE); } }
        public IField BEN_PAYEE_ZIP_CODE { get { return GetElementByName<IField>(Names.BEN_PAYEE_ZIP_CODE); } }
        public IField BEN_PAYEE_ZIP_PLUS_4 { get { return GetElementByName<IField>(Names.BEN_PAYEE_ZIP_PLUS_4); } }
        public IField BEN_PAYMENT_START_DATE { get { return GetElementByName<IField>(Names.BEN_PAYMENT_START_DATE); } }
        public IField BEN_PAYMENT_END_DATE { get { return GetElementByName<IField>(Names.BEN_PAYMENT_END_DATE); } }
        public IField BEN_COUNTABLE_INCOME { get { return GetElementByName<IField>(Names.BEN_COUNTABLE_INCOME); } }
        public IField BEN_DEPENDENT_CARE { get { return GetElementByName<IField>(Names.BEN_DEPENDENT_CARE); } }
        public IField BEN_RECOUPED_AMT { get { return GetElementByName<IField>(Names.BEN_RECOUPED_AMT); } }
        public IField BEN_NUM_OF_CHILDREN { get { return GetElementByName<IField>(Names.BEN_NUM_OF_CHILDREN); } }
        public IField BEN_NUMBER_IN_HH { get { return GetElementByName<IField>(Names.BEN_NUMBER_IN_HH); } }
        public IField BEN_ISSUED_DATE { get { return GetElementByName<IField>(Names.BEN_ISSUED_DATE); } }
        public IField BEN_ISSUED_AMT { get { return GetElementByName<IField>(Names.BEN_ISSUED_AMT); } }
        public IField BEN_ISSUANCE_TYPE { get { return GetElementByName<IField>(Names.BEN_ISSUANCE_TYPE); } }
        public IField BEN_HOUSEHOLD_SIZE { get { return GetElementByName<IField>(Names.BEN_HOUSEHOLD_SIZE); } }
        public IField BEN_HOUSEHOLD_TYPE { get { return GetElementByName<IField>(Names.BEN_HOUSEHOLD_TYPE); } }
        public IField BEN_CSE_PROC_FLAG { get { return GetElementByName<IField>(Names.BEN_CSE_PROC_FLAG); } }
        public IField BEN_BENEFIT_AMT { get { return GetElementByName<IField>(Names.BEN_BENEFIT_AMT); } }
        public IField BEN_THIRTY_ONE_THIRD { get { return GetElementByName<IField>(Names.BEN_THIRTY_ONE_THIRD); } }
        public IField BEN_THIRTY_DISREGARD { get { return GetElementByName<IField>(Names.BEN_THIRTY_DISREGARD); } }
        public IField BEN_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.BEN_CREATED_TIMESTAMP); } }
        public IField BEN_CREATED_BY { get { return GetElementByName<IField>(Names.BEN_CREATED_BY); } }
        public IField BEN_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.BEN_LAST_MODIFIED_BY); } }
        public IField BEN_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.BEN_LAST_MODIFIED_TMST); } }
        public IField BEN_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.BEN_FK_CSB_CASE_NO); } }
        public IField BEN_FK_PGB_PROG_TYPE { get { return GetElementByName<IField>(Names.BEN_FK_PGB_PROG_TYPE); } }
        public IField BEN_FK_PMO_PROG_SUBT { get { return GetElementByName<IField>(Names.BEN_FK_PMO_PROG_SUBT); } }
        public IField BEN_FK_PMO_PROG_BEN_MO { get { return GetElementByName<IField>(Names.BEN_FK_PMO_PROG_BEN_MO); } }
        public IGroup DCLKSD_CASE_COMP { get { return GetElementByName<IGroup>(Names.DCLKSD_CASE_COMP); } }
        public IField CC_BENEFIT_MONTH { get { return GetElementByName<IField>(Names.CC_BENEFIT_MONTH); } }
        public IField CC_PARTICIPATION_CODE { get { return GetElementByName<IField>(Names.CC_PARTICIPATION_CODE); } }
        public IField CC_MEDICAL_SUBTYPE { get { return GetElementByName<IField>(Names.CC_MEDICAL_SUBTYPE); } }
        public IField CC_POSITION_ON_APP { get { return GetElementByName<IField>(Names.CC_POSITION_ON_APP); } }
        public IField CC_CASE_OPEN_DT { get { return GetElementByName<IField>(Names.CC_CASE_OPEN_DT); } }
        public IField CC_CASE_CLOSE_DT { get { return GetElementByName<IField>(Names.CC_CASE_CLOSE_DT); } }
        public IField CC_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CC_CREATED_TIMESTAMP); } }
        public IField CC_CREATED_BY { get { return GetElementByName<IField>(Names.CC_CREATED_BY); } }
        public IField CC_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CC_LAST_MODIFIED_BY); } }
        public IField CC_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CC_LAST_MODIFIED_TMST); } }
        public IField CC_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CC_FK_CLB_CLIENT_NO); } }
        public IField CC_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.CC_FK_CSB_CASE_NO); } }
        public IField CC_FK_PGB_PROG_TYPE { get { return GetElementByName<IField>(Names.CC_FK_PGB_PROG_TYPE); } }
        public IGroup DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT_BASIC); } }
        public IField CLB_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLB_CLIENT_NUMBER); } }
        public IField CLB_CIS_PREFERRED_ID { get { return GetElementByName<IField>(Names.CLB_CIS_PREFERRED_ID); } }
        public IGroup DB2_FIELDS { get { return GetElementByName<IGroup>(Names.DB2_FIELDS); } }
        public IField DB2_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.DB2_CLIENT_NUMBER); } }
        public IField DB2_BENEFIT_MONTH { get { return GetElementByName<IField>(Names.DB2_BENEFIT_MONTH); } }
        public IField DB2_ADDRESS_TYPE { get { return GetElementByName<IField>(Names.DB2_ADDRESS_TYPE); } }
        public IGroup WS_SWITCHES { get { return GetElementByName<IGroup>(Names.WS_SWITCHES); } }
        public IField WS_BEN_EOFSW { get { return GetElementByName<IField>(Names.WS_BEN_EOFSW); } }
        public ICheckField WS_BEN_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_BEN_EOF_NO); } }
        public ICheckField WS_BEN_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_BEN_EOF_YES); } }
        public IField WS_ADDR_EOFSW { get { return GetElementByName<IField>(Names.WS_ADDR_EOFSW); } }
        public ICheckField WS_ADDR_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_ADDR_EOF_NO); } }
        public ICheckField WS_ADDR_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_ADDR_EOF_YES); } }
        public IField WS_CC_EOFSW { get { return GetElementByName<IField>(Names.WS_CC_EOFSW); } }
        public ICheckField WS_CC_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_CC_EOF_NO); } }
        public ICheckField WS_CC_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_CC_EOF_YES); } }
        public IField WS_PAR_EOFSW { get { return GetElementByName<IField>(Names.WS_PAR_EOFSW); } }
        public ICheckField WS_PAR_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_PAR_EOF_NO); } }
        public ICheckField WS_PAR_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_PAR_EOF_YES); } }
        public IGroup CONTROL_BLOCK { get { return GetElementByName<IGroup>(Names.CONTROL_BLOCK); } }
        public IField COMMAND_CODE { get { return GetElementByName<IField>(Names.COMMAND_CODE); } }
        public IField COMMAND_ID { get { return GetElementByName<IField>(Names.COMMAND_ID); } }
        public IField FILE_NUMBER { get { return GetElementByName<IField>(Names.FILE_NUMBER); } }
        public IField RESPONSE_CODE { get { return GetElementByName<IField>(Names.RESPONSE_CODE); } }
        public IField ISN { get { return GetElementByName<IField>(Names.ISN); } }
        public IField ISN_LOWER_LIMIT { get { return GetElementByName<IField>(Names.ISN_LOWER_LIMIT); } }
        public IField ISN_QUANTITY { get { return GetElementByName<IField>(Names.ISN_QUANTITY); } }
        public IField FORMAT_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.FORMAT_BUFFER_LENGTH); } }
        public IField RECORD_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.RECORD_BUFFER_LENGTH); } }
        public IField SEARCH_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.SEARCH_BUFFER_LENGTH); } }
        public IField VALUE_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.VALUE_BUFFER_LENGTH); } }
        public IField ISN_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.ISN_BUFFER_LENGTH); } }
        public IField COMMAND_OPTION_1 { get { return GetElementByName<IField>(Names.COMMAND_OPTION_1); } }
        public IField COMMAND_OPTION_2 { get { return GetElementByName<IField>(Names.COMMAND_OPTION_2); } }
        public IField ADDITIONS_1 { get { return GetElementByName<IField>(Names.ADDITIONS_1); } }
        public IField ADDITIONS_2 { get { return GetElementByName<IField>(Names.ADDITIONS_2); } }
        public IField ADDITIONS_3 { get { return GetElementByName<IField>(Names.ADDITIONS_3); } }
        public IField ADDITIONS_4 { get { return GetElementByName<IField>(Names.ADDITIONS_4); } }
        public IField COMMAND_TIME { get { return GetElementByName<IField>(Names.COMMAND_TIME); } }
        public IField USER_AREA { get { return GetElementByName<IField>(Names.USER_AREA); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.FUNC_0544741180_ESC_FLAG, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.EXTERNAL_ACTION_BLOCK_WS, (EXTERNAL_ACTION_BLOCK_WS) =>
           {
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.SRADALNK, FieldType.String, 8, "SWASZ990");
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.SRMODLNK, FieldType.String, 8, "SWEXIR20");
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_ABEND_FIELDS, (MV_ABEND_FIELDS) =>
               {
                   MV_ABEND_FIELDS.CreateNewField(Names.MV_ABEND_TYPE, FieldType.String, 1)
                       .NewCheckField(Names.MV_ABEND_TYPE_NONE, SPACE)
                       .NewCheckField(Names.MV_ABEND_TYPE_ADABAS, "A")
                       .NewCheckField(Names.MV_ABEND_TYPE_CICS, "C")
                       ;
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_ADABAS, (MV_ABEND_ADABAS) =>
                   {
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_ACTION, FieldType.String, 3);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
                   });
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_CICS, (MV_ABEND_CICS) =>
                   {
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_RESOURCE_NM, FieldType.String, 8);
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_FUNCTION_CD, FieldType.String, 2);
                       MV_ABEND_CICS.CreateNewField(Names.MV_CICS_RESPONSE_CD, FieldType.String, 6);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MC_PART_TBL_0_MAX, FieldType.CompShort, 4, 14);
               IGroup MC_PARTICIPATION_TABLE_0_local = (IGroup)EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MC_PARTICIPATION_TABLE_0, (MC_PARTICIPATION_TABLE_0) =>
               {
                   MC_PARTICIPATION_TABLE_0.CreateNewFillerField(FieldType.String, 42, "AF FS GA AM MA MS SI CI MP RE FC AS MK BA ");
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d2", MC_PARTICIPATION_TABLE_0_local, (FILLER_d2) =>
               {
                   FILLER_d2.CreateNewGroupArray(Names.MC_PART_TBL_0_ENTRY, 14, (MC_PART_TBL_0_ENTRY) =>
                   {
                       MC_PART_TBL_0_ENTRY.CreateNewField(Names.MC_PART_TBL_0_X2, FieldType.String, 2);
                       MC_PART_TBL_0_ENTRY.CreateNewFillerField(1, FillWith.Hashes);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MC_PART_TBL_1_MAX, FieldType.CompShort, 4, 9);
               IGroup MC_PARTICIPATION_TABLE_1_local = (IGroup)EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MC_PARTICIPATION_TABLE_1, (MC_PARTICIPATION_TABLE_1) =>
               {
                   MC_PARTICIPATION_TABLE_1.CreateNewFillerField(FieldType.String, 42, "01 03 05 06 07 08 09 10 13 00 00 00 00 00 ");
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d5", MC_PARTICIPATION_TABLE_1_local, (FILLER_d5) =>
               {
                   FILLER_d5.CreateNewGroupArray(Names.MC_PART_TBL_1_ENTRY, 14, (MC_PART_TBL_1_ENTRY) =>
                   {
                       MC_PART_TBL_1_ENTRY.CreateNewField(Names.MC_PART_TBL_1_92, FieldType.UnsignedNumeric, 2);
                       MC_PART_TBL_1_ENTRY.CreateNewFillerField(1, FillWith.Hashes);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MC_PART_TBL_2_MAX, FieldType.CompShort, 4, 1);
               IGroup MC_PARTICIPATION_TABLE_2_local = (IGroup)EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MC_PARTICIPATION_TABLE_2, (MC_PARTICIPATION_TABLE_2) =>
               {
                   MC_PARTICIPATION_TABLE_2.CreateNewFillerField(FieldType.String, 42, "02 00 00 00 00 00 00 00 00 00 00 00 00 00 ");
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d8", MC_PARTICIPATION_TABLE_2_local, (FILLER_d8) =>
               {
                   FILLER_d8.CreateNewGroupArray(Names.MC_PART_TBL_2_ENTRY, 14, (MC_PART_TBL_2_ENTRY) =>
                   {
                       MC_PART_TBL_2_ENTRY.CreateNewField(Names.MC_PART_TBL_2_92, FieldType.UnsignedNumeric, 2);
                       MC_PART_TBL_2_ENTRY.CreateNewFillerField(1, FillWith.Hashes);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MC_PART_TBL_3_MAX, FieldType.CompShort, 4, 2);
               IGroup MC_PARTICIPATION_TABLE_3_local = (IGroup)EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MC_PARTICIPATION_TABLE_3, (MC_PARTICIPATION_TABLE_3) =>
               {
                   MC_PARTICIPATION_TABLE_3.CreateNewFillerField(FieldType.String, 42, "11 12 00 00 00 00 00 00 00 00 00 00 00 00 ");
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d11", MC_PARTICIPATION_TABLE_3_local, (FILLER_d11) =>
               {
                   FILLER_d11.CreateNewGroupArray(Names.MC_PART_TBL_3_ENTRY, 14, (MC_PART_TBL_3_ENTRY) =>
                   {
                       MC_PART_TBL_3_ENTRY.CreateNewField(Names.MC_PART_TBL_3_92, FieldType.UnsignedNumeric, 2);
                       MC_PART_TBL_3_ENTRY.CreateNewFillerField(1, FillWith.Hashes);
                   });
               });
               IGroup MC_DATE_VALUES_local = (IGroup)EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MC_DATE_VALUES, (MC_DATE_VALUES) =>
               {
                   MC_DATE_VALUES.CreateNewField(Names.JAN_01, FieldType.String, 9, "11 1 07 1");
                   MC_DATE_VALUES.CreateNewField(Names.FEB_02, FieldType.String, 9, "12 1 08 1");
                   MC_DATE_VALUES.CreateNewField(Names.MAR_03, FieldType.String, 9, "01 0 09 1");
                   MC_DATE_VALUES.CreateNewField(Names.APR_04, FieldType.String, 9, "02 0 10 1");
                   MC_DATE_VALUES.CreateNewField(Names.MAY_05, FieldType.String, 9, "03 0 11 1");
                   MC_DATE_VALUES.CreateNewField(Names.JUN_06, FieldType.String, 9, "04 0 12 1");
                   MC_DATE_VALUES.CreateNewField(Names.JUL_07, FieldType.String, 9, "05 0 01 0");
                   MC_DATE_VALUES.CreateNewField(Names.AUG_08, FieldType.String, 9, "06 0 02 0");
                   MC_DATE_VALUES.CreateNewField(Names.SEP_09, FieldType.String, 9, "07 0 03 0");
                   MC_DATE_VALUES.CreateNewField(Names.OCT_10, FieldType.String, 9, "08 0 04 0");
                   MC_DATE_VALUES.CreateNewField(Names.NOV_11, FieldType.String, 9, "09 0 05 0");
                   MC_DATE_VALUES.CreateNewField(Names.DEC_12, FieldType.String, 9, "10 0 06 0");
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d13", MC_DATE_VALUES_local, (FILLER_d13) =>
               {
                   FILLER_d13.CreateNewGroupArray(Names.MC_DATE_ENTRY, 12, (MC_DATE_ENTRY) =>
                   {
                       MC_DATE_ENTRY.CreateNewField(Names.MC_DATE_MM_MINUS_2, FieldType.UnsignedNumeric, 2);
                       MC_DATE_ENTRY.CreateNewFillerField(1, FillWith.Hashes);
                       MC_DATE_ENTRY.CreateNewField(Names.MC_DATE_YY_MINUS_2, FieldType.UnsignedNumeric, 1);
                       MC_DATE_ENTRY.CreateNewFillerField(1, FillWith.Hashes);
                       MC_DATE_ENTRY.CreateNewField(Names.MC_DATE_MM_MINUS_6, FieldType.UnsignedNumeric, 2);
                       MC_DATE_ENTRY.CreateNewFillerField(1, FillWith.Hashes);
                       MC_DATE_ENTRY.CreateNewField(Names.MC_DATE_YY_MINUS_6, FieldType.UnsignedNumeric, 1);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_BENEFIT_DATES, (MV_BENEFIT_DATES) =>
               {
                   IGroup MV_BENEFIT_DATE_local = (IGroup)MV_BENEFIT_DATES.CreateNewGroup(Names.MV_BENEFIT_DATE, (MV_BENEFIT_DATE) =>
                   {
                       MV_BENEFIT_DATE.CreateNewGroupArray(Names.MV_BENEFIT_DATE_42, 4, (MV_BENEFIT_DATE_42) =>
                       {
                           MV_BENEFIT_DATE_42.CreateNewField(Names.MV_BENEFIT_CCYY, FieldType.UnsignedNumeric, 4);
                           MV_BENEFIT_DATE_42.CreateNewField(Names.MV_BENEFIT_MM, FieldType.UnsignedNumeric, 2);
                       });
                   });
                   MV_BENEFIT_DATES.CreateNewGroupRedefine("FILLER_d17", MV_BENEFIT_DATE_local, (FILLER_d17) =>
                   {
                       FILLER_d17.CreateNewFieldArray(Names.MV_BENEFIT_CCYYMM, 4, FieldType.UnsignedNumeric, 6);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MC_BENEFIT_DATE_INDEX, FieldType.CompShort, 4, 1);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MC_BENEFIT_DATE_MAX, FieldType.CompShort, 4, 4);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_BENEFIT_DATE_PTR, FieldType.CompShort, 4);
               IGroup MC_BENEFIT_DATE_PROCESS_TABLE_local = (IGroup)EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MC_BENEFIT_DATE_PROCESS_TABLE, (MC_BENEFIT_DATE_PROCESS_TABLE) =>
               {
                   MC_BENEFIT_DATE_PROCESS_TABLE.CreateNewFillerField(FieldType.String, 8, "2 1 3 4 ");
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d19", MC_BENEFIT_DATE_PROCESS_TABLE_local, (FILLER_d19) =>
               {
                   FILLER_d19.CreateNewGroupArray(Names.MC_BENE_DT_PROC_ENTRY, 4, (MC_BENE_DT_PROC_ENTRY) =>
                   {
                       MC_BENE_DT_PROC_ENTRY.CreateNewField(Names.MC_BENE_DT_PROC_PTR, FieldType.UnsignedNumeric, 1);
                       MC_BENE_DT_PROC_ENTRY.CreateNewFillerField(1, FillWith.Hashes);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_ABS_TIME, FieldType.PackedDecimal, 15);
               IGroup MV_CCYYMMDD_X8_local = (IGroup)EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CCYYMMDD_X8, (MV_CCYYMMDD_X8) =>
               {
                   MV_CCYYMMDD_X8.CreateNewField(Names.MV_CC, FieldType.UnsignedNumeric, 2);
                   MV_CCYYMMDD_X8.CreateNewGroup(Names.MV_YYMM_X4, (MV_YYMM_X4) =>
                   {
                       MV_YYMM_X4.CreateNewField(Names.MV_YY, FieldType.UnsignedNumeric, 2);
                       MV_YYMM_X4.CreateNewField(Names.MV_MM, FieldType.UnsignedNumeric, 2);
                       MV_YYMM_X4.CreateNewFillerField(4, FillWith.Hashes);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d22", MV_CCYYMMDD_X8_local, (FILLER_d22) =>
               {
                   FILLER_d22.CreateNewField(Names.MV_CCYYMM, FieldType.UnsignedNumeric, 6);
                   FILLER_d22.CreateNewFillerField(4, FillWith.Hashes);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroupRedefine("FILLER_d24", MV_CCYYMMDD_X8_local, (FILLER_d24) =>
               {
                   FILLER_d24.CreateNewField(Names.MV_CCYY, FieldType.UnsignedNumeric, 4);
                   FILLER_d24.CreateNewFillerField(6, FillWith.Hashes);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_COMPLEMENT_DATE, FieldType.UnsignedPackedDecimal, 9);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_WRK_PTR, FieldType.CompShort, 4);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_PRT_PTR, FieldType.CompShort, 4);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_RTE_PTR, FieldType.CompShort, 4)
                   .NewCheckField(Names.MV_RTE_PTR_SET, 1, 2, 3)
                   ;
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_NUMBER_X10, (MV_CLIENT_NUMBER_X10) =>
               {
                   MV_CLIENT_NUMBER_X10.CreateNewField(Names.MV_CLIENT_NUMBER, FieldType.UnsignedNumeric, 10);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_ADDRESS_REQUEST, FieldType.String, 1)
                   .NewCheckField(Names.MV_ADDR_REQ_RES, "R", SPACE)
                   .NewCheckField(Names.MV_ADDR_REQ_MAIL, "M")
                   ;
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_ADDRESS_SOURCE, FieldType.String, 1)
                   .NewCheckField(Names.MV_ADDRESS_RESIDENCE, "R")
                   .NewCheckField(Names.MV_ADDRESS_MAILING, "M")
                   ;
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_COUNTY_ABBR, FieldType.String, 2);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_ADDRESS, (MV_ADDRESS) =>
               {
                   MV_ADDRESS.CreateNewField(Names.MV_STREET1, FieldType.String, 25);
                   MV_ADDRESS.CreateNewField(Names.MV_STREET2, FieldType.String, 25);
                   MV_ADDRESS.CreateNewField(Names.MV_CITY, FieldType.String, 15);
                   MV_ADDRESS.CreateNewField(Names.MV_STATE, FieldType.String, 2);
                   MV_ADDRESS.CreateNewGroup(Names.MV_ZIP_CODE, (MV_ZIP_CODE) =>
                   {
                       MV_ZIP_CODE.CreateNewGroup(Names.MV_ZIP_CODE_5_X5, (MV_ZIP_CODE_5_X5) =>
                       {
                           MV_ZIP_CODE_5_X5.CreateNewField(Names.MV_ZIP_CODE_5, FieldType.UnsignedNumeric, 5);
                       });
                       MV_ZIP_CODE.CreateNewGroup(Names.MV_ZIP_CODE_4_X4, (MV_ZIP_CODE_4_X4) =>
                       {
                           MV_ZIP_CODE_4_X4.CreateNewField(Names.MV_ZIP_CODE_4, FieldType.UnsignedNumeric, 4);
                       });
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.SUBC, FieldType.CompShort, 4);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.WS_CLIENT_INFO, (WS_CLIENT_INFO) =>
               {
                   WS_CLIENT_INFO.CreateNewField(Names.WS_CLIENT_ID, FieldType.String, 10);
                   WS_CLIENT_INFO.CreateNewField(Names.WS_RELATIONSHIP, FieldType.String, 2);
                   WS_CLIENT_INFO.CreateNewField(Names.WS_KAECSES_REF_CASE, FieldType.String, 8);
               });
           });

            recordDef.CreateNewGroup(Names.DCLKSD_ADDRESS, (DCLKSD_ADDRESS) =>
           {
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_ADDRESS_TYPE, FieldType.CompShort, 4);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_STREET1, FieldType.String, 30);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_STREET2, FieldType.String, 30);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_CITY, FieldType.String, 30);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_STATE, FieldType.String, 2);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_ZIP_CODE, FieldType.CompInt, 9);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_ZIP_PLUS_4, FieldType.CompShort, 4);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_COUNTY_CODE, FieldType.String, 2);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_EFFECTIVE_DATE, FieldType.String, 10);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_CREATED_BY, FieldType.String, 8);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_ADDRESS.CreateNewField(Names.ADDR_FK_CSB_CASE_NO, FieldType.String, 8);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_BENEFITS, (DCLKSD_BENEFITS) =>
           {
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_BUDGETING_METHOD, FieldType.String, 1);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_BENEFIT_TYPE, FieldType.String, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_PAYEE_STREET1, FieldType.String, 30);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_PAYEE_STREET2, FieldType.String, 30);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_PAYEE_CITY, FieldType.String, 30);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_PAYEE_STATE, FieldType.String, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_PAYEE_ZIP_CODE, FieldType.CompInt, 9);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_PAYEE_ZIP_PLUS_4, FieldType.CompShort, 4);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_PAYMENT_START_DATE, FieldType.String, 10);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_PAYMENT_END_DATE, FieldType.String, 10);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_COUNTABLE_INCOME, FieldType.PackedDecimal, 8, null, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_DEPENDENT_CARE, FieldType.PackedDecimal, 8, null, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_RECOUPED_AMT, FieldType.PackedDecimal, 8, null, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_NUM_OF_CHILDREN, FieldType.CompShort, 4);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_NUMBER_IN_HH, FieldType.CompShort, 4);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_ISSUED_DATE, FieldType.String, 10);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_ISSUED_AMT, FieldType.PackedDecimal, 8, null, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_ISSUANCE_TYPE, FieldType.String, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_HOUSEHOLD_SIZE, FieldType.CompShort, 4);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_HOUSEHOLD_TYPE, FieldType.String, 3);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_CSE_PROC_FLAG, FieldType.String, 1);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_BENEFIT_AMT, FieldType.PackedDecimal, 8, null, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_THIRTY_ONE_THIRD, FieldType.PackedDecimal, 8, null, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_THIRTY_DISREGARD, FieldType.PackedDecimal, 8, null, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_CREATED_BY, FieldType.String, 8);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_FK_CSB_CASE_NO, FieldType.String, 8);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_FK_PGB_PROG_TYPE, FieldType.String, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_FK_PMO_PROG_SUBT, FieldType.String, 2);
               DCLKSD_BENEFITS.CreateNewField(Names.BEN_FK_PMO_PROG_BEN_MO, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CASE_COMP, (DCLKSD_CASE_COMP) =>
           {
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_BENEFIT_MONTH, FieldType.CompInt, 9);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_PARTICIPATION_CODE, FieldType.String, 2);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_MEDICAL_SUBTYPE, FieldType.String, 2);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_POSITION_ON_APP, FieldType.CompShort, 4);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_CASE_OPEN_DT, FieldType.String, 10);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_CASE_CLOSE_DT, FieldType.String, 10);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_CREATED_BY, FieldType.String, 8);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_FK_CLB_CLIENT_NO, FieldType.String, 10);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_FK_CSB_CASE_NO, FieldType.String, 8);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_FK_PGB_PROG_TYPE, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT_BASIC, (DCLKSD_CLIENT_BASIC) =>
           {
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_CLIENT_NUMBER, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_CIS_PREFERRED_ID, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DB2_FIELDS, (DB2_FIELDS) =>
           {
               DB2_FIELDS.CreateNewField(Names.DB2_CLIENT_NUMBER, FieldType.String, 10);
               DB2_FIELDS.CreateNewField(Names.DB2_BENEFIT_MONTH, FieldType.CompInt, 9);
               DB2_FIELDS.CreateNewField(Names.DB2_ADDRESS_TYPE, FieldType.CompShort, 4);
           });

            recordDef.CreateNewGroup(Names.WS_SWITCHES, (WS_SWITCHES) =>
           {
               WS_SWITCHES.CreateNewField(Names.WS_BEN_EOFSW, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_BEN_EOF_NO, "N")
                   .NewCheckField(Names.WS_BEN_EOF_YES, "Y")
                   ;
               WS_SWITCHES.CreateNewField(Names.WS_ADDR_EOFSW, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_ADDR_EOF_NO, "N")
                   .NewCheckField(Names.WS_ADDR_EOF_YES, "Y")
                   ;
               WS_SWITCHES.CreateNewField(Names.WS_CC_EOFSW, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_CC_EOF_NO, "N")
                   .NewCheckField(Names.WS_CC_EOF_YES, "Y")
                   ;
               WS_SWITCHES.CreateNewField(Names.WS_PAR_EOFSW, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_PAR_EOF_NO, "N")
                   .NewCheckField(Names.WS_PAR_EOF_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.CONTROL_BLOCK, (CONTROL_BLOCK) =>
           {
               CONTROL_BLOCK.CreateNewFillerField(FieldType.String, 2, "AP");
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_CODE, FieldType.String, 2, "RC");
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_ID, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.FILE_NUMBER, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.RESPONSE_CODE, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_LOWER_LIMIT, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_QUANTITY, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.FORMAT_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.RECORD_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.SEARCH_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.VALUE_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_OPTION_1, FieldType.String, 1, SPACE);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_OPTION_2, FieldType.String, 1, SPACE);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_1, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_2, FieldType.String, 4, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_3, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_4, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewFillerField(FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_TIME, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.USER_AREA, FieldType.String, 4, SPACES);
           });


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXIR20_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXIR20_ls_LinkageSection";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_0544741183_IA = "A_0544741183_IA";
            internal const string IMPORT_ADDRESS_TYPE_0001EV = "IMPORT_ADDRESS_TYPE_0001EV";
            internal const string IEF_SUPPLIED_0001ET = "IEF_SUPPLIED_0001ET";
            internal const string FLAG_0001AS = "FLAG_0001AS";
            internal const string FLAG_0001 = "FLAG_0001";
            internal const string FLAG_0001XX = "FLAG_0001XX";
            internal const string IMPORT_CURRENT_0002EV = "IMPORT_CURRENT_0002EV";
            internal const string DATE_WORK_AREA_0002ET = "DATE_WORK_AREA_0002ET";
            internal const string DATE_0002AS = "DATE_0002AS";
            internal const string DATE_0002 = "DATE_0002";
            internal const string DATE_0002XX = "DATE_0002XX";
            internal const string INPUT_AE_0003EV = "INPUT_AE_0003EV";
            internal const string CSE_PERSONS_WORK_SET_0003ET = "CSE_PERSONS_WORK_SET_0003ET";
            internal const string NUMBER_0003AS = "NUMBER_0003AS";
            internal const string NUMBER_0003 = "NUMBER_0003";
            internal const string NUMBER_0003XX = "NUMBER_0003XX";
            internal const string W_OA = "W_OA";
            internal const string A_0544741184_OA = "A_0544741184_OA";
            internal const string OUTPUT_0004EV = "OUTPUT_0004EV";
            internal const string ABEND_DATA_0004ET = "ABEND_DATA_0004ET";
            internal const string TYPE_0004AS = "TYPE_0004AS";
            internal const string TYPE_0004 = "TYPE_0004";
            internal const string TYPE_0004XX = "TYPE_0004XX";
            internal const string ADABAS_FILE_NUMBER_0004AS = "ADABAS_FILE_NUMBER_0004AS";
            internal const string ADABAS_FILE_NUMBER_0004 = "ADABAS_FILE_NUMBER_0004";
            internal const string ADABAS_FILE_NUMBER_0004XX = "ADABAS_FILE_NUMBER_0004XX";
            internal const string ADABAS_FILE_ACTION_0004AS = "ADABAS_FILE_ACTION_0004AS";
            internal const string ADABAS_FILE_ACTION_0004 = "ADABAS_FILE_ACTION_0004";
            internal const string ADABAS_FILE_ACTION_0004XX = "ADABAS_FILE_ACTION_0004XX";
            internal const string ADABAS_RESPONSE_CD_0004AS = "ADABAS_RESPONSE_CD_0004AS";
            internal const string ADABAS_RESPONSE_CD_0004 = "ADABAS_RESPONSE_CD_0004";
            internal const string ADABAS_RESPONSE_CD_0004XX = "ADABAS_RESPONSE_CD_0004XX";
            internal const string CICS_RESOURCE_NM_0004AS = "CICS_RESOURCE_NM_0004AS";
            internal const string CICS_RESOURCE_NM_0004 = "CICS_RESOURCE_NM_0004";
            internal const string CICS_RESOURCE_NM_0004XX = "CICS_RESOURCE_NM_0004XX";
            internal const string CICS_FUNCTION_CD_0004AS = "CICS_FUNCTION_CD_0004AS";
            internal const string CICS_FUNCTION_CD_0004 = "CICS_FUNCTION_CD_0004";
            internal const string CICS_FUNCTION_CD_0004XX = "CICS_FUNCTION_CD_0004XX";
            internal const string CICS_RESPONSE_CD_0004AS = "CICS_RESPONSE_CD_0004AS";
            internal const string CICS_RESPONSE_CD_0004 = "CICS_RESPONSE_CD_0004";
            internal const string CICS_RESPONSE_CD_0004XX = "CICS_RESPONSE_CD_0004XX";
            internal const string OUTPUT_AE_0005EV = "OUTPUT_AE_0005EV";
            internal const string CSE_PERSON_ADDRESS_0005ET = "CSE_PERSON_ADDRESS_0005ET";
            internal const string LOCATION_TYPE_0005AS = "LOCATION_TYPE_0005AS";
            internal const string LOCATION_TYPE_0005 = "LOCATION_TYPE_0005";
            internal const string LOCATION_TYPE_0005XX = "LOCATION_TYPE_0005XX";
            internal const string STREET_1_0005AS = "STREET_1_0005AS";
            internal const string STREET_1_0005 = "STREET_1_0005";
            internal const string STREET_1_0005XX = "STREET_1_0005XX";
            internal const string STREET_2_0005AS = "STREET_2_0005AS";
            internal const string STREET_2_0005 = "STREET_2_0005";
            internal const string STREET_2_0005XX = "STREET_2_0005XX";
            internal const string CITY_0005AS = "CITY_0005AS";
            internal const string CITY_0005 = "CITY_0005";
            internal const string CITY_0005XX = "CITY_0005XX";
            internal const string STATE_0005AS = "STATE_0005AS";
            internal const string STATE_0005 = "STATE_0005";
            internal const string STATE_0005XX = "STATE_0005XX";
            internal const string ZIP_CODE_0005AS = "ZIP_CODE_0005AS";
            internal const string ZIP_CODE_0005 = "ZIP_CODE_0005";
            internal const string ZIP_CODE_0005XX = "ZIP_CODE_0005XX";
            internal const string ZIP4_0005AS = "ZIP4_0005AS";
            internal const string ZIP4_0005 = "ZIP4_0005";
            internal const string ZIP4_0005XX = "ZIP4_0005XX";
            internal const string TYPE_0005AS = "TYPE_0005AS";
            internal const string TYPE_0005 = "TYPE_0005";
            internal const string TYPE_0005XX = "TYPE_0005XX";
            internal const string COUNTY_0005AS = "COUNTY_0005AS";
            internal const string COUNTY_0005 = "COUNTY_0005";
            internal const string COUNTY_0005XX = "COUNTY_0005XX";
            internal const string TWA = "TWA";
            internal const string TWA_ADABAS_PARMS = "TWA_ADABAS_PARMS";
            internal const string TWA_CICS_PARMS = "TWA_CICS_PARMS";
            internal const string TWA_PROGRAM_ID = "TWA_PROGRAM_ID";
            internal const string TWA_ADDR_LIST = "TWA_ADDR_LIST";
        }
        #endregion

        #region Direct-access element properties
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_0544741183_IA { get { return GetElementByName<IGroup>(Names.A_0544741183_IA); } }
        public IGroup IMPORT_ADDRESS_TYPE_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_ADDRESS_TYPE_0001EV); } }
        public IGroup IEF_SUPPLIED_0001ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0001ET); } }
        public IField FLAG_0001AS { get { return GetElementByName<IField>(Names.FLAG_0001AS); } }
        public IField FLAG_0001 { get { return GetElementByName<IField>(Names.FLAG_0001); } }
        public IField FLAG_0001XX { get { return GetElementByName<IField>(Names.FLAG_0001XX); } }
        public IGroup IMPORT_CURRENT_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_CURRENT_0002EV); } }
        public IGroup DATE_WORK_AREA_0002ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0002ET); } }
        public IField DATE_0002AS { get { return GetElementByName<IField>(Names.DATE_0002AS); } }
        public IField DATE_0002 { get { return GetElementByName<IField>(Names.DATE_0002); } }
        public IField DATE_0002XX { get { return GetElementByName<IField>(Names.DATE_0002XX); } }
        public IGroup INPUT_AE_0003EV { get { return GetElementByName<IGroup>(Names.INPUT_AE_0003EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0003ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0003ET); } }
        public IField NUMBER_0003AS { get { return GetElementByName<IField>(Names.NUMBER_0003AS); } }
        public IField NUMBER_0003 { get { return GetElementByName<IField>(Names.NUMBER_0003); } }
        public IField NUMBER_0003XX { get { return GetElementByName<IField>(Names.NUMBER_0003XX); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_0544741184_OA { get { return GetElementByName<IGroup>(Names.A_0544741184_OA); } }
        public IGroup OUTPUT_0004EV { get { return GetElementByName<IGroup>(Names.OUTPUT_0004EV); } }
        public IGroup ABEND_DATA_0004ET { get { return GetElementByName<IGroup>(Names.ABEND_DATA_0004ET); } }
        public IField TYPE_0004AS { get { return GetElementByName<IField>(Names.TYPE_0004AS); } }
        public IField TYPE_0004 { get { return GetElementByName<IField>(Names.TYPE_0004); } }
        public IField TYPE_0004XX { get { return GetElementByName<IField>(Names.TYPE_0004XX); } }
        public IField ADABAS_FILE_NUMBER_0004AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0004AS); } }
        public IField ADABAS_FILE_NUMBER_0004 { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0004); } }
        public IField ADABAS_FILE_NUMBER_0004XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0004XX); } }
        public IField ADABAS_FILE_ACTION_0004AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0004AS); } }
        public IField ADABAS_FILE_ACTION_0004 { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0004); } }
        public IField ADABAS_FILE_ACTION_0004XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0004XX); } }
        public IField ADABAS_RESPONSE_CD_0004AS { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0004AS); } }
        public IField ADABAS_RESPONSE_CD_0004 { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0004); } }
        public IField ADABAS_RESPONSE_CD_0004XX { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0004XX); } }
        public IField CICS_RESOURCE_NM_0004AS { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0004AS); } }
        public IField CICS_RESOURCE_NM_0004 { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0004); } }
        public IField CICS_RESOURCE_NM_0004XX { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0004XX); } }
        public IField CICS_FUNCTION_CD_0004AS { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0004AS); } }
        public IField CICS_FUNCTION_CD_0004 { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0004); } }
        public IField CICS_FUNCTION_CD_0004XX { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0004XX); } }
        public IField CICS_RESPONSE_CD_0004AS { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0004AS); } }
        public IField CICS_RESPONSE_CD_0004 { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0004); } }
        public IField CICS_RESPONSE_CD_0004XX { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0004XX); } }
        public IGroup OUTPUT_AE_0005EV { get { return GetElementByName<IGroup>(Names.OUTPUT_AE_0005EV); } }
        public IGroup CSE_PERSON_ADDRESS_0005ET { get { return GetElementByName<IGroup>(Names.CSE_PERSON_ADDRESS_0005ET); } }
        public IField LOCATION_TYPE_0005AS { get { return GetElementByName<IField>(Names.LOCATION_TYPE_0005AS); } }
        public IField LOCATION_TYPE_0005 { get { return GetElementByName<IField>(Names.LOCATION_TYPE_0005); } }
        public IField LOCATION_TYPE_0005XX { get { return GetElementByName<IField>(Names.LOCATION_TYPE_0005XX); } }
        public IField STREET_1_0005AS { get { return GetElementByName<IField>(Names.STREET_1_0005AS); } }
        public IField STREET_1_0005 { get { return GetElementByName<IField>(Names.STREET_1_0005); } }
        public IField STREET_1_0005XX { get { return GetElementByName<IField>(Names.STREET_1_0005XX); } }
        public IField STREET_2_0005AS { get { return GetElementByName<IField>(Names.STREET_2_0005AS); } }
        public IField STREET_2_0005 { get { return GetElementByName<IField>(Names.STREET_2_0005); } }
        public IField STREET_2_0005XX { get { return GetElementByName<IField>(Names.STREET_2_0005XX); } }
        public IField CITY_0005AS { get { return GetElementByName<IField>(Names.CITY_0005AS); } }
        public IField CITY_0005 { get { return GetElementByName<IField>(Names.CITY_0005); } }
        public IField CITY_0005XX { get { return GetElementByName<IField>(Names.CITY_0005XX); } }
        public IField STATE_0005AS { get { return GetElementByName<IField>(Names.STATE_0005AS); } }
        public IField STATE_0005 { get { return GetElementByName<IField>(Names.STATE_0005); } }
        public IField STATE_0005XX { get { return GetElementByName<IField>(Names.STATE_0005XX); } }
        public IField ZIP_CODE_0005AS { get { return GetElementByName<IField>(Names.ZIP_CODE_0005AS); } }
        public IField ZIP_CODE_0005 { get { return GetElementByName<IField>(Names.ZIP_CODE_0005); } }
        public IField ZIP_CODE_0005XX { get { return GetElementByName<IField>(Names.ZIP_CODE_0005XX); } }
        public IField ZIP4_0005AS { get { return GetElementByName<IField>(Names.ZIP4_0005AS); } }
        public IField ZIP4_0005 { get { return GetElementByName<IField>(Names.ZIP4_0005); } }
        public IField ZIP4_0005XX { get { return GetElementByName<IField>(Names.ZIP4_0005XX); } }
        public IField TYPE_0005AS { get { return GetElementByName<IField>(Names.TYPE_0005AS); } }
        public IField TYPE_0005 { get { return GetElementByName<IField>(Names.TYPE_0005); } }
        public IField TYPE_0005XX { get { return GetElementByName<IField>(Names.TYPE_0005XX); } }
        public IField COUNTY_0005AS { get { return GetElementByName<IField>(Names.COUNTY_0005AS); } }
        public IField COUNTY_0005 { get { return GetElementByName<IField>(Names.COUNTY_0005); } }
        public IField COUNTY_0005XX { get { return GetElementByName<IField>(Names.COUNTY_0005XX); } }
        public IGroup TWA { get { return GetElementByName<IGroup>(Names.TWA); } }
        public IGroup TWA_ADABAS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_ADABAS_PARMS); } }
        public IGroup TWA_CICS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_CICS_PARMS); } }
        public IField TWA_PROGRAM_ID { get { return GetElementByName<IField>(Names.TWA_PROGRAM_ID); } }
        public IGroup TWA_ADDR_LIST { get { return GetElementByName<IGroup>(Names.TWA_ADDR_LIST); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_0544741183_IA, (A_0544741183_IA) =>
               {
                   A_0544741183_IA.CreateNewGroup(Names.IMPORT_ADDRESS_TYPE_0001EV, (IMPORT_ADDRESS_TYPE_0001EV) =>
                   {
                       IMPORT_ADDRESS_TYPE_0001EV.CreateNewGroup(Names.IEF_SUPPLIED_0001ET, (IEF_SUPPLIED_0001ET) =>
                       {
                           IEF_SUPPLIED_0001ET.CreateNewField(Names.FLAG_0001AS, FieldType.String, 1);

                           IField FLAG_0001_local = IEF_SUPPLIED_0001ET.CreateNewField(Names.FLAG_0001, FieldType.String, 1);
                           IEF_SUPPLIED_0001ET.CreateNewFieldRedefine(Names.FLAG_0001XX, FieldType.String, FLAG_0001_local, 1);
                       });
                   });
                   A_0544741183_IA.CreateNewGroup(Names.IMPORT_CURRENT_0002EV, (IMPORT_CURRENT_0002EV) =>
                   {
                       IMPORT_CURRENT_0002EV.CreateNewGroup(Names.DATE_WORK_AREA_0002ET, (DATE_WORK_AREA_0002ET) =>
                       {
                           DATE_WORK_AREA_0002ET.CreateNewField(Names.DATE_0002AS, FieldType.String, 1);

                           IField DATE_0002_local = DATE_WORK_AREA_0002ET.CreateNewField(Names.DATE_0002, FieldType.SignedNumeric, 8);
                           DATE_WORK_AREA_0002ET.CreateNewFieldRedefine(Names.DATE_0002XX, FieldType.String, DATE_0002_local, 8);
                       });
                   });
                   A_0544741183_IA.CreateNewGroup(Names.INPUT_AE_0003EV, (INPUT_AE_0003EV) =>
                   {
                       INPUT_AE_0003EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0003ET, (CSE_PERSONS_WORK_SET_0003ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.NUMBER_0003AS, FieldType.String, 1);

                           IField NUMBER_0003_local = CSE_PERSONS_WORK_SET_0003ET.CreateNewField(Names.NUMBER_0003, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0003ET.CreateNewFieldRedefine(Names.NUMBER_0003XX, FieldType.String, NUMBER_0003_local, 10);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_0544741184_OA, (A_0544741184_OA) =>
               {
                   A_0544741184_OA.CreateNewGroup(Names.OUTPUT_0004EV, (OUTPUT_0004EV) =>
                   {
                       OUTPUT_0004EV.CreateNewGroup(Names.ABEND_DATA_0004ET, (ABEND_DATA_0004ET) =>
                       {
                           ABEND_DATA_0004ET.CreateNewField(Names.TYPE_0004AS, FieldType.String, 1);

                           IField TYPE_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.TYPE_0004, FieldType.String, 1);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.TYPE_0004XX, FieldType.String, TYPE_0004_local, 1);
                           ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0004AS, FieldType.String, 1);

                           IField ADABAS_FILE_NUMBER_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0004, FieldType.String, 4);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.ADABAS_FILE_NUMBER_0004XX, FieldType.String, ADABAS_FILE_NUMBER_0004_local, 4);
                           ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_ACTION_0004AS, FieldType.String, 1);

                           IField ADABAS_FILE_ACTION_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_FILE_ACTION_0004, FieldType.String, 3);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.ADABAS_FILE_ACTION_0004XX, FieldType.String, ADABAS_FILE_ACTION_0004_local, 3);
                           ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0004AS, FieldType.String, 1);

                           IField ADABAS_RESPONSE_CD_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0004, FieldType.String, 4);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.ADABAS_RESPONSE_CD_0004XX, FieldType.String, ADABAS_RESPONSE_CD_0004_local, 4);
                           ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESOURCE_NM_0004AS, FieldType.String, 1);

                           IField CICS_RESOURCE_NM_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESOURCE_NM_0004, FieldType.String, 8);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.CICS_RESOURCE_NM_0004XX, FieldType.String, CICS_RESOURCE_NM_0004_local, 8);
                           ABEND_DATA_0004ET.CreateNewField(Names.CICS_FUNCTION_CD_0004AS, FieldType.String, 1);

                           IField CICS_FUNCTION_CD_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.CICS_FUNCTION_CD_0004, FieldType.String, 2);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.CICS_FUNCTION_CD_0004XX, FieldType.String, CICS_FUNCTION_CD_0004_local, 2);
                           ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESPONSE_CD_0004AS, FieldType.String, 1);

                           IField CICS_RESPONSE_CD_0004_local = ABEND_DATA_0004ET.CreateNewField(Names.CICS_RESPONSE_CD_0004, FieldType.String, 6);
                           ABEND_DATA_0004ET.CreateNewFieldRedefine(Names.CICS_RESPONSE_CD_0004XX, FieldType.String, CICS_RESPONSE_CD_0004_local, 6);
                       });
                   });
                   A_0544741184_OA.CreateNewGroup(Names.OUTPUT_AE_0005EV, (OUTPUT_AE_0005EV) =>
                   {
                       OUTPUT_AE_0005EV.CreateNewGroup(Names.CSE_PERSON_ADDRESS_0005ET, (CSE_PERSON_ADDRESS_0005ET) =>
                       {
                           CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.LOCATION_TYPE_0005AS, FieldType.String, 1);

                           IField LOCATION_TYPE_0005_local = CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.LOCATION_TYPE_0005, FieldType.String, 1);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewFieldRedefine(Names.LOCATION_TYPE_0005XX, FieldType.String, LOCATION_TYPE_0005_local, 1);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.STREET_1_0005AS, FieldType.String, 1);

                           IField STREET_1_0005_local = CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.STREET_1_0005, FieldType.String, 25);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewFieldRedefine(Names.STREET_1_0005XX, FieldType.String, STREET_1_0005_local, 25);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.STREET_2_0005AS, FieldType.String, 1);

                           IField STREET_2_0005_local = CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.STREET_2_0005, FieldType.String, 25);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewFieldRedefine(Names.STREET_2_0005XX, FieldType.String, STREET_2_0005_local, 25);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.CITY_0005AS, FieldType.String, 1);

                           IField CITY_0005_local = CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.CITY_0005, FieldType.String, 15);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewFieldRedefine(Names.CITY_0005XX, FieldType.String, CITY_0005_local, 15);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.STATE_0005AS, FieldType.String, 1);

                           IField STATE_0005_local = CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.STATE_0005, FieldType.String, 2);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewFieldRedefine(Names.STATE_0005XX, FieldType.String, STATE_0005_local, 2);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.ZIP_CODE_0005AS, FieldType.String, 1);

                           IField ZIP_CODE_0005_local = CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.ZIP_CODE_0005, FieldType.String, 5);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewFieldRedefine(Names.ZIP_CODE_0005XX, FieldType.String, ZIP_CODE_0005_local, 5);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.ZIP4_0005AS, FieldType.String, 1);

                           IField ZIP4_0005_local = CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.ZIP4_0005, FieldType.String, 4);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewFieldRedefine(Names.ZIP4_0005XX, FieldType.String, ZIP4_0005_local, 4);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.TYPE_0005AS, FieldType.String, 1);

                           IField TYPE_0005_local = CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.TYPE_0005, FieldType.String, 1);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewFieldRedefine(Names.TYPE_0005XX, FieldType.String, TYPE_0005_local, 1);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.COUNTY_0005AS, FieldType.String, 1);

                           IField COUNTY_0005_local = CSE_PERSON_ADDRESS_0005ET.CreateNewField(Names.COUNTY_0005, FieldType.String, 2);
                           CSE_PERSON_ADDRESS_0005ET.CreateNewFieldRedefine(Names.COUNTY_0005XX, FieldType.String, COUNTY_0005_local, 2);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.TWA, (TWA) =>
           {
               IGroup TWA_ADABAS_PARMS_local = (IGroup)TWA.CreateNewGroup(Names.TWA_ADABAS_PARMS, (TWA_ADABAS_PARMS) =>
               {
                   TWA_ADABAS_PARMS.CreateNewFieldArray("FILLER_d28", 7, FieldType.CompInt, 4);
               });
               TWA.CreateNewGroupRedefine(Names.TWA_CICS_PARMS, TWA_ADABAS_PARMS_local, (TWA_CICS_PARMS) =>
               {
                   TWA_CICS_PARMS.CreateNewField(Names.TWA_PROGRAM_ID, FieldType.String, 8);
                   TWA_CICS_PARMS.CreateNewGroup(Names.TWA_ADDR_LIST, (TWA_ADDR_LIST) =>
                   {
                       TWA_ADDR_LIST.CreateNewFieldArray("FILLER_d29", 5, FieldType.CompInt, 4);
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(W_IA, args, 0);
            SetPassedParm(W_OA, args, 1);
            SetPassedParm(PSMGR_EAB_DATA, args, 2);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(W_IA, args, 0);
            SetReturnParm(W_OA, args, 1);
            SetReturnParm(PSMGR_EAB_DATA, args, 2);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXIR20 : OnlineEABBase
    {

        #region Public Constructors
        public SWEXIR20()
            : base()
        {
            SetUpProgram();
        }

        public SWEXIR20(OnlineControl controlData) : base(controlData)
        {
            SetUpProgram();
        }

        private void SetUpProgram()
        {
            this.ProgramName = "SWEXIR20";

            WS = new SWEXIR20_ws();
            LS = new SWEXIR20_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXIR20_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXIR20_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_0544741180(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_0544741180
        /// </summary>
        private void M_MAIN_0544741180(string returnMethod = "")
        {
            M_PARA_0544741180_INIT("M_PARA_0544741180_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-0544741180-INIT THRU PARA-0544741180-INIT-EXIT
            M_PARA_0544741180("M_PARA_0544741180_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-0544741180 THRU PARA-0544741180-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_0544741180
        /// </summary>
        private void M_PARA_0544741180(string returnMethod = "")
        {
            WS.FUNC_0544741180_ESC_FLAG.SetValue("N");                                                          //COBOL==> MOVE 'N' TO FUNC-0544741180-ESC-FLAG.
            if (returnMethod != "" && returnMethod != "M_PARA_0544741180") { M_0000_DATABASE_ROUTINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_DATABASE_ROUTINE
        /// </summary>
        /// <remarks>
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT: *****************************************************************
        ///COMMENT:                                                                 *
        ///COMMENT:  INCLUDE NAME:  SWCSZG31.                                       *
        ///COMMENT:      EAB NAME:  SWEXIR20.                                       *
        ///COMMENT:   DESCRIPTION:  0000-DATABASE-ROUTINE.                          *
        ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                             *
        ///COMMENT:                                                                 *
        ///COMMENT:      INCLUDES:  SWCSZG30  WORKING-STORAGE SECTION.              *
        ///COMMENT:                 SWCSZ053  WORKING-STORAGE SECTION.              *
        ///COMMENT:                 SWCTWA    LINKAGE SECTION.                      *
        ///COMMENT:                                                                 *
        ///COMMENT:       ACTIONS:  1. RECEIVE CLIENT-NUMBER.
        ///COMMENT:                                                                 *
        ///COMMENT:                 2. SELECT CLIENT_BASIC TABLE USING CLIENT-NUMBER
        ///COMMENT:                    AND REPLACE WITH REFERRED-ID IF DIFFERENT.
        ///COMMENT:                                                                 *
        ///COMMENT:                 3. CALCULATE (CURRENT-DATE - 2) TO BENEFIT-MONTH
        ///COMMENT:                    FIELD TO BE USED FOR FINDING CASEE ON
        ///COMMENT:                    CASE_COMP TABLE.
        ///COMMENT:                                                                 *
        ///COMMENT:                 4. SELECT CASE_COMP TABLE FOR CASH NEDICAL
        ///COMMENT:                    PROGRAMS USING CLIENT AND BENEFIT MONTH.
        ///COMMENT:                    IF A CASE WAS FOUND - SELECT THE NEWEST
        ///COMMENT:                    ADDRESS FROM THE ADDRESS TABLE USING CASE
        ///COMMENT:                    AND ADDRES TYPE 1 - END THE PROGRAM RUN.
        ///COMMENT:                 5. IF NOTHING FOUND FOR CASH MEDICAL -
        ///COMMENT:                    SELECT CASE_COMP TABLE FOR FOOD STAMPS
        ///COMMENT:                    PROGRAM USING CLIENT AND BENEFIT MONTH.
        ///COMMENT:                    IF A CASE WAS FOUND - SELECT THE NEWEST
        ///COMMENT:                    ADDRESS FROM THE ADDRESS TABLE USING CASE
        ///COMMENT:                    AND ADDRES TYPE 4 - END THE PROGRAM RUN.
        ///COMMENT:                 6. IF NOTHING FOUND FOR FOOD STAMPS -
        ///COMMENT:                    SELECT CASE_COMP TABLE FOR CHILD CARE
        ///COMMENT:                    PROGRAM USING CLIENT AND BENEFIT MONTH.
        ///COMMENT:                    IF A CASE WAS FOUND - SELECT THE NEWEST
        ///COMMENT:                    ADDRESS FROM THE ADDRESS TABLE USING CASE
        ///COMMENT:                    AND ADDRES TYPE 1 - END THE PROGRAM RUN.
        ///COMMENT:                 7. IF NOTHING FOUND FOR CHILD CARE -
        ///COMMENT:                    SELECT CASE_COMP TABLE FOR FOSTER CARE
        ///COMMENT:                    PROGRAM USING CLIENT AND BENEFIT MONTH.
        ///COMMENT:                    IF A CASE WAS FOUND - GET THE ADDRESS
        ///COMMENT:                    FROM THE BENEFIT TABLE USING CASE,
        ///COMMENT:                    PROGRAM TYPE AND BENEFIT MONTH -
        ///COMMENT:                    END PROGRAM RUN.
        ///COMMENT:                    ADDRESS TYPES:
        ///COMMENT:                           MAILING           ADDRESS         (M)
        ///COMMENT:                           RESIDENCE         ADDRESS         (R)
        ///COMMENT:                           FOOD STAMPS PAYEE ADDRESS         (F)
        ///COMMENT:                           CASH      ADDRESS                 (C)
        ///COMMENT:                 ALL ADDRESSES CONSIST OF
        ///COMMENT:                     STREET1
        ///COMMENT:                     STREET2
        ///COMMENT:                     CITY
        ///COMMENT:                     STATE
        ///COMMENT:                     ZIP-CODE
        ///COMMENT:                     ZIP-PLUS-FOUR.
        ///COMMENT:       CREATED:  31-JAN-96.
        ///COMMENT:            BY:  CTG/CEB.
        ///COMMENT: ** MAINTENANCE **************************************************
        ///COMMENT:                     CHANGE
        ///COMMENT:                     CONTRL
        ///COMMENT:  DATE       AUTHOR  NUMBER DESCRIPTION
        ///COMMENT:  ---------- ------  ------ ------------------------------------
        ///COMMENT:  07/24/99   RNORRIS        COMMENT OUT 5000-CHECK-FOR-CSE-CLIENT
        ///COMMENT:                            PR#37924 & 41583 & 16.3.370
        ///COMMENT:  09/17/99   TSTUDER        LOOP THRU BENEFIT RECORDS IF NO 'IN'
        ///COMMENT:                            FOUND; THEN IF NO ADDRESS FOUND, LOOP
        ///COMMENT:                            THRU MONTHS JUST LIKE YOU HADN'T
        ///COMMENT:                            FOUND A BENEFIT RECORD AT ALL
        ///COMMENT:  09/27/99   TSTUDER       IF PERSON NUMBER IS BLANK, RETURN W/O
        ///COMMENT:                           ADDRESS; CHANGE TO IGNORE CLOSED
        ///COMMENT:                           KSCARES CASES -- WAS RETURNING ANY
        ///COMMENT:                           ADDRESS FOR KSCARES REGARDLESS OF HOW
        ///COMMENT:                           OLD PARTICIPATION WAS
        ///COMMENT:  02/10/00   TSTUDER       IF CASE COMP RECORD FOUND AND CODED
        ///COMMENT:                           'OU' BUT THE CLIENT IS THE PI, USE
        ///COMMENT:                           THE ADDRESS FROM THIS CASE. PR 85612
        ///COMMENT:  04/14      P. LEAK       CHANGE ABABAS CALLS TO DB2 (PHASE 3)
        ///COMMENT:  12/08/2016 GADI.B        MODIFICATIONS FOR KEES PHASE3
        ///COMMENT:  08/29/2017 RKM           ADDED WITH UR TO QUERIES
        ///COMMENT:  01/26/2018 RKM           CQ60192 EXTEND LOOK BACK PERIOD FOR
        ///COMMENT:                            ADDRESS
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_0000_DATABASE_ROUTINE(string returnMethod = "")
        {
            DisplayToLog("PROGRAM IN SWEXIR20");                                                                //COBOL==> DISPLAY 'PROGRAM IN SWEXIR20'.
            WS.MV_ABEND_FIELDS.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO MV-ABEND-FIELDS.
            SetHandleCondtions(HandleCondition.ERROR, "M_8900_CICS_ABEND");                                     //COBOL==> EXEC CICS HANDLE CONDITION ERROR ( 8900-CICS-ABEND ) END-EXEC.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT:                                                                *
                                                                                                                //COMMENT:  INCLUDE NAME:  SWCSZ954 (FROM SWCSZ054).                      *
                                                                                                                //COMMENT:                                                                *
                                                                                                                //COMMENT:      EAB NAME:  SWEXIR20.                                      *
                                                                                                                //COMMENT:                                                                *
                                                                                                                //COMMENT:   DESCRIPTION:  DATABASE INITIALIZATION.                       *
                                                                                                                //COMMENT:                                                                *
                                                                                                                //COMMENT:      LOCATION:  PROCEDURE DIVISION.                            *
                                                                                                                //COMMENT:                 MUST BE HARDCOPIED INTO EAB MAIN PROCEDURE     *
                                                                                                                //COMMENT:                   DIVISION INCLUDE SWCSZG31.                   *
                                                                                                                //COMMENT:                                                                *
                                                                                                                //COMMENT:       ACTIONS:  RELEASES ANY OUTSTANDING COMMAND ID'S.         *
                                                                                                                //COMMENT:                 THIS ROUTINE REQUIRES INCLUDE SWCSZ053 IN THE  *
                                                                                                                //COMMENT:                   WORKING-STORAGE SECTION OF THIS PROGRAM.     *
                                                                                                                //COMMENT:                                                                *
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT:     CALL 'ADASTWA' USING TWA CONTROL-BLOCK.
                                                                                                                //COMMENT:     CALL SRADALNK  USING DFHEIBLK DFHCOMMAREA TWA SRMODLNK.
                                                                                                                //COMMENT:     IF RESPONSE-CODE > ZERO AND NOT = 9
                                                                                                                //COMMENT:         MOVE 'A'           TO MV-ABEND-TYPE
                                                                                                                //COMMENT:         MOVE ZERO          TO MV-ADA-FILE-NUMBER
                                                                                                                //COMMENT:         MOVE 'INI'         TO MV-ADA-FILE-ACTION
                                                                                                                //COMMENT:         MOVE RESPONSE-CODE TO MV-ADA-RESPONSE-CD
                                                                                                                //COMMENT:         GO TO 9900-DATABASE-EXIT
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  GET     SYSTEM DATE        *         YEAR/MONTH/DAY   (YYMMDD) *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  APPEND  CENTURY            * CENTURY/YEAR/MONTH/DAY (CCYYMMDD) *
                                                                                                                //COMMENT:                                                                 *
                                                                                                                //COMMENT:  COMPUTE BENEFIT DATES      * CENTURY/YEAR/MONTH     (CCYYMM)   *
                                                                                                                //COMMENT: *****************************************************************
            Control.GetLatestDateTime(WS.MV_ABS_TIME);                                                          //COBOL==> EXEC CICS ASKTIME ABSTIME ( MV-ABS-TIME ) END-EXEC.
                                                                                                                //COMMENT: PLL START
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:  MODIFIED THE FORMATTIME CICS COMMAND BECAUSE IT CAN CORRECTLY
                                                                                                                //COMMENT:  INCLUDE THE CENTURY IN THE DATE.
                                                                                                                //COMMENT: *****************************************************************
            DateConverter.ConvertABSTime(WS.MV_ABS_TIME, DateTimeFormat.YYYYMMDD, WS.MV_CCYYMMDD_X8, "", null, "");  //COBOL==> EXEC CICS FORMATTIME ABSTIME ( MV-ABS-TIME ) YYYYMMDD ( MV-CCYYMMDD-X8 ) END-EXEC.
                                                                                                                     //COMMENT: PLL END
            WS.MV_CCYYMMDD_X8.SetValue(LS.DATE_0002XX);                                                         //COBOL==> MOVE DATE-0002XX TO MV-CCYYMMDD-X8.
                                                                                                                //COMMENT:  CQ60192 CHANGE LOOK BACK PERIOD FROM 2 TO 6 MONTHS
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     CURRENT CCYYMM - 6 MONTHS                                   *
                                                                                                                //COMMENT: *****************************************************************
            WS.MV_BENEFIT_MM[4].SetValue(WS.MC_DATE_MM_MINUS_6[WS.MV_MM.AsInt()]);                              //COBOL==> MOVE MC-DATE-MM-MINUS-6 ( MV-MM ) TO MV-BENEFIT-MM ( 4 ) .
            WS.MV_BENEFIT_CCYY[4].SetComputeValue(WS.MV_CCYY.AsDecimal() - WS.MC_DATE_YY_MINUS_6[WS.MV_MM.AsInt()].AsDecimal());  //COBOL==> COMPUTE MV-BENEFIT-CCYY ( 4 ) = MV-CCYY - MC-DATE-YY-MINUS-6 ( MV-MM ) .
            WS.DB2_BENEFIT_MONTH.SetValue(WS.MV_BENEFIT_CCYYMM[4]);                                             //COBOL==> MOVE MV-BENEFIT-CCYYMM ( 4 ) TO DB2-BENEFIT-MONTH.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *** MOVE IMPORT FIELDS TO WORKING-STORAGE FIELDS.
                                                                                                                //COMMENT: *****************************************************************
            WS.MV_ADDRESS_REQUEST.SetValue(LS.FLAG_0001);                                                       //COBOL==> MOVE FLAG-0001 TO MV-ADDRESS-REQUEST.
            WS.MV_CLIENT_NUMBER_X10.SetValue(LS.NUMBER_0003);                                                   //COBOL==> MOVE NUMBER-0003 TO MV-CLIENT-NUMBER-X10.
            WS.MC_BENEFIT_DATE_INDEX.SetValue(1);                                                               //COBOL==> MOVE 1 TO MC-BENEFIT-DATE-INDEX.
            WS.MV_ADDRESS_SOURCE.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACE TO MV-ADDRESS-SOURCE.
            WS.MV_COUNTY_ABBR.SetValueWithSpaces();                                                             //COBOL==> MOVE SPACES TO MV-COUNTY-ABBR.
            WS.MV_ADDRESS.SetValueWithSpaces();                                                                 //COBOL==> MOVE SPACES TO MV-ADDRESS.
            if ((WS.MV_CLIENT_NUMBER_X10.IsSpaces())
             || (WS.MV_CLIENT_NUMBER_X10.IsEqualTo(0))) //COBOL==> IF MV-CLIENT-NUMBER-X10 = SPACES OR ZEROS
            {
                M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 12/08/2016 ADDED NEW CODE FOR DB2
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *** REPLACE INPUT CLIENT WITH PREFERRED-ID IF DIFFERENT
                                                                                                                //COMMENT: *****************************************************************
            WS.DB2_CLIENT_NUMBER.SetValue(WS.MV_CLIENT_NUMBER_X10);                                             //COBOL==> MOVE MV-CLIENT-NUMBER-X10 TO DB2-CLIENT-NUMBER.
            M_8600_SELECT_CLIENT_BASIC("M_8600_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM 8600-SELECT-CLIENT-BASIC THRU 8600-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if ((WS.CLB_CIS_PREFERRED_ID.IsGreaterThan(SPACES))
             && (!(WS.CLB_CIS_PREFERRED_ID.IsEqualTo(WS.DB2_CLIENT_NUMBER))))  //COBOL==> IF CLB-CIS-PREFERRED-ID > SPACE AND CLB-CIS-PREFERRED-ID NOT = DB2-CLIENT-NUMBER
            {
                WS.DB2_CLIENT_NUMBER.SetValue(WS.CLB_CIS_PREFERRED_ID);                                             //COBOL==> MOVE CLB-CIS-PREFERRED-ID TO DB2-CLIENT-NUMBER
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 12/08/2016 ADDED NEW CODE FOR DB2
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *** SELECT CASE_COMP TABLE FOR CASH NEDICAL
                                                                                                                //COMMENT: *****************************************************************
            M_7100_FIND_CASH_MEDICAL("M_7100_EXIT"); if (Control.ExitProgram) { return; }                         //COBOL==> PERFORM 7100-FIND-CASH-MEDICAL THRU 7100-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = ZERO
            {
                WS.DB2_ADDRESS_TYPE.SetValue(1);                                                                    //COBOL==> MOVE 1 TO DB2-ADDRESS-TYPE
                M_2100_PROC_ADDRESS("M_2100_EXIT"); if (Control.ExitProgram) { return; }                              //COBOL==> PERFORM 2100-PROC-ADDRESS THRU 2100-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 12/08/2016 ADDED NEW CODE FOR DB2
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *** SELECT CASE_COMP TABLE FOR FOOD STAMPS
                                                                                                                //COMMENT: *****************************************************************
            M_7200_FIND_FOOD_STAMPS("M_7200_EXIT"); if (Control.ExitProgram) { return; }                          //COBOL==> PERFORM 7200-FIND-FOOD-STAMPS THRU 7200-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = ZERO
            {
                WS.DB2_ADDRESS_TYPE.SetValue(4);                                                                    //COBOL==> MOVE 4 TO DB2-ADDRESS-TYPE
                M_2100_PROC_ADDRESS("M_2100_EXIT"); if (Control.ExitProgram) { return; }                              //COBOL==> PERFORM 2100-PROC-ADDRESS THRU 2100-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 12/08/2016 ADDED NEW CODE FOR DB2
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *** SELECT CASE_COMP TABLE FOR CHILD-CARE
                                                                                                                //COMMENT: *****************************************************************
            M_7300_FIND_CHILD_CARE("M_7300_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 7300-FIND-CHILD-CARE THRU 7300-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = ZERO
            {
                WS.DB2_ADDRESS_TYPE.SetValue(1);                                                                    //COBOL==> MOVE 1 TO DB2-ADDRESS-TYPE
                M_2100_PROC_ADDRESS("M_2100_EXIT"); if (Control.ExitProgram) { return; }                              //COBOL==> PERFORM 2100-PROC-ADDRESS THRU 2100-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ** GQB 12/08/2016 ADDED NEW CODE FOR DB2
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *** SELECT CASE_COMP TABLE FOR FOSTER-CARE
                                                                                                                //COMMENT: *****************************************************************
            M_7400_FIND_FOSTER_CARE("M_7400_EXIT"); if (Control.ExitProgram) { return; }                          //COBOL==> PERFORM 7400-FIND-FOSTER-CARE THRU 7400-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = ZERO
            {
                M_2200_PROC_BENEFITS("M_2200_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 2200-PROC-BENEFITS THRU 2200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT.
        }
        /// <summary>
        /// Method M_2100_PROC_ADDRESS
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 12/08/2016 - ADDED NEW CODE FOR DB2
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_2100_PROC_ADDRESS(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            M_8100_SELECT_ADDRESS("M_8100_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 8100-SELECT-ADDRESS THRU 8100-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_ADDR_EOF_YES.Value)                                                                       //COBOL==> IF WS-ADDR-EOF-YES
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(1501);                                                               //COBOL==> MOVE 1501 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue(" NF");                                                              //COBOL==> MOVE ' NF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (((WS.MV_ADDR_REQ_MAIL.Value)
             || (WS.MV_ADDR_REQ_RES.Value))
             && (WS.ADDR_CITY.IsGreaterThan(SPACES)))  //COBOL==> IF ( MV-ADDR-REQ-MAIL OR MV-ADDR-REQ-RES ) AND ADDR-CITY > SPACE
            {
                WS.MV_COUNTY_ABBR.SetValue(WS.ADDR_COUNTY_CODE);                                                    //COBOL==> MOVE ADDR-COUNTY-CODE TO MV-COUNTY-ABBR
                WS.MV_STREET1.SetValue(WS.ADDR_STREET1);                                                            //COBOL==> MOVE ADDR-STREET1 TO MV-STREET1
                WS.MV_STREET2.SetValue(WS.ADDR_STREET2);                                                            //COBOL==> MOVE ADDR-STREET2 TO MV-STREET2
                WS.MV_CITY.SetValue(WS.ADDR_CITY);                                                                  //COBOL==> MOVE ADDR-CITY TO MV-CITY
                WS.MV_STATE.SetValue(WS.ADDR_STATE);                                                                //COBOL==> MOVE ADDR-STATE TO MV-STATE
                WS.MV_ZIP_CODE_5.SetValue(WS.ADDR_ZIP_CODE);                                                        //COBOL==> MOVE ADDR-ZIP-CODE TO MV-ZIP-CODE-5
                WS.MV_ZIP_CODE_4.SetValue(WS.ADDR_ZIP_PLUS_4);                                                      //COBOL==> MOVE ADDR-ZIP-PLUS-4 TO MV-ZIP-CODE-4
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *                 MAILING ADDRESS                             ***
                                                                                                                //COMMENT: *****************************************************************
            if ((WS.MV_ADDR_REQ_MAIL.Value)
             && (WS.ADDR_CITY.IsGreaterThan(SPACES)))            //COBOL==> IF MV-ADDR-REQ-MAIL AND ADDR-CITY > SPACES
            {
                WS.MV_ADDRESS_SOURCE.SetValue("M");                                                                 //COBOL==> MOVE 'M' TO MV-ADDRESS-SOURCE
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *                 RESIDENCE ADDRESS                           ***
                                                                                                                //COMMENT: *****************************************************************
            if ((WS.MV_ADDR_REQ_RES.Value)
             && (WS.ADDR_CITY.IsGreaterThan(SPACES)))             //COBOL==> IF MV-ADDR-REQ-RES AND ADDR-CITY > SPACES
            {
                WS.MV_ADDRESS_SOURCE.SetValue("R");                                                                 //COBOL==> MOVE 'R' TO MV-ADDRESS-SOURCE
            }                                                                                                   //COBOL==> END-IF.
            M_9000_ADDRESS_ROUTE_EXIT(CheckGotoReturn(returnMethod)); return;                                   //COBOL==> GO TO 9000-ADDRESS-ROUTE-EXIT.
        }
        /// <summary>
        /// Method M_2100_EXIT
        /// </summary>
        private void M_2100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2100_EXIT") { M_2200_PROC_BENEFITS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2200_PROC_BENEFITS
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 12/08/2016 - ADDED NEW CODE FOR DB2
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_2200_PROC_BENEFITS(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            M_8200_SELECT_BENEFITS("M_8200_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 8200-SELECT-BENEFITS THRU 8200-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_BEN_EOF_YES.Value)                                                                        //COBOL==> IF WS-BEN-EOF-YES
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(151);                                                                //COBOL==> MOVE 151 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue(" NF");                                                              //COBOL==> MOVE ' NF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT: *                 MAILING ADDRESS                             ***
                                                                                                                //COMMENT: *****************************************************************
                                                                                                                //COMMENT:     IF MV-ADDR-REQ-MAIL
            if (WS.BEN_PAYEE_CITY.IsGreaterThan(SPACES))                                                        //COBOL==> IF BEN-PAYEE-CITY > SPACE
            {
                WS.MV_ADDRESS_SOURCE.SetValue("M");                                                                 //COBOL==> MOVE 'M' TO MV-ADDRESS-SOURCE
                WS.MV_STREET1.SetValue(WS.BEN_PAYEE_STREET1);                                                       //COBOL==> MOVE BEN-PAYEE-STREET1 TO MV-STREET1
                WS.MV_STREET2.SetValue(WS.BEN_PAYEE_STREET2);                                                       //COBOL==> MOVE BEN-PAYEE-STREET2 TO MV-STREET2
                WS.MV_CITY.SetValue(WS.BEN_PAYEE_CITY);                                                             //COBOL==> MOVE BEN-PAYEE-CITY TO MV-CITY
                WS.MV_STATE.SetValue(WS.BEN_PAYEE_STATE);                                                           //COBOL==> MOVE BEN-PAYEE-STATE TO MV-STATE
                WS.MV_ZIP_CODE_5.SetValue(WS.BEN_PAYEE_ZIP_CODE);                                                   //COBOL==> MOVE BEN-PAYEE-ZIP-CODE TO MV-ZIP-CODE-5
                WS.MV_ZIP_CODE_4.SetValue(WS.BEN_PAYEE_ZIP_PLUS_4);                                                 //COBOL==> MOVE BEN-PAYEE-ZIP-PLUS-4 TO MV-ZIP-CODE-4
            }                                                                                                   //COBOL==> END-IF.
            M_9000_ADDRESS_ROUTE_EXIT(CheckGotoReturn(returnMethod)); return;                                   //COBOL==> GO TO 9000-ADDRESS-ROUTE-EXIT.
        }
        /// <summary>
        /// Method M_2200_EXIT
        /// </summary>
        private void M_2200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2200_EXIT") { M_7100_FIND_CASH_MEDICAL(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7100_FIND_CASH_MEDICAL
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 12/08/2016 - ADDED NEW CODE FOR DB2
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_7100_FIND_CASH_MEDICAL(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.DCLKSD_CASE_COMP.ResetToInitialValue();                                                          //COBOL==> INITIALIZE DCLKSD-CASE-COMP.
            DbConv.ExecuteSqlQueryWithUR("SELECT TOP (1) FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , BENEFIT_MONTH INTO {0} , {1} , {2} , {3} FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = {4} AND FK_PGB_PROG_TYPE IN ( 'AF' , 'GA' , 'MA' , 'MS' , 'SI' , 'CI' , 'MP' , 'RE' , 'MK' ) AND BENEFIT_MONTH >= {5} AND BENEFIT_MONTH = ( SELECT MAX ( BENEFIT_MONTH ) FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = {6} AND FK_PGB_PROG_TYPE IN ( 'AF' , 'GA' , 'MA' , 'MS' , 'SI' , 'CI' , 'MP' , 'RE' , 'MK' ) AND BENEFIT_MONTH >= {7} ) ",  //COBOL==> EXEC SQL SELECT FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , BENEFIT_MONTH INTO :CC-FK-CLB-CLIENT-NO , :CC-FK-CSB-CASE-NO , :CC-FK-PGB-PROG-TYPE , :CC-BENEFIT-MONTH FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = :DB2-CLIENT-NUMBER AND FK_PGB_PROG_TYPE IN ( 'AF' , 'GA' , 'MA' , 'MS' , 'SI' , 'CI' , 'MP' , 'RE' , 'MK' ) AND BENEFIT_MONTH >= :DB2-BENEFIT-MONTH AND BENEFIT_MONTH = ( SELECT MAX ( BENEFIT_MONTH ) FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = :DB2-CLIENT-NUMBER AND FK_PGB_PROG_TYPE IN ( 'AF' , 'GA' , 'MA' , 'MS' , 'SI' , 'CI' , 'MP' , 'RE' , 'MK' ) AND BENEFIT_MONTH >= :DB2-BENEFIT-MONTH ) FETCH FIRST ROW ONLY WITH UR END-EXEC.
                                 WS.CC_FK_CLB_CLIENT_NO, WS.CC_FK_CSB_CASE_NO, WS.CC_FK_PGB_PROG_TYPE, WS.CC_BENEFIT_MONTH, WS.DB2_CLIENT_NUMBER, WS.DB2_BENEFIT_MONTH, WS.DB2_CLIENT_NUMBER, WS.DB2_BENEFIT_MONTH);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_7100_FIND_CASH_MEDICAL") { M_7100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7100_EXIT
        /// </summary>
        private void M_7100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7100_EXIT") { M_7200_FIND_FOOD_STAMPS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7200_FIND_FOOD_STAMPS
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_7200_FIND_FOOD_STAMPS(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.DCLKSD_CASE_COMP.ResetToInitialValue();                                                          //COBOL==> INITIALIZE DCLKSD-CASE-COMP.
            DbConv.ExecuteSqlQueryWithUR("SELECT TOP (1) FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , BENEFIT_MONTH INTO {0} , {1} , {2} , {3} FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = {4} AND FK_PGB_PROG_TYPE = 'FS' AND BENEFIT_MONTH >= {5} AND BENEFIT_MONTH = ( SELECT MAX ( BENEFIT_MONTH ) FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = {6} AND FK_PGB_PROG_TYPE = 'FS' AND BENEFIT_MONTH >= {7} ) ",  //COBOL==> EXEC SQL SELECT FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , BENEFIT_MONTH INTO :CC-FK-CLB-CLIENT-NO , :CC-FK-CSB-CASE-NO , :CC-FK-PGB-PROG-TYPE , :CC-BENEFIT-MONTH FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = :DB2-CLIENT-NUMBER AND FK_PGB_PROG_TYPE = 'FS' AND BENEFIT_MONTH >= :DB2-BENEFIT-MONTH AND BENEFIT_MONTH = ( SELECT MAX ( BENEFIT_MONTH ) FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = :DB2-CLIENT-NUMBER AND FK_PGB_PROG_TYPE = 'FS' AND BENEFIT_MONTH >= :DB2-BENEFIT-MONTH ) FETCH FIRST ROW ONLY WITH UR END-EXEC.
                                 WS.CC_FK_CLB_CLIENT_NO, WS.CC_FK_CSB_CASE_NO, WS.CC_FK_PGB_PROG_TYPE, WS.CC_BENEFIT_MONTH, WS.DB2_CLIENT_NUMBER, WS.DB2_BENEFIT_MONTH, WS.DB2_CLIENT_NUMBER, WS.DB2_BENEFIT_MONTH);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_7200_FIND_FOOD_STAMPS") { M_7200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7200_EXIT
        /// </summary>
        private void M_7200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7200_EXIT") { M_7300_FIND_CHILD_CARE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7300_FIND_CHILD_CARE
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_7300_FIND_CHILD_CARE(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.DCLKSD_CASE_COMP.ResetToInitialValue();                                                          //COBOL==> INITIALIZE DCLKSD-CASE-COMP.
            DbConv.ExecuteSqlQueryWithUR("SELECT TOP (1) FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , BENEFIT_MONTH INTO {0} , {1} , {2} , {3} FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = {4} AND FK_PGB_PROG_TYPE = 'CC' AND BENEFIT_MONTH >= {5} AND BENEFIT_MONTH = ( SELECT MAX ( BENEFIT_MONTH ) FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = {6} AND FK_PGB_PROG_TYPE = 'CC' AND BENEFIT_MONTH >= {7} ) ",  //COBOL==> EXEC SQL SELECT FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , BENEFIT_MONTH INTO :CC-FK-CLB-CLIENT-NO , :CC-FK-CSB-CASE-NO , :CC-FK-PGB-PROG-TYPE , :CC-BENEFIT-MONTH FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = :DB2-CLIENT-NUMBER AND FK_PGB_PROG_TYPE = 'CC' AND BENEFIT_MONTH >= :DB2-BENEFIT-MONTH AND BENEFIT_MONTH = ( SELECT MAX ( BENEFIT_MONTH ) FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = :DB2-CLIENT-NUMBER AND FK_PGB_PROG_TYPE = 'CC' AND BENEFIT_MONTH >= :DB2-BENEFIT-MONTH ) FETCH FIRST ROW ONLY WITH UR END-EXEC.
                                 WS.CC_FK_CLB_CLIENT_NO, WS.CC_FK_CSB_CASE_NO, WS.CC_FK_PGB_PROG_TYPE, WS.CC_BENEFIT_MONTH, WS.DB2_CLIENT_NUMBER, WS.DB2_BENEFIT_MONTH, WS.DB2_CLIENT_NUMBER, WS.DB2_BENEFIT_MONTH);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_7300_FIND_CHILD_CARE") { M_7300_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7300_EXIT
        /// </summary>
        private void M_7300_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7300_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7300_EXIT") { M_7400_FIND_FOSTER_CARE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7400_FIND_FOSTER_CARE
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_7400_FIND_FOSTER_CARE(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.DCLKSD_CASE_COMP.ResetToInitialValue();                                                          //COBOL==> INITIALIZE DCLKSD-CASE-COMP.
            DbConv.ExecuteSqlQueryWithUR("SELECT TOP (1) FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , BENEFIT_MONTH INTO {0} , {1} , {2} , {3} FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = {4} AND FK_PGB_PROG_TYPE IN ( 'FC' , 'AS' ) AND BENEFIT_MONTH >= {5} AND BENEFIT_MONTH = ( SELECT MAX ( BENEFIT_MONTH ) FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = {6} AND FK_PGB_PROG_TYPE IN ( 'FC' , 'AS' ) AND BENEFIT_MONTH >= {7} ) ",  //COBOL==> EXEC SQL SELECT FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE , BENEFIT_MONTH INTO :CC-FK-CLB-CLIENT-NO , :CC-FK-CSB-CASE-NO , :CC-FK-PGB-PROG-TYPE , :CC-BENEFIT-MONTH FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = :DB2-CLIENT-NUMBER AND FK_PGB_PROG_TYPE IN ( 'FC' , 'AS' ) AND BENEFIT_MONTH >= :DB2-BENEFIT-MONTH AND BENEFIT_MONTH = ( SELECT MAX ( BENEFIT_MONTH ) FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = :DB2-CLIENT-NUMBER AND FK_PGB_PROG_TYPE IN ( 'FC' , 'AS' ) AND BENEFIT_MONTH >= :DB2-BENEFIT-MONTH ) FETCH FIRST ROW ONLY WITH UR END-EXEC.
                                 WS.CC_FK_CLB_CLIENT_NO, WS.CC_FK_CSB_CASE_NO, WS.CC_FK_PGB_PROG_TYPE, WS.CC_BENEFIT_MONTH, WS.DB2_CLIENT_NUMBER, WS.DB2_BENEFIT_MONTH, WS.DB2_CLIENT_NUMBER, WS.DB2_BENEFIT_MONTH);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_7400_FIND_FOSTER_CARE") { M_7400_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_7400_EXIT
        /// </summary>
        private void M_7400_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_7400_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_7400_EXIT") { M_8100_SELECT_ADDRESS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8100_SELECT_ADDRESS
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 12/08/2016 - ADDED NEW CODE FOR DB2
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_8100_SELECT_ADDRESS(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.DCLKSD_ADDRESS.ResetToInitialValue();                                                            //COBOL==> INITIALIZE DCLKSD-ADDRESS.
            DbConv.ExecuteSqlQueryWithUR("SELECT TOP (1) ADDRESS_TYPE , STREET1 , STREET2 , CITY , STATE , ZIP_CODE , ZIP_PLUS_4 , COUNTY_CODE , EFFECTIVE_DATE , FK_CSB_CASE_NO INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} , {8} , {9} FROM KSD_ADDRESS WHERE FK_CSB_CASE_NO = {10} AND ADDRESS_TYPE = {11} AND EFFECTIVE_DATE = ( SELECT MAX ( EFFECTIVE_DATE ) FROM KSD_ADDRESS WHERE FK_CSB_CASE_NO = {12} AND ADDRESS_TYPE = {13} ) ",  //COBOL==> EXEC SQL SELECT ADDRESS_TYPE , STREET1 , STREET2 , CITY , STATE , ZIP_CODE , ZIP_PLUS_4 , COUNTY_CODE , EFFECTIVE_DATE , FK_CSB_CASE_NO INTO :ADDR-ADDRESS-TYPE , :ADDR-STREET1 , :ADDR-STREET2 , :ADDR-CITY , :ADDR-STATE , :ADDR-ZIP-CODE , :ADDR-ZIP-PLUS-4 , :ADDR-COUNTY-CODE , :ADDR-EFFECTIVE-DATE , :ADDR-FK-CSB-CASE-NO FROM KSD_ADDRESS WHERE FK_CSB_CASE_NO = :CC-FK-CSB-CASE-NO AND ADDRESS_TYPE = :DB2-ADDRESS-TYPE AND EFFECTIVE_DATE = ( SELECT MAX ( EFFECTIVE_DATE ) FROM KSD_ADDRESS WHERE FK_CSB_CASE_NO = :CC-FK-CSB-CASE-NO AND ADDRESS_TYPE = :DB2-ADDRESS-TYPE ) FETCH FIRST ROW ONLY WITH UR END-EXEC.
                                 WS.ADDR_ADDRESS_TYPE, WS.ADDR_STREET1, WS.ADDR_STREET2, WS.ADDR_CITY, WS.ADDR_STATE, WS.ADDR_ZIP_CODE, WS.ADDR_ZIP_PLUS_4, WS.ADDR_COUNTY_CODE, WS.ADDR_EFFECTIVE_DATE, WS.ADDR_FK_CSB_CASE_NO, WS.CC_FK_CSB_CASE_NO, WS.DB2_ADDRESS_TYPE, WS.CC_FK_CSB_CASE_NO, WS.DB2_ADDRESS_TYPE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                WS.WS_ADDR_EOF_NO.SetValue(true);                                                                   //COBOL==> SET WS-ADDR-EOF-NO TO TRUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_ADDR_EOF_YES.SetValue(true);                                                                  //COBOL==> SET WS-ADDR-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(1501);                                                               //COBOL==> MOVE 1501 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8100_SELECT_ADDRESS") { M_8100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8100_EXIT
        /// </summary>
        private void M_8100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8100_EXIT") { M_8200_SELECT_BENEFITS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8200_SELECT_BENEFITS
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 12/08/2016 - ADDED NEW CODE FOR DB2
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_8200_SELECT_BENEFITS(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.DCLKSD_BENEFITS.ResetToInitialValue();                                                           //COBOL==> INITIALIZE DCLKSD-BENEFITS.
            DbConv.ExecuteSqlQueryWithUR("SELECT TOP (1) PAYEE_STREET1 , PAYEE_STREET2 , PAYEE_CITY , PAYEE_STATE , PAYEE_ZIP_CODE , PAYEE_ZIP_PLUS_4 INTO {0} , {1} , {2} , {3} , {4} , {5} FROM KSD_BENEFITS WHERE FK_CSB_CASE_NO = {6} AND FK_PGB_PROG_TYPE = {7} AND FK_PMO_PROG_BEN_MO >= {8} AND FK_PMO_PROG_BEN_MO = ( SELECT MAX ( FK_PMO_PROG_BEN_MO ) FROM KSD_BENEFITS WHERE FK_CSB_CASE_NO = {9} AND FK_PGB_PROG_TYPE = {10} AND FK_PMO_PROG_BEN_MO >= {11} ) ",  //COBOL==> EXEC SQL SELECT PAYEE_STREET1 , PAYEE_STREET2 , PAYEE_CITY , PAYEE_STATE , PAYEE_ZIP_CODE , PAYEE_ZIP_PLUS_4 INTO :BEN-PAYEE-STREET1 , :BEN-PAYEE-STREET2 , :BEN-PAYEE-CITY , :BEN-PAYEE-STATE , :BEN-PAYEE-ZIP-CODE , :BEN-PAYEE-ZIP-PLUS-4 FROM KSD_BENEFITS WHERE FK_CSB_CASE_NO = :CC-FK-CSB-CASE-NO AND FK_PGB_PROG_TYPE = :CC-FK-PGB-PROG-TYPE AND FK_PMO_PROG_BEN_MO >= :DB2-BENEFIT-MONTH AND FK_PMO_PROG_BEN_MO = ( SELECT MAX ( FK_PMO_PROG_BEN_MO ) FROM KSD_BENEFITS WHERE FK_CSB_CASE_NO = :CC-FK-CSB-CASE-NO AND FK_PGB_PROG_TYPE = :CC-FK-PGB-PROG-TYPE AND FK_PMO_PROG_BEN_MO >= :DB2-BENEFIT-MONTH ) FETCH FIRST ROW ONLY WITH UR END-EXEC.
                                 WS.BEN_PAYEE_STREET1, WS.BEN_PAYEE_STREET2, WS.BEN_PAYEE_CITY, WS.BEN_PAYEE_STATE, WS.BEN_PAYEE_ZIP_CODE, WS.BEN_PAYEE_ZIP_PLUS_4, WS.CC_FK_CSB_CASE_NO, WS.CC_FK_PGB_PROG_TYPE, WS.DB2_BENEFIT_MONTH, WS.CC_FK_CSB_CASE_NO, WS.CC_FK_PGB_PROG_TYPE, WS.DB2_BENEFIT_MONTH);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_BEN_EOF_YES.SetValue(true);                                                                   //COBOL==> SET WS-BEN-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(151);                                                                //COBOL==> MOVE 151 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8200_SELECT_BENEFITS") { M_8200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8200_EXIT
        /// </summary>
        private void M_8200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8200_EXIT") { M_8600_SELECT_CLIENT_BASIC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8600_SELECT_CLIENT_BASIC
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 12/08/2016 - ADDED NEW CODE FOR DB2
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_8600_SELECT_CLIENT_BASIC(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.DCLKSD_CLIENT_BASIC.ResetToInitialValue();                                                       //COBOL==> INITIALIZE DCLKSD-CLIENT-BASIC.
            DbConv.ExecuteSqlQueryWithUR("SELECT CIS_PREFERRED_ID INTO {0} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {1} ",  //COBOL==> EXEC SQL SELECT CIS_PREFERRED_ID INTO :CLB-CIS-PREFERRED-ID FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :DB2-CLIENT-NUMBER WITH UR END-EXEC.
                                 WS.CLB_CIS_PREFERRED_ID, WS.DB2_CLIENT_NUMBER);
            if (!(DbConv.SQLCA.SQLCODE.IsEqualTo(0)))                                                           //COBOL==> IF SQLCODE NOT = ZERO
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue(" RI");                                                              //COBOL==> MOVE ' RI' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_8600_SELECT_CLIENT_BASIC") { M_8600_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8600_EXIT
        /// </summary>
        private void M_8600_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8600_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8600_EXIT") { M_8900_CICS_ABEND(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8900_CICS_ABEND
        /// </summary>
        /// <remarks>
        ///COMMENT: ***************************************************************
        ///COMMENT:           CHECK FOR KSC CASE ADDRESS INFORMATION             **
        ///COMMENT: ***************************************************************
        /// </remarks>
        private void M_8900_CICS_ABEND(string returnMethod = "")
        {
            WS.MV_ABEND_TYPE.SetValue("C");                                                                     //COBOL==> MOVE 'C' TO MV-ABEND-TYPE.
            WS.MV_CICS_RESOURCE_NM.SetValue(Control.EIBRSRCE);                                                  //COBOL==> MOVE EIBRSRCE TO MV-CICS-RESOURCE-NM.
            WS.MV_CICS_FUNCTION_CD.SetValue(Control.EIBFN);                                                     //COBOL==> MOVE EIBFN TO MV-CICS-FUNCTION-CD.
            WS.MV_CICS_RESPONSE_CD.SetValue(Control.EIBRCODE);                                                  //COBOL==> MOVE EIBRCODE TO MV-CICS-RESPONSE-CD.
            if (returnMethod != "" && returnMethod != "M_8900_CICS_ABEND") { M_9000_ADDRESS_ROUTE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9000_ADDRESS_ROUTE_EXIT
        /// </summary>
        private void M_9000_ADDRESS_ROUTE_EXIT(string returnMethod = "")
        {
            //COMMENT: *****************************************************************
            //COMMENT:  ADDED IF STATEMENT TO RESET STREET1 TO STREET2 IF DATA
            //COMMENT:   EXISTS IN STREET2 BUT NOT IN STREET1         TNS 7/20/99
            //COMMENT: *****************************************************************
            if (WS.MV_STREET1.IsSpaces())                                                                       //COBOL==> IF MV-STREET1 = SPACES
            {
                if (!(WS.MV_STREET2.IsSpaces()))                                                                    //COBOL==> IF MV-STREET2 NOT = SPACES
                {
                    WS.MV_STREET1.SetValue(WS.MV_STREET2);                                                              //COBOL==> MOVE MV-STREET2 TO MV-STREET1
                    WS.MV_STREET2.SetValueWithSpaces();                                                                 //COBOL==> MOVE SPACES TO MV-STREET2
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            LS.STREET_1_0005.SetValue(WS.MV_STREET1);                                                           //COBOL==> MOVE MV-STREET1 TO STREET-1-0005.
            LS.STREET_2_0005.SetValue(WS.MV_STREET2);                                                           //COBOL==> MOVE MV-STREET2 TO STREET-2-0005.
            LS.CITY_0005.SetValue(WS.MV_CITY);                                                                  //COBOL==> MOVE MV-CITY TO CITY-0005.
            LS.STATE_0005.SetValue(WS.MV_STATE);                                                                //COBOL==> MOVE MV-STATE TO STATE-0005.
            if ((WS.MV_ZIP_CODE_5_X5.IsNumericValue())
             && (WS.MV_ZIP_CODE_5_X5.IsGreaterThan("00000")))  //COBOL==> IF MV-ZIP-CODE-5-X5 NUMERIC AND MV-ZIP-CODE-5-X5 > '00000'
            {
                LS.ZIP_CODE_0005.SetValue(WS.MV_ZIP_CODE_5_X5);                                                     //COBOL==> MOVE MV-ZIP-CODE-5-X5 TO ZIP-CODE-0005
                if ((WS.MV_ZIP_CODE_4_X4.IsNumericValue())
             && (WS.MV_ZIP_CODE_4_X4.IsGreaterThan("0000")))  //COBOL==> IF MV-ZIP-CODE-4-X4 NUMERIC AND MV-ZIP-CODE-4-X4 > '0000'
                {
                    LS.ZIP4_0005.SetValue(WS.MV_ZIP_CODE_4_X4);                                                         //COBOL==> MOVE MV-ZIP-CODE-4-X4 TO ZIP4-0005
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            LS.TYPE_0005.SetValue(WS.MV_ADDRESS_SOURCE);                                                        //COBOL==> MOVE MV-ADDRESS-SOURCE TO TYPE-0005.
            LS.COUNTY_0005.SetValue(WS.MV_COUNTY_ABBR);                                                         //COBOL==> MOVE MV-COUNTY-ABBR TO COUNTY-0005.
            M_9900_DATABASE_EXIT(CheckGotoReturn(returnMethod)); return;                                        //COBOL==> GO TO 9900-DATABASE-EXIT.
        }
        /// <summary>
        /// Method M_9900_DATABASE_EXIT
        /// </summary>
        private void M_9900_DATABASE_EXIT(string returnMethod = "")
        {
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                LS.TYPE_0004.SetValue(WS.MV_ABEND_TYPE);                                                            //COBOL==> MOVE MV-ABEND-TYPE TO TYPE-0004
                LS.ADABAS_FILE_NUMBER_0004.SetValue(WS.MV_ADA_FILE_NUMBER);                                         //COBOL==> MOVE MV-ADA-FILE-NUMBER TO ADABAS-FILE-NUMBER-0004
                LS.ADABAS_FILE_ACTION_0004.SetValue(WS.MV_ADA_FILE_ACTION);                                         //COBOL==> MOVE MV-ADA-FILE-ACTION TO ADABAS-FILE-ACTION-0004
                LS.ADABAS_RESPONSE_CD_0004.SetValue(WS.MV_ADA_RESPONSE_CD);                                         //COBOL==> MOVE MV-ADA-RESPONSE-CD TO ADABAS-RESPONSE-CD-0004
                LS.CICS_RESOURCE_NM_0004.SetValue(WS.MV_CICS_RESOURCE_NM);                                          //COBOL==> MOVE MV-CICS-RESOURCE-NM TO CICS-RESOURCE-NM-0004
                LS.CICS_FUNCTION_CD_0004.SetValue(WS.MV_CICS_FUNCTION_CD);                                          //COBOL==> MOVE MV-CICS-FUNCTION-CD TO CICS-FUNCTION-CD-0004
                LS.CICS_RESPONSE_CD_0004.SetValue(WS.MV_CICS_RESPONSE_CD);                                          //COBOL==> MOVE MV-CICS-RESPONSE-CD TO CICS-RESPONSE-CD-0004
            }                                                                                                   //COBOL==> END-IF.
            DisplayToLog("**** START SWEXIR20 *****");                                                          //COBOL==> DISPLAY "**** START SWEXIR20 *****"
            DisplayToLog("ABEND     INFO.:" + LS.ABEND_DATA_0004ET.AsString());                                 //COBOL==> DISPLAY "ABEND     INFO.:" ABEND-DATA-0004ET
            DisplayToLog("INPUT     INFO.:" + LS.A_0544741183_IA.AsString());                                   //COBOL==> DISPLAY "INPUT     INFO.:" A-0544741183-IA
            DisplayToLog("OUTPUT    INFO.:" + LS.OUTPUT_AE_0005EV.AsString());                                  //COBOL==> DISPLAY "OUTPUT    INFO.:" OUTPUT-AE-0005EV
            DisplayToLog("****  END  SWEXIR20 *****");                                                          //COBOL==> DISPLAY "****  END  SWEXIR20 *****".
            if (returnMethod != "" && returnMethod != "M_9900_DATABASE_EXIT") { M_PARA_0544741180_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0544741180_EXIT
        /// </summary>
        private void M_PARA_0544741180_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0544741180_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_0544741180_EXIT") { M_PARA_0544741180_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0544741180_INIT
        /// </summary>
        private void M_PARA_0544741180_INIT(string returnMethod = "")
        {
            LS.OUTPUT_0004EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE OUTPUT-0004EV
            LS.OUTPUT_AE_0005EV.ResetToInitialValue();                                                          //COBOL==> INITIALIZE OUTPUT-AE-0005EV .
            if (returnMethod != "" && returnMethod != "M_PARA_0544741180_INIT") { M_PARA_0544741180_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0544741180_INIT_EXIT
        /// </summary>
        private void M_PARA_0544741180_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0544741180_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
