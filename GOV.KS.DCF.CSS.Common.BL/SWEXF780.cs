#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2021
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2021-12-07 03:11:25 PM
   **        *   FROM COBOL PGM   :  SWEXF780
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   ***************************************************************
                       SOURCE CODE GENERATED BY
                        ALLFUSION(R) GEN R7.6
            COPYRIGHT (C) 2010 CA.  ALL RIGHTS RESERVED.
       NAME: EAB_STARS_VOUCHER                DATE: 2010/02/08
       TARGET OS:   MVS                       TIME: 09:01:35
       TARGET DBMS: DB2                       USER: SWDPDJD
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
       DYNAMIC LINK (Z/OS) USED BUS SYS DEFAULT OF "Yes"
   ***************************************************************
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.IO.Common;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region File Section Class
    internal class SWEXF780_fd : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string FileSection = "SWEXF780_fd_FileSection";
            internal const string SEQ_FILE = "SEQ_FILE";
            internal const string SEQFILE_REC = "SEQFILE_REC";
        }
        #endregion

        #region Direct-access element properties
        public IFileLink SEQ_FILE { get; set; }
        public IField SEQFILE_REC { get { return GetElementByName<IField>(Names.SEQFILE_REC); } }


        internal SWEXF780_ws WS;
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the FileSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.SEQFILE_REC, FieldType.String, 110);

        }

        protected override string GetRecordName()
        {
            return Names.FileSection;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            IFileHandler FileHandler = InversionContainer.GetImplementingObject<IFileHandler>();

            SEQ_FILE = FileHandler.GetFile("STARSEXT");
            SEQ_FILE.StatusField = WS.WS_FILE_STATUS;
            SEQ_FILE.AssociatedBuffer = SEQFILE_REC;
            SEQ_FILE.RecordLength = 113;
        }
        #endregion

        #region Constructors
        public SWEXF780_fd(SWEXF780_ws ws)
            : base()
        {
            this.WS = ws;
            Initialize();

        }
        #endregion
    }
    #endregion File Section Class
    #region Working Storage Class
    internal class SWEXF780_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXF780_ws_WorkingStorage";
            internal const string WS_FILE_STATUS = "WS_FILE_STATUS";
            internal const string WS_SEQFILE_REC = "WS_SEQFILE_REC";
            internal const string WS_VCHR_NBR_01 = "WS_VCHR_NBR_01";
            internal const string WS_PRCSS_DT_02 = "WS_PRCSS_DT_02";
            internal const string WS_FLG_03 = "WS_FLG_03";
            internal const string WS_FLG_04 = "WS_FLG_04";
            internal const string WS_TRACE_NBR_05 = "WS_TRACE_NBR_05";
            internal const string WS_TRACE_NBR_06 = "WS_TRACE_NBR_06";
            internal const string WS_VCHR_TOT_07 = "WS_VCHR_TOT_07";
            internal const string WS_FIN_YR_09 = "WS_FIN_YR_09";
            internal const string WS_SFX1_10 = "WS_SFX1_10";
            internal const string WS_BUSINESS_UNIT = "WS_BUSINESS_UNIT";
            internal const string WS_FUND_CODE = "WS_FUND_CODE";
            internal const string WS_PROGRAM_CODE = "WS_PROGRAM_CODE";
            internal const string WS_DEPT_ID = "WS_DEPT_ID";
            internal const string WS_ACCOUNT_NUMBER = "WS_ACCOUNT_NUMBER";
            internal const string WS_BUDGET_UNIT = "WS_BUDGET_UNIT";
            internal const string WS_SMART_R_21 = "WS_SMART_R_21";
            internal const string WS_SUBRPT_CD_24 = "WS_SUBRPT_CD_24";
        }
        #endregion

        #region Direct-access element properties
        public IField WS_FILE_STATUS { get { return GetElementByName<IField>(Names.WS_FILE_STATUS); } }
        public IGroup WS_SEQFILE_REC { get { return GetElementByName<IGroup>(Names.WS_SEQFILE_REC); } }
        public IField WS_VCHR_NBR_01 { get { return GetElementByName<IField>(Names.WS_VCHR_NBR_01); } }
        public IField WS_PRCSS_DT_02 { get { return GetElementByName<IField>(Names.WS_PRCSS_DT_02); } }
        public IField WS_FLG_03 { get { return GetElementByName<IField>(Names.WS_FLG_03); } }
        public IField WS_FLG_04 { get { return GetElementByName<IField>(Names.WS_FLG_04); } }
        public IField WS_TRACE_NBR_05 { get { return GetElementByName<IField>(Names.WS_TRACE_NBR_05); } }
        public IField WS_TRACE_NBR_06 { get { return GetElementByName<IField>(Names.WS_TRACE_NBR_06); } }
        public IField WS_VCHR_TOT_07 { get { return GetElementByName<IField>(Names.WS_VCHR_TOT_07); } }
        public IField WS_FIN_YR_09 { get { return GetElementByName<IField>(Names.WS_FIN_YR_09); } }
        public IField WS_SFX1_10 { get { return GetElementByName<IField>(Names.WS_SFX1_10); } }
        public IField WS_BUSINESS_UNIT { get { return GetElementByName<IField>(Names.WS_BUSINESS_UNIT); } }
        public IField WS_FUND_CODE { get { return GetElementByName<IField>(Names.WS_FUND_CODE); } }
        public IField WS_PROGRAM_CODE { get { return GetElementByName<IField>(Names.WS_PROGRAM_CODE); } }
        public IField WS_DEPT_ID { get { return GetElementByName<IField>(Names.WS_DEPT_ID); } }
        public IField WS_ACCOUNT_NUMBER { get { return GetElementByName<IField>(Names.WS_ACCOUNT_NUMBER); } }
        public IField WS_BUDGET_UNIT { get { return GetElementByName<IField>(Names.WS_BUDGET_UNIT); } }
        public IField WS_SMART_R_21 { get { return GetElementByName<IField>(Names.WS_SMART_R_21); } }
        public IField WS_SUBRPT_CD_24 { get { return GetElementByName<IField>(Names.WS_SUBRPT_CD_24); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewFillerField(FieldType.String, 27, "WORKING STORAGE STARTS HERE");
            recordDef.CreateNewField(Names.WS_FILE_STATUS, FieldType.String, 2);

            recordDef.CreateNewGroup(Names.WS_SEQFILE_REC, (WS_SEQFILE_REC) =>
           {
               WS_SEQFILE_REC.CreateNewField(Names.WS_VCHR_NBR_01, FieldType.String, 8);
               WS_SEQFILE_REC.CreateNewField(Names.WS_PRCSS_DT_02, FieldType.SignedNumeric, 8);
               WS_SEQFILE_REC.CreateNewField(Names.WS_FLG_03, FieldType.String, 1);
               WS_SEQFILE_REC.CreateNewField(Names.WS_FLG_04, FieldType.String, 1);
               WS_SEQFILE_REC.CreateNewField(Names.WS_TRACE_NBR_05, FieldType.SignedNumeric, 15);
               WS_SEQFILE_REC.CreateNewField(Names.WS_TRACE_NBR_06, FieldType.SignedNumeric, 15);
               WS_SEQFILE_REC.CreateNewField(Names.WS_VCHR_TOT_07, FieldType.SignedNumeric, 9, null, 2);
               WS_SEQFILE_REC.CreateNewField(Names.WS_FIN_YR_09, FieldType.String, 2);
               WS_SEQFILE_REC.CreateNewField(Names.WS_SFX1_10, FieldType.String, 2);
               WS_SEQFILE_REC.CreateNewField(Names.WS_BUSINESS_UNIT, FieldType.String, 5);
               WS_SEQFILE_REC.CreateNewField(Names.WS_FUND_CODE, FieldType.String, 4);
               WS_SEQFILE_REC.CreateNewField(Names.WS_PROGRAM_CODE, FieldType.String, 5);
               WS_SEQFILE_REC.CreateNewField(Names.WS_DEPT_ID, FieldType.String, 10);
               WS_SEQFILE_REC.CreateNewField(Names.WS_ACCOUNT_NUMBER, FieldType.String, 6);
               WS_SEQFILE_REC.CreateNewField(Names.WS_BUDGET_UNIT, FieldType.String, 4);
               WS_SEQFILE_REC.CreateNewField(Names.WS_SMART_R_21, FieldType.String, 1);
               WS_SEQFILE_REC.CreateNewField(Names.WS_SUBRPT_CD_24, FieldType.String, 4);
               WS_SEQFILE_REC.CreateNewFillerField(10, FillWith.Hashes);
           });

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXF780_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXF780_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string WHEN_SUCCESSFUL_SF = "WHEN_SUCCESSFUL_SF";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string DB_ERROR_SF = "DB_ERROR_SF";
            internal const string ABORT_SHOW_DBMS_MSG_SF = "ABORT_SHOW_DBMS_MSG_SF";
            internal const string ABORT_SHOW_USER_MSG_SF = "ABORT_SHOW_USER_MSG_SF";
            internal const string RETRY_TRAN_REQUESTED_SF = "RETRY_TRAN_REQUESTED_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string ASYNC_WHEN_AVAILABLE_SF = "ASYNC_WHEN_AVAILABLE_SF";
            internal const string ASYNC_WHEN_ACCEPTED_SF = "ASYNC_WHEN_ACCEPTED_SF";
            internal const string ASYNC_WHEN_NOT_ACCEPTED_SF = "ASYNC_WHEN_NOT_ACCEPTED_SF";
            internal const string ASYNC_WHEN_INVALID_ID_SF = "ASYNC_WHEN_INVALID_ID_SF";
            internal const string ASYNC_WHEN_PENDING_SF = "ASYNC_WHEN_PENDING_SF";
            internal const string ASYNC_WHEN_SERVER_ERROR_SF = "ASYNC_WHEN_SERVER_ERROR_SF";
            internal const string ASYNC_WHEN_COMM_ERROR_SF = "ASYNC_WHEN_COMM_ERROR_SF";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DB_DEADLOCK_TIMOUT_FL_LS = "DB_DEADLOCK_TIMOUT_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_TIRDATE_SKIP_VAL = "PSMGR_TIRDATE_SKIP_VAL";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string TX_RETRY_COUNT = "TX_RETRY_COUNT";
            internal const string TX_USER_RETRY_ALLOWED = "TX_USER_RETRY_ALLOWED";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string PSMGR_ASYNC_DATA = "PSMGR_ASYNC_DATA";
            internal const string ASYNC_MODE = "ASYNC_MODE";
            internal const string FLOW_TYPE_SYNC = "FLOW_TYPE_SYNC";
            internal const string FLOW_TYPE_ASYNC = "FLOW_TYPE_ASYNC";
            internal const string FLOW_TYPE_NO_RESPONSE = "FLOW_TYPE_NO_RESPONSE";
            internal const string ASYNC_FLOW_STATUS_TABLE_PTR = "ASYNC_FLOW_STATUS_TABLE_PTR";
            internal const string ASYNC_SERVER_LOC_TABLE_PTR = "ASYNC_SERVER_LOC_TABLE_PTR";
            internal const string IMPORT_STARS_VOUCHER_NU_0001EV = "IMPORT_STARS_VOUCHER_NU_0001EV";
            internal const string EXTERNAL_0001ET = "EXTERNAL_0001ET";
            internal const string TEXT_LINE_8_0001AS = "TEXT_LINE_8_0001AS";
            internal const string TEXT_LINE_8_0001 = "TEXT_LINE_8_0001";
            internal const string TEXT_LINE_8_0001XX = "TEXT_LINE_8_0001XX";
            internal const string IMPORT_0002EV = "IMPORT_0002EV";
            internal const string PROGRAM_PROCESSING_INFO_0002ET = "PROGRAM_PROCESSING_INFO_0002ET";
            internal const string PROCESS_DATE_0002AS = "PROCESS_DATE_0002AS";
            internal const string PROCESS_DATE_0002 = "PROCESS_DATE_0002";
            internal const string PROCESS_DATE_0002XX = "PROCESS_DATE_0002XX";
            internal const string IMPORT_BREAKER_EFT_0003EV = "IMPORT_BREAKER_EFT_0003EV";
            internal const string IEF_SUPPLIED_0003ET = "IEF_SUPPLIED_0003ET";
            internal const string FLAG_0003AS = "FLAG_0003AS";
            internal const string FLAG_0003 = "FLAG_0003";
            internal const string FLAG_0003XX = "FLAG_0003XX";
            internal const string IMPORT_BREAKER_WAR_0004EV = "IMPORT_BREAKER_WAR_0004EV";
            internal const string IEF_SUPPLIED_0004ET = "IEF_SUPPLIED_0004ET";
            internal const string FLAG_0004AS = "FLAG_0004AS";
            internal const string FLAG_0004 = "FLAG_0004";
            internal const string FLAG_0004XX = "FLAG_0004XX";
            internal const string IMPORT_FIRST_0005EV = "IMPORT_FIRST_0005EV";
            internal const string ELECTRONIC_FUND_TRANSMI_0005ET = "ELECTRONIC_FUND_TRANSMI_0005ET";
            internal const string TRACE_NUMBER_0005AS = "TRACE_NUMBER_0005AS";
            internal const string TRACE_NUMBER_0005 = "TRACE_NUMBER_0005";
            internal const string TRACE_NUMBER_0005XX = "TRACE_NUMBER_0005XX";
            internal const string IMPORT_LAST_0006EV = "IMPORT_LAST_0006EV";
            internal const string ELECTRONIC_FUND_TRANSMI_0006ET = "ELECTRONIC_FUND_TRANSMI_0006ET";
            internal const string TRACE_NUMBER_0006AS = "TRACE_NUMBER_0006AS";
            internal const string TRACE_NUMBER_0006 = "TRACE_NUMBER_0006";
            internal const string TRACE_NUMBER_0006XX = "TRACE_NUMBER_0006XX";
            internal const string IMPORT_AMT_0007EV = "IMPORT_AMT_0007EV";
            internal const string STARS_VOUCHER_TOTALS_0007ET = "STARS_VOUCHER_TOTALS_0007ET";
            internal const string VOUCHER_TOTAL_0007AS = "VOUCHER_TOTAL_0007AS";
            internal const string VOUCHER_TOTAL_0007 = "VOUCHER_TOTAL_0007";
            internal const string VOUCHER_TOTAL_0007XX = "VOUCHER_TOTAL_0007XX";
            internal const string IMPORT_0008EV = "IMPORT_0008EV";
            internal const string SMART_TRANSACTION_ENTRY_0008ET = "SMART_TRANSACTION_ENTRY_0008ET";
            internal const string SMART_CLASS_TYPE_0008AS = "SMART_CLASS_TYPE_0008AS";
            internal const string SMART_CLASS_TYPE_0008 = "SMART_CLASS_TYPE_0008";
            internal const string SMART_CLASS_TYPE_0008XX = "SMART_CLASS_TYPE_0008XX";
            internal const string FIN_YR_0008AS = "FIN_YR_0008AS";
            internal const string FIN_YR_0008 = "FIN_YR_0008";
            internal const string FIN_YR_0008XX = "FIN_YR_0008XX";
            internal const string SUFFIX_1_0008AS = "SUFFIX_1_0008AS";
            internal const string SUFFIX_1_0008 = "SUFFIX_1_0008";
            internal const string SUFFIX_1_0008XX = "SUFFIX_1_0008XX";
            internal const string BUSINESS_UNIT_0008AS = "BUSINESS_UNIT_0008AS";
            internal const string BUSINESS_UNIT_0008 = "BUSINESS_UNIT_0008";
            internal const string BUSINESS_UNIT_0008XX = "BUSINESS_UNIT_0008XX";
            internal const string FUND_CODE_0008AS = "FUND_CODE_0008AS";
            internal const string FUND_CODE_0008 = "FUND_CODE_0008";
            internal const string FUND_CODE_0008XX = "FUND_CODE_0008XX";
            internal const string PROGRAM_CODE_0008AS = "PROGRAM_CODE_0008AS";
            internal const string PROGRAM_CODE_0008 = "PROGRAM_CODE_0008";
            internal const string PROGRAM_CODE_0008XX = "PROGRAM_CODE_0008XX";
            internal const string DEPT_ID_0008AS = "DEPT_ID_0008AS";
            internal const string DEPT_ID_0008 = "DEPT_ID_0008";
            internal const string DEPT_ID_0008XX = "DEPT_ID_0008XX";
            internal const string ACCOUNT_NUMBER_0008AS = "ACCOUNT_NUMBER_0008AS";
            internal const string ACCOUNT_NUMBER_0008 = "ACCOUNT_NUMBER_0008";
            internal const string ACCOUNT_NUMBER_0008XX = "ACCOUNT_NUMBER_0008XX";
            internal const string BUDGET_UNIT_0008AS = "BUDGET_UNIT_0008AS";
            internal const string BUDGET_UNIT_0008 = "BUDGET_UNIT_0008";
            internal const string BUDGET_UNIT_0008XX = "BUDGET_UNIT_0008XX";
            internal const string SMART_R_0008AS = "SMART_R_0008AS";
            internal const string SMART_R_0008 = "SMART_R_0008";
            internal const string SMART_R_0008XX = "SMART_R_0008XX";
            internal const string IMPORT_0009EV = "IMPORT_0009EV";
            internal const string REPORT_PARMS_0009ET = "REPORT_PARMS_0009ET";
            internal const string PARM1_0009AS = "PARM1_0009AS";
            internal const string PARM1_0009 = "PARM1_0009";
            internal const string PARM1_0009XX = "PARM1_0009XX";
            internal const string PARM2_0009AS = "PARM2_0009AS";
            internal const string PARM2_0009 = "PARM2_0009";
            internal const string PARM2_0009XX = "PARM2_0009XX";
            internal const string SUBREPORT_CODE_0009AS = "SUBREPORT_CODE_0009AS";
            internal const string SUBREPORT_CODE_0009 = "SUBREPORT_CODE_0009";
            internal const string SUBREPORT_CODE_0009XX = "SUBREPORT_CODE_0009XX";
            internal const string EXPORT_0010EV = "EXPORT_0010EV";
            internal const string REPORT_PARMS_0010ET = "REPORT_PARMS_0010ET";
            internal const string PARM1_0010AS = "PARM1_0010AS";
            internal const string PARM1_0010 = "PARM1_0010";
            internal const string PARM1_0010XX = "PARM1_0010XX";
            internal const string PARM2_0010AS = "PARM2_0010AS";
            internal const string PARM2_0010 = "PARM2_0010";
            internal const string PARM2_0010XX = "PARM2_0010XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField WHEN_SUCCESSFUL_SF { get { return GetElementByName<ICheckField>(Names.WHEN_SUCCESSFUL_SF); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField DB_ERROR_SF { get { return GetElementByName<ICheckField>(Names.DB_ERROR_SF); } }
        public ICheckField ABORT_SHOW_DBMS_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_DBMS_MSG_SF); } }
        public ICheckField ABORT_SHOW_USER_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_USER_MSG_SF); } }
        public ICheckField RETRY_TRAN_REQUESTED_SF { get { return GetElementByName<ICheckField>(Names.RETRY_TRAN_REQUESTED_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public ICheckField ASYNC_WHEN_AVAILABLE_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_AVAILABLE_SF); } }
        public ICheckField ASYNC_WHEN_ACCEPTED_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_ACCEPTED_SF); } }
        public ICheckField ASYNC_WHEN_NOT_ACCEPTED_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_NOT_ACCEPTED_SF); } }
        public ICheckField ASYNC_WHEN_INVALID_ID_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_INVALID_ID_SF); } }
        public ICheckField ASYNC_WHEN_PENDING_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_PENDING_SF); } }
        public ICheckField ASYNC_WHEN_SERVER_ERROR_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_SERVER_ERROR_SF); } }
        public ICheckField ASYNC_WHEN_COMM_ERROR_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_COMM_ERROR_SF); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DB_DEADLOCK_TIMOUT_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_DEADLOCK_TIMOUT_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_TIRDATE_SKIP_VAL { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SKIP_VAL); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IField TX_RETRY_COUNT { get { return GetElementByName<IField>(Names.TX_RETRY_COUNT); } }
        public IField TX_USER_RETRY_ALLOWED { get { return GetElementByName<IField>(Names.TX_USER_RETRY_ALLOWED); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup PSMGR_ASYNC_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ASYNC_DATA); } }
        public IField ASYNC_MODE { get { return GetElementByName<IField>(Names.ASYNC_MODE); } }
        public ICheckField FLOW_TYPE_SYNC { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_SYNC); } }
        public ICheckField FLOW_TYPE_ASYNC { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_ASYNC); } }
        public ICheckField FLOW_TYPE_NO_RESPONSE { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_NO_RESPONSE); } }
        public IField ASYNC_FLOW_STATUS_TABLE_PTR { get { return GetElementByName<IField>(Names.ASYNC_FLOW_STATUS_TABLE_PTR); } }
        public IField ASYNC_SERVER_LOC_TABLE_PTR { get { return GetElementByName<IField>(Names.ASYNC_SERVER_LOC_TABLE_PTR); } }
        public IGroup IMPORT_STARS_VOUCHER_NU_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_STARS_VOUCHER_NU_0001EV); } }
        public IGroup EXTERNAL_0001ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0001ET); } }
        public IField TEXT_LINE_8_0001AS { get { return GetElementByName<IField>(Names.TEXT_LINE_8_0001AS); } }
        public IField TEXT_LINE_8_0001 { get { return GetElementByName<IField>(Names.TEXT_LINE_8_0001); } }
        public IField TEXT_LINE_8_0001XX { get { return GetElementByName<IField>(Names.TEXT_LINE_8_0001XX); } }
        public IGroup IMPORT_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_0002EV); } }
        public IGroup PROGRAM_PROCESSING_INFO_0002ET { get { return GetElementByName<IGroup>(Names.PROGRAM_PROCESSING_INFO_0002ET); } }
        public IField PROCESS_DATE_0002AS { get { return GetElementByName<IField>(Names.PROCESS_DATE_0002AS); } }
        public IField PROCESS_DATE_0002 { get { return GetElementByName<IField>(Names.PROCESS_DATE_0002); } }
        public IField PROCESS_DATE_0002XX { get { return GetElementByName<IField>(Names.PROCESS_DATE_0002XX); } }
        public IGroup IMPORT_BREAKER_EFT_0003EV { get { return GetElementByName<IGroup>(Names.IMPORT_BREAKER_EFT_0003EV); } }
        public IGroup IEF_SUPPLIED_0003ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0003ET); } }
        public IField FLAG_0003AS { get { return GetElementByName<IField>(Names.FLAG_0003AS); } }
        public IField FLAG_0003 { get { return GetElementByName<IField>(Names.FLAG_0003); } }
        public IField FLAG_0003XX { get { return GetElementByName<IField>(Names.FLAG_0003XX); } }
        public IGroup IMPORT_BREAKER_WAR_0004EV { get { return GetElementByName<IGroup>(Names.IMPORT_BREAKER_WAR_0004EV); } }
        public IGroup IEF_SUPPLIED_0004ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0004ET); } }
        public IField FLAG_0004AS { get { return GetElementByName<IField>(Names.FLAG_0004AS); } }
        public IField FLAG_0004 { get { return GetElementByName<IField>(Names.FLAG_0004); } }
        public IField FLAG_0004XX { get { return GetElementByName<IField>(Names.FLAG_0004XX); } }
        public IGroup IMPORT_FIRST_0005EV { get { return GetElementByName<IGroup>(Names.IMPORT_FIRST_0005EV); } }
        public IGroup ELECTRONIC_FUND_TRANSMI_0005ET { get { return GetElementByName<IGroup>(Names.ELECTRONIC_FUND_TRANSMI_0005ET); } }
        public IField TRACE_NUMBER_0005AS { get { return GetElementByName<IField>(Names.TRACE_NUMBER_0005AS); } }
        public IField TRACE_NUMBER_0005 { get { return GetElementByName<IField>(Names.TRACE_NUMBER_0005); } }
        public IField TRACE_NUMBER_0005XX { get { return GetElementByName<IField>(Names.TRACE_NUMBER_0005XX); } }
        public IGroup IMPORT_LAST_0006EV { get { return GetElementByName<IGroup>(Names.IMPORT_LAST_0006EV); } }
        public IGroup ELECTRONIC_FUND_TRANSMI_0006ET { get { return GetElementByName<IGroup>(Names.ELECTRONIC_FUND_TRANSMI_0006ET); } }
        public IField TRACE_NUMBER_0006AS { get { return GetElementByName<IField>(Names.TRACE_NUMBER_0006AS); } }
        public IField TRACE_NUMBER_0006 { get { return GetElementByName<IField>(Names.TRACE_NUMBER_0006); } }
        public IField TRACE_NUMBER_0006XX { get { return GetElementByName<IField>(Names.TRACE_NUMBER_0006XX); } }
        public IGroup IMPORT_AMT_0007EV { get { return GetElementByName<IGroup>(Names.IMPORT_AMT_0007EV); } }
        public IGroup STARS_VOUCHER_TOTALS_0007ET { get { return GetElementByName<IGroup>(Names.STARS_VOUCHER_TOTALS_0007ET); } }
        public IField VOUCHER_TOTAL_0007AS { get { return GetElementByName<IField>(Names.VOUCHER_TOTAL_0007AS); } }
        public IField VOUCHER_TOTAL_0007 { get { return GetElementByName<IField>(Names.VOUCHER_TOTAL_0007); } }
        public IField VOUCHER_TOTAL_0007XX { get { return GetElementByName<IField>(Names.VOUCHER_TOTAL_0007XX); } }
        public IGroup IMPORT_0008EV { get { return GetElementByName<IGroup>(Names.IMPORT_0008EV); } }
        public IGroup SMART_TRANSACTION_ENTRY_0008ET { get { return GetElementByName<IGroup>(Names.SMART_TRANSACTION_ENTRY_0008ET); } }
        public IField SMART_CLASS_TYPE_0008AS { get { return GetElementByName<IField>(Names.SMART_CLASS_TYPE_0008AS); } }
        public IField SMART_CLASS_TYPE_0008 { get { return GetElementByName<IField>(Names.SMART_CLASS_TYPE_0008); } }
        public IField SMART_CLASS_TYPE_0008XX { get { return GetElementByName<IField>(Names.SMART_CLASS_TYPE_0008XX); } }
        public IField FIN_YR_0008AS { get { return GetElementByName<IField>(Names.FIN_YR_0008AS); } }
        public IField FIN_YR_0008 { get { return GetElementByName<IField>(Names.FIN_YR_0008); } }
        public IField FIN_YR_0008XX { get { return GetElementByName<IField>(Names.FIN_YR_0008XX); } }
        public IField SUFFIX_1_0008AS { get { return GetElementByName<IField>(Names.SUFFIX_1_0008AS); } }
        public IField SUFFIX_1_0008 { get { return GetElementByName<IField>(Names.SUFFIX_1_0008); } }
        public IField SUFFIX_1_0008XX { get { return GetElementByName<IField>(Names.SUFFIX_1_0008XX); } }
        public IField BUSINESS_UNIT_0008AS { get { return GetElementByName<IField>(Names.BUSINESS_UNIT_0008AS); } }
        public IField BUSINESS_UNIT_0008 { get { return GetElementByName<IField>(Names.BUSINESS_UNIT_0008); } }
        public IField BUSINESS_UNIT_0008XX { get { return GetElementByName<IField>(Names.BUSINESS_UNIT_0008XX); } }
        public IField FUND_CODE_0008AS { get { return GetElementByName<IField>(Names.FUND_CODE_0008AS); } }
        public IField FUND_CODE_0008 { get { return GetElementByName<IField>(Names.FUND_CODE_0008); } }
        public IField FUND_CODE_0008XX { get { return GetElementByName<IField>(Names.FUND_CODE_0008XX); } }
        public IField PROGRAM_CODE_0008AS { get { return GetElementByName<IField>(Names.PROGRAM_CODE_0008AS); } }
        public IField PROGRAM_CODE_0008 { get { return GetElementByName<IField>(Names.PROGRAM_CODE_0008); } }
        public IField PROGRAM_CODE_0008XX { get { return GetElementByName<IField>(Names.PROGRAM_CODE_0008XX); } }
        public IField DEPT_ID_0008AS { get { return GetElementByName<IField>(Names.DEPT_ID_0008AS); } }
        public IField DEPT_ID_0008 { get { return GetElementByName<IField>(Names.DEPT_ID_0008); } }
        public IField DEPT_ID_0008XX { get { return GetElementByName<IField>(Names.DEPT_ID_0008XX); } }
        public IField ACCOUNT_NUMBER_0008AS { get { return GetElementByName<IField>(Names.ACCOUNT_NUMBER_0008AS); } }
        public IField ACCOUNT_NUMBER_0008 { get { return GetElementByName<IField>(Names.ACCOUNT_NUMBER_0008); } }
        public IField ACCOUNT_NUMBER_0008XX { get { return GetElementByName<IField>(Names.ACCOUNT_NUMBER_0008XX); } }
        public IField BUDGET_UNIT_0008AS { get { return GetElementByName<IField>(Names.BUDGET_UNIT_0008AS); } }
        public IField BUDGET_UNIT_0008 { get { return GetElementByName<IField>(Names.BUDGET_UNIT_0008); } }
        public IField BUDGET_UNIT_0008XX { get { return GetElementByName<IField>(Names.BUDGET_UNIT_0008XX); } }
        public IField SMART_R_0008AS { get { return GetElementByName<IField>(Names.SMART_R_0008AS); } }
        public IField SMART_R_0008 { get { return GetElementByName<IField>(Names.SMART_R_0008); } }
        public IField SMART_R_0008XX { get { return GetElementByName<IField>(Names.SMART_R_0008XX); } }
        public IGroup IMPORT_0009EV { get { return GetElementByName<IGroup>(Names.IMPORT_0009EV); } }
        public IGroup REPORT_PARMS_0009ET { get { return GetElementByName<IGroup>(Names.REPORT_PARMS_0009ET); } }
        public IField PARM1_0009AS { get { return GetElementByName<IField>(Names.PARM1_0009AS); } }
        public IField PARM1_0009 { get { return GetElementByName<IField>(Names.PARM1_0009); } }
        public IField PARM1_0009XX { get { return GetElementByName<IField>(Names.PARM1_0009XX); } }
        public IField PARM2_0009AS { get { return GetElementByName<IField>(Names.PARM2_0009AS); } }
        public IField PARM2_0009 { get { return GetElementByName<IField>(Names.PARM2_0009); } }
        public IField PARM2_0009XX { get { return GetElementByName<IField>(Names.PARM2_0009XX); } }
        public IField SUBREPORT_CODE_0009AS { get { return GetElementByName<IField>(Names.SUBREPORT_CODE_0009AS); } }
        public IField SUBREPORT_CODE_0009 { get { return GetElementByName<IField>(Names.SUBREPORT_CODE_0009); } }
        public IField SUBREPORT_CODE_0009XX { get { return GetElementByName<IField>(Names.SUBREPORT_CODE_0009XX); } }
        public IGroup EXPORT_0010EV { get { return GetElementByName<IGroup>(Names.EXPORT_0010EV); } }
        public IGroup REPORT_PARMS_0010ET { get { return GetElementByName<IGroup>(Names.REPORT_PARMS_0010ET); } }
        public IField PARM1_0010AS { get { return GetElementByName<IField>(Names.PARM1_0010AS); } }
        public IField PARM1_0010 { get { return GetElementByName<IField>(Names.PARM1_0010); } }
        public IField PARM1_0010XX { get { return GetElementByName<IField>(Names.PARM1_0010XX); } }
        public IField PARM2_0010AS { get { return GetElementByName<IField>(Names.PARM2_0010AS); } }
        public IField PARM2_0010 { get { return GetElementByName<IField>(Names.PARM2_0010); } }
        public IField PARM2_0010XX { get { return GetElementByName<IField>(Names.PARM2_0010XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.WHEN_SUCCESSFUL_SF, SPACES)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.DB_ERROR_SF, "DB")
                       .NewCheckField(Names.ABORT_SHOW_DBMS_MSG_SF, "AB")
                       .NewCheckField(Names.ABORT_SHOW_USER_MSG_SF, "AM")
                       .NewCheckField(Names.RETRY_TRAN_REQUESTED_SF, "RT")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       .NewCheckField(Names.ASYNC_WHEN_AVAILABLE_SF, SPACES)
                       .NewCheckField(Names.ASYNC_WHEN_ACCEPTED_SF, SPACES)
                       .NewCheckField(Names.ASYNC_WHEN_NOT_ACCEPTED_SF, "NA")
                       .NewCheckField(Names.ASYNC_WHEN_INVALID_ID_SF, "II")
                       .NewCheckField(Names.ASYNC_WHEN_PENDING_SF, "PE")
                       .NewCheckField(Names.ASYNC_WHEN_SERVER_ERROR_SF, "SS")
                       .NewCheckField(Names.ASYNC_WHEN_COMM_ERROR_SF, "CE")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DB_DEADLOCK_TIMOUT_FL_LS, "DT")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d7", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d7) =>
                   {
                       FILLER_d7.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d7.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d7.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_SKIP_VAL, FieldType.String, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(95, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 8);
               });
               GLOBDATA.CreateNewField(Names.TX_RETRY_COUNT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_USER_RETRY_ALLOWED, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(3, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ASYNC_DATA, (PSMGR_ASYNC_DATA) =>
               {
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_MODE, FieldType.String, 1)
                       .NewCheckField(Names.FLOW_TYPE_SYNC, SPACE)
                       .NewCheckField(Names.FLOW_TYPE_ASYNC, "A")
                       .NewCheckField(Names.FLOW_TYPE_NO_RESPONSE, "N")
                       ;
                   PSMGR_ASYNC_DATA.CreateNewFillerField(1, FillWith.Hashes);
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_FLOW_STATUS_TABLE_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_SERVER_LOC_TABLE_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewFillerField(189, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_STARS_VOUCHER_NU_0001EV, (IMPORT_STARS_VOUCHER_NU_0001EV) =>
           {
               IMPORT_STARS_VOUCHER_NU_0001EV.CreateNewGroup(Names.EXTERNAL_0001ET, (EXTERNAL_0001ET) =>
               {
                   EXTERNAL_0001ET.CreateNewField(Names.TEXT_LINE_8_0001AS, FieldType.String, 1);

                   IField TEXT_LINE_8_0001_local = EXTERNAL_0001ET.CreateNewField(Names.TEXT_LINE_8_0001, FieldType.String, 8);
                   EXTERNAL_0001ET.CreateNewFieldRedefine(Names.TEXT_LINE_8_0001XX, FieldType.String, TEXT_LINE_8_0001_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0002EV, (IMPORT_0002EV) =>
           {
               IMPORT_0002EV.CreateNewGroup(Names.PROGRAM_PROCESSING_INFO_0002ET, (PROGRAM_PROCESSING_INFO_0002ET) =>
               {
                   PROGRAM_PROCESSING_INFO_0002ET.CreateNewField(Names.PROCESS_DATE_0002AS, FieldType.String, 1);

                   IField PROCESS_DATE_0002_local = PROGRAM_PROCESSING_INFO_0002ET.CreateNewField(Names.PROCESS_DATE_0002, FieldType.SignedNumeric, 8);
                   PROGRAM_PROCESSING_INFO_0002ET.CreateNewFieldRedefine(Names.PROCESS_DATE_0002XX, FieldType.String, PROCESS_DATE_0002_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_BREAKER_EFT_0003EV, (IMPORT_BREAKER_EFT_0003EV) =>
           {
               IMPORT_BREAKER_EFT_0003EV.CreateNewGroup(Names.IEF_SUPPLIED_0003ET, (IEF_SUPPLIED_0003ET) =>
               {
                   IEF_SUPPLIED_0003ET.CreateNewField(Names.FLAG_0003AS, FieldType.String, 1);

                   IField FLAG_0003_local = IEF_SUPPLIED_0003ET.CreateNewField(Names.FLAG_0003, FieldType.String, 1);
                   IEF_SUPPLIED_0003ET.CreateNewFieldRedefine(Names.FLAG_0003XX, FieldType.String, FLAG_0003_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_BREAKER_WAR_0004EV, (IMPORT_BREAKER_WAR_0004EV) =>
           {
               IMPORT_BREAKER_WAR_0004EV.CreateNewGroup(Names.IEF_SUPPLIED_0004ET, (IEF_SUPPLIED_0004ET) =>
               {
                   IEF_SUPPLIED_0004ET.CreateNewField(Names.FLAG_0004AS, FieldType.String, 1);

                   IField FLAG_0004_local = IEF_SUPPLIED_0004ET.CreateNewField(Names.FLAG_0004, FieldType.String, 1);
                   IEF_SUPPLIED_0004ET.CreateNewFieldRedefine(Names.FLAG_0004XX, FieldType.String, FLAG_0004_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_FIRST_0005EV, (IMPORT_FIRST_0005EV) =>
           {
               IMPORT_FIRST_0005EV.CreateNewGroup(Names.ELECTRONIC_FUND_TRANSMI_0005ET, (ELECTRONIC_FUND_TRANSMI_0005ET) =>
               {
                   ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.TRACE_NUMBER_0005AS, FieldType.String, 1);

                   IField TRACE_NUMBER_0005_local = ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewField(Names.TRACE_NUMBER_0005, FieldType.SignedNumeric, 15);
                   ELECTRONIC_FUND_TRANSMI_0005ET.CreateNewFieldRedefine(Names.TRACE_NUMBER_0005XX, FieldType.String, TRACE_NUMBER_0005_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_LAST_0006EV, (IMPORT_LAST_0006EV) =>
           {
               IMPORT_LAST_0006EV.CreateNewGroup(Names.ELECTRONIC_FUND_TRANSMI_0006ET, (ELECTRONIC_FUND_TRANSMI_0006ET) =>
               {
                   ELECTRONIC_FUND_TRANSMI_0006ET.CreateNewField(Names.TRACE_NUMBER_0006AS, FieldType.String, 1);

                   IField TRACE_NUMBER_0006_local = ELECTRONIC_FUND_TRANSMI_0006ET.CreateNewField(Names.TRACE_NUMBER_0006, FieldType.SignedNumeric, 15);
                   ELECTRONIC_FUND_TRANSMI_0006ET.CreateNewFieldRedefine(Names.TRACE_NUMBER_0006XX, FieldType.String, TRACE_NUMBER_0006_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_AMT_0007EV, (IMPORT_AMT_0007EV) =>
           {
               IMPORT_AMT_0007EV.CreateNewGroup(Names.STARS_VOUCHER_TOTALS_0007ET, (STARS_VOUCHER_TOTALS_0007ET) =>
               {
                   STARS_VOUCHER_TOTALS_0007ET.CreateNewField(Names.VOUCHER_TOTAL_0007AS, FieldType.String, 1);

                   IField VOUCHER_TOTAL_0007_local = STARS_VOUCHER_TOTALS_0007ET.CreateNewField(Names.VOUCHER_TOTAL_0007, FieldType.SignedNumeric, 9, null, 2);
                   STARS_VOUCHER_TOTALS_0007ET.CreateNewFieldRedefine(Names.VOUCHER_TOTAL_0007XX, FieldType.String, VOUCHER_TOTAL_0007_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0008EV, (IMPORT_0008EV) =>
           {
               IMPORT_0008EV.CreateNewGroup(Names.SMART_TRANSACTION_ENTRY_0008ET, (SMART_TRANSACTION_ENTRY_0008ET) =>
               {
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.SMART_CLASS_TYPE_0008AS, FieldType.String, 1);

                   IField SMART_CLASS_TYPE_0008_local = SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.SMART_CLASS_TYPE_0008, FieldType.String, 10);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewFieldRedefine(Names.SMART_CLASS_TYPE_0008XX, FieldType.String, SMART_CLASS_TYPE_0008_local, 10);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.FIN_YR_0008AS, FieldType.String, 1);

                   IField FIN_YR_0008_local = SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.FIN_YR_0008, FieldType.String, 2);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewFieldRedefine(Names.FIN_YR_0008XX, FieldType.String, FIN_YR_0008_local, 2);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.SUFFIX_1_0008AS, FieldType.String, 1);

                   IField SUFFIX_1_0008_local = SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.SUFFIX_1_0008, FieldType.String, 2);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewFieldRedefine(Names.SUFFIX_1_0008XX, FieldType.String, SUFFIX_1_0008_local, 2);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.BUSINESS_UNIT_0008AS, FieldType.String, 1);

                   IField BUSINESS_UNIT_0008_local = SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.BUSINESS_UNIT_0008, FieldType.String, 5);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewFieldRedefine(Names.BUSINESS_UNIT_0008XX, FieldType.String, BUSINESS_UNIT_0008_local, 5);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.FUND_CODE_0008AS, FieldType.String, 1);

                   IField FUND_CODE_0008_local = SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.FUND_CODE_0008, FieldType.String, 4);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewFieldRedefine(Names.FUND_CODE_0008XX, FieldType.String, FUND_CODE_0008_local, 4);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.PROGRAM_CODE_0008AS, FieldType.String, 1);

                   IField PROGRAM_CODE_0008_local = SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.PROGRAM_CODE_0008, FieldType.String, 5);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewFieldRedefine(Names.PROGRAM_CODE_0008XX, FieldType.String, PROGRAM_CODE_0008_local, 5);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.DEPT_ID_0008AS, FieldType.String, 1);

                   IField DEPT_ID_0008_local = SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.DEPT_ID_0008, FieldType.String, 10);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewFieldRedefine(Names.DEPT_ID_0008XX, FieldType.String, DEPT_ID_0008_local, 10);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.ACCOUNT_NUMBER_0008AS, FieldType.String, 1);

                   IField ACCOUNT_NUMBER_0008_local = SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.ACCOUNT_NUMBER_0008, FieldType.String, 6);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewFieldRedefine(Names.ACCOUNT_NUMBER_0008XX, FieldType.String, ACCOUNT_NUMBER_0008_local, 6);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.BUDGET_UNIT_0008AS, FieldType.String, 1);

                   IField BUDGET_UNIT_0008_local = SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.BUDGET_UNIT_0008, FieldType.String, 4);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewFieldRedefine(Names.BUDGET_UNIT_0008XX, FieldType.String, BUDGET_UNIT_0008_local, 4);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.SMART_R_0008AS, FieldType.String, 1);

                   IField SMART_R_0008_local = SMART_TRANSACTION_ENTRY_0008ET.CreateNewField(Names.SMART_R_0008, FieldType.String, 1);
                   SMART_TRANSACTION_ENTRY_0008ET.CreateNewFieldRedefine(Names.SMART_R_0008XX, FieldType.String, SMART_R_0008_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0009EV, (IMPORT_0009EV) =>
           {
               IMPORT_0009EV.CreateNewGroup(Names.REPORT_PARMS_0009ET, (REPORT_PARMS_0009ET) =>
               {
                   REPORT_PARMS_0009ET.CreateNewField(Names.PARM1_0009AS, FieldType.String, 1);

                   IField PARM1_0009_local = REPORT_PARMS_0009ET.CreateNewField(Names.PARM1_0009, FieldType.String, 2);
                   REPORT_PARMS_0009ET.CreateNewFieldRedefine(Names.PARM1_0009XX, FieldType.String, PARM1_0009_local, 2);
                   REPORT_PARMS_0009ET.CreateNewField(Names.PARM2_0009AS, FieldType.String, 1);

                   IField PARM2_0009_local = REPORT_PARMS_0009ET.CreateNewField(Names.PARM2_0009, FieldType.String, 2);
                   REPORT_PARMS_0009ET.CreateNewFieldRedefine(Names.PARM2_0009XX, FieldType.String, PARM2_0009_local, 2);
                   REPORT_PARMS_0009ET.CreateNewField(Names.SUBREPORT_CODE_0009AS, FieldType.String, 1);

                   IField SUBREPORT_CODE_0009_local = REPORT_PARMS_0009ET.CreateNewField(Names.SUBREPORT_CODE_0009, FieldType.String, 4);
                   REPORT_PARMS_0009ET.CreateNewFieldRedefine(Names.SUBREPORT_CODE_0009XX, FieldType.String, SUBREPORT_CODE_0009_local, 4);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_0010EV, (EXPORT_0010EV) =>
           {
               EXPORT_0010EV.CreateNewGroup(Names.REPORT_PARMS_0010ET, (REPORT_PARMS_0010ET) =>
               {
                   REPORT_PARMS_0010ET.CreateNewField(Names.PARM1_0010AS, FieldType.String, 1);

                   IField PARM1_0010_local = REPORT_PARMS_0010ET.CreateNewField(Names.PARM1_0010, FieldType.String, 2);
                   REPORT_PARMS_0010ET.CreateNewFieldRedefine(Names.PARM1_0010XX, FieldType.String, PARM1_0010_local, 2);
                   REPORT_PARMS_0010ET.CreateNewField(Names.PARM2_0010AS, FieldType.String, 1);

                   IField PARM2_0010_local = REPORT_PARMS_0010ET.CreateNewField(Names.PARM2_0010, FieldType.String, 2);
                   REPORT_PARMS_0010ET.CreateNewFieldRedefine(Names.PARM2_0010XX, FieldType.String, PARM2_0010_local, 2);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(GLOBDATA, args, 2);
            SetPassedParm(IMPORT_STARS_VOUCHER_NU_0001EV, args, 3);
            SetPassedParm(IMPORT_0002EV, args, 4);
            SetPassedParm(IMPORT_BREAKER_EFT_0003EV, args, 5);
            SetPassedParm(IMPORT_BREAKER_WAR_0004EV, args, 6);
            SetPassedParm(IMPORT_FIRST_0005EV, args, 7);
            SetPassedParm(IMPORT_LAST_0006EV, args, 8);
            SetPassedParm(IMPORT_AMT_0007EV, args, 9);
            SetPassedParm(IMPORT_0008EV, args, 10);
            SetPassedParm(IMPORT_0009EV, args, 11);
            SetPassedParm(EXPORT_0010EV, args, 12);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(GLOBDATA, args, 2);
            SetReturnParm(IMPORT_STARS_VOUCHER_NU_0001EV, args, 3);
            SetReturnParm(IMPORT_0002EV, args, 4);
            SetReturnParm(IMPORT_BREAKER_EFT_0003EV, args, 5);
            SetReturnParm(IMPORT_BREAKER_WAR_0004EV, args, 6);
            SetReturnParm(IMPORT_FIRST_0005EV, args, 7);
            SetReturnParm(IMPORT_LAST_0006EV, args, 8);
            SetReturnParm(IMPORT_AMT_0007EV, args, 9);
            SetReturnParm(IMPORT_0008EV, args, 10);
            SetReturnParm(IMPORT_0009EV, args, 11);
            SetReturnParm(EXPORT_0010EV, args, 12);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXF780 : EABBase
    {

        #region Public Constructors
        public SWEXF780()
            : base()
        {
            this.ProgramName.SetValue("SWEXF780");

            WS = new SWEXF780_ws();
            FD = new SWEXF780_fd(WS);
            LS = new SWEXF780_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXF780_ws WS;

        //==== File Data Class ========================================
        private SWEXF780_fd FD;

        //==== Linkage Section Data Class ========================================
        private SWEXF780_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , GLOBDATA , IMPORT-STARS-VOUCHER-NU-0001EV , IMPORT-0002EV , IMPORT-BREAKER-EFT-0003EV , IMPORT-BREAKER-WAR-0004EV , IMPORT-FIRST-0005EV , IMPORT-LAST-0006EV , IMPORT-AMT-0007EV , IMPORT-0008EV , IMPORT-0009EV , EXPORT-0010EV.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_0298963613(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_0298963613
        /// </summary>
        private void M_MAIN_0298963613(string returnMethod = "")
        {
            M_PARA_0298963613_INIT("M_PARA_0298963613_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-0298963613-INIT THRU PARA-0298963613-INIT-EXIT
            M_PARA_0298963613("M_PARA_0298963613_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-0298963613 THRU PARA-0298963613-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_0298963613
        /// </summary>
        private void M_PARA_0298963613(string returnMethod = "")
        {
            if (returnMethod != "" && returnMethod != "M_PARA_0298963613") { M_A000_MAIN_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_A000_MAIN_LINE
        /// </summary>
        /// <remarks>
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT: ******************************************
        ///COMMENT:  THIS  CODE SWCSZG79 IS A PART OF SWEXF780*
        ///COMMENT: ******************************************
        ///COMMENT: IF A NEW STUB IS GENERATED CHANGE
        ///COMMENT: ***********************************************************
        /// </remarks>
        private void M_A000_MAIN_LINE(string returnMethod = "")
        {
            M_B000_INIT_FIELDS("M_B000_INIT_FIELDS_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM B000-INIT-FIELDS THRU B000-INIT-FIELDS-EXIT.
                                                                                                                  // EvaluateList !LS.PARM1_0009!                                                                     //COBOL==> EVALUATE PARM1-0009
            if ((LS.PARM1_0009.IsEqualTo("OF")))                                                                //COBOL==> WHEN 'OF'
            {
                FD.SEQ_FILE.OpenFile(FileAccessMode.Write);                                                         //COBOL==> OPEN OUTPUT SEQ-FILE
            }                                                                                                //COBOL==> WHEN 'GR'
            else
            if ((LS.PARM1_0009.IsEqualTo("GR")))
            {
                M_B100_SETUP_REC("M_B100_SETUP_REC_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM B100-SETUP-REC THRU B100-SETUP-REC-EXIT
                FD.SEQ_FILE.WriteLine(WS.WS_SEQFILE_REC.AsBytes);                                                   //COBOL==> WRITE SEQFILE-REC FROM WS-SEQFILE-REC
            }                                                                                                //COBOL==> WHEN 'CF'
            else
            if ((LS.PARM1_0009.IsEqualTo("CF")))
            {
                FD.SEQ_FILE.CloseFile();                                                                            //COBOL==> CLOSE SEQ-FILE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (WS.WS_FILE_STATUS.IsEqualTo("00"))                                                              //COBOL==> IF WS-FILE-STATUS = '00'
            {
                LS.PARM1_0010.SetValueWithSpaces();                                                                 //COBOL==> MOVE SPACES TO PARM1-0010
            }                                                                                                   //COBOL==> END-IF.
            M_9999_FINISHED(CheckGotoReturn(returnMethod)); return;                                             //COBOL==> GO TO 9999-FINISHED.
        }
        /// <summary>
        /// Method M_A000_MAIN_LINE_EXIT
        /// </summary>
        private void M_A000_MAIN_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_A000_MAIN_LINE_EXIT") { return; }                                            //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_A000_MAIN_LINE_EXIT") { M_B000_INIT_FIELDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_B000_INIT_FIELDS
        /// </summary>
        private void M_B000_INIT_FIELDS(string returnMethod = "")
        {
            if ((LS.TEXT_LINE_8_0001XX.IsEqualTo(HIGH_VALUES))
             || (LS.TEXT_LINE_8_0001XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF TEXT-LINE-8-0001XX = HIGH-VALUES OR TEXT-LINE-8-0001XX = LOW-VALUES
            {
                LS.TEXT_LINE_8_0001.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO TEXT-LINE-8-0001
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.PROCESS_DATE_0002.IsNumericValue()))                                                      //COBOL==> IF PROCESS-DATE-0002 IS NOT NUMERIC
            {
                LS.PROCESS_DATE_0002.SetValueWithZeroes();                                                          //COBOL==> MOVE ZEROS TO PROCESS-DATE-0002
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.FLAG_0003XX.IsEqualTo(HIGH_VALUES))
             || (LS.FLAG_0003XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF FLAG-0003XX = HIGH-VALUES OR FLAG-0003XX = LOW-VALUES
            {
                LS.FLAG_0003.SetValueWithSpaces();                                                                  //COBOL==> MOVE SPACES TO FLAG-0003
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.FLAG_0004XX.IsEqualTo(HIGH_VALUES))
             || (LS.FLAG_0004XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF FLAG-0004XX = HIGH-VALUES OR FLAG-0004XX = LOW-VALUES
            {
                LS.FLAG_0004.SetValueWithSpaces();                                                                  //COBOL==> MOVE SPACES TO FLAG-0004
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.TRACE_NUMBER_0005.IsNumericValue()))                                                      //COBOL==> IF TRACE-NUMBER-0005 IS NOT NUMERIC
            {
                LS.TRACE_NUMBER_0005.SetValueWithZeroes();                                                          //COBOL==> MOVE ZEROS TO TRACE-NUMBER-0005
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.TRACE_NUMBER_0006.IsNumericValue()))                                                      //COBOL==> IF TRACE-NUMBER-0006 IS NOT NUMERIC
            {
                LS.TRACE_NUMBER_0006.SetValueWithZeroes();                                                          //COBOL==> MOVE ZEROS TO TRACE-NUMBER-0006
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.VOUCHER_TOTAL_0007.IsNumericValue()))                                                     //COBOL==> IF VOUCHER-TOTAL-0007 IS NOT NUMERIC
            {
                LS.VOUCHER_TOTAL_0007.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO VOUCHER-TOTAL-0007
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.FIN_YR_0008XX.IsEqualTo(HIGH_VALUES))
             || (LS.FIN_YR_0008XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF FIN-YR-0008XX = HIGH-VALUES OR FIN-YR-0008XX = LOW-VALUES
            {
                LS.FIN_YR_0008.SetValueWithSpaces();                                                                //COBOL==> MOVE SPACES TO FIN-YR-0008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.SUFFIX_1_0008XX.IsEqualTo(HIGH_VALUES))
             || (LS.SUFFIX_1_0008XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF SUFFIX-1-0008XX = HIGH-VALUES OR SUFFIX-1-0008XX = LOW-VALUES
            {
                LS.SUFFIX_1_0008.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACES TO SUFFIX-1-0008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.BUSINESS_UNIT_0008XX.IsEqualTo(HIGH_VALUES))
             || (LS.BUSINESS_UNIT_0008XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF BUSINESS-UNIT-0008XX = HIGH-VALUES OR BUSINESS-UNIT-0008XX = LOW-VALUES
            {
                LS.BUSINESS_UNIT_0008.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO BUSINESS-UNIT-0008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.FUND_CODE_0008XX.IsEqualTo(HIGH_VALUES))
             || (LS.FUND_CODE_0008XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF FUND-CODE-0008XX = HIGH-VALUES OR FUND-CODE-0008XX = LOW-VALUES
            {
                LS.FUND_CODE_0008.SetValueWithSpaces();                                                             //COBOL==> MOVE SPACES TO FUND-CODE-0008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.PROGRAM_CODE_0008XX.IsEqualTo(HIGH_VALUES))
             || (LS.PROGRAM_CODE_0008XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF PROGRAM-CODE-0008XX = HIGH-VALUES OR PROGRAM-CODE-0008XX = LOW-VALUES
            {
                LS.PROGRAM_CODE_0008.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO PROGRAM-CODE-0008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.DEPT_ID_0008XX.IsEqualTo(HIGH_VALUES))
             || (LS.DEPT_ID_0008XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF DEPT-ID-0008XX = HIGH-VALUES OR DEPT-ID-0008XX = LOW-VALUES
            {
                LS.DEPT_ID_0008.SetValueWithSpaces();                                                               //COBOL==> MOVE SPACES TO DEPT-ID-0008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.ACCOUNT_NUMBER_0008XX.IsEqualTo(HIGH_VALUES))
             || (LS.ACCOUNT_NUMBER_0008XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF ACCOUNT-NUMBER-0008XX = HIGH-VALUES OR ACCOUNT-NUMBER-0008XX = LOW-VALUES
            {
                LS.ACCOUNT_NUMBER_0008.SetValueWithSpaces();                                                        //COBOL==> MOVE SPACES TO ACCOUNT-NUMBER-0008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.BUDGET_UNIT_0008XX.IsEqualTo(HIGH_VALUES))
             || (LS.BUDGET_UNIT_0008XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF BUDGET-UNIT-0008XX = HIGH-VALUES OR BUDGET-UNIT-0008XX = LOW-VALUES
            {
                LS.BUDGET_UNIT_0008.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO BUDGET-UNIT-0008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.SMART_R_0008XX.IsEqualTo(HIGH_VALUES))
             || (LS.SMART_R_0008XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF SMART-R-0008XX = HIGH-VALUES OR SMART-R-0008XX = LOW-VALUES
            {
                LS.SMART_R_0008.SetValueWithSpaces();                                                               //COBOL==> MOVE SPACES TO SMART-R-0008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.PARM1_0009XX.IsEqualTo(HIGH_VALUES))
             || (LS.PARM1_0009XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF PARM1-0009XX = HIGH-VALUES OR PARM1-0009XX = LOW-VALUES
            {
                LS.PARM1_0009.SetValueWithSpaces();                                                                 //COBOL==> MOVE SPACES TO PARM1-0009
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.PARM2_0009XX.IsEqualTo(HIGH_VALUES))
             || (LS.PARM2_0009XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF PARM2-0009XX = HIGH-VALUES OR PARM2-0009XX = LOW-VALUES
            {
                LS.PARM2_0009.SetValueWithSpaces();                                                                 //COBOL==> MOVE SPACES TO PARM2-0009
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.SUBREPORT_CODE_0009XX.IsEqualTo(HIGH_VALUES))
             || (LS.SUBREPORT_CODE_0009XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF SUBREPORT-CODE-0009XX = HIGH-VALUES OR SUBREPORT-CODE-0009XX = LOW-VALUES
            {
                LS.SUBREPORT_CODE_0009.SetValueWithSpaces();                                                        //COBOL==> MOVE SPACES TO SUBREPORT-CODE-0009
            }                                                                                                   //COBOL==> END-IF.
            LS.PARM1_0010.SetValueWithSpaces();                                                                 //COBOL==> MOVE SPACES TO PARM1-0010.
            LS.PARM2_0010.SetValueWithSpaces();                                                                 //COBOL==> MOVE SPACES TO PARM2-0010.
            if (returnMethod != "" && returnMethod != "M_B000_INIT_FIELDS") { M_B000_INIT_FIELDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_B000_INIT_FIELDS_EXIT
        /// </summary>
        private void M_B000_INIT_FIELDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_B000_INIT_FIELDS_EXIT") { return; }                                          //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_B000_INIT_FIELDS_EXIT") { M_B100_SETUP_REC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_B100_SETUP_REC
        /// </summary>
        private void M_B100_SETUP_REC(string returnMethod = "")
        {
            WS.WS_VCHR_NBR_01.SetValue(LS.TEXT_LINE_8_0001);                                                    //COBOL==> MOVE TEXT-LINE-8-0001 TO WS-VCHR-NBR-01.
            WS.WS_PRCSS_DT_02.SetValue(LS.PROCESS_DATE_0002);                                                   //COBOL==> MOVE PROCESS-DATE-0002 TO WS-PRCSS-DT-02.
            WS.WS_FLG_03.SetValue(LS.FLAG_0003);                                                                //COBOL==> MOVE FLAG-0003 TO WS-FLG-03.
            WS.WS_FLG_04.SetValue(LS.FLAG_0004);                                                                //COBOL==> MOVE FLAG-0004 TO WS-FLG-04.
            WS.WS_TRACE_NBR_05.SetValue(LS.TRACE_NUMBER_0005);                                                  //COBOL==> MOVE TRACE-NUMBER-0005 TO WS-TRACE-NBR-05.
            WS.WS_TRACE_NBR_06.SetValue(LS.TRACE_NUMBER_0006);                                                  //COBOL==> MOVE TRACE-NUMBER-0006 TO WS-TRACE-NBR-06.
            WS.WS_VCHR_TOT_07.SetValue(LS.VOUCHER_TOTAL_0007);                                                  //COBOL==> MOVE VOUCHER-TOTAL-0007 TO WS-VCHR-TOT-07.
            WS.WS_FIN_YR_09.SetValue(LS.FIN_YR_0008);                                                           //COBOL==> MOVE FIN-YR-0008 TO WS-FIN-YR-09.
            WS.WS_SFX1_10.SetValue(LS.SUFFIX_1_0008);                                                           //COBOL==> MOVE SUFFIX-1-0008 TO WS-SFX1-10.
            WS.WS_BUSINESS_UNIT.SetValue(LS.BUSINESS_UNIT_0008);                                                //COBOL==> MOVE BUSINESS-UNIT-0008 TO WS-BUSINESS-UNIT.
            WS.WS_FUND_CODE.SetValue(LS.FUND_CODE_0008);                                                        //COBOL==> MOVE FUND-CODE-0008 TO WS-FUND-CODE.
            WS.WS_PROGRAM_CODE.SetValue(LS.PROGRAM_CODE_0008);                                                  //COBOL==> MOVE PROGRAM-CODE-0008 TO WS-PROGRAM-CODE.
            WS.WS_DEPT_ID.SetValue(LS.DEPT_ID_0008);                                                            //COBOL==> MOVE DEPT-ID-0008 TO WS-DEPT-ID.
            WS.WS_ACCOUNT_NUMBER.SetValue(LS.ACCOUNT_NUMBER_0008);                                              //COBOL==> MOVE ACCOUNT-NUMBER-0008 TO WS-ACCOUNT-NUMBER.
            WS.WS_BUDGET_UNIT.SetValue(LS.BUDGET_UNIT_0008);                                                    //COBOL==> MOVE BUDGET-UNIT-0008 TO WS-BUDGET-UNIT.
            WS.WS_SMART_R_21.SetValue(LS.SMART_R_0008);                                                         //COBOL==> MOVE SMART-R-0008 TO WS-SMART-R-21.
            WS.WS_SUBRPT_CD_24.SetValue(LS.SUBREPORT_CODE_0009);                                                //COBOL==> MOVE SUBREPORT-CODE-0009 TO WS-SUBRPT-CD-24.
            if (returnMethod != "" && returnMethod != "M_B100_SETUP_REC") { M_B100_SETUP_REC_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_B100_SETUP_REC_EXIT
        /// </summary>
        private void M_B100_SETUP_REC_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_B100_SETUP_REC_EXIT") { return; }                                            //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_B100_SETUP_REC_EXIT") { M_9999_FINISHED(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9999_FINISHED
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************
        /// </remarks>
        private void M_9999_FINISHED(string returnMethod = "")
        {
            //COMMENT: *****************
            if (returnMethod == "M_9999_FINISHED") { return; }                                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9999_FINISHED") { M_PARA_0298963613_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0298963613_EXIT
        /// </summary>
        private void M_PARA_0298963613_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0298963613_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_0298963613_EXIT") { M_PARA_0298963613_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0298963613_INIT
        /// </summary>
        private void M_PARA_0298963613_INIT(string returnMethod = "")
        {
            LS.EXPORT_0010EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0010EV .
            if (returnMethod != "" && returnMethod != "M_PARA_0298963613_INIT") { M_PARA_0298963613_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0298963613_INIT_EXIT
        /// </summary>
        private void M_PARA_0298963613_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0298963613_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
