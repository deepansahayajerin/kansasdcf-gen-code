#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:49:11 PM
   **        *   FROM COBOL PGM   :  SWEXGR35
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                        ADVANTAGE(TM) GEN 6.5
       COPYRIGHT 2006 COMPUTER ASSOCIATES INTERNATIONAL, INC.
       NAME: EAB_READ_MEDICAL_SUBTYPE         DATE: 2006/07/20
       TARGET OS:   MVS                       TIME: 10:27:06
       TARGET DBMS: DB2                       USER: SWSRGAV
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
   **************************************************************
   ** MAINTENANCE ***********************************************
                          CHANGE                                *
      DATE     AUTHOR     CONTROL  DESCRIPTION                  *
    --------  ----------  -------  ---------------------------- *
     7/22/14  P.LEAK      CQ35825  KEES PHASE 3 CODING CHANGES  *
    12/15/15  R.MATHEWS   CQ35825  P3 PREFERRED ID CODING CHGS  *
    08/29/17  RKM                  ADDED WITH UR TO QUERIES     *
   **************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXGR35_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXGR35_ws_WorkingStorage";
            internal const string MODULE_VARIABLES = "MODULE_VARIABLES";
            internal const string MV_ABEND_FIELDS = "MV_ABEND_FIELDS";
            internal const string MV_ABEND_TYPE = "MV_ABEND_TYPE";
            internal const string MV_ABEND_TYPE_NONE = "MV_ABEND_TYPE_NONE";
            internal const string MV_ABEND_TYPE_ADABAS = "MV_ABEND_TYPE_ADABAS";
            internal const string MV_ABEND_ADABAS = "MV_ABEND_ADABAS";
            internal const string MV_ADA_FILE_NUMBER = "MV_ADA_FILE_NUMBER";
            internal const string MV_ADA_FILE_ACTION = "MV_ADA_FILE_ACTION";
            internal const string MV_ADA_RESPONSE_CD = "MV_ADA_RESPONSE_CD";
            internal const string MV_ADD_INDEX = "MV_ADD_INDEX";
            internal const string MV_CHECK_DONE = "MV_CHECK_DONE";
            internal const string MV_DONE = "MV_DONE";
            internal const string MV_END_BENEFIT = "MV_END_BENEFIT";
            internal const string MV_END_YEAR = "MV_END_YEAR";
            internal const string MV_END_MONTH = "MV_END_MONTH";
            internal const string MV_START_BENEFIT = "MV_START_BENEFIT";
            internal const string MV_START_YEAR = "MV_START_YEAR";
            internal const string MV_START_MONTH = "MV_START_MONTH";
            internal const string SUB1 = "SUB1";
            internal const string MV_DB2_START = "MV_DB2_START";
            internal const string MV_DB2_END = "MV_DB2_END";
            internal const string WS_SWITCHES = "WS_SWITCHES";
            internal const string WS_CC_EOFSW = "WS_CC_EOFSW";
            internal const string WS_CC_EOF_NO = "WS_CC_EOF_NO";
            internal const string WS_CC_EOF_YES = "WS_CC_EOF_YES";
            internal const string SW_FIRST = "SW_FIRST";
            internal const string SW_FIRST_YES = "SW_FIRST_YES";
            internal const string SW_FIRST_NO = "SW_FIRST_NO";
            internal const string DCLKSD_CASE_COMP = "DCLKSD_CASE_COMP";
            internal const string CC_BENEFIT_MONTH = "CC_BENEFIT_MONTH";
            internal const string CC_PARTICIPATION_CODE = "CC_PARTICIPATION_CODE";
            internal const string CC_MEDICAL_SUBTYPE = "CC_MEDICAL_SUBTYPE";
            internal const string CC_POSITION_ON_APP = "CC_POSITION_ON_APP";
            internal const string CC_CASE_OPEN_DT = "CC_CASE_OPEN_DT";
            internal const string CC_CASE_CLOSE_DT = "CC_CASE_CLOSE_DT";
            internal const string CC_CREATED_TIMESTAMP = "CC_CREATED_TIMESTAMP";
            internal const string CC_CREATED_BY = "CC_CREATED_BY";
            internal const string CC_LAST_MODIFIED_BY = "CC_LAST_MODIFIED_BY";
            internal const string CC_LAST_MODIFIED_TMST = "CC_LAST_MODIFIED_TMST";
            internal const string CC_FK_CLB_CLIENT_NO = "CC_FK_CLB_CLIENT_NO";
            internal const string CC_FK_CSB_CASE_NO = "CC_FK_CSB_CASE_NO";
            internal const string CC_FK_PGB_PROG_TYPE = "CC_FK_PGB_PROG_TYPE";
            internal const string DCLKSD_CLIENT_BASIC = "DCLKSD_CLIENT_BASIC";
            internal const string CLB_CLIENT_NUMBER = "CLB_CLIENT_NUMBER";
            internal const string CLB_CIS_PREFERRED_ID = "CLB_CIS_PREFERRED_ID";
            internal const string ADIM1 = "ADIM1";
            internal const string ADIM2 = "ADIM2";
            internal const string ADIM3 = "ADIM3";
            internal const string EXPORT_G_0001FL = "EXPORT_G_0001FL";
            internal const string EXPORT_G_0001PS = "EXPORT_G_0001PS";
            internal const string EXPORT_G_0001RF = "EXPORT_G_0001RF";
            internal const string EXPORT_G_0001MM = "EXPORT_G_0001MM";
        }
        #endregion

        #region Direct-access element properties
        public IGroup MODULE_VARIABLES { get { return GetElementByName<IGroup>(Names.MODULE_VARIABLES); } }
        public IGroup MV_ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.MV_ABEND_FIELDS); } }
        public IField MV_ABEND_TYPE { get { return GetElementByName<IField>(Names.MV_ABEND_TYPE); } }
        public ICheckField MV_ABEND_TYPE_NONE { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_NONE); } }
        public ICheckField MV_ABEND_TYPE_ADABAS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_ADABAS); } }
        public IGroup MV_ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.MV_ABEND_ADABAS); } }
        public IField MV_ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.MV_ADA_FILE_NUMBER); } }
        public IField MV_ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.MV_ADA_FILE_ACTION); } }
        public IField MV_ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_ADA_RESPONSE_CD); } }
        public IField MV_ADD_INDEX { get { return GetElementByName<IField>(Names.MV_ADD_INDEX); } }
        public IField MV_CHECK_DONE { get { return GetElementByName<IField>(Names.MV_CHECK_DONE); } }
        public IField MV_DONE { get { return GetElementByName<IField>(Names.MV_DONE); } }
        public IField MV_END_BENEFIT { get { return GetElementByName<IField>(Names.MV_END_BENEFIT); } }
        public IField MV_END_YEAR { get { return GetElementByName<IField>(Names.MV_END_YEAR); } }
        public IField MV_END_MONTH { get { return GetElementByName<IField>(Names.MV_END_MONTH); } }
        public IField MV_START_BENEFIT { get { return GetElementByName<IField>(Names.MV_START_BENEFIT); } }
        public IField MV_START_YEAR { get { return GetElementByName<IField>(Names.MV_START_YEAR); } }
        public IField MV_START_MONTH { get { return GetElementByName<IField>(Names.MV_START_MONTH); } }
        public IField SUB1 { get { return GetElementByName<IField>(Names.SUB1); } }
        public IField MV_DB2_START { get { return GetElementByName<IField>(Names.MV_DB2_START); } }
        public IField MV_DB2_END { get { return GetElementByName<IField>(Names.MV_DB2_END); } }
        public IGroup WS_SWITCHES { get { return GetElementByName<IGroup>(Names.WS_SWITCHES); } }
        public IField WS_CC_EOFSW { get { return GetElementByName<IField>(Names.WS_CC_EOFSW); } }
        public ICheckField WS_CC_EOF_NO { get { return GetElementByName<ICheckField>(Names.WS_CC_EOF_NO); } }
        public ICheckField WS_CC_EOF_YES { get { return GetElementByName<ICheckField>(Names.WS_CC_EOF_YES); } }
        public IField SW_FIRST { get { return GetElementByName<IField>(Names.SW_FIRST); } }
        public ICheckField SW_FIRST_YES { get { return GetElementByName<ICheckField>(Names.SW_FIRST_YES); } }
        public ICheckField SW_FIRST_NO { get { return GetElementByName<ICheckField>(Names.SW_FIRST_NO); } }
        public IGroup DCLKSD_CASE_COMP { get { return GetElementByName<IGroup>(Names.DCLKSD_CASE_COMP); } }
        public IField CC_BENEFIT_MONTH { get { return GetElementByName<IField>(Names.CC_BENEFIT_MONTH); } }
        public IField CC_PARTICIPATION_CODE { get { return GetElementByName<IField>(Names.CC_PARTICIPATION_CODE); } }
        public IField CC_MEDICAL_SUBTYPE { get { return GetElementByName<IField>(Names.CC_MEDICAL_SUBTYPE); } }
        public IField CC_POSITION_ON_APP { get { return GetElementByName<IField>(Names.CC_POSITION_ON_APP); } }
        public IField CC_CASE_OPEN_DT { get { return GetElementByName<IField>(Names.CC_CASE_OPEN_DT); } }
        public IField CC_CASE_CLOSE_DT { get { return GetElementByName<IField>(Names.CC_CASE_CLOSE_DT); } }
        public IField CC_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CC_CREATED_TIMESTAMP); } }
        public IField CC_CREATED_BY { get { return GetElementByName<IField>(Names.CC_CREATED_BY); } }
        public IField CC_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CC_LAST_MODIFIED_BY); } }
        public IField CC_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CC_LAST_MODIFIED_TMST); } }
        public IField CC_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CC_FK_CLB_CLIENT_NO); } }
        public IField CC_FK_CSB_CASE_NO { get { return GetElementByName<IField>(Names.CC_FK_CSB_CASE_NO); } }
        public IField CC_FK_PGB_PROG_TYPE { get { return GetElementByName<IField>(Names.CC_FK_PGB_PROG_TYPE); } }
        public IGroup DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT_BASIC); } }
        public IField CLB_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLB_CLIENT_NUMBER); } }
        public IField CLB_CIS_PREFERRED_ID { get { return GetElementByName<IField>(Names.CLB_CIS_PREFERRED_ID); } }
        public IField ADIM1 { get { return GetElementByName<IField>(Names.ADIM1); } }
        public IField ADIM2 { get { return GetElementByName<IField>(Names.ADIM2); } }
        public IField ADIM3 { get { return GetElementByName<IField>(Names.ADIM3); } }
        public IField EXPORT_G_0001FL { get { return GetElementByName<IField>(Names.EXPORT_G_0001FL); } }
        public IField EXPORT_G_0001PS { get { return GetElementByName<IField>(Names.EXPORT_G_0001PS); } }
        public IField EXPORT_G_0001RF { get { return GetElementByName<IField>(Names.EXPORT_G_0001RF); } }
        public IField EXPORT_G_0001MM { get { return GetElementByName<IField>(Names.EXPORT_G_0001MM); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.MODULE_VARIABLES, (MODULE_VARIABLES) =>
           {
               MODULE_VARIABLES.CreateNewGroup(Names.MV_ABEND_FIELDS, (MV_ABEND_FIELDS) =>
               {
                   MV_ABEND_FIELDS.CreateNewField(Names.MV_ABEND_TYPE, FieldType.String, 1)
                       .NewCheckField(Names.MV_ABEND_TYPE_NONE, SPACE)
                       .NewCheckField(Names.MV_ABEND_TYPE_ADABAS, "A")
                       ;
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_ADABAS, (MV_ABEND_ADABAS) =>
                   {
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_ACTION, FieldType.String, 3);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
                   });
               });
               MODULE_VARIABLES.CreateNewField(Names.MV_ADD_INDEX, FieldType.SignedNumeric, 4);
               MODULE_VARIABLES.CreateNewField(Names.MV_CHECK_DONE, FieldType.String, 1);
               MODULE_VARIABLES.CreateNewField(Names.MV_DONE, FieldType.String, 1);

               IField MV_END_BENEFIT_local = MODULE_VARIABLES.CreateNewField(Names.MV_END_BENEFIT, FieldType.UnsignedNumeric, 6);
               MODULE_VARIABLES.CreateNewGroupRedefine("FILLER", MV_END_BENEFIT_local, (FILLER) =>
               {
                   FILLER.CreateNewField(Names.MV_END_YEAR, FieldType.UnsignedNumeric, 4);
                   FILLER.CreateNewField(Names.MV_END_MONTH, FieldType.UnsignedNumeric, 2);
               });

               IField MV_START_BENEFIT_local = MODULE_VARIABLES.CreateNewField(Names.MV_START_BENEFIT, FieldType.UnsignedNumeric, 6);
               MODULE_VARIABLES.CreateNewGroupRedefine("FILLER_d2", MV_START_BENEFIT_local, (FILLER_d2) =>
               {
                   FILLER_d2.CreateNewField(Names.MV_START_YEAR, FieldType.UnsignedNumeric, 4);
                   FILLER_d2.CreateNewField(Names.MV_START_MONTH, FieldType.UnsignedNumeric, 2);
               });
               MODULE_VARIABLES.CreateNewField(Names.SUB1, FieldType.UnsignedNumeric, 2);
               MODULE_VARIABLES.CreateNewField(Names.MV_DB2_START, FieldType.CompInt, 9);
               MODULE_VARIABLES.CreateNewField(Names.MV_DB2_END, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.WS_SWITCHES, (WS_SWITCHES) =>
           {
               WS_SWITCHES.CreateNewField(Names.WS_CC_EOFSW, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_CC_EOF_NO, "N")
                   .NewCheckField(Names.WS_CC_EOF_YES, "Y")
                   ;
               WS_SWITCHES.CreateNewField(Names.SW_FIRST, FieldType.String, 1, "Y")
                   .NewCheckField(Names.SW_FIRST_YES, "Y")
                   .NewCheckField(Names.SW_FIRST_NO, "N")
                   ;
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CASE_COMP, (DCLKSD_CASE_COMP) =>
           {
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_BENEFIT_MONTH, FieldType.CompInt, 9);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_PARTICIPATION_CODE, FieldType.String, 2);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_MEDICAL_SUBTYPE, FieldType.String, 2);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_POSITION_ON_APP, FieldType.CompShort, 4);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_CASE_OPEN_DT, FieldType.String, 10);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_CASE_CLOSE_DT, FieldType.String, 10);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_CREATED_BY, FieldType.String, 8);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_FK_CLB_CLIENT_NO, FieldType.String, 10);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_FK_CSB_CASE_NO, FieldType.String, 8);
               DCLKSD_CASE_COMP.CreateNewField(Names.CC_FK_PGB_PROG_TYPE, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT_BASIC, (DCLKSD_CLIENT_BASIC) =>
           {
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_CLIENT_NUMBER, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_CIS_PREFERRED_ID, FieldType.String, 10);
           });

            recordDef.CreateNewGroup("FILLER_d3", (FILLER_d3) =>
           {
               FILLER_d3.CreateNewField(Names.ADIM1, FieldType.CompInt, 8);
               FILLER_d3.CreateNewField(Names.ADIM2, FieldType.CompInt, 8);
               FILLER_d3.CreateNewField(Names.ADIM3, FieldType.CompInt, 8);
           });

            recordDef.CreateNewGroup("FILLER_d4", (FILLER_d4) =>
           {
               FILLER_d4.CreateNewField(Names.EXPORT_G_0001FL, FieldType.String, 1);
               FILLER_d4.CreateNewField(Names.EXPORT_G_0001PS, FieldType.CompShort, 4);
               FILLER_d4.CreateNewField(Names.EXPORT_G_0001RF, FieldType.String, 1);
               FILLER_d4.CreateNewField(Names.EXPORT_G_0001MM, FieldType.CompInt, 9, 20);
           });


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXGR35_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXGR35_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string WHEN_SUCCESSFUL_SF = "WHEN_SUCCESSFUL_SF";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string DB_ERROR_SF = "DB_ERROR_SF";
            internal const string ABORT_SHOW_DBMS_MSG_SF = "ABORT_SHOW_DBMS_MSG_SF";
            internal const string ABORT_SHOW_USER_MSG_SF = "ABORT_SHOW_USER_MSG_SF";
            internal const string RETRY_TRAN_REQUESTED_SF = "RETRY_TRAN_REQUESTED_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string ASYNC_WHEN_AVAILABLE_SF = "ASYNC_WHEN_AVAILABLE_SF";
            internal const string ASYNC_WHEN_ACCEPTED_SF = "ASYNC_WHEN_ACCEPTED_SF";
            internal const string ASYNC_WHEN_NOT_ACCEPTED_SF = "ASYNC_WHEN_NOT_ACCEPTED_SF";
            internal const string ASYNC_WHEN_INVALID_ID_SF = "ASYNC_WHEN_INVALID_ID_SF";
            internal const string ASYNC_WHEN_PENDING_SF = "ASYNC_WHEN_PENDING_SF";
            internal const string ASYNC_WHEN_SERVER_ERROR_SF = "ASYNC_WHEN_SERVER_ERROR_SF";
            internal const string ASYNC_WHEN_COMM_ERROR_SF = "ASYNC_WHEN_COMM_ERROR_SF";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DB_DEADLOCK_TIMOUT_FL_LS = "DB_DEADLOCK_TIMOUT_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_TIRDATE_SKIP_VAL = "PSMGR_TIRDATE_SKIP_VAL";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string TX_RETRY_COUNT = "TX_RETRY_COUNT";
            internal const string TX_USER_RETRY_ALLOWED = "TX_USER_RETRY_ALLOWED";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string PSMGR_ASYNC_DATA = "PSMGR_ASYNC_DATA";
            internal const string ASYNC_MODE = "ASYNC_MODE";
            internal const string FLOW_TYPE_SYNC = "FLOW_TYPE_SYNC";
            internal const string FLOW_TYPE_ASYNC = "FLOW_TYPE_ASYNC";
            internal const string FLOW_TYPE_NO_RESPONSE = "FLOW_TYPE_NO_RESPONSE";
            internal const string ASYNC_FLOW_STATUS_TABLE_PTR = "ASYNC_FLOW_STATUS_TABLE_PTR";
            internal const string ASYNC_SERVER_LOC_TABLE_PTR = "ASYNC_SERVER_LOC_TABLE_PTR";
            internal const string IMPORT_0001EV = "IMPORT_0001EV";
            internal const string CSE_PERSON_0001ET = "CSE_PERSON_0001ET";
            internal const string NUMBER_0001AS = "NUMBER_0001AS";
            internal const string NUMBER_0001 = "NUMBER_0001";
            internal const string NUMBER_0001XX = "NUMBER_0001XX";
            internal const string IMPORT_START_0002EV = "IMPORT_START_0002EV";
            internal const string DATE_WORK_AREA_0002ET = "DATE_WORK_AREA_0002ET";
            internal const string MONTH_0002AS = "MONTH_0002AS";
            internal const string MONTH_0002 = "MONTH_0002";
            internal const string MONTH_0002XX = "MONTH_0002XX";
            internal const string YEAR_0002AS = "YEAR_0002AS";
            internal const string YEAR_0002 = "YEAR_0002";
            internal const string YEAR_0002XX = "YEAR_0002XX";
            internal const string IMPORT_END_0003EV = "IMPORT_END_0003EV";
            internal const string DATE_WORK_AREA_0003ET = "DATE_WORK_AREA_0003ET";
            internal const string MONTH_0003AS = "MONTH_0003AS";
            internal const string MONTH_0003 = "MONTH_0003";
            internal const string MONTH_0003XX = "MONTH_0003XX";
            internal const string YEAR_0003AS = "YEAR_0003AS";
            internal const string YEAR_0003 = "YEAR_0003";
            internal const string YEAR_0003XX = "YEAR_0003XX";
            internal const string EXPORT_G_0001RG = "EXPORT_G_0001RG";
            internal const string EXPORT_G_0001MA = "EXPORT_G_0001MA";
            internal const string EXPORT_G_0001MX = "EXPORT_G_0001MX";
            internal const string EXPORT_G_0001 = "EXPORT_G_0001";
            internal const string EXPORT_G_0001AC = "EXPORT_G_0001AC";
            internal const string G_EXPORT_0004EV = "G_EXPORT_0004EV";
            internal const string PERSON_PROGRAM_0004ET = "PERSON_PROGRAM_0004ET";
            internal const string MED_TYPE_0004AS = "MED_TYPE_0004AS";
            internal const string MED_TYPE_0004 = "MED_TYPE_0004";
            internal const string MED_TYPE_0004XX = "MED_TYPE_0004XX";
            internal const string EXPORT_0005EV = "EXPORT_0005EV";
            internal const string ABEND_DATA_0005ET = "ABEND_DATA_0005ET";
            internal const string TYPE_0005AS = "TYPE_0005AS";
            internal const string TYPE_0005 = "TYPE_0005";
            internal const string TYPE_0005XX = "TYPE_0005XX";
            internal const string ADABAS_FILE_NUMBER_0005AS = "ADABAS_FILE_NUMBER_0005AS";
            internal const string ADABAS_FILE_NUMBER_0005 = "ADABAS_FILE_NUMBER_0005";
            internal const string ADABAS_FILE_NUMBER_0005XX = "ADABAS_FILE_NUMBER_0005XX";
            internal const string ADABAS_FILE_ACTION_0005AS = "ADABAS_FILE_ACTION_0005AS";
            internal const string ADABAS_FILE_ACTION_0005 = "ADABAS_FILE_ACTION_0005";
            internal const string ADABAS_FILE_ACTION_0005XX = "ADABAS_FILE_ACTION_0005XX";
            internal const string ADABAS_RESPONSE_CD_0005AS = "ADABAS_RESPONSE_CD_0005AS";
            internal const string ADABAS_RESPONSE_CD_0005 = "ADABAS_RESPONSE_CD_0005";
            internal const string ADABAS_RESPONSE_CD_0005XX = "ADABAS_RESPONSE_CD_0005XX";
            internal const string CICS_RESOURCE_NM_0005AS = "CICS_RESOURCE_NM_0005AS";
            internal const string CICS_RESOURCE_NM_0005 = "CICS_RESOURCE_NM_0005";
            internal const string CICS_RESOURCE_NM_0005XX = "CICS_RESOURCE_NM_0005XX";
            internal const string CICS_FUNCTION_CD_0005AS = "CICS_FUNCTION_CD_0005AS";
            internal const string CICS_FUNCTION_CD_0005 = "CICS_FUNCTION_CD_0005";
            internal const string CICS_FUNCTION_CD_0005XX = "CICS_FUNCTION_CD_0005XX";
            internal const string CICS_RESPONSE_CD_0005AS = "CICS_RESPONSE_CD_0005AS";
            internal const string CICS_RESPONSE_CD_0005 = "CICS_RESPONSE_CD_0005";
            internal const string CICS_RESPONSE_CD_0005XX = "CICS_RESPONSE_CD_0005XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField WHEN_SUCCESSFUL_SF { get { return GetElementByName<ICheckField>(Names.WHEN_SUCCESSFUL_SF); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField DB_ERROR_SF { get { return GetElementByName<ICheckField>(Names.DB_ERROR_SF); } }
        public ICheckField ABORT_SHOW_DBMS_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_DBMS_MSG_SF); } }
        public ICheckField ABORT_SHOW_USER_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_USER_MSG_SF); } }
        public ICheckField RETRY_TRAN_REQUESTED_SF { get { return GetElementByName<ICheckField>(Names.RETRY_TRAN_REQUESTED_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public ICheckField ASYNC_WHEN_AVAILABLE_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_AVAILABLE_SF); } }
        public ICheckField ASYNC_WHEN_ACCEPTED_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_ACCEPTED_SF); } }
        public ICheckField ASYNC_WHEN_NOT_ACCEPTED_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_NOT_ACCEPTED_SF); } }
        public ICheckField ASYNC_WHEN_INVALID_ID_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_INVALID_ID_SF); } }
        public ICheckField ASYNC_WHEN_PENDING_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_PENDING_SF); } }
        public ICheckField ASYNC_WHEN_SERVER_ERROR_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_SERVER_ERROR_SF); } }
        public ICheckField ASYNC_WHEN_COMM_ERROR_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_COMM_ERROR_SF); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DB_DEADLOCK_TIMOUT_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_DEADLOCK_TIMOUT_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_TIRDATE_SKIP_VAL { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SKIP_VAL); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IField TX_RETRY_COUNT { get { return GetElementByName<IField>(Names.TX_RETRY_COUNT); } }
        public IField TX_USER_RETRY_ALLOWED { get { return GetElementByName<IField>(Names.TX_USER_RETRY_ALLOWED); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup PSMGR_ASYNC_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ASYNC_DATA); } }
        public IField ASYNC_MODE { get { return GetElementByName<IField>(Names.ASYNC_MODE); } }
        public ICheckField FLOW_TYPE_SYNC { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_SYNC); } }
        public ICheckField FLOW_TYPE_ASYNC { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_ASYNC); } }
        public ICheckField FLOW_TYPE_NO_RESPONSE { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_NO_RESPONSE); } }
        public IField ASYNC_FLOW_STATUS_TABLE_PTR { get { return GetElementByName<IField>(Names.ASYNC_FLOW_STATUS_TABLE_PTR); } }
        public IField ASYNC_SERVER_LOC_TABLE_PTR { get { return GetElementByName<IField>(Names.ASYNC_SERVER_LOC_TABLE_PTR); } }
        public IGroup IMPORT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_0001EV); } }
        public IGroup CSE_PERSON_0001ET { get { return GetElementByName<IGroup>(Names.CSE_PERSON_0001ET); } }
        public IField NUMBER_0001AS { get { return GetElementByName<IField>(Names.NUMBER_0001AS); } }
        public IField NUMBER_0001 { get { return GetElementByName<IField>(Names.NUMBER_0001); } }
        public IField NUMBER_0001XX { get { return GetElementByName<IField>(Names.NUMBER_0001XX); } }
        public IGroup IMPORT_START_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_START_0002EV); } }
        public IGroup DATE_WORK_AREA_0002ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0002ET); } }
        public IField MONTH_0002AS { get { return GetElementByName<IField>(Names.MONTH_0002AS); } }
        public IField MONTH_0002 { get { return GetElementByName<IField>(Names.MONTH_0002); } }
        public IField MONTH_0002XX { get { return GetElementByName<IField>(Names.MONTH_0002XX); } }
        public IField YEAR_0002AS { get { return GetElementByName<IField>(Names.YEAR_0002AS); } }
        public IField YEAR_0002 { get { return GetElementByName<IField>(Names.YEAR_0002); } }
        public IField YEAR_0002XX { get { return GetElementByName<IField>(Names.YEAR_0002XX); } }
        public IGroup IMPORT_END_0003EV { get { return GetElementByName<IGroup>(Names.IMPORT_END_0003EV); } }
        public IGroup DATE_WORK_AREA_0003ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0003ET); } }
        public IField MONTH_0003AS { get { return GetElementByName<IField>(Names.MONTH_0003AS); } }
        public IField MONTH_0003 { get { return GetElementByName<IField>(Names.MONTH_0003); } }
        public IField MONTH_0003XX { get { return GetElementByName<IField>(Names.MONTH_0003XX); } }
        public IField YEAR_0003AS { get { return GetElementByName<IField>(Names.YEAR_0003AS); } }
        public IField YEAR_0003 { get { return GetElementByName<IField>(Names.YEAR_0003); } }
        public IField YEAR_0003XX { get { return GetElementByName<IField>(Names.YEAR_0003XX); } }
        public IGroup EXPORT_G_0001RG { get { return GetElementByName<IGroup>(Names.EXPORT_G_0001RG); } }
        public IField EXPORT_G_0001MA { get { return GetElementByName<IField>(Names.EXPORT_G_0001MA); } }
        public IField EXPORT_G_0001MX { get { return GetElementByName<IField>(Names.EXPORT_G_0001MX); } }
        public IArrayElementAccessor<IGroup> EXPORT_G_0001 { get { return GetArrayElementAccessor<IGroup>(Names.EXPORT_G_0001); } }
        public IArrayElementAccessor<IField> EXPORT_G_0001AC { get { return GetArrayElementAccessor<IField>(Names.EXPORT_G_0001AC); } }
        public IArrayElementAccessor<IGroup> G_EXPORT_0004EV { get { return GetArrayElementAccessor<IGroup>(Names.G_EXPORT_0004EV); } }
        public IArrayElementAccessor<IGroup> PERSON_PROGRAM_0004ET { get { return GetArrayElementAccessor<IGroup>(Names.PERSON_PROGRAM_0004ET); } }
        public IArrayElementAccessor<IField> MED_TYPE_0004AS { get { return GetArrayElementAccessor<IField>(Names.MED_TYPE_0004AS); } }
        public IArrayElementAccessor<IField> MED_TYPE_0004 { get { return GetArrayElementAccessor<IField>(Names.MED_TYPE_0004); } }
        public IArrayElementAccessor<IField> MED_TYPE_0004XX { get { return GetArrayElementAccessor<IField>(Names.MED_TYPE_0004XX); } }
        public IGroup EXPORT_0005EV { get { return GetElementByName<IGroup>(Names.EXPORT_0005EV); } }
        public IGroup ABEND_DATA_0005ET { get { return GetElementByName<IGroup>(Names.ABEND_DATA_0005ET); } }
        public IField TYPE_0005AS { get { return GetElementByName<IField>(Names.TYPE_0005AS); } }
        public IField TYPE_0005 { get { return GetElementByName<IField>(Names.TYPE_0005); } }
        public IField TYPE_0005XX { get { return GetElementByName<IField>(Names.TYPE_0005XX); } }
        public IField ADABAS_FILE_NUMBER_0005AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0005AS); } }
        public IField ADABAS_FILE_NUMBER_0005 { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0005); } }
        public IField ADABAS_FILE_NUMBER_0005XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0005XX); } }
        public IField ADABAS_FILE_ACTION_0005AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0005AS); } }
        public IField ADABAS_FILE_ACTION_0005 { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0005); } }
        public IField ADABAS_FILE_ACTION_0005XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0005XX); } }
        public IField ADABAS_RESPONSE_CD_0005AS { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0005AS); } }
        public IField ADABAS_RESPONSE_CD_0005 { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0005); } }
        public IField ADABAS_RESPONSE_CD_0005XX { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0005XX); } }
        public IField CICS_RESOURCE_NM_0005AS { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0005AS); } }
        public IField CICS_RESOURCE_NM_0005 { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0005); } }
        public IField CICS_RESOURCE_NM_0005XX { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0005XX); } }
        public IField CICS_FUNCTION_CD_0005AS { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0005AS); } }
        public IField CICS_FUNCTION_CD_0005 { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0005); } }
        public IField CICS_FUNCTION_CD_0005XX { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0005XX); } }
        public IField CICS_RESPONSE_CD_0005AS { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0005AS); } }
        public IField CICS_RESPONSE_CD_0005 { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0005); } }
        public IField CICS_RESPONSE_CD_0005XX { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0005XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.WHEN_SUCCESSFUL_SF, SPACES)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.DB_ERROR_SF, "DB")
                       .NewCheckField(Names.ABORT_SHOW_DBMS_MSG_SF, "AB")
                       .NewCheckField(Names.ABORT_SHOW_USER_MSG_SF, "AM")
                       .NewCheckField(Names.RETRY_TRAN_REQUESTED_SF, "RT")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       .NewCheckField(Names.ASYNC_WHEN_AVAILABLE_SF, SPACES)
                       .NewCheckField(Names.ASYNC_WHEN_ACCEPTED_SF, SPACES)
                       .NewCheckField(Names.ASYNC_WHEN_NOT_ACCEPTED_SF, "NA")
                       .NewCheckField(Names.ASYNC_WHEN_INVALID_ID_SF, "II")
                       .NewCheckField(Names.ASYNC_WHEN_PENDING_SF, "PE")
                       .NewCheckField(Names.ASYNC_WHEN_SERVER_ERROR_SF, "SS")
                       .NewCheckField(Names.ASYNC_WHEN_COMM_ERROR_SF, "CE")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DB_DEADLOCK_TIMOUT_FL_LS, "DT")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d9", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d9) =>
                   {
                       FILLER_d9.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d9.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d9.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_SKIP_VAL, FieldType.String, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(95, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 8);
               });
               GLOBDATA.CreateNewField(Names.TX_RETRY_COUNT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_USER_RETRY_ALLOWED, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(3, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ASYNC_DATA, (PSMGR_ASYNC_DATA) =>
               {
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_MODE, FieldType.String, 1)
                       .NewCheckField(Names.FLOW_TYPE_SYNC, SPACE)
                       .NewCheckField(Names.FLOW_TYPE_ASYNC, "A")
                       .NewCheckField(Names.FLOW_TYPE_NO_RESPONSE, "N")
                       ;
                   PSMGR_ASYNC_DATA.CreateNewFillerField(1, FillWith.Hashes);
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_FLOW_STATUS_TABLE_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_SERVER_LOC_TABLE_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewFillerField(189, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_0001EV, (IMPORT_0001EV) =>
           {
               IMPORT_0001EV.CreateNewGroup(Names.CSE_PERSON_0001ET, (CSE_PERSON_0001ET) =>
               {
                   CSE_PERSON_0001ET.CreateNewField(Names.NUMBER_0001AS, FieldType.String, 1);

                   IField NUMBER_0001_local = CSE_PERSON_0001ET.CreateNewField(Names.NUMBER_0001, FieldType.String, 10);
                   CSE_PERSON_0001ET.CreateNewFieldRedefine(Names.NUMBER_0001XX, FieldType.String, NUMBER_0001_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_START_0002EV, (IMPORT_START_0002EV) =>
           {
               IMPORT_START_0002EV.CreateNewGroup(Names.DATE_WORK_AREA_0002ET, (DATE_WORK_AREA_0002ET) =>
               {
                   DATE_WORK_AREA_0002ET.CreateNewField(Names.MONTH_0002AS, FieldType.String, 1);

                   IField MONTH_0002_local = DATE_WORK_AREA_0002ET.CreateNewField(Names.MONTH_0002, FieldType.SignedNumeric, 2);
                   DATE_WORK_AREA_0002ET.CreateNewFieldRedefine(Names.MONTH_0002XX, FieldType.String, MONTH_0002_local, 2);
                   DATE_WORK_AREA_0002ET.CreateNewField(Names.YEAR_0002AS, FieldType.String, 1);

                   IField YEAR_0002_local = DATE_WORK_AREA_0002ET.CreateNewField(Names.YEAR_0002, FieldType.SignedNumeric, 4);
                   DATE_WORK_AREA_0002ET.CreateNewFieldRedefine(Names.YEAR_0002XX, FieldType.String, YEAR_0002_local, 4);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_END_0003EV, (IMPORT_END_0003EV) =>
           {
               IMPORT_END_0003EV.CreateNewGroup(Names.DATE_WORK_AREA_0003ET, (DATE_WORK_AREA_0003ET) =>
               {
                   DATE_WORK_AREA_0003ET.CreateNewField(Names.MONTH_0003AS, FieldType.String, 1);

                   IField MONTH_0003_local = DATE_WORK_AREA_0003ET.CreateNewField(Names.MONTH_0003, FieldType.SignedNumeric, 2);
                   DATE_WORK_AREA_0003ET.CreateNewFieldRedefine(Names.MONTH_0003XX, FieldType.String, MONTH_0003_local, 2);
                   DATE_WORK_AREA_0003ET.CreateNewField(Names.YEAR_0003AS, FieldType.String, 1);

                   IField YEAR_0003_local = DATE_WORK_AREA_0003ET.CreateNewField(Names.YEAR_0003, FieldType.SignedNumeric, 4);
                   DATE_WORK_AREA_0003ET.CreateNewFieldRedefine(Names.YEAR_0003XX, FieldType.String, YEAR_0003_local, 4);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_G_0001RG, (EXPORT_G_0001RG) =>
           {

               IField EXPORT_G_0001MA_local = EXPORT_G_0001RG.CreateNewField(Names.EXPORT_G_0001MA, FieldType.SignedNumeric, 4);
               EXPORT_G_0001RG.CreateNewFieldRedefine(Names.EXPORT_G_0001MX, FieldType.String, EXPORT_G_0001MA_local, 4);
               EXPORT_G_0001RG.CreateNewGroupArray(Names.EXPORT_G_0001, 20, (EXPORT_G_0001) =>
               {
                   EXPORT_G_0001.CreateNewField(Names.EXPORT_G_0001AC, FieldType.String, 1);
                   EXPORT_G_0001.CreateNewGroup(Names.G_EXPORT_0004EV, (G_EXPORT_0004EV) =>
                   {
                       G_EXPORT_0004EV.CreateNewGroup(Names.PERSON_PROGRAM_0004ET, (PERSON_PROGRAM_0004ET) =>
                       {
                           PERSON_PROGRAM_0004ET.CreateNewField(Names.MED_TYPE_0004AS, FieldType.String, 1);

                           IField MED_TYPE_0004_local = PERSON_PROGRAM_0004ET.CreateNewField(Names.MED_TYPE_0004, FieldType.String, 2);
                           PERSON_PROGRAM_0004ET.CreateNewFieldRedefine(Names.MED_TYPE_0004XX, FieldType.String, MED_TYPE_0004_local, 2);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_0005EV, (EXPORT_0005EV) =>
           {
               EXPORT_0005EV.CreateNewGroup(Names.ABEND_DATA_0005ET, (ABEND_DATA_0005ET) =>
               {
                   ABEND_DATA_0005ET.CreateNewField(Names.TYPE_0005AS, FieldType.String, 1);

                   IField TYPE_0005_local = ABEND_DATA_0005ET.CreateNewField(Names.TYPE_0005, FieldType.String, 1);
                   ABEND_DATA_0005ET.CreateNewFieldRedefine(Names.TYPE_0005XX, FieldType.String, TYPE_0005_local, 1);
                   ABEND_DATA_0005ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0005AS, FieldType.String, 1);

                   IField ADABAS_FILE_NUMBER_0005_local = ABEND_DATA_0005ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0005, FieldType.String, 4);
                   ABEND_DATA_0005ET.CreateNewFieldRedefine(Names.ADABAS_FILE_NUMBER_0005XX, FieldType.String, ADABAS_FILE_NUMBER_0005_local, 4);
                   ABEND_DATA_0005ET.CreateNewField(Names.ADABAS_FILE_ACTION_0005AS, FieldType.String, 1);

                   IField ADABAS_FILE_ACTION_0005_local = ABEND_DATA_0005ET.CreateNewField(Names.ADABAS_FILE_ACTION_0005, FieldType.String, 3);
                   ABEND_DATA_0005ET.CreateNewFieldRedefine(Names.ADABAS_FILE_ACTION_0005XX, FieldType.String, ADABAS_FILE_ACTION_0005_local, 3);
                   ABEND_DATA_0005ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0005AS, FieldType.String, 1);

                   IField ADABAS_RESPONSE_CD_0005_local = ABEND_DATA_0005ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0005, FieldType.String, 4);
                   ABEND_DATA_0005ET.CreateNewFieldRedefine(Names.ADABAS_RESPONSE_CD_0005XX, FieldType.String, ADABAS_RESPONSE_CD_0005_local, 4);
                   ABEND_DATA_0005ET.CreateNewField(Names.CICS_RESOURCE_NM_0005AS, FieldType.String, 1);

                   IField CICS_RESOURCE_NM_0005_local = ABEND_DATA_0005ET.CreateNewField(Names.CICS_RESOURCE_NM_0005, FieldType.String, 8);
                   ABEND_DATA_0005ET.CreateNewFieldRedefine(Names.CICS_RESOURCE_NM_0005XX, FieldType.String, CICS_RESOURCE_NM_0005_local, 8);
                   ABEND_DATA_0005ET.CreateNewField(Names.CICS_FUNCTION_CD_0005AS, FieldType.String, 1);

                   IField CICS_FUNCTION_CD_0005_local = ABEND_DATA_0005ET.CreateNewField(Names.CICS_FUNCTION_CD_0005, FieldType.String, 2);
                   ABEND_DATA_0005ET.CreateNewFieldRedefine(Names.CICS_FUNCTION_CD_0005XX, FieldType.String, CICS_FUNCTION_CD_0005_local, 2);
                   ABEND_DATA_0005ET.CreateNewField(Names.CICS_RESPONSE_CD_0005AS, FieldType.String, 1);

                   IField CICS_RESPONSE_CD_0005_local = ABEND_DATA_0005ET.CreateNewField(Names.CICS_RESPONSE_CD_0005, FieldType.String, 6);
                   ABEND_DATA_0005ET.CreateNewFieldRedefine(Names.CICS_RESPONSE_CD_0005XX, FieldType.String, CICS_RESPONSE_CD_0005_local, 6);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(GLOBDATA, args, 2);
            SetPassedParm(IMPORT_0001EV, args, 3);
            SetPassedParm(IMPORT_START_0002EV, args, 4);
            SetPassedParm(IMPORT_END_0003EV, args, 5);
            SetPassedParm(EXPORT_G_0001RG, args, 6);
            SetPassedParm(EXPORT_0005EV, args, 7);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(GLOBDATA, args, 2);
            SetReturnParm(IMPORT_0001EV, args, 3);
            SetReturnParm(IMPORT_START_0002EV, args, 4);
            SetReturnParm(IMPORT_END_0003EV, args, 5);
            SetReturnParm(EXPORT_G_0001RG, args, 6);
            SetReturnParm(EXPORT_0005EV, args, 7);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXGR35 : EABBase
    {

        #region Public Constructors
        public SWEXGR35()
            : base()
        {
            this.ProgramName.SetValue("SWEXGR35");

            WS = new SWEXGR35_ws();
            LS = new SWEXGR35_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryTextWithUR("CASECOMP", "SELECT BENEFIT_MONTH, PARTICIPATION_CODE, MEDICAL_SUBTYPE, POSITION_ON_APP, CASE_OPEN_DT, CASE_CLOSE_DT, FK_CLB_CLIENT_NO, FK_CSB_CASE_NO, FK_PGB_PROG_TYPE FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = {0}  AND ( BENEFIT_MONTH >= {1}  AND BENEFIT_MONTH <= {2}  ) ORDER BY FK_CLB_CLIENT_NO, BENEFIT_MONTH, FK_CSB_CASE_NO",  //COBOL==>EXEC SQL DECLARE CASECOMP CURSOR FOR SELECT BENEFIT_MONTH , PARTICIPATION_CODE , MEDICAL_SUBTYPE , POSITION_ON_APP , CASE_OPEN_DT , CASE_CLOSE_DT , FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = :CC-FK-CLB-CLIENT-NO AND ( BENEFIT_MONTH >= :MV-DB2-START AND BENEFIT_MONTH <= :MV-DB2-END ) ORDER BY FK_CLB_CLIENT_NO , BENEFIT_MONTH , FK_CSB_CASE_NO WITH UR END-EXEC
                                WS.CC_FK_CLB_CLIENT_NO, WS.MV_DB2_START, WS.MV_DB2_END);

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXGR35_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXGR35_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , GLOBDATA , IMPORT-0001EV , IMPORT-START-0002EV , IMPORT-END-0003EV , EXPORT-G-0001RG , EXPORT-0005EV.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_1285035064(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_1285035064
        /// </summary>
        private void M_MAIN_1285035064(string returnMethod = "")
        {
            //COMMENT:     DISPLAY 'SWEXGR35 BEGINNING '.
            M_PARA_1285035064_INIT("M_PARA_1285035064_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-1285035064-INIT THRU PARA-1285035064-INIT-EXIT
            M_PARA_1285035064("M_PARA_1285035064_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-1285035064 THRU PARA-1285035064-EXIT
                                                                                                                  //COMMENT:     DISPLAY 'END '
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_1285035064
        /// </summary>
        private void M_PARA_1285035064(string returnMethod = "")
        {
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            //COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            WS.MV_ABEND_FIELDS.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO MV-ABEND-FIELDS.
            WS.MV_ADD_INDEX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO MV-ADD-INDEX.
            WS.MV_START_MONTH.SetValue(LS.MONTH_0002);                                                          //COBOL==> MOVE MONTH-0002 TO MV-START-MONTH.
            WS.MV_START_YEAR.SetValue(LS.YEAR_0002);                                                            //COBOL==> MOVE YEAR-0002 TO MV-START-YEAR.
            WS.MV_END_MONTH.SetValue(LS.MONTH_0003);                                                            //COBOL==> MOVE MONTH-0003 TO MV-END-MONTH.
            WS.MV_END_YEAR.SetValue(LS.YEAR_0003);                                                              //COBOL==> MOVE YEAR-0003 TO MV-END-YEAR.
                                                                                                                //COMMENT: *PLL START
                                                                                                                //COMMENT:     MOVE NUMBER-0001        TO V-CLIENT-NUMBER153.
                                                                                                                //COMMENT:     MOVE MV-START-BENEFIT   TO V-BENEFIT-MONTH153.
                                                                                                                //COMMENT:  RKM - CHANGES FOR CLIENT PREFERRED ID
                                                                                                                //COMMENT:     MOVE NUMBER-0001        TO CC-FK-CLB-CLIENT-NO.
            WS.DCLKSD_CLIENT_BASIC.ResetToInitialValue();                                                       //COBOL==> INITIALIZE DCLKSD-CLIENT-BASIC.
            DbConv.ExecuteSqlQueryWithUR("SELECT CLIENT_NUMBER , CIS_PREFERRED_ID INTO {0} , {1} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {2} ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CIS_PREFERRED_ID INTO :CLB-CLIENT-NUMBER , :CLB-CIS-PREFERRED-ID FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :NUMBER-0001 WITH UR END-EXEC.
                                 WS.CLB_CLIENT_NUMBER, WS.CLB_CIS_PREFERRED_ID, LS.NUMBER_0001);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                if ((WS.CLB_CIS_PREFERRED_ID.IsNumericValue())
             && (!(WS.CLB_CIS_PREFERRED_ID.IsEqualTo(WS.CLB_CLIENT_NUMBER))))  //COBOL==> IF CLB-CIS-PREFERRED-ID IS NUMERIC AND CLB-CIS-PREFERRED-ID NOT = CLB-CLIENT-NUMBER
                {
                    WS.CC_FK_CLB_CLIENT_NO.SetValue(WS.CLB_CIS_PREFERRED_ID);                                           //COBOL==> MOVE CLB-CIS-PREFERRED-ID TO CC-FK-CLB-CLIENT-NO
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.CC_FK_CLB_CLIENT_NO.SetValue(LS.NUMBER_0001);                                                    //COBOL==> MOVE NUMBER-0001 TO CC-FK-CLB-CLIENT-NO
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RL");                                                               //COBOL==> MOVE 'RL' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            WS.MV_DB2_START.SetValue(WS.MV_START_BENEFIT);                                                      //COBOL==> MOVE MV-START-BENEFIT TO MV-DB2-START.
            WS.MV_DB2_END.SetValue(WS.MV_END_BENEFIT);                                                          //COBOL==> MOVE MV-END-BENEFIT TO MV-DB2-END.
                                                                                                                //COMMENT:     MOVE MV-START-BENEFIT   TO CC-BENEFIT-MONTH.
                                                                                                                //COMMENT:     MOVE 'N'                TO MV-DONE.
                                                                                                                //COMMENT:     PERFORM 7000-READ-FIRST-CASE-COMP THRU 7000-EXIT.
                                                                                                                //COMMENT:     IF CLIENT-NUMBER153 NOT = V-CLIENT-NUMBER153
                                                                                                                //COMMENT:           OR BENEFIT-MONTH153 > MV-END-BENEFIT
                                                                                                                //COMMENT:           OR EOF153
                                                                                                                //COMMENT:        MOVE 'A' TO MV-ABEND-TYPE
                                                                                                                //COMMENT:        MOVE '153' TO MV-ADA-FILE-NUMBER
                                                                                                                //COMMENT:        MOVE ' NF' TO MV-ADA-FILE-ACTION
                                                                                                                //COMMENT:        MOVE ZERO TO MV-ADA-RESPONSE-CD
                                                                                                                //COMMENT:     ELSE
                                                                                                                //COMMENT:        IF CC-BENEFIT-MONTH = MV-END-BENEFIT
                                                                                                                //COMMENT:           MOVE 'Y' TO MV-DONE
                                                                                                                //COMMENT:        END-IF
                                                                                                                //COMMENT:        IF CC-MEDICAL-SUBTYPE > "  "
                                                                                                                //COMMENT:           MOVE CC-MEDICAL-SUBTYPE TO MED-TYPE-0004(MV-ADD-INDEX)
                                                                                                                //COMMENT:           ADD 1 TO MV-ADD-INDEX
                                                                                                                //COMMENT:        END-IF
                                                                                                                //COMMENT:        PERFORM 1000-PROCESS-CASE-COMP THRU 1000-EXIT
                                                                                                                //COMMENT:                UNTIL MV-DONE = 'Y'
                                                                                                                //COMMENT: PLL START
                                                                                                                //COMMENT:  RKM - CHANGES FOR CLIENT PREFERRED ID
            if (WS.MV_ABEND_TYPE_NONE.Value)                                                                    //COBOL==> IF MV-ABEND-TYPE-NONE
            {
                WS.WS_CC_EOF_NO.SetValue(true);                                                                     //COBOL==> SET WS-CC-EOF-NO TO TRUE
                M_8100_DECLARE_CASECOMP("M_8100_EXIT"); if (Control.ExitProgram) { return; }                          //COBOL==> PERFORM 8100-DECLARE-CASECOMP THRU 8100-EXIT
                if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
                {
                    M_8110_OPEN_CASECOMP("M_8110_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 8110-OPEN-CASECOMP THRU 8110-EXIT
                }                                                                                                   //COBOL==> END-IF
                if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
                {
                    while (!((WS.WS_CC_EOF_YES.Value) || (!(DbConv.SQLCA.SQLCODE.IsEqualTo(0)))))                       //COBOL==> PERFORM 1000-PROCESS-CASE-COMP THRU 1000-EXIT UNTIL WS-CC-EOF-YES OR SQLCODE NOT = 0
                    {
                        M_1000_PROCESS_CASE_COMP("M_1000_EXIT"); if (Control.ExitProgram) { return; }
                    }
                }                                                                                                   //COBOL==> END-IF
                M_8130_CLOSE_CASECOMP("M_8130_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 8130-CLOSE-CASECOMP THRU 8130-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: END
            LS.EXPORT_G_0001MA.SetValue(WS.MV_ADD_INDEX.AsInt() - 1);                                           //COBOL==> SUBTRACT 1 FROM MV-ADD-INDEX GIVING EXPORT-G-0001MA.
                                                                                                                //COMMENT:     MOVE MV-ADD-INDEX TO EXPORT-G-0001MA.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                LS.TYPE_0005.SetValue(WS.MV_ABEND_TYPE);                                                            //COBOL==> MOVE MV-ABEND-TYPE TO TYPE-0005
                LS.ADABAS_FILE_NUMBER_0005.SetValue(WS.MV_ADA_FILE_NUMBER);                                         //COBOL==> MOVE MV-ADA-FILE-NUMBER TO ADABAS-FILE-NUMBER-0005
                LS.ADABAS_FILE_ACTION_0005.SetValue(WS.MV_ADA_FILE_ACTION);                                         //COBOL==> MOVE MV-ADA-FILE-ACTION TO ADABAS-FILE-ACTION-0005
                LS.ADABAS_RESPONSE_CD_0005.SetValue(WS.MV_ADA_RESPONSE_CD);                                         //COBOL==> MOVE MV-ADA-RESPONSE-CD TO ADABAS-RESPONSE-CD-0005
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PARA_1285035064") { M_PARA_1285035064_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1285035064_EXIT
        /// </summary>
        private void M_PARA_1285035064_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_1285035064_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_1285035064_EXIT") { M_1000_PROCESS_CASE_COMP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1000_PROCESS_CASE_COMP
        /// </summary>
        private void M_1000_PROCESS_CASE_COMP(string returnMethod = "")
        {
            //COMMENT:     PERFORM 7100-READ-NEXT-CASE-COMP THRU 7100-EXIT.
            //COMMENT:     IF CLIENT-NUMBER153 NOT = V-CLIENT-NUMBER153
            //COMMENT:           OR BENEFIT-MONTH153 > MV-END-BENEFIT
            //COMMENT:           OR EOF153
            //COMMENT:        MOVE 'Y' TO MV-DONE
            //COMMENT:     ELSE
            //COMMENT:        IF BENEFIT-MONTH153 = MV-END-BENEFIT
            //COMMENT:           MOVE 'Y' TO MV-DONE
            //COMMENT:        END-IF
            M_8120_FETCH_CASECOMP("M_8120_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 8120-FETCH-CASECOMP THRU 8120-EXIT
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100))
             && (WS.SW_FIRST_YES.Value))               //COBOL==> IF SQLCODE = 100 AND SW-FIRST-YES
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue("153");                                                              //COBOL==> MOVE '153' TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue(" NF");                                                              //COBOL==> MOVE ' NF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-IF.
            if (DbConv.SQLCA.SQLCODE.IsEqualTo(0))                                                              //COBOL==> IF SQLCODE = 0
            {
                WS.MV_CHECK_DONE.SetValue("N");                                                                     //COBOL==> MOVE 'N' TO MV-CHECK-DONE
                if (WS.CC_MEDICAL_SUBTYPE.IsGreaterThan("  "))                                                      //COBOL==> IF CC-MEDICAL-SUBTYPE > "  "
                {
                    for (WS.SUB1.SetValue(1); (!((WS.SUB1.IsEqualTo(20)) || (WS.MV_CHECK_DONE.IsEqualTo("Y")))); WS.SUB1.Add(1))  //COBOL==> PERFORM VARYING SUB1 FROM 1 BY 1 UNTIL SUB1 = 20 OR MV-CHECK-DONE = "Y"
                    {
                        if (LS.MED_TYPE_0004[WS.SUB1.AsInt()].IsEqualTo(WS.CC_MEDICAL_SUBTYPE))                             //COBOL==> IF MED-TYPE-0004 ( SUB1 ) = CC-MEDICAL-SUBTYPE
                        {
                            //COMMENT:                 DISPLAY 'MED TYPE 1 ' MED-TYPE-0004(SUB1)
                            WS.MV_CHECK_DONE.SetValue("Y");                                                                     //COBOL==> MOVE 'Y' TO MV-CHECK-DONE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (LS.MED_TYPE_0004[WS.SUB1.AsInt()].IsEqualTo("  "))                                              //COBOL==> IF MED-TYPE-0004 ( SUB1 ) = "  "
                            {
                                //COMMENT:                 DISPLAY 'MED TYPE 2 ' MED-TYPE-0004(SUB1)
                                LS.MED_TYPE_0004[WS.MV_ADD_INDEX.AsInt()].SetValue(WS.CC_MEDICAL_SUBTYPE);                          //COBOL==> MOVE CC-MEDICAL-SUBTYPE TO MED-TYPE-0004 ( MV-ADD-INDEX )
                                WS.MV_ADD_INDEX.Add(1);                                                                             //COBOL==> ADD 1 TO MV-ADD-INDEX
                                WS.MV_CHECK_DONE.SetValue("Y");                                                                     //COBOL==> MOVE 'Y' TO MV-CHECK-DONE
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-PERFORM
                                                                                                                        //COMMENT:           DISPLAY 'CHECK DONE ' MV-CHECK-DONE
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1000_PROCESS_CASE_COMP") { M_1000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1000_EXIT
        /// </summary>
        private void M_1000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1000_EXIT") { M_8100_DECLARE_CASECOMP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8100_DECLARE_CASECOMP
        /// </summary>
        /// <remarks>
        ///COMMENT: 7000-READ-FIRST-CASE-COMP.
        ///COMMENT:     @READLOGICAL153 FIRST.
        ///COMMENT:     IF RESPONSE-CODE153 > ZERO AND NOT EOF153
        ///COMMENT:        MOVE 'A'              TO MV-ABEND-TYPE
        ///COMMENT:        MOVE 153              TO MV-ADA-FILE-NUMBER
        ///COMMENT:        MOVE 'RLF'            TO MV-ADA-FILE-ACTION
        ///COMMENT:        MOVE RESPONSE-CODE153 TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 7000-EXIT.
        ///COMMENT:     EXIT.
        ///COMMENT: 7100-READ-NEXT-CASE-COMP.
        ///COMMENT:     @READLOGICAL153.
        ///COMMENT:     IF RESPONSE-CODE153 > ZERO AND NOT EOF153
        ///COMMENT:        MOVE 'A'              TO MV-ABEND-TYPE
        ///COMMENT:        MOVE 153              TO MV-ADA-FILE-NUMBER
        ///COMMENT:        MOVE 'RL '            TO MV-ADA-FILE-ACTION
        ///COMMENT:        MOVE RESPONSE-CODE153 TO MV-ADA-RESPONSE-CD
        ///COMMENT:     END-IF.
        ///COMMENT: 7100-EXIT.
        ///COMMENT:     EXIT.
        /// </remarks>
        private void M_8100_DECLARE_CASECOMP(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '8100-DECLARE'
            // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE CASECOMP CURSOR FOR SELECT BENEFIT_MONTH , PARTICIPATION_CODE , MEDICAL_SUBTYPE , POSITION_ON_APP , CASE_OPEN_DT , CASE_CLOSE_DT , FK_CLB_CLIENT_NO , FK_CSB_CASE_NO , FK_PGB_PROG_TYPE FROM KSD_CASE_COMP WHERE FK_CLB_CLIENT_NO = :CC-FK-CLB-CLIENT-NO AND ( BENEFIT_MONTH >= :MV-DB2-START AND BENEFIT_MONTH <= :MV-DB2-END ) ORDER BY FK_CLB_CLIENT_NO , BENEFIT_MONTH , FK_CSB_CASE_NO WITH UR END-EXEC.
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8100_DECLARE_CASECOMP") { M_8100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8100_EXIT
        /// </summary>
        private void M_8100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8100_EXIT") { M_8110_OPEN_CASECOMP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8110_OPEN_CASECOMP
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************************************************************
        ///COMMENT:  OPEN CURSOR FOR KSD CASE COMP DB2 TABLE ROUTINE               *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_8110_OPEN_CASECOMP(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '8110-OPEN'
            DbConv.OpenReader("CASECOMP");                                                                      //COBOL==> EXEC SQL OPEN CASECOMP END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8110_OPEN_CASECOMP") { M_8110_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8110_EXIT
        /// </summary>
        private void M_8110_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8110_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8110_EXIT") { M_8120_FETCH_CASECOMP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8120_FETCH_CASECOMP
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************************************************************
        ///COMMENT:  FETCH CURSOR FOR KSC CASE COMP DB2 TABLE ROUTINE               *
        ///COMMENT: *****************************************************************
        /// </remarks>
        private void M_8120_FETCH_CASECOMP(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '8120-FETCH'
            DbConv.FetchReaderRow("CASECOMP",                                                                //COBOL==> EXEC SQL FETCH CASECOMP INTO :CC-BENEFIT-MONTH , :CC-PARTICIPATION-CODE , :CC-MEDICAL-SUBTYPE , :CC-POSITION-ON-APP , :CC-CASE-OPEN-DT , :CC-CASE-CLOSE-DT , :CC-FK-CLB-CLIENT-NO , :CC-FK-CSB-CASE-NO , :CC-FK-PGB-PROG-TYPE END-EXEC.
                             WS.CC_BENEFIT_MONTH, WS.CC_PARTICIPATION_CODE, WS.CC_MEDICAL_SUBTYPE, WS.CC_POSITION_ON_APP, WS.CC_CASE_OPEN_DT, WS.CC_CASE_CLOSE_DT, WS.CC_FK_CLB_CLIENT_NO, WS.CC_FK_CSB_CASE_NO, WS.CC_FK_PGB_PROG_TYPE);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                WS.SW_FIRST_NO.SetValue(true);                                                                      //COBOL==> SET SW-FIRST-NO TO TRUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_CC_EOF_YES.SetValue(true);                                                                    //COBOL==> SET WS-CC-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                if (WS.SW_FIRST_YES.Value)                                                                          //COBOL==> IF SW-FIRST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RL");                                                               //COBOL==> MOVE 'RL' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8120_FETCH_CASECOMP") { M_8120_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8120_EXIT
        /// </summary>
        private void M_8120_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8120_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8120_EXIT") { M_8130_CLOSE_CASECOMP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8130_CLOSE_CASECOMP
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************************************************************
        ///COMMENT:  CLOSE CURSOR FOR KSD CASE COMP DB2 TABLE ROUTINE               *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_8130_CLOSE_CASECOMP(string returnMethod = "")
        {
            //COMMENT:     DISPLAY '8130-CLOSE'
            DbConv.CloseReader("CASECOMP");                                                                     //COBOL==> EXEC SQL CLOSE CASECOMP END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(153);                                                                //COBOL==> MOVE 153 TO MV-ADA-FILE-NUMBER
                if (WS.SW_FIRST_YES.Value)                                                                          //COBOL==> IF SW-FIRST-YES
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.MV_ADA_FILE_ACTION.SetValue("RL");                                                               //COBOL==> MOVE 'RL' TO MV-ADA-FILE-ACTION
                }                                                                                                   //COBOL==> END-IF
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_8130_CLOSE_CASECOMP") { M_8130_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_8130_EXIT
        /// </summary>
        private void M_8130_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_8130_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_8130_EXIT") { M_PARA_1285035064_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1285035064_INIT
        /// </summary>
        private void M_PARA_1285035064_INIT(string returnMethod = "")
        {
            WS.EXPORT_G_0001PS.SetValue(1);                                                                     //COBOL==> MOVE 1 TO EXPORT-G-0001PS
            LS.EXPORT_G_0001RG.ResetToInitialValue();                                                           //COBOL==> INITIALIZE EXPORT-G-0001RG
            LS.EXPORT_0005EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0005EV .
            if (returnMethod != "" && returnMethod != "M_PARA_1285035064_INIT") { M_PARA_1285035064_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1285035064_INIT_EXIT
        /// </summary>
        private void M_PARA_1285035064_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_1285035064_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
