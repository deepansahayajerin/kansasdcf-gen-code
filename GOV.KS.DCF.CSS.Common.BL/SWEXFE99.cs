#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2021
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2021-12-07 03:12:30 PM
   **        *   FROM COBOL PGM   :  SWEXFE99
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   ***************************************************************
                       SOURCE CODE GENERATED BY
                             CA GEN 8.5
      COPYRIGHT (C) 2021 CA TECHNOLOGIES. ALL RIGHTS RESERVED.
       NAME: EAB_FDSO_INTERFACE_DRVR          DATE: 2021/02/22
       TARGET OS:   MVS                       TIME: 13:27:19
       TARGET DBMS: DB2                       USER: SWDPDJD
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING NOT SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS NOT SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
       DYNAMIC LINK (Z/OS) USED BUS SYS DEFAULT OF "Yes"
   ***************************************************************
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.IO.Common;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
using MDSY.Framework.IO.Common;
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region File Section Class
    internal class SWEXFE99_fd : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string FileSection = "SWEXFE99_fd_FileSection";
            internal const string FDSO_INPUT_FILE = "FDSO_INPUT_FILE";
            internal const string FDSO_INPUT_RECORD = "FDSO_INPUT_RECORD";
            internal const string DETAIL_RECORD = "DETAIL_RECORD";
            internal const string FDSO_STATE_CODE_DET = "FDSO_STATE_CODE_DET";
            internal const string FDSO_LOCAL_CODE = "FDSO_LOCAL_CODE";
            internal const string FDSO_SOC_SEC_NUM = "FDSO_SOC_SEC_NUM";
            internal const string FDSO_CASE_NO = "FDSO_CASE_NO";
            internal const string FDSO_LAST_NAME = "FDSO_LAST_NAME";
            internal const string FDSO_FIRST_NAME = "FDSO_FIRST_NAME";
            internal const string FDSO_ARREARAGE = "FDSO_ARREARAGE";
            internal const string FDSO_COLL_AMOUNT = "FDSO_COLL_AMOUNT";
            internal const string FDSO_ADJ_AMOUNT = "FDSO_ADJ_AMOUNT";
            internal const string FDSO_ADJ_YEAR = "FDSO_ADJ_YEAR";
            internal const string FDSO_OFFSET_TAX_YR = "FDSO_OFFSET_TAX_YR";
            internal const string FDSO_RETURN_IND = "FDSO_RETURN_IND";
            internal const string FDSO_CASE_TYPE = "FDSO_CASE_TYPE";
            internal const string FDSO_TRANS_STATE = "FDSO_TRANS_STATE";
            internal const string FDSO_TRANS_LOC_CODE = "FDSO_TRANS_LOC_CODE";
            internal const string FDSO_NAMES = "FDSO_NAMES";
            internal const string FDSO_STREET_ADDR = "FDSO_STREET_ADDR";
            internal const string FDSO_CITY_STATE = "FDSO_CITY_STATE";
            internal const string FDSO_ZIP_5 = "FDSO_ZIP_5";
            internal const string FDSO_ZIP_4 = "FDSO_ZIP_4";
            internal const string FDSO_TYPE_OFFSET = "FDSO_TYPE_OFFSET";
            internal const string FDSO_FILLER = "FDSO_FILLER";
            internal const string FDSO_INJURED_SPOUSE = "FDSO_INJURED_SPOUSE";
            internal const string FDSO_FILLER_d2 = "FDSO_FILLER_d2";
            internal const string TOTAL_RECORD = "TOTAL_RECORD";
            internal const string FDSO_STATE_CODE_TOT = "FDSO_STATE_CODE_TOT";
            internal const string FDSO_FILLER_d3 = "FDSO_FILLER_d3";
            internal const string FDSO_TOTAL = "FDSO_TOTAL";
            internal const string FDSO_FILLER_d4 = "FDSO_FILLER_d4";
            internal const string FDSO_ADJ_COUNT = "FDSO_ADJ_COUNT";
            internal const string FDSO_COLL_COUNT = "FDSO_COLL_COUNT";
            internal const string FDSO_ARREAR_AMOUNT = "FDSO_ARREAR_AMOUNT";
            internal const string FDSO_TOTAL_COLL_AMOUNT = "FDSO_TOTAL_COLL_AMOUNT";
            internal const string FDSO_TOTAL_ADJ_AMOUNT = "FDSO_TOTAL_ADJ_AMOUNT";
            internal const string FDSO_NET_AMOUNT = "FDSO_NET_AMOUNT";
            internal const string FDSO_FILLER_d5 = "FDSO_FILLER_d5";
        }
        #endregion

        #region Direct-access element properties
        public IFileLink FDSO_INPUT_FILE { get; set; }
        public IGroup FDSO_INPUT_RECORD { get { return GetElementByName<IGroup>(Names.FDSO_INPUT_RECORD); } }
        public IGroup DETAIL_RECORD { get { return GetElementByName<IGroup>(Names.DETAIL_RECORD); } }
        public IField FDSO_STATE_CODE_DET { get { return GetElementByName<IField>(Names.FDSO_STATE_CODE_DET); } }
        public IField FDSO_LOCAL_CODE { get { return GetElementByName<IField>(Names.FDSO_LOCAL_CODE); } }
        public IField FDSO_SOC_SEC_NUM { get { return GetElementByName<IField>(Names.FDSO_SOC_SEC_NUM); } }
        public IField FDSO_CASE_NO { get { return GetElementByName<IField>(Names.FDSO_CASE_NO); } }
        public IField FDSO_LAST_NAME { get { return GetElementByName<IField>(Names.FDSO_LAST_NAME); } }
        public IField FDSO_FIRST_NAME { get { return GetElementByName<IField>(Names.FDSO_FIRST_NAME); } }
        public IField FDSO_ARREARAGE { get { return GetElementByName<IField>(Names.FDSO_ARREARAGE); } }
        public IField FDSO_COLL_AMOUNT { get { return GetElementByName<IField>(Names.FDSO_COLL_AMOUNT); } }
        public IField FDSO_ADJ_AMOUNT { get { return GetElementByName<IField>(Names.FDSO_ADJ_AMOUNT); } }
        public IField FDSO_ADJ_YEAR { get { return GetElementByName<IField>(Names.FDSO_ADJ_YEAR); } }
        public IField FDSO_OFFSET_TAX_YR { get { return GetElementByName<IField>(Names.FDSO_OFFSET_TAX_YR); } }
        public IField FDSO_RETURN_IND { get { return GetElementByName<IField>(Names.FDSO_RETURN_IND); } }
        public IField FDSO_CASE_TYPE { get { return GetElementByName<IField>(Names.FDSO_CASE_TYPE); } }
        public IField FDSO_TRANS_STATE { get { return GetElementByName<IField>(Names.FDSO_TRANS_STATE); } }
        public IField FDSO_TRANS_LOC_CODE { get { return GetElementByName<IField>(Names.FDSO_TRANS_LOC_CODE); } }
        public IField FDSO_NAMES { get { return GetElementByName<IField>(Names.FDSO_NAMES); } }
        public IField FDSO_STREET_ADDR { get { return GetElementByName<IField>(Names.FDSO_STREET_ADDR); } }
        public IField FDSO_CITY_STATE { get { return GetElementByName<IField>(Names.FDSO_CITY_STATE); } }
        public IField FDSO_ZIP_5 { get { return GetElementByName<IField>(Names.FDSO_ZIP_5); } }
        public IField FDSO_ZIP_4 { get { return GetElementByName<IField>(Names.FDSO_ZIP_4); } }
        public IField FDSO_TYPE_OFFSET { get { return GetElementByName<IField>(Names.FDSO_TYPE_OFFSET); } }
        public IField FDSO_FILLER { get { return GetElementByName<IField>(Names.FDSO_FILLER); } }
        public IField FDSO_INJURED_SPOUSE { get { return GetElementByName<IField>(Names.FDSO_INJURED_SPOUSE); } }
        public IField FDSO_FILLER_d2 { get { return GetElementByName<IField>(Names.FDSO_FILLER_d2); } }
        public IGroup TOTAL_RECORD { get { return GetElementByName<IGroup>(Names.TOTAL_RECORD); } }
        public IField FDSO_STATE_CODE_TOT { get { return GetElementByName<IField>(Names.FDSO_STATE_CODE_TOT); } }
        public IField FDSO_FILLER_d3 { get { return GetElementByName<IField>(Names.FDSO_FILLER_d3); } }
        public IField FDSO_TOTAL { get { return GetElementByName<IField>(Names.FDSO_TOTAL); } }
        public IField FDSO_FILLER_d4 { get { return GetElementByName<IField>(Names.FDSO_FILLER_d4); } }
        public IField FDSO_ADJ_COUNT { get { return GetElementByName<IField>(Names.FDSO_ADJ_COUNT); } }
        public IField FDSO_COLL_COUNT { get { return GetElementByName<IField>(Names.FDSO_COLL_COUNT); } }
        public IField FDSO_ARREAR_AMOUNT { get { return GetElementByName<IField>(Names.FDSO_ARREAR_AMOUNT); } }
        public IField FDSO_TOTAL_COLL_AMOUNT { get { return GetElementByName<IField>(Names.FDSO_TOTAL_COLL_AMOUNT); } }
        public IField FDSO_TOTAL_ADJ_AMOUNT { get { return GetElementByName<IField>(Names.FDSO_TOTAL_ADJ_AMOUNT); } }
        public IField FDSO_NET_AMOUNT { get { return GetElementByName<IField>(Names.FDSO_NET_AMOUNT); } }
        public IField FDSO_FILLER_d5 { get { return GetElementByName<IField>(Names.FDSO_FILLER_d5); } }


        internal SWEXFE99_ws WS;
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the FileSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.FDSO_INPUT_RECORD, (FDSO_INPUT_RECORD) =>
           {
               IGroup DETAIL_RECORD_local = (IGroup)FDSO_INPUT_RECORD.CreateNewGroup(Names.DETAIL_RECORD, (DETAIL_RECORD) =>
               {
                   DETAIL_RECORD.CreateNewField(Names.FDSO_STATE_CODE_DET, FieldType.String, 2);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_LOCAL_CODE, FieldType.String, 3);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_SOC_SEC_NUM, FieldType.UnsignedNumeric, 9);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_CASE_NO, FieldType.String, 15);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_LAST_NAME, FieldType.String, 20);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_FIRST_NAME, FieldType.String, 15);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_ARREARAGE, FieldType.UnsignedNumeric, 11, null, 2);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_COLL_AMOUNT, FieldType.SignedNumeric, 11, null, 2);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_ADJ_AMOUNT, FieldType.SignedNumeric, 11, null, 2);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_ADJ_YEAR, FieldType.UnsignedNumeric, 4);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_OFFSET_TAX_YR, FieldType.UnsignedNumeric, 4);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_RETURN_IND, FieldType.String, 1);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_CASE_TYPE, FieldType.String, 1);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_TRANS_STATE, FieldType.String, 2);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_TRANS_LOC_CODE, FieldType.UnsignedNumeric, 3);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_NAMES, FieldType.String, 35);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_STREET_ADDR, FieldType.String, 35);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_CITY_STATE, FieldType.String, 25);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_ZIP_5, FieldType.String, 5);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_ZIP_4, FieldType.String, 4);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_TYPE_OFFSET, FieldType.String, 3);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_FILLER, FieldType.String, 5);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_INJURED_SPOUSE, FieldType.String, 1);
                   DETAIL_RECORD.CreateNewField(Names.FDSO_FILLER_d2, FieldType.String, 15);
               });
               FDSO_INPUT_RECORD.CreateNewGroupRedefine(Names.TOTAL_RECORD, DETAIL_RECORD_local, (TOTAL_RECORD) =>
               {
                   TOTAL_RECORD.CreateNewField(Names.FDSO_STATE_CODE_TOT, FieldType.String, 2);
                   TOTAL_RECORD.CreateNewField(Names.FDSO_FILLER_d3, FieldType.String, 3);
                   TOTAL_RECORD.CreateNewField(Names.FDSO_TOTAL, FieldType.String, 9);
                   TOTAL_RECORD.CreateNewField(Names.FDSO_FILLER_d4, FieldType.String, 20);
                   TOTAL_RECORD.CreateNewField(Names.FDSO_ADJ_COUNT, FieldType.UnsignedNumeric, 15);
                   TOTAL_RECORD.CreateNewField(Names.FDSO_COLL_COUNT, FieldType.UnsignedNumeric, 15);
                   TOTAL_RECORD.CreateNewField(Names.FDSO_ARREAR_AMOUNT, FieldType.SignedNumeric, 11, null, 2);
                   TOTAL_RECORD.CreateNewField(Names.FDSO_TOTAL_COLL_AMOUNT, FieldType.SignedNumeric, 11, null, 2);
                   TOTAL_RECORD.CreateNewField(Names.FDSO_TOTAL_ADJ_AMOUNT, FieldType.SignedNumeric, 11, null, 2);
                   TOTAL_RECORD.CreateNewField(Names.FDSO_NET_AMOUNT, FieldType.SignedNumeric, 11, null, 2);
                   TOTAL_RECORD.CreateNewField(Names.FDSO_FILLER_d5, FieldType.String, 132);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.FileSection;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            IFileHandler FileHandler = InversionContainer.GetImplementingObject<IFileHandler>();

            FDSO_INPUT_FILE = FileHandler.GetFile("UT_S_FDSINPUT");
            FDSO_INPUT_FILE.StatusField = WS.FDSO_FILE_STATUS;
            FDSO_INPUT_FILE.AssociatedBuffer = FDSO_INPUT_RECORD;
        }
        #endregion

        #region Constructors
        public SWEXFE99_fd(SWEXFE99_ws ws)
            : base()
        {
            this.WS = ws;
            Initialize();

        }
        #endregion
    }
    #endregion File Section Class
    #region Working Storage Class
    internal class SWEXFE99_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXFE99_ws_WorkingStorage";
            internal const string FDSO_FILE_STATUS = "FDSO_FILE_STATUS";
            internal const string WS_INPUT_RESTART_INFO = "WS_INPUT_RESTART_INFO";
            internal const string WS_INPUT_STATE = "WS_INPUT_STATE";
            internal const string WS_INPUT_LOC_CODE = "WS_INPUT_LOC_CODE";
            internal const string WS_INPUT_SOC_SEC_NUM = "WS_INPUT_SOC_SEC_NUM";
            internal const string WS_INPUT_CASE_NO = "WS_INPUT_CASE_NO";
            internal const string WS_INPUT_LAST_NAME = "WS_INPUT_LAST_NAME";
            internal const string WS_INPUT_FIRST_NAME = "WS_INPUT_FIRST_NAME";
            internal const string WS_INPUT_ARREARAGE = "WS_INPUT_ARREARAGE";
            internal const string WS_INPUT_COLL_AMOUNT = "WS_INPUT_COLL_AMOUNT";
            internal const string WS_INPUT_ADJ_AMOUNT = "WS_INPUT_ADJ_AMOUNT";
            internal const string WS_INPUT_ADJ_YEAR = "WS_INPUT_ADJ_YEAR";
            internal const string WS_INPUT_OFFSET_TAX_YR = "WS_INPUT_OFFSET_TAX_YR";
            internal const string WS_INPUT_RETURN_IND = "WS_INPUT_RETURN_IND";
            internal const string WS_INPUT_CASE_TYPE = "WS_INPUT_CASE_TYPE";
            internal const string WS_INPUT_TRANS_STATE = "WS_INPUT_TRANS_STATE";
            internal const string WS_INPUT_TRANS_LOC_CODE = "WS_INPUT_TRANS_LOC_CODE";
            internal const string WS_INPUT_NAMES = "WS_INPUT_NAMES";
            internal const string WS_INPUT_STREET_ADDR = "WS_INPUT_STREET_ADDR";
            internal const string WS_INPUT_CITY_STATE = "WS_INPUT_CITY_STATE";
            internal const string WS_INPUT_ZIP = "WS_INPUT_ZIP";
            internal const string WS_INPUT_FILLER = "WS_INPUT_FILLER";
            internal const string WS_FORMATTED_RESTART_INFO = "WS_FORMATTED_RESTART_INFO";
            internal const string WS_STATE = "WS_STATE";
            internal const string WS_LOC_CODE = "WS_LOC_CODE";
            internal const string WS_SOC_SEC_NUM = "WS_SOC_SEC_NUM";
            internal const string WS_CASE_NO = "WS_CASE_NO";
            internal const string WS_LAST_NAME = "WS_LAST_NAME";
            internal const string WS_FIRST_NAME = "WS_FIRST_NAME";
            internal const string WS_ARREARAGE = "WS_ARREARAGE";
            internal const string WS_COLL_AMOUNT = "WS_COLL_AMOUNT";
            internal const string WS_ADJ_AMOUNT = "WS_ADJ_AMOUNT";
            internal const string WS_ADJ_YEAR = "WS_ADJ_YEAR";
            internal const string WS_OFFSET_TAX_YR = "WS_OFFSET_TAX_YR";
            internal const string WS_RETURN_IND = "WS_RETURN_IND";
            internal const string WS_CASE_TYPE = "WS_CASE_TYPE";
            internal const string WS_TRANS_STATE = "WS_TRANS_STATE";
            internal const string WS_TRANS_LOC_CODE = "WS_TRANS_LOC_CODE";
            internal const string WS_NAMES = "WS_NAMES";
            internal const string WS_STREET_ADDR = "WS_STREET_ADDR";
            internal const string WS_CITY_STATE = "WS_CITY_STATE";
            internal const string WS_ZIP = "WS_ZIP";
            internal const string WS_FILLER = "WS_FILLER";
            internal const string WS_FORMATTED_YR = "WS_FORMATTED_YR";
            internal const string WS_CCYY = "WS_CCYY";
            internal const string WS_TRIM_CASE_15 = "WS_TRIM_CASE_15";
            internal const string WS_TRIM_CASE_5_R = "WS_TRIM_CASE_5_R";
            internal const string WS_TRIM_CASE_510 = "WS_TRIM_CASE_510";
            internal const string WS_TRIM_CASE_5 = "WS_TRIM_CASE_5";
            internal const string WS_TRIM_CASE_4_R = "WS_TRIM_CASE_4_R";
            internal const string WS_TRIM_CASE_410 = "WS_TRIM_CASE_410";
            internal const string WS_TRIM_CASE_4 = "WS_TRIM_CASE_4";
            internal const string WS_TRIM_CASE_3_R = "WS_TRIM_CASE_3_R";
            internal const string WS_TRIM_CASE_310 = "WS_TRIM_CASE_310";
            internal const string WS_TRIM_CASE_3 = "WS_TRIM_CASE_3";
            internal const string WS_TRIM_CASE_2_R = "WS_TRIM_CASE_2_R";
            internal const string WS_TRIM_CASE_210 = "WS_TRIM_CASE_210";
            internal const string WS_TRIM_CASE_2 = "WS_TRIM_CASE_2";
            internal const string WS_TRIM_CASE_1_R = "WS_TRIM_CASE_1_R";
            internal const string WS_TRIM_CASE_110 = "WS_TRIM_CASE_110";
            internal const string WS_TRIM_CASE_1 = "WS_TRIM_CASE_1";
            internal const string WS_SETUP_INTERFACE_FIELDS = "WS_SETUP_INTERFACE_FIELDS";
            internal const string WS_SETUP_TYPE = "WS_SETUP_TYPE";
            internal const string WS_SETUP_CASE_TYPE = "WS_SETUP_CASE_TYPE";
            internal const string WS_SETUP_STATE = "WS_SETUP_STATE";
            internal const string WS_SETUP_FILLER = "WS_SETUP_FILLER";
            internal const string WS_STATE_1_2 = "WS_STATE_1_2";
            internal const string WS_STATE_1 = "WS_STATE_1";
            internal const string WS_STATE_2 = "WS_STATE_2";
            internal const string WS_CITY_STATE_TBL_AREA = "WS_CITY_STATE_TBL_AREA";
            internal const string WS_CITY_STATE_TBL = "WS_CITY_STATE_TBL";
            internal const string WS_CITY_STATE_TBL_R = "WS_CITY_STATE_TBL_R";
            internal const string WS_CS_01 = "WS_CS_01";
            internal const string WS_CS_02 = "WS_CS_02";
            internal const string WS_CS_03 = "WS_CS_03";
            internal const string WS_CS_04 = "WS_CS_04";
            internal const string WS_CS_05 = "WS_CS_05";
            internal const string WS_CS_06 = "WS_CS_06";
            internal const string WS_CS_07 = "WS_CS_07";
            internal const string WS_CS_08 = "WS_CS_08";
            internal const string WS_CS_09 = "WS_CS_09";
            internal const string WS_CS_10 = "WS_CS_10";
            internal const string WS_CS_11 = "WS_CS_11";
            internal const string WS_CS_12 = "WS_CS_12";
            internal const string WS_CS_13 = "WS_CS_13";
            internal const string WS_CS_14 = "WS_CS_14";
            internal const string WS_CS_15 = "WS_CS_15";
            internal const string WS_CS_16 = "WS_CS_16";
            internal const string WS_CS_17 = "WS_CS_17";
            internal const string WS_CS_18 = "WS_CS_18";
            internal const string WS_CS_19 = "WS_CS_19";
            internal const string WS_CS_20 = "WS_CS_20";
            internal const string WS_CS_21 = "WS_CS_21";
            internal const string WS_CS_22 = "WS_CS_22";
            internal const string WS_CS_23 = "WS_CS_23";
            internal const string WS_CS_24 = "WS_CS_24";
            internal const string WS_CS_25 = "WS_CS_25";
            internal const string FUNC_0661689945_ESC_FLAG = "FUNC_0661689945_ESC_FLAG";
        }
        #endregion

        #region Direct-access element properties
        public IField FDSO_FILE_STATUS { get { return GetElementByName<IField>(Names.FDSO_FILE_STATUS); } }
        public IGroup WS_INPUT_RESTART_INFO { get { return GetElementByName<IGroup>(Names.WS_INPUT_RESTART_INFO); } }
        public IField WS_INPUT_STATE { get { return GetElementByName<IField>(Names.WS_INPUT_STATE); } }
        public IField WS_INPUT_LOC_CODE { get { return GetElementByName<IField>(Names.WS_INPUT_LOC_CODE); } }
        public IField WS_INPUT_SOC_SEC_NUM { get { return GetElementByName<IField>(Names.WS_INPUT_SOC_SEC_NUM); } }
        public IField WS_INPUT_CASE_NO { get { return GetElementByName<IField>(Names.WS_INPUT_CASE_NO); } }
        public IField WS_INPUT_LAST_NAME { get { return GetElementByName<IField>(Names.WS_INPUT_LAST_NAME); } }
        public IField WS_INPUT_FIRST_NAME { get { return GetElementByName<IField>(Names.WS_INPUT_FIRST_NAME); } }
        public IField WS_INPUT_ARREARAGE { get { return GetElementByName<IField>(Names.WS_INPUT_ARREARAGE); } }
        public IField WS_INPUT_COLL_AMOUNT { get { return GetElementByName<IField>(Names.WS_INPUT_COLL_AMOUNT); } }
        public IField WS_INPUT_ADJ_AMOUNT { get { return GetElementByName<IField>(Names.WS_INPUT_ADJ_AMOUNT); } }
        public IField WS_INPUT_ADJ_YEAR { get { return GetElementByName<IField>(Names.WS_INPUT_ADJ_YEAR); } }
        public IField WS_INPUT_OFFSET_TAX_YR { get { return GetElementByName<IField>(Names.WS_INPUT_OFFSET_TAX_YR); } }
        public IField WS_INPUT_RETURN_IND { get { return GetElementByName<IField>(Names.WS_INPUT_RETURN_IND); } }
        public IField WS_INPUT_CASE_TYPE { get { return GetElementByName<IField>(Names.WS_INPUT_CASE_TYPE); } }
        public IField WS_INPUT_TRANS_STATE { get { return GetElementByName<IField>(Names.WS_INPUT_TRANS_STATE); } }
        public IField WS_INPUT_TRANS_LOC_CODE { get { return GetElementByName<IField>(Names.WS_INPUT_TRANS_LOC_CODE); } }
        public IField WS_INPUT_NAMES { get { return GetElementByName<IField>(Names.WS_INPUT_NAMES); } }
        public IField WS_INPUT_STREET_ADDR { get { return GetElementByName<IField>(Names.WS_INPUT_STREET_ADDR); } }
        public IField WS_INPUT_CITY_STATE { get { return GetElementByName<IField>(Names.WS_INPUT_CITY_STATE); } }
        public IField WS_INPUT_ZIP { get { return GetElementByName<IField>(Names.WS_INPUT_ZIP); } }
        public IField WS_INPUT_FILLER { get { return GetElementByName<IField>(Names.WS_INPUT_FILLER); } }
        public IGroup WS_FORMATTED_RESTART_INFO { get { return GetElementByName<IGroup>(Names.WS_FORMATTED_RESTART_INFO); } }
        public IField WS_STATE { get { return GetElementByName<IField>(Names.WS_STATE); } }
        public IField WS_LOC_CODE { get { return GetElementByName<IField>(Names.WS_LOC_CODE); } }
        public IField WS_SOC_SEC_NUM { get { return GetElementByName<IField>(Names.WS_SOC_SEC_NUM); } }
        public IField WS_CASE_NO { get { return GetElementByName<IField>(Names.WS_CASE_NO); } }
        public IField WS_LAST_NAME { get { return GetElementByName<IField>(Names.WS_LAST_NAME); } }
        public IField WS_FIRST_NAME { get { return GetElementByName<IField>(Names.WS_FIRST_NAME); } }
        public IField WS_ARREARAGE { get { return GetElementByName<IField>(Names.WS_ARREARAGE); } }
        public IField WS_COLL_AMOUNT { get { return GetElementByName<IField>(Names.WS_COLL_AMOUNT); } }
        public IField WS_ADJ_AMOUNT { get { return GetElementByName<IField>(Names.WS_ADJ_AMOUNT); } }
        public IField WS_ADJ_YEAR { get { return GetElementByName<IField>(Names.WS_ADJ_YEAR); } }
        public IField WS_OFFSET_TAX_YR { get { return GetElementByName<IField>(Names.WS_OFFSET_TAX_YR); } }
        public IField WS_RETURN_IND { get { return GetElementByName<IField>(Names.WS_RETURN_IND); } }
        public IField WS_CASE_TYPE { get { return GetElementByName<IField>(Names.WS_CASE_TYPE); } }
        public IField WS_TRANS_STATE { get { return GetElementByName<IField>(Names.WS_TRANS_STATE); } }
        public IField WS_TRANS_LOC_CODE { get { return GetElementByName<IField>(Names.WS_TRANS_LOC_CODE); } }
        public IField WS_NAMES { get { return GetElementByName<IField>(Names.WS_NAMES); } }
        public IField WS_STREET_ADDR { get { return GetElementByName<IField>(Names.WS_STREET_ADDR); } }
        public IField WS_CITY_STATE { get { return GetElementByName<IField>(Names.WS_CITY_STATE); } }
        public IField WS_ZIP { get { return GetElementByName<IField>(Names.WS_ZIP); } }
        public IField WS_FILLER { get { return GetElementByName<IField>(Names.WS_FILLER); } }
        public IGroup WS_FORMATTED_YR { get { return GetElementByName<IGroup>(Names.WS_FORMATTED_YR); } }
        public IField WS_CCYY { get { return GetElementByName<IField>(Names.WS_CCYY); } }
        public IField WS_TRIM_CASE_15 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_15); } }
        public IGroup WS_TRIM_CASE_5_R { get { return GetElementByName<IGroup>(Names.WS_TRIM_CASE_5_R); } }
        public IField WS_TRIM_CASE_510 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_510); } }
        public IField WS_TRIM_CASE_5 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_5); } }
        public IGroup WS_TRIM_CASE_4_R { get { return GetElementByName<IGroup>(Names.WS_TRIM_CASE_4_R); } }
        public IField WS_TRIM_CASE_410 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_410); } }
        public IField WS_TRIM_CASE_4 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_4); } }
        public IGroup WS_TRIM_CASE_3_R { get { return GetElementByName<IGroup>(Names.WS_TRIM_CASE_3_R); } }
        public IField WS_TRIM_CASE_310 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_310); } }
        public IField WS_TRIM_CASE_3 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_3); } }
        public IGroup WS_TRIM_CASE_2_R { get { return GetElementByName<IGroup>(Names.WS_TRIM_CASE_2_R); } }
        public IField WS_TRIM_CASE_210 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_210); } }
        public IField WS_TRIM_CASE_2 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_2); } }
        public IGroup WS_TRIM_CASE_1_R { get { return GetElementByName<IGroup>(Names.WS_TRIM_CASE_1_R); } }
        public IField WS_TRIM_CASE_110 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_110); } }
        public IField WS_TRIM_CASE_1 { get { return GetElementByName<IField>(Names.WS_TRIM_CASE_1); } }
        public IGroup WS_SETUP_INTERFACE_FIELDS { get { return GetElementByName<IGroup>(Names.WS_SETUP_INTERFACE_FIELDS); } }
        public IField WS_SETUP_TYPE { get { return GetElementByName<IField>(Names.WS_SETUP_TYPE); } }
        public IField WS_SETUP_CASE_TYPE { get { return GetElementByName<IField>(Names.WS_SETUP_CASE_TYPE); } }
        public IField WS_SETUP_STATE { get { return GetElementByName<IField>(Names.WS_SETUP_STATE); } }
        public IField WS_SETUP_FILLER { get { return GetElementByName<IField>(Names.WS_SETUP_FILLER); } }
        public IGroup WS_STATE_1_2 { get { return GetElementByName<IGroup>(Names.WS_STATE_1_2); } }
        public IField WS_STATE_1 { get { return GetElementByName<IField>(Names.WS_STATE_1); } }
        public IField WS_STATE_2 { get { return GetElementByName<IField>(Names.WS_STATE_2); } }
        public IGroup WS_CITY_STATE_TBL_AREA { get { return GetElementByName<IGroup>(Names.WS_CITY_STATE_TBL_AREA); } }
        public IField WS_CITY_STATE_TBL { get { return GetElementByName<IField>(Names.WS_CITY_STATE_TBL); } }
        public IGroup WS_CITY_STATE_TBL_R { get { return GetElementByName<IGroup>(Names.WS_CITY_STATE_TBL_R); } }
        public IField WS_CS_01 { get { return GetElementByName<IField>(Names.WS_CS_01); } }
        public IField WS_CS_02 { get { return GetElementByName<IField>(Names.WS_CS_02); } }
        public IField WS_CS_03 { get { return GetElementByName<IField>(Names.WS_CS_03); } }
        public IField WS_CS_04 { get { return GetElementByName<IField>(Names.WS_CS_04); } }
        public IField WS_CS_05 { get { return GetElementByName<IField>(Names.WS_CS_05); } }
        public IField WS_CS_06 { get { return GetElementByName<IField>(Names.WS_CS_06); } }
        public IField WS_CS_07 { get { return GetElementByName<IField>(Names.WS_CS_07); } }
        public IField WS_CS_08 { get { return GetElementByName<IField>(Names.WS_CS_08); } }
        public IField WS_CS_09 { get { return GetElementByName<IField>(Names.WS_CS_09); } }
        public IField WS_CS_10 { get { return GetElementByName<IField>(Names.WS_CS_10); } }
        public IField WS_CS_11 { get { return GetElementByName<IField>(Names.WS_CS_11); } }
        public IField WS_CS_12 { get { return GetElementByName<IField>(Names.WS_CS_12); } }
        public IField WS_CS_13 { get { return GetElementByName<IField>(Names.WS_CS_13); } }
        public IField WS_CS_14 { get { return GetElementByName<IField>(Names.WS_CS_14); } }
        public IField WS_CS_15 { get { return GetElementByName<IField>(Names.WS_CS_15); } }
        public IField WS_CS_16 { get { return GetElementByName<IField>(Names.WS_CS_16); } }
        public IField WS_CS_17 { get { return GetElementByName<IField>(Names.WS_CS_17); } }
        public IField WS_CS_18 { get { return GetElementByName<IField>(Names.WS_CS_18); } }
        public IField WS_CS_19 { get { return GetElementByName<IField>(Names.WS_CS_19); } }
        public IField WS_CS_20 { get { return GetElementByName<IField>(Names.WS_CS_20); } }
        public IField WS_CS_21 { get { return GetElementByName<IField>(Names.WS_CS_21); } }
        public IField WS_CS_22 { get { return GetElementByName<IField>(Names.WS_CS_22); } }
        public IField WS_CS_23 { get { return GetElementByName<IField>(Names.WS_CS_23); } }
        public IField WS_CS_24 { get { return GetElementByName<IField>(Names.WS_CS_24); } }
        public IField WS_CS_25 { get { return GetElementByName<IField>(Names.WS_CS_25); } }
        public IField FUNC_0661689945_ESC_FLAG { get { return GetElementByName<IField>(Names.FUNC_0661689945_ESC_FLAG); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.FDSO_FILE_STATUS, FieldType.String, 2);

            recordDef.CreateNewGroup(Names.WS_INPUT_RESTART_INFO, (WS_INPUT_RESTART_INFO) =>
           {
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_STATE, FieldType.String, 2);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_LOC_CODE, FieldType.String, 3);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_SOC_SEC_NUM, FieldType.UnsignedNumeric, 9);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_CASE_NO, FieldType.UnsignedNumeric, 15);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_LAST_NAME, FieldType.String, 20);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_FIRST_NAME, FieldType.String, 15);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_ARREARAGE, FieldType.SignedNumeric, 11, null, 2);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_COLL_AMOUNT, FieldType.SignedNumeric, 11, null, 2);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_ADJ_AMOUNT, FieldType.SignedNumeric, 11, null, 2);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_ADJ_YEAR, FieldType.UnsignedNumeric, 2);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_OFFSET_TAX_YR, FieldType.UnsignedNumeric, 2);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_RETURN_IND, FieldType.String, 1);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_CASE_TYPE, FieldType.String, 1);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_TRANS_STATE, FieldType.String, 2);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_TRANS_LOC_CODE, FieldType.UnsignedNumeric, 3);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_NAMES, FieldType.String, 35);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_STREET_ADDR, FieldType.String, 35);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_CITY_STATE, FieldType.String, 25);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_ZIP, FieldType.UnsignedNumeric, 5);
               WS_INPUT_RESTART_INFO.CreateNewField(Names.WS_INPUT_FILLER, FieldType.String, 12);
           });

            recordDef.CreateNewGroup(Names.WS_FORMATTED_RESTART_INFO, (WS_FORMATTED_RESTART_INFO) =>
           {
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_STATE, FieldType.String, 2);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_LOC_CODE, FieldType.String, 3);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_SOC_SEC_NUM, FieldType.UnsignedNumeric, 9);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_CASE_NO, FieldType.UnsignedNumeric, 15);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_LAST_NAME, FieldType.String, 20);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_FIRST_NAME, FieldType.String, 15);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_ARREARAGE, FieldType.SignedNumeric, 11, null, 2);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_COLL_AMOUNT, FieldType.SignedNumeric, 11, null, 2);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_ADJ_AMOUNT, FieldType.SignedNumeric, 11, null, 2);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_ADJ_YEAR, FieldType.UnsignedNumeric, 2);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_OFFSET_TAX_YR, FieldType.UnsignedNumeric, 2);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_RETURN_IND, FieldType.String, 1);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_CASE_TYPE, FieldType.String, 1);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_TRANS_STATE, FieldType.String, 2);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_TRANS_LOC_CODE, FieldType.UnsignedNumeric, 3);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_NAMES, FieldType.String, 35);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_STREET_ADDR, FieldType.String, 35);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_CITY_STATE, FieldType.String, 25);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_ZIP, FieldType.UnsignedNumeric, 5);
               WS_FORMATTED_RESTART_INFO.CreateNewField(Names.WS_FILLER, FieldType.String, 12);
           });

            recordDef.CreateNewGroup(Names.WS_FORMATTED_YR, (WS_FORMATTED_YR) =>
           {
               WS_FORMATTED_YR.CreateNewField(Names.WS_CCYY, FieldType.SignedNumeric, 4);
           });

            IField WS_TRIM_CASE_15_local = recordDef.CreateNewField(Names.WS_TRIM_CASE_15, FieldType.String, 15);
            recordDef.CreateNewGroupRedefine(Names.WS_TRIM_CASE_5_R, WS_TRIM_CASE_15_local, (WS_TRIM_CASE_5_R) =>
            {
                WS_TRIM_CASE_5_R.CreateNewField(Names.WS_TRIM_CASE_510, FieldType.String, 10);
                WS_TRIM_CASE_5_R.CreateNewField(Names.WS_TRIM_CASE_5, FieldType.String, 5);
            });
            recordDef.CreateNewGroupRedefine(Names.WS_TRIM_CASE_4_R, WS_TRIM_CASE_15_local, (WS_TRIM_CASE_4_R) =>
            {
                WS_TRIM_CASE_4_R.CreateNewFillerField(1, FillWith.Hashes);
                WS_TRIM_CASE_4_R.CreateNewField(Names.WS_TRIM_CASE_410, FieldType.String, 10);
                WS_TRIM_CASE_4_R.CreateNewField(Names.WS_TRIM_CASE_4, FieldType.String, 4);
            });
            recordDef.CreateNewGroupRedefine(Names.WS_TRIM_CASE_3_R, WS_TRIM_CASE_15_local, (WS_TRIM_CASE_3_R) =>
            {
                WS_TRIM_CASE_3_R.CreateNewFillerField(2, FillWith.Hashes);
                WS_TRIM_CASE_3_R.CreateNewField(Names.WS_TRIM_CASE_310, FieldType.String, 10);
                WS_TRIM_CASE_3_R.CreateNewField(Names.WS_TRIM_CASE_3, FieldType.String, 3);
            });
            recordDef.CreateNewGroupRedefine(Names.WS_TRIM_CASE_2_R, WS_TRIM_CASE_15_local, (WS_TRIM_CASE_2_R) =>
            {
                WS_TRIM_CASE_2_R.CreateNewFillerField(3, FillWith.Hashes);
                WS_TRIM_CASE_2_R.CreateNewField(Names.WS_TRIM_CASE_210, FieldType.String, 10);
                WS_TRIM_CASE_2_R.CreateNewField(Names.WS_TRIM_CASE_2, FieldType.String, 2);
            });
            recordDef.CreateNewGroupRedefine(Names.WS_TRIM_CASE_1_R, WS_TRIM_CASE_15_local, (WS_TRIM_CASE_1_R) =>
            {
                WS_TRIM_CASE_1_R.CreateNewFillerField(4, FillWith.Hashes);
                WS_TRIM_CASE_1_R.CreateNewField(Names.WS_TRIM_CASE_110, FieldType.String, 10);
                WS_TRIM_CASE_1_R.CreateNewField(Names.WS_TRIM_CASE_1, FieldType.String, 1);
            });

            recordDef.CreateNewGroup(Names.WS_SETUP_INTERFACE_FIELDS, (WS_SETUP_INTERFACE_FIELDS) =>
           {
               WS_SETUP_INTERFACE_FIELDS.CreateNewField(Names.WS_SETUP_TYPE, FieldType.String, 3);
               WS_SETUP_INTERFACE_FIELDS.CreateNewField(Names.WS_SETUP_CASE_TYPE, FieldType.String, 1);
               WS_SETUP_INTERFACE_FIELDS.CreateNewField(Names.WS_SETUP_STATE, FieldType.String, 2);
               WS_SETUP_INTERFACE_FIELDS.CreateNewField(Names.WS_SETUP_FILLER, FieldType.String, 14);
           });

            recordDef.CreateNewGroup(Names.WS_STATE_1_2, (WS_STATE_1_2) =>
           {
               WS_STATE_1_2.CreateNewField(Names.WS_STATE_1, FieldType.String, 1);
               WS_STATE_1_2.CreateNewField(Names.WS_STATE_2, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.WS_CITY_STATE_TBL_AREA, (WS_CITY_STATE_TBL_AREA) =>
           {

               IField WS_CITY_STATE_TBL_local = WS_CITY_STATE_TBL_AREA.CreateNewField(Names.WS_CITY_STATE_TBL, FieldType.String, 25);
               WS_CITY_STATE_TBL_AREA.CreateNewGroupRedefine(Names.WS_CITY_STATE_TBL_R, WS_CITY_STATE_TBL_local, (WS_CITY_STATE_TBL_R) =>
               {
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_01, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_02, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_03, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_04, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_05, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_06, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_07, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_08, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_09, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_10, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_11, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_12, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_13, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_14, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_15, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_16, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_17, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_18, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_19, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_20, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_21, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_22, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_23, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_24, FieldType.String, 1);
                   WS_CITY_STATE_TBL_R.CreateNewField(Names.WS_CS_25, FieldType.String, 1);
               });
           });
            recordDef.CreateNewField(Names.FUNC_0661689945_ESC_FLAG, FieldType.String, 1);

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXFE99_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXFE99_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_0298257842_IA = "A_0298257842_IA";
            internal const string IMPORT_0001EV = "IMPORT_0001EV";
            internal const string EXTERNAL_0001ET = "EXTERNAL_0001ET";
            internal const string FILE_INSTRUCTION_0001AS = "FILE_INSTRUCTION_0001AS";
            internal const string FILE_INSTRUCTION_0001 = "FILE_INSTRUCTION_0001";
            internal const string FILE_INSTRUCTION_0001XX = "FILE_INSTRUCTION_0001XX";
            internal const string TEXT_LINE_80_0001AS = "TEXT_LINE_80_0001AS";
            internal const string TEXT_LINE_80_0001 = "TEXT_LINE_80_0001";
            internal const string TEXT_LINE_80_0001XX = "TEXT_LINE_80_0001XX";
            internal const string W_OA = "W_OA";
            internal const string A_0298257844_OA = "A_0298257844_OA";
            internal const string EXPORT_0002EV = "EXPORT_0002EV";
            internal const string EXTERNAL_0002ET = "EXTERNAL_0002ET";
            internal const string TEXT_LINE_80_0002AS = "TEXT_LINE_80_0002AS";
            internal const string TEXT_LINE_80_0002 = "TEXT_LINE_80_0002";
            internal const string TEXT_LINE_80_0002XX = "TEXT_LINE_80_0002XX";
            internal const string TEXT_RETURN_CODE_0002AS = "TEXT_RETURN_CODE_0002AS";
            internal const string TEXT_RETURN_CODE_0002 = "TEXT_RETURN_CODE_0002";
            internal const string TEXT_RETURN_CODE_0002XX = "TEXT_RETURN_CODE_0002XX";
            internal const string EXPORT_RECORD_TYPE_RETU_0003EV = "EXPORT_RECORD_TYPE_RETU_0003EV";
            internal const string IEF_SUPPLIED_0003ET = "IEF_SUPPLIED_0003ET";
            internal const string COUNT_0003AS = "COUNT_0003AS";
            internal const string COUNT_0003 = "COUNT_0003";
            internal const string COUNT_0003XX = "COUNT_0003XX";
            internal const string GROUP_EXPORT_COLLECTION_0001GV = "GROUP_EXPORT_COLLECTION_0001GV";
            internal const string EXPORT_GRP_DETAIL_LOCAL_0004EV = "EXPORT_GRP_DETAIL_LOCAL_0004EV";
            internal const string TEXT_WORK_AREA_0004ET = "TEXT_WORK_AREA_0004ET";
            internal const string TEXT_4_0004AS = "TEXT_4_0004AS";
            internal const string TEXT_4_0004 = "TEXT_4_0004";
            internal const string TEXT_4_0004XX = "TEXT_4_0004XX";
            internal const string EXPORT_GRP_DETAIL_0005EV = "EXPORT_GRP_DETAIL_0005EV";
            internal const string CASH_RECEIPT_DETAIL_0005ET = "CASH_RECEIPT_DETAIL_0005ET";
            internal const string OBLIGOR_PERSON_NUMBER_0005AS = "OBLIGOR_PERSON_NUMBER_0005AS";
            internal const string OBLIGOR_PERSON_NUMBER_0005 = "OBLIGOR_PERSON_NUMBER_0005";
            internal const string OBLIGOR_PERSON_NUMBER_0005XX = "OBLIGOR_PERSON_NUMBER_0005XX";
            internal const string OBLIGOR_LAST_NAME_0005AS = "OBLIGOR_LAST_NAME_0005AS";
            internal const string OBLIGOR_LAST_NAME_0005 = "OBLIGOR_LAST_NAME_0005";
            internal const string OBLIGOR_LAST_NAME_0005XX = "OBLIGOR_LAST_NAME_0005XX";
            internal const string OBLIGOR_FIRST_NAME_0005AS = "OBLIGOR_FIRST_NAME_0005AS";
            internal const string OBLIGOR_FIRST_NAME_0005 = "OBLIGOR_FIRST_NAME_0005";
            internal const string OBLIGOR_FIRST_NAME_0005XX = "OBLIGOR_FIRST_NAME_0005XX";
            internal const string COLLECTION_AMOUNT_0005AS = "COLLECTION_AMOUNT_0005AS";
            internal const string COLLECTION_AMOUNT_0005 = "COLLECTION_AMOUNT_0005";
            internal const string COLLECTION_AMOUNT_0005XX = "COLLECTION_AMOUNT_0005XX";
            internal const string OBLIGOR_SOCIAL_SECURITY_0006AS = "OBLIGOR_SOCIAL_SECURITY_0006AS";
            internal const string OBLIGOR_SOCIAL_SECURITY_N_0006 = "OBLIGOR_SOCIAL_SECURITY_N_0006";
            internal const string OBLIGOR_SOCIAL_SECURITY_0006XX = "OBLIGOR_SOCIAL_SECURITY_0006XX";
            internal const string OFFSET_TAX_YEAR_0006AS = "OFFSET_TAX_YEAR_0006AS";
            internal const string OFFSET_TAX_YEAR_0006 = "OFFSET_TAX_YEAR_0006";
            internal const string OFFSET_TAX_YEAR_0006XX = "OFFSET_TAX_YEAR_0006XX";
            internal const string JOINT_RETURN_IND_0006AS = "JOINT_RETURN_IND_0006AS";
            internal const string JOINT_RETURN_IND_0006 = "JOINT_RETURN_IND_0006";
            internal const string JOINT_RETURN_IND_0006XX = "JOINT_RETURN_IND_0006XX";
            internal const string JOINT_RETURN_NAME_0006AS = "JOINT_RETURN_NAME_0006AS";
            internal const string JOINT_RETURN_NAME_0006 = "JOINT_RETURN_NAME_0006";
            internal const string JOINT_RETURN_NAME_0006XX = "JOINT_RETURN_NAME_0006XX";
            internal const string INJURED_SPOUSE_IND_0006AS = "INJURED_SPOUSE_IND_0006AS";
            internal const string INJURED_SPOUSE_IND_0006 = "INJURED_SPOUSE_IND_0006";
            internal const string INJURED_SPOUSE_IND_0006XX = "INJURED_SPOUSE_IND_0006XX";
            internal const string LOCAL_GRP_DETAIL_ADJ_AM_0007EV = "LOCAL_GRP_DETAIL_ADJ_AM_0007EV";
            internal const string IEF_SUPPLIED_0007ET = "IEF_SUPPLIED_0007ET";
            internal const string TOTAL_CURRENCY_0007AS = "TOTAL_CURRENCY_0007AS";
            internal const string TOTAL_CURRENCY_0007 = "TOTAL_CURRENCY_0007";
            internal const string TOTAL_CURRENCY_0007XX = "TOTAL_CURRENCY_0007XX";
            internal const string GROUP_EXPORT_TOTAL_RECO_0002GV = "GROUP_EXPORT_TOTAL_RECO_0002GV";
            internal const string EXPORT_GRP_DETAIL_TOT_A_0008EV = "EXPORT_GRP_DETAIL_TOT_A_0008EV";
            internal const string IEF_SUPPLIED_0008ET = "IEF_SUPPLIED_0008ET";
            internal const string TOTAL_CURRENCY_0008AS = "TOTAL_CURRENCY_0008AS";
            internal const string TOTAL_CURRENCY_0008 = "TOTAL_CURRENCY_0008";
            internal const string TOTAL_CURRENCY_0008XX = "TOTAL_CURRENCY_0008XX";
            internal const string EXPORT_GRP_DETAIL_0009EV = "EXPORT_GRP_DETAIL_0009EV";
            internal const string CASH_RECEIPT_EVENT_0009ET = "CASH_RECEIPT_EVENT_0009ET";
            internal const string TOTAL_ADJUSTMENT_COUNT_0009AS = "TOTAL_ADJUSTMENT_COUNT_0009AS";
            internal const string TOTAL_ADJUSTMENT_COUNT_0009 = "TOTAL_ADJUSTMENT_COUNT_0009";
            internal const string TOTAL_ADJUSTMENT_COUNT_0009XX = "TOTAL_ADJUSTMENT_COUNT_0009XX";
            internal const string EXPORT_GRP_DETAIL_0010EV = "EXPORT_GRP_DETAIL_0010EV";
            internal const string CASH_RECEIPT_0010ET = "CASH_RECEIPT_0010ET";
            internal const string TOTAL_NONCASH_TRANSACTI_0011AS = "TOTAL_NONCASH_TRANSACTI_0011AS";
            internal const string TOTAL_NONCASH_TRANSACTION_0011 = "TOTAL_NONCASH_TRANSACTION_0011";
            internal const string TOTAL_NONCASH_TRANSACTI_0011XX = "TOTAL_NONCASH_TRANSACTI_0011XX";
            internal const string RECEIPT_AMOUNT_0011AS = "RECEIPT_AMOUNT_0011AS";
            internal const string RECEIPT_AMOUNT_0011 = "RECEIPT_AMOUNT_0011";
            internal const string RECEIPT_AMOUNT_0011XX = "RECEIPT_AMOUNT_0011XX";
            internal const string TOTAL_NONCASH_TRANSACTI_0012AS = "TOTAL_NONCASH_TRANSACTI_0012AS";
            internal const string TOTAL_NONCASH_TRANSACTION_0012 = "TOTAL_NONCASH_TRANSACTION_0012";
            internal const string TOTAL_NONCASH_TRANSACTI_0012XX = "TOTAL_NONCASH_TRANSACTI_0012XX";
            internal const string EXPORT_GRP_DETAIL_NET_A_0013EV = "EXPORT_GRP_DETAIL_NET_A_0013EV";
            internal const string IEF_SUPPLIED_0013ET = "IEF_SUPPLIED_0013ET";
            internal const string TOTAL_CURRENCY_0013AS = "TOTAL_CURRENCY_0013AS";
            internal const string TOTAL_CURRENCY_0013 = "TOTAL_CURRENCY_0013";
            internal const string TOTAL_CURRENCY_0013XX = "TOTAL_CURRENCY_0013XX";
            internal const string GROUP_EXPORT_ADDITIONAL_0003GV = "GROUP_EXPORT_ADDITIONAL_0003GV";
            internal const string EXPORT_GR_DETAIL_ADJ_AM_0014EV = "EXPORT_GR_DETAIL_ADJ_AM_0014EV";
            internal const string CASH_RECEIPT_DETAIL_0014ET = "CASH_RECEIPT_DETAIL_0014ET";
            internal const string OFFSET_TAX_YEAR_0014AS = "OFFSET_TAX_YEAR_0014AS";
            internal const string OFFSET_TAX_YEAR_0014 = "OFFSET_TAX_YEAR_0014";
            internal const string OFFSET_TAX_YEAR_0014XX = "OFFSET_TAX_YEAR_0014XX";
            internal const string INTERFACE_TRANS_ID_0014AS = "INTERFACE_TRANS_ID_0014AS";
            internal const string INTERFACE_TRANS_ID_0014 = "INTERFACE_TRANS_ID_0014";
            internal const string INTERFACE_TRANS_ID_0014XX = "INTERFACE_TRANS_ID_0014XX";
            internal const string EXPORT_GRP_DETAIL_ADDRE_0015EV = "EXPORT_GRP_DETAIL_ADDRE_0015EV";
            internal const string CASH_RECEIPT_DETAIL_ADD_0015ET = "CASH_RECEIPT_DETAIL_ADD_0015ET";
            internal const string STREET_1_0015AS = "STREET_1_0015AS";
            internal const string STREET_1_0015 = "STREET_1_0015";
            internal const string STREET_1_0015XX = "STREET_1_0015XX";
            internal const string CITY_0015AS = "CITY_0015AS";
            internal const string CITY_0015 = "CITY_0015";
            internal const string CITY_0015XX = "CITY_0015XX";
            internal const string STATE_0015AS = "STATE_0015AS";
            internal const string STATE_0015 = "STATE_0015";
            internal const string STATE_0015XX = "STATE_0015XX";
            internal const string ZIP_CODE_5_0015AS = "ZIP_CODE_5_0015AS";
            internal const string ZIP_CODE_5_0015 = "ZIP_CODE_5_0015";
            internal const string ZIP_CODE_5_0015XX = "ZIP_CODE_5_0015XX";
            internal const string ZIP_CODE_4_0015AS = "ZIP_CODE_4_0015AS";
            internal const string ZIP_CODE_4_0015 = "ZIP_CODE_4_0015";
            internal const string ZIP_CODE_4_0015XX = "ZIP_CODE_4_0015XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_0298257842_IA { get { return GetElementByName<IGroup>(Names.A_0298257842_IA); } }
        public IGroup IMPORT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_0001EV); } }
        public IGroup EXTERNAL_0001ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0001ET); } }
        public IField FILE_INSTRUCTION_0001AS { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0001AS); } }
        public IField FILE_INSTRUCTION_0001 { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0001); } }
        public IField FILE_INSTRUCTION_0001XX { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0001XX); } }
        public IField TEXT_LINE_80_0001AS { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0001AS); } }
        public IField TEXT_LINE_80_0001 { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0001); } }
        public IField TEXT_LINE_80_0001XX { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0001XX); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_0298257844_OA { get { return GetElementByName<IGroup>(Names.A_0298257844_OA); } }
        public IGroup EXPORT_0002EV { get { return GetElementByName<IGroup>(Names.EXPORT_0002EV); } }
        public IGroup EXTERNAL_0002ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0002ET); } }
        public IField TEXT_LINE_80_0002AS { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0002AS); } }
        public IField TEXT_LINE_80_0002 { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0002); } }
        public IField TEXT_LINE_80_0002XX { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0002XX); } }
        public IField TEXT_RETURN_CODE_0002AS { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0002AS); } }
        public IField TEXT_RETURN_CODE_0002 { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0002); } }
        public IField TEXT_RETURN_CODE_0002XX { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0002XX); } }
        public IGroup EXPORT_RECORD_TYPE_RETU_0003EV { get { return GetElementByName<IGroup>(Names.EXPORT_RECORD_TYPE_RETU_0003EV); } }
        public IGroup IEF_SUPPLIED_0003ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0003ET); } }
        public IField COUNT_0003AS { get { return GetElementByName<IField>(Names.COUNT_0003AS); } }
        public IField COUNT_0003 { get { return GetElementByName<IField>(Names.COUNT_0003); } }
        public IField COUNT_0003XX { get { return GetElementByName<IField>(Names.COUNT_0003XX); } }
        public IGroup GROUP_EXPORT_COLLECTION_0001GV { get { return GetElementByName<IGroup>(Names.GROUP_EXPORT_COLLECTION_0001GV); } }
        public IGroup EXPORT_GRP_DETAIL_LOCAL_0004EV { get { return GetElementByName<IGroup>(Names.EXPORT_GRP_DETAIL_LOCAL_0004EV); } }
        public IGroup TEXT_WORK_AREA_0004ET { get { return GetElementByName<IGroup>(Names.TEXT_WORK_AREA_0004ET); } }
        public IField TEXT_4_0004AS { get { return GetElementByName<IField>(Names.TEXT_4_0004AS); } }
        public IField TEXT_4_0004 { get { return GetElementByName<IField>(Names.TEXT_4_0004); } }
        public IField TEXT_4_0004XX { get { return GetElementByName<IField>(Names.TEXT_4_0004XX); } }
        public IGroup EXPORT_GRP_DETAIL_0005EV { get { return GetElementByName<IGroup>(Names.EXPORT_GRP_DETAIL_0005EV); } }
        public IGroup CASH_RECEIPT_DETAIL_0005ET { get { return GetElementByName<IGroup>(Names.CASH_RECEIPT_DETAIL_0005ET); } }
        public IField OBLIGOR_PERSON_NUMBER_0005AS { get { return GetElementByName<IField>(Names.OBLIGOR_PERSON_NUMBER_0005AS); } }
        public IField OBLIGOR_PERSON_NUMBER_0005 { get { return GetElementByName<IField>(Names.OBLIGOR_PERSON_NUMBER_0005); } }
        public IField OBLIGOR_PERSON_NUMBER_0005XX { get { return GetElementByName<IField>(Names.OBLIGOR_PERSON_NUMBER_0005XX); } }
        public IField OBLIGOR_LAST_NAME_0005AS { get { return GetElementByName<IField>(Names.OBLIGOR_LAST_NAME_0005AS); } }
        public IField OBLIGOR_LAST_NAME_0005 { get { return GetElementByName<IField>(Names.OBLIGOR_LAST_NAME_0005); } }
        public IField OBLIGOR_LAST_NAME_0005XX { get { return GetElementByName<IField>(Names.OBLIGOR_LAST_NAME_0005XX); } }
        public IField OBLIGOR_FIRST_NAME_0005AS { get { return GetElementByName<IField>(Names.OBLIGOR_FIRST_NAME_0005AS); } }
        public IField OBLIGOR_FIRST_NAME_0005 { get { return GetElementByName<IField>(Names.OBLIGOR_FIRST_NAME_0005); } }
        public IField OBLIGOR_FIRST_NAME_0005XX { get { return GetElementByName<IField>(Names.OBLIGOR_FIRST_NAME_0005XX); } }
        public IField COLLECTION_AMOUNT_0005AS { get { return GetElementByName<IField>(Names.COLLECTION_AMOUNT_0005AS); } }
        public IField COLLECTION_AMOUNT_0005 { get { return GetElementByName<IField>(Names.COLLECTION_AMOUNT_0005); } }
        public IField COLLECTION_AMOUNT_0005XX { get { return GetElementByName<IField>(Names.COLLECTION_AMOUNT_0005XX); } }
        public IField OBLIGOR_SOCIAL_SECURITY_0006AS { get { return GetElementByName<IField>(Names.OBLIGOR_SOCIAL_SECURITY_0006AS); } }
        public IField OBLIGOR_SOCIAL_SECURITY_N_0006 { get { return GetElementByName<IField>(Names.OBLIGOR_SOCIAL_SECURITY_N_0006); } }
        public IField OBLIGOR_SOCIAL_SECURITY_0006XX { get { return GetElementByName<IField>(Names.OBLIGOR_SOCIAL_SECURITY_0006XX); } }
        public IField OFFSET_TAX_YEAR_0006AS { get { return GetElementByName<IField>(Names.OFFSET_TAX_YEAR_0006AS); } }
        public IField OFFSET_TAX_YEAR_0006 { get { return GetElementByName<IField>(Names.OFFSET_TAX_YEAR_0006); } }
        public IField OFFSET_TAX_YEAR_0006XX { get { return GetElementByName<IField>(Names.OFFSET_TAX_YEAR_0006XX); } }
        public IField JOINT_RETURN_IND_0006AS { get { return GetElementByName<IField>(Names.JOINT_RETURN_IND_0006AS); } }
        public IField JOINT_RETURN_IND_0006 { get { return GetElementByName<IField>(Names.JOINT_RETURN_IND_0006); } }
        public IField JOINT_RETURN_IND_0006XX { get { return GetElementByName<IField>(Names.JOINT_RETURN_IND_0006XX); } }
        public IField JOINT_RETURN_NAME_0006AS { get { return GetElementByName<IField>(Names.JOINT_RETURN_NAME_0006AS); } }
        public IField JOINT_RETURN_NAME_0006 { get { return GetElementByName<IField>(Names.JOINT_RETURN_NAME_0006); } }
        public IField JOINT_RETURN_NAME_0006XX { get { return GetElementByName<IField>(Names.JOINT_RETURN_NAME_0006XX); } }
        public IField INJURED_SPOUSE_IND_0006AS { get { return GetElementByName<IField>(Names.INJURED_SPOUSE_IND_0006AS); } }
        public IField INJURED_SPOUSE_IND_0006 { get { return GetElementByName<IField>(Names.INJURED_SPOUSE_IND_0006); } }
        public IField INJURED_SPOUSE_IND_0006XX { get { return GetElementByName<IField>(Names.INJURED_SPOUSE_IND_0006XX); } }
        public IGroup LOCAL_GRP_DETAIL_ADJ_AM_0007EV { get { return GetElementByName<IGroup>(Names.LOCAL_GRP_DETAIL_ADJ_AM_0007EV); } }
        public IGroup IEF_SUPPLIED_0007ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0007ET); } }
        public IField TOTAL_CURRENCY_0007AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0007AS); } }
        public IField TOTAL_CURRENCY_0007 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0007); } }
        public IField TOTAL_CURRENCY_0007XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0007XX); } }
        public IGroup GROUP_EXPORT_TOTAL_RECO_0002GV { get { return GetElementByName<IGroup>(Names.GROUP_EXPORT_TOTAL_RECO_0002GV); } }
        public IGroup EXPORT_GRP_DETAIL_TOT_A_0008EV { get { return GetElementByName<IGroup>(Names.EXPORT_GRP_DETAIL_TOT_A_0008EV); } }
        public IGroup IEF_SUPPLIED_0008ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0008ET); } }
        public IField TOTAL_CURRENCY_0008AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0008AS); } }
        public IField TOTAL_CURRENCY_0008 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0008); } }
        public IField TOTAL_CURRENCY_0008XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0008XX); } }
        public IGroup EXPORT_GRP_DETAIL_0009EV { get { return GetElementByName<IGroup>(Names.EXPORT_GRP_DETAIL_0009EV); } }
        public IGroup CASH_RECEIPT_EVENT_0009ET { get { return GetElementByName<IGroup>(Names.CASH_RECEIPT_EVENT_0009ET); } }
        public IField TOTAL_ADJUSTMENT_COUNT_0009AS { get { return GetElementByName<IField>(Names.TOTAL_ADJUSTMENT_COUNT_0009AS); } }
        public IField TOTAL_ADJUSTMENT_COUNT_0009 { get { return GetElementByName<IField>(Names.TOTAL_ADJUSTMENT_COUNT_0009); } }
        public IField TOTAL_ADJUSTMENT_COUNT_0009XX { get { return GetElementByName<IField>(Names.TOTAL_ADJUSTMENT_COUNT_0009XX); } }
        public IGroup EXPORT_GRP_DETAIL_0010EV { get { return GetElementByName<IGroup>(Names.EXPORT_GRP_DETAIL_0010EV); } }
        public IGroup CASH_RECEIPT_0010ET { get { return GetElementByName<IGroup>(Names.CASH_RECEIPT_0010ET); } }
        public IField TOTAL_NONCASH_TRANSACTI_0011AS { get { return GetElementByName<IField>(Names.TOTAL_NONCASH_TRANSACTI_0011AS); } }
        public IField TOTAL_NONCASH_TRANSACTION_0011 { get { return GetElementByName<IField>(Names.TOTAL_NONCASH_TRANSACTION_0011); } }
        public IField TOTAL_NONCASH_TRANSACTI_0011XX { get { return GetElementByName<IField>(Names.TOTAL_NONCASH_TRANSACTI_0011XX); } }
        public IField RECEIPT_AMOUNT_0011AS { get { return GetElementByName<IField>(Names.RECEIPT_AMOUNT_0011AS); } }
        public IField RECEIPT_AMOUNT_0011 { get { return GetElementByName<IField>(Names.RECEIPT_AMOUNT_0011); } }
        public IField RECEIPT_AMOUNT_0011XX { get { return GetElementByName<IField>(Names.RECEIPT_AMOUNT_0011XX); } }
        public IField TOTAL_NONCASH_TRANSACTI_0012AS { get { return GetElementByName<IField>(Names.TOTAL_NONCASH_TRANSACTI_0012AS); } }
        public IField TOTAL_NONCASH_TRANSACTION_0012 { get { return GetElementByName<IField>(Names.TOTAL_NONCASH_TRANSACTION_0012); } }
        public IField TOTAL_NONCASH_TRANSACTI_0012XX { get { return GetElementByName<IField>(Names.TOTAL_NONCASH_TRANSACTI_0012XX); } }
        public IGroup EXPORT_GRP_DETAIL_NET_A_0013EV { get { return GetElementByName<IGroup>(Names.EXPORT_GRP_DETAIL_NET_A_0013EV); } }
        public IGroup IEF_SUPPLIED_0013ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0013ET); } }
        public IField TOTAL_CURRENCY_0013AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0013AS); } }
        public IField TOTAL_CURRENCY_0013 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0013); } }
        public IField TOTAL_CURRENCY_0013XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0013XX); } }
        public IGroup GROUP_EXPORT_ADDITIONAL_0003GV { get { return GetElementByName<IGroup>(Names.GROUP_EXPORT_ADDITIONAL_0003GV); } }
        public IGroup EXPORT_GR_DETAIL_ADJ_AM_0014EV { get { return GetElementByName<IGroup>(Names.EXPORT_GR_DETAIL_ADJ_AM_0014EV); } }
        public IGroup CASH_RECEIPT_DETAIL_0014ET { get { return GetElementByName<IGroup>(Names.CASH_RECEIPT_DETAIL_0014ET); } }
        public IField OFFSET_TAX_YEAR_0014AS { get { return GetElementByName<IField>(Names.OFFSET_TAX_YEAR_0014AS); } }
        public IField OFFSET_TAX_YEAR_0014 { get { return GetElementByName<IField>(Names.OFFSET_TAX_YEAR_0014); } }
        public IField OFFSET_TAX_YEAR_0014XX { get { return GetElementByName<IField>(Names.OFFSET_TAX_YEAR_0014XX); } }
        public IField INTERFACE_TRANS_ID_0014AS { get { return GetElementByName<IField>(Names.INTERFACE_TRANS_ID_0014AS); } }
        public IField INTERFACE_TRANS_ID_0014 { get { return GetElementByName<IField>(Names.INTERFACE_TRANS_ID_0014); } }
        public IField INTERFACE_TRANS_ID_0014XX { get { return GetElementByName<IField>(Names.INTERFACE_TRANS_ID_0014XX); } }
        public IGroup EXPORT_GRP_DETAIL_ADDRE_0015EV { get { return GetElementByName<IGroup>(Names.EXPORT_GRP_DETAIL_ADDRE_0015EV); } }
        public IGroup CASH_RECEIPT_DETAIL_ADD_0015ET { get { return GetElementByName<IGroup>(Names.CASH_RECEIPT_DETAIL_ADD_0015ET); } }
        public IField STREET_1_0015AS { get { return GetElementByName<IField>(Names.STREET_1_0015AS); } }
        public IField STREET_1_0015 { get { return GetElementByName<IField>(Names.STREET_1_0015); } }
        public IField STREET_1_0015XX { get { return GetElementByName<IField>(Names.STREET_1_0015XX); } }
        public IField CITY_0015AS { get { return GetElementByName<IField>(Names.CITY_0015AS); } }
        public IField CITY_0015 { get { return GetElementByName<IField>(Names.CITY_0015); } }
        public IField CITY_0015XX { get { return GetElementByName<IField>(Names.CITY_0015XX); } }
        public IField STATE_0015AS { get { return GetElementByName<IField>(Names.STATE_0015AS); } }
        public IField STATE_0015 { get { return GetElementByName<IField>(Names.STATE_0015); } }
        public IField STATE_0015XX { get { return GetElementByName<IField>(Names.STATE_0015XX); } }
        public IField ZIP_CODE_5_0015AS { get { return GetElementByName<IField>(Names.ZIP_CODE_5_0015AS); } }
        public IField ZIP_CODE_5_0015 { get { return GetElementByName<IField>(Names.ZIP_CODE_5_0015); } }
        public IField ZIP_CODE_5_0015XX { get { return GetElementByName<IField>(Names.ZIP_CODE_5_0015XX); } }
        public IField ZIP_CODE_4_0015AS { get { return GetElementByName<IField>(Names.ZIP_CODE_4_0015AS); } }
        public IField ZIP_CODE_4_0015 { get { return GetElementByName<IField>(Names.ZIP_CODE_4_0015); } }
        public IField ZIP_CODE_4_0015XX { get { return GetElementByName<IField>(Names.ZIP_CODE_4_0015XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_0298257842_IA, (A_0298257842_IA) =>
               {
                   A_0298257842_IA.CreateNewGroup(Names.IMPORT_0001EV, (IMPORT_0001EV) =>
                   {
                       IMPORT_0001EV.CreateNewGroup(Names.EXTERNAL_0001ET, (EXTERNAL_0001ET) =>
                       {
                           EXTERNAL_0001ET.CreateNewField(Names.FILE_INSTRUCTION_0001AS, FieldType.String, 1);

                           IField FILE_INSTRUCTION_0001_local = EXTERNAL_0001ET.CreateNewField(Names.FILE_INSTRUCTION_0001, FieldType.String, 10);
                           EXTERNAL_0001ET.CreateNewFieldRedefine(Names.FILE_INSTRUCTION_0001XX, FieldType.String, FILE_INSTRUCTION_0001_local, 10);
                           EXTERNAL_0001ET.CreateNewField(Names.TEXT_LINE_80_0001AS, FieldType.String, 1);

                           IField TEXT_LINE_80_0001_local = EXTERNAL_0001ET.CreateNewField(Names.TEXT_LINE_80_0001, FieldType.String, 130);
                           EXTERNAL_0001ET.CreateNewFieldRedefine(Names.TEXT_LINE_80_0001XX, FieldType.String, TEXT_LINE_80_0001_local, 130);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_0298257844_OA, (A_0298257844_OA) =>
               {
                   A_0298257844_OA.CreateNewGroup(Names.EXPORT_0002EV, (EXPORT_0002EV) =>
                   {
                       EXPORT_0002EV.CreateNewGroup(Names.EXTERNAL_0002ET, (EXTERNAL_0002ET) =>
                       {
                           EXTERNAL_0002ET.CreateNewField(Names.TEXT_LINE_80_0002AS, FieldType.String, 1);

                           IField TEXT_LINE_80_0002_local = EXTERNAL_0002ET.CreateNewField(Names.TEXT_LINE_80_0002, FieldType.String, 130);
                           EXTERNAL_0002ET.CreateNewFieldRedefine(Names.TEXT_LINE_80_0002XX, FieldType.String, TEXT_LINE_80_0002_local, 130);
                           EXTERNAL_0002ET.CreateNewField(Names.TEXT_RETURN_CODE_0002AS, FieldType.String, 1);

                           IField TEXT_RETURN_CODE_0002_local = EXTERNAL_0002ET.CreateNewField(Names.TEXT_RETURN_CODE_0002, FieldType.String, 2);
                           EXTERNAL_0002ET.CreateNewFieldRedefine(Names.TEXT_RETURN_CODE_0002XX, FieldType.String, TEXT_RETURN_CODE_0002_local, 2);
                       });
                   });
                   A_0298257844_OA.CreateNewGroup(Names.EXPORT_RECORD_TYPE_RETU_0003EV, (EXPORT_RECORD_TYPE_RETU_0003EV) =>
                   {
                       EXPORT_RECORD_TYPE_RETU_0003EV.CreateNewGroup(Names.IEF_SUPPLIED_0003ET, (IEF_SUPPLIED_0003ET) =>
                       {
                           IEF_SUPPLIED_0003ET.CreateNewField(Names.COUNT_0003AS, FieldType.String, 1);

                           IField COUNT_0003_local = IEF_SUPPLIED_0003ET.CreateNewField(Names.COUNT_0003, FieldType.SignedNumeric, 9);
                           IEF_SUPPLIED_0003ET.CreateNewFieldRedefine(Names.COUNT_0003XX, FieldType.String, COUNT_0003_local, 9);
                       });
                   });
                   A_0298257844_OA.CreateNewGroup(Names.GROUP_EXPORT_COLLECTION_0001GV, (GROUP_EXPORT_COLLECTION_0001GV) =>
                   {
                       GROUP_EXPORT_COLLECTION_0001GV.CreateNewGroup(Names.EXPORT_GRP_DETAIL_LOCAL_0004EV, (EXPORT_GRP_DETAIL_LOCAL_0004EV) =>
                       {
                           EXPORT_GRP_DETAIL_LOCAL_0004EV.CreateNewGroup(Names.TEXT_WORK_AREA_0004ET, (TEXT_WORK_AREA_0004ET) =>
                           {
                               TEXT_WORK_AREA_0004ET.CreateNewField(Names.TEXT_4_0004AS, FieldType.String, 1);

                               IField TEXT_4_0004_local = TEXT_WORK_AREA_0004ET.CreateNewField(Names.TEXT_4_0004, FieldType.String, 4);
                               TEXT_WORK_AREA_0004ET.CreateNewFieldRedefine(Names.TEXT_4_0004XX, FieldType.String, TEXT_4_0004_local, 4);
                           });
                       });
                       GROUP_EXPORT_COLLECTION_0001GV.CreateNewGroup(Names.EXPORT_GRP_DETAIL_0005EV, (EXPORT_GRP_DETAIL_0005EV) =>
                       {
                           EXPORT_GRP_DETAIL_0005EV.CreateNewGroup(Names.CASH_RECEIPT_DETAIL_0005ET, (CASH_RECEIPT_DETAIL_0005ET) =>
                           {
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.OBLIGOR_PERSON_NUMBER_0005AS, FieldType.String, 1);

                               IField OBLIGOR_PERSON_NUMBER_0005_local = CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.OBLIGOR_PERSON_NUMBER_0005, FieldType.String, 10);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewFieldRedefine(Names.OBLIGOR_PERSON_NUMBER_0005XX, FieldType.String, OBLIGOR_PERSON_NUMBER_0005_local, 10);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.OBLIGOR_LAST_NAME_0005AS, FieldType.String, 1);

                               IField OBLIGOR_LAST_NAME_0005_local = CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.OBLIGOR_LAST_NAME_0005, FieldType.String, 30);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewFieldRedefine(Names.OBLIGOR_LAST_NAME_0005XX, FieldType.String, OBLIGOR_LAST_NAME_0005_local, 30);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.OBLIGOR_FIRST_NAME_0005AS, FieldType.String, 1);

                               IField OBLIGOR_FIRST_NAME_0005_local = CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.OBLIGOR_FIRST_NAME_0005, FieldType.String, 20);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewFieldRedefine(Names.OBLIGOR_FIRST_NAME_0005XX, FieldType.String, OBLIGOR_FIRST_NAME_0005_local, 20);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.COLLECTION_AMOUNT_0005AS, FieldType.String, 1);

                               IField COLLECTION_AMOUNT_0005_local = CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.COLLECTION_AMOUNT_0005, FieldType.SignedNumeric, 9, null, 2);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewFieldRedefine(Names.COLLECTION_AMOUNT_0005XX, FieldType.String, COLLECTION_AMOUNT_0005_local, 9);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.OBLIGOR_SOCIAL_SECURITY_0006AS, FieldType.String, 1);

                               IField OBLIGOR_SOCIAL_SECURITY_N_0006_local = CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.OBLIGOR_SOCIAL_SECURITY_N_0006, FieldType.String, 9);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewFieldRedefine(Names.OBLIGOR_SOCIAL_SECURITY_0006XX, FieldType.String, OBLIGOR_SOCIAL_SECURITY_N_0006_local, 9);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.OFFSET_TAX_YEAR_0006AS, FieldType.String, 1);

                               IField OFFSET_TAX_YEAR_0006_local = CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.OFFSET_TAX_YEAR_0006, FieldType.SignedNumeric, 4);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewFieldRedefine(Names.OFFSET_TAX_YEAR_0006XX, FieldType.String, OFFSET_TAX_YEAR_0006_local, 4);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.JOINT_RETURN_IND_0006AS, FieldType.String, 1);

                               IField JOINT_RETURN_IND_0006_local = CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.JOINT_RETURN_IND_0006, FieldType.String, 1);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewFieldRedefine(Names.JOINT_RETURN_IND_0006XX, FieldType.String, JOINT_RETURN_IND_0006_local, 1);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.JOINT_RETURN_NAME_0006AS, FieldType.String, 1);

                               IField JOINT_RETURN_NAME_0006_local = CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.JOINT_RETURN_NAME_0006, FieldType.String, 60);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewFieldRedefine(Names.JOINT_RETURN_NAME_0006XX, FieldType.String, JOINT_RETURN_NAME_0006_local, 60);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.INJURED_SPOUSE_IND_0006AS, FieldType.String, 1);

                               IField INJURED_SPOUSE_IND_0006_local = CASH_RECEIPT_DETAIL_0005ET.CreateNewField(Names.INJURED_SPOUSE_IND_0006, FieldType.String, 1);
                               CASH_RECEIPT_DETAIL_0005ET.CreateNewFieldRedefine(Names.INJURED_SPOUSE_IND_0006XX, FieldType.String, INJURED_SPOUSE_IND_0006_local, 1);
                           });
                       });
                       GROUP_EXPORT_COLLECTION_0001GV.CreateNewGroup(Names.LOCAL_GRP_DETAIL_ADJ_AM_0007EV, (LOCAL_GRP_DETAIL_ADJ_AM_0007EV) =>
                       {
                           LOCAL_GRP_DETAIL_ADJ_AM_0007EV.CreateNewGroup(Names.IEF_SUPPLIED_0007ET, (IEF_SUPPLIED_0007ET) =>
                           {
                               IEF_SUPPLIED_0007ET.CreateNewField(Names.TOTAL_CURRENCY_0007AS, FieldType.String, 1);

                               IField TOTAL_CURRENCY_0007_local = IEF_SUPPLIED_0007ET.CreateNewField(Names.TOTAL_CURRENCY_0007, FieldType.SignedNumeric, 15, null, 2);
                               IEF_SUPPLIED_0007ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0007XX, FieldType.String, TOTAL_CURRENCY_0007_local, 15);
                           });
                       });
                   });
                   A_0298257844_OA.CreateNewGroup(Names.GROUP_EXPORT_TOTAL_RECO_0002GV, (GROUP_EXPORT_TOTAL_RECO_0002GV) =>
                   {
                       GROUP_EXPORT_TOTAL_RECO_0002GV.CreateNewGroup(Names.EXPORT_GRP_DETAIL_TOT_A_0008EV, (EXPORT_GRP_DETAIL_TOT_A_0008EV) =>
                       {
                           EXPORT_GRP_DETAIL_TOT_A_0008EV.CreateNewGroup(Names.IEF_SUPPLIED_0008ET, (IEF_SUPPLIED_0008ET) =>
                           {
                               IEF_SUPPLIED_0008ET.CreateNewField(Names.TOTAL_CURRENCY_0008AS, FieldType.String, 1);

                               IField TOTAL_CURRENCY_0008_local = IEF_SUPPLIED_0008ET.CreateNewField(Names.TOTAL_CURRENCY_0008, FieldType.SignedNumeric, 15, null, 2);
                               IEF_SUPPLIED_0008ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0008XX, FieldType.String, TOTAL_CURRENCY_0008_local, 15);
                           });
                       });
                       GROUP_EXPORT_TOTAL_RECO_0002GV.CreateNewGroup(Names.EXPORT_GRP_DETAIL_0009EV, (EXPORT_GRP_DETAIL_0009EV) =>
                       {
                           EXPORT_GRP_DETAIL_0009EV.CreateNewGroup(Names.CASH_RECEIPT_EVENT_0009ET, (CASH_RECEIPT_EVENT_0009ET) =>
                           {
                               CASH_RECEIPT_EVENT_0009ET.CreateNewField(Names.TOTAL_ADJUSTMENT_COUNT_0009AS, FieldType.String, 1);

                               IField TOTAL_ADJUSTMENT_COUNT_0009_local = CASH_RECEIPT_EVENT_0009ET.CreateNewField(Names.TOTAL_ADJUSTMENT_COUNT_0009, FieldType.SignedNumeric, 7);
                               CASH_RECEIPT_EVENT_0009ET.CreateNewFieldRedefine(Names.TOTAL_ADJUSTMENT_COUNT_0009XX, FieldType.String, TOTAL_ADJUSTMENT_COUNT_0009_local, 7);
                           });
                       });
                       GROUP_EXPORT_TOTAL_RECO_0002GV.CreateNewGroup(Names.EXPORT_GRP_DETAIL_0010EV, (EXPORT_GRP_DETAIL_0010EV) =>
                       {
                           EXPORT_GRP_DETAIL_0010EV.CreateNewGroup(Names.CASH_RECEIPT_0010ET, (CASH_RECEIPT_0010ET) =>
                           {
                               CASH_RECEIPT_0010ET.CreateNewField(Names.TOTAL_NONCASH_TRANSACTI_0011AS, FieldType.String, 1);

                               IField TOTAL_NONCASH_TRANSACTION_0011_local = CASH_RECEIPT_0010ET.CreateNewField(Names.TOTAL_NONCASH_TRANSACTION_0011, FieldType.SignedNumeric, 7);
                               CASH_RECEIPT_0010ET.CreateNewFieldRedefine(Names.TOTAL_NONCASH_TRANSACTI_0011XX, FieldType.String, TOTAL_NONCASH_TRANSACTION_0011_local, 7);
                               CASH_RECEIPT_0010ET.CreateNewField(Names.RECEIPT_AMOUNT_0011AS, FieldType.String, 1);

                               IField RECEIPT_AMOUNT_0011_local = CASH_RECEIPT_0010ET.CreateNewField(Names.RECEIPT_AMOUNT_0011, FieldType.SignedNumeric, 11, null, 2);
                               CASH_RECEIPT_0010ET.CreateNewFieldRedefine(Names.RECEIPT_AMOUNT_0011XX, FieldType.String, RECEIPT_AMOUNT_0011_local, 11);
                               CASH_RECEIPT_0010ET.CreateNewField(Names.TOTAL_NONCASH_TRANSACTI_0012AS, FieldType.String, 1);

                               IField TOTAL_NONCASH_TRANSACTION_0012_local = CASH_RECEIPT_0010ET.CreateNewField(Names.TOTAL_NONCASH_TRANSACTION_0012, FieldType.SignedNumeric, 11, null, 2);
                               CASH_RECEIPT_0010ET.CreateNewFieldRedefine(Names.TOTAL_NONCASH_TRANSACTI_0012XX, FieldType.String, TOTAL_NONCASH_TRANSACTION_0012_local, 11);
                           });
                       });
                       GROUP_EXPORT_TOTAL_RECO_0002GV.CreateNewGroup(Names.EXPORT_GRP_DETAIL_NET_A_0013EV, (EXPORT_GRP_DETAIL_NET_A_0013EV) =>
                       {
                           EXPORT_GRP_DETAIL_NET_A_0013EV.CreateNewGroup(Names.IEF_SUPPLIED_0013ET, (IEF_SUPPLIED_0013ET) =>
                           {
                               IEF_SUPPLIED_0013ET.CreateNewField(Names.TOTAL_CURRENCY_0013AS, FieldType.String, 1);

                               IField TOTAL_CURRENCY_0013_local = IEF_SUPPLIED_0013ET.CreateNewField(Names.TOTAL_CURRENCY_0013, FieldType.SignedNumeric, 15, null, 2);
                               IEF_SUPPLIED_0013ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0013XX, FieldType.String, TOTAL_CURRENCY_0013_local, 15);
                           });
                       });
                   });
                   A_0298257844_OA.CreateNewGroup(Names.GROUP_EXPORT_ADDITIONAL_0003GV, (GROUP_EXPORT_ADDITIONAL_0003GV) =>
                   {
                       GROUP_EXPORT_ADDITIONAL_0003GV.CreateNewGroup(Names.EXPORT_GR_DETAIL_ADJ_AM_0014EV, (EXPORT_GR_DETAIL_ADJ_AM_0014EV) =>
                       {
                           EXPORT_GR_DETAIL_ADJ_AM_0014EV.CreateNewGroup(Names.CASH_RECEIPT_DETAIL_0014ET, (CASH_RECEIPT_DETAIL_0014ET) =>
                           {
                               CASH_RECEIPT_DETAIL_0014ET.CreateNewField(Names.OFFSET_TAX_YEAR_0014AS, FieldType.String, 1);

                               IField OFFSET_TAX_YEAR_0014_local = CASH_RECEIPT_DETAIL_0014ET.CreateNewField(Names.OFFSET_TAX_YEAR_0014, FieldType.SignedNumeric, 4);
                               CASH_RECEIPT_DETAIL_0014ET.CreateNewFieldRedefine(Names.OFFSET_TAX_YEAR_0014XX, FieldType.String, OFFSET_TAX_YEAR_0014_local, 4);
                               CASH_RECEIPT_DETAIL_0014ET.CreateNewField(Names.INTERFACE_TRANS_ID_0014AS, FieldType.String, 1);

                               IField INTERFACE_TRANS_ID_0014_local = CASH_RECEIPT_DETAIL_0014ET.CreateNewField(Names.INTERFACE_TRANS_ID_0014, FieldType.String, 14);
                               CASH_RECEIPT_DETAIL_0014ET.CreateNewFieldRedefine(Names.INTERFACE_TRANS_ID_0014XX, FieldType.String, INTERFACE_TRANS_ID_0014_local, 14);
                           });
                       });
                       GROUP_EXPORT_ADDITIONAL_0003GV.CreateNewGroup(Names.EXPORT_GRP_DETAIL_ADDRE_0015EV, (EXPORT_GRP_DETAIL_ADDRE_0015EV) =>
                       {
                           EXPORT_GRP_DETAIL_ADDRE_0015EV.CreateNewGroup(Names.CASH_RECEIPT_DETAIL_ADD_0015ET, (CASH_RECEIPT_DETAIL_ADD_0015ET) =>
                           {
                               CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewField(Names.STREET_1_0015AS, FieldType.String, 1);

                               IField STREET_1_0015_local = CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewField(Names.STREET_1_0015, FieldType.String, 25);
                               CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewFieldRedefine(Names.STREET_1_0015XX, FieldType.String, STREET_1_0015_local, 25);
                               CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewField(Names.CITY_0015AS, FieldType.String, 1);

                               IField CITY_0015_local = CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewField(Names.CITY_0015, FieldType.String, 30);
                               CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewFieldRedefine(Names.CITY_0015XX, FieldType.String, CITY_0015_local, 30);
                               CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewField(Names.STATE_0015AS, FieldType.String, 1);

                               IField STATE_0015_local = CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewField(Names.STATE_0015, FieldType.String, 2);
                               CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewFieldRedefine(Names.STATE_0015XX, FieldType.String, STATE_0015_local, 2);
                               CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewField(Names.ZIP_CODE_5_0015AS, FieldType.String, 1);

                               IField ZIP_CODE_5_0015_local = CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewField(Names.ZIP_CODE_5_0015, FieldType.String, 5);
                               CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewFieldRedefine(Names.ZIP_CODE_5_0015XX, FieldType.String, ZIP_CODE_5_0015_local, 5);
                               CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewField(Names.ZIP_CODE_4_0015AS, FieldType.String, 1);

                               IField ZIP_CODE_4_0015_local = CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewField(Names.ZIP_CODE_4_0015, FieldType.String, 4);
                               CASH_RECEIPT_DETAIL_ADD_0015ET.CreateNewFieldRedefine(Names.ZIP_CODE_4_0015XX, FieldType.String, ZIP_CODE_4_0015_local, 4);
                           });
                       });
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(W_IA, args, 2);
            SetPassedParm(W_OA, args, 3);
            SetPassedParm(PSMGR_EAB_DATA, args, 4);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(W_IA, args, 2);
            SetReturnParm(W_OA, args, 3);
            SetReturnParm(PSMGR_EAB_DATA, args, 4);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXFE99 : EABBase
    {

        #region Public Constructors
        public SWEXFE99()
            : base()
        {
            this.ProgramName.SetValue("SWEXFE99");

            WS = new SWEXFE99_ws();
            FD = new SWEXFE99_fd(WS);
            LS = new SWEXFE99_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXFE99_ws WS;

        //==== File Data Class ========================================
        private SWEXFE99_fd FD;

        //==== Linkage Section Data Class ========================================
        private SWEXFE99_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_0298254802(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_0298254802
        /// </summary>
        private void M_MAIN_0298254802(string returnMethod = "")
        {
            M_PARA_0298254802_INIT("M_PARA_0298254802_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-0298254802-INIT THRU PARA-0298254802-INIT-EXIT
            M_PARA_0298254802("M_PARA_0298254802_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-0298254802 THRU PARA-0298254802-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_0298254802
        /// </summary>
        private void M_PARA_0298254802(string returnMethod = "")
        {
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            //COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            //COMMENT: ******************************************
            //COMMENT:  THIS  CODE SWCSZG04 IS A PART OF SWEXFE99*
            //COMMENT: ******************************************
            //COMMENT: IF A NEW STUB IS GENERATED CHANGE
            //COMMENT: ***********************************************************
            LS.TEXT_RETURN_CODE_0002.SetValue("00");                                                            //COBOL==> MOVE '00' TO TEXT-RETURN-CODE-0002.
                                                                                                                // EvaluateList !LS.FILE_INSTRUCTION_0001!                                                          //COBOL==> EVALUATE FILE-INSTRUCTION-0001
            if ((LS.FILE_INSTRUCTION_0001.IsEqualTo("OPEN")))                                                   //COBOL==> WHEN 'OPEN'
            {
                M_1000_OPEN_FILE(); if (Control.ExitProgram) { return; }                                              //COBOL==> PERFORM 1000-OPEN-FILE
            }                                                                                                //COBOL==> WHEN 'READ'
            else
            if ((LS.FILE_INSTRUCTION_0001.IsEqualTo("READ")))
            {
                M_2000_READ_FILE(); if (Control.ExitProgram) { return; }                                              //COBOL==> PERFORM 2000-READ-FILE
            }                                                                                                //COBOL==> WHEN 'POSITION'
            else
            if ((LS.FILE_INSTRUCTION_0001.IsEqualTo("POSITION")))
            {
                M_1000_OPEN_FILE(); if (Control.ExitProgram) { return; }                                              //COBOL==> PERFORM 1000-OPEN-FILE
                if (LS.TEXT_RETURN_CODE_0002.IsEqualTo("00"))                                                       //COBOL==> IF TEXT-RETURN-CODE-0002 = '00'
                {
                    M_3000_POSITION_FILE(); if (Control.ExitProgram) { return; }                                          //COBOL==> PERFORM 3000-POSITION-FILE
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.TEXT_RETURN_CODE_0002.SetValue("BI");                                                            //COBOL==> MOVE 'BI' TO TEXT-RETURN-CODE-0002
            }                                                                                                   //COBOL==> END-EVALUATE
            M_9999_FINISHED(CheckGotoReturn(returnMethod)); return;                                             //COBOL==> GO TO 9999-FINISHED.
        }
        /// <summary>
        /// Method M_1000_OPEN_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************
        /// </remarks>
        private void M_1000_OPEN_FILE(string returnMethod = "")
        {
            //COMMENT: ****************
            FD.FDSO_INPUT_FILE.OpenFile(FileAccessMode.Read);                                                   //COBOL==> OPEN INPUT FDSO-INPUT-FILE.
            if (WS.FDSO_FILE_STATUS.IsEqualTo("00"))                                                            //COBOL==> IF FDSO-FILE-STATUS = '00'
            {
                LS.TEXT_RETURN_CODE_0002.SetValue("00");                                                            //COBOL==> MOVE '00' TO TEXT-RETURN-CODE-0002
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.TEXT_RETURN_CODE_0002.SetValue("PE");                                                            //COBOL==> MOVE 'PE' TO TEXT-RETURN-CODE-0002
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1000_OPEN_FILE") { M_2000_READ_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_READ_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************
        /// </remarks>
        private void M_2000_READ_FILE(string returnMethod = "")
        {
            //COMMENT: ****************
            FD.FDSO_INPUT_FILE.ReadLine();                                                                      //COBOL==> READ FDSO-INPUT-FILE.
                                                                                                                // EvaluateList !WS.FDSO_FILE_STATUS!                                                               //COBOL==> EVALUATE FDSO-FILE-STATUS
            if ((WS.FDSO_FILE_STATUS.IsEqualTo("00")))                                                          //COBOL==> WHEN '00'
            {
                // EvaluateList !FD.FDSO_TOTAL!                                                                     //COBOL==> EVALUATE FDSO-TOTAL OF TOTAL-RECORD
                if ((FD.FDSO_TOTAL.IsEqualTo("TOTAL")))                                                             //COBOL==> WHEN 'TOTAL'
                {
                    //COMMENT:  POPULATE THE TOTAL RECORD FIELDS.
                    LS.COUNT_0003.SetValue("2");                                                                        //COBOL==> MOVE '2' TO COUNT-0003
                    LS.TOTAL_ADJUSTMENT_COUNT_0009.SetValue(FD.FDSO_ADJ_COUNT);                                         //COBOL==> MOVE FDSO-ADJ-COUNT TO TOTAL-ADJUSTMENT-COUNT-0009
                    LS.TOTAL_NONCASH_TRANSACTION_0011.SetValue(FD.FDSO_COLL_COUNT);                                     //COBOL==> MOVE FDSO-COLL-COUNT TO TOTAL-NONCASH-TRANSACTION-0011
                    LS.RECEIPT_AMOUNT_0011.SetValue(FD.FDSO_TOTAL_COLL_AMOUNT);                                         //COBOL==> MOVE FDSO-TOTAL-COLL-AMOUNT TO RECEIPT-AMOUNT-0011
                    LS.TOTAL_CURRENCY_0008.SetValue(FD.FDSO_TOTAL_ADJ_AMOUNT);                                          //COBOL==> MOVE FDSO-TOTAL-ADJ-AMOUNT TO TOTAL-CURRENCY-0008
                    LS.TOTAL_CURRENCY_0013.SetValue(FD.FDSO_NET_AMOUNT);                                                //COBOL==> MOVE FDSO-NET-AMOUNT TO TOTAL-CURRENCY-0013
                }                                                                                                //COBOL==> WHEN OTHER
                else
                {
                    LS.COUNT_0003.SetValue("1");                                                                        //COBOL==> MOVE '1' TO COUNT-0003
                    LS.TEXT_4_0004.SetValue(FD.FDSO_LOCAL_CODE);                                                        //COBOL==> MOVE FDSO-LOCAL-CODE TO TEXT-4-0004
                    WS.WS_TRIM_CASE_15.SetValue(FD.FDSO_CASE_NO);                                                       //COBOL==> MOVE FDSO-CASE-NO TO WS-TRIM-CASE-15
                    M_2100_MOVE_PERSON(); if (Control.ExitProgram) { return; }                                            //COBOL==> PERFORM 2100-MOVE-PERSON
                                                                                                                          //COMMENT:               MOVE WS-TRIM-CASE-10
                                                                                                                          //COMMENT:                   TO OBLIGOR-PERSON-NUMBER-0005
                    LS.OBLIGOR_LAST_NAME_0005.SetValue(FD.FDSO_LAST_NAME);                                              //COBOL==> MOVE FDSO-LAST-NAME TO OBLIGOR-LAST-NAME-0005
                    LS.OBLIGOR_FIRST_NAME_0005.SetValue(FD.FDSO_FIRST_NAME);                                            //COBOL==> MOVE FDSO-FIRST-NAME TO OBLIGOR-FIRST-NAME-0005
                    LS.COLLECTION_AMOUNT_0005.SetValue(FD.FDSO_COLL_AMOUNT);                                            //COBOL==> MOVE FDSO-COLL-AMOUNT TO COLLECTION-AMOUNT-0005
                    LS.OFFSET_TAX_YEAR_0006.SetValue(FD.FDSO_OFFSET_TAX_YR);                                            //COBOL==> MOVE FDSO-OFFSET-TAX-YR TO OFFSET-TAX-YEAR-0006
                    LS.OBLIGOR_SOCIAL_SECURITY_N_0006.SetValue(FD.FDSO_SOC_SEC_NUM);                                    //COBOL==> MOVE FDSO-SOC-SEC-NUM TO OBLIGOR-SOCIAL-SECURITY-N-0006
                    LS.JOINT_RETURN_IND_0006.SetValue(FD.FDSO_RETURN_IND);                                              //COBOL==> MOVE FDSO-RETURN-IND TO JOINT-RETURN-IND-0006
                    LS.JOINT_RETURN_NAME_0006.SetValue(FD.FDSO_NAMES);                                                  //COBOL==> MOVE FDSO-NAMES TO JOINT-RETURN-NAME-0006
                    LS.INJURED_SPOUSE_IND_0006.SetValue(FD.FDSO_INJURED_SPOUSE);                                        //COBOL==> MOVE FDSO-INJURED-SPOUSE TO INJURED-SPOUSE-IND-0006
                    LS.TOTAL_CURRENCY_0007.SetValue(FD.FDSO_ADJ_AMOUNT);                                                //COBOL==> MOVE FDSO-ADJ-AMOUNT TO TOTAL-CURRENCY-0007
                    LS.OFFSET_TAX_YEAR_0014.SetValue(FD.FDSO_ADJ_YEAR);                                                 //COBOL==> MOVE FDSO-ADJ-YEAR TO OFFSET-TAX-YEAR-0014
                    WS.WS_SETUP_TYPE.SetValue(FD.FDSO_TYPE_OFFSET);                                                     //COBOL==> MOVE FDSO-TYPE-OFFSET TO WS-SETUP-TYPE
                    WS.WS_SETUP_CASE_TYPE.SetValue(FD.FDSO_CASE_TYPE);                                                  //COBOL==> MOVE FDSO-CASE-TYPE TO WS-SETUP-CASE-TYPE
                    WS.WS_SETUP_STATE.SetValue(FD.FDSO_STATE_CODE_DET);                                                 //COBOL==> MOVE FDSO-STATE-CODE-DET TO WS-SETUP-STATE
                    LS.INTERFACE_TRANS_ID_0014.SetValue(WS.WS_SETUP_INTERFACE_FIELDS);                                  //COBOL==> MOVE WS-SETUP-INTERFACE-FIELDS TO INTERFACE-TRANS-ID-0014
                    LS.STREET_1_0015.SetValue(FD.FDSO_STREET_ADDR);                                                     //COBOL==> MOVE FDSO-STREET-ADDR TO STREET-1-0015
                    LS.ZIP_CODE_5_0015.SetValue(FD.FDSO_ZIP_5);                                                         //COBOL==> MOVE FDSO-ZIP-5 TO ZIP-CODE-5-0015
                    LS.ZIP_CODE_4_0015.SetValue(FD.FDSO_ZIP_4);                                                         //COBOL==> MOVE FDSO-ZIP-4 TO ZIP-CODE-4-0015
                    WS.WS_CITY_STATE_TBL.SetValue(FD.FDSO_CITY_STATE);                                                  //COBOL==> MOVE FDSO-CITY-STATE TO WS-CITY-STATE-TBL
                    if (WS.WS_CS_25.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-25 > SPACES
                    {
                        WS.WS_STATE_2.SetValue(WS.WS_CS_25);                                                                //COBOL==> MOVE WS-CS-25 TO WS-STATE-2
                        WS.WS_STATE_1.SetValue(WS.WS_CS_24);                                                                //COBOL==> MOVE WS-CS-24 TO WS-STATE-1
                        WS.WS_CS_25.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-25
                        WS.WS_CS_24.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-24
                        LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                        LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if (WS.WS_CS_24.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-24 > SPACES
                        {
                            WS.WS_STATE_2.SetValue(WS.WS_CS_24);                                                                //COBOL==> MOVE WS-CS-24 TO WS-STATE-2
                            WS.WS_STATE_1.SetValue(WS.WS_CS_23);                                                                //COBOL==> MOVE WS-CS-23 TO WS-STATE-1
                            WS.WS_CS_24.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-24
                            WS.WS_CS_23.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-23
                            LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                            LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (WS.WS_CS_23.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-23 > SPACES
                            {
                                WS.WS_STATE_2.SetValue(WS.WS_CS_23);                                                                //COBOL==> MOVE WS-CS-23 TO WS-STATE-2
                                WS.WS_STATE_1.SetValue(WS.WS_CS_22);                                                                //COBOL==> MOVE WS-CS-22 TO WS-STATE-1
                                WS.WS_CS_23.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-23
                                WS.WS_CS_22.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-22
                                LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                if (WS.WS_CS_22.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-22 > SPACES
                                {
                                    WS.WS_STATE_2.SetValue(WS.WS_CS_22);                                                                //COBOL==> MOVE WS-CS-22 TO WS-STATE-2
                                    WS.WS_STATE_1.SetValue(WS.WS_CS_21);                                                                //COBOL==> MOVE WS-CS-21 TO WS-STATE-1
                                    WS.WS_CS_22.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-22
                                    WS.WS_CS_21.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-21
                                    LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                    LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                }                                                                                                   //COBOL==> ELSE
                                else
                                {
                                    if (WS.WS_CS_21.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-21 > SPACES
                                    {
                                        WS.WS_STATE_2.SetValue(WS.WS_CS_21);                                                                //COBOL==> MOVE WS-CS-21 TO WS-STATE-2
                                        WS.WS_STATE_1.SetValue(WS.WS_CS_20);                                                                //COBOL==> MOVE WS-CS-20 TO WS-STATE-1
                                        WS.WS_CS_21.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-21
                                        WS.WS_CS_20.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-20
                                        LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                        LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                    }                                                                                                   //COBOL==> ELSE
                                    else
                                    {
                                        if (WS.WS_CS_20.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-20 > SPACES
                                        {
                                            WS.WS_STATE_2.SetValue(WS.WS_CS_20);                                                                //COBOL==> MOVE WS-CS-20 TO WS-STATE-2
                                            WS.WS_STATE_1.SetValue(WS.WS_CS_19);                                                                //COBOL==> MOVE WS-CS-19 TO WS-STATE-1
                                            WS.WS_CS_20.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-20
                                            WS.WS_CS_19.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-19
                                            LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                            LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                        }                                                                                                   //COBOL==> ELSE
                                        else
                                        {
                                            if (WS.WS_CS_19.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-19 > SPACES
                                            {
                                                WS.WS_STATE_2.SetValue(WS.WS_CS_19);                                                                //COBOL==> MOVE WS-CS-19 TO WS-STATE-2
                                                WS.WS_STATE_1.SetValue(WS.WS_CS_18);                                                                //COBOL==> MOVE WS-CS-18 TO WS-STATE-1
                                                WS.WS_CS_19.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-19
                                                WS.WS_CS_18.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-18
                                                LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                            }                                                                                                   //COBOL==> ELSE
                                            else
                                            {
                                                if (WS.WS_CS_18.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-18 > SPACES
                                                {
                                                    WS.WS_STATE_2.SetValue(WS.WS_CS_18);                                                                //COBOL==> MOVE WS-CS-18 TO WS-STATE-2
                                                    WS.WS_STATE_1.SetValue(WS.WS_CS_17);                                                                //COBOL==> MOVE WS-CS-17 TO WS-STATE-1
                                                    WS.WS_CS_18.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-18
                                                    WS.WS_CS_17.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-17
                                                    LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                    LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                }                                                                                                   //COBOL==> ELSE
                                                else
                                                {
                                                    if (WS.WS_CS_17.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-17 > SPACES
                                                    {
                                                        WS.WS_STATE_2.SetValue(WS.WS_CS_17);                                                                //COBOL==> MOVE WS-CS-17 TO WS-STATE-2
                                                        WS.WS_STATE_1.SetValue(WS.WS_CS_16);                                                                //COBOL==> MOVE WS-CS-16 TO WS-STATE-1
                                                        WS.WS_CS_17.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-17
                                                        WS.WS_CS_16.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-16
                                                        LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                        LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                    }                                                                                                   //COBOL==> ELSE
                                                    else
                                                    {
                                                        if (WS.WS_CS_16.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-16 > SPACES
                                                        {
                                                            WS.WS_STATE_2.SetValue(WS.WS_CS_16);                                                                //COBOL==> MOVE WS-CS-16 TO WS-STATE-2
                                                            WS.WS_STATE_1.SetValue(WS.WS_CS_15);                                                                //COBOL==> MOVE WS-CS-15 TO WS-STATE-1
                                                            WS.WS_CS_16.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-16
                                                            WS.WS_CS_15.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-15
                                                            LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                            LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                        }                                                                                                   //COBOL==> ELSE
                                                        else
                                                        {
                                                            if (WS.WS_CS_15.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-15 > SPACES
                                                            {
                                                                WS.WS_STATE_2.SetValue(WS.WS_CS_15);                                                                //COBOL==> MOVE WS-CS-15 TO WS-STATE-2
                                                                WS.WS_STATE_1.SetValue(WS.WS_CS_14);                                                                //COBOL==> MOVE WS-CS-14 TO WS-STATE-1
                                                                WS.WS_CS_15.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-15
                                                                WS.WS_CS_14.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-14
                                                                LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                            }                                                                                                   //COBOL==> ELSE
                                                            else
                                                            {
                                                                if (WS.WS_CS_14.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-14 > SPACES
                                                                {
                                                                    WS.WS_STATE_2.SetValue(WS.WS_CS_14);                                                                //COBOL==> MOVE WS-CS-14 TO WS-STATE-2
                                                                    WS.WS_STATE_1.SetValue(WS.WS_CS_13);                                                                //COBOL==> MOVE WS-CS-13 TO WS-STATE-1
                                                                    WS.WS_CS_14.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-14
                                                                    WS.WS_CS_13.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-13
                                                                    LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                    LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                }                                                                                                   //COBOL==> ELSE
                                                                else
                                                                {
                                                                    if (WS.WS_CS_13.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-13 > SPACES
                                                                    {
                                                                        WS.WS_STATE_2.SetValue(WS.WS_CS_13);                                                                //COBOL==> MOVE WS-CS-13 TO WS-STATE-2
                                                                        WS.WS_STATE_1.SetValue(WS.WS_CS_12);                                                                //COBOL==> MOVE WS-CS-12 TO WS-STATE-1
                                                                        WS.WS_CS_13.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-13
                                                                        WS.WS_CS_12.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-12
                                                                        LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                        LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                    }                                                                                                   //COBOL==> ELSE
                                                                    else
                                                                    {
                                                                        if (WS.WS_CS_12.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-12 > SPACES
                                                                        {
                                                                            WS.WS_STATE_2.SetValue(WS.WS_CS_12);                                                                //COBOL==> MOVE WS-CS-12 TO WS-STATE-2
                                                                            WS.WS_STATE_1.SetValue(WS.WS_CS_11);                                                                //COBOL==> MOVE WS-CS-11 TO WS-STATE-1
                                                                            WS.WS_CS_12.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-12
                                                                            WS.WS_CS_11.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-11
                                                                            LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                            LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                        }                                                                                                   //COBOL==> ELSE
                                                                        else
                                                                        {
                                                                            if (WS.WS_CS_11.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-11 > SPACES
                                                                            {
                                                                                WS.WS_STATE_2.SetValue(WS.WS_CS_11);                                                                //COBOL==> MOVE WS-CS-11 TO WS-STATE-2
                                                                                WS.WS_STATE_1.SetValue(WS.WS_CS_10);                                                                //COBOL==> MOVE WS-CS-10 TO WS-STATE-1
                                                                                WS.WS_CS_11.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-11
                                                                                WS.WS_CS_10.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-10
                                                                                LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                                LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                            }                                                                                                   //COBOL==> ELSE
                                                                            else
                                                                            {
                                                                                if (WS.WS_CS_10.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-10 > SPACES
                                                                                {
                                                                                    WS.WS_STATE_2.SetValue(WS.WS_CS_10);                                                                //COBOL==> MOVE WS-CS-10 TO WS-STATE-2
                                                                                    WS.WS_STATE_1.SetValue(WS.WS_CS_09);                                                                //COBOL==> MOVE WS-CS-09 TO WS-STATE-1
                                                                                    WS.WS_CS_10.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-10
                                                                                    WS.WS_CS_09.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-09
                                                                                    LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                                    LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                                }                                                                                                   //COBOL==> ELSE
                                                                                else
                                                                                {
                                                                                    if (WS.WS_CS_09.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-09 > SPACES
                                                                                    {
                                                                                        WS.WS_STATE_2.SetValue(WS.WS_CS_09);                                                                //COBOL==> MOVE WS-CS-09 TO WS-STATE-2
                                                                                        WS.WS_STATE_1.SetValue(WS.WS_CS_08);                                                                //COBOL==> MOVE WS-CS-08 TO WS-STATE-1
                                                                                        WS.WS_CS_09.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-09
                                                                                        WS.WS_CS_08.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-08
                                                                                        LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                                        LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                                    }                                                                                                   //COBOL==> ELSE
                                                                                    else
                                                                                    {
                                                                                        if (WS.WS_CS_08.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-08 > SPACES
                                                                                        {
                                                                                            WS.WS_STATE_2.SetValue(WS.WS_CS_08);                                                                //COBOL==> MOVE WS-CS-08 TO WS-STATE-2
                                                                                            WS.WS_STATE_1.SetValue(WS.WS_CS_07);                                                                //COBOL==> MOVE WS-CS-07 TO WS-STATE-1
                                                                                            WS.WS_CS_08.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-08
                                                                                            WS.WS_CS_07.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-07
                                                                                            LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                                            LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                                        }                                                                                                   //COBOL==> ELSE
                                                                                        else
                                                                                        {
                                                                                            if (WS.WS_CS_07.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-07 > SPACES
                                                                                            {
                                                                                                WS.WS_STATE_2.SetValue(WS.WS_CS_07);                                                                //COBOL==> MOVE WS-CS-07 TO WS-STATE-2
                                                                                                WS.WS_STATE_1.SetValue(WS.WS_CS_06);                                                                //COBOL==> MOVE WS-CS-06 TO WS-STATE-1
                                                                                                WS.WS_CS_07.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-07
                                                                                                WS.WS_CS_06.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-06
                                                                                                LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                                                LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                                            }                                                                                                   //COBOL==> ELSE
                                                                                            else
                                                                                            {
                                                                                                if (WS.WS_CS_06.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-06 > SPACES
                                                                                                {
                                                                                                    WS.WS_STATE_2.SetValue(WS.WS_CS_06);                                                                //COBOL==> MOVE WS-CS-06 TO WS-STATE-2
                                                                                                    WS.WS_STATE_1.SetValue(WS.WS_CS_05);                                                                //COBOL==> MOVE WS-CS-05 TO WS-STATE-1
                                                                                                    WS.WS_CS_06.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-06
                                                                                                    WS.WS_CS_05.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-05
                                                                                                    LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                                                    LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                                                }                                                                                                   //COBOL==> ELSE
                                                                                                else
                                                                                                {
                                                                                                    if (WS.WS_CS_05.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-05 > SPACES
                                                                                                    {
                                                                                                        WS.WS_STATE_2.SetValue(WS.WS_CS_05);                                                                //COBOL==> MOVE WS-CS-05 TO WS-STATE-2
                                                                                                        WS.WS_STATE_1.SetValue(WS.WS_CS_04);                                                                //COBOL==> MOVE WS-CS-04 TO WS-STATE-1
                                                                                                        WS.WS_CS_05.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-05
                                                                                                        WS.WS_CS_04.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-04
                                                                                                        LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                                                        LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                                                    }                                                                                                   //COBOL==> ELSE
                                                                                                    else
                                                                                                    {
                                                                                                        if (WS.WS_CS_04.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-04 > SPACES
                                                                                                        {
                                                                                                            WS.WS_STATE_2.SetValue(WS.WS_CS_04);                                                                //COBOL==> MOVE WS-CS-04 TO WS-STATE-2
                                                                                                            WS.WS_STATE_1.SetValue(WS.WS_CS_03);                                                                //COBOL==> MOVE WS-CS-03 TO WS-STATE-1
                                                                                                            WS.WS_CS_04.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-04
                                                                                                            WS.WS_CS_03.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-03
                                                                                                            LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                                                            LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                                                        }                                                                                                   //COBOL==> ELSE
                                                                                                        else
                                                                                                        {
                                                                                                            if (WS.WS_CS_03.IsGreaterThan(SPACES))                                                              //COBOL==> IF WS-CS-03 > SPACES
                                                                                                            {
                                                                                                                WS.WS_STATE_2.SetValue(WS.WS_CS_03);                                                                //COBOL==> MOVE WS-CS-03 TO WS-STATE-2
                                                                                                                WS.WS_STATE_1.SetValue(WS.WS_CS_02);                                                                //COBOL==> MOVE WS-CS-02 TO WS-STATE-1
                                                                                                                WS.WS_CS_03.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-03
                                                                                                                WS.WS_CS_02.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-02
                                                                                                                LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                                                                LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                                                            }                                                                                                   //COBOL==> ELSE
                                                                                                            else
                                                                                                            {
                                                                                                                WS.WS_STATE_2.SetValue(WS.WS_CS_02);                                                                //COBOL==> MOVE WS-CS-02 TO WS-STATE-2
                                                                                                                WS.WS_STATE_1.SetValue(WS.WS_CS_01);                                                                //COBOL==> MOVE WS-CS-01 TO WS-STATE-1
                                                                                                                WS.WS_CS_02.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-02
                                                                                                                WS.WS_CS_01.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO WS-CS-01
                                                                                                                LS.STATE_0015.SetValue(WS.WS_STATE_1_2);                                                            //COBOL==> MOVE WS-STATE-1-2 TO STATE-0015
                                                                                                                LS.CITY_0015.SetValue(WS.WS_CITY_STATE_TBL);                                                        //COBOL==> MOVE WS-CITY-STATE-TBL TO CITY-0015
                                                                                                            }                                                                                                   //COBOL==> END-IF
                                                                                                        }                                                                                                   //COBOL==> END-IF
                                                                                                    }                                                                                                   //COBOL==> END-IF
                                                                                                }                                                                                                   //COBOL==> END-IF
                                                                                            }                                                                                                   //COBOL==> END-IF
                                                                                        }                                                                                                   //COBOL==> END-IF
                                                                                    }                                                                                                   //COBOL==> END-IF
                                                                                }                                                                                                   //COBOL==> END-IF
                                                                            }                                                                                                   //COBOL==> END-IF
                                                                        }                                                                                                   //COBOL==> END-IF
                                                                    }                                                                                                   //COBOL==> END-IF
                                                                }                                                                                                   //COBOL==> END-IF
                                                            }                                                                                                   //COBOL==> END-IF
                                                        }                                                                                                   //COBOL==> END-IF
                                                    }                                                                                                   //COBOL==> END-IF
                                                }                                                                                                   //COBOL==> END-IF
                                            }                                                                                                   //COBOL==> END-IF
                                        }                                                                                                   //COBOL==> END-IF
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-EVALUATE
            }                                                                                                //COBOL==> WHEN '10'
            else
            if ((WS.FDSO_FILE_STATUS.IsEqualTo("10")))
            {
                LS.TEXT_RETURN_CODE_0002.SetValue("EF");                                                            //COBOL==> MOVE 'EF' TO TEXT-RETURN-CODE-0002
                M_4000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 4000-CLOSE-FILE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.TEXT_RETURN_CODE_0002.SetValue("BR");                                                            //COBOL==> MOVE 'BR' TO TEXT-RETURN-CODE-0002
                M_4000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 4000-CLOSE-FILE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_2000_READ_FILE") { M_2100_MOVE_PERSON(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2100_MOVE_PERSON
        /// </summary>
        /// <remarks>
        ///COMMENT: ************
        /// </remarks>
        private void M_2100_MOVE_PERSON(string returnMethod = "")
        {
            //COMMENT: ************
            if (WS.WS_TRIM_CASE_5.IsSpaces())                                                                   //COBOL==> IF WS-TRIM-CASE-5 = SPACES
            {
                LS.OBLIGOR_PERSON_NUMBER_0005.SetValue(WS.WS_TRIM_CASE_510);                                        //COBOL==> MOVE WS-TRIM-CASE-510 TO OBLIGOR-PERSON-NUMBER-0005
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.WS_TRIM_CASE_1.IsGreaterThan(SPACES))                                                        //COBOL==> IF WS-TRIM-CASE-1 > SPACES
                {
                    LS.OBLIGOR_PERSON_NUMBER_0005.SetValue(WS.WS_TRIM_CASE_15);                                         //COBOL==> MOVE WS-TRIM-CASE-15 TO OBLIGOR-PERSON-NUMBER-0005
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.WS_TRIM_CASE_2.IsGreaterThan(SPACES))                                                        //COBOL==> IF WS-TRIM-CASE-2 > SPACES
                    {
                        LS.OBLIGOR_PERSON_NUMBER_0005.SetValue(WS.WS_TRIM_CASE_110);                                        //COBOL==> MOVE WS-TRIM-CASE-110 TO OBLIGOR-PERSON-NUMBER-0005
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if (WS.WS_TRIM_CASE_3.IsGreaterThan(SPACES))                                                        //COBOL==> IF WS-TRIM-CASE-3 > SPACES
                        {
                            LS.OBLIGOR_PERSON_NUMBER_0005.SetValue(WS.WS_TRIM_CASE_210);                                        //COBOL==> MOVE WS-TRIM-CASE-210 TO OBLIGOR-PERSON-NUMBER-0005
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (WS.WS_TRIM_CASE_4.IsGreaterThan(SPACES))                                                        //COBOL==> IF WS-TRIM-CASE-4 > SPACES
                            {
                                LS.OBLIGOR_PERSON_NUMBER_0005.SetValue(WS.WS_TRIM_CASE_310);                                        //COBOL==> MOVE WS-TRIM-CASE-310 TO OBLIGOR-PERSON-NUMBER-0005
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                if (WS.WS_TRIM_CASE_5.IsGreaterThan(SPACES))                                                        //COBOL==> IF WS-TRIM-CASE-5 > SPACES
                                {
                                    LS.OBLIGOR_PERSON_NUMBER_0005.SetValue(WS.WS_TRIM_CASE_410);                                        //COBOL==> MOVE WS-TRIM-CASE-410 TO OBLIGOR-PERSON-NUMBER-0005
                                }                                                                                                   //COBOL==> ELSE
                                else
                                {
                                    LS.OBLIGOR_PERSON_NUMBER_0005.SetValue(WS.WS_TRIM_CASE_510);                                        //COBOL==> MOVE WS-TRIM-CASE-510 TO OBLIGOR-PERSON-NUMBER-0005
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_2100_MOVE_PERSON") { M_3000_POSITION_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3000_POSITION_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT: ************
        /// </remarks>
        private void M_3000_POSITION_FILE(string returnMethod = "")
        {
            //COMMENT: ************
            WS.WS_INPUT_RESTART_INFO.SetValue(LS.TEXT_LINE_80_0002);                                            //COBOL==> MOVE TEXT-LINE-80-0002 TO WS-INPUT-RESTART-INFO
            WS.WS_STATE.SetValue(WS.WS_INPUT_STATE);                                                            //COBOL==> MOVE WS-INPUT-STATE TO WS-STATE
            WS.WS_LOC_CODE.SetValue(WS.WS_INPUT_LOC_CODE);                                                      //COBOL==> MOVE WS-INPUT-LOC-CODE TO WS-LOC-CODE
            WS.WS_SOC_SEC_NUM.SetValue(WS.WS_INPUT_SOC_SEC_NUM);                                                //COBOL==> MOVE WS-INPUT-SOC-SEC-NUM TO WS-SOC-SEC-NUM
            WS.WS_CASE_NO.SetValue(WS.WS_INPUT_CASE_NO);                                                        //COBOL==> MOVE WS-INPUT-CASE-NO TO WS-CASE-NO
            WS.WS_LAST_NAME.SetValue(WS.WS_INPUT_LAST_NAME);                                                    //COBOL==> MOVE WS-INPUT-LAST-NAME TO WS-LAST-NAME
            WS.WS_FIRST_NAME.SetValue(WS.WS_INPUT_FIRST_NAME);                                                  //COBOL==> MOVE WS-INPUT-FIRST-NAME TO WS-FIRST-NAME
            WS.WS_ARREARAGE.SetValue(WS.WS_INPUT_ARREARAGE);                                                    //COBOL==> MOVE WS-INPUT-ARREARAGE TO WS-ARREARAGE
            WS.WS_COLL_AMOUNT.SetValue(WS.WS_INPUT_COLL_AMOUNT);                                                //COBOL==> MOVE WS-INPUT-COLL-AMOUNT TO WS-COLL-AMOUNT
            WS.WS_ADJ_AMOUNT.SetValue(WS.WS_INPUT_ADJ_AMOUNT);                                                  //COBOL==> MOVE WS-INPUT-ADJ-AMOUNT TO WS-ADJ-AMOUNT
            WS.WS_ADJ_YEAR.SetValue(WS.WS_INPUT_ADJ_YEAR);                                                      //COBOL==> MOVE WS-INPUT-ADJ-YEAR TO WS-ADJ-YEAR
            WS.WS_OFFSET_TAX_YR.SetValue(WS.WS_INPUT_OFFSET_TAX_YR);                                            //COBOL==> MOVE WS-INPUT-OFFSET-TAX-YR TO WS-OFFSET-TAX-YR
            WS.WS_RETURN_IND.SetValue(WS.WS_INPUT_RETURN_IND);                                                  //COBOL==> MOVE WS-INPUT-RETURN-IND TO WS-RETURN-IND
            WS.WS_CASE_TYPE.SetValue(WS.WS_INPUT_CASE_TYPE);                                                    //COBOL==> MOVE WS-INPUT-CASE-TYPE TO WS-CASE-TYPE
            WS.WS_TRANS_STATE.SetValue(WS.WS_INPUT_TRANS_STATE);                                                //COBOL==> MOVE WS-INPUT-TRANS-STATE TO WS-TRANS-STATE
            WS.WS_TRANS_LOC_CODE.SetValue(WS.WS_INPUT_TRANS_LOC_CODE);                                          //COBOL==> MOVE WS-INPUT-TRANS-LOC-CODE TO WS-TRANS-LOC-CODE
            WS.WS_NAMES.SetValue(WS.WS_INPUT_NAMES);                                                            //COBOL==> MOVE WS-INPUT-NAMES TO WS-NAMES
            WS.WS_STREET_ADDR.SetValue(WS.WS_INPUT_STREET_ADDR);                                                //COBOL==> MOVE WS-INPUT-STREET-ADDR TO WS-STREET-ADDR
            WS.WS_CITY_STATE.SetValue(WS.WS_INPUT_CITY_STATE);                                                  //COBOL==> MOVE WS-INPUT-CITY-STATE TO WS-CITY-STATE
            WS.WS_ZIP.SetValue(WS.WS_INPUT_ZIP);                                                                //COBOL==> MOVE WS-INPUT-ZIP TO WS-ZIP
            WS.WS_FILLER.SetValue(WS.WS_INPUT_FILLER);                                                          //COBOL==> MOVE WS-INPUT-FILLER TO WS-FILLER
            while (!((FD.DETAIL_RECORD.IsEqualTo(WS.WS_FORMATTED_RESTART_INFO)) || (!(LS.TEXT_RETURN_CODE_0002.IsEqualTo("00")))))  //COBOL==> PERFORM UNTIL DETAIL-RECORD = WS-FORMATTED-RESTART-INFO OR TEXT-RETURN-CODE-0002 NOT = '00'
            {
                FD.FDSO_INPUT_FILE.ReadLine();                                                                      //COBOL==> READ FDSO-INPUT-FILE
                                                                                                                    // EvaluateList !WS.FDSO_FILE_STATUS!                                                               //COBOL==> EVALUATE FDSO-FILE-STATUS
                if ((WS.FDSO_FILE_STATUS.IsEqualTo("00")))                                                          //COBOL==> WHEN '00'
                {
                    //Continue                                                                                          //COBOL==> CONTINUE
                }                                                                                                //COBOL==> WHEN '10'
                else
                if ((WS.FDSO_FILE_STATUS.IsEqualTo("10")))
                {
                    LS.TEXT_RETURN_CODE_0002.SetValue("EF");                                                            //COBOL==> MOVE 'EF' TO TEXT-RETURN-CODE-0002
                }                                                                                                //COBOL==> WHEN OTHER
                else
                {
                    LS.TEXT_RETURN_CODE_0002.SetValue("BR");                                                            //COBOL==> MOVE 'BR' TO TEXT-RETURN-CODE-0002
                }                                                                                                   //COBOL==> END-EVALUATE
            }                                                                                                   //COBOL==> END-PERFORM.
            if (LS.TEXT_RETURN_CODE_0002.IsEqualTo("EF"))                                                       //COBOL==> IF TEXT-RETURN-CODE-0002 = 'EF'
            {
                //COMMENT:             'DID NOT FIND RESTART INFO:'
                //COMMENT:              WS-INPUT-RESTART-INFO
                M_4000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 4000-CLOSE-FILE
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_3000_POSITION_FILE") { M_4000_CLOSE_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4000_CLOSE_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT: ************
        /// </remarks>
        private void M_4000_CLOSE_FILE(string returnMethod = "")
        {
            //COMMENT: ************
            FD.FDSO_INPUT_FILE.CloseFile();                                                                     //COBOL==> CLOSE FDSO-INPUT-FILE.
            if (returnMethod != "" && returnMethod != "M_4000_CLOSE_FILE") { M_9999_FINISHED(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9999_FINISHED
        /// </summary>
        /// <remarks>
        ///COMMENT: ************
        /// </remarks>
        private void M_9999_FINISHED(string returnMethod = "")
        {
            //COMMENT: ************
            if (returnMethod == "M_9999_FINISHED") { return; }                                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9999_FINISHED") { M_PARA_0298254802_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0298254802_EXIT
        /// </summary>
        private void M_PARA_0298254802_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0298254802_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_0298254802_EXIT") { M_PARA_0298254802_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0298254802_INIT
        /// </summary>
        private void M_PARA_0298254802_INIT(string returnMethod = "")
        {
            LS.EXPORT_0002EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0002EV
            LS.EXPORT_RECORD_TYPE_RETU_0003EV.ResetToInitialValue();                                            //COBOL==> INITIALIZE EXPORT-RECORD-TYPE-RETU-0003EV
            LS.GROUP_EXPORT_COLLECTION_0001GV.ResetToInitialValue();                                            //COBOL==> INITIALIZE GROUP-EXPORT-COLLECTION-0001GV
            LS.GROUP_EXPORT_TOTAL_RECO_0002GV.ResetToInitialValue();                                            //COBOL==> INITIALIZE GROUP-EXPORT-TOTAL-RECO-0002GV
            LS.GROUP_EXPORT_ADDITIONAL_0003GV.ResetToInitialValue();                                            //COBOL==> INITIALIZE GROUP-EXPORT-ADDITIONAL-0003GV .
            if (returnMethod != "" && returnMethod != "M_PARA_0298254802_INIT") { M_PARA_0298254802_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0298254802_INIT_EXIT
        /// </summary>
        private void M_PARA_0298254802_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0298254802_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
