#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:42:08 PM
   **        *   FROM COBOL PGM   :  SWEX0045
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   ***************************************************************
                       SOURCE CODE GENERATED BY
                              CA GEN R8
             COPYRIGHT (C) 2014 CA. ALL RIGHTS RESERVED.
       NAME: FN_B615_EAB_FORMAT_DETAIL_LINES  DATE: 2014/09/24
       TARGET OS:   MVS                       TIME: 14:07:23
       TARGET DBMS: DB2                       USER: SWSRGAV
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
       DYNAMIC LINK (Z/OS) PROPERTY SET TO "No"
   ***************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Core;
using System;
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEX0045_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEX0045_ws_WorkingStorage";
            internal const string WS_NUMERIC_WORK_FIELDS = "WS_NUMERIC_WORK_FIELDS";
            internal const string WS_CASH_KPC = "WS_CASH_KPC";
            internal const string WS_CASH_FDSO = "WS_CASH_FDSO";
            internal const string WS_DIST_TAF = "WS_DIST_TAF";
            internal const string WS_DIST_TAF_ADJ = "WS_DIST_TAF_ADJ";
            internal const string WS_DIST_TAF_TOT = "WS_DIST_TAF_TOT";
            internal const string WS_DISB_PT_WAR = "WS_DISB_PT_WAR";
            internal const string WS_DISB_PT_EFT = "WS_DISB_PT_EFT";
            internal const string WS_DISB_PT_TOT = "WS_DISB_PT_TOT";
            internal const string WS_CASH_SDSO = "WS_CASH_SDSO";
            internal const string WS_DIST_NTAF = "WS_DIST_NTAF";
            internal const string WS_DIST_NTAF_ADJ = "WS_DIST_NTAF_ADJ";
            internal const string WS_DIST_NTAF_TOT = "WS_DIST_NTAF_TOT";
            internal const string WS_DISB_NTAF_WAR = "WS_DISB_NTAF_WAR";
            internal const string WS_DISB_NTAF_EFT = "WS_DISB_NTAF_EFT";
            internal const string WS_DISB_NTAF_TOT = "WS_DISB_NTAF_TOT";
            internal const string WS_CASH_KSDLUI = "WS_CASH_KSDLUI";
            internal const string WS_DIST_TAF_FC = "WS_DIST_TAF_FC";
            internal const string WS_DIST_TAF_FC_ADJ = "WS_DIST_TAF_FC_ADJ";
            internal const string WS_DIST_TAF_FC_TOT = "WS_DIST_TAF_FC_TOT";
            internal const string WS_CASH_CSSI = "WS_CASH_CSSI";
            internal const string WS_CASH_MISC = "WS_CASH_MISC";
            internal const string WS_CASH_OTHER = "WS_CASH_OTHER";
            internal const string WS_DIST_GA_FC = "WS_DIST_GA_FC";
            internal const string WS_DIST_GA_FC_ADJ = "WS_DIST_GA_FC_ADJ";
            internal const string WS_DIST_GA_FC_TOT = "WS_DIST_GA_FC_TOT";
            internal const string WS_CASH_SUBTOT = "WS_CASH_SUBTOT";
            internal const string WS_DIST_TOTAL = "WS_DIST_TOTAL";
            internal const string WS_DIST_TOTAL_ADJ = "WS_DIST_TOTAL_ADJ";
            internal const string WS_DIST_TOT_TOT = "WS_DIST_TOT_TOT";
            internal const string WS_DISB_WAR_TOT = "WS_DISB_WAR_TOT";
            internal const string WS_DISB_EFT_TOT = "WS_DISB_EFT_TOT";
            internal const string WS_DISB_TOT_TOT = "WS_DISB_TOT_TOT";
            internal const string WS_DIST_PERCENT_ADJ = "WS_DIST_PERCENT_ADJ";
            internal const string WS_DIST_PERCENT_TOT = "WS_DIST_PERCENT_TOT";
            internal const string WT_DIST_PERCENT_ADJ = "WT_DIST_PERCENT_ADJ";
            internal const string WT_DIST_PERCENT_TOT = "WT_DIST_PERCENT_TOT";
            internal const string WS_REF_ADV = "WS_REF_ADV";
            internal const string WS_CASH_TOTAL = "WS_CASH_TOTAL";
            internal const string WS_MONTH_DIF = "WS_MONTH_DIF";
            internal const string WS_FROM_DATE_WORK = "WS_FROM_DATE_WORK";
            internal const string WS_FROM_YEARW = "WS_FROM_YEARW";
            internal const string WS_FROM_MONTHW = "WS_FROM_MONTHW";
            internal const string WS_FROM_DAYW = "WS_FROM_DAYW";
            internal const string WS_TO_DATE_WORK = "WS_TO_DATE_WORK";
            internal const string WS_TO_YEARW = "WS_TO_YEARW";
            internal const string WS_TO_MONTHW = "WS_TO_MONTHW";
            internal const string WS_TO_DAYW = "WS_TO_DAYW";
            internal const string WS_DATE = "WS_DATE";
            internal const string WS_YEAR = "WS_YEAR";
            internal const string WS_MONTH = "WS_MONTH";
            internal const string WS_DAY = "WS_DAY";
            internal const string WS_MONTH_ARRAY = "WS_MONTH_ARRAY";
            internal const string WS_MONTH_DEFINITION = "WS_MONTH_DEFINITION";
            internal const string WS_MONTHS = "WS_MONTHS";
            internal const string WS_MONTHS_Redefines = "WS_MONTHS_Redefines";
            internal const string WS_REPORT_DATA_ARRAY = "WS_REPORT_DATA_ARRAY";
            internal const string WS_LINE_TEXT_1 = "WS_LINE_TEXT_1";
            internal const string WS_LINE_TEXT_1A = "WS_LINE_TEXT_1A";
            internal const string WS_LINE_TEXT_2 = "WS_LINE_TEXT_2";
            internal const string WS_LINE_TEXT_3 = "WS_LINE_TEXT_3";
            internal const string WS_LINE_TEXT_4 = "WS_LINE_TEXT_4";
            internal const string WS_LINE_TEXT_5 = "WS_LINE_TEXT_5";
            internal const string WX_CASH_KPC = "WX_CASH_KPC";
            internal const string WS_LINE_TEXT_6 = "WS_LINE_TEXT_6";
            internal const string WX_CASH_FDSO = "WX_CASH_FDSO";
            internal const string WX_DIST_TAF = "WX_DIST_TAF";
            internal const string WX_DIST_TAF_ADJ = "WX_DIST_TAF_ADJ";
            internal const string WX_DIST_TAF_TOT = "WX_DIST_TAF_TOT";
            internal const string WX_DISB_PT_WAR = "WX_DISB_PT_WAR";
            internal const string WX_DISB_PT_EFT = "WX_DISB_PT_EFT";
            internal const string WX_DISB_PT_TOT = "WX_DISB_PT_TOT";
            internal const string WS_LINE_TEXT_7 = "WS_LINE_TEXT_7";
            internal const string WX_CASH_SDSO = "WX_CASH_SDSO";
            internal const string WX_DIST_NTAF = "WX_DIST_NTAF";
            internal const string WX_DIST_NTAF_ADJ = "WX_DIST_NTAF_ADJ";
            internal const string WX_DIST_NTAF_TOT = "WX_DIST_NTAF_TOT";
            internal const string WX_DISB_NTAF_WAR = "WX_DISB_NTAF_WAR";
            internal const string WX_DISB_NTAF_EFT = "WX_DISB_NTAF_EFT";
            internal const string WX_DISB_NTAF_TOT = "WX_DISB_NTAF_TOT";
            internal const string WS_LINE_TEXT_8 = "WS_LINE_TEXT_8";
            internal const string WX_CASH_KSDLUI = "WX_CASH_KSDLUI";
            internal const string WX_DIST_TAF_FC = "WX_DIST_TAF_FC";
            internal const string WX_DIST_TAF_FC_ADJ = "WX_DIST_TAF_FC_ADJ";
            internal const string WX_DIST_TAF_FC_TOT = "WX_DIST_TAF_FC_TOT";
            internal const string WS_LINE_TEXT_9 = "WS_LINE_TEXT_9";
            internal const string WX_CASH_CSSI = "WX_CASH_CSSI";
            internal const string WX_DIST_GA_FC = "WX_DIST_GA_FC";
            internal const string WX_DIST_GA_FC_ADJ = "WX_DIST_GA_FC_ADJ";
            internal const string WX_DIST_GA_FC_TOT = "WX_DIST_GA_FC_TOT";
            internal const string WS_LINE_TEXT_10 = "WS_LINE_TEXT_10";
            internal const string WX_CASH_MISC = "WX_CASH_MISC";
            internal const string WS_LINE_TEXT_11 = "WS_LINE_TEXT_11";
            internal const string WX_CASH_OTHER = "WX_CASH_OTHER";
            internal const string WS_LINE_TEXT_12 = "WS_LINE_TEXT_12";
            internal const string WX_CASH_SUBTOT = "WX_CASH_SUBTOT";
            internal const string WX_DIST_TOTAL = "WX_DIST_TOTAL";
            internal const string WX_DIST_TOTAL_ADJ = "WX_DIST_TOTAL_ADJ";
            internal const string WX_DIST_TOT_TOT = "WX_DIST_TOT_TOT";
            internal const string WX_DISB_WAR_TOT = "WX_DISB_WAR_TOT";
            internal const string WX_DISB_EFT_TOT = "WX_DISB_EFT_TOT";
            internal const string WX_DISB_TOT_TOT = "WX_DISB_TOT_TOT";
            internal const string WS_LINE_TEXT_13 = "WS_LINE_TEXT_13";
            internal const string WX_DIST_PERCENT_ADJ = "WX_DIST_PERCENT_ADJ";
            internal const string WX_DIST_PERCENT_TOT = "WX_DIST_PERCENT_TOT";
            internal const string WS_LINE_TEXT_14 = "WS_LINE_TEXT_14";
            internal const string WX_REF_ADV = "WX_REF_ADV";
            internal const string WS_LINE_TEXT_15 = "WS_LINE_TEXT_15";
            internal const string WX_CASH_TOTAL = "WX_CASH_TOTAL";
            internal const string ADIM1 = "ADIM1";
            internal const string ADIM2 = "ADIM2";
            internal const string ADIM3 = "ADIM3";
            internal const string EXPORT_GROUP_0001FL = "EXPORT_GROUP_0001FL";
            internal const string EXPORT_GROUP_0001PS = "EXPORT_GROUP_0001PS";
            internal const string EXPORT_GROUP_0001RF = "EXPORT_GROUP_0001RF";
            internal const string EXPORT_GROUP_0001MM = "EXPORT_GROUP_0001MM";
            internal const string WS_INDEX = "WS_INDEX";
        }
        #endregion

        #region Direct-access element properties
        public IGroup WS_NUMERIC_WORK_FIELDS { get { return GetElementByName<IGroup>(Names.WS_NUMERIC_WORK_FIELDS); } }
        public IField WS_CASH_KPC { get { return GetElementByName<IField>(Names.WS_CASH_KPC); } }
        public IField WS_CASH_FDSO { get { return GetElementByName<IField>(Names.WS_CASH_FDSO); } }
        public IField WS_DIST_TAF { get { return GetElementByName<IField>(Names.WS_DIST_TAF); } }
        public IField WS_DIST_TAF_ADJ { get { return GetElementByName<IField>(Names.WS_DIST_TAF_ADJ); } }
        public IField WS_DIST_TAF_TOT { get { return GetElementByName<IField>(Names.WS_DIST_TAF_TOT); } }
        public IField WS_DISB_PT_WAR { get { return GetElementByName<IField>(Names.WS_DISB_PT_WAR); } }
        public IField WS_DISB_PT_EFT { get { return GetElementByName<IField>(Names.WS_DISB_PT_EFT); } }
        public IField WS_DISB_PT_TOT { get { return GetElementByName<IField>(Names.WS_DISB_PT_TOT); } }
        public IField WS_CASH_SDSO { get { return GetElementByName<IField>(Names.WS_CASH_SDSO); } }
        public IField WS_DIST_NTAF { get { return GetElementByName<IField>(Names.WS_DIST_NTAF); } }
        public IField WS_DIST_NTAF_ADJ { get { return GetElementByName<IField>(Names.WS_DIST_NTAF_ADJ); } }
        public IField WS_DIST_NTAF_TOT { get { return GetElementByName<IField>(Names.WS_DIST_NTAF_TOT); } }
        public IField WS_DISB_NTAF_WAR { get { return GetElementByName<IField>(Names.WS_DISB_NTAF_WAR); } }
        public IField WS_DISB_NTAF_EFT { get { return GetElementByName<IField>(Names.WS_DISB_NTAF_EFT); } }
        public IField WS_DISB_NTAF_TOT { get { return GetElementByName<IField>(Names.WS_DISB_NTAF_TOT); } }
        public IField WS_CASH_KSDLUI { get { return GetElementByName<IField>(Names.WS_CASH_KSDLUI); } }
        public IField WS_DIST_TAF_FC { get { return GetElementByName<IField>(Names.WS_DIST_TAF_FC); } }
        public IField WS_DIST_TAF_FC_ADJ { get { return GetElementByName<IField>(Names.WS_DIST_TAF_FC_ADJ); } }
        public IField WS_DIST_TAF_FC_TOT { get { return GetElementByName<IField>(Names.WS_DIST_TAF_FC_TOT); } }
        public IField WS_CASH_CSSI { get { return GetElementByName<IField>(Names.WS_CASH_CSSI); } }
        public IField WS_CASH_MISC { get { return GetElementByName<IField>(Names.WS_CASH_MISC); } }
        public IField WS_CASH_OTHER { get { return GetElementByName<IField>(Names.WS_CASH_OTHER); } }
        public IField WS_DIST_GA_FC { get { return GetElementByName<IField>(Names.WS_DIST_GA_FC); } }
        public IField WS_DIST_GA_FC_ADJ { get { return GetElementByName<IField>(Names.WS_DIST_GA_FC_ADJ); } }
        public IField WS_DIST_GA_FC_TOT { get { return GetElementByName<IField>(Names.WS_DIST_GA_FC_TOT); } }
        public IField WS_CASH_SUBTOT { get { return GetElementByName<IField>(Names.WS_CASH_SUBTOT); } }
        public IField WS_DIST_TOTAL { get { return GetElementByName<IField>(Names.WS_DIST_TOTAL); } }
        public IField WS_DIST_TOTAL_ADJ { get { return GetElementByName<IField>(Names.WS_DIST_TOTAL_ADJ); } }
        public IField WS_DIST_TOT_TOT { get { return GetElementByName<IField>(Names.WS_DIST_TOT_TOT); } }
        public IField WS_DISB_WAR_TOT { get { return GetElementByName<IField>(Names.WS_DISB_WAR_TOT); } }
        public IField WS_DISB_EFT_TOT { get { return GetElementByName<IField>(Names.WS_DISB_EFT_TOT); } }
        public IField WS_DISB_TOT_TOT { get { return GetElementByName<IField>(Names.WS_DISB_TOT_TOT); } }
        public IField WS_DIST_PERCENT_ADJ { get { return GetElementByName<IField>(Names.WS_DIST_PERCENT_ADJ); } }
        public IField WS_DIST_PERCENT_TOT { get { return GetElementByName<IField>(Names.WS_DIST_PERCENT_TOT); } }
        public IField WT_DIST_PERCENT_ADJ { get { return GetElementByName<IField>(Names.WT_DIST_PERCENT_ADJ); } }
        public IField WT_DIST_PERCENT_TOT { get { return GetElementByName<IField>(Names.WT_DIST_PERCENT_TOT); } }
        public IField WS_REF_ADV { get { return GetElementByName<IField>(Names.WS_REF_ADV); } }
        public IField WS_CASH_TOTAL { get { return GetElementByName<IField>(Names.WS_CASH_TOTAL); } }
        public IField WS_MONTH_DIF { get { return GetElementByName<IField>(Names.WS_MONTH_DIF); } }
        public IGroup WS_FROM_DATE_WORK { get { return GetElementByName<IGroup>(Names.WS_FROM_DATE_WORK); } }
        public IField WS_FROM_YEARW { get { return GetElementByName<IField>(Names.WS_FROM_YEARW); } }
        public IField WS_FROM_MONTHW { get { return GetElementByName<IField>(Names.WS_FROM_MONTHW); } }
        public IField WS_FROM_DAYW { get { return GetElementByName<IField>(Names.WS_FROM_DAYW); } }
        public IGroup WS_TO_DATE_WORK { get { return GetElementByName<IGroup>(Names.WS_TO_DATE_WORK); } }
        public IField WS_TO_YEARW { get { return GetElementByName<IField>(Names.WS_TO_YEARW); } }
        public IField WS_TO_MONTHW { get { return GetElementByName<IField>(Names.WS_TO_MONTHW); } }
        public IField WS_TO_DAYW { get { return GetElementByName<IField>(Names.WS_TO_DAYW); } }
        public IGroup WS_DATE { get { return GetElementByName<IGroup>(Names.WS_DATE); } }
        public IField WS_YEAR { get { return GetElementByName<IField>(Names.WS_YEAR); } }
        public IField WS_MONTH { get { return GetElementByName<IField>(Names.WS_MONTH); } }
        public IField WS_DAY { get { return GetElementByName<IField>(Names.WS_DAY); } }
        public IGroup WS_MONTH_ARRAY { get { return GetElementByName<IGroup>(Names.WS_MONTH_ARRAY); } }
        public IGroup WS_MONTH_DEFINITION { get { return GetElementByName<IGroup>(Names.WS_MONTH_DEFINITION); } }
        public IGroup WS_MONTHS_Redefines { get { return GetElementByName<IGroup>(Names.WS_MONTHS_Redefines); } }
        public IArrayElementAccessor<IField> WS_MONTHS { get { return GetArrayElementAccessor<IField>(Names.WS_MONTHS); } }
        public IGroup WS_REPORT_DATA_ARRAY { get { return GetElementByName<IGroup>(Names.WS_REPORT_DATA_ARRAY); } }
        public IGroup WS_LINE_TEXT_1 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_1); } }
        public IGroup WS_LINE_TEXT_1A { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_1A); } }
        public IGroup WS_LINE_TEXT_2 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_2); } }
        public IGroup WS_LINE_TEXT_3 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_3); } }
        public IGroup WS_LINE_TEXT_4 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_4); } }
        public IGroup WS_LINE_TEXT_5 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_5); } }
        public IField WX_CASH_KPC { get { return GetElementByName<IField>(Names.WX_CASH_KPC); } }
        public IGroup WS_LINE_TEXT_6 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_6); } }
        public IField WX_CASH_FDSO { get { return GetElementByName<IField>(Names.WX_CASH_FDSO); } }
        public IField WX_DIST_TAF { get { return GetElementByName<IField>(Names.WX_DIST_TAF); } }
        public IField WX_DIST_TAF_ADJ { get { return GetElementByName<IField>(Names.WX_DIST_TAF_ADJ); } }
        public IField WX_DIST_TAF_TOT { get { return GetElementByName<IField>(Names.WX_DIST_TAF_TOT); } }
        public IField WX_DISB_PT_WAR { get { return GetElementByName<IField>(Names.WX_DISB_PT_WAR); } }
        public IField WX_DISB_PT_EFT { get { return GetElementByName<IField>(Names.WX_DISB_PT_EFT); } }
        public IField WX_DISB_PT_TOT { get { return GetElementByName<IField>(Names.WX_DISB_PT_TOT); } }
        public IGroup WS_LINE_TEXT_7 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_7); } }
        public IField WX_CASH_SDSO { get { return GetElementByName<IField>(Names.WX_CASH_SDSO); } }
        public IField WX_DIST_NTAF { get { return GetElementByName<IField>(Names.WX_DIST_NTAF); } }
        public IField WX_DIST_NTAF_ADJ { get { return GetElementByName<IField>(Names.WX_DIST_NTAF_ADJ); } }
        public IField WX_DIST_NTAF_TOT { get { return GetElementByName<IField>(Names.WX_DIST_NTAF_TOT); } }
        public IField WX_DISB_NTAF_WAR { get { return GetElementByName<IField>(Names.WX_DISB_NTAF_WAR); } }
        public IField WX_DISB_NTAF_EFT { get { return GetElementByName<IField>(Names.WX_DISB_NTAF_EFT); } }
        public IField WX_DISB_NTAF_TOT { get { return GetElementByName<IField>(Names.WX_DISB_NTAF_TOT); } }
        public IGroup WS_LINE_TEXT_8 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_8); } }
        public IField WX_CASH_KSDLUI { get { return GetElementByName<IField>(Names.WX_CASH_KSDLUI); } }
        public IField WX_DIST_TAF_FC { get { return GetElementByName<IField>(Names.WX_DIST_TAF_FC); } }
        public IField WX_DIST_TAF_FC_ADJ { get { return GetElementByName<IField>(Names.WX_DIST_TAF_FC_ADJ); } }
        public IField WX_DIST_TAF_FC_TOT { get { return GetElementByName<IField>(Names.WX_DIST_TAF_FC_TOT); } }
        public IGroup WS_LINE_TEXT_9 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_9); } }
        public IField WX_CASH_CSSI { get { return GetElementByName<IField>(Names.WX_CASH_CSSI); } }
        public IField WX_DIST_GA_FC { get { return GetElementByName<IField>(Names.WX_DIST_GA_FC); } }
        public IField WX_DIST_GA_FC_ADJ { get { return GetElementByName<IField>(Names.WX_DIST_GA_FC_ADJ); } }
        public IField WX_DIST_GA_FC_TOT { get { return GetElementByName<IField>(Names.WX_DIST_GA_FC_TOT); } }
        public IGroup WS_LINE_TEXT_10 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_10); } }
        public IField WX_CASH_MISC { get { return GetElementByName<IField>(Names.WX_CASH_MISC); } }
        public IGroup WS_LINE_TEXT_11 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_11); } }
        public IField WX_CASH_OTHER { get { return GetElementByName<IField>(Names.WX_CASH_OTHER); } }
        public IGroup WS_LINE_TEXT_12 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_12); } }
        public IField WX_CASH_SUBTOT { get { return GetElementByName<IField>(Names.WX_CASH_SUBTOT); } }
        public IField WX_DIST_TOTAL { get { return GetElementByName<IField>(Names.WX_DIST_TOTAL); } }
        public IField WX_DIST_TOTAL_ADJ { get { return GetElementByName<IField>(Names.WX_DIST_TOTAL_ADJ); } }
        public IField WX_DIST_TOT_TOT { get { return GetElementByName<IField>(Names.WX_DIST_TOT_TOT); } }
        public IField WX_DISB_WAR_TOT { get { return GetElementByName<IField>(Names.WX_DISB_WAR_TOT); } }
        public IField WX_DISB_EFT_TOT { get { return GetElementByName<IField>(Names.WX_DISB_EFT_TOT); } }
        public IField WX_DISB_TOT_TOT { get { return GetElementByName<IField>(Names.WX_DISB_TOT_TOT); } }
        public IGroup WS_LINE_TEXT_13 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_13); } }
        public IField WX_DIST_PERCENT_ADJ { get { return GetElementByName<IField>(Names.WX_DIST_PERCENT_ADJ); } }
        public IField WX_DIST_PERCENT_TOT { get { return GetElementByName<IField>(Names.WX_DIST_PERCENT_TOT); } }
        public IGroup WS_LINE_TEXT_14 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_14); } }
        public IField WX_REF_ADV { get { return GetElementByName<IField>(Names.WX_REF_ADV); } }
        public IGroup WS_LINE_TEXT_15 { get { return GetElementByName<IGroup>(Names.WS_LINE_TEXT_15); } }
        public IField WX_CASH_TOTAL { get { return GetElementByName<IField>(Names.WX_CASH_TOTAL); } }
        public IField ADIM1 { get { return GetElementByName<IField>(Names.ADIM1); } }
        public IField ADIM2 { get { return GetElementByName<IField>(Names.ADIM2); } }
        public IField ADIM3 { get { return GetElementByName<IField>(Names.ADIM3); } }
        public IField EXPORT_GROUP_0001FL { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001FL); } }
        public IField EXPORT_GROUP_0001PS { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001PS); } }
        public IField EXPORT_GROUP_0001RF { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001RF); } }
        public IField EXPORT_GROUP_0001MM { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001MM); } }
        public IField WS_INDEX { get { return GetElementByName<IField>(Names.WS_INDEX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.WS_NUMERIC_WORK_FIELDS, (WS_NUMERIC_WORK_FIELDS) =>
           {
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_CASH_KPC, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_CASH_FDSO, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_TAF, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_TAF_ADJ, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_TAF_TOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DISB_PT_WAR, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DISB_PT_EFT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DISB_PT_TOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_CASH_SDSO, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_NTAF, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_NTAF_ADJ, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_NTAF_TOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DISB_NTAF_WAR, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DISB_NTAF_EFT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DISB_NTAF_TOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_CASH_KSDLUI, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_TAF_FC, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_TAF_FC_ADJ, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_TAF_FC_TOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_CASH_CSSI, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_CASH_MISC, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_CASH_OTHER, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_GA_FC, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_GA_FC_ADJ, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_GA_FC_TOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_CASH_SUBTOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_TOTAL, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_TOTAL_ADJ, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_TOT_TOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DISB_WAR_TOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DISB_EFT_TOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DISB_TOT_TOT, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_PERCENT_ADJ, FieldType.SignedNumeric, 9, null, 6);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_DIST_PERCENT_TOT, FieldType.SignedNumeric, 9, null, 6);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WT_DIST_PERCENT_ADJ, FieldType.SignedNumeric, 5, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WT_DIST_PERCENT_TOT, FieldType.SignedNumeric, 5, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_REF_ADV, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_CASH_TOTAL, FieldType.SignedNumeric, 11, null, 2);
               WS_NUMERIC_WORK_FIELDS.CreateNewField(Names.WS_MONTH_DIF, FieldType.UnsignedNumeric, 2);
           });

            recordDef.CreateNewGroup(Names.WS_FROM_DATE_WORK, (WS_FROM_DATE_WORK) =>
           {
               WS_FROM_DATE_WORK.CreateNewField(Names.WS_FROM_YEARW, FieldType.UnsignedNumeric, 4);
               WS_FROM_DATE_WORK.CreateNewField(Names.WS_FROM_MONTHW, FieldType.UnsignedNumeric, 2);
               WS_FROM_DATE_WORK.CreateNewField(Names.WS_FROM_DAYW, FieldType.UnsignedNumeric, 2);
           });

            recordDef.CreateNewGroup(Names.WS_TO_DATE_WORK, (WS_TO_DATE_WORK) =>
           {
               WS_TO_DATE_WORK.CreateNewField(Names.WS_TO_YEARW, FieldType.UnsignedNumeric, 4);
               WS_TO_DATE_WORK.CreateNewField(Names.WS_TO_MONTHW, FieldType.UnsignedNumeric, 2);
               WS_TO_DATE_WORK.CreateNewField(Names.WS_TO_DAYW, FieldType.UnsignedNumeric, 2);
           });

            recordDef.CreateNewGroup(Names.WS_DATE, (WS_DATE) =>
           {
               WS_DATE.CreateNewField(Names.WS_YEAR, FieldType.UnsignedNumeric, 4);
               WS_DATE.CreateNewField(Names.WS_MONTH, FieldType.UnsignedNumeric, 2);
               WS_DATE.CreateNewField(Names.WS_DAY, FieldType.UnsignedNumeric, 2);
           });

            recordDef.CreateNewGroup(Names.WS_MONTH_ARRAY, (WS_MONTH_ARRAY) =>
           {
               IGroup WS_MONTH_DEFINITION_local = (IGroup)WS_MONTH_ARRAY.CreateNewGroup(Names.WS_MONTH_DEFINITION, (WS_MONTH_DEFINITION) =>
               {
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "JANUARY #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "FEBRUARY #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "MARCH #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "APRIL #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "MAY #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "JUNE #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "JULY #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "AUGUST #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "SEPTEMBER #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "OCTOBER #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "NOVEMBER #");
                   WS_MONTH_DEFINITION.CreateNewFillerField(FieldType.String, 11, "DECEMBER #");
               });
               WS_MONTH_ARRAY.CreateNewGroupRedefine(Names.WS_MONTHS_Redefines, WS_MONTH_DEFINITION_local, (WS_MONTHS_Redefines) =>
               {
                   WS_MONTHS_Redefines.CreateNewFieldArray(Names.WS_MONTHS, 12, FieldType.String, 11);
               });
           });

            recordDef.CreateNewGroup(Names.WS_REPORT_DATA_ARRAY, (WS_REPORT_DATA_ARRAY) =>
           {
               IGroup WS_LINE_TEXT_1_local = (IGroup)WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_1, (WS_LINE_TEXT_1) =>
               {
                   WS_LINE_TEXT_1.CreateNewFillerField(132, FillWith.Hashes);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroupRedefine(Names.WS_LINE_TEXT_1A, WS_LINE_TEXT_1_local, (WS_LINE_TEXT_1A) =>
               {
                   WS_LINE_TEXT_1A.CreateNewFillerField(132, FillWith.Hashes);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_2, (WS_LINE_TEXT_2) =>
               {
                   WS_LINE_TEXT_2.CreateNewFillerField(FieldType.String, 22, "CASH                  ");
                   WS_LINE_TEXT_2.CreateNewFillerField(FieldType.String, 37, "  DISTRIBUTION BY PROGRAM");
                   WS_LINE_TEXT_2.CreateNewFillerField(FieldType.String, 18, SPACES);
                   WS_LINE_TEXT_2.CreateNewFillerField(FieldType.String, 55, "DISBURSEMENTS BY TYPE  ");
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_3, (WS_LINE_TEXT_3) =>
               {
                   WS_LINE_TEXT_3.CreateNewFillerField(FieldType.String, 22, "+--------------------+");
                   WS_LINE_TEXT_3.CreateNewFillerField(FieldType.String, 2, SPACES);
                   WS_LINE_TEXT_3.CreateNewFillerField(FieldType.String, 52, "+--------------------------------------------------+");
                   WS_LINE_TEXT_3.CreateNewFillerField(FieldType.String, 56, " +-------------------------------------------------+");
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_4, (WS_LINE_TEXT_4) =>
               {
                   WS_LINE_TEXT_4.CreateNewFillerField(FieldType.String, 35, SPACES);
                   WS_LINE_TEXT_4.CreateNewFillerField(FieldType.String, 39, "DISTRIBUTED       ADJUSTED        TOTAL");
                   WS_LINE_TEXT_4.CreateNewFillerField(FieldType.String, 12, SPACES);
                   WS_LINE_TEXT_4.CreateNewFillerField(FieldType.String, 49, "      WARRANTS         EFT  TOTAL PAYMENTS");
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_5, (WS_LINE_TEXT_5) =>
               {
                   WS_LINE_TEXT_5.CreateNewFillerField(FieldType.String, 8, " KPC");
                   WS_LINE_TEXT_5.CreateNewField(Names.WX_CASH_KPC, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_5.CreateNewFillerField(110, FillWith.Hashes);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_6, (WS_LINE_TEXT_6) =>
               {
                   WS_LINE_TEXT_6.CreateNewFillerField(FieldType.String, 8, " FDSO");
                   WS_LINE_TEXT_6.CreateNewField(Names.WX_CASH_FDSO, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_6.CreateNewFillerField(FieldType.String, 10, "  TAF     ");
                   WS_LINE_TEXT_6.CreateNewField(Names.WX_DIST_TAF, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_6.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_6.CreateNewField(Names.WX_DIST_TAF_ADJ, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_6.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_6.CreateNewField(Names.WX_DIST_TAF_TOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99-", 15, null, 2);
                   WS_LINE_TEXT_6.CreateNewFillerField(FieldType.String, 11, "   PASSTHRU");
                   WS_LINE_TEXT_6.CreateNewField(Names.WX_DISB_PT_WAR, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_6.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_6.CreateNewField(Names.WX_DISB_PT_EFT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_6.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_6.CreateNewField(Names.WX_DISB_PT_TOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_7, (WS_LINE_TEXT_7) =>
               {
                   WS_LINE_TEXT_7.CreateNewFillerField(FieldType.String, 8, " SDSO");
                   WS_LINE_TEXT_7.CreateNewField(Names.WX_CASH_SDSO, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_7.CreateNewFillerField(FieldType.String, 10, "  NON-TAF ");
                   WS_LINE_TEXT_7.CreateNewField(Names.WX_DIST_NTAF, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_7.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_7.CreateNewField(Names.WX_DIST_NTAF_ADJ, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_7.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_7.CreateNewField(Names.WX_DIST_NTAF_TOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99-", 15, null, 2);
                   WS_LINE_TEXT_7.CreateNewFillerField(FieldType.String, 11, "   NON-TAF ");
                   WS_LINE_TEXT_7.CreateNewField(Names.WX_DISB_NTAF_WAR, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_7.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_7.CreateNewField(Names.WX_DISB_NTAF_EFT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_7.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_7.CreateNewField(Names.WX_DISB_NTAF_TOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_8, (WS_LINE_TEXT_8) =>
               {
                   WS_LINE_TEXT_8.CreateNewFillerField(FieldType.String, 8, " KSDLUI");
                   WS_LINE_TEXT_8.CreateNewField(Names.WX_CASH_KSDLUI, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_8.CreateNewFillerField(FieldType.String, 10, "  TAF/FC  ");
                   WS_LINE_TEXT_8.CreateNewField(Names.WX_DIST_TAF_FC, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_8.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_8.CreateNewField(Names.WX_DIST_TAF_FC_ADJ, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_8.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_8.CreateNewField(Names.WX_DIST_TAF_FC_TOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99-", 15, null, 2);
                   WS_LINE_TEXT_8.CreateNewFillerField(55, FillWith.Hashes);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_9, (WS_LINE_TEXT_9) =>
               {
                   WS_LINE_TEXT_9.CreateNewFillerField(FieldType.String, 8, " CSSI");
                   WS_LINE_TEXT_9.CreateNewField(Names.WX_CASH_CSSI, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_9.CreateNewFillerField(FieldType.String, 10, "  GA/FC   ");
                   WS_LINE_TEXT_9.CreateNewField(Names.WX_DIST_GA_FC, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_9.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_9.CreateNewField(Names.WX_DIST_GA_FC_ADJ, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_9.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_9.CreateNewField(Names.WX_DIST_GA_FC_TOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99-", 15, null, 2);
                   WS_LINE_TEXT_9.CreateNewFillerField(55, FillWith.Hashes);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_10, (WS_LINE_TEXT_10) =>
               {
                   WS_LINE_TEXT_10.CreateNewFillerField(FieldType.String, 8, " MISC ");
                   WS_LINE_TEXT_10.CreateNewField(Names.WX_CASH_MISC, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_11, (WS_LINE_TEXT_11) =>
               {
                   WS_LINE_TEXT_11.CreateNewFillerField(FieldType.String, 8, " OTHER ");
                   WS_LINE_TEXT_11.CreateNewField(Names.WX_CASH_OTHER, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_12, (WS_LINE_TEXT_12) =>
               {
                   WS_LINE_TEXT_12.CreateNewFillerField(FieldType.String, 8, "SUB-TOT");
                   WS_LINE_TEXT_12.CreateNewField(Names.WX_CASH_SUBTOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_12.CreateNewFillerField(FieldType.String, 10, "  TOTAL   ");
                   WS_LINE_TEXT_12.CreateNewField(Names.WX_DIST_TOTAL, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_12.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_12.CreateNewField(Names.WX_DIST_TOTAL_ADJ, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_12.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_12.CreateNewField(Names.WX_DIST_TOT_TOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99-", 15, null, 2);
                   WS_LINE_TEXT_12.CreateNewFillerField(FieldType.String, 11, "   TOTAL   ");
                   WS_LINE_TEXT_12.CreateNewField(Names.WX_DISB_WAR_TOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_12.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_12.CreateNewField(Names.WX_DISB_EFT_TOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_12.CreateNewFillerField(1, FillWith.Hashes);
                   WS_LINE_TEXT_12.CreateNewField(Names.WX_DISB_TOT_TOT, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_13, (WS_LINE_TEXT_13) =>
               {
                   WS_LINE_TEXT_13.CreateNewFillerField(FieldType.String, 52, SPACES);
                   WS_LINE_TEXT_13.CreateNewField(Names.WX_DIST_PERCENT_ADJ, FieldType.NumericEdited, "-ZZ9.99", 7, null, 2);
                   WS_LINE_TEXT_13.CreateNewFillerField(FieldType.String, 7, "%");
                   WS_LINE_TEXT_13.CreateNewField(Names.WX_DIST_PERCENT_TOT, FieldType.NumericEdited, "-ZZ9.99", 7, null, 2);
                   WS_LINE_TEXT_13.CreateNewFillerField(FieldType.String, 58, "%");
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_14, (WS_LINE_TEXT_14) =>
               {
                   WS_LINE_TEXT_14.CreateNewFillerField(FieldType.String, 8, " REF/ADV");
                   WS_LINE_TEXT_14.CreateNewField(Names.WX_REF_ADV, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99", 14, null, 2);
                   WS_LINE_TEXT_14.CreateNewFillerField(FieldType.String, 110, SPACES);
               });
               WS_REPORT_DATA_ARRAY.CreateNewGroup(Names.WS_LINE_TEXT_15, (WS_LINE_TEXT_15) =>
               {
                   WS_LINE_TEXT_15.CreateNewFillerField(FieldType.String, 8, "TOTAL   ");
                   WS_LINE_TEXT_15.CreateNewField(Names.WX_CASH_TOTAL, FieldType.NumericEdited, "ZZZ,ZZZ,ZZ9.99-", 15, null, 2);
                   WS_LINE_TEXT_15.CreateNewFillerField(FieldType.String, 109, SPACES);
               });
           });

            recordDef.CreateNewGroup("FILLER_d69", (FILLER_d69) =>
           {
               FILLER_d69.CreateNewField(Names.ADIM1, FieldType.CompInt, 8);
               FILLER_d69.CreateNewField(Names.ADIM2, FieldType.CompInt, 8);
               FILLER_d69.CreateNewField(Names.ADIM3, FieldType.CompInt, 8);
           });

            recordDef.CreateNewGroup("FILLER_d70", (FILLER_d70) =>
           {
               FILLER_d70.CreateNewField(Names.EXPORT_GROUP_0001FL, FieldType.String, 1);
               FILLER_d70.CreateNewField(Names.EXPORT_GROUP_0001PS, FieldType.CompShort, 4);
               FILLER_d70.CreateNewField(Names.EXPORT_GROUP_0001RF, FieldType.String, 1);
               FILLER_d70.CreateNewField(Names.EXPORT_GROUP_0001MM, FieldType.CompInt, 9, 20);
           });
            recordDef.CreateNewField(Names.WS_INDEX, FieldType.CompShort, 4);

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEX0045_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEX0045_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string WHEN_SUCCESSFUL_SF = "WHEN_SUCCESSFUL_SF";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string DB_ERROR_SF = "DB_ERROR_SF";
            internal const string ABORT_SHOW_DBMS_MSG_SF = "ABORT_SHOW_DBMS_MSG_SF";
            internal const string ABORT_SHOW_USER_MSG_SF = "ABORT_SHOW_USER_MSG_SF";
            internal const string RETRY_TRAN_REQUESTED_SF = "RETRY_TRAN_REQUESTED_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string ASYNC_WHEN_AVAILABLE_SF = "ASYNC_WHEN_AVAILABLE_SF";
            internal const string ASYNC_WHEN_ACCEPTED_SF = "ASYNC_WHEN_ACCEPTED_SF";
            internal const string ASYNC_WHEN_NOT_ACCEPTED_SF = "ASYNC_WHEN_NOT_ACCEPTED_SF";
            internal const string ASYNC_WHEN_INVALID_ID_SF = "ASYNC_WHEN_INVALID_ID_SF";
            internal const string ASYNC_WHEN_PENDING_SF = "ASYNC_WHEN_PENDING_SF";
            internal const string ASYNC_WHEN_SERVER_ERROR_SF = "ASYNC_WHEN_SERVER_ERROR_SF";
            internal const string ASYNC_WHEN_COMM_ERROR_SF = "ASYNC_WHEN_COMM_ERROR_SF";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DB_DEADLOCK_TIMOUT_FL_LS = "DB_DEADLOCK_TIMOUT_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_TIRDATE_SKIP_VAL = "PSMGR_TIRDATE_SKIP_VAL";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string TX_RETRY_COUNT = "TX_RETRY_COUNT";
            internal const string TX_USER_RETRY_ALLOWED = "TX_USER_RETRY_ALLOWED";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string PSMGR_ASYNC_DATA = "PSMGR_ASYNC_DATA";
            internal const string ASYNC_MODE = "ASYNC_MODE";
            internal const string FLOW_TYPE_SYNC = "FLOW_TYPE_SYNC";
            internal const string FLOW_TYPE_ASYNC = "FLOW_TYPE_ASYNC";
            internal const string FLOW_TYPE_NO_RESPONSE = "FLOW_TYPE_NO_RESPONSE";
            internal const string ASYNC_FLOW_STATUS_TABLE_PTR = "ASYNC_FLOW_STATUS_TABLE_PTR";
            internal const string ASYNC_SERVER_LOC_TABLE_PTR = "ASYNC_SERVER_LOC_TABLE_PTR";
            internal const string PSMGR_HEAP = "PSMGR_HEAP";
            internal const string HEAP_CFB = "HEAP_CFB";
            internal const string HEAP_CFB_ADDR = "HEAP_CFB_ADDR";
            internal const string HEAP_CFB_ADDR_RESV = "HEAP_CFB_ADDR_RESV";
            internal const string HEAP_CFB_ID = "HEAP_CFB_ID";
            internal const string HEAP_CFB_LEN = "HEAP_CFB_LEN";
            internal const string HEAP_WGLOB = "HEAP_WGLOB";
            internal const string HEAP_WGLOB_ADDR = "HEAP_WGLOB_ADDR";
            internal const string HEAP_WGLOB_ADDR_RESV = "HEAP_WGLOB_ADDR_RESV";
            internal const string HEAP_WGLOB_ID = "HEAP_WGLOB_ID";
            internal const string HEAP_WGLOB_LEN = "HEAP_WGLOB_LEN";
            internal const string IMPORT_CASH_KPC_0001EV = "IMPORT_CASH_KPC_0001EV";
            internal const string IEF_SUPPLIED_0001ET = "IEF_SUPPLIED_0001ET";
            internal const string TOTAL_CURRENCY_0001AS = "TOTAL_CURRENCY_0001AS";
            internal const string TOTAL_CURRENCY_0001 = "TOTAL_CURRENCY_0001";
            internal const string TOTAL_CURRENCY_0001XX = "TOTAL_CURRENCY_0001XX";
            internal const string IMPORT_CASH_FDSO_0002EV = "IMPORT_CASH_FDSO_0002EV";
            internal const string IEF_SUPPLIED_0002ET = "IEF_SUPPLIED_0002ET";
            internal const string TOTAL_CURRENCY_0002AS = "TOTAL_CURRENCY_0002AS";
            internal const string TOTAL_CURRENCY_0002 = "TOTAL_CURRENCY_0002";
            internal const string TOTAL_CURRENCY_0002XX = "TOTAL_CURRENCY_0002XX";
            internal const string IMPORT_CASH_SDSO_0003EV = "IMPORT_CASH_SDSO_0003EV";
            internal const string IEF_SUPPLIED_0003ET = "IEF_SUPPLIED_0003ET";
            internal const string TOTAL_CURRENCY_0003AS = "TOTAL_CURRENCY_0003AS";
            internal const string TOTAL_CURRENCY_0003 = "TOTAL_CURRENCY_0003";
            internal const string TOTAL_CURRENCY_0003XX = "TOTAL_CURRENCY_0003XX";
            internal const string IMPORT_CASH_MISC_0004EV = "IMPORT_CASH_MISC_0004EV";
            internal const string IEF_SUPPLIED_0004ET = "IEF_SUPPLIED_0004ET";
            internal const string TOTAL_CURRENCY_0004AS = "TOTAL_CURRENCY_0004AS";
            internal const string TOTAL_CURRENCY_0004 = "TOTAL_CURRENCY_0004";
            internal const string TOTAL_CURRENCY_0004XX = "TOTAL_CURRENCY_0004XX";
            internal const string IMPORT_CASH_OTHER_0005EV = "IMPORT_CASH_OTHER_0005EV";
            internal const string IEF_SUPPLIED_0005ET = "IEF_SUPPLIED_0005ET";
            internal const string TOTAL_CURRENCY_0005AS = "TOTAL_CURRENCY_0005AS";
            internal const string TOTAL_CURRENCY_0005 = "TOTAL_CURRENCY_0005";
            internal const string TOTAL_CURRENCY_0005XX = "TOTAL_CURRENCY_0005XX";
            internal const string IMPORT_REFUND_ADVANCEME_0006EV = "IMPORT_REFUND_ADVANCEME_0006EV";
            internal const string IEF_SUPPLIED_0006ET = "IEF_SUPPLIED_0006ET";
            internal const string TOTAL_CURRENCY_0006AS = "TOTAL_CURRENCY_0006AS";
            internal const string TOTAL_CURRENCY_0006 = "TOTAL_CURRENCY_0006";
            internal const string TOTAL_CURRENCY_0006XX = "TOTAL_CURRENCY_0006XX";
            internal const string IMPORT_DIST_TAF_0007EV = "IMPORT_DIST_TAF_0007EV";
            internal const string IEF_SUPPLIED_0007ET = "IEF_SUPPLIED_0007ET";
            internal const string TOTAL_CURRENCY_0007AS = "TOTAL_CURRENCY_0007AS";
            internal const string TOTAL_CURRENCY_0007 = "TOTAL_CURRENCY_0007";
            internal const string TOTAL_CURRENCY_0007XX = "TOTAL_CURRENCY_0007XX";
            internal const string IMPORT_DIST_NON_TAF_0008EV = "IMPORT_DIST_NON_TAF_0008EV";
            internal const string IEF_SUPPLIED_0008ET = "IEF_SUPPLIED_0008ET";
            internal const string TOTAL_CURRENCY_0008AS = "TOTAL_CURRENCY_0008AS";
            internal const string TOTAL_CURRENCY_0008 = "TOTAL_CURRENCY_0008";
            internal const string TOTAL_CURRENCY_0008XX = "TOTAL_CURRENCY_0008XX";
            internal const string IMPORT_DIST_TAF_FC_0009EV = "IMPORT_DIST_TAF_FC_0009EV";
            internal const string IEF_SUPPLIED_0009ET = "IEF_SUPPLIED_0009ET";
            internal const string TOTAL_CURRENCY_0009AS = "TOTAL_CURRENCY_0009AS";
            internal const string TOTAL_CURRENCY_0009 = "TOTAL_CURRENCY_0009";
            internal const string TOTAL_CURRENCY_0009XX = "TOTAL_CURRENCY_0009XX";
            internal const string IMPORT_DIST_GA_FC_0010EV = "IMPORT_DIST_GA_FC_0010EV";
            internal const string IEF_SUPPLIED_0010ET = "IEF_SUPPLIED_0010ET";
            internal const string TOTAL_CURRENCY_0010AS = "TOTAL_CURRENCY_0010AS";
            internal const string TOTAL_CURRENCY_0010 = "TOTAL_CURRENCY_0010";
            internal const string TOTAL_CURRENCY_0010XX = "TOTAL_CURRENCY_0010XX";
            internal const string IMPORT_DIST_TAF_ADJ_0011EV = "IMPORT_DIST_TAF_ADJ_0011EV";
            internal const string IEF_SUPPLIED_0011ET = "IEF_SUPPLIED_0011ET";
            internal const string TOTAL_CURRENCY_0011AS = "TOTAL_CURRENCY_0011AS";
            internal const string TOTAL_CURRENCY_0011 = "TOTAL_CURRENCY_0011";
            internal const string TOTAL_CURRENCY_0011XX = "TOTAL_CURRENCY_0011XX";
            internal const string IMPORT_DIST_NON_TAF_ADJ_0012EV = "IMPORT_DIST_NON_TAF_ADJ_0012EV";
            internal const string IEF_SUPPLIED_0012ET = "IEF_SUPPLIED_0012ET";
            internal const string TOTAL_CURRENCY_0012AS = "TOTAL_CURRENCY_0012AS";
            internal const string TOTAL_CURRENCY_0012 = "TOTAL_CURRENCY_0012";
            internal const string TOTAL_CURRENCY_0012XX = "TOTAL_CURRENCY_0012XX";
            internal const string IMPORT_DIST_TAF_FC_ADJ_0013EV = "IMPORT_DIST_TAF_FC_ADJ_0013EV";
            internal const string IEF_SUPPLIED_0013ET = "IEF_SUPPLIED_0013ET";
            internal const string TOTAL_CURRENCY_0013AS = "TOTAL_CURRENCY_0013AS";
            internal const string TOTAL_CURRENCY_0013 = "TOTAL_CURRENCY_0013";
            internal const string TOTAL_CURRENCY_0013XX = "TOTAL_CURRENCY_0013XX";
            internal const string IMPORT_DIST_GA_FC_ADJ_0014EV = "IMPORT_DIST_GA_FC_ADJ_0014EV";
            internal const string IEF_SUPPLIED_0014ET = "IEF_SUPPLIED_0014ET";
            internal const string TOTAL_CURRENCY_0014AS = "TOTAL_CURRENCY_0014AS";
            internal const string TOTAL_CURRENCY_0014 = "TOTAL_CURRENCY_0014";
            internal const string TOTAL_CURRENCY_0014XX = "TOTAL_CURRENCY_0014XX";
            internal const string IMPORT_DISB_PT_WAR_0015EV = "IMPORT_DISB_PT_WAR_0015EV";
            internal const string IEF_SUPPLIED_0015ET = "IEF_SUPPLIED_0015ET";
            internal const string TOTAL_CURRENCY_0015AS = "TOTAL_CURRENCY_0015AS";
            internal const string TOTAL_CURRENCY_0015 = "TOTAL_CURRENCY_0015";
            internal const string TOTAL_CURRENCY_0015XX = "TOTAL_CURRENCY_0015XX";
            internal const string IMPORT_DISB_NTAF_WAR_0016EV = "IMPORT_DISB_NTAF_WAR_0016EV";
            internal const string IEF_SUPPLIED_0016ET = "IEF_SUPPLIED_0016ET";
            internal const string TOTAL_CURRENCY_0016AS = "TOTAL_CURRENCY_0016AS";
            internal const string TOTAL_CURRENCY_0016 = "TOTAL_CURRENCY_0016";
            internal const string TOTAL_CURRENCY_0016XX = "TOTAL_CURRENCY_0016XX";
            internal const string IMPORT_DISB_PT_EFT_0017EV = "IMPORT_DISB_PT_EFT_0017EV";
            internal const string IEF_SUPPLIED_0017ET = "IEF_SUPPLIED_0017ET";
            internal const string TOTAL_CURRENCY_0017AS = "TOTAL_CURRENCY_0017AS";
            internal const string TOTAL_CURRENCY_0017 = "TOTAL_CURRENCY_0017";
            internal const string TOTAL_CURRENCY_0017XX = "TOTAL_CURRENCY_0017XX";
            internal const string IMPORT_DISB_NTAF_EFT_0018EV = "IMPORT_DISB_NTAF_EFT_0018EV";
            internal const string IEF_SUPPLIED_0018ET = "IEF_SUPPLIED_0018ET";
            internal const string TOTAL_CURRENCY_0018AS = "TOTAL_CURRENCY_0018AS";
            internal const string TOTAL_CURRENCY_0018 = "TOTAL_CURRENCY_0018";
            internal const string TOTAL_CURRENCY_0018XX = "TOTAL_CURRENCY_0018XX";
            internal const string IMPORT_FROM_0019EV = "IMPORT_FROM_0019EV";
            internal const string DATE_WORK_AREA_0019ET = "DATE_WORK_AREA_0019ET";
            internal const string DATE_0019AS = "DATE_0019AS";
            internal const string DATE_0019 = "DATE_0019";
            internal const string DATE_0019XX = "DATE_0019XX";
            internal const string IMPORT_TO_0020EV = "IMPORT_TO_0020EV";
            internal const string DATE_WORK_AREA_0020ET = "DATE_WORK_AREA_0020ET";
            internal const string DATE_0020AS = "DATE_0020AS";
            internal const string DATE_0020 = "DATE_0020";
            internal const string DATE_0020XX = "DATE_0020XX";
            internal const string IMPORT_REPORT_PERIOD_0021EV = "IMPORT_REPORT_PERIOD_0021EV";
            internal const string WORK_AREA_0021ET = "WORK_AREA_0021ET";
            internal const string TEXT_10_0021AS = "TEXT_10_0021AS";
            internal const string TEXT_10_0021 = "TEXT_10_0021";
            internal const string TEXT_10_0021XX = "TEXT_10_0021XX";
            internal const string IMPORT_CASH_KSDLUI_0022EV = "IMPORT_CASH_KSDLUI_0022EV";
            internal const string IEF_SUPPLIED_0022ET = "IEF_SUPPLIED_0022ET";
            internal const string TOTAL_CURRENCY_0022AS = "TOTAL_CURRENCY_0022AS";
            internal const string TOTAL_CURRENCY_0022 = "TOTAL_CURRENCY_0022";
            internal const string TOTAL_CURRENCY_0022XX = "TOTAL_CURRENCY_0022XX";
            internal const string IMPORT_CASH_CSSI_0023EV = "IMPORT_CASH_CSSI_0023EV";
            internal const string IEF_SUPPLIED_0023ET = "IEF_SUPPLIED_0023ET";
            internal const string TOTAL_CURRENCY_0023AS = "TOTAL_CURRENCY_0023AS";
            internal const string TOTAL_CURRENCY_0023 = "TOTAL_CURRENCY_0023";
            internal const string TOTAL_CURRENCY_0023XX = "TOTAL_CURRENCY_0023XX";
            internal const string EXPORT_GROUP_0001RG = "EXPORT_GROUP_0001RG";
            internal const string EXPORT_GROUP_0001MA = "EXPORT_GROUP_0001MA";
            internal const string EXPORT_GROUP_0001MX = "EXPORT_GROUP_0001MX";
            internal const string EXPORT_GROUP_0001 = "EXPORT_GROUP_0001";
            internal const string EXPORT_GROUP_0001AC = "EXPORT_GROUP_0001AC";
            internal const string S0296722226_0024EV = "S0296722226_0024EV";
            internal const string REPORT_DATA_0024ET = "REPORT_DATA_0024ET";
            internal const string LINE_TEXT_0024AS = "LINE_TEXT_0024AS";
            internal const string LINE_TEXT_0024 = "LINE_TEXT_0024";
            internal const string LINE_TEXT_0024XX = "LINE_TEXT_0024XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField WHEN_SUCCESSFUL_SF { get { return GetElementByName<ICheckField>(Names.WHEN_SUCCESSFUL_SF); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField DB_ERROR_SF { get { return GetElementByName<ICheckField>(Names.DB_ERROR_SF); } }
        public ICheckField ABORT_SHOW_DBMS_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_DBMS_MSG_SF); } }
        public ICheckField ABORT_SHOW_USER_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_USER_MSG_SF); } }
        public ICheckField RETRY_TRAN_REQUESTED_SF { get { return GetElementByName<ICheckField>(Names.RETRY_TRAN_REQUESTED_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public ICheckField ASYNC_WHEN_AVAILABLE_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_AVAILABLE_SF); } }
        public ICheckField ASYNC_WHEN_ACCEPTED_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_ACCEPTED_SF); } }
        public ICheckField ASYNC_WHEN_NOT_ACCEPTED_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_NOT_ACCEPTED_SF); } }
        public ICheckField ASYNC_WHEN_INVALID_ID_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_INVALID_ID_SF); } }
        public ICheckField ASYNC_WHEN_PENDING_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_PENDING_SF); } }
        public ICheckField ASYNC_WHEN_SERVER_ERROR_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_SERVER_ERROR_SF); } }
        public ICheckField ASYNC_WHEN_COMM_ERROR_SF { get { return GetElementByName<ICheckField>(Names.ASYNC_WHEN_COMM_ERROR_SF); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DB_DEADLOCK_TIMOUT_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_DEADLOCK_TIMOUT_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_TIRDATE_SKIP_VAL { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SKIP_VAL); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IField TX_RETRY_COUNT { get { return GetElementByName<IField>(Names.TX_RETRY_COUNT); } }
        public IField TX_USER_RETRY_ALLOWED { get { return GetElementByName<IField>(Names.TX_USER_RETRY_ALLOWED); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup PSMGR_ASYNC_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ASYNC_DATA); } }
        public IField ASYNC_MODE { get { return GetElementByName<IField>(Names.ASYNC_MODE); } }
        public ICheckField FLOW_TYPE_SYNC { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_SYNC); } }
        public ICheckField FLOW_TYPE_ASYNC { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_ASYNC); } }
        public ICheckField FLOW_TYPE_NO_RESPONSE { get { return GetElementByName<ICheckField>(Names.FLOW_TYPE_NO_RESPONSE); } }
        public IField ASYNC_FLOW_STATUS_TABLE_PTR { get { return GetElementByName<IField>(Names.ASYNC_FLOW_STATUS_TABLE_PTR); } }
        public IField ASYNC_SERVER_LOC_TABLE_PTR { get { return GetElementByName<IField>(Names.ASYNC_SERVER_LOC_TABLE_PTR); } }
        public IGroup PSMGR_HEAP { get { return GetElementByName<IGroup>(Names.PSMGR_HEAP); } }
        public IGroup HEAP_CFB { get { return GetElementByName<IGroup>(Names.HEAP_CFB); } }
        public IField HEAP_CFB_ADDR { get { return GetElementByName<IField>(Names.HEAP_CFB_ADDR); } }
        public IField HEAP_CFB_ADDR_RESV { get { return GetElementByName<IField>(Names.HEAP_CFB_ADDR_RESV); } }
        public IField HEAP_CFB_ID { get { return GetElementByName<IField>(Names.HEAP_CFB_ID); } }
        public IField HEAP_CFB_LEN { get { return GetElementByName<IField>(Names.HEAP_CFB_LEN); } }
        public IGroup HEAP_WGLOB { get { return GetElementByName<IGroup>(Names.HEAP_WGLOB); } }
        public IField HEAP_WGLOB_ADDR { get { return GetElementByName<IField>(Names.HEAP_WGLOB_ADDR); } }
        public IField HEAP_WGLOB_ADDR_RESV { get { return GetElementByName<IField>(Names.HEAP_WGLOB_ADDR_RESV); } }
        public IField HEAP_WGLOB_ID { get { return GetElementByName<IField>(Names.HEAP_WGLOB_ID); } }
        public IField HEAP_WGLOB_LEN { get { return GetElementByName<IField>(Names.HEAP_WGLOB_LEN); } }
        public IGroup IMPORT_CASH_KPC_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_CASH_KPC_0001EV); } }
        public IGroup IEF_SUPPLIED_0001ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0001ET); } }
        public IField TOTAL_CURRENCY_0001AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0001AS); } }
        public IField TOTAL_CURRENCY_0001 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0001); } }
        public IField TOTAL_CURRENCY_0001XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0001XX); } }
        public IGroup IMPORT_CASH_FDSO_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_CASH_FDSO_0002EV); } }
        public IGroup IEF_SUPPLIED_0002ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0002ET); } }
        public IField TOTAL_CURRENCY_0002AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0002AS); } }
        public IField TOTAL_CURRENCY_0002 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0002); } }
        public IField TOTAL_CURRENCY_0002XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0002XX); } }
        public IGroup IMPORT_CASH_SDSO_0003EV { get { return GetElementByName<IGroup>(Names.IMPORT_CASH_SDSO_0003EV); } }
        public IGroup IEF_SUPPLIED_0003ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0003ET); } }
        public IField TOTAL_CURRENCY_0003AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0003AS); } }
        public IField TOTAL_CURRENCY_0003 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0003); } }
        public IField TOTAL_CURRENCY_0003XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0003XX); } }
        public IGroup IMPORT_CASH_MISC_0004EV { get { return GetElementByName<IGroup>(Names.IMPORT_CASH_MISC_0004EV); } }
        public IGroup IEF_SUPPLIED_0004ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0004ET); } }
        public IField TOTAL_CURRENCY_0004AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0004AS); } }
        public IField TOTAL_CURRENCY_0004 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0004); } }
        public IField TOTAL_CURRENCY_0004XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0004XX); } }
        public IGroup IMPORT_CASH_OTHER_0005EV { get { return GetElementByName<IGroup>(Names.IMPORT_CASH_OTHER_0005EV); } }
        public IGroup IEF_SUPPLIED_0005ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0005ET); } }
        public IField TOTAL_CURRENCY_0005AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0005AS); } }
        public IField TOTAL_CURRENCY_0005 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0005); } }
        public IField TOTAL_CURRENCY_0005XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0005XX); } }
        public IGroup IMPORT_REFUND_ADVANCEME_0006EV { get { return GetElementByName<IGroup>(Names.IMPORT_REFUND_ADVANCEME_0006EV); } }
        public IGroup IEF_SUPPLIED_0006ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0006ET); } }
        public IField TOTAL_CURRENCY_0006AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0006AS); } }
        public IField TOTAL_CURRENCY_0006 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0006); } }
        public IField TOTAL_CURRENCY_0006XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0006XX); } }
        public IGroup IMPORT_DIST_TAF_0007EV { get { return GetElementByName<IGroup>(Names.IMPORT_DIST_TAF_0007EV); } }
        public IGroup IEF_SUPPLIED_0007ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0007ET); } }
        public IField TOTAL_CURRENCY_0007AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0007AS); } }
        public IField TOTAL_CURRENCY_0007 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0007); } }
        public IField TOTAL_CURRENCY_0007XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0007XX); } }
        public IGroup IMPORT_DIST_NON_TAF_0008EV { get { return GetElementByName<IGroup>(Names.IMPORT_DIST_NON_TAF_0008EV); } }
        public IGroup IEF_SUPPLIED_0008ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0008ET); } }
        public IField TOTAL_CURRENCY_0008AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0008AS); } }
        public IField TOTAL_CURRENCY_0008 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0008); } }
        public IField TOTAL_CURRENCY_0008XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0008XX); } }
        public IGroup IMPORT_DIST_TAF_FC_0009EV { get { return GetElementByName<IGroup>(Names.IMPORT_DIST_TAF_FC_0009EV); } }
        public IGroup IEF_SUPPLIED_0009ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0009ET); } }
        public IField TOTAL_CURRENCY_0009AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0009AS); } }
        public IField TOTAL_CURRENCY_0009 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0009); } }
        public IField TOTAL_CURRENCY_0009XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0009XX); } }
        public IGroup IMPORT_DIST_GA_FC_0010EV { get { return GetElementByName<IGroup>(Names.IMPORT_DIST_GA_FC_0010EV); } }
        public IGroup IEF_SUPPLIED_0010ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0010ET); } }
        public IField TOTAL_CURRENCY_0010AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0010AS); } }
        public IField TOTAL_CURRENCY_0010 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0010); } }
        public IField TOTAL_CURRENCY_0010XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0010XX); } }
        public IGroup IMPORT_DIST_TAF_ADJ_0011EV { get { return GetElementByName<IGroup>(Names.IMPORT_DIST_TAF_ADJ_0011EV); } }
        public IGroup IEF_SUPPLIED_0011ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0011ET); } }
        public IField TOTAL_CURRENCY_0011AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0011AS); } }
        public IField TOTAL_CURRENCY_0011 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0011); } }
        public IField TOTAL_CURRENCY_0011XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0011XX); } }
        public IGroup IMPORT_DIST_NON_TAF_ADJ_0012EV { get { return GetElementByName<IGroup>(Names.IMPORT_DIST_NON_TAF_ADJ_0012EV); } }
        public IGroup IEF_SUPPLIED_0012ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0012ET); } }
        public IField TOTAL_CURRENCY_0012AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0012AS); } }
        public IField TOTAL_CURRENCY_0012 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0012); } }
        public IField TOTAL_CURRENCY_0012XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0012XX); } }
        public IGroup IMPORT_DIST_TAF_FC_ADJ_0013EV { get { return GetElementByName<IGroup>(Names.IMPORT_DIST_TAF_FC_ADJ_0013EV); } }
        public IGroup IEF_SUPPLIED_0013ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0013ET); } }
        public IField TOTAL_CURRENCY_0013AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0013AS); } }
        public IField TOTAL_CURRENCY_0013 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0013); } }
        public IField TOTAL_CURRENCY_0013XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0013XX); } }
        public IGroup IMPORT_DIST_GA_FC_ADJ_0014EV { get { return GetElementByName<IGroup>(Names.IMPORT_DIST_GA_FC_ADJ_0014EV); } }
        public IGroup IEF_SUPPLIED_0014ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0014ET); } }
        public IField TOTAL_CURRENCY_0014AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0014AS); } }
        public IField TOTAL_CURRENCY_0014 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0014); } }
        public IField TOTAL_CURRENCY_0014XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0014XX); } }
        public IGroup IMPORT_DISB_PT_WAR_0015EV { get { return GetElementByName<IGroup>(Names.IMPORT_DISB_PT_WAR_0015EV); } }
        public IGroup IEF_SUPPLIED_0015ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0015ET); } }
        public IField TOTAL_CURRENCY_0015AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0015AS); } }
        public IField TOTAL_CURRENCY_0015 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0015); } }
        public IField TOTAL_CURRENCY_0015XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0015XX); } }
        public IGroup IMPORT_DISB_NTAF_WAR_0016EV { get { return GetElementByName<IGroup>(Names.IMPORT_DISB_NTAF_WAR_0016EV); } }
        public IGroup IEF_SUPPLIED_0016ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0016ET); } }
        public IField TOTAL_CURRENCY_0016AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0016AS); } }
        public IField TOTAL_CURRENCY_0016 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0016); } }
        public IField TOTAL_CURRENCY_0016XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0016XX); } }
        public IGroup IMPORT_DISB_PT_EFT_0017EV { get { return GetElementByName<IGroup>(Names.IMPORT_DISB_PT_EFT_0017EV); } }
        public IGroup IEF_SUPPLIED_0017ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0017ET); } }
        public IField TOTAL_CURRENCY_0017AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0017AS); } }
        public IField TOTAL_CURRENCY_0017 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0017); } }
        public IField TOTAL_CURRENCY_0017XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0017XX); } }
        public IGroup IMPORT_DISB_NTAF_EFT_0018EV { get { return GetElementByName<IGroup>(Names.IMPORT_DISB_NTAF_EFT_0018EV); } }
        public IGroup IEF_SUPPLIED_0018ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0018ET); } }
        public IField TOTAL_CURRENCY_0018AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0018AS); } }
        public IField TOTAL_CURRENCY_0018 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0018); } }
        public IField TOTAL_CURRENCY_0018XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0018XX); } }
        public IGroup IMPORT_FROM_0019EV { get { return GetElementByName<IGroup>(Names.IMPORT_FROM_0019EV); } }
        public IGroup DATE_WORK_AREA_0019ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0019ET); } }
        public IField DATE_0019AS { get { return GetElementByName<IField>(Names.DATE_0019AS); } }
        public IField DATE_0019 { get { return GetElementByName<IField>(Names.DATE_0019); } }
        public IField DATE_0019XX { get { return GetElementByName<IField>(Names.DATE_0019XX); } }
        public IGroup IMPORT_TO_0020EV { get { return GetElementByName<IGroup>(Names.IMPORT_TO_0020EV); } }
        public IGroup DATE_WORK_AREA_0020ET { get { return GetElementByName<IGroup>(Names.DATE_WORK_AREA_0020ET); } }
        public IField DATE_0020AS { get { return GetElementByName<IField>(Names.DATE_0020AS); } }
        public IField DATE_0020 { get { return GetElementByName<IField>(Names.DATE_0020); } }
        public IField DATE_0020XX { get { return GetElementByName<IField>(Names.DATE_0020XX); } }
        public IGroup IMPORT_REPORT_PERIOD_0021EV { get { return GetElementByName<IGroup>(Names.IMPORT_REPORT_PERIOD_0021EV); } }
        public IGroup WORK_AREA_0021ET { get { return GetElementByName<IGroup>(Names.WORK_AREA_0021ET); } }
        public IField TEXT_10_0021AS { get { return GetElementByName<IField>(Names.TEXT_10_0021AS); } }
        public IField TEXT_10_0021 { get { return GetElementByName<IField>(Names.TEXT_10_0021); } }
        public IField TEXT_10_0021XX { get { return GetElementByName<IField>(Names.TEXT_10_0021XX); } }
        public IGroup IMPORT_CASH_KSDLUI_0022EV { get { return GetElementByName<IGroup>(Names.IMPORT_CASH_KSDLUI_0022EV); } }
        public IGroup IEF_SUPPLIED_0022ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0022ET); } }
        public IField TOTAL_CURRENCY_0022AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0022AS); } }
        public IField TOTAL_CURRENCY_0022 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0022); } }
        public IField TOTAL_CURRENCY_0022XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0022XX); } }
        public IGroup IMPORT_CASH_CSSI_0023EV { get { return GetElementByName<IGroup>(Names.IMPORT_CASH_CSSI_0023EV); } }
        public IGroup IEF_SUPPLIED_0023ET { get { return GetElementByName<IGroup>(Names.IEF_SUPPLIED_0023ET); } }
        public IField TOTAL_CURRENCY_0023AS { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0023AS); } }
        public IField TOTAL_CURRENCY_0023 { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0023); } }
        public IField TOTAL_CURRENCY_0023XX { get { return GetElementByName<IField>(Names.TOTAL_CURRENCY_0023XX); } }
        public IGroup EXPORT_GROUP_0001RG { get { return GetElementByName<IGroup>(Names.EXPORT_GROUP_0001RG); } }
        public IField EXPORT_GROUP_0001MA { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001MA); } }
        public IField EXPORT_GROUP_0001MX { get { return GetElementByName<IField>(Names.EXPORT_GROUP_0001MX); } }
        public IArrayElementAccessor<IGroup> EXPORT_GROUP_0001 { get { return GetArrayElementAccessor<IGroup>(Names.EXPORT_GROUP_0001); } }
        public IArrayElementAccessor<IField> EXPORT_GROUP_0001AC { get { return GetArrayElementAccessor<IField>(Names.EXPORT_GROUP_0001AC); } }
        public IArrayElementAccessor<IGroup> S0296722226_0024EV { get { return GetArrayElementAccessor<IGroup>(Names.S0296722226_0024EV); } }
        public IArrayElementAccessor<IGroup> REPORT_DATA_0024ET { get { return GetArrayElementAccessor<IGroup>(Names.REPORT_DATA_0024ET); } }
        public IArrayElementAccessor<IField> LINE_TEXT_0024AS { get { return GetArrayElementAccessor<IField>(Names.LINE_TEXT_0024AS); } }
        public IArrayElementAccessor<IField> LINE_TEXT_0024 { get { return GetArrayElementAccessor<IField>(Names.LINE_TEXT_0024); } }
        public IArrayElementAccessor<IField> LINE_TEXT_0024XX { get { return GetArrayElementAccessor<IField>(Names.LINE_TEXT_0024XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.WHEN_SUCCESSFUL_SF, SPACES)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.DB_ERROR_SF, "DB")
                       .NewCheckField(Names.ABORT_SHOW_DBMS_MSG_SF, "AB")
                       .NewCheckField(Names.ABORT_SHOW_USER_MSG_SF, "AM")
                       .NewCheckField(Names.RETRY_TRAN_REQUESTED_SF, "RT")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       .NewCheckField(Names.ASYNC_WHEN_AVAILABLE_SF, SPACES)
                       .NewCheckField(Names.ASYNC_WHEN_ACCEPTED_SF, SPACES)
                       .NewCheckField(Names.ASYNC_WHEN_NOT_ACCEPTED_SF, "NA")
                       .NewCheckField(Names.ASYNC_WHEN_INVALID_ID_SF, "II")
                       .NewCheckField(Names.ASYNC_WHEN_PENDING_SF, "PE")
                       .NewCheckField(Names.ASYNC_WHEN_SERVER_ERROR_SF, "SS")
                       .NewCheckField(Names.ASYNC_WHEN_COMM_ERROR_SF, "CE")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DB_DEADLOCK_TIMOUT_FL_LS, "DT")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d75", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d75) =>
                   {
                       FILLER_d75.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d75.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d75.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_SKIP_VAL, FieldType.String, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(95, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 8);
               });
               GLOBDATA.CreateNewField(Names.TX_RETRY_COUNT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_USER_RETRY_ALLOWED, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(3, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ASYNC_DATA, (PSMGR_ASYNC_DATA) =>
               {
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_MODE, FieldType.String, 1)
                       .NewCheckField(Names.FLOW_TYPE_SYNC, SPACE)
                       .NewCheckField(Names.FLOW_TYPE_ASYNC, "A")
                       .NewCheckField(Names.FLOW_TYPE_NO_RESPONSE, "N")
                       ;
                   PSMGR_ASYNC_DATA.CreateNewFillerField(1, FillWith.Hashes);
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_FLOW_STATUS_TABLE_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_ASYNC_DATA.CreateNewField(Names.ASYNC_SERVER_LOC_TABLE_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_HEAP, (PSMGR_HEAP) =>
               {
                   PSMGR_HEAP.CreateNewGroup(Names.HEAP_CFB, (HEAP_CFB) =>
                   {
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_ADDR, FieldType.ReferencePointer, 4);
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_ADDR_RESV, FieldType.SignedNumeric, 9);
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_ID, FieldType.SignedNumeric, 9);
                       HEAP_CFB.CreateNewField(Names.HEAP_CFB_LEN, FieldType.SignedNumeric, 9);
                   });
                   PSMGR_HEAP.CreateNewGroup(Names.HEAP_WGLOB, (HEAP_WGLOB) =>
                   {
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_ADDR, FieldType.ReferencePointer, 4);
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_ADDR_RESV, FieldType.SignedNumeric, 9);
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_ID, FieldType.SignedNumeric, 9);
                       HEAP_WGLOB.CreateNewField(Names.HEAP_WGLOB_LEN, FieldType.SignedNumeric, 9);
                   });
               });
               GLOBDATA.CreateNewFillerField(157, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_CASH_KPC_0001EV, (IMPORT_CASH_KPC_0001EV) =>
           {
               IMPORT_CASH_KPC_0001EV.CreateNewGroup(Names.IEF_SUPPLIED_0001ET, (IEF_SUPPLIED_0001ET) =>
               {
                   IEF_SUPPLIED_0001ET.CreateNewField(Names.TOTAL_CURRENCY_0001AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0001_local = IEF_SUPPLIED_0001ET.CreateNewField(Names.TOTAL_CURRENCY_0001, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0001ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0001XX, FieldType.String, TOTAL_CURRENCY_0001_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_CASH_FDSO_0002EV, (IMPORT_CASH_FDSO_0002EV) =>
           {
               IMPORT_CASH_FDSO_0002EV.CreateNewGroup(Names.IEF_SUPPLIED_0002ET, (IEF_SUPPLIED_0002ET) =>
               {
                   IEF_SUPPLIED_0002ET.CreateNewField(Names.TOTAL_CURRENCY_0002AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0002_local = IEF_SUPPLIED_0002ET.CreateNewField(Names.TOTAL_CURRENCY_0002, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0002ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0002XX, FieldType.String, TOTAL_CURRENCY_0002_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_CASH_SDSO_0003EV, (IMPORT_CASH_SDSO_0003EV) =>
           {
               IMPORT_CASH_SDSO_0003EV.CreateNewGroup(Names.IEF_SUPPLIED_0003ET, (IEF_SUPPLIED_0003ET) =>
               {
                   IEF_SUPPLIED_0003ET.CreateNewField(Names.TOTAL_CURRENCY_0003AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0003_local = IEF_SUPPLIED_0003ET.CreateNewField(Names.TOTAL_CURRENCY_0003, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0003ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0003XX, FieldType.String, TOTAL_CURRENCY_0003_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_CASH_MISC_0004EV, (IMPORT_CASH_MISC_0004EV) =>
           {
               IMPORT_CASH_MISC_0004EV.CreateNewGroup(Names.IEF_SUPPLIED_0004ET, (IEF_SUPPLIED_0004ET) =>
               {
                   IEF_SUPPLIED_0004ET.CreateNewField(Names.TOTAL_CURRENCY_0004AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0004_local = IEF_SUPPLIED_0004ET.CreateNewField(Names.TOTAL_CURRENCY_0004, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0004ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0004XX, FieldType.String, TOTAL_CURRENCY_0004_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_CASH_OTHER_0005EV, (IMPORT_CASH_OTHER_0005EV) =>
           {
               IMPORT_CASH_OTHER_0005EV.CreateNewGroup(Names.IEF_SUPPLIED_0005ET, (IEF_SUPPLIED_0005ET) =>
               {
                   IEF_SUPPLIED_0005ET.CreateNewField(Names.TOTAL_CURRENCY_0005AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0005_local = IEF_SUPPLIED_0005ET.CreateNewField(Names.TOTAL_CURRENCY_0005, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0005ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0005XX, FieldType.String, TOTAL_CURRENCY_0005_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_REFUND_ADVANCEME_0006EV, (IMPORT_REFUND_ADVANCEME_0006EV) =>
           {
               IMPORT_REFUND_ADVANCEME_0006EV.CreateNewGroup(Names.IEF_SUPPLIED_0006ET, (IEF_SUPPLIED_0006ET) =>
               {
                   IEF_SUPPLIED_0006ET.CreateNewField(Names.TOTAL_CURRENCY_0006AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0006_local = IEF_SUPPLIED_0006ET.CreateNewField(Names.TOTAL_CURRENCY_0006, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0006ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0006XX, FieldType.String, TOTAL_CURRENCY_0006_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DIST_TAF_0007EV, (IMPORT_DIST_TAF_0007EV) =>
           {
               IMPORT_DIST_TAF_0007EV.CreateNewGroup(Names.IEF_SUPPLIED_0007ET, (IEF_SUPPLIED_0007ET) =>
               {
                   IEF_SUPPLIED_0007ET.CreateNewField(Names.TOTAL_CURRENCY_0007AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0007_local = IEF_SUPPLIED_0007ET.CreateNewField(Names.TOTAL_CURRENCY_0007, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0007ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0007XX, FieldType.String, TOTAL_CURRENCY_0007_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DIST_NON_TAF_0008EV, (IMPORT_DIST_NON_TAF_0008EV) =>
           {
               IMPORT_DIST_NON_TAF_0008EV.CreateNewGroup(Names.IEF_SUPPLIED_0008ET, (IEF_SUPPLIED_0008ET) =>
               {
                   IEF_SUPPLIED_0008ET.CreateNewField(Names.TOTAL_CURRENCY_0008AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0008_local = IEF_SUPPLIED_0008ET.CreateNewField(Names.TOTAL_CURRENCY_0008, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0008ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0008XX, FieldType.String, TOTAL_CURRENCY_0008_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DIST_TAF_FC_0009EV, (IMPORT_DIST_TAF_FC_0009EV) =>
           {
               IMPORT_DIST_TAF_FC_0009EV.CreateNewGroup(Names.IEF_SUPPLIED_0009ET, (IEF_SUPPLIED_0009ET) =>
               {
                   IEF_SUPPLIED_0009ET.CreateNewField(Names.TOTAL_CURRENCY_0009AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0009_local = IEF_SUPPLIED_0009ET.CreateNewField(Names.TOTAL_CURRENCY_0009, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0009ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0009XX, FieldType.String, TOTAL_CURRENCY_0009_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DIST_GA_FC_0010EV, (IMPORT_DIST_GA_FC_0010EV) =>
           {
               IMPORT_DIST_GA_FC_0010EV.CreateNewGroup(Names.IEF_SUPPLIED_0010ET, (IEF_SUPPLIED_0010ET) =>
               {
                   IEF_SUPPLIED_0010ET.CreateNewField(Names.TOTAL_CURRENCY_0010AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0010_local = IEF_SUPPLIED_0010ET.CreateNewField(Names.TOTAL_CURRENCY_0010, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0010ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0010XX, FieldType.String, TOTAL_CURRENCY_0010_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DIST_TAF_ADJ_0011EV, (IMPORT_DIST_TAF_ADJ_0011EV) =>
           {
               IMPORT_DIST_TAF_ADJ_0011EV.CreateNewGroup(Names.IEF_SUPPLIED_0011ET, (IEF_SUPPLIED_0011ET) =>
               {
                   IEF_SUPPLIED_0011ET.CreateNewField(Names.TOTAL_CURRENCY_0011AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0011_local = IEF_SUPPLIED_0011ET.CreateNewField(Names.TOTAL_CURRENCY_0011, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0011ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0011XX, FieldType.String, TOTAL_CURRENCY_0011_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DIST_NON_TAF_ADJ_0012EV, (IMPORT_DIST_NON_TAF_ADJ_0012EV) =>
           {
               IMPORT_DIST_NON_TAF_ADJ_0012EV.CreateNewGroup(Names.IEF_SUPPLIED_0012ET, (IEF_SUPPLIED_0012ET) =>
               {
                   IEF_SUPPLIED_0012ET.CreateNewField(Names.TOTAL_CURRENCY_0012AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0012_local = IEF_SUPPLIED_0012ET.CreateNewField(Names.TOTAL_CURRENCY_0012, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0012ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0012XX, FieldType.String, TOTAL_CURRENCY_0012_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DIST_TAF_FC_ADJ_0013EV, (IMPORT_DIST_TAF_FC_ADJ_0013EV) =>
           {
               IMPORT_DIST_TAF_FC_ADJ_0013EV.CreateNewGroup(Names.IEF_SUPPLIED_0013ET, (IEF_SUPPLIED_0013ET) =>
               {
                   IEF_SUPPLIED_0013ET.CreateNewField(Names.TOTAL_CURRENCY_0013AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0013_local = IEF_SUPPLIED_0013ET.CreateNewField(Names.TOTAL_CURRENCY_0013, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0013ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0013XX, FieldType.String, TOTAL_CURRENCY_0013_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DIST_GA_FC_ADJ_0014EV, (IMPORT_DIST_GA_FC_ADJ_0014EV) =>
           {
               IMPORT_DIST_GA_FC_ADJ_0014EV.CreateNewGroup(Names.IEF_SUPPLIED_0014ET, (IEF_SUPPLIED_0014ET) =>
               {
                   IEF_SUPPLIED_0014ET.CreateNewField(Names.TOTAL_CURRENCY_0014AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0014_local = IEF_SUPPLIED_0014ET.CreateNewField(Names.TOTAL_CURRENCY_0014, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0014ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0014XX, FieldType.String, TOTAL_CURRENCY_0014_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DISB_PT_WAR_0015EV, (IMPORT_DISB_PT_WAR_0015EV) =>
           {
               IMPORT_DISB_PT_WAR_0015EV.CreateNewGroup(Names.IEF_SUPPLIED_0015ET, (IEF_SUPPLIED_0015ET) =>
               {
                   IEF_SUPPLIED_0015ET.CreateNewField(Names.TOTAL_CURRENCY_0015AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0015_local = IEF_SUPPLIED_0015ET.CreateNewField(Names.TOTAL_CURRENCY_0015, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0015ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0015XX, FieldType.String, TOTAL_CURRENCY_0015_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DISB_NTAF_WAR_0016EV, (IMPORT_DISB_NTAF_WAR_0016EV) =>
           {
               IMPORT_DISB_NTAF_WAR_0016EV.CreateNewGroup(Names.IEF_SUPPLIED_0016ET, (IEF_SUPPLIED_0016ET) =>
               {
                   IEF_SUPPLIED_0016ET.CreateNewField(Names.TOTAL_CURRENCY_0016AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0016_local = IEF_SUPPLIED_0016ET.CreateNewField(Names.TOTAL_CURRENCY_0016, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0016ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0016XX, FieldType.String, TOTAL_CURRENCY_0016_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DISB_PT_EFT_0017EV, (IMPORT_DISB_PT_EFT_0017EV) =>
           {
               IMPORT_DISB_PT_EFT_0017EV.CreateNewGroup(Names.IEF_SUPPLIED_0017ET, (IEF_SUPPLIED_0017ET) =>
               {
                   IEF_SUPPLIED_0017ET.CreateNewField(Names.TOTAL_CURRENCY_0017AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0017_local = IEF_SUPPLIED_0017ET.CreateNewField(Names.TOTAL_CURRENCY_0017, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0017ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0017XX, FieldType.String, TOTAL_CURRENCY_0017_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_DISB_NTAF_EFT_0018EV, (IMPORT_DISB_NTAF_EFT_0018EV) =>
           {
               IMPORT_DISB_NTAF_EFT_0018EV.CreateNewGroup(Names.IEF_SUPPLIED_0018ET, (IEF_SUPPLIED_0018ET) =>
               {
                   IEF_SUPPLIED_0018ET.CreateNewField(Names.TOTAL_CURRENCY_0018AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0018_local = IEF_SUPPLIED_0018ET.CreateNewField(Names.TOTAL_CURRENCY_0018, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0018ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0018XX, FieldType.String, TOTAL_CURRENCY_0018_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_FROM_0019EV, (IMPORT_FROM_0019EV) =>
           {
               IMPORT_FROM_0019EV.CreateNewGroup(Names.DATE_WORK_AREA_0019ET, (DATE_WORK_AREA_0019ET) =>
               {
                   DATE_WORK_AREA_0019ET.CreateNewField(Names.DATE_0019AS, FieldType.String, 1);

                   IField DATE_0019_local = DATE_WORK_AREA_0019ET.CreateNewField(Names.DATE_0019, FieldType.SignedNumeric, 8);
                   DATE_WORK_AREA_0019ET.CreateNewFieldRedefine(Names.DATE_0019XX, FieldType.String, DATE_0019_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_TO_0020EV, (IMPORT_TO_0020EV) =>
           {
               IMPORT_TO_0020EV.CreateNewGroup(Names.DATE_WORK_AREA_0020ET, (DATE_WORK_AREA_0020ET) =>
               {
                   DATE_WORK_AREA_0020ET.CreateNewField(Names.DATE_0020AS, FieldType.String, 1);

                   IField DATE_0020_local = DATE_WORK_AREA_0020ET.CreateNewField(Names.DATE_0020, FieldType.SignedNumeric, 8);
                   DATE_WORK_AREA_0020ET.CreateNewFieldRedefine(Names.DATE_0020XX, FieldType.String, DATE_0020_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_REPORT_PERIOD_0021EV, (IMPORT_REPORT_PERIOD_0021EV) =>
           {
               IMPORT_REPORT_PERIOD_0021EV.CreateNewGroup(Names.WORK_AREA_0021ET, (WORK_AREA_0021ET) =>
               {
                   WORK_AREA_0021ET.CreateNewField(Names.TEXT_10_0021AS, FieldType.String, 1);

                   IField TEXT_10_0021_local = WORK_AREA_0021ET.CreateNewField(Names.TEXT_10_0021, FieldType.String, 10);
                   WORK_AREA_0021ET.CreateNewFieldRedefine(Names.TEXT_10_0021XX, FieldType.String, TEXT_10_0021_local, 10);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_CASH_KSDLUI_0022EV, (IMPORT_CASH_KSDLUI_0022EV) =>
           {
               IMPORT_CASH_KSDLUI_0022EV.CreateNewGroup(Names.IEF_SUPPLIED_0022ET, (IEF_SUPPLIED_0022ET) =>
               {
                   IEF_SUPPLIED_0022ET.CreateNewField(Names.TOTAL_CURRENCY_0022AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0022_local = IEF_SUPPLIED_0022ET.CreateNewField(Names.TOTAL_CURRENCY_0022, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0022ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0022XX, FieldType.String, TOTAL_CURRENCY_0022_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_CASH_CSSI_0023EV, (IMPORT_CASH_CSSI_0023EV) =>
           {
               IMPORT_CASH_CSSI_0023EV.CreateNewGroup(Names.IEF_SUPPLIED_0023ET, (IEF_SUPPLIED_0023ET) =>
               {
                   IEF_SUPPLIED_0023ET.CreateNewField(Names.TOTAL_CURRENCY_0023AS, FieldType.String, 1);

                   IField TOTAL_CURRENCY_0023_local = IEF_SUPPLIED_0023ET.CreateNewField(Names.TOTAL_CURRENCY_0023, FieldType.SignedNumeric, 15, null, 2);
                   IEF_SUPPLIED_0023ET.CreateNewFieldRedefine(Names.TOTAL_CURRENCY_0023XX, FieldType.String, TOTAL_CURRENCY_0023_local, 15);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_GROUP_0001RG, (EXPORT_GROUP_0001RG) =>
           {

               IField EXPORT_GROUP_0001MA_local = EXPORT_GROUP_0001RG.CreateNewField(Names.EXPORT_GROUP_0001MA, FieldType.SignedNumeric, 4);
               EXPORT_GROUP_0001RG.CreateNewFieldRedefine(Names.EXPORT_GROUP_0001MX, FieldType.String, EXPORT_GROUP_0001MA_local, 4);
               EXPORT_GROUP_0001RG.CreateNewGroupArray(Names.EXPORT_GROUP_0001, 20, (EXPORT_GROUP_0001) =>
               {
                   EXPORT_GROUP_0001.CreateNewField(Names.EXPORT_GROUP_0001AC, FieldType.String, 1);
                   EXPORT_GROUP_0001.CreateNewGroup(Names.S0296722226_0024EV, (S0296722226_0024EV) =>
                   {
                       S0296722226_0024EV.CreateNewGroup(Names.REPORT_DATA_0024ET, (REPORT_DATA_0024ET) =>
                       {
                           REPORT_DATA_0024ET.CreateNewField(Names.LINE_TEXT_0024AS, FieldType.String, 1);

                           IField LINE_TEXT_0024_local = REPORT_DATA_0024ET.CreateNewField(Names.LINE_TEXT_0024, FieldType.String, 132);
                           REPORT_DATA_0024ET.CreateNewFieldRedefine(Names.LINE_TEXT_0024XX, FieldType.String, LINE_TEXT_0024_local, 132);
                       });
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(GLOBDATA, args, 2);
            SetPassedParm(IMPORT_CASH_KPC_0001EV, args, 3);
            SetPassedParm(IMPORT_CASH_FDSO_0002EV, args, 4);
            SetPassedParm(IMPORT_CASH_SDSO_0003EV, args, 5);
            SetPassedParm(IMPORT_CASH_MISC_0004EV, args, 6);
            SetPassedParm(IMPORT_CASH_OTHER_0005EV, args, 7);
            SetPassedParm(IMPORT_REFUND_ADVANCEME_0006EV, args, 8);
            SetPassedParm(IMPORT_DIST_TAF_0007EV, args, 9);
            SetPassedParm(IMPORT_DIST_NON_TAF_0008EV, args, 10);
            SetPassedParm(IMPORT_DIST_TAF_FC_0009EV, args, 11);
            SetPassedParm(IMPORT_DIST_GA_FC_0010EV, args, 12);
            SetPassedParm(IMPORT_DIST_TAF_ADJ_0011EV, args, 13);
            SetPassedParm(IMPORT_DIST_NON_TAF_ADJ_0012EV, args, 14);
            SetPassedParm(IMPORT_DIST_TAF_FC_ADJ_0013EV, args, 15);
            SetPassedParm(IMPORT_DIST_GA_FC_ADJ_0014EV, args, 16);
            SetPassedParm(IMPORT_DISB_PT_WAR_0015EV, args, 17);
            SetPassedParm(IMPORT_DISB_NTAF_WAR_0016EV, args, 18);
            SetPassedParm(IMPORT_DISB_PT_EFT_0017EV, args, 19);
            SetPassedParm(IMPORT_DISB_NTAF_EFT_0018EV, args, 20);
            SetPassedParm(IMPORT_FROM_0019EV, args, 21);
            SetPassedParm(IMPORT_TO_0020EV, args, 22);
            SetPassedParm(IMPORT_REPORT_PERIOD_0021EV, args, 23);
            SetPassedParm(IMPORT_CASH_KSDLUI_0022EV, args, 24);
            SetPassedParm(IMPORT_CASH_CSSI_0023EV, args, 25);
            SetPassedParm(EXPORT_GROUP_0001RG, args, 26);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(GLOBDATA, args, 2);
            SetReturnParm(IMPORT_CASH_KPC_0001EV, args, 3);
            SetReturnParm(IMPORT_CASH_FDSO_0002EV, args, 4);
            SetReturnParm(IMPORT_CASH_SDSO_0003EV, args, 5);
            SetReturnParm(IMPORT_CASH_MISC_0004EV, args, 6);
            SetReturnParm(IMPORT_CASH_OTHER_0005EV, args, 7);
            SetReturnParm(IMPORT_REFUND_ADVANCEME_0006EV, args, 8);
            SetReturnParm(IMPORT_DIST_TAF_0007EV, args, 9);
            SetReturnParm(IMPORT_DIST_NON_TAF_0008EV, args, 10);
            SetReturnParm(IMPORT_DIST_TAF_FC_0009EV, args, 11);
            SetReturnParm(IMPORT_DIST_GA_FC_0010EV, args, 12);
            SetReturnParm(IMPORT_DIST_TAF_ADJ_0011EV, args, 13);
            SetReturnParm(IMPORT_DIST_NON_TAF_ADJ_0012EV, args, 14);
            SetReturnParm(IMPORT_DIST_TAF_FC_ADJ_0013EV, args, 15);
            SetReturnParm(IMPORT_DIST_GA_FC_ADJ_0014EV, args, 16);
            SetReturnParm(IMPORT_DISB_PT_WAR_0015EV, args, 17);
            SetReturnParm(IMPORT_DISB_NTAF_WAR_0016EV, args, 18);
            SetReturnParm(IMPORT_DISB_PT_EFT_0017EV, args, 19);
            SetReturnParm(IMPORT_DISB_NTAF_EFT_0018EV, args, 20);
            SetReturnParm(IMPORT_FROM_0019EV, args, 21);
            SetReturnParm(IMPORT_TO_0020EV, args, 22);
            SetReturnParm(IMPORT_REPORT_PERIOD_0021EV, args, 23);
            SetReturnParm(IMPORT_CASH_KSDLUI_0022EV, args, 24);
            SetReturnParm(IMPORT_CASH_CSSI_0023EV, args, 25);
            SetReturnParm(EXPORT_GROUP_0001RG, args, 26);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEX0045 : EABBase
    {

        #region Public Constructors
        public SWEX0045()
            : base()
        {
            this.ProgramName.SetValue("SWEX0045");

            WS = new SWEX0045_ws();
            LS = new SWEX0045_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEX0045_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEX0045_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , GLOBDATA , IMPORT-CASH-KPC-0001EV , IMPORT-CASH-FDSO-0002EV , IMPORT-CASH-SDSO-0003EV , IMPORT-CASH-MISC-0004EV , IMPORT-CASH-OTHER-0005EV , IMPORT-REFUND-ADVANCEME-0006EV , IMPORT-DIST-TAF-0007EV , IMPORT-DIST-NON-TAF-0008EV , IMPORT-DIST-TAF-FC-0009EV , IMPORT-DIST-GA-FC-0010EV , IMPORT-DIST-TAF-ADJ-0011EV , IMPORT-DIST-NON-TAF-ADJ-0012EV , IMPORT-DIST-TAF-FC-ADJ-0013EV , IMPORT-DIST-GA-FC-ADJ-0014EV , IMPORT-DISB-PT-WAR-0015EV , IMPORT-DISB-NTAF-WAR-0016EV , IMPORT-DISB-PT-EFT-0017EV , IMPORT-DISB-NTAF-EFT-0018EV , IMPORT-FROM-0019EV , IMPORT-TO-0020EV , IMPORT-REPORT-PERIOD-0021EV , IMPORT-CASH-KSDLUI-0022EV , IMPORT-CASH-CSSI-0023EV , EXPORT-GROUP-0001RG.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_0296722021(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_0296722021
        /// </summary>
        private void M_MAIN_0296722021(string returnMethod = "")
        {
            M_PARA_0296722021_INIT("M_PARA_0296722021_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-0296722021-INIT THRU PARA-0296722021-INIT-EXIT
            M_PARA_0296722021("M_PARA_0296722021_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-0296722021 THRU PARA-0296722021-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_0296722021
        /// </summary>
        private void M_PARA_0296722021(string returnMethod = "")
        {
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            //COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            //COMMENT:  REPORT LINE 1
            WS.WS_LINE_TEXT_1A.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO WS-LINE-TEXT-1A
            WS.WS_TO_DATE_WORK.SetValue(LS.DATE_0020XX);                                                        //COBOL==> MOVE DATE-0020XX TO WS-TO-DATE-WORK
            WS.WS_FROM_DATE_WORK.SetValue(LS.DATE_0019XX);                                                      //COBOL==> MOVE DATE-0019XX TO WS-FROM-DATE-WORK
                                                                                                                // EvaluateList !LS.TEXT_10_0021!                                                                   //COBOL==> EVALUATE TEXT-10-0021
            if ((LS.TEXT_10_0021.IsSpaces()))                                                                   //COBOL==> WHEN SPACES
            {
                WS.WS_DAY.SetValue(WS.WS_FROM_DAYW);                                                                //COBOL==> MOVE WS-FROM-DAYW TO WS-DAY
                WS.WS_INDEX.SetValue(WS.WS_FROM_MONTHW);                                                            //COBOL==> SET WS-INDEX TO WS-FROM-MONTHW
                WS.WS_LINE_TEXT_1A.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize("FROM "), StringUtils.DelimitedByString("#", WS.WS_MONTHS[WS.WS_INDEX.AsInt()].AsString()), StringUtils.DelimitedBySize(WS.WS_DAY.AsString(), ", ", WS.WS_FROM_YEARW.AsString(), " #")));  //COBOL==> STRING 'FROM ' DELIMITED BY SIZE WS-MONTHS ( WS-INDEX ) DELIMITED BY '#' WS-DAY ', ' WS-FROM-YEARW ' #' DELIMITED BY SIZE INTO WS-LINE-TEXT-1A
                WS.WS_INDEX.SetValue(WS.WS_TO_MONTHW);                                                              //COBOL==> SET WS-INDEX TO WS-TO-MONTHW
                WS.WS_DAY.SetValue(WS.WS_TO_DAYW);                                                                  //COBOL==> MOVE WS-TO-DAYW TO WS-DAY
                WS.WS_LINE_TEXT_1A.SetValue(StringUtils.Stringify(StringUtils.DelimitedByString("#", WS.WS_LINE_TEXT_1A.AsString()), StringUtils.DelimitedBySize(" TO "), StringUtils.DelimitedByString("#", WS.WS_MONTHS[WS.WS_INDEX.AsInt()].AsString()), StringUtils.DelimitedBySize(WS.WS_DAY.AsString(), ", ", WS.WS_TO_YEARW.AsString())));  //COBOL==> STRING WS-LINE-TEXT-1A DELIMITED BY '#' ' TO ' DELIMITED BY SIZE WS-MONTHS ( WS-INDEX ) DELIMITED BY '#' WS-DAY ', ' WS-TO-YEARW DELIMITED BY SIZE INTO WS-LINE-TEXT-1A
            }                                                                                                //COBOL==> WHEN 'YEARTODATE'
            else
            if ((LS.TEXT_10_0021.IsEqualTo("YEARTODATE")))
            {
                WS.WS_DAY.SetValue(WS.WS_FROM_DAYW);                                                                //COBOL==> MOVE WS-FROM-DAYW TO WS-DAY
                WS.WS_INDEX.SetValue(WS.WS_FROM_MONTHW);                                                            //COBOL==> SET WS-INDEX TO WS-FROM-MONTHW
                WS.WS_LINE_TEXT_1A.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize("FROM "), StringUtils.DelimitedByString("#", WS.WS_MONTHS[WS.WS_INDEX.AsInt()].AsString()), StringUtils.DelimitedBySize(WS.WS_DAY.AsString(), ", ", WS.WS_FROM_YEARW.AsString(), " #")));  //COBOL==> STRING 'FROM ' DELIMITED BY SIZE WS-MONTHS ( WS-INDEX ) DELIMITED BY '#' WS-DAY ', ' WS-FROM-YEARW ' #' DELIMITED BY SIZE INTO WS-LINE-TEXT-1A
                WS.WS_INDEX.SetValue(WS.WS_TO_MONTHW);                                                              //COBOL==> SET WS-INDEX TO WS-TO-MONTHW
                WS.WS_DAY.SetValue(WS.WS_TO_DAYW);                                                                  //COBOL==> MOVE WS-TO-DAYW TO WS-DAY
                WS.WS_LINE_TEXT_1A.SetValue(StringUtils.Stringify(StringUtils.DelimitedByString("#", WS.WS_LINE_TEXT_1A.AsString()), StringUtils.DelimitedBySize(" TO "), StringUtils.DelimitedByString("#", WS.WS_MONTHS[WS.WS_INDEX.AsInt()].AsString()), StringUtils.DelimitedBySize(WS.WS_DAY.AsString(), ", ", WS.WS_TO_YEARW.AsString())));  //COBOL==> STRING WS-LINE-TEXT-1A DELIMITED BY '#' ' TO ' DELIMITED BY SIZE WS-MONTHS ( WS-INDEX ) DELIMITED BY '#' WS-DAY ', ' WS-TO-YEARW DELIMITED BY SIZE INTO WS-LINE-TEXT-1A
            }                                                                                                //COBOL==> WHEN 'QUARTER'
            else
            if ((LS.TEXT_10_0021.IsEqualTo("QUARTER")))
            {
                WS.WS_INDEX.SetValue(WS.WS_TO_MONTHW);                                                              //COBOL==> SET WS-INDEX TO WS-TO-MONTHW
                WS.WS_DAY.SetValue(WS.WS_TO_DAYW);                                                                  //COBOL==> MOVE WS-TO-DAYW TO WS-DAY
                WS.WS_LINE_TEXT_1.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize("QUARTER ENDING "), StringUtils.DelimitedByString("#", WS.WS_MONTHS[WS.WS_INDEX.AsInt()].AsString()), StringUtils.DelimitedBySize(WS.WS_DAY.AsString(), ", ", WS.WS_TO_YEARW.AsString())));  //COBOL==> STRING 'QUARTER ENDING ' DELIMITED BY SIZE WS-MONTHS ( WS-INDEX ) DELIMITED BY '#' WS-DAY ', ' WS-TO-YEARW DELIMITED BY SIZE INTO WS-LINE-TEXT-1
            }                                                                                                //COBOL==> WHEN 'MONTH'
            else
            if ((LS.TEXT_10_0021.IsEqualTo("MONTH")))
            {
                WS.WS_INDEX.SetValue(WS.WS_TO_MONTHW);                                                              //COBOL==> SET WS-INDEX TO WS-TO-MONTHW
                WS.WS_DAY.SetValue(WS.WS_TO_DAYW);                                                                  //COBOL==> MOVE WS-TO-DAYW TO WS-DAY
                WS.WS_LINE_TEXT_1.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize("MONTH ENDING "), StringUtils.DelimitedByString("#", WS.WS_MONTHS[WS.WS_INDEX.AsInt()].AsString()), StringUtils.DelimitedBySize(WS.WS_DAY.AsString(), ", ", WS.WS_TO_YEARW.AsString())));  //COBOL==> STRING 'MONTH ENDING ' DELIMITED BY SIZE WS-MONTHS ( WS-INDEX ) DELIMITED BY '#' WS-DAY ', ' WS-TO-YEARW DELIMITED BY SIZE INTO WS-LINE-TEXT-1
            }                                                                                                //COBOL==> WHEN 'YEAR'
            else
            if ((LS.TEXT_10_0021.IsEqualTo("YEAR")))
            {
                WS.WS_INDEX.SetValue(WS.WS_TO_MONTHW);                                                              //COBOL==> SET WS-INDEX TO WS-TO-MONTHW
                WS.WS_DAY.SetValue(WS.WS_TO_DAYW);                                                                  //COBOL==> MOVE WS-TO-DAYW TO WS-DAY
                WS.WS_LINE_TEXT_1.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize("YEAR ENDING "), StringUtils.DelimitedByString("#", WS.WS_MONTHS[WS.WS_INDEX.AsInt()].AsString()), StringUtils.DelimitedBySize(WS.WS_DAY.AsString(), ", ", WS.WS_TO_YEARW.AsString())));  //COBOL==> STRING 'YEAR ENDING ' DELIMITED BY SIZE WS-MONTHS ( WS-INDEX ) DELIMITED BY '#' WS-DAY ', ' WS-TO-YEARW DELIMITED BY SIZE INTO WS-LINE-TEXT-1
            }                                                                                                   //COBOL==> END-EVALUATE
                                                                                                                //COMMENT:  REPORT LINE 2
            WS.WS_CASH_KPC.SetValue(LS.TOTAL_CURRENCY_0001);                                                    //COBOL==> MOVE TOTAL-CURRENCY-0001 TO WS-CASH-KPC
                                                                                                                //COMMENT:  REPORT LINE 3
            WS.WS_CASH_FDSO.SetValue(LS.TOTAL_CURRENCY_0002);                                                   //COBOL==> MOVE TOTAL-CURRENCY-0002 TO WS-CASH-FDSO
            WS.WS_DIST_TAF.SetValue(LS.TOTAL_CURRENCY_0007);                                                    //COBOL==> MOVE TOTAL-CURRENCY-0007 TO WS-DIST-TAF
            WS.WS_DIST_TAF_ADJ.SetValue(LS.TOTAL_CURRENCY_0011);                                                //COBOL==> MOVE TOTAL-CURRENCY-0011 TO WS-DIST-TAF-ADJ
            WS.WS_DIST_TAF_TOT.SetComputeValue(WS.WS_DIST_TAF.AsDecimal() - WS.WS_DIST_TAF_ADJ.AsDecimal());    //COBOL==> COMPUTE WS-DIST-TAF-TOT = WS-DIST-TAF - WS-DIST-TAF-ADJ
            WS.WS_DISB_PT_WAR.SetValue(LS.TOTAL_CURRENCY_0015);                                                 //COBOL==> MOVE TOTAL-CURRENCY-0015 TO WS-DISB-PT-WAR
            WS.WS_DISB_PT_EFT.SetValue(LS.TOTAL_CURRENCY_0017);                                                 //COBOL==> MOVE TOTAL-CURRENCY-0017 TO WS-DISB-PT-EFT
            WS.WS_DISB_PT_TOT.SetComputeValue(WS.WS_DISB_PT_WAR.AsDecimal() + WS.WS_DISB_PT_EFT.AsDecimal());   //COBOL==> COMPUTE WS-DISB-PT-TOT = WS-DISB-PT-WAR + WS-DISB-PT-EFT
                                                                                                                //COMMENT:  REPORT LINE 4
            WS.WS_CASH_SDSO.SetValue(LS.TOTAL_CURRENCY_0003);                                                   //COBOL==> MOVE TOTAL-CURRENCY-0003 TO WS-CASH-SDSO
            WS.WS_DIST_NTAF.SetValue(LS.TOTAL_CURRENCY_0008);                                                   //COBOL==> MOVE TOTAL-CURRENCY-0008 TO WS-DIST-NTAF
            WS.WS_DIST_NTAF_ADJ.SetValue(LS.TOTAL_CURRENCY_0012);                                               //COBOL==> MOVE TOTAL-CURRENCY-0012 TO WS-DIST-NTAF-ADJ
            WS.WS_DIST_NTAF_TOT.SetComputeValue(WS.WS_DIST_NTAF.AsDecimal() - WS.WS_DIST_NTAF_ADJ.AsDecimal()); //COBOL==> COMPUTE WS-DIST-NTAF-TOT = WS-DIST-NTAF - WS-DIST-NTAF-ADJ
            WS.WS_DISB_NTAF_WAR.SetValue(LS.TOTAL_CURRENCY_0016);                                               //COBOL==> MOVE TOTAL-CURRENCY-0016 TO WS-DISB-NTAF-WAR
            WS.WS_DISB_NTAF_EFT.SetValue(LS.TOTAL_CURRENCY_0018);                                               //COBOL==> MOVE TOTAL-CURRENCY-0018 TO WS-DISB-NTAF-EFT
            WS.WS_DISB_NTAF_TOT.SetComputeValue(WS.WS_DISB_NTAF_WAR.AsDecimal() + WS.WS_DISB_NTAF_EFT.AsDecimal());  //COBOL==> COMPUTE WS-DISB-NTAF-TOT = WS-DISB-NTAF-WAR + WS-DISB-NTAF-EFT
                                                                                                                     //COMMENT:  REPORT LINE 5
            WS.WS_CASH_KSDLUI.SetValue(LS.TOTAL_CURRENCY_0022);                                                 //COBOL==> MOVE TOTAL-CURRENCY-0022 TO WS-CASH-KSDLUI
            WS.WS_DIST_TAF_FC.SetValue(LS.TOTAL_CURRENCY_0009);                                                 //COBOL==> MOVE TOTAL-CURRENCY-0009 TO WS-DIST-TAF-FC
            WS.WS_DIST_TAF_FC_ADJ.SetValue(LS.TOTAL_CURRENCY_0013);                                             //COBOL==> MOVE TOTAL-CURRENCY-0013 TO WS-DIST-TAF-FC-ADJ
            WS.WS_DIST_TAF_FC_TOT.SetComputeValue(WS.WS_DIST_TAF_FC.AsDecimal() - WS.WS_DIST_TAF_FC_ADJ.AsDecimal());  //COBOL==> COMPUTE WS-DIST-TAF-FC-TOT = WS-DIST-TAF-FC - WS-DIST-TAF-FC-ADJ
                                                                                                                       //COMMENT:  REPORT LINE 6
            WS.WS_CASH_CSSI.SetValue(LS.TOTAL_CURRENCY_0023);                                                   //COBOL==> MOVE TOTAL-CURRENCY-0023 TO WS-CASH-CSSI
            WS.WS_DIST_GA_FC.SetValue(LS.TOTAL_CURRENCY_0010);                                                  //COBOL==> MOVE TOTAL-CURRENCY-0010 TO WS-DIST-GA-FC
            WS.WS_DIST_GA_FC_ADJ.SetValue(LS.TOTAL_CURRENCY_0014);                                              //COBOL==> MOVE TOTAL-CURRENCY-0014 TO WS-DIST-GA-FC-ADJ
            WS.WS_DIST_GA_FC_TOT.SetComputeValue(WS.WS_DIST_GA_FC.AsDecimal() - WS.WS_DIST_GA_FC_ADJ.AsDecimal());  //COBOL==> COMPUTE WS-DIST-GA-FC-TOT = WS-DIST-GA-FC - WS-DIST-GA-FC-ADJ
                                                                                                                    //COMMENT:  REPORT LINE 7
            WS.WS_CASH_MISC.SetValue(LS.TOTAL_CURRENCY_0004);                                                   //COBOL==> MOVE TOTAL-CURRENCY-0004 TO WS-CASH-MISC
                                                                                                                //COMMENT:  REPORT LINE 8
            WS.WS_CASH_OTHER.SetValue(LS.TOTAL_CURRENCY_0005);                                                  //COBOL==> MOVE TOTAL-CURRENCY-0005 TO WS-CASH-OTHER
                                                                                                                //COMMENT:  REPORT LINE 9
            WS.WS_CASH_SUBTOT.SetComputeValue(((((WS.WS_CASH_KPC.AsDecimal() + WS.WS_CASH_FDSO.AsDecimal()) + WS.WS_CASH_SDSO.AsDecimal()) + WS.WS_CASH_MISC.AsDecimal()) + WS.WS_CASH_OTHER.AsDecimal()) + WS.WS_CASH_KSDLUI.AsDecimal());  //COBOL==> COMPUTE WS-CASH-SUBTOT = WS-CASH-KPC + WS-CASH-FDSO + WS-CASH-SDSO + WS-CASH-MISC + WS-CASH-OTHER + WS-CASH-KSDLUI
            WS.WS_DIST_TOTAL.SetComputeValue(((WS.WS_DIST_TAF.AsDecimal() + WS.WS_DIST_NTAF.AsDecimal()) + WS.WS_DIST_TAF_FC.AsDecimal()) + WS.WS_DIST_GA_FC.AsDecimal());  //COBOL==> COMPUTE WS-DIST-TOTAL = WS-DIST-TAF + WS-DIST-NTAF + WS-DIST-TAF-FC + WS-DIST-GA-FC
            WS.WS_DIST_TOTAL_ADJ.SetComputeValue(((WS.WS_DIST_TAF_ADJ.AsDecimal() + WS.WS_DIST_NTAF_ADJ.AsDecimal()) + WS.WS_DIST_TAF_FC_ADJ.AsDecimal()) + WS.WS_DIST_GA_FC_ADJ.AsDecimal());  //COBOL==> COMPUTE WS-DIST-TOTAL-ADJ = WS-DIST-TAF-ADJ + WS-DIST-NTAF-ADJ + WS-DIST-TAF-FC-ADJ + WS-DIST-GA-FC-ADJ
            WS.WS_DIST_TOT_TOT.SetComputeValue(WS.WS_DIST_TOTAL.AsDecimal() - WS.WS_DIST_TOTAL_ADJ.AsDecimal());  //COBOL==> COMPUTE WS-DIST-TOT-TOT = WS-DIST-TOTAL - WS-DIST-TOTAL-ADJ
            WS.WS_DISB_WAR_TOT.SetComputeValue(WS.WS_DISB_PT_WAR.AsDecimal() + WS.WS_DISB_NTAF_WAR.AsDecimal());  //COBOL==> COMPUTE WS-DISB-WAR-TOT = WS-DISB-PT-WAR + WS-DISB-NTAF-WAR
            WS.WS_DISB_EFT_TOT.SetComputeValue(WS.WS_DISB_PT_EFT.AsDecimal() + WS.WS_DISB_NTAF_EFT.AsDecimal());  //COBOL==> COMPUTE WS-DISB-EFT-TOT = WS-DISB-PT-EFT + WS-DISB-NTAF-EFT
            WS.WS_DISB_TOT_TOT.SetComputeValue(WS.WS_DISB_WAR_TOT.AsDecimal() + WS.WS_DISB_EFT_TOT.AsDecimal());  //COBOL==> COMPUTE WS-DISB-TOT-TOT = WS-DISB-WAR-TOT + WS-DISB-EFT-TOT
                                                                                                                  //COMMENT:  REPORT LINE 10
            if ((WS.WS_DIST_TOTAL_ADJ.IsEqualTo(0))
             || (WS.WS_DIST_TOTAL.IsEqualTo(0)))         //COBOL==> IF WS-DIST-TOTAL-ADJ = 0 OR WS-DIST-TOTAL = 0
            {
                WS.WT_DIST_PERCENT_ADJ.SetValueWithZeroes();                                                        //COBOL==> MOVE 0 TO WT-DIST-PERCENT-ADJ
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_DIST_PERCENT_ADJ.SetComputeValue(WS.WS_DIST_TOTAL_ADJ.AsDecimal() / WS.WS_DIST_TOTAL.AsDecimal());  //COBOL==> COMPUTE WS-DIST-PERCENT-ADJ = ( WS-DIST-TOTAL-ADJ / WS-DIST-TOTAL )
                WS.WT_DIST_PERCENT_ADJ.SetComputeRoundedValue(WS.WS_DIST_PERCENT_ADJ.AsInt() * 100);                //COBOL==> COMPUTE WT-DIST-PERCENT-ADJ ROUNDED = WS-DIST-PERCENT-ADJ * 100
            }                                                                                                   //COBOL==> END-IF
            if ((WS.WS_DIST_TOT_TOT.IsEqualTo(0))
             || (WS.WS_DIST_TOTAL.IsEqualTo(0)))           //COBOL==> IF WS-DIST-TOT-TOT = 0 OR WS-DIST-TOTAL = 0
            {
                WS.WT_DIST_PERCENT_TOT.SetValueWithZeroes();                                                        //COBOL==> MOVE 0 TO WT-DIST-PERCENT-TOT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_DIST_PERCENT_TOT.SetComputeValue(WS.WS_DIST_TOT_TOT.AsDecimal() / WS.WS_DIST_TOTAL.AsDecimal());  //COBOL==> COMPUTE WS-DIST-PERCENT-TOT = ( WS-DIST-TOT-TOT / WS-DIST-TOTAL )
                WS.WT_DIST_PERCENT_TOT.SetComputeRoundedValue(WS.WS_DIST_PERCENT_TOT.AsInt() * 100);                //COBOL==> COMPUTE WT-DIST-PERCENT-TOT ROUNDED = WS-DIST-PERCENT-TOT * 100
            }                                                                                                   //COBOL==> END-IF
                                                                                                                //COMMENT:  REPORT LINE 11
            WS.WS_REF_ADV.SetValue(LS.TOTAL_CURRENCY_0006);                                                     //COBOL==> MOVE TOTAL-CURRENCY-0006 TO WS-REF-ADV
                                                                                                                //COMMENT:  REPORT LINE 12
            WS.WS_CASH_TOTAL.SetComputeValue(WS.WS_CASH_SUBTOT.AsDecimal() - WS.WS_REF_ADV.AsDecimal());        //COBOL==> COMPUTE WS-CASH-TOTAL = WS-CASH-SUBTOT - WS-REF-ADV
            WS.WX_CASH_KPC.SetValue(WS.WS_CASH_KPC);                                                            //COBOL==> MOVE WS-CASH-KPC TO WX-CASH-KPC
            WS.WX_CASH_FDSO.SetValue(WS.WS_CASH_FDSO);                                                          //COBOL==> MOVE WS-CASH-FDSO TO WX-CASH-FDSO
            WS.WX_DIST_TAF.SetValue(WS.WS_DIST_TAF);                                                            //COBOL==> MOVE WS-DIST-TAF TO WX-DIST-TAF
            WS.WX_DIST_TAF_ADJ.SetValue(WS.WS_DIST_TAF_ADJ);                                                    //COBOL==> MOVE WS-DIST-TAF-ADJ TO WX-DIST-TAF-ADJ
            WS.WX_DIST_TAF_TOT.SetValue(WS.WS_DIST_TAF_TOT);                                                    //COBOL==> MOVE WS-DIST-TAF-TOT TO WX-DIST-TAF-TOT
            WS.WX_DISB_PT_WAR.SetValue(WS.WS_DISB_PT_WAR);                                                      //COBOL==> MOVE WS-DISB-PT-WAR TO WX-DISB-PT-WAR
            WS.WX_DISB_PT_EFT.SetValue(WS.WS_DISB_PT_EFT);                                                      //COBOL==> MOVE WS-DISB-PT-EFT TO WX-DISB-PT-EFT
            WS.WX_DISB_PT_TOT.SetValue(WS.WS_DISB_PT_TOT);                                                      //COBOL==> MOVE WS-DISB-PT-TOT TO WX-DISB-PT-TOT
            WS.WX_CASH_SDSO.SetValue(WS.WS_CASH_SDSO);                                                          //COBOL==> MOVE WS-CASH-SDSO TO WX-CASH-SDSO
            WS.WX_DIST_NTAF.SetValue(WS.WS_DIST_NTAF);                                                          //COBOL==> MOVE WS-DIST-NTAF TO WX-DIST-NTAF
            WS.WX_DIST_NTAF_ADJ.SetValue(WS.WS_DIST_NTAF_ADJ);                                                  //COBOL==> MOVE WS-DIST-NTAF-ADJ TO WX-DIST-NTAF-ADJ
            WS.WX_DIST_NTAF_TOT.SetValue(WS.WS_DIST_NTAF_TOT);                                                  //COBOL==> MOVE WS-DIST-NTAF-TOT TO WX-DIST-NTAF-TOT
            WS.WX_DISB_NTAF_WAR.SetValue(WS.WS_DISB_NTAF_WAR);                                                  //COBOL==> MOVE WS-DISB-NTAF-WAR TO WX-DISB-NTAF-WAR
            WS.WX_DISB_NTAF_EFT.SetValue(WS.WS_DISB_NTAF_EFT);                                                  //COBOL==> MOVE WS-DISB-NTAF-EFT TO WX-DISB-NTAF-EFT
            WS.WX_DISB_NTAF_TOT.SetValue(WS.WS_DISB_NTAF_TOT);                                                  //COBOL==> MOVE WS-DISB-NTAF-TOT TO WX-DISB-NTAF-TOT
            WS.WX_CASH_KSDLUI.SetValue(WS.WS_CASH_KSDLUI);                                                      //COBOL==> MOVE WS-CASH-KSDLUI TO WX-CASH-KSDLUI
            WS.WX_DIST_TAF_FC.SetValue(WS.WS_DIST_TAF_FC);                                                      //COBOL==> MOVE WS-DIST-TAF-FC TO WX-DIST-TAF-FC
            WS.WX_DIST_TAF_FC_ADJ.SetValue(WS.WS_DIST_TAF_FC_ADJ);                                              //COBOL==> MOVE WS-DIST-TAF-FC-ADJ TO WX-DIST-TAF-FC-ADJ
            WS.WX_DIST_TAF_FC_TOT.SetValue(WS.WS_DIST_TAF_FC_TOT);                                              //COBOL==> MOVE WS-DIST-TAF-FC-TOT TO WX-DIST-TAF-FC-TOT
            WS.WX_CASH_CSSI.SetValue(WS.WS_CASH_CSSI);                                                          //COBOL==> MOVE WS-CASH-CSSI TO WX-CASH-CSSI
            WS.WX_DIST_GA_FC.SetValue(WS.WS_DIST_GA_FC);                                                        //COBOL==> MOVE WS-DIST-GA-FC TO WX-DIST-GA-FC
            WS.WX_DIST_GA_FC_ADJ.SetValue(WS.WS_DIST_GA_FC_ADJ);                                                //COBOL==> MOVE WS-DIST-GA-FC-ADJ TO WX-DIST-GA-FC-ADJ
            WS.WX_DIST_GA_FC_TOT.SetValue(WS.WS_DIST_GA_FC_TOT);                                                //COBOL==> MOVE WS-DIST-GA-FC-TOT TO WX-DIST-GA-FC-TOT
            WS.WX_CASH_MISC.SetValue(WS.WS_CASH_MISC);                                                          //COBOL==> MOVE WS-CASH-MISC TO WX-CASH-MISC
            WS.WX_CASH_OTHER.SetValue(WS.WS_CASH_OTHER);                                                        //COBOL==> MOVE WS-CASH-OTHER TO WX-CASH-OTHER
            WS.WX_CASH_SUBTOT.SetValue(WS.WS_CASH_SUBTOT);                                                      //COBOL==> MOVE WS-CASH-SUBTOT TO WX-CASH-SUBTOT
            WS.WX_DIST_TOTAL.SetValue(WS.WS_DIST_TOTAL);                                                        //COBOL==> MOVE WS-DIST-TOTAL TO WX-DIST-TOTAL
            WS.WX_DIST_TOTAL_ADJ.SetValue(WS.WS_DIST_TOTAL_ADJ);                                                //COBOL==> MOVE WS-DIST-TOTAL-ADJ TO WX-DIST-TOTAL-ADJ
            WS.WX_DIST_TOT_TOT.SetValue(WS.WS_DIST_TOT_TOT);                                                    //COBOL==> MOVE WS-DIST-TOT-TOT TO WX-DIST-TOT-TOT
            WS.WX_DISB_WAR_TOT.SetValue(WS.WS_DISB_WAR_TOT);                                                    //COBOL==> MOVE WS-DISB-WAR-TOT TO WX-DISB-WAR-TOT
            WS.WX_DISB_EFT_TOT.SetValue(WS.WS_DISB_EFT_TOT);                                                    //COBOL==> MOVE WS-DISB-EFT-TOT TO WX-DISB-EFT-TOT
            WS.WX_DISB_TOT_TOT.SetValue(WS.WS_DISB_TOT_TOT);                                                    //COBOL==> MOVE WS-DISB-TOT-TOT TO WX-DISB-TOT-TOT
            WS.WX_DIST_PERCENT_ADJ.SetComputeValue(WS.WT_DIST_PERCENT_ADJ);                                     //COBOL==> COMPUTE WX-DIST-PERCENT-ADJ = WT-DIST-PERCENT-ADJ
            WS.WX_DIST_PERCENT_TOT.SetComputeValue(WS.WT_DIST_PERCENT_TOT);                                     //COBOL==> COMPUTE WX-DIST-PERCENT-TOT = WT-DIST-PERCENT-TOT
            WS.WX_REF_ADV.SetValue(WS.WS_REF_ADV);                                                              //COBOL==> MOVE WS-REF-ADV TO WX-REF-ADV
            WS.WX_CASH_TOTAL.SetValue(WS.WS_CASH_TOTAL);                                                        //COBOL==> MOVE WS-CASH-TOTAL TO WX-CASH-TOTAL
                                                                                                                //COMMENT:     MOVE WS-REPORT-DATA-ARRAY    TO EXPORT-GROUP-0001RG.
            LS.LINE_TEXT_0024[1].SetValue(WS.WS_LINE_TEXT_1);                                                   //COBOL==> MOVE WS-LINE-TEXT-1 TO LINE-TEXT-0024 ( 1 )
            LS.LINE_TEXT_0024[2].SetValue(WS.WS_LINE_TEXT_2);                                                   //COBOL==> MOVE WS-LINE-TEXT-2 TO LINE-TEXT-0024 ( 2 )
            LS.LINE_TEXT_0024[3].SetValue(WS.WS_LINE_TEXT_3);                                                   //COBOL==> MOVE WS-LINE-TEXT-3 TO LINE-TEXT-0024 ( 3 )
            LS.LINE_TEXT_0024[4].SetValue(WS.WS_LINE_TEXT_4);                                                   //COBOL==> MOVE WS-LINE-TEXT-4 TO LINE-TEXT-0024 ( 4 )
            LS.LINE_TEXT_0024[5].SetValue(WS.WS_LINE_TEXT_5);                                                   //COBOL==> MOVE WS-LINE-TEXT-5 TO LINE-TEXT-0024 ( 5 )
            LS.LINE_TEXT_0024[6].SetValue(WS.WS_LINE_TEXT_6);                                                   //COBOL==> MOVE WS-LINE-TEXT-6 TO LINE-TEXT-0024 ( 6 )
            LS.LINE_TEXT_0024[7].SetValue(WS.WS_LINE_TEXT_7);                                                   //COBOL==> MOVE WS-LINE-TEXT-7 TO LINE-TEXT-0024 ( 7 )
            LS.LINE_TEXT_0024[8].SetValue(WS.WS_LINE_TEXT_8);                                                   //COBOL==> MOVE WS-LINE-TEXT-8 TO LINE-TEXT-0024 ( 8 )
            LS.LINE_TEXT_0024[9].SetValue(WS.WS_LINE_TEXT_9);                                                   //COBOL==> MOVE WS-LINE-TEXT-9 TO LINE-TEXT-0024 ( 9 )
            LS.LINE_TEXT_0024[10].SetValue(WS.WS_LINE_TEXT_10);                                                 //COBOL==> MOVE WS-LINE-TEXT-10 TO LINE-TEXT-0024 ( 10 )
            LS.LINE_TEXT_0024[11].SetValue(WS.WS_LINE_TEXT_11);                                                 //COBOL==> MOVE WS-LINE-TEXT-11 TO LINE-TEXT-0024 ( 11 )
            LS.LINE_TEXT_0024[12].SetValue(WS.WS_LINE_TEXT_12);                                                 //COBOL==> MOVE WS-LINE-TEXT-12 TO LINE-TEXT-0024 ( 12 )
            LS.LINE_TEXT_0024[13].SetValue(WS.WS_LINE_TEXT_13);                                                 //COBOL==> MOVE WS-LINE-TEXT-13 TO LINE-TEXT-0024 ( 13 )
            LS.LINE_TEXT_0024[14].SetValue(WS.WS_LINE_TEXT_14);                                                 //COBOL==> MOVE WS-LINE-TEXT-14 TO LINE-TEXT-0024 ( 14 )
            LS.LINE_TEXT_0024[15].SetValue(WS.WS_LINE_TEXT_15);                                                 //COBOL==> MOVE WS-LINE-TEXT-15 TO LINE-TEXT-0024 ( 15 ) .
            if (returnMethod != "" && returnMethod != "M_PARA_0296722021") { M_PARA_0296722021_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0296722021_EXIT
        /// </summary>
        private void M_PARA_0296722021_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0296722021_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_0296722021_EXIT") { M_PARA_0296722021_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0296722021_INIT
        /// </summary>
        private void M_PARA_0296722021_INIT(string returnMethod = "")
        {
            WS.EXPORT_GROUP_0001PS.SetValue(1);                                                                 //COBOL==> MOVE 1 TO EXPORT-GROUP-0001PS
            LS.EXPORT_GROUP_0001RG.ResetToInitialValue();                                                       //COBOL==> INITIALIZE EXPORT-GROUP-0001RG .
            if (returnMethod != "" && returnMethod != "M_PARA_0296722021_INIT") { M_PARA_0296722021_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_0296722021_INIT_EXIT
        /// </summary>
        private void M_PARA_0296722021_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_0296722021_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
