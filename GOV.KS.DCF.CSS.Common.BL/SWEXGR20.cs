#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:49:03 PM
   **        *   FROM COBOL PGM   :  SWEXGR20
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                   INFORMATION ENGINEERING FACILITY (TM)
                       TEXAS INSTRUMENTS INC.
                COPYRIGHT (C) TEXAS INSTRUMENTS INC. 1997
       NAME: EAB_READ_CSE_PERSON_USING_SSN    DATE: 97/06/27
       TARGET OS:   MVS                       TIME: 14:26:44
       TARGET DBMS: DB2                       USER: SWMTMAM
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
   **************************************************************
   ** MAINTENANCE *** MAINTENANCE *** MAINTENANCE *** MAINTENANCE **
                         CHANGE
    DATE      AUTHOR     CONTROL DESCRIPTION
    --------  ---------- ------- ----------------------------------
    03/2014   JCHRISTIAN CQ35825 ADABAS TO DB2 KEES PHASE 3 CHANGES.
   REPLACE READS OF ADABAS CLIENT-DBF AND CLIENT-BASIC-DBF TABLES
   WITH READS OF DB2 DATA SYNC TABLES KSD_CLIENT AND
   KSD_CLIENT-BASIC. OBTAIN SYSTEM PARTICIPATION FLAGS FROM NEW
   DB2 DATA SYNC TABLE KSD_SYSTEM_PART.  MODIFY ERROR HANDLING TO
   CHECK DB2 ERROR CODES BUT CONTINUE TO USE EXISTING ADABAS EXPORT
   ABEND FIELDS.  REMOVE/COMMENT UNNECESSARY ADABAS SPECIFIC CODE.
   ****************************************************************
   ****************************************************************
   **************************************************************
*/
#endregion
#region Using Directives
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Core;
using System;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Common.BL
{
    #region Working Storage Class
    internal class SWEXGR20_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXGR20_ws_WorkingStorage";
            internal const string FUNC_0798233759_ESC_FLAG = "FUNC_0798233759_ESC_FLAG";
            internal const string EXTERNAL_ACTION_BLOCK_WS = "EXTERNAL_ACTION_BLOCK_WS";
            internal const string MV_ABEND_FIELDS = "MV_ABEND_FIELDS";
            internal const string MV_ABEND_TYPE = "MV_ABEND_TYPE";
            internal const string MV_ABEND_TYPE_NONE = "MV_ABEND_TYPE_NONE";
            internal const string MV_ABEND_TYPE_ADABAS = "MV_ABEND_TYPE_ADABAS";
            internal const string MV_ABEND_ADABAS = "MV_ABEND_ADABAS";
            internal const string MV_ADA_FILE_NUMBER = "MV_ADA_FILE_NUMBER";
            internal const string MV_ADA_FILE_ACTION = "MV_ADA_FILE_ACTION";
            internal const string MV_ADA_RESPONSE_CD = "MV_ADA_RESPONSE_CD";
            internal const string MV_CLIENT_NUMBER_X10 = "MV_CLIENT_NUMBER_X10";
            internal const string MV_CLIENT_NUMBER = "MV_CLIENT_NUMBER";
            internal const string MV_DATE_OF_BIRTH_SEX = "MV_DATE_OF_BIRTH_SEX";
            internal const string MV_DATE_OF_BIRTH = "MV_DATE_OF_BIRTH";
            internal const string MV_DOB = "MV_DOB";
            internal const string MV_YYYY = "MV_YYYY";
            internal const string MV_MM = "MV_MM";
            internal const string MV_DD = "MV_DD";
            internal const string MV_SEX = "MV_SEX";
            internal const string MV_DATE_OF_BIRTH_10 = "MV_DATE_OF_BIRTH_10";
            internal const string MV_YYYY_10 = "MV_YYYY_10";
            internal const string MV_DASH_1 = "MV_DASH_1";
            internal const string MV_MM_10 = "MV_MM_10";
            internal const string MV_DASH_2 = "MV_DASH_2";
            internal const string MV_DD_10 = "MV_DD_10";
            internal const string CLB_DATE_OF_BIRTH_SEX = "CLB_DATE_OF_BIRTH_SEX";
            internal const string CLB_DATE_OF_BIRTH_X = "CLB_DATE_OF_BIRTH_X";
            internal const string CLB_DOB = "CLB_DOB";
            internal const string CLB_YYYY = "CLB_YYYY";
            internal const string CLB_MM = "CLB_MM";
            internal const string CLB_DD = "CLB_DD";
            internal const string CLB_SEX = "CLB_SEX";
            internal const string CLB_DATE_OF_BIRTH_10 = "CLB_DATE_OF_BIRTH_10";
            internal const string CLB_YYYY_10 = "CLB_YYYY_10";
            internal const string CLB_DASH_1 = "CLB_DASH_1";
            internal const string CLB_MM_10 = "CLB_MM_10";
            internal const string CLB_DASH_2 = "CLB_DASH_2";
            internal const string CLB_DD_10 = "CLB_DD_10";
            internal const string MV_SSN_X9 = "MV_SSN_X9";
            internal const string MV_SSN = "MV_SSN";
            internal const string MV_CLIENT_NAME = "MV_CLIENT_NAME";
            internal const string MV_CLIENT_SURNAME = "MV_CLIENT_SURNAME";
            internal const string MV_CLIENT_GIVEN_NAME = "MV_CLIENT_GIVEN_NAME";
            internal const string MV_CLIENT_INITIAL = "MV_CLIENT_INITIAL";
            internal const string MV_CPT = "MV_CPT";
            internal const string MV_CPT_MAX = "MV_CPT_MAX";
            internal const string MV_CLIENT_POINTER = "MV_CLIENT_POINTER";
            internal const string MV_CLIENT_ID = "MV_CLIENT_ID";
            internal const string MV_VERIFIED_SSN_FLAG = "MV_VERIFIED_SSN_FLAG";
            internal const string MV_SYSTEM_PARTICIPATION = "MV_SYSTEM_PARTICIPATION";
            internal const string MV_SYS_PART_AE = "MV_SYS_PART_AE";
            internal const string MV_SYS_PART_CSE = "MV_SYS_PART_CSE";
            internal const string MV_SYS_PART_KANPAY = "MV_SYS_PART_KANPAY";
            internal const string MV_SYS_PART_KSCARES = "MV_SYS_PART_KSCARES";
            internal const string MV_SYS_PART_FACTS = "MV_SYS_PART_FACTS";
            internal const string SV_CLIENT_DATA_TABLE = "SV_CLIENT_DATA_TABLE";
            internal const string SV_CLIENT_DATA_ENTRY = "SV_CLIENT_DATA_ENTRY";
            internal const string SV_CLIENT_POINTER = "SV_CLIENT_POINTER";
            internal const string SV_CLIENT_ID = "SV_CLIENT_ID";
            internal const string SV_VERIFIED_SSN_FLAG = "SV_VERIFIED_SSN_FLAG";
            internal const string SV_SYSTEM_PARTICIPATION = "SV_SYSTEM_PARTICIPATION";
            internal const string SV_SYS_PART_AE = "SV_SYS_PART_AE";
            internal const string SV_SYS_PART_CSE = "SV_SYS_PART_CSE";
            internal const string SV_SYS_PART_KANPAY = "SV_SYS_PART_KANPAY";
            internal const string SV_SYS_PART_KSCARES = "SV_SYS_PART_KSCARES";
            internal const string SV_SYS_PART_FACTS = "SV_SYS_PART_FACTS";
            internal const string SV_DATE_OF_BIRTH_SEX = "SV_DATE_OF_BIRTH_SEX";
            internal const string SV_DATE_OF_BIRTH = "SV_DATE_OF_BIRTH";
            internal const string SV_SEX = "SV_SEX";
            internal const string SV_CLIENT_NAME = "SV_CLIENT_NAME";
            internal const string SV_CLIENT_SURNAME = "SV_CLIENT_SURNAME";
            internal const string SV_CLIENT_GIVEN_NAME = "SV_CLIENT_GIVEN_NAME";
            internal const string SV_CLIENT_INITIAL = "SV_CLIENT_INITIAL";
            internal const string DCLKSD_CLIENT = "DCLKSD_CLIENT";
            internal const string CLIENT_SSN = "CLIENT_SSN";
            internal const string CLIENT_DATE_OF_BIRTH = "CLIENT_DATE_OF_BIRTH";
            internal const string CLIENT_GENDER = "CLIENT_GENDER";
            internal const string CLIENT_VERIFIED_SSN_FLAG = "CLIENT_VERIFIED_SSN_FLAG";
            internal const string CLIENT_NAME = "CLIENT_NAME";
            internal const string CLIENT_FK_CLB_CLIENT_NO = "CLIENT_FK_CLB_CLIENT_NO";
            internal const string DCLKSD_CLIENT_BASIC = "DCLKSD_CLIENT_BASIC";
            internal const string CLB_CLIENT_NUMBER = "CLB_CLIENT_NUMBER";
            internal const string CLB_CLIENT_GIVEN_NAME = "CLB_CLIENT_GIVEN_NAME";
            internal const string CLB_CLIENT_INITIALS = "CLB_CLIENT_INITIALS";
            internal const string CLB_CLIENT_SURNAME = "CLB_CLIENT_SURNAME";
            internal const string CLB_SSN = "CLB_SSN";
            internal const string CLB_GENDER = "CLB_GENDER";
            internal const string CLB_DATE_OF_BIRTH = "CLB_DATE_OF_BIRTH";
            internal const string CLB_SUFFIX_NAME = "CLB_SUFFIX_NAME";
            internal const string DCLKSD_SYSTEM_PART = "DCLKSD_SYSTEM_PART";
            internal const string SP_SYSTEM_CODE = "SP_SYSTEM_CODE";
            internal const string SP_PARTICIPATION_FLAG = "SP_PARTICIPATION_FLAG";
            internal const string SP_CREATED_TIMESTAMP = "SP_CREATED_TIMESTAMP";
            internal const string SP_CREATED_BY = "SP_CREATED_BY";
            internal const string SP_LAST_MODIFIED_BY = "SP_LAST_MODIFIED_BY";
            internal const string SP_LAST_MODIFIED_TMST = "SP_LAST_MODIFIED_TMST";
            internal const string SP_FK_CLB_CLIENT_NO = "SP_FK_CLB_CLIENT_NO";
            internal const string SP_FK_CLI_CLIENT_NAME = "SP_FK_CLI_CLIENT_NAME";
            internal const string SP_FK_CLI_SSN = "SP_FK_CLI_SSN";
            internal const string WS9_SYSTEM_CODES = "WS9_SYSTEM_CODES";
            internal const string WS9_SYSTEM_CODE_AE = "WS9_SYSTEM_CODE_AE";
            internal const string WS9_SYSTEM_CODE_CS = "WS9_SYSTEM_CODE_CS";
            internal const string WS9_SYSTEM_CODE_KA = "WS9_SYSTEM_CODE_KA";
            internal const string WS9_SYSTEM_CODE_KS = "WS9_SYSTEM_CODE_KS";
            internal const string WS9_SYSTEM_CODE_FA = "WS9_SYSTEM_CODE_FA";
            internal const string CL149_SWITCHES = "CL149_SWITCHES";
            internal const string CL149_EOF_SW = "CL149_EOF_SW";
            internal const string CL149_EOF_NOT_FOUND = "CL149_EOF_NOT_FOUND";
            internal const string CL149_EOF_NO = "CL149_EOF_NO";
            internal const string CL149_EOF_YES = "CL149_EOF_YES";
            internal const string CL149_ERR_SW = "CL149_ERR_SW";
            internal const string CL149_ERR_NO = "CL149_ERR_NO";
            internal const string CL149_ERR_YES = "CL149_ERR_YES";
            internal const string CL149_CSR_OPEN = "CL149_CSR_OPEN";
            internal const string DBK9_KEYS = "DBK9_KEYS";
            internal const string DBK9_CLIENT_NUMBER = "DBK9_CLIENT_NUMBER";
            internal const string DBK9_CLIENT_NAME = "DBK9_CLIENT_NAME";
            internal const string DBK9_SSN = "DBK9_SSN";
            internal const string WS_MISC = "WS_MISC";
            internal const string WS_MSG_X = "WS_MSG_X";
            internal const string WS_MSG_PROG = "WS_MSG_PROG";
            internal const string WS_MSG_1 = "WS_MSG_1";
            internal const string WS_MSG = "WS_MSG";
            internal const string WS_MSG_CODE = "WS_MSG_CODE";
            internal const string WS_MSG_SQLCODE = "WS_MSG_SQLCODE";
            internal const string WS_MSG_2 = "WS_MSG_2";
            internal const string WS_MSG_FIELD = "WS_MSG_FIELD";
            internal const string WS_MSG_VALUE = "WS_MSG_VALUE";
            internal const string WS_DATE_ADA = "WS_DATE_ADA";
            internal const string WS_DATE_DB2 = "WS_DATE_DB2";
        }
        #endregion

        #region Direct-access element properties
        public IField FUNC_0798233759_ESC_FLAG { get { return GetElementByName<IField>(Names.FUNC_0798233759_ESC_FLAG); } }
        public IGroup EXTERNAL_ACTION_BLOCK_WS { get { return GetElementByName<IGroup>(Names.EXTERNAL_ACTION_BLOCK_WS); } }
        public IGroup MV_ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.MV_ABEND_FIELDS); } }
        public IField MV_ABEND_TYPE { get { return GetElementByName<IField>(Names.MV_ABEND_TYPE); } }
        public ICheckField MV_ABEND_TYPE_NONE { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_NONE); } }
        public ICheckField MV_ABEND_TYPE_ADABAS { get { return GetElementByName<ICheckField>(Names.MV_ABEND_TYPE_ADABAS); } }
        public IGroup MV_ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.MV_ABEND_ADABAS); } }
        public IField MV_ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.MV_ADA_FILE_NUMBER); } }
        public IField MV_ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.MV_ADA_FILE_ACTION); } }
        public IField MV_ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.MV_ADA_RESPONSE_CD); } }
        public IGroup MV_CLIENT_NUMBER_X10 { get { return GetElementByName<IGroup>(Names.MV_CLIENT_NUMBER_X10); } }
        public IField MV_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.MV_CLIENT_NUMBER); } }
        public IGroup MV_DATE_OF_BIRTH_SEX { get { return GetElementByName<IGroup>(Names.MV_DATE_OF_BIRTH_SEX); } }
        public IField MV_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.MV_DATE_OF_BIRTH); } }
        public IGroup MV_DOB { get { return GetElementByName<IGroup>(Names.MV_DOB); } }
        public IField MV_YYYY { get { return GetElementByName<IField>(Names.MV_YYYY); } }
        public IField MV_MM { get { return GetElementByName<IField>(Names.MV_MM); } }
        public IField MV_DD { get { return GetElementByName<IField>(Names.MV_DD); } }
        public IField MV_SEX { get { return GetElementByName<IField>(Names.MV_SEX); } }
        public IGroup MV_DATE_OF_BIRTH_10 { get { return GetElementByName<IGroup>(Names.MV_DATE_OF_BIRTH_10); } }
        public IField MV_YYYY_10 { get { return GetElementByName<IField>(Names.MV_YYYY_10); } }
        public IField MV_DASH_1 { get { return GetElementByName<IField>(Names.MV_DASH_1); } }
        public IField MV_MM_10 { get { return GetElementByName<IField>(Names.MV_MM_10); } }
        public IField MV_DASH_2 { get { return GetElementByName<IField>(Names.MV_DASH_2); } }
        public IField MV_DD_10 { get { return GetElementByName<IField>(Names.MV_DD_10); } }
        public IGroup CLB_DATE_OF_BIRTH_SEX { get { return GetElementByName<IGroup>(Names.CLB_DATE_OF_BIRTH_SEX); } }
        public IField CLB_DATE_OF_BIRTH_X { get { return GetElementByName<IField>(Names.CLB_DATE_OF_BIRTH_X); } }
        public IGroup CLB_DOB { get { return GetElementByName<IGroup>(Names.CLB_DOB); } }
        public IField CLB_YYYY { get { return GetElementByName<IField>(Names.CLB_YYYY); } }
        public IField CLB_MM { get { return GetElementByName<IField>(Names.CLB_MM); } }
        public IField CLB_DD { get { return GetElementByName<IField>(Names.CLB_DD); } }
        public IField CLB_SEX { get { return GetElementByName<IField>(Names.CLB_SEX); } }
        public IGroup CLB_DATE_OF_BIRTH_10 { get { return GetElementByName<IGroup>(Names.CLB_DATE_OF_BIRTH_10); } }
        public IField CLB_YYYY_10 { get { return GetElementByName<IField>(Names.CLB_YYYY_10); } }
        public IField CLB_DASH_1 { get { return GetElementByName<IField>(Names.CLB_DASH_1); } }
        public IField CLB_MM_10 { get { return GetElementByName<IField>(Names.CLB_MM_10); } }
        public IField CLB_DASH_2 { get { return GetElementByName<IField>(Names.CLB_DASH_2); } }
        public IField CLB_DD_10 { get { return GetElementByName<IField>(Names.CLB_DD_10); } }
        public IGroup MV_SSN_X9 { get { return GetElementByName<IGroup>(Names.MV_SSN_X9); } }
        public IField MV_SSN { get { return GetElementByName<IField>(Names.MV_SSN); } }
        public IGroup MV_CLIENT_NAME { get { return GetElementByName<IGroup>(Names.MV_CLIENT_NAME); } }
        public IField MV_CLIENT_SURNAME { get { return GetElementByName<IField>(Names.MV_CLIENT_SURNAME); } }
        public IField MV_CLIENT_GIVEN_NAME { get { return GetElementByName<IField>(Names.MV_CLIENT_GIVEN_NAME); } }
        public IField MV_CLIENT_INITIAL { get { return GetElementByName<IField>(Names.MV_CLIENT_INITIAL); } }
        public IField MV_CPT { get { return GetElementByName<IField>(Names.MV_CPT); } }
        public IField MV_CPT_MAX { get { return GetElementByName<IField>(Names.MV_CPT_MAX); } }
        public IGroup MV_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.MV_CLIENT_POINTER); } }
        public IField MV_CLIENT_ID { get { return GetElementByName<IField>(Names.MV_CLIENT_ID); } }
        public IField MV_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.MV_VERIFIED_SSN_FLAG); } }
        public IGroup MV_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.MV_SYSTEM_PARTICIPATION); } }
        public IField MV_SYS_PART_AE { get { return GetElementByName<IField>(Names.MV_SYS_PART_AE); } }
        public IField MV_SYS_PART_CSE { get { return GetElementByName<IField>(Names.MV_SYS_PART_CSE); } }
        public IField MV_SYS_PART_KANPAY { get { return GetElementByName<IField>(Names.MV_SYS_PART_KANPAY); } }
        public IField MV_SYS_PART_KSCARES { get { return GetElementByName<IField>(Names.MV_SYS_PART_KSCARES); } }
        public IField MV_SYS_PART_FACTS { get { return GetElementByName<IField>(Names.MV_SYS_PART_FACTS); } }
        public IGroup SV_CLIENT_DATA_TABLE { get { return GetElementByName<IGroup>(Names.SV_CLIENT_DATA_TABLE); } }
        public IArrayElementAccessor<IGroup> SV_CLIENT_DATA_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.SV_CLIENT_DATA_ENTRY); } }
        public IArrayElementAccessor<IGroup> SV_CLIENT_POINTER { get { return GetArrayElementAccessor<IGroup>(Names.SV_CLIENT_POINTER); } }
        public IArrayElementAccessor<IField> SV_CLIENT_ID { get { return GetArrayElementAccessor<IField>(Names.SV_CLIENT_ID); } }
        public IArrayElementAccessor<IField> SV_VERIFIED_SSN_FLAG { get { return GetArrayElementAccessor<IField>(Names.SV_VERIFIED_SSN_FLAG); } }
        public IArrayElementAccessor<IGroup> SV_SYSTEM_PARTICIPATION { get { return GetArrayElementAccessor<IGroup>(Names.SV_SYSTEM_PARTICIPATION); } }
        public IArrayElementAccessor<IField> SV_SYS_PART_AE { get { return GetArrayElementAccessor<IField>(Names.SV_SYS_PART_AE); } }
        public IArrayElementAccessor<IField> SV_SYS_PART_CSE { get { return GetArrayElementAccessor<IField>(Names.SV_SYS_PART_CSE); } }
        public IArrayElementAccessor<IField> SV_SYS_PART_KANPAY { get { return GetArrayElementAccessor<IField>(Names.SV_SYS_PART_KANPAY); } }
        public IArrayElementAccessor<IField> SV_SYS_PART_KSCARES { get { return GetArrayElementAccessor<IField>(Names.SV_SYS_PART_KSCARES); } }
        public IArrayElementAccessor<IField> SV_SYS_PART_FACTS { get { return GetArrayElementAccessor<IField>(Names.SV_SYS_PART_FACTS); } }
        public IArrayElementAccessor<IGroup> SV_DATE_OF_BIRTH_SEX { get { return GetArrayElementAccessor<IGroup>(Names.SV_DATE_OF_BIRTH_SEX); } }
        public IArrayElementAccessor<IField> SV_DATE_OF_BIRTH { get { return GetArrayElementAccessor<IField>(Names.SV_DATE_OF_BIRTH); } }
        public IArrayElementAccessor<IField> SV_SEX { get { return GetArrayElementAccessor<IField>(Names.SV_SEX); } }
        public IArrayElementAccessor<IGroup> SV_CLIENT_NAME { get { return GetArrayElementAccessor<IGroup>(Names.SV_CLIENT_NAME); } }
        public IArrayElementAccessor<IField> SV_CLIENT_SURNAME { get { return GetArrayElementAccessor<IField>(Names.SV_CLIENT_SURNAME); } }
        public IArrayElementAccessor<IField> SV_CLIENT_GIVEN_NAME { get { return GetArrayElementAccessor<IField>(Names.SV_CLIENT_GIVEN_NAME); } }
        public IArrayElementAccessor<IField> SV_CLIENT_INITIAL { get { return GetArrayElementAccessor<IField>(Names.SV_CLIENT_INITIAL); } }
        public IGroup DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT); } }
        public IField CLIENT_SSN { get { return GetElementByName<IField>(Names.CLIENT_SSN); } }
        public IField CLIENT_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLIENT_DATE_OF_BIRTH); } }
        public IField CLIENT_GENDER { get { return GetElementByName<IField>(Names.CLIENT_GENDER); } }
        public IField CLIENT_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CLIENT_VERIFIED_SSN_FLAG); } }
        public IField CLIENT_NAME { get { return GetElementByName<IField>(Names.CLIENT_NAME); } }
        public IField CLIENT_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CLIENT_FK_CLB_CLIENT_NO); } }
        public IGroup DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CLIENT_BASIC); } }
        public IField CLB_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLB_CLIENT_NUMBER); } }
        public IField CLB_CLIENT_GIVEN_NAME { get { return GetElementByName<IField>(Names.CLB_CLIENT_GIVEN_NAME); } }
        public IField CLB_CLIENT_INITIALS { get { return GetElementByName<IField>(Names.CLB_CLIENT_INITIALS); } }
        public IField CLB_CLIENT_SURNAME { get { return GetElementByName<IField>(Names.CLB_CLIENT_SURNAME); } }
        public IField CLB_SSN { get { return GetElementByName<IField>(Names.CLB_SSN); } }
        public IField CLB_GENDER { get { return GetElementByName<IField>(Names.CLB_GENDER); } }
        public IField CLB_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLB_DATE_OF_BIRTH); } }
        public IField CLB_SUFFIX_NAME { get { return GetElementByName<IField>(Names.CLB_SUFFIX_NAME); } }
        public IGroup DCLKSD_SYSTEM_PART { get { return GetElementByName<IGroup>(Names.DCLKSD_SYSTEM_PART); } }
        public IField SP_SYSTEM_CODE { get { return GetElementByName<IField>(Names.SP_SYSTEM_CODE); } }
        public IField SP_PARTICIPATION_FLAG { get { return GetElementByName<IField>(Names.SP_PARTICIPATION_FLAG); } }
        public IField SP_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.SP_CREATED_TIMESTAMP); } }
        public IField SP_CREATED_BY { get { return GetElementByName<IField>(Names.SP_CREATED_BY); } }
        public IField SP_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.SP_LAST_MODIFIED_BY); } }
        public IField SP_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.SP_LAST_MODIFIED_TMST); } }
        public IField SP_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.SP_FK_CLB_CLIENT_NO); } }
        public IField SP_FK_CLI_CLIENT_NAME { get { return GetElementByName<IField>(Names.SP_FK_CLI_CLIENT_NAME); } }
        public IField SP_FK_CLI_SSN { get { return GetElementByName<IField>(Names.SP_FK_CLI_SSN); } }
        public IGroup WS9_SYSTEM_CODES { get { return GetElementByName<IGroup>(Names.WS9_SYSTEM_CODES); } }
        public IField WS9_SYSTEM_CODE_AE { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_AE); } }
        public IField WS9_SYSTEM_CODE_CS { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_CS); } }
        public IField WS9_SYSTEM_CODE_KA { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_KA); } }
        public IField WS9_SYSTEM_CODE_KS { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_KS); } }
        public IField WS9_SYSTEM_CODE_FA { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_FA); } }
        public IGroup CL149_SWITCHES { get { return GetElementByName<IGroup>(Names.CL149_SWITCHES); } }
        public IField CL149_EOF_SW { get { return GetElementByName<IField>(Names.CL149_EOF_SW); } }
        public ICheckField CL149_EOF_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.CL149_EOF_NOT_FOUND); } }
        public ICheckField CL149_EOF_NO { get { return GetElementByName<ICheckField>(Names.CL149_EOF_NO); } }
        public ICheckField CL149_EOF_YES { get { return GetElementByName<ICheckField>(Names.CL149_EOF_YES); } }
        public IField CL149_ERR_SW { get { return GetElementByName<IField>(Names.CL149_ERR_SW); } }
        public ICheckField CL149_ERR_NO { get { return GetElementByName<ICheckField>(Names.CL149_ERR_NO); } }
        public ICheckField CL149_ERR_YES { get { return GetElementByName<ICheckField>(Names.CL149_ERR_YES); } }
        public IField CL149_CSR_OPEN { get { return GetElementByName<IField>(Names.CL149_CSR_OPEN); } }
        public IGroup DBK9_KEYS { get { return GetElementByName<IGroup>(Names.DBK9_KEYS); } }
        public IField DBK9_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.DBK9_CLIENT_NUMBER); } }
        public IField DBK9_CLIENT_NAME { get { return GetElementByName<IField>(Names.DBK9_CLIENT_NAME); } }
        public IField DBK9_SSN { get { return GetElementByName<IField>(Names.DBK9_SSN); } }
        public IGroup WS_MISC { get { return GetElementByName<IGroup>(Names.WS_MISC); } }
        public IGroup WS_MSG_X { get { return GetElementByName<IGroup>(Names.WS_MSG_X); } }
        public IField WS_MSG_PROG { get { return GetElementByName<IField>(Names.WS_MSG_PROG); } }
        public IGroup WS_MSG_1 { get { return GetElementByName<IGroup>(Names.WS_MSG_1); } }
        public IField WS_MSG { get { return GetElementByName<IField>(Names.WS_MSG); } }
        public IGroup WS_MSG_CODE { get { return GetElementByName<IGroup>(Names.WS_MSG_CODE); } }
        public IField WS_MSG_SQLCODE { get { return GetElementByName<IField>(Names.WS_MSG_SQLCODE); } }
        public IGroup WS_MSG_2 { get { return GetElementByName<IGroup>(Names.WS_MSG_2); } }
        public IField WS_MSG_FIELD { get { return GetElementByName<IField>(Names.WS_MSG_FIELD); } }
        public IField WS_MSG_VALUE { get { return GetElementByName<IField>(Names.WS_MSG_VALUE); } }
        public IField WS_DATE_ADA { get { return GetElementByName<IField>(Names.WS_DATE_ADA); } }
        public IField WS_DATE_DB2 { get { return GetElementByName<IField>(Names.WS_DATE_DB2); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.FUNC_0798233759_ESC_FLAG, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.EXTERNAL_ACTION_BLOCK_WS, (EXTERNAL_ACTION_BLOCK_WS) =>
           {
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_ABEND_FIELDS, (MV_ABEND_FIELDS) =>
               {
                   MV_ABEND_FIELDS.CreateNewField(Names.MV_ABEND_TYPE, FieldType.String, 1)
                       .NewCheckField(Names.MV_ABEND_TYPE_NONE, SPACE)
                       .NewCheckField(Names.MV_ABEND_TYPE_ADABAS, "A")
                       ;
                   MV_ABEND_FIELDS.CreateNewGroup(Names.MV_ABEND_ADABAS, (MV_ABEND_ADABAS) =>
                   {
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_FILE_ACTION, FieldType.String, 3);
                       MV_ABEND_ADABAS.CreateNewField(Names.MV_ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_NUMBER_X10, (MV_CLIENT_NUMBER_X10) =>
               {
                   MV_CLIENT_NUMBER_X10.CreateNewField(Names.MV_CLIENT_NUMBER, FieldType.String, 10);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_DATE_OF_BIRTH_SEX, (MV_DATE_OF_BIRTH_SEX) =>
               {

                   IField MV_DATE_OF_BIRTH_local = MV_DATE_OF_BIRTH_SEX.CreateNewField(Names.MV_DATE_OF_BIRTH, FieldType.String, 8);
                   MV_DATE_OF_BIRTH_SEX.CreateNewGroupRedefine(Names.MV_DOB, MV_DATE_OF_BIRTH_local, (MV_DOB) =>
                   {
                       MV_DOB.CreateNewField(Names.MV_YYYY, FieldType.String, 4);
                       MV_DOB.CreateNewField(Names.MV_MM, FieldType.String, 2);
                       MV_DOB.CreateNewField(Names.MV_DD, FieldType.String, 2);
                   });
                   MV_DATE_OF_BIRTH_SEX.CreateNewField(Names.MV_SEX, FieldType.String, 1);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_DATE_OF_BIRTH_10, (MV_DATE_OF_BIRTH_10) =>
               {
                   MV_DATE_OF_BIRTH_10.CreateNewField(Names.MV_YYYY_10, FieldType.String, 4);
                   MV_DATE_OF_BIRTH_10.CreateNewField(Names.MV_DASH_1, FieldType.String, 1);
                   MV_DATE_OF_BIRTH_10.CreateNewField(Names.MV_MM_10, FieldType.String, 2);
                   MV_DATE_OF_BIRTH_10.CreateNewField(Names.MV_DASH_2, FieldType.String, 1);
                   MV_DATE_OF_BIRTH_10.CreateNewField(Names.MV_DD_10, FieldType.String, 2);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.CLB_DATE_OF_BIRTH_SEX, (CLB_DATE_OF_BIRTH_SEX) =>
               {

                   IField CLB_DATE_OF_BIRTH_X_local = CLB_DATE_OF_BIRTH_SEX.CreateNewField(Names.CLB_DATE_OF_BIRTH_X, FieldType.String, 8);
                   CLB_DATE_OF_BIRTH_SEX.CreateNewGroupRedefine(Names.CLB_DOB, CLB_DATE_OF_BIRTH_X_local, (CLB_DOB) =>
                   {
                       CLB_DOB.CreateNewField(Names.CLB_YYYY, FieldType.String, 4);
                       CLB_DOB.CreateNewField(Names.CLB_MM, FieldType.String, 2);
                       CLB_DOB.CreateNewField(Names.CLB_DD, FieldType.String, 2);
                   });
                   CLB_DATE_OF_BIRTH_SEX.CreateNewField(Names.CLB_SEX, FieldType.String, 1);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.CLB_DATE_OF_BIRTH_10, (CLB_DATE_OF_BIRTH_10) =>
               {
                   CLB_DATE_OF_BIRTH_10.CreateNewField(Names.CLB_YYYY_10, FieldType.String, 4);
                   CLB_DATE_OF_BIRTH_10.CreateNewField(Names.CLB_DASH_1, FieldType.String, 1);
                   CLB_DATE_OF_BIRTH_10.CreateNewField(Names.CLB_MM_10, FieldType.String, 2);
                   CLB_DATE_OF_BIRTH_10.CreateNewField(Names.CLB_DASH_2, FieldType.String, 1);
                   CLB_DATE_OF_BIRTH_10.CreateNewField(Names.CLB_DD_10, FieldType.String, 2);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_SSN_X9, (MV_SSN_X9) =>
               {
                   MV_SSN_X9.CreateNewField(Names.MV_SSN, FieldType.UnsignedNumeric, 9);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_NAME, (MV_CLIENT_NAME) =>
               {
                   MV_CLIENT_NAME.CreateNewField(Names.MV_CLIENT_SURNAME, FieldType.String, 17);
                   MV_CLIENT_NAME.CreateNewField(Names.MV_CLIENT_GIVEN_NAME, FieldType.String, 12);
                   MV_CLIENT_NAME.CreateNewField(Names.MV_CLIENT_INITIAL, FieldType.String, 1);
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_CPT, FieldType.CompShort, 4, ZERO);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewField(Names.MV_CPT_MAX, FieldType.CompShort, 4, 50);
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.MV_CLIENT_POINTER, (MV_CLIENT_POINTER) =>
               {
                   MV_CLIENT_POINTER.CreateNewField(Names.MV_CLIENT_ID, FieldType.String, 10);
                   MV_CLIENT_POINTER.CreateNewField(Names.MV_VERIFIED_SSN_FLAG, FieldType.String, 1);
                   MV_CLIENT_POINTER.CreateNewGroup(Names.MV_SYSTEM_PARTICIPATION, (MV_SYSTEM_PARTICIPATION) =>
                   {
                       MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_AE, FieldType.String, 1);
                       MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_CSE, FieldType.String, 1);
                       MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_KANPAY, FieldType.String, 1);
                       MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_KSCARES, FieldType.String, 1);
                       MV_SYSTEM_PARTICIPATION.CreateNewField(Names.MV_SYS_PART_FACTS, FieldType.String, 1);
                       MV_SYSTEM_PARTICIPATION.CreateNewFillerField(15, FillWith.Hashes);
                   });
               });
               EXTERNAL_ACTION_BLOCK_WS.CreateNewGroup(Names.SV_CLIENT_DATA_TABLE, (SV_CLIENT_DATA_TABLE) =>
               {
                   SV_CLIENT_DATA_TABLE.CreateNewGroupArray(Names.SV_CLIENT_DATA_ENTRY, 50, (SV_CLIENT_DATA_ENTRY) =>
                   {
                       SV_CLIENT_DATA_ENTRY.CreateNewGroup(Names.SV_CLIENT_POINTER, (SV_CLIENT_POINTER) =>
                       {
                           SV_CLIENT_POINTER.CreateNewField(Names.SV_CLIENT_ID, FieldType.String, 10);
                           SV_CLIENT_POINTER.CreateNewField(Names.SV_VERIFIED_SSN_FLAG, FieldType.String, 1);
                           SV_CLIENT_POINTER.CreateNewGroup(Names.SV_SYSTEM_PARTICIPATION, (SV_SYSTEM_PARTICIPATION) =>
                           {
                               SV_SYSTEM_PARTICIPATION.CreateNewField(Names.SV_SYS_PART_AE, FieldType.String, 1);
                               SV_SYSTEM_PARTICIPATION.CreateNewField(Names.SV_SYS_PART_CSE, FieldType.String, 1);
                               SV_SYSTEM_PARTICIPATION.CreateNewField(Names.SV_SYS_PART_KANPAY, FieldType.String, 1);
                               SV_SYSTEM_PARTICIPATION.CreateNewField(Names.SV_SYS_PART_KSCARES, FieldType.String, 1);
                               SV_SYSTEM_PARTICIPATION.CreateNewField(Names.SV_SYS_PART_FACTS, FieldType.String, 1);
                               SV_SYSTEM_PARTICIPATION.CreateNewFillerField(15, FillWith.Hashes);
                           });
                       });
                       SV_CLIENT_DATA_ENTRY.CreateNewGroup(Names.SV_DATE_OF_BIRTH_SEX, (SV_DATE_OF_BIRTH_SEX) =>
                       {
                           SV_DATE_OF_BIRTH_SEX.CreateNewField(Names.SV_DATE_OF_BIRTH, FieldType.String, 8);
                           SV_DATE_OF_BIRTH_SEX.CreateNewField(Names.SV_SEX, FieldType.String, 1);
                       });
                       SV_CLIENT_DATA_ENTRY.CreateNewGroup(Names.SV_CLIENT_NAME, (SV_CLIENT_NAME) =>
                       {
                           SV_CLIENT_NAME.CreateNewField(Names.SV_CLIENT_SURNAME, FieldType.String, 17);
                           SV_CLIENT_NAME.CreateNewField(Names.SV_CLIENT_GIVEN_NAME, FieldType.String, 12);
                           SV_CLIENT_NAME.CreateNewField(Names.SV_CLIENT_INITIAL, FieldType.String, 1);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT, (DCLKSD_CLIENT) =>
           {
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_DATE_OF_BIRTH, FieldType.String, 10);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_VERIFIED_SSN_FLAG, FieldType.String, 1);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_NAME, FieldType.String, 30);
               DCLKSD_CLIENT.CreateNewField(Names.CLIENT_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CLIENT_BASIC, (DCLKSD_CLIENT_BASIC) =>
           {
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_CLIENT_NUMBER, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_CLIENT_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_CLIENT_INITIALS, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_CLIENT_SURNAME, FieldType.String, 17);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_SSN, FieldType.CompInt, 9);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_GENDER, FieldType.String, 1);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_DATE_OF_BIRTH, FieldType.String, 10);
               DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB_SUFFIX_NAME, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DCLKSD_SYSTEM_PART, (DCLKSD_SYSTEM_PART) =>
           {
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SP_SYSTEM_CODE, FieldType.String, 2);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SP_PARTICIPATION_FLAG, FieldType.String, 1);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SP_CREATED_TIMESTAMP, FieldType.String, 26);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SP_CREATED_BY, FieldType.String, 8);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SP_LAST_MODIFIED_BY, FieldType.String, 8);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SP_LAST_MODIFIED_TMST, FieldType.String, 26);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SP_FK_CLB_CLIENT_NO, FieldType.String, 10);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SP_FK_CLI_CLIENT_NAME, FieldType.String, 30);
               DCLKSD_SYSTEM_PART.CreateNewField(Names.SP_FK_CLI_SSN, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.WS9_SYSTEM_CODES, (WS9_SYSTEM_CODES) =>
           {
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_AE, FieldType.String, 2, "AE");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_CS, FieldType.String, 2, "CS");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_KA, FieldType.String, 2, "KA");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_KS, FieldType.String, 2, "KS");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_FA, FieldType.String, 2, "FA");
           });

            recordDef.CreateNewGroup(Names.CL149_SWITCHES, (CL149_SWITCHES) =>
           {
               CL149_SWITCHES.CreateNewField(Names.CL149_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.CL149_EOF_NOT_FOUND, SPACE)
                   .NewCheckField(Names.CL149_EOF_NO, "N")
                   .NewCheckField(Names.CL149_EOF_YES, "Y")
                   ;
               CL149_SWITCHES.CreateNewField(Names.CL149_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.CL149_ERR_NO, "N")
                   .NewCheckField(Names.CL149_ERR_YES, "Y")
                   ;
               CL149_SWITCHES.CreateNewField(Names.CL149_CSR_OPEN, FieldType.String, 1, "N");
           });

            recordDef.CreateNewGroup(Names.DBK9_KEYS, (DBK9_KEYS) =>
           {
               DBK9_KEYS.CreateNewField(Names.DBK9_CLIENT_NUMBER, FieldType.String, 10);
               DBK9_KEYS.CreateNewField(Names.DBK9_CLIENT_NAME, FieldType.String, 30);
               DBK9_KEYS.CreateNewField(Names.DBK9_SSN, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.WS_MISC, (WS_MISC) =>
           {
               WS_MISC.CreateNewGroup(Names.WS_MSG_X, (WS_MSG_X) =>
               {
                   WS_MSG_X.CreateNewField(Names.WS_MSG_PROG, FieldType.String, 10);
                   IGroup WS_MSG_1_local = (IGroup)WS_MSG_X.CreateNewGroup(Names.WS_MSG_1, (WS_MSG_1) =>
                   {
                       WS_MSG_1.CreateNewField(Names.WS_MSG, FieldType.String, 50);
                       WS_MSG_1.CreateNewGroup(Names.WS_MSG_CODE, (WS_MSG_CODE) =>
                       {
                           WS_MSG_CODE.CreateNewField(Names.WS_MSG_SQLCODE, FieldType.NumericEdited, "---------9", 10);
                       });
                   });
                   WS_MSG_X.CreateNewGroupRedefine(Names.WS_MSG_2, WS_MSG_1_local, (WS_MSG_2) =>
                   {
                       WS_MSG_2.CreateNewField(Names.WS_MSG_FIELD, FieldType.String, 25);
                       WS_MSG_2.CreateNewField(Names.WS_MSG_VALUE, FieldType.String, 35);
                   });
               });
               WS_MISC.CreateNewField(Names.WS_DATE_ADA, FieldType.String, 8);
               WS_MISC.CreateNewField(Names.WS_DATE_DB2, FieldType.String, 10);
           });


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXGR20_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXGR20_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string A_0798233762_IA = "A_0798233762_IA";
            internal const string IMPORT_0001EV = "IMPORT_0001EV";
            internal const string CSE_PERSONS_WORK_SET_0001ET = "CSE_PERSONS_WORK_SET_0001ET";
            internal const string SSN_0001AS = "SSN_0001AS";
            internal const string SSN_0001 = "SSN_0001";
            internal const string SSN_0001XX = "SSN_0001XX";
            internal const string W_OA = "W_OA";
            internal const string A_0798233763_OA = "A_0798233763_OA";
            internal const string EXPORT_0002EV = "EXPORT_0002EV";
            internal const string CSE_PERSONS_WORK_SET_0002ET = "CSE_PERSONS_WORK_SET_0002ET";
            internal const string SSN_0002AS = "SSN_0002AS";
            internal const string SSN_0002 = "SSN_0002";
            internal const string SSN_0002XX = "SSN_0002XX";
            internal const string FIRST_NAME_0002AS = "FIRST_NAME_0002AS";
            internal const string FIRST_NAME_0002 = "FIRST_NAME_0002";
            internal const string FIRST_NAME_0002XX = "FIRST_NAME_0002XX";
            internal const string MIDDLE_INITIAL_0002AS = "MIDDLE_INITIAL_0002AS";
            internal const string MIDDLE_INITIAL_0002 = "MIDDLE_INITIAL_0002";
            internal const string MIDDLE_INITIAL_0002XX = "MIDDLE_INITIAL_0002XX";
            internal const string LAST_NAME_0002AS = "LAST_NAME_0002AS";
            internal const string LAST_NAME_0002 = "LAST_NAME_0002";
            internal const string LAST_NAME_0002XX = "LAST_NAME_0002XX";
            internal const string SEX_0002AS = "SEX_0002AS";
            internal const string SEX_0002 = "SEX_0002";
            internal const string SEX_0002XX = "SEX_0002XX";
            internal const string DOB_0002AS = "DOB_0002AS";
            internal const string DOB_0002 = "DOB_0002";
            internal const string DOB_0002XX = "DOB_0002XX";
            internal const string NUMBER_0002AS = "NUMBER_0002AS";
            internal const string NUMBER_0002 = "NUMBER_0002";
            internal const string NUMBER_0002XX = "NUMBER_0002XX";
            internal const string EXPORT_0003EV = "EXPORT_0003EV";
            internal const string ABEND_DATA_0003ET = "ABEND_DATA_0003ET";
            internal const string ADABAS_FILE_NUMBER_0003AS = "ADABAS_FILE_NUMBER_0003AS";
            internal const string ADABAS_FILE_NUMBER_0003 = "ADABAS_FILE_NUMBER_0003";
            internal const string ADABAS_FILE_NUMBER_0003XX = "ADABAS_FILE_NUMBER_0003XX";
            internal const string ADABAS_FILE_ACTION_0003AS = "ADABAS_FILE_ACTION_0003AS";
            internal const string ADABAS_FILE_ACTION_0003 = "ADABAS_FILE_ACTION_0003";
            internal const string ADABAS_FILE_ACTION_0003XX = "ADABAS_FILE_ACTION_0003XX";
            internal const string ADABAS_RESPONSE_CD_0003AS = "ADABAS_RESPONSE_CD_0003AS";
            internal const string ADABAS_RESPONSE_CD_0003 = "ADABAS_RESPONSE_CD_0003";
            internal const string ADABAS_RESPONSE_CD_0003XX = "ADABAS_RESPONSE_CD_0003XX";
            internal const string CICS_RESOURCE_NM_0003AS = "CICS_RESOURCE_NM_0003AS";
            internal const string CICS_RESOURCE_NM_0003 = "CICS_RESOURCE_NM_0003";
            internal const string CICS_RESOURCE_NM_0003XX = "CICS_RESOURCE_NM_0003XX";
            internal const string CICS_FUNCTION_CD_0003AS = "CICS_FUNCTION_CD_0003AS";
            internal const string CICS_FUNCTION_CD_0003 = "CICS_FUNCTION_CD_0003";
            internal const string CICS_FUNCTION_CD_0003XX = "CICS_FUNCTION_CD_0003XX";
            internal const string CICS_RESPONSE_CD_0003AS = "CICS_RESPONSE_CD_0003AS";
            internal const string CICS_RESPONSE_CD_0003 = "CICS_RESPONSE_CD_0003";
            internal const string CICS_RESPONSE_CD_0003XX = "CICS_RESPONSE_CD_0003XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup A_0798233762_IA { get { return GetElementByName<IGroup>(Names.A_0798233762_IA); } }
        public IGroup IMPORT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_0001EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0001ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0001ET); } }
        public IField SSN_0001AS { get { return GetElementByName<IField>(Names.SSN_0001AS); } }
        public IField SSN_0001 { get { return GetElementByName<IField>(Names.SSN_0001); } }
        public IField SSN_0001XX { get { return GetElementByName<IField>(Names.SSN_0001XX); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup A_0798233763_OA { get { return GetElementByName<IGroup>(Names.A_0798233763_OA); } }
        public IGroup EXPORT_0002EV { get { return GetElementByName<IGroup>(Names.EXPORT_0002EV); } }
        public IGroup CSE_PERSONS_WORK_SET_0002ET { get { return GetElementByName<IGroup>(Names.CSE_PERSONS_WORK_SET_0002ET); } }
        public IField SSN_0002AS { get { return GetElementByName<IField>(Names.SSN_0002AS); } }
        public IField SSN_0002 { get { return GetElementByName<IField>(Names.SSN_0002); } }
        public IField SSN_0002XX { get { return GetElementByName<IField>(Names.SSN_0002XX); } }
        public IField FIRST_NAME_0002AS { get { return GetElementByName<IField>(Names.FIRST_NAME_0002AS); } }
        public IField FIRST_NAME_0002 { get { return GetElementByName<IField>(Names.FIRST_NAME_0002); } }
        public IField FIRST_NAME_0002XX { get { return GetElementByName<IField>(Names.FIRST_NAME_0002XX); } }
        public IField MIDDLE_INITIAL_0002AS { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002AS); } }
        public IField MIDDLE_INITIAL_0002 { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002); } }
        public IField MIDDLE_INITIAL_0002XX { get { return GetElementByName<IField>(Names.MIDDLE_INITIAL_0002XX); } }
        public IField LAST_NAME_0002AS { get { return GetElementByName<IField>(Names.LAST_NAME_0002AS); } }
        public IField LAST_NAME_0002 { get { return GetElementByName<IField>(Names.LAST_NAME_0002); } }
        public IField LAST_NAME_0002XX { get { return GetElementByName<IField>(Names.LAST_NAME_0002XX); } }
        public IField SEX_0002AS { get { return GetElementByName<IField>(Names.SEX_0002AS); } }
        public IField SEX_0002 { get { return GetElementByName<IField>(Names.SEX_0002); } }
        public IField SEX_0002XX { get { return GetElementByName<IField>(Names.SEX_0002XX); } }
        public IField DOB_0002AS { get { return GetElementByName<IField>(Names.DOB_0002AS); } }
        public IField DOB_0002 { get { return GetElementByName<IField>(Names.DOB_0002); } }
        public IField DOB_0002XX { get { return GetElementByName<IField>(Names.DOB_0002XX); } }
        public IField NUMBER_0002AS { get { return GetElementByName<IField>(Names.NUMBER_0002AS); } }
        public IField NUMBER_0002 { get { return GetElementByName<IField>(Names.NUMBER_0002); } }
        public IField NUMBER_0002XX { get { return GetElementByName<IField>(Names.NUMBER_0002XX); } }
        public IGroup EXPORT_0003EV { get { return GetElementByName<IGroup>(Names.EXPORT_0003EV); } }
        public IGroup ABEND_DATA_0003ET { get { return GetElementByName<IGroup>(Names.ABEND_DATA_0003ET); } }
        public IField ADABAS_FILE_NUMBER_0003AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0003AS); } }
        public IField ADABAS_FILE_NUMBER_0003 { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0003); } }
        public IField ADABAS_FILE_NUMBER_0003XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_NUMBER_0003XX); } }
        public IField ADABAS_FILE_ACTION_0003AS { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0003AS); } }
        public IField ADABAS_FILE_ACTION_0003 { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0003); } }
        public IField ADABAS_FILE_ACTION_0003XX { get { return GetElementByName<IField>(Names.ADABAS_FILE_ACTION_0003XX); } }
        public IField ADABAS_RESPONSE_CD_0003AS { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0003AS); } }
        public IField ADABAS_RESPONSE_CD_0003 { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0003); } }
        public IField ADABAS_RESPONSE_CD_0003XX { get { return GetElementByName<IField>(Names.ADABAS_RESPONSE_CD_0003XX); } }
        public IField CICS_RESOURCE_NM_0003AS { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0003AS); } }
        public IField CICS_RESOURCE_NM_0003 { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0003); } }
        public IField CICS_RESOURCE_NM_0003XX { get { return GetElementByName<IField>(Names.CICS_RESOURCE_NM_0003XX); } }
        public IField CICS_FUNCTION_CD_0003AS { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0003AS); } }
        public IField CICS_FUNCTION_CD_0003 { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0003); } }
        public IField CICS_FUNCTION_CD_0003XX { get { return GetElementByName<IField>(Names.CICS_FUNCTION_CD_0003XX); } }
        public IField CICS_RESPONSE_CD_0003AS { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0003AS); } }
        public IField CICS_RESPONSE_CD_0003 { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0003); } }
        public IField CICS_RESPONSE_CD_0003XX { get { return GetElementByName<IField>(Names.CICS_RESPONSE_CD_0003XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.A_0798233762_IA, (A_0798233762_IA) =>
               {
                   A_0798233762_IA.CreateNewGroup(Names.IMPORT_0001EV, (IMPORT_0001EV) =>
                   {
                       IMPORT_0001EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0001ET, (CSE_PERSONS_WORK_SET_0001ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.SSN_0001AS, FieldType.String, 1);

                           IField SSN_0001_local = CSE_PERSONS_WORK_SET_0001ET.CreateNewField(Names.SSN_0001, FieldType.String, 9);
                           CSE_PERSONS_WORK_SET_0001ET.CreateNewFieldRedefine(Names.SSN_0001XX, FieldType.String, SSN_0001_local, 9);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.A_0798233763_OA, (A_0798233763_OA) =>
               {
                   A_0798233763_OA.CreateNewGroup(Names.EXPORT_0002EV, (EXPORT_0002EV) =>
                   {
                       EXPORT_0002EV.CreateNewGroup(Names.CSE_PERSONS_WORK_SET_0002ET, (CSE_PERSONS_WORK_SET_0002ET) =>
                       {
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SSN_0002AS, FieldType.String, 1);

                           IField SSN_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SSN_0002, FieldType.String, 9);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.SSN_0002XX, FieldType.String, SSN_0002_local, 9);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FIRST_NAME_0002AS, FieldType.String, 1);

                           IField FIRST_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.FIRST_NAME_0002, FieldType.String, 12);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.FIRST_NAME_0002XX, FieldType.String, FIRST_NAME_0002_local, 12);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.MIDDLE_INITIAL_0002AS, FieldType.String, 1);

                           IField MIDDLE_INITIAL_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.MIDDLE_INITIAL_0002, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.MIDDLE_INITIAL_0002XX, FieldType.String, MIDDLE_INITIAL_0002_local, 1);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.LAST_NAME_0002AS, FieldType.String, 1);

                           IField LAST_NAME_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.LAST_NAME_0002, FieldType.String, 17);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.LAST_NAME_0002XX, FieldType.String, LAST_NAME_0002_local, 17);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SEX_0002AS, FieldType.String, 1);

                           IField SEX_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.SEX_0002, FieldType.String, 1);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.SEX_0002XX, FieldType.String, SEX_0002_local, 1);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.DOB_0002AS, FieldType.String, 1);

                           IField DOB_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.DOB_0002, FieldType.SignedNumeric, 8);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.DOB_0002XX, FieldType.String, DOB_0002_local, 8);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.NUMBER_0002AS, FieldType.String, 1);

                           IField NUMBER_0002_local = CSE_PERSONS_WORK_SET_0002ET.CreateNewField(Names.NUMBER_0002, FieldType.String, 10);
                           CSE_PERSONS_WORK_SET_0002ET.CreateNewFieldRedefine(Names.NUMBER_0002XX, FieldType.String, NUMBER_0002_local, 10);
                       });
                   });
                   A_0798233763_OA.CreateNewGroup(Names.EXPORT_0003EV, (EXPORT_0003EV) =>
                   {
                       EXPORT_0003EV.CreateNewGroup(Names.ABEND_DATA_0003ET, (ABEND_DATA_0003ET) =>
                       {
                           ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0003AS, FieldType.String, 1);

                           IField ADABAS_FILE_NUMBER_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_NUMBER_0003, FieldType.String, 4);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.ADABAS_FILE_NUMBER_0003XX, FieldType.String, ADABAS_FILE_NUMBER_0003_local, 4);
                           ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_ACTION_0003AS, FieldType.String, 1);

                           IField ADABAS_FILE_ACTION_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_FILE_ACTION_0003, FieldType.String, 3);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.ADABAS_FILE_ACTION_0003XX, FieldType.String, ADABAS_FILE_ACTION_0003_local, 3);
                           ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0003AS, FieldType.String, 1);

                           IField ADABAS_RESPONSE_CD_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.ADABAS_RESPONSE_CD_0003, FieldType.String, 4);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.ADABAS_RESPONSE_CD_0003XX, FieldType.String, ADABAS_RESPONSE_CD_0003_local, 4);
                           ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESOURCE_NM_0003AS, FieldType.String, 1);

                           IField CICS_RESOURCE_NM_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESOURCE_NM_0003, FieldType.String, 8);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.CICS_RESOURCE_NM_0003XX, FieldType.String, CICS_RESOURCE_NM_0003_local, 8);
                           ABEND_DATA_0003ET.CreateNewField(Names.CICS_FUNCTION_CD_0003AS, FieldType.String, 1);

                           IField CICS_FUNCTION_CD_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.CICS_FUNCTION_CD_0003, FieldType.String, 2);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.CICS_FUNCTION_CD_0003XX, FieldType.String, CICS_FUNCTION_CD_0003_local, 2);
                           ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESPONSE_CD_0003AS, FieldType.String, 1);

                           IField CICS_RESPONSE_CD_0003_local = ABEND_DATA_0003ET.CreateNewField(Names.CICS_RESPONSE_CD_0003, FieldType.String, 6);
                           ABEND_DATA_0003ET.CreateNewFieldRedefine(Names.CICS_RESPONSE_CD_0003XX, FieldType.String, CICS_RESPONSE_CD_0003_local, 6);
                       });
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(W_IA, args, 2);
            SetPassedParm(W_OA, args, 3);
            SetPassedParm(PSMGR_EAB_DATA, args, 4);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(W_IA, args, 2);
            SetReturnParm(W_OA, args, 3);
            SetReturnParm(PSMGR_EAB_DATA, args, 4);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXGR20 : EABBase
    {

        #region Public Constructors
        public SWEXGR20()
            : base()
        {
            this.ProgramName.SetValue("SWEXGR20");

            WS = new SWEXGR20_ws();
            LS = new SWEXGR20_ls();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryTextWithUR("CL-VIEW", "SELECT SSN, DATE_OF_BIRTH, GENDER, VERIFIED_SSN_FLAG, CLIENT_NAME, FK_CLB_CLIENT_NO FROM KSD_CLIENT WHERE ( SSN = {0}  ) ORDER BY CLIENT_NAME, DATE_OF_BIRTH, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE CL-VIEW CURSOR FOR SELECT SSN , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , FK_CLB_CLIENT_NO FROM KSD_CLIENT WHERE ( SSN = :DBK9-SSN ) ORDER BY CLIENT_NAME , DATE_OF_BIRTH , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG WITH UR END-EXEC
                                WS.DBK9_SSN);

            DbConv.SetQueryTextWithUR("SPA-VIEW", "SELECT SYSTEM_CODE, PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE ( FK_CLB_CLIENT_NO = {0}  ) AND ( FK_CLI_CLIENT_NAME = {1}  ) AND ( FK_CLI_SSN = {2}  )",  //COBOL==>EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE ( FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER ) AND ( FK_CLI_CLIENT_NAME = :DBK9-CLIENT-NAME ) AND ( FK_CLI_SSN = :DBK9-SSN ) WITH UR END-EXEC
                                WS.DBK9_CLIENT_NUMBER, WS.DBK9_CLIENT_NAME, WS.DBK9_SSN);

        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXGR20_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXGR20_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain(string.Empty, "Main");
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        protected override void RunMain(string startLabel, string returnLbl)
        {
            #region Perform Navigation
            string returnLabel = returnLbl;
            switch (startLabel)
            {
                case "PARA-0798233759-INIT": goto L_PARA_0798233759_INIT; break;
                case "PARA-0798233759": goto L_PARA_0798233759; break;
                case "1149D-DECLARE-CLIENT-VIEW": goto L_1149D_DECLARE_CLIENT_VIEW; break;
                case "1149O-OPEN-CLIENT-VIEW": goto L_1149O_OPEN_CLIENT_VIEW; break;
                case "1149F-FETCH-CLIENT": goto L_1149F_FETCH_CLIENT; break;
                case "2000-PROCESS-SYSTEM-PART": goto L_2000_PROCESS_SYSTEM_PART; break;
                case "1154-READISN-CLIENT-BASIC-DBF": goto L_1154_READISN_CLIENT_BASIC_DBF; break;
                case "2010-DECLARE-SPA-VIEW": goto L_2010_DECLARE_SPA_VIEW; break;
                case "2020-OPEN-SPA-VIEW": goto L_2020_OPEN_SPA_VIEW; break;
                case "2030-FETCH-SPA-VIEW": goto L_2030_FETCH_SPA_VIEW; break;
                case "2050-CLOSE-SPA-VIEW": goto L_2050_CLOSE_SPA_VIEW; break;
                case "2040-DETERMINE-PARTICIPATION": goto L_2040_DETERMINE_PARTICIPATION; break;
                case "1149C-CLOSE-CLIENT-VIEW": goto L_1149C_CLOSE_CLIENT_VIEW; break;
                default: break;
            }
        #endregion

        #region MAIN-0798233759
        L_MAIN_0798233759:;
            Perform("PARA-0798233759-INIT", "PARA-0798233759-INIT-EXIT"); if (Control.ExitProgram) { return; }    //COBOL==> PERFORM PARA-0798233759-INIT THRU PARA-0798233759-INIT-EXIT
            Perform("PARA-0798233759", "PARA-0798233759-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM PARA-0798233759 THRU PARA-0798233759-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        #endregion MAIN-0798233759

        #region PARA-0798233759
        L_PARA_0798233759:;
            WS.FUNC_0798233759_ESC_FLAG.SetValue("N");                                                          //COBOL==> MOVE 'N' TO FUNC-0798233759-ESC-FLAG.
            ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
            ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            ///COMMENT: ****************************************************************
            ///COMMENT:                                                                *
            ///COMMENT:  INCLUDE NAME:  SWCSZG64.                                      *
            ///COMMENT:      EAB NAME:  SWEXGR20.                                      *
            ///COMMENT:   DESCRIPTION:  0000-ADABAS-ROUTINE.                           *
            ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                            *
            ///COMMENT:                                                                *
            ///COMMENT:       ACTIONS:  RECEIVE SOCIAL-SECURITY-NUMBER.                *
            ///COMMENT:                 READ CLIENT-DBF.                               *
            ///COMMENT:                 ACCUMULATE ALL RECORDS FOR SSN.                *
            ///COMMENT:                 DETERMINE BY HIERARCHY                         *
            ///COMMENT:                         WHICH RECORD TO USE.                   *
            ///COMMENT:                 RETURN  CLIENT-SURNAME                         *
            ///COMMENT:                         CLIENT-FIRST-NAME                      *
            ///COMMENT:                         CLIENT-MIDDLE-INITIAL                  *
            ///COMMENT:                         CLIENT-SOCIAL-SECURITY-NUMBER          *
            ///COMMENT:                         CLIENT-DATE-OF-BIRTH                   *
            ///COMMENT:                         CLIENT-SEX                             *
            ///COMMENT:                         CLIENT-SYSTEM-PARTICIPATION-INDICATORS *
            ///COMMENT:                         ABEND-FIELDS.                          *
            ///COMMENT:                                                                *
            ///COMMENT:       CREATED:  20-JUN-97.                                     *
            ///COMMENT:            BY:  CTG/CEB.                                       *
            ///COMMENT:                                                                *
            ///COMMENT: ****************************************************************
            ///COMMENT: ** MAINTENANCE *** MAINTENANCE *** MAINTENANCE *** MAINTENANCE **
            ///COMMENT:                       CHANGE
            ///COMMENT:  DATE      AUTHOR     CONTROL DESCRIPTION
            ///COMMENT:  --------  ---------- ------- ----------------------------------
            ///COMMENT:  03/2014   JCHRISTIAN CQ35825 ADABAS TO DB2 KEES PHASE 3 CHANGES.
            ///COMMENT: REPLACE READS OF ADABAS CLIENT-DBF AND CLIENT-BASIC-DBF TABLES
            ///COMMENT: WITH READS OF DB2 DATA SYNC TABLES KSD_CLIENT AND
            ///COMMENT: KSD_CLIENT-BASIC. OBTAIN SYSTEM PARTICIPATION FLAGS FROM NEW
            ///COMMENT: DB2 DATA SYNC TABLE KSD_SYSTEM_PART.  MODIFY ERROR HANDLING TO
            ///COMMENT: CHECK DB2 ERROR CODES BUT CONTINUE TO USE EXISTING ADABAS EXPORT
            ///COMMENT: ABEND FIELDS.  REMOVE/COMMENT UNNECESSARY ADABAS SPECIFIC CODE.
            ///COMMENT:  08/29/2017    RKM            ADDED WITH UR TO QUERIES
            ///COMMENT: ****************************************************************
            ///COMMENT: ****************************************************************
            if (returnLabel == "PARA-0798233759") { return; }  //Check for pass through to next method
        #endregion PARA-0798233759

        #region 0000-DATABASE-ROUTINE
        L_0000_DATABASE_ROUTINE:;
            WS.WS_MSG_X.SetValue("*SWEXGR20*");                                                                 //COBOL==> MOVE '*SWEXGR20*' TO WS-MSG-X.
                                                                                                                //COMMENT: ** JMC TEMPORARY CODE FOR DISPLAY ***
            WS.WS_MSG_1.SetValue("PROGRAM STARTED...");                                                         //COBOL==> MOVE 'PROGRAM STARTED...' TO WS-MSG-1.
                                                                                                                //COMMENT:     DISPLAY WS-MSG-X.
            WS.CL149_CSR_OPEN.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO CL149-CSR-OPEN.
            WS.MV_ABEND_FIELDS.SetValueWithSpaces();                                                            //COBOL==> MOVE SPACES TO MV-ABEND-FIELDS SV-CLIENT-DATA-TABLE.
            WS.SV_CLIENT_DATA_TABLE.SetValueWithSpaces();
            //COMMENT: ****************************************************************
            //COMMENT: *** MOVE IMPORT FIELDS TO WORKING-STORAGE FIELDS.
            //COMMENT: ****************************************************************
            WS.MV_SSN_X9.SetValue(LS.SSN_0001);                                                                 //COBOL==> MOVE SSN-0001 TO MV-SSN-X9.
                                                                                                                //COMMENT: ** JMC TEMPORARY CODE FOR DISPLAY *******************************
            WS.WS_MSG_FIELD.SetValue("IMPORT SSN              =");                                              //COBOL==> MOVE 'IMPORT SSN              =' TO WS-MSG-FIELD.
            WS.WS_MSG_VALUE.SetValue(WS.MV_SSN_X9);                                                             //COBOL==> MOVE MV-SSN-X9 TO WS-MSG-VALUE.
                                                                                                                //COMMENT:     DISPLAY WS-MSG-X.
                                                                                                                //COMMENT: *****************************************************************
            if (WS.MV_SSN_X9.IsEqualTo("CLOSE"))                                                                //COBOL==> IF MV-SSN-X9 = 'CLOSE'
            {
                //COMMENT:         GO TO 9999-CLOSE-FILE
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: ****************************************************************
            if ((!(WS.MV_SSN_X9.IsNumericValue()))
             || (WS.MV_SSN.IsEqualTo(0)))                //COBOL==> IF MV-SSN-X9 NOT NUMERIC OR MV-SSN = ZERO
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("SSN");                                                              //COBOL==> MOVE 'SSN' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:     MOVE MV-SSN      TO V-SSN149A.
            WS.DBK9_SSN.SetValue(WS.MV_SSN);                                                                    //COBOL==> MOVE MV-SSN TO DBK9-SSN.
            Perform("1149D-DECLARE-CLIENT-VIEW", "1149D-EXIT"); if (Control.ExitProgram) { return; }              //COBOL==> PERFORM 1149D-DECLARE-CLIENT-VIEW THRU 1149D-EXIT.
            Perform("1149O-OPEN-CLIENT-VIEW", "1149O-EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 1149O-OPEN-CLIENT-VIEW THRU 1149O-EXIT.
            ///COMMENT:     PERFORM 1149F-READLOG-CLIENT-DBF
            ///COMMENT:        THRU 1149F-READLOG-EXIT.
            if (returnLabel == "0000-DATABASE-ROUTINE") { return; }  //Check for pass through to next method
        #endregion 0000-DATABASE-ROUTINE

        #region 1000-GET-RECORDS
        L_1000_GET_RECORDS:;
            //COMMENT:     DISPLAY '*** 1000-GET-RECORDS ENTRY'.
            Perform("1149F-FETCH-CLIENT", "1149F-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 1149F-FETCH-CLIENT THRU 1149F-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:     IF EOF149A OR
                                                                                                                //COMMENT:        SSN149A NOT =  V-SSN149A
                                                                                                                //COMMENT:         GO TO 1000-CHOOSE-RECORD
                                                                                                                //COMMENT:     END-IF.
            if (WS.CL149_EOF_YES.Value)                                                                         //COBOL==> IF CL149-EOF-YES
            {
                goto L_1000_CHOOSE_RECORD;                                                                          //COBOL==> GO TO 1000-CHOOSE-RECORD
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_CLIENT_NAME.SetValue(WS.CLIENT_NAME);                                                         //COBOL==> MOVE CLIENT-NAME TO MV-CLIENT-NAME DBK9-CLIENT-NAME.
            WS.DBK9_CLIENT_NAME.SetValue(WS.CLIENT_NAME);
            //COMMENT:     MOVE CLIENT-DATE-OF-BIRTH TO MV-DATE-OF-BIRTH.
            WS.MV_DATE_OF_BIRTH_10.SetValue(WS.CLIENT_DATE_OF_BIRTH);                                           //COBOL==> MOVE CLIENT-DATE-OF-BIRTH TO MV-DATE-OF-BIRTH-10.
            WS.MV_YYYY.SetValue(WS.MV_YYYY_10);                                                                 //COBOL==> MOVE MV-YYYY-10 TO MV-YYYY.
            WS.MV_MM.SetValue(WS.MV_MM_10);                                                                     //COBOL==> MOVE MV-MM-10 TO MV-MM.
            WS.MV_DD.SetValue(WS.MV_DD_10);                                                                     //COBOL==> MOVE MV-DD-10 TO MV-DD.
            WS.MV_SEX.SetValue(WS.CLIENT_GENDER);                                                               //COBOL==> MOVE CLIENT-GENDER TO MV-SEX.
            WS.MV_CLIENT_ID.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);                                               //COBOL==> MOVE CLIENT-FK-CLB-CLIENT-NO TO MV-CLIENT-ID DBK9-CLIENT-NUMBER.
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.CLIENT_FK_CLB_CLIENT_NO);
            //COMMENT:      MOVE CLIENT-POINTER149    TO MV-CLIENT-POINTER.
            //COMMENT:     GET SYSTEM PARTICIPATIONS FOR CLIENT FROM KSD_CLIENT_BASIC
            Perform("2000-PROCESS-SYSTEM-PART", "2000-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 2000-PROCESS-SYSTEM-PART THRU 2000-EXIT.
            WS.MV_CLIENT_NUMBER_X10.SetValue(WS.MV_CLIENT_ID);                                                  //COBOL==> MOVE MV-CLIENT-ID TO MV-CLIENT-NUMBER-X10.
                                                                                                                //COMMENT:     IF MV-CLIENT-NUMBER       =  CLIENT-NUMBER154
            if (WS.MV_CLIENT_NUMBER.IsEqualTo(WS.CLB_CLIENT_NUMBER))                                            //COBOL==> IF MV-CLIENT-NUMBER = CLB-CLIENT-NUMBER
            {
                goto L_1000_CONT;                                                                                   //COBOL==> GO TO 1000-CONT
            }                                                                                                   //COBOL==> END-IF.
            Perform("1154-READISN-CLIENT-BASIC-DBF", "1154-READISN-EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM 1154-READISN-CLIENT-BASIC-DBF THRU 1154-READISN-EXIT.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.CLB_CLIENT_NUMBER.IsEqualTo(WS.MV_CLIENT_NUMBER)))                                         //COBOL==> IF CLB-CLIENT-NUMBER NOT = MV-CLIENT-NUMBER
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("ISN");                                                              //COBOL==> MOVE 'ISN' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "1000-GET-RECORDS") { return; }  //Check for pass through to next method
        #endregion 1000-GET-RECORDS

        #region 1000-CONT
        L_1000_CONT:;
            //COMMENT:     DISPLAY '*** 1000-CONT            ENTRY'.
            WS.CLB_DATE_OF_BIRTH_10.SetValue(WS.CLB_DATE_OF_BIRTH);                                             //COBOL==> MOVE CLB-DATE-OF-BIRTH TO CLB-DATE-OF-BIRTH-10.
            WS.CLB_YYYY.SetValue(WS.CLB_YYYY_10);                                                               //COBOL==> MOVE CLB-YYYY-10 TO CLB-YYYY.
            WS.CLB_MM.SetValue(WS.CLB_MM_10);                                                                   //COBOL==> MOVE CLB-MM-10 TO CLB-MM.
            WS.CLB_DD.SetValue(WS.CLB_DD_10);                                                                   //COBOL==> MOVE CLB-DD-10 TO CLB-DD.
            if ((((((WS.CLB_CLIENT_SURNAME.IsEqualTo(WS.MV_CLIENT_SURNAME))
             && (WS.CLB_CLIENT_GIVEN_NAME.IsEqualTo(WS.MV_CLIENT_GIVEN_NAME)))
             && (WS.CLB_CLIENT_INITIALS.IsEqualTo(WS.MV_CLIENT_INITIAL)))
             && (WS.CLB_DATE_OF_BIRTH_X.IsEqualTo(WS.MV_DATE_OF_BIRTH)))
             && (WS.CLB_SSN.IsEqualTo(WS.MV_SSN)))
             && (WS.CLB_GENDER.IsEqualTo(WS.MV_SEX)))  //COBOL==> IF CLB-CLIENT-SURNAME = MV-CLIENT-SURNAME AND CLB-CLIENT-GIVEN-NAME = MV-CLIENT-GIVEN-NAME AND CLB-CLIENT-INITIALS = MV-CLIENT-INITIAL AND CLB-DATE-OF-BIRTH-X = MV-DATE-OF-BIRTH AND CLB-SSN = MV-SSN AND CLB-GENDER = MV-SEX
            {
                WS.MV_CPT.SetValue(1);                                                                              //COBOL==> MOVE 1 TO MV-CPT
                WS.MV_CPT_MAX.SetValue(99);                                                                         //COBOL==> MOVE 99 TO MV-CPT-MAX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.MV_CPT.Add(1);                                                                                   //COBOL==> ADD 1 TO MV-CPT
                if (WS.MV_CPT.IsGreaterThan(WS.MV_CPT_MAX))                                                         //COBOL==> IF MV-CPT > MV-CPT-MAX
                {
                    WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                    WS.MV_ADA_FILE_NUMBER.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-FILE-NUMBER
                    WS.MV_ADA_FILE_ACTION.SetValue("TBL");                                                              //COBOL==> MOVE 'TBL' TO MV-ADA-FILE-ACTION
                    WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                    goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SV_CLIENT_POINTER[WS.MV_CPT.AsInt()].SetValue(WS.MV_CLIENT_POINTER);                             //COBOL==> MOVE MV-CLIENT-POINTER TO SV-CLIENT-POINTER ( MV-CPT ) .
            WS.SV_DATE_OF_BIRTH_SEX[WS.MV_CPT.AsInt()].SetValue(WS.MV_DATE_OF_BIRTH_SEX);                       //COBOL==> MOVE MV-DATE-OF-BIRTH-SEX TO SV-DATE-OF-BIRTH-SEX ( MV-CPT ) .
            WS.SV_CLIENT_NAME[WS.MV_CPT.AsInt()].SetValue(WS.MV_CLIENT_NAME);                                   //COBOL==> MOVE MV-CLIENT-NAME TO SV-CLIENT-NAME ( MV-CPT ) .
            if (WS.MV_CPT_MAX.IsEqualTo(99))                                                                    //COBOL==> IF MV-CPT-MAX = 99
            {
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:     PERFORM 1149N-READLOG-CLIENT-DBF
                                                                                                                //COMMENT:        THRU 1149N-READLOG-EXIT.
            goto L_1000_GET_RECORDS;                                                                            //COBOL==> GO TO 1000-GET-RECORDS.
        #endregion 1000-CONT

        #region 1000-CHOOSE-RECORD
        L_1000_CHOOSE_RECORD:;
            //COMMENT:     DISPLAY '*** 1000-CHOOSE-RECORD   ENTRY'.
            if (WS.MV_CPT.IsEqualTo(1))                                                                         //COBOL==> IF MV-CPT = 1
            {
                goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_CPT_MAX.SetValue(WS.MV_CPT);                                                                  //COBOL==> MOVE MV-CPT TO MV-CPT-MAX.
            for (WS.MV_CPT.SetValue(1); (!(WS.MV_CPT.IsGreaterThan(WS.MV_CPT_MAX))); WS.MV_CPT.Add(1))         //COBOL==> PERFORM VARYING MV-CPT FROM 1 BY 1 UNTIL MV-CPT > MV-CPT-MAX
            {
                if (!(WS.SV_SYS_PART_CSE[WS.MV_CPT.AsInt()].IsSpaces()))                                            //COBOL==> IF SV-SYS-PART-CSE ( MV-CPT ) NOT = SPACE
                {
                    goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            for (WS.MV_CPT.SetValue(1); (!(WS.MV_CPT.IsGreaterThan(WS.MV_CPT_MAX))); WS.MV_CPT.Add(1))         //COBOL==> PERFORM VARYING MV-CPT FROM 1 BY 1 UNTIL MV-CPT > MV-CPT-MAX
            {
                if (!(WS.SV_SYS_PART_AE[WS.MV_CPT.AsInt()].IsSpaces()))                                             //COBOL==> IF SV-SYS-PART-AE ( MV-CPT ) NOT = SPACE
                {
                    goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            for (WS.MV_CPT.SetValue(1); (!(WS.MV_CPT.IsGreaterThan(WS.MV_CPT_MAX))); WS.MV_CPT.Add(1))         //COBOL==> PERFORM VARYING MV-CPT FROM 1 BY 1 UNTIL MV-CPT > MV-CPT-MAX
            {
                if (!(WS.SV_SYS_PART_KSCARES[WS.MV_CPT.AsInt()].IsSpaces()))                                        //COBOL==> IF SV-SYS-PART-KSCARES ( MV-CPT ) NOT = SPACE
                {
                    goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            for (WS.MV_CPT.SetValue(1); (!(WS.MV_CPT.IsGreaterThan(WS.MV_CPT_MAX))); WS.MV_CPT.Add(1))         //COBOL==> PERFORM VARYING MV-CPT FROM 1 BY 1 UNTIL MV-CPT > MV-CPT-MAX
            {
                if (!(WS.SV_SYS_PART_FACTS[WS.MV_CPT.AsInt()].IsSpaces()))                                          //COBOL==> IF SV-SYS-PART-FACTS ( MV-CPT ) NOT = SPACE
                {
                    goto L_1000_EXIT;                                                                                   //COBOL==> GO TO 1000-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            WS.MV_CPT.SetValue(1);                                                                              //COBOL==> MOVE 1 TO MV-CPT.
            if (returnLabel == "1000-CHOOSE-RECORD") { return; }  //Check for pass through to next method
        #endregion 1000-CHOOSE-RECORD

        #region 1000-EXIT
        L_1000_EXIT:;
            //COMMENT:     DISPLAY '*** 1000-EXIT            ENTRY'.
            if (WS.MV_CPT.IsEqualTo(0))                                                                         //COBOL==> IF MV-CPT = ZERO
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue(" NF");                                                              //COBOL==> MOVE ' NF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValueWithZeroes();                                                         //COBOL==> MOVE ZERO TO MV-ADA-RESPONSE-CD
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.MV_CLIENT_POINTER.SetValue(WS.SV_CLIENT_POINTER[WS.MV_CPT.AsInt()]);                             //COBOL==> MOVE SV-CLIENT-POINTER ( MV-CPT ) TO MV-CLIENT-POINTER.
            WS.MV_DATE_OF_BIRTH_SEX.SetValue(WS.SV_DATE_OF_BIRTH_SEX[WS.MV_CPT.AsInt()]);                       //COBOL==> MOVE SV-DATE-OF-BIRTH-SEX ( MV-CPT ) TO MV-DATE-OF-BIRTH-SEX.
            WS.MV_CLIENT_NAME.SetValue(WS.SV_CLIENT_NAME[WS.MV_CPT.AsInt()]);                                   //COBOL==> MOVE SV-CLIENT-NAME ( MV-CPT ) TO MV-CLIENT-NAME.
            if ((WS.MV_DATE_OF_BIRTH.IsNumericValue())
             && (WS.MV_DATE_OF_BIRTH.IsGreaterThan("00010101")))  //COBOL==> IF MV-DATE-OF-BIRTH NUMERIC AND MV-DATE-OF-BIRTH > '00010101'
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.MV_DATE_OF_BIRTH.SetValue("00000000");                                                           //COBOL==> MOVE '00000000' TO MV-DATE-OF-BIRTH
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: *** MOVE WORKING-STORAGE FIELDS TO EXPORT FIELDS.
                                                                                                                //COMMENT: ****************************************************************
            LS.SSN_0002.SetValue(WS.MV_SSN_X9);                                                                 //COBOL==> MOVE MV-SSN-X9 TO SSN-0002.
            LS.FIRST_NAME_0002.SetValue(WS.MV_CLIENT_GIVEN_NAME);                                               //COBOL==> MOVE MV-CLIENT-GIVEN-NAME TO FIRST-NAME-0002.
            LS.MIDDLE_INITIAL_0002.SetValue(WS.MV_CLIENT_INITIAL);                                              //COBOL==> MOVE MV-CLIENT-INITIAL TO MIDDLE-INITIAL-0002.
            LS.LAST_NAME_0002.SetValue(WS.MV_CLIENT_SURNAME);                                                   //COBOL==> MOVE MV-CLIENT-SURNAME TO LAST-NAME-0002.
            LS.SEX_0002.SetValue(WS.MV_SEX);                                                                    //COBOL==> MOVE MV-SEX TO SEX-0002.
            LS.DOB_0002XX.SetValue(WS.MV_DATE_OF_BIRTH);                                                        //COBOL==> MOVE MV-DATE-OF-BIRTH TO DOB-0002XX.
            LS.NUMBER_0002.SetValue(WS.MV_CLIENT_ID);                                                           //COBOL==> MOVE MV-CLIENT-ID TO NUMBER-0002.
                                                                                                                //COMMENT:     DISPLAY 'EXPORT     SSN-0002 = ' SSN-0002.
                                                                                                                //COMMENT:     DISPLAY 'EXPORT     FIRST-NAME-0002 = ' FIRST-NAME-0002.
                                                                                                                //COMMENT:     DISPLAY 'EXPORT     MIDDLE-INITIAL-0002 = '
                                                                                                                //COMMENT:                                             MIDDLE-INITIAL-0002.
                                                                                                                //COMMENT:     DISPLAY 'EXPORT     LAST-NAME-0002 = ' LAST-NAME-0002.
                                                                                                                //COMMENT:     DISPLAY 'EXPORT     SEX-0002 = ' SEX-0002.
                                                                                                                //COMMENT:     DISPLAY 'EXPORT     DOB-0002XX = ' DOB-0002XX.
                                                                                                                //COMMENT:     DISPLAY 'EXPORT     NUMBER-0002 = ' NUMBER-0002.
                                                                                                                //COMMENT: ****************************************************************
                                                                                                                //COMMENT: ****************************************************************
            goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT.
        ///COMMENT: ****************************************************************
        ///COMMENT: ****************************************************************
        ///COMMENT:     START 1149 ROUTINES DECLARE, OPEN, FETCH AND CLOSE *********
        ///COMMENT:     FOR DB2 DATA SYNC TABLE KSD_CLIENT                 *********
        ///COMMENT: ****************************************************************
        ///COMMENT: ****************************************************************
        #endregion 1000-EXIT

        #region 1149D-DECLARE-CLIENT-VIEW
        L_1149D_DECLARE_CLIENT_VIEW:;
            //COMMENT:     DISPLAY '*** 1149D-DECLARE-CLIENT-VIEW            ENTRY'.
            //COMMENT: DECLARE VIEW FOR ACCESSING ALL KSD_CLIENT ROWS THAT MATCH SSN
            // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE CL-VIEW CURSOR FOR SELECT SSN , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG , CLIENT_NAME , FK_CLB_CLIENT_NO FROM KSD_CLIENT WHERE ( SSN = :DBK9-SSN ) ORDER BY CLIENT_NAME , DATE_OF_BIRTH , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG WITH UR END-EXEC.
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("1149D-DECLARE-CLIENT-VIEW FAILED    SQLCODE=");                               //COBOL==> MOVE '1149D-DECLARE-CLIENT-VIEW FAILED    SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "1149D-DECLARE-CLIENT-VIEW") { return; }  //Check for pass through to next method
        #endregion 1149D-DECLARE-CLIENT-VIEW

        #region 1149D-EXIT
        L_1149D_EXIT:;
            if (returnLabel == "1149D-EXIT") { return; }                                                        //COBOL==> EXIT.
        #endregion 1149D-EXIT

        #region 1149O-OPEN-CLIENT-VIEW
        L_1149O_OPEN_CLIENT_VIEW:;
            //COMMENT:     DISPLAY '*** 1149O-OPEN-CLIENT-VIEW            ENTRY'.
            //COMMENT:     OPEN CURSOR
            DbConv.OpenReader("CL-VIEW");                                                                       //COBOL==> EXEC SQL OPEN CL-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.CL149_CSR_OPEN.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO CL149-CSR-OPEN
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("1149O-OPEN-CLIENT-VIEW FAILED    SQLCODE=");                                  //COBOL==> MOVE '1149O-OPEN-CLIENT-VIEW FAILED    SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "1149O-OPEN-CLIENT-VIEW") { return; }  //Check for pass through to next method
        #endregion 1149O-OPEN-CLIENT-VIEW

        #region 1149O-EXIT
        L_1149O_EXIT:;
            if (returnLabel == "1149O-EXIT") { return; }                                                        //COBOL==> EXIT.
        #endregion 1149O-EXIT

        #region 1149F-FETCH-CLIENT
        L_1149F_FETCH_CLIENT:;
            //COMMENT:     DISPLAY '*** 1149F-FETCH-CLIENT            ENTRY'.
            //COMMENT:     FETCH ALL ROWS IN KSD_CLIENT.  EXECUTED MULTIPLE TIMES UNTIL
            //COMMENT:     END-OF-FILE IS REACHED.
            DbConv.FetchReaderRow("CL-VIEW",                                                                 //COBOL==> EXEC SQL FETCH CL-VIEW INTO :CLIENT-SSN , :CLIENT-DATE-OF-BIRTH , :CLIENT-GENDER , :CLIENT-VERIFIED-SSN-FLAG , :CLIENT-NAME , :CLIENT-FK-CLB-CLIENT-NO END-EXEC.
                             WS.CLIENT_SSN, WS.CLIENT_DATE_OF_BIRTH, WS.CLIENT_GENDER, WS.CLIENT_VERIFIED_SSN_FLAG, WS.CLIENT_NAME, WS.CLIENT_FK_CLB_CLIENT_NO);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
                WS.CL149_EOF_NO.SetValue(true);                                                                     //COBOL==> SET CL149-EOF-NO TO TRUE
                                                                                                                    //COMMENT:         PERFORM 99610-POPULATE-SYSTEM-CODE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.CL149_EOF_YES.SetValue(true);                                                                    //COBOL==> SET CL149-EOF-YES TO TRUE
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("1149F-FETCH-CLIENT CLIENT NOT FOUND SQLCODE=");                               //COBOL==> MOVE '1149F-FETCH-CLIENT CLIENT NOT FOUND SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLN");                                                              //COBOL==> MOVE 'RLN' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL149_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL149-ERR-YES TO TRUE
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("1149F-FETCH-CLIENT FAILED    SQLCODE=");                                      //COBOL==> MOVE '1149F-FETCH-CLIENT FAILED    SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "1149F-FETCH-CLIENT") { return; }  //Check for pass through to next method
        #endregion 1149F-FETCH-CLIENT

        #region 1149F-EXIT
        L_1149F_EXIT:;
            if (returnLabel == "1149F-EXIT") { return; }                                                        //COBOL==> EXIT.
        #endregion 1149F-EXIT

        #region 1149C-CLOSE-CLIENT-VIEW
        L_1149C_CLOSE_CLIENT_VIEW:;
            //COMMENT:     DISPLAY '*** 1149C-CLOSE-CLIENT-VIEW            ENTRY'.
            //COMMENT:     OPEN CURSOR
            DbConv.CloseReader("CL-VIEW");                                                                      //COBOL==> EXEC SQL CLOSE CL-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLN");                                                              //COBOL==> MOVE 'RLN' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("1149C-CLOSE-CLIENT-VIEW FAILED    SQLCODE=");                                 //COBOL==> MOVE '1149C-CLOSE-CLIENT-VIEW FAILED    SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "1149C-CLOSE-CLIENT-VIEW") { return; }  //Check for pass through to next method
        #endregion 1149C-CLOSE-CLIENT-VIEW

        #region 1149C-EXIT
        L_1149C_EXIT:;
            if (returnLabel == "1149C-EXIT") { return; }                                                        //COBOL==> EXIT.
        ///COMMENT: ****************************************************************
        ///COMMENT: ****************************************************************
        ///COMMENT:     END 1149 ROUTINES DECLARE, OPEN, FETCH AND CLOSE   *********
        ///COMMENT: ****************************************************************
        ///COMMENT: ****************************************************************
        #endregion 1149C-EXIT

        #region 1154-READISN-CLIENT-BASIC-DBF
        L_1154_READISN_CLIENT_BASIC_DBF:;
            //COMMENT:     DISPLAY '*** 1154-READISN-CLIENT-BASIC-DBF            ENTRY'.
            DbConv.ExecuteSqlQueryWithUR("SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , SSN , GENDER , DATE_OF_BIRTH , SUFFIX_NAME INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} FROM KSD_CLIENT_BASIC WHERE ( CLIENT_NUMBER = {8} ) ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , SSN , GENDER , DATE_OF_BIRTH , SUFFIX_NAME INTO :CLB-CLIENT-NUMBER , :CLB-CLIENT-GIVEN-NAME , :CLB-CLIENT-INITIALS , :CLB-CLIENT-SURNAME , :CLB-SSN , :CLB-GENDER , :CLB-DATE-OF-BIRTH , :CLB-SUFFIX-NAME FROM KSD_CLIENT_BASIC WHERE ( CLIENT_NUMBER = :MV-CLIENT-ID ) WITH UR END-EXEC.
                                 WS.CLB_CLIENT_NUMBER, WS.CLB_CLIENT_GIVEN_NAME, WS.CLB_CLIENT_INITIALS, WS.CLB_CLIENT_SURNAME, WS.CLB_SSN, WS.CLB_GENDER, WS.CLB_DATE_OF_BIRTH, WS.CLB_SUFFIX_NAME, WS.MV_CLIENT_ID);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN 0
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.CL149_EOF_YES.SetValue(true);                                                                    //COBOL==> SET CL149-EOF-YES TO TRUE
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("1154-READISN-CLIENT-BASIC CLIENT NOT FOUND SQLCODE=");                        //COBOL==> MOVE '1154-READISN-CLIENT-BASIC CLIENT NOT FOUND SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(154);                                                                //COBOL==> MOVE 154 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RI ");                                                              //COBOL==> MOVE 'RI ' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("1154-READISN-CLIENT-BASIC FAILED    SQLCODE=");                               //COBOL==> MOVE '1154-READISN-CLIENT-BASIC FAILED    SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "1154-READISN-CLIENT-BASIC-DBF") { return; }  //Check for pass through to next method
        #endregion 1154-READISN-CLIENT-BASIC-DBF

        #region 1154-READISN-EXIT
        L_1154_READISN_EXIT:;
            if (returnLabel == "1154-READISN-EXIT") { return; }                                                 //COBOL==> EXIT.
        ///COMMENT: ****************************************************************
        ///COMMENT: ****************************************************************
        ///COMMENT:     START 2000 ROUTINES DECLARE, OPEN, FETCH AND CLOSE *********
        ///COMMENT:     FOR DB2 DATA SYNC TABLE KSD_SYSTEM_PART            *********
        ///COMMENT: ****************************************************************
        ///COMMENT: ****************************************************************
        #endregion 1154-READISN-EXIT

        #region 2000-PROCESS-SYSTEM-PART
        L_2000_PROCESS_SYSTEM_PART:;
            //COMMENT:     DISPLAY '*** 2000-PROCESS-SYSTEM-PART            ENTRY'.
            Perform("2010-DECLARE-SPA-VIEW", "2010-EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM 2010-DECLARE-SPA-VIEW THRU 2010-EXIT.
            if (WS.CL149_ERR_YES.Value)                                                                         //COBOL==> IF CL149-ERR-YES
            {
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            Perform("2020-OPEN-SPA-VIEW", "2020-EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM 2020-OPEN-SPA-VIEW THRU 2020-EXIT.
            if (WS.CL149_ERR_YES.Value)                                                                         //COBOL==> IF CL149-ERR-YES
            {
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            while (!((WS.CL149_EOF_YES.Value) || (WS.CL149_ERR_YES.Value)))                                     //COBOL==> PERFORM 2030-FETCH-SPA-VIEW THRU 2030-EXIT UNTIL CL149-EOF-YES OR CL149-ERR-YES.
            {
                Perform("2030-FETCH-SPA-VIEW", "2030-EXIT"); if (Control.ExitProgram) { return; }
            }
            Perform("2050-CLOSE-SPA-VIEW", "2050-EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 2050-CLOSE-SPA-VIEW THRU 2050-EXIT.
            if (WS.CL149_ERR_YES.Value)                                                                         //COBOL==> IF CL149-ERR-YES
            {
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "2000-PROCESS-SYSTEM-PART") { return; }  //Check for pass through to next method
        #endregion 2000-PROCESS-SYSTEM-PART

        #region 2000-EXIT
        L_2000_EXIT:;
            if (returnLabel == "2000-EXIT") { return; }                                                         //COBOL==> EXIT.
        #endregion 2000-EXIT

        #region 2010-DECLARE-SPA-VIEW
        L_2010_DECLARE_SPA_VIEW:;
            //COMMENT:     DISPLAY '*** 2010-DECLARE-SPA-VIEW            ENTRY'.
            // Declare Relocated to Method SetUpProgram!                                                        //COBOL==> EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE ( FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER ) AND ( FK_CLI_CLIENT_NAME = :DBK9-CLIENT-NAME ) AND ( FK_CLI_SSN = :DBK9-SSN ) WITH UR END-EXEC.
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL149_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL149-ERR-YES TO TRUE
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("2010-DECLARE-SPA-VIEW FAILED    SQLCODE=");                                   //COBOL==> MOVE '2010-DECLARE-SPA-VIEW FAILED    SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "2010-DECLARE-SPA-VIEW") { return; }  //Check for pass through to next method
        #endregion 2010-DECLARE-SPA-VIEW

        #region 2010-EXIT
        L_2010_EXIT:;
            if (returnLabel == "2010-EXIT") { return; }                                                         //COBOL==> EXIT.
        #endregion 2010-EXIT

        #region 2020-OPEN-SPA-VIEW
        L_2020_OPEN_SPA_VIEW:;
            //COMMENT:     DISPLAY '*** 2020-OPEN-SPA-VIEW            ENTRY'.
            DbConv.OpenReader("SPA-VIEW");                                                                      //COBOL==> EXEC SQL OPEN SPA-VIEW END-EXEC.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLF");                                                              //COBOL==> MOVE 'RLF' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL149_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL149-ERR-YES TO TRUE
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("2020-OPEN-SPA-VIEW FAILED    SQLCODE=");                                      //COBOL==> MOVE '2020-OPEN-SPA-VIEW FAILED    SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "2020-OPEN-SPA-VIEW") { return; }  //Check for pass through to next method
        #endregion 2020-OPEN-SPA-VIEW

        #region 2020-EXIT
        L_2020_EXIT:;
            if (returnLabel == "2020-EXIT") { return; }                                                         //COBOL==> EXIT.
        #endregion 2020-EXIT

        #region 2030-FETCH-SPA-VIEW
        L_2030_FETCH_SPA_VIEW:;
            //COMMENT: *   DISPLAY '*** 2030-FETCH-SPA-VIEW            ENTRY'.
            DbConv.FetchReaderRow("SPA-VIEW",                                                                //COBOL==> EXEC SQL FETCH SPA-VIEW INTO :SP-SYSTEM-CODE , :SP-PARTICIPATION-FLAG END-EXEC.
                             WS.SP_SYSTEM_CODE, WS.SP_PARTICIPATION_FLAG);
            // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                WS.CL149_EOF_NO.SetValue(true);                                                                     //COBOL==> SET CL149-EOF-NO TO TRUE
                Perform("2040-DETERMINE-PARTICIPATION", "2040-EXIT"); if (Control.ExitProgram) { return; }            //COBOL==> PERFORM 2040-DETERMINE-PARTICIPATION THRU 2040-EXIT
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((DbConv.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.CL149_EOF_YES.SetValue(true);                                                                    //COBOL==> SET CL149-EOF-YES TO TRUE
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("2030-FETCH-SPA-VIEW CLIENT NOT FOUND SQLCODE=");                              //COBOL==> MOVE '2030-FETCH-SPA-VIEW CLIENT NOT FOUND SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLN");                                                              //COBOL==> MOVE 'RLN' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL149_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL149-ERR-YES TO TRUE
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("2030-FETCH-SPA-VIEW FAILED    SQLCODE=");                                     //COBOL==> MOVE '2030-FETCH-SPA-VIEW FAILED    SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "2030-FETCH-SPA-VIEW") { return; }  //Check for pass through to next method
        #endregion 2030-FETCH-SPA-VIEW

        #region 2030-EXIT
        L_2030_EXIT:;
            if (returnLabel == "2030-EXIT") { return; }                                                         //COBOL==> EXIT.
        #endregion 2030-EXIT

        #region 2040-DETERMINE-PARTICIPATION
        L_2040_DETERMINE_PARTICIPATION:;
            //COMMENT:     DISPLAY '*** 2040-DETERMINE-PARTICIPATION            ENTRY'.
            //COMMENT:     SET SYSTEM PARTICIPATION FLAGS FOUND FOR CLIENT
            // EvaluateList !TRUE!                                                                              //COBOL==> EVALUATE TRUE
            if (WS.SP_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_AE))                                         //COBOL==> WHEN SP-SYSTEM-CODE = WS9-SYSTEM-CODE-AE
            {
                WS.MV_SYS_PART_AE.SetValue(WS.SP_PARTICIPATION_FLAG);                                               //COBOL==> MOVE SP-PARTICIPATION-FLAG TO MV-SYS-PART-AE
            }                                                                                               //COBOL==> WHEN SP-SYSTEM-CODE = WS9-SYSTEM-CODE-CS
            else
            if (WS.SP_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_CS))
            {
                WS.MV_SYS_PART_CSE.SetValue(WS.SP_PARTICIPATION_FLAG);                                              //COBOL==> MOVE SP-PARTICIPATION-FLAG TO MV-SYS-PART-CSE
            }                                                                                               //COBOL==> WHEN SP-SYSTEM-CODE = WS9-SYSTEM-CODE-KA
            else
            if (WS.SP_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_KA))
            {
                WS.MV_SYS_PART_KANPAY.SetValue(WS.SP_PARTICIPATION_FLAG);                                           //COBOL==> MOVE SP-PARTICIPATION-FLAG TO MV-SYS-PART-KANPAY
            }                                                                                               //COBOL==> WHEN SP-SYSTEM-CODE = WS9-SYSTEM-CODE-KS
            else
            if (WS.SP_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_KS))
            {
                WS.MV_SYS_PART_KSCARES.SetValue(WS.SP_PARTICIPATION_FLAG);                                          //COBOL==> MOVE SP-PARTICIPATION-FLAG TO MV-SYS-PART-KSCARES
            }                                                                                               //COBOL==> WHEN SP-SYSTEM-CODE = WS9-SYSTEM-CODE-FA
            else
            if (WS.SP_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_FA))
            {
                WS.MV_SYS_PART_FACTS.SetValue(WS.SP_PARTICIPATION_FLAG);                                            //COBOL==> MOVE SP-PARTICIPATION-FLAG TO MV-SYS-PART-FACTS
            }                                                                                               //COBOL==> WHEN OTHER
            else
            {
                WS.WS_MSG_1.SetValue("2040-DETERMINE-PARTICIPATION    SYSTEM-CODE NOT DEFINED=");                   //COBOL==> MOVE '2040-DETERMINE-PARTICIPATION    SYSTEM-CODE NOT DEFINED=' TO WS-MSG-1
                WS.WS_MSG_CODE.SetValue(WS.SP_SYSTEM_CODE);                                                         //COBOL==> MOVE SP-SYSTEM-CODE TO WS-MSG-CODE
                                                                                                                    //COMMENT:         DISPLAY WS-MSG-X
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "2040-DETERMINE-PARTICIPATION") { return; }  //Check for pass through to next method
        #endregion 2040-DETERMINE-PARTICIPATION

        #region 2040-EXIT
        L_2040_EXIT:;
            if (returnLabel == "2040-EXIT") { return; }                                                         //COBOL==> EXIT.
        #endregion 2040-EXIT

        #region 2050-CLOSE-SPA-VIEW
        L_2050_CLOSE_SPA_VIEW:;
            //COMMENT:     DISPLAY '*** 2050-CLOSE-SPA-VIEW            ENTRY'.
            DbConv.CloseReader("SPA-VIEW");                                                                     //COBOL==> EXEC SQL CLOSE SPA-VIEW END-EXEC.
            if (WS.CL149_ERR_YES.Value)                                                                         //COBOL==> IF CL149-ERR-YES
            {
                //COMMENT: ALREADY SET PREVIOUSLY DON'T OVERWRITE PRIOR OUTPUT MESSAGE
                goto L_0000_DATABASE_EXIT;                                                                          //COBOL==> GO TO 0000-DATABASE-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                // EvaluateList !DbConv.SQLCA.SQLCODE!                                                              //COBOL==> EVALUATE SQLCODE
            if ((DbConv.SQLCA.SQLCODE.IsZeroes()))                                                              //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.MV_ABEND_TYPE.SetValue("A");                                                                     //COBOL==> MOVE 'A' TO MV-ABEND-TYPE
                WS.MV_ADA_FILE_NUMBER.SetValue(149);                                                                //COBOL==> MOVE 149 TO MV-ADA-FILE-NUMBER
                WS.MV_ADA_FILE_ACTION.SetValue("RLN");                                                              //COBOL==> MOVE 'RLN' TO MV-ADA-FILE-ACTION
                WS.MV_ADA_RESPONSE_CD.SetValue(DbConv.SQLCA.SQLCODE);                                               //COBOL==> MOVE SQLCODE TO MV-ADA-RESPONSE-CD
                WS.CL149_ERR_YES.SetValue(true);                                                                    //COBOL==> SET CL149-ERR-YES TO TRUE
                                                                                                                    //COMMENT: ** JMC DISPLAY SQL ERROR MESSAGE ***
                WS.WS_MSG_1.SetValue("2050-CLOSE-SPA-VIEW FAILED    SQLCODE=");                                     //COBOL==> MOVE '2050-CLOSE-SPA-VIEW FAILED    SQLCODE=' TO WS-MSG-1
                WS.WS_MSG_SQLCODE.SetValue(DbConv.SQLCA.SQLCODE);                                                   //COBOL==> MOVE SQLCODE TO WS-MSG-SQLCODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnLabel == "2050-CLOSE-SPA-VIEW") { return; }  //Check for pass through to next method
        #endregion 2050-CLOSE-SPA-VIEW

        #region 2050-EXIT
        L_2050_EXIT:;
            if (returnLabel == "2050-EXIT") { return; }                                                         //COBOL==> EXIT.
        #endregion 2050-EXIT

        #region 0000-DATABASE-EXIT
        L_0000_DATABASE_EXIT:;
            //COMMENT:     DISPLAY '*** 0000-DATABASE-EXIT            ENTRY'.
            if (WS.CL149_CSR_OPEN.IsEqualTo("Y"))                                                               //COBOL==> IF CL149-CSR-OPEN = 'Y'
            {
                Perform("1149C-CLOSE-CLIENT-VIEW", "1149C-EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM 1149C-CLOSE-CLIENT-VIEW THRU 1149C-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.MV_ABEND_TYPE_NONE.Value))                                                                //COBOL==> IF NOT MV-ABEND-TYPE-NONE
            {
                //COMMENT: ******* MOVE MV-ABEND-TYPE      TO TYPE-0003
                LS.ADABAS_FILE_NUMBER_0003.SetValue(WS.MV_ADA_FILE_NUMBER);                                         //COBOL==> MOVE MV-ADA-FILE-NUMBER TO ADABAS-FILE-NUMBER-0003
                LS.ADABAS_FILE_ACTION_0003.SetValue(WS.MV_ADA_FILE_ACTION);                                         //COBOL==> MOVE MV-ADA-FILE-ACTION TO ADABAS-FILE-ACTION-0003
                LS.ADABAS_RESPONSE_CD_0003.SetValue(WS.MV_ADA_RESPONSE_CD);                                         //COBOL==> MOVE MV-ADA-RESPONSE-CD TO ADABAS-RESPONSE-CD-0003
            }                                                                                                   //COBOL==> END-IF.
            if (returnLabel == "0000-DATABASE-EXIT") { return; }  //Check for pass through to next method
        #endregion 0000-DATABASE-EXIT

        #region PARA-0798233759-EXIT
        L_PARA_0798233759_EXIT:;
            if (returnLabel == "PARA-0798233759-EXIT") { return; }                                              //COBOL==> EXIT.
        #endregion PARA-0798233759-EXIT

        #region PARA-0798233759-INIT
        L_PARA_0798233759_INIT:;
            LS.EXPORT_0002EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0002EV
            LS.EXPORT_0003EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0003EV .
            WS.CL149_EOF_NOT_FOUND.SetValue(true);                                                              //COBOL==> SET CL149-EOF-NOT-FOUND TO TRUE.
            WS.CL149_ERR_NO.SetValue(true);                                                                     //COBOL==> SET CL149-ERR-NO TO TRUE.
            if (returnLabel == "PARA-0798233759-INIT") { return; }  //Check for pass through to next method
        #endregion PARA-0798233759-INIT

        #region PARA-0798233759-INIT-EXIT
        L_PARA_0798233759_INIT_EXIT:;
            //COMMENT: *****************************************************************
            //COMMENT: *****************************************************************
            //COMMENT: *****************************************************************
            //COMMENT: ************* PHYSICAL END OF PROGRAM SWEXGR20 ******************
            //COMMENT: *****************************************************************
            //COMMENT: *****************************************************************
            //COMMENT: *****************************************************************
            //COMMENT: *****************************************************************
            if (returnLabel == "PARA-0798233759-INIT-EXIT") { return; }                                         //COBOL==> EXIT.
            #endregion PARA-0798233759-INIT-EXIT
        }
        #endregion
    }
    #endregion
}
