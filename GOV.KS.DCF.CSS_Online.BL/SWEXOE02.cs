#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2021
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2021-11-16 12:45:44 PM
   **        *   FROM COBOL PGM   :  SWEXOE02
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
                       SOURCE CODE GENERATED BY
                              COOL:GEN
               COPYRIGHT 2000, STERLING SOFTWARE, INC.
       NAME: OE_B465_EAB_READ_CASE_BASIC_ADA  DATE: 2000/05/30
       TARGET OS:   MVS                       TIME: 14:11:10
       TARGET DBMS: DB2                       USER: SWSRDCV
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS NOT SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
   ****************************************************************
                                                                  *
    DESCRIPTION:                                                  *
     THIS MODULE IS RESPONSIBLE FOR READING THE CASE-DBF ADABAS   *
     AND RETRIEVING A CASE STATUS AND STATUS DATE FOR THE CASE NO *
     RECEIEVED AS INPUT.                                          *
                                                                  *
    SYSTEM:   KAECSES  - CHILD SUPPORT ENFORCEMENT                *
                                                                  *
       DATE      ID     DESCRIPTION                               *
    ---------- -------  ----------------------------------------- *
    06/07/2000 SWSRDCV  INITIAL CREATION.                         *
    04/2014    SWDPLAT  CONVERT ADABASE READS TO DB2.             *
    08/29/2017 RKM      ADDED WITH UR TO QUERIES                  *
    10/05/2018 RAJ      CQ64698 - MODIFIED TO RESOLVE DATE ISSUE  *
                        ON IMHH SCREEN BY SENDING RIGHT FORMAT.   *
                                                                  *
   ****************************************************************
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.UI.Angular;
using MDSY.Framework.Control.CICS;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
using GOV.KS.DCF.CSS.Common.BL;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Online.BL
{
    #region Working Storage Class
    internal class SWEXOE02_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXOE02_ws_WorkingStorage";
            internal const string CONTROL_BLOCK = "CONTROL_BLOCK";
            internal const string COMMAND_CODE = "COMMAND_CODE";
            internal const string COMMAND_ID = "COMMAND_ID";
            internal const string FILE_NUMBER = "FILE_NUMBER";
            internal const string RESPONSE_CODE = "RESPONSE_CODE";
            internal const string ISN = "ISN";
            internal const string ISN_LOWER_LIMIT = "ISN_LOWER_LIMIT";
            internal const string ISN_QUANTITY = "ISN_QUANTITY";
            internal const string FORMAT_BUFFER_LENGTH = "FORMAT_BUFFER_LENGTH";
            internal const string RECORD_BUFFER_LENGTH = "RECORD_BUFFER_LENGTH";
            internal const string SEARCH_BUFFER_LENGTH = "SEARCH_BUFFER_LENGTH";
            internal const string VALUE_BUFFER_LENGTH = "VALUE_BUFFER_LENGTH";
            internal const string ISN_BUFFER_LENGTH = "ISN_BUFFER_LENGTH";
            internal const string COMMAND_OPTION_1 = "COMMAND_OPTION_1";
            internal const string COMMAND_OPTION_2 = "COMMAND_OPTION_2";
            internal const string ADDITIONS_1 = "ADDITIONS_1";
            internal const string ADDITIONS_2 = "ADDITIONS_2";
            internal const string ADDITIONS_3 = "ADDITIONS_3";
            internal const string ADDITIONS_4 = "ADDITIONS_4";
            internal const string COMMAND_TIME = "COMMAND_TIME";
            internal const string USER_AREA = "USER_AREA";
            internal const string SRADALNK = "SRADALNK";
            internal const string SRMODLNK = "SRMODLNK";
            internal const string WS_WORK_FIELDS = "WS_WORK_FIELDS";
            internal const string WS_WORK_SWITCHES = "WS_WORK_SWITCHES";
            internal const string WS_PROCESS_STATUS = "WS_PROCESS_STATUS";
            internal const string WS_CONTINUE = "WS_CONTINUE";
            internal const string WS_CASE_FOUND = "WS_CASE_FOUND";
            internal const string WS_CASE_NOT_FND = "WS_CASE_NOT_FND";
            internal const string WS_ERROR_FOUND = "WS_ERROR_FOUND";
            internal const string WS_COMPLETE = "WS_COMPLETE";
            internal const string WS_FILE_STATUS = "WS_FILE_STATUS";
            internal const string WS_FILE_ACTION_GOOD = "WS_FILE_ACTION_GOOD";
            internal const string WS_FILE_ACTION_ERROR = "WS_FILE_ACTION_ERROR";
            internal const string WS_CHAR_WORK_FIELDS = "WS_CHAR_WORK_FIELDS";
            internal const string WS_CASE_NO = "WS_CASE_NO";
            internal const string WS_PROCESS_MSG = "WS_PROCESS_MSG";
            internal const string WS_CASE_BASIC_FIELDS = "WS_CASE_BASIC_FIELDS";
            internal const string WS_CB_CASE_NO = "WS_CB_CASE_NO";
            internal const string WS_CB_CASE_STATUS = "WS_CB_CASE_STATUS";
            internal const string WS_CB_STATUS_DATE = "WS_CB_STATUS_DATE";
            internal const string WS_CB_STATUS_DATE_YYYY = "WS_CB_STATUS_DATE_YYYY";
            internal const string WS_CB_STATUS_DATE_MM = "WS_CB_STATUS_DATE_MM";
            internal const string WS_CB_STATUS_DATE_DD = "WS_CB_STATUS_DATE_DD";
            internal const string WS_DB2_DATE_FORMAT = "WS_DB2_DATE_FORMAT";
            internal const string WS_DB2_YYYY = "WS_DB2_YYYY";
            internal const string WS_DB2_MM = "WS_DB2_MM";
            internal const string WS_DB2_DD = "WS_DB2_DD";
            internal const string WS_STATIC_WORK_FIELDS = "WS_STATIC_WORK_FIELDS";
            internal const string WS_PROCESSING_MESSAGES = "WS_PROCESSING_MESSAGES";
            internal const string WS_PROC_COMP_MSG = "WS_PROC_COMP_MSG";
            internal const string WS_READ_ERR_MSG = "WS_READ_ERR_MSG";
            internal const string WS_CASE_NOT_FND_MSG = "WS_CASE_NOT_FND_MSG";
            internal const string WS_ADA_CALL_ERR_MSG = "WS_ADA_CALL_ERR_MSG";
            internal const string WS_RESP_CODE_MSG = "WS_RESP_CODE_MSG";
            internal const string WS_EOF152_ERR_MSG = "WS_EOF152_ERR_MSG";
            internal const string WS_DISPLAY_FIELDS = "WS_DISPLAY_FIELDS";
            internal const string WS_DISPLAY_NUMBER = "WS_DISPLAY_NUMBER";
            internal const string DCLKSD_CASE_BASIC = "DCLKSD_CASE_BASIC";
            internal const string CB_CASE_NUMBER = "CB_CASE_NUMBER";
            internal const string CB_TELEPHONE = "CB_TELEPHONE";
            internal const string CB_CASE_STATUS = "CB_CASE_STATUS";
            internal const string CB_CASE_STATUS_DATE = "CB_CASE_STATUS_DATE";
            internal const string CB_CASE_SURNAME = "CB_CASE_SURNAME";
            internal const string CB_CASE_GIVEN_NAME = "CB_CASE_GIVEN_NAME";
            internal const string CB_CASE_INITIAL = "CB_CASE_INITIAL";
            internal const string CB_CASEWORKR_GIVN_NME = "CB_CASEWORKR_GIVN_NME";
            internal const string CB_CASEWORKR_SURNAME = "CB_CASEWORKR_SURNAME";
            internal const string CB_CASEWORKR_MI = "CB_CASEWORKR_MI";
            internal const string CB_AR_SURNAME = "CB_AR_SURNAME";
            internal const string CB_AR_GIVEN_NAME = "CB_AR_GIVEN_NAME";
            internal const string CB_AR_INITIAL = "CB_AR_INITIAL";
            internal const string CB_FILE_LOCATION = "CB_FILE_LOCATION";
            internal const string CB_PAYEE_SURNAME = "CB_PAYEE_SURNAME";
            internal const string CB_PAYEE_GIVEN_NAME = "CB_PAYEE_GIVEN_NAME";
            internal const string CB_PAYEE_INITIAL = "CB_PAYEE_INITIAL";
            internal const string CB_TELEPHONE_2_NUMBER = "CB_TELEPHONE_2_NUMBER";
        }
        #endregion

        #region Direct-access element properties
        public IGroup CONTROL_BLOCK { get { return GetElementByName<IGroup>(Names.CONTROL_BLOCK); } }
        public IField COMMAND_CODE { get { return GetElementByName<IField>(Names.COMMAND_CODE); } }
        public IField COMMAND_ID { get { return GetElementByName<IField>(Names.COMMAND_ID); } }
        public IField FILE_NUMBER { get { return GetElementByName<IField>(Names.FILE_NUMBER); } }
        public IField RESPONSE_CODE { get { return GetElementByName<IField>(Names.RESPONSE_CODE); } }
        public IField ISN { get { return GetElementByName<IField>(Names.ISN); } }
        public IField ISN_LOWER_LIMIT { get { return GetElementByName<IField>(Names.ISN_LOWER_LIMIT); } }
        public IField ISN_QUANTITY { get { return GetElementByName<IField>(Names.ISN_QUANTITY); } }
        public IField FORMAT_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.FORMAT_BUFFER_LENGTH); } }
        public IField RECORD_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.RECORD_BUFFER_LENGTH); } }
        public IField SEARCH_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.SEARCH_BUFFER_LENGTH); } }
        public IField VALUE_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.VALUE_BUFFER_LENGTH); } }
        public IField ISN_BUFFER_LENGTH { get { return GetElementByName<IField>(Names.ISN_BUFFER_LENGTH); } }
        public IField COMMAND_OPTION_1 { get { return GetElementByName<IField>(Names.COMMAND_OPTION_1); } }
        public IField COMMAND_OPTION_2 { get { return GetElementByName<IField>(Names.COMMAND_OPTION_2); } }
        public IField ADDITIONS_1 { get { return GetElementByName<IField>(Names.ADDITIONS_1); } }
        public IField ADDITIONS_2 { get { return GetElementByName<IField>(Names.ADDITIONS_2); } }
        public IField ADDITIONS_3 { get { return GetElementByName<IField>(Names.ADDITIONS_3); } }
        public IField ADDITIONS_4 { get { return GetElementByName<IField>(Names.ADDITIONS_4); } }
        public IField COMMAND_TIME { get { return GetElementByName<IField>(Names.COMMAND_TIME); } }
        public IField USER_AREA { get { return GetElementByName<IField>(Names.USER_AREA); } }
        public IField SRADALNK { get { return GetElementByName<IField>(Names.SRADALNK); } }
        public IField SRMODLNK { get { return GetElementByName<IField>(Names.SRMODLNK); } }
        public IGroup WS_WORK_FIELDS { get { return GetElementByName<IGroup>(Names.WS_WORK_FIELDS); } }
        public IGroup WS_WORK_SWITCHES { get { return GetElementByName<IGroup>(Names.WS_WORK_SWITCHES); } }
        public IField WS_PROCESS_STATUS { get { return GetElementByName<IField>(Names.WS_PROCESS_STATUS); } }
        public ICheckField WS_CONTINUE { get { return GetElementByName<ICheckField>(Names.WS_CONTINUE); } }
        public ICheckField WS_CASE_FOUND { get { return GetElementByName<ICheckField>(Names.WS_CASE_FOUND); } }
        public ICheckField WS_CASE_NOT_FND { get { return GetElementByName<ICheckField>(Names.WS_CASE_NOT_FND); } }
        public ICheckField WS_ERROR_FOUND { get { return GetElementByName<ICheckField>(Names.WS_ERROR_FOUND); } }
        public ICheckField WS_COMPLETE { get { return GetElementByName<ICheckField>(Names.WS_COMPLETE); } }
        public IField WS_FILE_STATUS { get { return GetElementByName<IField>(Names.WS_FILE_STATUS); } }
        public ICheckField WS_FILE_ACTION_GOOD { get { return GetElementByName<ICheckField>(Names.WS_FILE_ACTION_GOOD); } }
        public ICheckField WS_FILE_ACTION_ERROR { get { return GetElementByName<ICheckField>(Names.WS_FILE_ACTION_ERROR); } }
        public IGroup WS_CHAR_WORK_FIELDS { get { return GetElementByName<IGroup>(Names.WS_CHAR_WORK_FIELDS); } }
        public IField WS_CASE_NO { get { return GetElementByName<IField>(Names.WS_CASE_NO); } }
        public IField WS_PROCESS_MSG { get { return GetElementByName<IField>(Names.WS_PROCESS_MSG); } }
        public IGroup WS_CASE_BASIC_FIELDS { get { return GetElementByName<IGroup>(Names.WS_CASE_BASIC_FIELDS); } }
        public IField WS_CB_CASE_NO { get { return GetElementByName<IField>(Names.WS_CB_CASE_NO); } }
        public IField WS_CB_CASE_STATUS { get { return GetElementByName<IField>(Names.WS_CB_CASE_STATUS); } }
        public IGroup WS_CB_STATUS_DATE { get { return GetElementByName<IGroup>(Names.WS_CB_STATUS_DATE); } }
        public IField WS_CB_STATUS_DATE_YYYY { get { return GetElementByName<IField>(Names.WS_CB_STATUS_DATE_YYYY); } }
        public IField WS_CB_STATUS_DATE_MM { get { return GetElementByName<IField>(Names.WS_CB_STATUS_DATE_MM); } }
        public IField WS_CB_STATUS_DATE_DD { get { return GetElementByName<IField>(Names.WS_CB_STATUS_DATE_DD); } }
        public IGroup WS_DB2_DATE_FORMAT { get { return GetElementByName<IGroup>(Names.WS_DB2_DATE_FORMAT); } }
        public IField WS_DB2_YYYY { get { return GetElementByName<IField>(Names.WS_DB2_YYYY); } }
        public IField WS_DB2_MM { get { return GetElementByName<IField>(Names.WS_DB2_MM); } }
        public IField WS_DB2_DD { get { return GetElementByName<IField>(Names.WS_DB2_DD); } }
        public IGroup WS_STATIC_WORK_FIELDS { get { return GetElementByName<IGroup>(Names.WS_STATIC_WORK_FIELDS); } }
        public IGroup WS_PROCESSING_MESSAGES { get { return GetElementByName<IGroup>(Names.WS_PROCESSING_MESSAGES); } }
        public IField WS_PROC_COMP_MSG { get { return GetElementByName<IField>(Names.WS_PROC_COMP_MSG); } }
        public IField WS_READ_ERR_MSG { get { return GetElementByName<IField>(Names.WS_READ_ERR_MSG); } }
        public IField WS_CASE_NOT_FND_MSG { get { return GetElementByName<IField>(Names.WS_CASE_NOT_FND_MSG); } }
        public IField WS_ADA_CALL_ERR_MSG { get { return GetElementByName<IField>(Names.WS_ADA_CALL_ERR_MSG); } }
        public IField WS_RESP_CODE_MSG { get { return GetElementByName<IField>(Names.WS_RESP_CODE_MSG); } }
        public IField WS_EOF152_ERR_MSG { get { return GetElementByName<IField>(Names.WS_EOF152_ERR_MSG); } }
        public IGroup WS_DISPLAY_FIELDS { get { return GetElementByName<IGroup>(Names.WS_DISPLAY_FIELDS); } }
        public IField WS_DISPLAY_NUMBER { get { return GetElementByName<IField>(Names.WS_DISPLAY_NUMBER); } }
        public IGroup DCLKSD_CASE_BASIC { get { return GetElementByName<IGroup>(Names.DCLKSD_CASE_BASIC); } }
        public IField CB_CASE_NUMBER { get { return GetElementByName<IField>(Names.CB_CASE_NUMBER); } }
        public IField CB_TELEPHONE { get { return GetElementByName<IField>(Names.CB_TELEPHONE); } }
        public IField CB_CASE_STATUS { get { return GetElementByName<IField>(Names.CB_CASE_STATUS); } }
        public IField CB_CASE_STATUS_DATE { get { return GetElementByName<IField>(Names.CB_CASE_STATUS_DATE); } }
        public IField CB_CASE_SURNAME { get { return GetElementByName<IField>(Names.CB_CASE_SURNAME); } }
        public IField CB_CASE_GIVEN_NAME { get { return GetElementByName<IField>(Names.CB_CASE_GIVEN_NAME); } }
        public IField CB_CASE_INITIAL { get { return GetElementByName<IField>(Names.CB_CASE_INITIAL); } }
        public IField CB_CASEWORKR_GIVN_NME { get { return GetElementByName<IField>(Names.CB_CASEWORKR_GIVN_NME); } }
        public IField CB_CASEWORKR_SURNAME { get { return GetElementByName<IField>(Names.CB_CASEWORKR_SURNAME); } }
        public IField CB_CASEWORKR_MI { get { return GetElementByName<IField>(Names.CB_CASEWORKR_MI); } }
        public IField CB_AR_SURNAME { get { return GetElementByName<IField>(Names.CB_AR_SURNAME); } }
        public IField CB_AR_GIVEN_NAME { get { return GetElementByName<IField>(Names.CB_AR_GIVEN_NAME); } }
        public IField CB_AR_INITIAL { get { return GetElementByName<IField>(Names.CB_AR_INITIAL); } }
        public IField CB_FILE_LOCATION { get { return GetElementByName<IField>(Names.CB_FILE_LOCATION); } }
        public IField CB_PAYEE_SURNAME { get { return GetElementByName<IField>(Names.CB_PAYEE_SURNAME); } }
        public IField CB_PAYEE_GIVEN_NAME { get { return GetElementByName<IField>(Names.CB_PAYEE_GIVEN_NAME); } }
        public IField CB_PAYEE_INITIAL { get { return GetElementByName<IField>(Names.CB_PAYEE_INITIAL); } }
        public IField CB_TELEPHONE_2_NUMBER { get { return GetElementByName<IField>(Names.CB_TELEPHONE_2_NUMBER); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.CONTROL_BLOCK, (CONTROL_BLOCK) =>
           {
               CONTROL_BLOCK.CreateNewFillerField(FieldType.String, 2, "AP");
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_CODE, FieldType.String, 2, "RC");
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_ID, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.FILE_NUMBER, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.RESPONSE_CODE, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_LOWER_LIMIT, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_QUANTITY, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.FORMAT_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.RECORD_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.SEARCH_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.VALUE_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.ISN_BUFFER_LENGTH, FieldType.CompShort, 4, +0);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_OPTION_1, FieldType.String, 1, SPACE);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_OPTION_2, FieldType.String, 1, SPACE);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_1, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_2, FieldType.String, 4, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_3, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.ADDITIONS_4, FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewFillerField(FieldType.String, 8, SPACES);
               CONTROL_BLOCK.CreateNewField(Names.COMMAND_TIME, FieldType.CompInt, 8, +0);
               CONTROL_BLOCK.CreateNewField(Names.USER_AREA, FieldType.String, 4, SPACES);
           });
            recordDef.CreateNewField(Names.SRADALNK, FieldType.String, 8, "SWASZ990");
            recordDef.CreateNewField(Names.SRMODLNK, FieldType.String, 8, "SWEXOE02");

            recordDef.CreateNewGroup(Names.WS_WORK_FIELDS, (WS_WORK_FIELDS) =>
           {
               WS_WORK_FIELDS.CreateNewGroup(Names.WS_WORK_SWITCHES, (WS_WORK_SWITCHES) =>
               {
                   WS_WORK_SWITCHES.CreateNewField(Names.WS_PROCESS_STATUS, FieldType.String, 5, SPACES)
                       .NewCheckField(Names.WS_CONTINUE, "CONTI")
                       .NewCheckField(Names.WS_CASE_FOUND, "FOUND")
                       .NewCheckField(Names.WS_CASE_NOT_FND, "NOTFD")
                       .NewCheckField(Names.WS_ERROR_FOUND, "ERROR")
                       .NewCheckField(Names.WS_COMPLETE, "COMPL")
                       ;
                   WS_WORK_SWITCHES.CreateNewField(Names.WS_FILE_STATUS, FieldType.UnsignedNumeric, 2, ZEROS)
                       .NewCheckField(Names.WS_FILE_ACTION_GOOD, 00)
                       .NewCheckField(Names.WS_FILE_ACTION_ERROR, 09)
                       ;
               });
               WS_WORK_FIELDS.CreateNewGroup(Names.WS_CHAR_WORK_FIELDS, (WS_CHAR_WORK_FIELDS) =>
               {
                   WS_CHAR_WORK_FIELDS.CreateNewField(Names.WS_CASE_NO, FieldType.String, 8);
                   WS_CHAR_WORK_FIELDS.CreateNewField(Names.WS_PROCESS_MSG, FieldType.String, 80, SPACES);
               });
               WS_WORK_FIELDS.CreateNewGroup(Names.WS_CASE_BASIC_FIELDS, (WS_CASE_BASIC_FIELDS) =>
               {
                   WS_CASE_BASIC_FIELDS.CreateNewField(Names.WS_CB_CASE_NO, FieldType.String, 8, SPACES);
                   WS_CASE_BASIC_FIELDS.CreateNewField(Names.WS_CB_CASE_STATUS, FieldType.String, 2, SPACES);
                   WS_CASE_BASIC_FIELDS.CreateNewGroup(Names.WS_CB_STATUS_DATE, (WS_CB_STATUS_DATE) =>
                   {
                       WS_CB_STATUS_DATE.CreateNewField(Names.WS_CB_STATUS_DATE_YYYY, FieldType.UnsignedNumeric, 4, ZEROS);
                       WS_CB_STATUS_DATE.CreateNewField(Names.WS_CB_STATUS_DATE_MM, FieldType.UnsignedNumeric, 2, ZEROS);
                       WS_CB_STATUS_DATE.CreateNewField(Names.WS_CB_STATUS_DATE_DD, FieldType.UnsignedNumeric, 2, ZEROS);
                   });
               });
               WS_WORK_FIELDS.CreateNewGroup(Names.WS_DB2_DATE_FORMAT, (WS_DB2_DATE_FORMAT) =>
               {
                   WS_DB2_DATE_FORMAT.CreateNewField(Names.WS_DB2_YYYY, FieldType.UnsignedNumeric, 4, ZEROS);
                   WS_DB2_DATE_FORMAT.CreateNewFillerField(FieldType.String, 1, SPACES);
                   WS_DB2_DATE_FORMAT.CreateNewField(Names.WS_DB2_MM, FieldType.UnsignedNumeric, 2, ZEROS);
                   WS_DB2_DATE_FORMAT.CreateNewFillerField(FieldType.String, 1, SPACES);
                   WS_DB2_DATE_FORMAT.CreateNewField(Names.WS_DB2_DD, FieldType.UnsignedNumeric, 2, ZEROS);
               });
               WS_WORK_FIELDS.CreateNewGroup(Names.WS_STATIC_WORK_FIELDS, (WS_STATIC_WORK_FIELDS) =>
               {
                   WS_STATIC_WORK_FIELDS.CreateNewGroup(Names.WS_PROCESSING_MESSAGES, (WS_PROCESSING_MESSAGES) =>
                   {
                       WS_PROCESSING_MESSAGES.CreateNewField(Names.WS_PROC_COMP_MSG, FieldType.String, 30, "PROCESS COMPLETED SUCCESSFULLY");
                       WS_PROCESSING_MESSAGES.CreateNewField(Names.WS_READ_ERR_MSG, FieldType.String, 25, "CASE-BASIC-DBF READ ERROR");
                       WS_PROCESSING_MESSAGES.CreateNewField(Names.WS_CASE_NOT_FND_MSG, FieldType.String, 25, "CASE NUMBER NOT FOUND");
                       WS_PROCESSING_MESSAGES.CreateNewField(Names.WS_ADA_CALL_ERR_MSG, FieldType.String, 35, "UNABLE TO CALL ADA CICS SYS MODULES");
                       WS_PROCESSING_MESSAGES.CreateNewField(Names.WS_RESP_CODE_MSG, FieldType.String, 16, " RESPONSE CODE: ");
                       WS_PROCESSING_MESSAGES.CreateNewField(Names.WS_EOF152_ERR_MSG, FieldType.String, 37, "ERROR (EOF152) READING CASE-BASIC-DBF");
                   });
               });
               WS_WORK_FIELDS.CreateNewGroup(Names.WS_DISPLAY_FIELDS, (WS_DISPLAY_FIELDS) =>
               {
                   WS_DISPLAY_FIELDS.CreateNewField(Names.WS_DISPLAY_NUMBER, FieldType.NumericEdited, "ZZZZZZZZZ", 9);
               });
           });

            recordDef.CreateNewGroup(Names.DCLKSD_CASE_BASIC, (DCLKSD_CASE_BASIC) =>
           {
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_CASE_NUMBER, FieldType.String, 8);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_TELEPHONE, FieldType.PackedDecimal, 10, null, 0);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_CASE_STATUS, FieldType.String, 2);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_CASE_STATUS_DATE, FieldType.String, 10);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_CASE_SURNAME, FieldType.String, 17);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_CASE_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_CASE_INITIAL, FieldType.String, 1);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_CASEWORKR_GIVN_NME, FieldType.String, 12);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_CASEWORKR_SURNAME, FieldType.String, 17);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_CASEWORKR_MI, FieldType.String, 1);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_AR_SURNAME, FieldType.String, 17);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_AR_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_AR_INITIAL, FieldType.String, 1);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_FILE_LOCATION, FieldType.String, 3);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_PAYEE_SURNAME, FieldType.String, 17);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_PAYEE_GIVEN_NAME, FieldType.String, 12);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_PAYEE_INITIAL, FieldType.String, 1);
               DCLKSD_CASE_BASIC.CreateNewField(Names.CB_TELEPHONE_2_NUMBER, FieldType.PackedDecimal, 10, null, 0);
           });


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXOE02_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXOE02_ls_LinkageSection";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERR_MSG_DATA = "PSMGR_ERR_MSG_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string FATAL_ERR_MSG_SF = "FATAL_ERR_MSG_SF";
            internal const string DB_ERR_MSG_SF = "DB_ERR_MSG_SF";
            internal const string ABORT_SHOW_DBMS_MSG_SF = "ABORT_SHOW_DBMS_MSG_SF";
            internal const string ABORT_SHOW_USER_MSG_SF = "ABORT_SHOW_USER_MSG_SF";
            internal const string RETRY_TRAN_REQUESTED_SF = "RETRY_TRAN_REQUESTED_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERR_MSG_FL_LS = "DB_ERR_MSG_FL_LS";
            internal const string DB_DEADLOCK_TIMOUT_FL_LS = "DB_DEADLOCK_TIMOUT_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERR_MSG_FL_LS = "FATAL_ERR_MSG_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERR_MSG_FL_LS = "IEF_FUNCTION_ERR_MSG_FL_LS";
            internal const string IEF_DURATION_ERR_MSG_FL_LS = "IEF_DURATION_ERR_MSG_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERR_MSG = "PSMGR_TIRDATE_ERR_MSG";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_TIRDATE_SKIP_VAL = "PSMGR_TIRDATE_SKIP_VAL";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string TX_RETRY_COUNT = "TX_RETRY_COUNT";
            internal const string TX_USER_RETRY_ALLOWED = "TX_USER_RETRY_ALLOWED";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string IMPORT_0001EV = "IMPORT_0001EV";
            internal const string IM_HOUSEHOLD_0001ET = "IM_HOUSEHOLD_0001ET";
            internal const string AE_CASE_NO_0001AS = "AE_CASE_NO_0001AS";
            internal const string AE_CASE_NO_0001 = "AE_CASE_NO_0001";
            internal const string AE_CASE_NO_0001XX = "AE_CASE_NO_0001XX";
            internal const string EXPORT_0002EV = "EXPORT_0002EV";
            internal const string IM_HOUSEHOLD_0002ET = "IM_HOUSEHOLD_0002ET";
            internal const string CASE_STATUS_0002AS = "CASE_STATUS_0002AS";
            internal const string CASE_STATUS_0002 = "CASE_STATUS_0002";
            internal const string CASE_STATUS_0002XX = "CASE_STATUS_0002XX";
            internal const string STATUS_DATE_0002AS = "STATUS_DATE_0002AS";
            internal const string STATUS_DATE_0002 = "STATUS_DATE_0002";
            internal const string STATUS_DATE_0002XX = "STATUS_DATE_0002XX";
            internal const string EXPORT_EXEC_RESULTS_0003EV = "EXPORT_EXEC_RESULTS_0003EV";
            internal const string WORK_AREA_0003ET = "WORK_AREA_0003ET";
            internal const string TEXT_5_0003AS = "TEXT_5_0003AS";
            internal const string TEXT_5_0003 = "TEXT_5_0003";
            internal const string TEXT_5_0003XX = "TEXT_5_0003XX";
            internal const string TEXT_80_0003AS = "TEXT_80_0003AS";
            internal const string TEXT_80_0003 = "TEXT_80_0003";
            internal const string TEXT_80_0003XX = "TEXT_80_0003XX";
            internal const string TWA = "TWA";
            internal const string TWA_ADABAS_PARMS = "TWA_ADABAS_PARMS";
            internal const string TWA_CICS_PARMS = "TWA_CICS_PARMS";
            internal const string TWA_PROGRAM_ID = "TWA_PROGRAM_ID";
            internal const string TWA_ADDR_LIST = "TWA_ADDR_LIST";
        }
        #endregion

        #region Direct-access element properties
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERR_MSG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERR_MSG_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField FATAL_ERR_MSG_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERR_MSG_SF); } }
        public ICheckField DB_ERR_MSG_SF { get { return GetElementByName<ICheckField>(Names.DB_ERR_MSG_SF); } }
        public ICheckField ABORT_SHOW_DBMS_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_DBMS_MSG_SF); } }
        public ICheckField ABORT_SHOW_USER_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_USER_MSG_SF); } }
        public ICheckField RETRY_TRAN_REQUESTED_SF { get { return GetElementByName<ICheckField>(Names.RETRY_TRAN_REQUESTED_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERR_MSG_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERR_MSG_FL_LS); } }
        public ICheckField DB_DEADLOCK_TIMOUT_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_DEADLOCK_TIMOUT_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERR_MSG_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERR_MSG_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERR_MSG_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERR_MSG_FL_LS); } }
        public ICheckField IEF_DURATION_ERR_MSG_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERR_MSG_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERR_MSG { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERR_MSG); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_TIRDATE_SKIP_VAL { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SKIP_VAL); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IField TX_RETRY_COUNT { get { return GetElementByName<IField>(Names.TX_RETRY_COUNT); } }
        public IField TX_USER_RETRY_ALLOWED { get { return GetElementByName<IField>(Names.TX_USER_RETRY_ALLOWED); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup IMPORT_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_0001EV); } }
        public IGroup IM_HOUSEHOLD_0001ET { get { return GetElementByName<IGroup>(Names.IM_HOUSEHOLD_0001ET); } }
        public IField AE_CASE_NO_0001AS { get { return GetElementByName<IField>(Names.AE_CASE_NO_0001AS); } }
        public IField AE_CASE_NO_0001 { get { return GetElementByName<IField>(Names.AE_CASE_NO_0001); } }
        public IField AE_CASE_NO_0001XX { get { return GetElementByName<IField>(Names.AE_CASE_NO_0001XX); } }
        public IGroup EXPORT_0002EV { get { return GetElementByName<IGroup>(Names.EXPORT_0002EV); } }
        public IGroup IM_HOUSEHOLD_0002ET { get { return GetElementByName<IGroup>(Names.IM_HOUSEHOLD_0002ET); } }
        public IField CASE_STATUS_0002AS { get { return GetElementByName<IField>(Names.CASE_STATUS_0002AS); } }
        public IField CASE_STATUS_0002 { get { return GetElementByName<IField>(Names.CASE_STATUS_0002); } }
        public IField CASE_STATUS_0002XX { get { return GetElementByName<IField>(Names.CASE_STATUS_0002XX); } }
        public IField STATUS_DATE_0002AS { get { return GetElementByName<IField>(Names.STATUS_DATE_0002AS); } }
        public IField STATUS_DATE_0002 { get { return GetElementByName<IField>(Names.STATUS_DATE_0002); } }
        public IField STATUS_DATE_0002XX { get { return GetElementByName<IField>(Names.STATUS_DATE_0002XX); } }
        public IGroup EXPORT_EXEC_RESULTS_0003EV { get { return GetElementByName<IGroup>(Names.EXPORT_EXEC_RESULTS_0003EV); } }
        public IGroup WORK_AREA_0003ET { get { return GetElementByName<IGroup>(Names.WORK_AREA_0003ET); } }
        public IField TEXT_5_0003AS { get { return GetElementByName<IField>(Names.TEXT_5_0003AS); } }
        public IField TEXT_5_0003 { get { return GetElementByName<IField>(Names.TEXT_5_0003); } }
        public IField TEXT_5_0003XX { get { return GetElementByName<IField>(Names.TEXT_5_0003XX); } }
        public IField TEXT_80_0003AS { get { return GetElementByName<IField>(Names.TEXT_80_0003AS); } }
        public IField TEXT_80_0003 { get { return GetElementByName<IField>(Names.TEXT_80_0003); } }
        public IField TEXT_80_0003XX { get { return GetElementByName<IField>(Names.TEXT_80_0003XX); } }
        public IGroup TWA { get { return GetElementByName<IGroup>(Names.TWA); } }
        public IGroup TWA_ADABAS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_ADABAS_PARMS); } }
        public IGroup TWA_CICS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_CICS_PARMS); } }
        public IField TWA_PROGRAM_ID { get { return GetElementByName<IField>(Names.TWA_PROGRAM_ID); } }
        public IGroup TWA_ADDR_LIST { get { return GetElementByName<IGroup>(Names.TWA_ADDR_LIST); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERR_MSG_DATA, (PSMGR_ERR_MSG_DATA) =>
               {
                   PSMGR_ERR_MSG_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERR_MSG_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERR_MSG_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.FATAL_ERR_MSG_SF, "FE")
                       .NewCheckField(Names.DB_ERR_MSG_SF, "DB")
                       .NewCheckField(Names.ABORT_SHOW_DBMS_MSG_SF, "AB")
                       .NewCheckField(Names.ABORT_SHOW_USER_MSG_SF, "AM")
                       .NewCheckField(Names.RETRY_TRAN_REQUESTED_SF, "RT")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERR_MSG_FL_LS, "DB")
                       .NewCheckField(Names.DB_DEADLOCK_TIMOUT_FL_LS, "DT")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERR_MSG_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERR_MSG_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERR_MSG_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERR_MSG, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d9", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d9) =>
                   {
                       FILLER_d9.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d9.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d9.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_SKIP_VAL, FieldType.String, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(95, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 8);
               });
               GLOBDATA.CreateNewField(Names.TX_RETRY_COUNT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_USER_RETRY_ALLOWED, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(3, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewFillerField(199, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_0001EV, (IMPORT_0001EV) =>
           {
               IMPORT_0001EV.CreateNewGroup(Names.IM_HOUSEHOLD_0001ET, (IM_HOUSEHOLD_0001ET) =>
               {
                   IM_HOUSEHOLD_0001ET.CreateNewField(Names.AE_CASE_NO_0001AS, FieldType.String, 1);

                   IField AE_CASE_NO_0001_local = IM_HOUSEHOLD_0001ET.CreateNewField(Names.AE_CASE_NO_0001, FieldType.String, 8);
                   IM_HOUSEHOLD_0001ET.CreateNewFieldRedefine(Names.AE_CASE_NO_0001XX, FieldType.String, AE_CASE_NO_0001_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_0002EV, (EXPORT_0002EV) =>
           {
               EXPORT_0002EV.CreateNewGroup(Names.IM_HOUSEHOLD_0002ET, (IM_HOUSEHOLD_0002ET) =>
               {
                   IM_HOUSEHOLD_0002ET.CreateNewField(Names.CASE_STATUS_0002AS, FieldType.String, 1);

                   IField CASE_STATUS_0002_local = IM_HOUSEHOLD_0002ET.CreateNewField(Names.CASE_STATUS_0002, FieldType.String, 1);
                   IM_HOUSEHOLD_0002ET.CreateNewFieldRedefine(Names.CASE_STATUS_0002XX, FieldType.String, CASE_STATUS_0002_local, 1);
                   IM_HOUSEHOLD_0002ET.CreateNewField(Names.STATUS_DATE_0002AS, FieldType.String, 1);

                   IField STATUS_DATE_0002_local = IM_HOUSEHOLD_0002ET.CreateNewField(Names.STATUS_DATE_0002, FieldType.SignedNumeric, 8);
                   IM_HOUSEHOLD_0002ET.CreateNewFieldRedefine(Names.STATUS_DATE_0002XX, FieldType.String, STATUS_DATE_0002_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_EXEC_RESULTS_0003EV, (EXPORT_EXEC_RESULTS_0003EV) =>
           {
               EXPORT_EXEC_RESULTS_0003EV.CreateNewGroup(Names.WORK_AREA_0003ET, (WORK_AREA_0003ET) =>
               {
                   WORK_AREA_0003ET.CreateNewField(Names.TEXT_5_0003AS, FieldType.String, 1);

                   IField TEXT_5_0003_local = WORK_AREA_0003ET.CreateNewField(Names.TEXT_5_0003, FieldType.String, 5);
                   WORK_AREA_0003ET.CreateNewFieldRedefine(Names.TEXT_5_0003XX, FieldType.String, TEXT_5_0003_local, 5);
                   WORK_AREA_0003ET.CreateNewField(Names.TEXT_80_0003AS, FieldType.String, 1);

                   IField TEXT_80_0003_local = WORK_AREA_0003ET.CreateNewField(Names.TEXT_80_0003, FieldType.String, 80);
                   WORK_AREA_0003ET.CreateNewFieldRedefine(Names.TEXT_80_0003XX, FieldType.String, TEXT_80_0003_local, 80);
               });
           });

            recordDef.CreateNewGroup(Names.TWA, (TWA) =>
           {
               IGroup TWA_ADABAS_PARMS_local = (IGroup)TWA.CreateNewGroup(Names.TWA_ADABAS_PARMS, (TWA_ADABAS_PARMS) =>
               {
                   TWA_ADABAS_PARMS.CreateNewFieldArray("FILLER_d15", 7, FieldType.CompInt, 4);
               });
               TWA.CreateNewGroupRedefine(Names.TWA_CICS_PARMS, TWA_ADABAS_PARMS_local, (TWA_CICS_PARMS) =>
               {
                   TWA_CICS_PARMS.CreateNewField(Names.TWA_PROGRAM_ID, FieldType.String, 8);
                   TWA_CICS_PARMS.CreateNewGroup(Names.TWA_ADDR_LIST, (TWA_ADDR_LIST) =>
                   {
                       TWA_ADDR_LIST.CreateNewFieldArray("FILLER_d16", 5, FieldType.CompInt, 4);
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(GLOBDATA, args, 0);
            SetPassedParm(IMPORT_0001EV, args, 1);
            SetPassedParm(EXPORT_0002EV, args, 2);
            SetPassedParm(EXPORT_EXEC_RESULTS_0003EV, args, 3);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(GLOBDATA, args, 0);
            SetReturnParm(IMPORT_0001EV, args, 1);
            SetReturnParm(EXPORT_0002EV, args, 2);
            SetReturnParm(EXPORT_EXEC_RESULTS_0003EV, args, 3);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXOE02 : OnlineProgramBase
    {

        #region Public Constructors
        public SWEXOE02()
            : base()
        {
            this.ProgramName = "SWEXOE02";

            WS = new SWEXOE02_ws();
            LS = new SWEXOE02_ls();
            DbConv = new DBConversation();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

        }

        public SWEXOE02(OnlineControl controlData) : base(controlData)
        {
            this.ProgramName = "SWEXOE02";

            WS = new SWEXOE02_ws();
            LS = new SWEXOE02_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXOE02_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXOE02_ls LS;
        private DBConversation DbConv;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING GLOBDATA , IMPORT-0001EV , EXPORT-0002EV , EXPORT-EXEC-RESULTS-0003EV.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                SetData();
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
            finally
            {
                Data.CloseConnection();
            }
        }
        #endregion

        #region Private Methods

        private void SetData()
        {
            LS.InitializeWithLowValues();
            WS.InitializeWithLowValues();
        }

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_1803560531(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_1803560531
        /// </summary>
        private void M_MAIN_1803560531(string returnMethod = "")
        {
            M_PARA_1803560531_INIT("M_PARA_1803560531_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-1803560531-INIT THRU PARA-1803560531-INIT-EXIT
            M_PARA_1803560531("M_PARA_1803560531_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-1803560531 THRU PARA-1803560531-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_1803560531_INIT
        /// </summary>
        private void M_PARA_1803560531_INIT(string returnMethod = "")
        {
            LS.EXPORT_0002EV.ResetToInitialValue();                                                             //COBOL==> INITIALIZE EXPORT-0002EV
            LS.EXPORT_EXEC_RESULTS_0003EV.ResetToInitialValue();                                                //COBOL==> INITIALIZE EXPORT-EXEC-RESULTS-0003EV .
            if (returnMethod != "" && returnMethod != "M_PARA_1803560531_INIT") { M_PARA_1803560531_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1803560531_INIT_EXIT
        /// </summary>
        private void M_PARA_1803560531_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_1803560531_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_1803560531_INIT_EXIT") { M_PARA_1803560531(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1803560531
        /// </summary>
        private void M_PARA_1803560531(string returnMethod = "")
        {
            Control.Call("ADASTWA", LS.TWA, WS.CONTROL_BLOCK); if (Control.ExitProgram) return;                //COBOL==> CALL 'ADASTWA' USING TWA CONTROL-BLOCK.
            Control.Call(WS.SRADALNK.AsString(), Control.DFHCOMMAREA, LS.TWA, WS.SRMODLNK); if (Control.ExitProgram) return;  //COBOL==> CALL SRADALNK USING DFHEIBLK DFHCOMMAREA TWA SRMODLNK.
            if ((WS.RESPONSE_CODE.IsGreaterThan(ZEROS))
             && (!(WS.RESPONSE_CODE.IsEqualTo(9))))  //COBOL==> IF RESPONSE-CODE > ZERO AND NOT = 9
            {
                WS.WS_DISPLAY_NUMBER.SetValue(WS.RESPONSE_CODE);                                                    //COBOL==> MOVE RESPONSE-CODE TO WS-DISPLAY-NUMBER
                WS.WS_PROCESS_MSG.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize("ERROR: ADABAS CALL "), StringUtils.DelimitedBySize(" "), StringUtils.DelimitedBySize(WS.WS_RESP_CODE_MSG.AsString()), StringUtils.DelimitedBySize(" "), StringUtils.DelimitedBySize(WS.WS_DISPLAY_NUMBER.AsString())));  //COBOL==> STRING 'ERROR: ADABAS CALL ' DELIMITED BY SIZE ' ' DELIMITED BY SIZE WS-RESP-CODE-MSG DELIMITED BY SIZE ' ' DELIMITED BY SIZE WS-DISPLAY-NUMBER DELIMITED BY SIZE INTO WS-PROCESS-MSG
                M_PARA_1803560531_EXIT(CheckGotoReturn(returnMethod)); return;                                      //COBOL==> GO TO PARA-1803560531-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PROCESS_MSG.ResetToInitialValue();                                                            //COBOL==> INITIALIZE WS-PROCESS-MSG.
                                                                                                                //COMMENT:     MOVE AE-CASE-NO-0001             TO WS-CASE-NO.
            WS.CB_CASE_NUMBER.SetValue(LS.AE_CASE_NO_0001);                                                     //COBOL==> MOVE AE-CASE-NO-0001 TO CB-CASE-NUMBER.
            WS.WS_CONTINUE.SetValue(true);                                                                      //COBOL==> SET WS-CONTINUE TO TRUE.
                                                                                                                //COMMENT:     IF WS-CASE-NO      =  WS-CB-CASE-NO
            if (WS.CB_CASE_NUMBER.IsEqualTo(WS.WS_CB_CASE_NO))                                                  //COBOL==> IF CB-CASE-NUMBER = WS-CB-CASE-NO
            {
                WS.WS_CASE_FOUND.SetValue(true);                                                                    //COBOL==> SET WS-CASE-FOUND TO TRUE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_0200_READ_ADABAS("M_0200_READ_ADABAS_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM 0200-READ-ADABAS THRU 0200-READ-ADABAS-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_CASE_FOUND.Value)                                                                         //COBOL==> IF WS-CASE-FOUND
            {
                LS.CASE_STATUS_0002.SetValue(WS.WS_CB_CASE_STATUS);                                                 //COBOL==> MOVE WS-CB-CASE-STATUS TO CASE-STATUS-0002
                LS.STATUS_DATE_0002.SetValue(WS.WS_CB_STATUS_DATE);                                                 //COBOL==> MOVE WS-CB-STATUS-DATE TO STATUS-DATE-0002
                WS.WS_PROCESS_MSG.SetValue(WS.WS_PROC_COMP_MSG);                                                    //COBOL==> MOVE WS-PROC-COMP-MSG TO WS-PROCESS-MSG
                WS.WS_COMPLETE.SetValue(true);                                                                      //COBOL==> SET WS-COMPLETE TO TRUE
            }                                                                                                   //COBOL==> END-IF.
            LS.TEXT_5_0003.SetValue(WS.WS_PROCESS_STATUS);                                                      //COBOL==> MOVE WS-PROCESS-STATUS TO TEXT-5-0003.
            LS.TEXT_80_0003.SetValue(WS.WS_PROCESS_MSG);                                                        //COBOL==> MOVE WS-PROCESS-MSG TO TEXT-80-0003.
            if (returnMethod != "" && returnMethod != "M_PARA_1803560531") { M_PARA_1803560531_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_1803560531_EXIT
        /// </summary>
        private void M_PARA_1803560531_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_1803560531_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_1803560531_EXIT") { M_0200_READ_ADABAS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0200_READ_ADABAS
        /// </summary>
        /// <remarks>
        ///COMMENT: 0200-READ-ADABAS.
        ///COMMENT:     @READISN152  ISN = WS-CASE-NO.
        ///COMMENT:     MOVE RESPONSE-CODE152            TO WS-FILE-STATUS
        ///COMMENT:                                         WS-DISPLAY-NUMBER.
        ///COMMENT:     EVALUATE TRUE
        ///COMMENT:         WHEN WS-FILE-ACTION-GOOD
        ///COMMENT:              IF CASE-NUMBER152 = WS-CASE-NO
        ///COMMENT:                 MOVE CASE-NUMBER152       TO WS-CB-CASE-NO
        ///COMMENT:                 MOVE CASE-STATUS152       TO WS-CB-CASE-STATUS
        ///COMMENT:                 MOVE CASE-STATUS-DATE152  TO WS-CB-STATUS-DATE
        ///COMMENT:                 SET WS-CASE-FOUND         TO TRUE
        ///COMMENT:              ELSE
        ///COMMENT:                 MOVE WS-CASE-NOT-FND-MSG  TO WS-PROCESS-MSG
        ///COMMENT:                 SET WS-CASE-NOT-FND       TO TRUE
        ///COMMENT:              END-IF
        ///COMMENT:         WHEN OTHER
        ///COMMENT:              IF EOF152
        ///COMMENT:                 MOVE EOF-COB152      TO WS-DISPLAY-NUMBER
        ///COMMENT:                 STRING WS-EOF152-ERR-MSG       DELIMITED BY SIZE
        ///COMMENT:                        ' '                     DELIMITED BY SIZE
        ///COMMENT:                        WS-RESP-CODE-MSG        DELIMITED BY SIZE
        ///COMMENT:                        ' '                     DELIMITED BY SIZE
        ///COMMENT:                        WS-DISPLAY-NUMBER       DELIMITED BY SIZE
        ///COMMENT:                   INTO WS-PROCESS-MSG
        ///COMMENT:              ELSE
        ///COMMENT:                 STRING WS-READ-ERR-MSG         DELIMITED BY SIZE
        ///COMMENT:                        ' '                     DELIMITED BY SIZE
        ///COMMENT:                        WS-RESP-CODE-MSG        DELIMITED BY SIZE
        ///COMMENT:                        ' '                     DELIMITED BY SIZE
        ///COMMENT:                        WS-DISPLAY-NUMBER       DELIMITED BY SIZE
        ///COMMENT:                   INTO WS-PROCESS-MSG
        ///COMMENT:              END-IF
        ///COMMENT:              SET WS-ERROR-FOUND   TO TRUE
        ///COMMENT:     END-EVALUATE.
        ///COMMENT: 0200-READ-ADABAS-EXIT.
        ///COMMENT: ********************************************************
        ///COMMENT:  SELECT ROW FROM THE KSD_CASE_BASIC
        ///COMMENT: ********************************************************
        /// </remarks>
        private void M_0200_READ_ADABAS(string returnMethod = "")
        {
            DbConv.ExecuteSqlQuery("SELECT CASE_NUMBER , CASE_STATUS , CASE_STATUS_DATE INTO {0} , {1} , {2} FROM KSD_CASE_BASIC WHERE CASE_NUMBER = {3} WITH UR ",  //COBOL==> EXEC SQL SELECT CASE_NUMBER , CASE_STATUS , CASE_STATUS_DATE INTO :CB-CASE-NUMBER , :CB-CASE-STATUS , :CB-CASE-STATUS-DATE FROM KSD_CASE_BASIC WHERE CASE_NUMBER = :CB-CASE-NUMBER WITH UR END-EXEC.
                                 WS.CB_CASE_NUMBER, WS.CB_CASE_STATUS, WS.CB_CASE_STATUS_DATE, WS.CB_CASE_NUMBER);
            WS.WS_DISPLAY_NUMBER.SetValue(WS.SQLCA.SQLCODE);                                                    //COBOL==> MOVE SQLCODE TO WS-DISPLAY-NUMBER.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN 0
            {
                WS.WS_CASE_FOUND.SetValue(true);                                                                    //COBOL==> SET WS-CASE-FOUND TO TRUE
                WS.WS_CB_CASE_NO.SetValue(WS.CB_CASE_NUMBER);                                                       //COBOL==> MOVE CB-CASE-NUMBER TO WS-CB-CASE-NO
                WS.WS_CB_CASE_STATUS.SetValue(WS.CB_CASE_STATUS);                                                   //COBOL==> MOVE CB-CASE-STATUS TO WS-CB-CASE-STATUS
                if (!(WS.CB_CASE_STATUS_DATE.IsEqualTo("0001-01-01")))                                              //COBOL==> IF CB-CASE-STATUS-DATE NOT = '0001-01-01'
                {
                    WS.WS_DB2_DATE_FORMAT.SetValue(WS.CB_CASE_STATUS_DATE);                                             //COBOL==> MOVE CB-CASE-STATUS-DATE TO WS-DB2-DATE-FORMAT
                    WS.WS_CB_STATUS_DATE_YYYY.SetValue(WS.WS_DB2_YYYY);                                                 //COBOL==> MOVE WS-DB2-YYYY TO WS-CB-STATUS-DATE-YYYY
                    WS.WS_CB_STATUS_DATE_MM.SetValue(WS.WS_DB2_MM);                                                     //COBOL==> MOVE WS-DB2-MM TO WS-CB-STATUS-DATE-MM
                    WS.WS_CB_STATUS_DATE_DD.SetValue(WS.WS_DB2_DD);                                                     //COBOL==> MOVE WS-DB2-DD TO WS-CB-STATUS-DATE-DD
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                //COBOL==> WHEN +100
            else
            if ((WS.SQLCA.SQLCODE.IsEqualTo(+100)))
            {
                WS.WS_PROCESS_MSG.SetValue(WS.WS_CASE_NOT_FND_MSG);                                                 //COBOL==> MOVE WS-CASE-NOT-FND-MSG TO WS-PROCESS-MSG
                WS.WS_CASE_NOT_FND.SetValue(true);                                                                  //COBOL==> SET WS-CASE-NOT-FND TO TRUE
                WS.WS_DISPLAY_NUMBER.SetValue(WS.SQLCA.SQLCODE);                                                    //COBOL==> MOVE SQLCODE TO WS-DISPLAY-NUMBER
                WS.WS_PROCESS_MSG.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize(WS.WS_EOF152_ERR_MSG.AsString()), StringUtils.DelimitedBySize(" "), StringUtils.DelimitedBySize(WS.WS_RESP_CODE_MSG.AsString()), StringUtils.DelimitedBySize(" "), StringUtils.DelimitedBySize(WS.WS_DISPLAY_NUMBER.AsString())));  //COBOL==> STRING WS-EOF152-ERR-MSG DELIMITED BY SIZE ' ' DELIMITED BY SIZE WS-RESP-CODE-MSG DELIMITED BY SIZE ' ' DELIMITED BY SIZE WS-DISPLAY-NUMBER DELIMITED BY SIZE INTO WS-PROCESS-MSG
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS_PROCESS_MSG.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize(WS.WS_READ_ERR_MSG.AsString()), StringUtils.DelimitedBySize(" "), StringUtils.DelimitedBySize(WS.WS_RESP_CODE_MSG.AsString()), StringUtils.DelimitedBySize(" "), StringUtils.DelimitedBySize(WS.WS_DISPLAY_NUMBER.AsString())));  //COBOL==> STRING WS-READ-ERR-MSG DELIMITED BY SIZE ' ' DELIMITED BY SIZE WS-RESP-CODE-MSG DELIMITED BY SIZE ' ' DELIMITED BY SIZE WS-DISPLAY-NUMBER DELIMITED BY SIZE INTO WS-PROCESS-MSG
                WS.WS_ERROR_FOUND.SetValue(true);                                                                   //COBOL==> SET WS-ERROR-FOUND TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_0200_READ_ADABAS") { M_0200_READ_ADABAS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0200_READ_ADABAS_EXIT
        /// </summary>
        private void M_0200_READ_ADABAS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_0200_READ_ADABAS_EXIT") { return; }                                          //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
