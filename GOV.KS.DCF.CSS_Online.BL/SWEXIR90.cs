#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2021
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2021-11-16 12:41:45 PM
   **        *   FROM COBOL PGM   :  SWEXIR90
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   ****************************************************************
                       SOURCE CODE GENERATED BY
                              COOL:GEN
       COPYRIGHT 2002, COMPUTER ASSOCIATES INTERNATIONAL, INC.
       NAME: EAB_SEARCH_CLIENT                DATE: 2002/06/25
       TARGET OS:   MVS                       TIME: 15:56:55
       TARGET DBMS: DB2                       USER: SWDPTMB
       DESCRIPTION: READ KSD_CLIENT BY THE FOLLOWING KEYS
    SEARCH-TYPE = '1'
      READ BY CLIENT-SSN-KEY
    SEARCH-TYPE = '2' AND PERCENT-OF-MATCH = 100
      READ BY CLIENT-NAME-KEY
    SEARCH-TYPE = '2' AND PERCENT-OF-MATCH < 100
      READ BY PHONETIC-KEY
    SEARCH-TYPE = '3'
      READ BY CLIENT-ID-KEY
    THE CLIENT-ID AND SSN SEARCH RETURN ALL PEOPLE WHO MATCH.  THE
    EXACT NAME SEARCH DOES AN ADDITION FILTER ON SEX, OFFICE,
    INITIAL AND DATE OF BIRTH.  THE PHONETIC ONLY FILTERS SEX AND
    OFFICE (THIS WAS REQUESTED BY THE FIELD WHEN REGISTERING CASES).
    THE NAME FIELD IF FORMATTED TO INCLUDE ALL OPEN OFFICES THAT THE
    PERSON IS LOCATED IN.  IF THE PERSON IS IN CLOSED OFFICES ONLY,
    THEN THESE OFFICES ARE DISPLAYED.  IF THERE ISNT ENOUGH ROOM TO
    DISPLAY ALL OFFICES, AN * IS DISPLAYED AS THE LAST OFFICE.
   ** MAINTENANCE ************************************************
                         CHANGE
      DATE      AUTHOR   CONTROL DESCRIPTION
    ---------- --------- ------- ----------------------------------
    06/15/2002 J.HANSEN          REWROTE AND ADDED CLIENT-ID SEARCH
    03/03/2014 G.BRAMSON CQ35825 ADABAS TO DB2 FOR KEES PHASE 3
    .......... ......... ....... KEEP ADABAS ERROR RESPONSE FIELDS.
   ****************************************************************
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.UI.Angular;
using MDSY.Framework.Control.CICS;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
using GOV.KS.DCF.CSS.Common.BL;

/*  usings for referenced objects  */
#endregion

namespace GOV.KS.DCF.CSS.Online.BL
{
    #region Working Storage Class
    internal class SWEXIR90_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXIR90_ws_WorkingStorage";
            internal const string ADIM1 = "ADIM1";
            internal const string ADIM2 = "ADIM2";
            internal const string ADIM3 = "ADIM3";
            internal const string GROUP_EXPORT_0001FL = "GROUP_EXPORT_0001FL";
            internal const string GROUP_EXPORT_0001PS = "GROUP_EXPORT_0001PS";
            internal const string GROUP_EXPORT_0001RF = "GROUP_EXPORT_0001RF";
            internal const string FUNC_0329211337_ESC_FLAG = "FUNC_0329211337_ESC_FLAG";
            internal const string SRADALNK = "SRADALNK";
            internal const string SRMODLNK = "SRMODLNK";
            internal const string SQLNUMB = "SQLNUMB";
            internal const string EXIT_PGM_SW = "EXIT_PGM_SW";
            internal const string EXIT_PGM = "EXIT_PGM";
            internal const string STOP_READ = "STOP_READ";
            internal const string OFC_FND = "OFC_FND";
            internal const string INDEXS = "INDEXS";
            internal const string MAX_NAME = "MAX_NAME";
            internal const string MAX_OFC = "MAX_OFC";
            internal const string TOT_OFC = "TOT_OFC";
            internal const string NAME_LEN = "NAME_LEN";
            internal const string OFC_LEN = "OFC_LEN";
            internal const string I1 = "I1";
            internal const string I2 = "I2";
            internal const string I3 = "I3";
            internal const string I4 = "I4";
            internal const string TMP_OFC = "TMP_OFC";
            internal const string TMP_OFC_X = "TMP_OFC_X";
            internal const string TMP_NAME = "TMP_NAME";
            internal const string TMP_LAST_NAME = "TMP_LAST_NAME";
            internal const string TMP_FIRST_NAME = "TMP_FIRST_NAME";
            internal const string TMP_FIRST_NAME_1 = "TMP_FIRST_NAME_1";
            internal const string TMP_FIRST_NAME_11 = "TMP_FIRST_NAME_11";
            internal const string TMP_INITIAL = "TMP_INITIAL";
            internal const string WRK_LAST_NAME = "WRK_LAST_NAME";
            internal const string WRK_FIRST_NAME = "WRK_FIRST_NAME";
            internal const string CUR_CLIENT_DATA = "CUR_CLIENT_DATA";
            internal const string CUR_NAME = "CUR_NAME";
            internal const string CUR_LAST_NAME = "CUR_LAST_NAME";
            internal const string CUR_FIRST_NAME = "CUR_FIRST_NAME";
            internal const string CUR_INIT = "CUR_INIT";
            internal const string CUR_SSN = "CUR_SSN";
            internal const string CUR_DOB_SEX = "CUR_DOB_SEX";
            internal const string CUR_DOB = "CUR_DOB";
            internal const string CUR_SEX = "CUR_SEX";
            internal const string CUR_POINTER = "CUR_POINTER";
            internal const string CUR_CLIENT_ID = "CUR_CLIENT_ID";
            internal const string CUR_CLIENT_ID_NUM = "CUR_CLIENT_ID_NUM";
            internal const string CUR_PTR_FLAGS = "CUR_PTR_FLAGS";
            internal const string CUR_AE = "CUR_AE";
            internal const string CUR_CSE = "CUR_CSE";
            internal const string CUR_KANPAY = "CUR_KANPAY";
            internal const string CUR_KSCARES = "CUR_KSCARES";
            internal const string CUR_FACTS = "CUR_FACTS";
            internal const string CUR_ALIAS_IND = "CUR_ALIAS_IND";
            internal const string CUR_REPL_IND = "CUR_REPL_IND";
            internal const string CUR_OFC_ARRAY = "CUR_OFC_ARRAY";
            internal const string CUR_OFC = "CUR_OFC";
            internal const string CUR_KEY = "CUR_KEY";
            internal const string OFC_DATA = "OFC_DATA";
            internal const string OFC_ID = "OFC_ID";
            internal const string OFC_DISC_DT = "OFC_DISC_DT";
            internal const string IMP_DATA = "IMP_DATA";
            internal const string IMP_SEARCH_TYPE = "IMP_SEARCH_TYPE";
            internal const string IMP_SEARCH_SSN = "IMP_SEARCH_SSN";
            internal const string IMP_SEARCH_NAME = "IMP_SEARCH_NAME";
            internal const string IMP_SEARCH_ID = "IMP_SEARCH_ID";
            internal const string IMP_PERCENT = "IMP_PERCENT";
            internal const string IMP_EXACT = "IMP_EXACT";
            internal const string IMP_PERCENT_9V99 = "IMP_PERCENT_9V99";
            internal const string IMP_NAME = "IMP_NAME";
            internal const string IMP_LAST_NAME = "IMP_LAST_NAME";
            internal const string IMP_FIRST_NAME = "IMP_FIRST_NAME";
            internal const string IMP_FIRST_NAME_1 = "IMP_FIRST_NAME_1";
            internal const string IMP_FIRST_NAME_2 = "IMP_FIRST_NAME_2";
            internal const string IMP_INIT = "IMP_INIT";
            internal const string IMP_DOB_SEX = "IMP_DOB_SEX";
            internal const string IMP_DOB = "IMP_DOB";
            internal const string IMP_SEX = "IMP_SEX";
            internal const string IMP_SSN_X9 = "IMP_SSN_X9";
            internal const string IMP_SSN = "IMP_SSN";
            internal const string IMP_ID_X10 = "IMP_ID_X10";
            internal const string IMP_ID = "IMP_ID";
            internal const string IMP_OFC = "IMP_OFC";
            internal const string IMP_KEY = "IMP_KEY";
            internal const string FMT_NAME = "FMT_NAME";
            internal const string TMP_PHON_DATA = "TMP_PHON_DATA";
            internal const string TMP_PHON_1 = "TMP_PHON_1";
            internal const string TMP_PHON_17 = "TMP_PHON_17";
            internal const string TMP_PHON_3 = "TMP_PHON_3";
            internal const string IMP_PHON_DATA = "IMP_PHON_DATA";
            internal const string IMP_PHON_1 = "IMP_PHON_1";
            internal const string IMP_PHON_17 = "IMP_PHON_17";
            internal const string IMP_PHON_3 = "IMP_PHON_3";
            internal const string PH_FNTIC_C1 = "PH_FNTIC_C1";
            internal const string PH_FNTIC_C2 = "PH_FNTIC_C2";
            internal const string PH_FNTIC_C3 = "PH_FNTIC_C3";
            internal const string PH_FNTIC_CX = "PH_FNTIC_CX";
            internal const string PH_SUSS_ID = "PH_SUSS_ID";
            internal const string PH_HIT = "PH_HIT";
            internal const string PH_ERR_NAME = "PH_ERR_NAME";
            internal const string PH_COUNT_UP = "PH_COUNT_UP";
            internal const string PH_COUNT_INQUIRY = "PH_COUNT_INQUIRY";
            internal const string PH_COUNT_DB = "PH_COUNT_DB";
            internal const string PH_L1 = "PH_L1";
            internal const string PH_CR1_INDXX = "PH_CR1_INDXX";
            internal const string PH_CR2_INDXX = "PH_CR2_INDXX";
            internal const string PH_CF1_INDXX = "PH_CF1_INDXX";
            internal const string PH_CF2_INDXX = "PH_CF2_INDXX";
            internal const string PH_DEGREE = "PH_DEGREE";
            internal const string PH_PERCENT = "PH_PERCENT";
            internal const string PH_NAME_RAW_INQ = "PH_NAME_RAW_INQ";
            internal const string PH_NAME_RAW_MSTR = "PH_NAME_RAW_MSTR";
            internal const string PH_NAME_CRUNCH_INQ = "PH_NAME_CRUNCH_INQ";
            internal const string PH_L_CRNCH = "PH_L_CRNCH";
            internal const string PH_NAME_REDUC_INQ = "PH_NAME_REDUC_INQ";
            internal const string PH_L_REDUC = "PH_L_REDUC";
            internal const string PH_SAVE_REDUC_INQ = "PH_SAVE_REDUC_INQ";
            internal const string PH_S_REDUC = "PH_S_REDUC";
            internal const string PH_NAME_PARTS = "PH_NAME_PARTS";
            internal const string PH_THREE_LETTERS = "PH_THREE_LETTERS";
            internal const string PH_LETTERS_3 = "PH_LETTERS_3";
            internal const string PH_TWO_LETTERS = "PH_TWO_LETTERS";
            internal const string PH_ONE_LETTER = "PH_ONE_LETTER";
            internal const string PH_NAME_34_NUMERIC = "PH_NAME_34_NUMERIC";
            internal const string PH_NAME_NUM_34 = "PH_NAME_NUM_34";
            internal const string PH_NAME_17_NUMERIC = "PH_NAME_17_NUMERIC";
            internal const string PH_NAME_NUM_17 = "PH_NAME_NUM_17";
            internal const string PH_REFMT_34_17 = "PH_REFMT_34_17";
            internal const string PH_DIGIT_1 = "PH_DIGIT_1";
            internal const string PH_DIGIT_2 = "PH_DIGIT_2";
            internal const string PH_FIRST_2_TABLE = "PH_FIRST_2_TABLE";
            internal const string PH_FIRST_2_TBL = "PH_FIRST_2_TBL";
            internal const string PH_FR2_NUM = "PH_FR2_NUM";
            internal const string PH_ALPH2 = "PH_ALPH2";
            internal const string PH_NUM2 = "PH_NUM2";
            internal const string PH_FIRST_1_TABLE = "PH_FIRST_1_TABLE";
            internal const string PH_FIRST_1_TBL = "PH_FIRST_1_TBL";
            internal const string PH_FR1_NUM = "PH_FR1_NUM";
            internal const string PH_ALPH1 = "PH_ALPH1";
            internal const string PH_NUM1 = "PH_NUM1";
            internal const string PH_REMAIN_2_TABLE = "PH_REMAIN_2_TABLE";
            internal const string PH_REMAIN_2_TBL = "PH_REMAIN_2_TBL";
            internal const string PH_RR2_NUM = "PH_RR2_NUM";
            internal const string PH_ALPHR2 = "PH_ALPHR2";
            internal const string PH_NUMR2 = "PH_NUMR2";
            internal const string PH_REMAIN_1_TABLE = "PH_REMAIN_1_TABLE";
            internal const string PH_REMAIN_1_TBL = "PH_REMAIN_1_TBL";
            internal const string PH_RR1_NUM = "PH_RR1_NUM";
            internal const string PH_ALPHR1 = "PH_ALPHR1";
            internal const string PH_NUMR1 = "PH_NUMR1";
            internal const string SW1_SWITCHES = "SW1_SWITCHES";
            internal const string SW1_EOF_SW = "SW1_EOF_SW";
            internal const string SW1_EOF_NO = "SW1_EOF_NO";
            internal const string SW1_EOF_YES = "SW1_EOF_YES";
            internal const string SW1_ERR_SW = "SW1_ERR_SW";
            internal const string SW1_ERR_NO = "SW1_ERR_NO";
            internal const string SW1_ERR_YES = "SW1_ERR_YES";
            internal const string DBK1_KEYS = "DBK1_KEYS";
            internal const string DBK1_CLIENT_NUMBER = "DBK1_CLIENT_NUMBER";
            internal const string DBK1_CLIENT_NAME = "DBK1_CLIENT_NAME";
            internal const string DBK1_SSN = "DBK1_SSN";
            internal const string DBK1_DATE_OF_BIRTH = "DBK1_DATE_OF_BIRTH";
            internal const string DBK1_GENDER = "DBK1_GENDER";
            internal const string DBK1_PHONETIC_DATA = "DBK1_PHONETIC_DATA";
            internal const string ADA1_NAME_KEY = "ADA1_NAME_KEY";
            internal const string ADA1_CLIENT_NAME = "ADA1_CLIENT_NAME";
            internal const string ADA1_SSN = "ADA1_SSN";
            internal const string ADA1_DATE_OF_BIRTH = "ADA1_DATE_OF_BIRTH";
            internal const string ADA1_SEX = "ADA1_SEX";
            internal const string ADA1_CLIENT_POINTER = "ADA1_CLIENT_POINTER";
            internal const string ADA1_CLIENT_NUMBER = "ADA1_CLIENT_NUMBER";
            internal const string ADA2_PHONETIC_KEY = "ADA2_PHONETIC_KEY";
            internal const string ADA2_PHONETIC_DATA = "ADA2_PHONETIC_DATA";
            internal const string ADA2_CLIENT_NAME = "ADA2_CLIENT_NAME";
            internal const string ADA2_SSN = "ADA2_SSN";
            internal const string ADA2_DATE_OF_BIRTH = "ADA2_DATE_OF_BIRTH";
            internal const string ADA2_SEX = "ADA2_SEX";
            internal const string ADA2_CLIENT_POINTER = "ADA2_CLIENT_POINTER";
            internal const string ADA2_CLIENT_NUMBER = "ADA2_CLIENT_NUMBER";
            internal const string ADA3_SSN_KEY = "ADA3_SSN_KEY";
            internal const string ADA3_SSN = "ADA3_SSN";
            internal const string ADA3_CLIENT_NAME = "ADA3_CLIENT_NAME";
            internal const string ADA3_DATE_OF_BIRTH = "ADA3_DATE_OF_BIRTH";
            internal const string ADA3_SEX = "ADA3_SEX";
            internal const string ADA3_CLIENT_POINTER = "ADA3_CLIENT_POINTER";
            internal const string ADA3_CLIENT_NUMBER = "ADA3_CLIENT_NUMBER";
            internal const string ADA4_ID_KEY = "ADA4_ID_KEY";
            internal const string ADA4_CLIENT_NUMBER = "ADA4_CLIENT_NUMBER";
            internal const string ADA4_CLIENT_NAME = "ADA4_CLIENT_NAME";
            internal const string ADA4_SSN = "ADA4_SSN";
            internal const string ADA4_DATE_OF_BIRTH = "ADA4_DATE_OF_BIRTH";
            internal const string ADA4_SEX = "ADA4_SEX";
            internal const string ADA4_CLIENT_POINTER21 = "ADA4_CLIENT_POINTER21";
            internal const string CL1_DCLKSD_CLIENT = "CL1_DCLKSD_CLIENT";
            internal const string CL1_SSN = "CL1_SSN";
            internal const string CL1_PREVIOUS_SSN = "CL1_PREVIOUS_SSN";
            internal const string CL1_PHONETIC_DATA = "CL1_PHONETIC_DATA";
            internal const string CL1_DT_OF_LAST_UPDATE = "CL1_DT_OF_LAST_UPDATE";
            internal const string CL1_DATE_OF_BIRTH = "CL1_DATE_OF_BIRTH";
            internal const string CL1_GENDER = "CL1_GENDER";
            internal const string CL1_VERIFIED_SSN_FLAG = "CL1_VERIFIED_SSN_FLAG";
            internal const string CL1_CLIENT_NAME = "CL1_CLIENT_NAME";
            internal const string CL1_CREATED_BY = "CL1_CREATED_BY";
            internal const string CL1_CREATED_TIMESTAMP = "CL1_CREATED_TIMESTAMP";
            internal const string CL1_LAST_MODIFIED_BY = "CL1_LAST_MODIFIED_BY";
            internal const string CL1_LAST_MODIFIED_TMST = "CL1_LAST_MODIFIED_TMST";
            internal const string CL1_FK_CLB_CLIENT_NO = "CL1_FK_CLB_CLIENT_NO";
            internal const string WS9_SYSTEM_CODES = "WS9_SYSTEM_CODES";
            internal const string WS9_SYSTEM_CODE_AE = "WS9_SYSTEM_CODE_AE";
            internal const string WS9_SYSTEM_CODE_CS = "WS9_SYSTEM_CODE_CS";
            internal const string WS9_SYSTEM_CODE_KA = "WS9_SYSTEM_CODE_KA";
            internal const string WS9_SYSTEM_CODE_KS = "WS9_SYSTEM_CODE_KS";
            internal const string WS9_SYSTEM_CODE_FA = "WS9_SYSTEM_CODE_FA";
            internal const string SW9_SWITCHES = "SW9_SWITCHES";
            internal const string SW9_EOF_SW = "SW9_EOF_SW";
            internal const string SW9_EOF_NOT_FOUND = "SW9_EOF_NOT_FOUND";
            internal const string SW9_EOF_NO = "SW9_EOF_NO";
            internal const string SW9_EOF_YES = "SW9_EOF_YES";
            internal const string SW9_ERR_SW = "SW9_ERR_SW";
            internal const string SW9_ERR_NO = "SW9_ERR_NO";
            internal const string SW9_ERR_YES = "SW9_ERR_YES";
            internal const string SW9_SELECT_CLIENT_SW = "SW9_SELECT_CLIENT_SW";
            internal const string SW9_SELECT_CLIENT_NO = "SW9_SELECT_CLIENT_NO";
            internal const string SW9_SELECT_CLIENT_YES = "SW9_SELECT_CLIENT_YES";
            internal const string WS9_CLIENT_POINTER = "WS9_CLIENT_POINTER";
            internal const string WS9_CLIENT_ID = "WS9_CLIENT_ID";
            internal const string WS9_VERIFIED_SSN_FLAG = "WS9_VERIFIED_SSN_FLAG";
            internal const string WS9_SYSTEM_PARTICIPATION = "WS9_SYSTEM_PARTICIPATION";
            internal const string WS9_SYS_PART_AE = "WS9_SYS_PART_AE";
            internal const string WS9_SYS_PART_CSE = "WS9_SYS_PART_CSE";
            internal const string WS9_SYS_PART_KANPAY = "WS9_SYS_PART_KANPAY";
            internal const string WS9_SYS_PART_KSCARES = "WS9_SYS_PART_KSCARES";
            internal const string WS9_SYS_PART_FACTS = "WS9_SYS_PART_FACTS";
            internal const string WS9_ABEND_FIELDS = "WS9_ABEND_FIELDS";
            internal const string WS9_ABEND_TYPE = "WS9_ABEND_TYPE";
            internal const string WS9_ABEND_TYPE_NONE = "WS9_ABEND_TYPE_NONE";
            internal const string WS9_ABEND_TYPE_ADABAS = "WS9_ABEND_TYPE_ADABAS";
            internal const string WS9_ABEND_TYPE_CICS = "WS9_ABEND_TYPE_CICS";
            internal const string WS9_ABEND_ADABAS = "WS9_ABEND_ADABAS";
            internal const string WS9_ADA_FILE_NUMBER = "WS9_ADA_FILE_NUMBER";
            internal const string WS9_ADA_FILE_ACTION = "WS9_ADA_FILE_ACTION";
            internal const string WS9_ADA_RESPONSE_CD = "WS9_ADA_RESPONSE_CD";
            internal const string WS9_ABEND_CICS = "WS9_ABEND_CICS";
            internal const string WS9_CICS_RESOURCE_NM = "WS9_CICS_RESOURCE_NM";
            internal const string WS9_CICS_FUNCTION_CD = "WS9_CICS_FUNCTION_CD";
            internal const string WS9_CICS_RESPONSE_CD = "WS9_CICS_RESPONSE_CD";
            internal const string WS9_MISC = "WS9_MISC";
            internal const string WS9_MSG_X = "WS9_MSG_X";
            internal const string WS9_MSG_PROG = "WS9_MSG_PROG";
            internal const string WS9_MSG_1 = "WS9_MSG_1";
            internal const string WS9_MSG = "WS9_MSG";
            internal const string WS9_MSG_CODE = "WS9_MSG_CODE";
            internal const string WS9_MSG_SQLCODE = "WS9_MSG_SQLCODE";
            internal const string WS9_MSG_2 = "WS9_MSG_2";
            internal const string WS9_MSG_FIELD = "WS9_MSG_FIELD";
            internal const string WS9_MSG_VALUE = "WS9_MSG_VALUE";
            internal const string WS9_DATE_ADA = "WS9_DATE_ADA";
            internal const string WS9_DATE_DB2 = "WS9_DATE_DB2";
            internal const string DBK9_KEYS = "DBK9_KEYS";
            internal const string DBK9_CLIENT_NUMBER = "DBK9_CLIENT_NUMBER";
            internal const string DBK9_CLIENT_NAME = "DBK9_CLIENT_NAME";
            internal const string DBK9_SSN = "DBK9_SSN";
            internal const string CLB9_DCLKSD_CLIENT_BASIC = "CLB9_DCLKSD_CLIENT_BASIC";
            internal const string CLB9_CLIENT_NUMBER = "CLB9_CLIENT_NUMBER";
            internal const string CLB9_CLIENT_GIVEN_NAME = "CLB9_CLIENT_GIVEN_NAME";
            internal const string CLB9_CLIENT_INITIALS = "CLB9_CLIENT_INITIALS";
            internal const string CLB9_CLIENT_SURNAME = "CLB9_CLIENT_SURNAME";
            internal const string CLB9_CIS_REPL_IND = "CLB9_CIS_REPL_IND";
            internal const string CLB9_WORK_PHONE = "CLB9_WORK_PHONE";
            internal const string CLB9_SSN = "CLB9_SSN";
            internal const string CLB9_GENDER = "CLB9_GENDER";
            internal const string CLB9_PARENT_RGHTS_SEV = "CLB9_PARENT_RGHTS_SEV";
            internal const string CLB9_PRNT_RGHTS_SEV_DT = "CLB9_PRNT_RGHTS_SEV_DT";
            internal const string CLB9_LEGAL_STATUS = "CLB9_LEGAL_STATUS";
            internal const string CLB9_INSURANCE_CODE = "CLB9_INSURANCE_CODE";
            internal const string CLB9_INITIAL_CUSTODY_DT = "CLB9_INITIAL_CUSTODY_DT";
            internal const string CLB9_HOME_PHONE = "CLB9_HOME_PHONE";
            internal const string CLB9_DATE_OF_BIRTH = "CLB9_DATE_OF_BIRTH";
            internal const string CLB9_CURR_PLACEMNT_DT = "CLB9_CURR_PLACEMNT_DT";
            internal const string CLB9_CURRENT_PLACEMENT = "CLB9_CURRENT_PLACEMENT";
            internal const string CLB9_CSEA_G_CAUSE_CODE = "CLB9_CSEA_G_CAUSE_CODE";
            internal const string CLB9_CSEA_G_CAUSE_CL_DT = "CLB9_CSEA_G_CAUSE_CL_DT";
            internal const string CLB9_CSEA_COOP_CODE = "CLB9_CSEA_COOP_CODE";
            internal const string CLB9_COUNTY_CRT_COMMIT = "CLB9_COUNTY_CRT_COMMIT";
            internal const string CLB9_MONTHS_ASST_AF = "CLB9_MONTHS_ASST_AF";
            internal const string CLB9_MONTHS_ASST_GA = "CLB9_MONTHS_ASST_GA";
            internal const string CLB9_MO_DEATH_DT = "CLB9_MO_DEATH_DT";
            internal const string CLB9_MO_PRT_DT = "CLB9_MO_PRT_DT";
            internal const string CLB9_FA_DEATH_DT = "CLB9_FA_DEATH_DT";
            internal const string CLB9_FA_PRT_DT = "CLB9_FA_PRT_DT";
            internal const string CLB9_MPI_ID = "CLB9_MPI_ID";
            internal const string CLB9_MED_COVERAGE_IND = "CLB9_MED_COVERAGE_IND";
            internal const string CLB9_INSURANCE_CARRIER = "CLB9_INSURANCE_CARRIER";
            internal const string CLB9_INSURANCE_POLCY_NO = "CLB9_INSURANCE_POLCY_NO";
            internal const string CLB9_SPOKEN_LANGUAGE = "CLB9_SPOKEN_LANGUAGE";
            internal const string CLB9_WRITTEN_LANGUAGE = "CLB9_WRITTEN_LANGUAGE";
            internal const string CLB9_STATE_OF_BIRTH = "CLB9_STATE_OF_BIRTH";
            internal const string CLB9_SCHOOL_DISTRICT = "CLB9_SCHOOL_DISTRICT";
            internal const string CLB9_ETHNIC_CLASS = "CLB9_ETHNIC_CLASS";
            internal const string CLB9_SUFFIX_NAME = "CLB9_SUFFIX_NAME";
            internal const string CLB9_EMPLOYER_NAME = "CLB9_EMPLOYER_NAME";
            internal const string CLB9_EARNED_INCOME_AMT = "CLB9_EARNED_INCOME_AMT";
            internal const string CLB9_INCOME_FREQUENCY = "CLB9_INCOME_FREQUENCY";
            internal const string CLB9_KEES_ABMS_ID = "CLB9_KEES_ABMS_ID";
            internal const string CLB9_EMAIL_ADDRESS = "CLB9_EMAIL_ADDRESS";
            internal const string CLB9_EMAIL_ADDRESS_LEN = "CLB9_EMAIL_ADDRESS_LEN";
            internal const string CLB9_EMAIL_ADDRESS_TEXT = "CLB9_EMAIL_ADDRESS_TEXT";
            internal const string CLB9_OCCUPATION = "CLB9_OCCUPATION";
            internal const string CLB9_OCCUPATION_LEN = "CLB9_OCCUPATION_LEN";
            internal const string CLB9_OCCUPATION_TEXT = "CLB9_OCCUPATION_TEXT";
            internal const string CLB9_CREATED_BY = "CLB9_CREATED_BY";
            internal const string CLB9_CREATED_TIMESTAMP = "CLB9_CREATED_TIMESTAMP";
            internal const string CLB9_LAST_MODIFIED_BY = "CLB9_LAST_MODIFIED_BY";
            internal const string CLB9_LAST_MODIFIED_TMST = "CLB9_LAST_MODIFIED_TMST";
            internal const string CL9_DCLKSD_CLIENT = "CL9_DCLKSD_CLIENT";
            internal const string CL9_SSN = "CL9_SSN";
            internal const string CL9_PREVIOUS_SSN = "CL9_PREVIOUS_SSN";
            internal const string CL9_PHONETIC_DATA = "CL9_PHONETIC_DATA";
            internal const string CL9_DT_OF_LAST_UPDATE = "CL9_DT_OF_LAST_UPDATE";
            internal const string CL9_DATE_OF_BIRTH = "CL9_DATE_OF_BIRTH";
            internal const string CL9_GENDER = "CL9_GENDER";
            internal const string CL9_VERIFIED_SSN_FLAG = "CL9_VERIFIED_SSN_FLAG";
            internal const string CL9_CLIENT_NAME = "CL9_CLIENT_NAME";
            internal const string CL9_CREATED_BY = "CL9_CREATED_BY";
            internal const string CL9_CREATED_TIMESTAMP = "CL9_CREATED_TIMESTAMP";
            internal const string CL9_LAST_MODIFIED_BY = "CL9_LAST_MODIFIED_BY";
            internal const string CL9_LAST_MODIFIED_TMST = "CL9_LAST_MODIFIED_TMST";
            internal const string CL9_FK_CLB_CLIENT_NO = "CL9_FK_CLB_CLIENT_NO";
            internal const string SP9_DCLKSD_SYSTEM_PART = "SP9_DCLKSD_SYSTEM_PART";
            internal const string SP9_SYSTEM_CODE = "SP9_SYSTEM_CODE";
            internal const string SP9_PARTICIPATION_FLAG = "SP9_PARTICIPATION_FLAG";
            internal const string SP9_CREATED_TIMESTAMP = "SP9_CREATED_TIMESTAMP";
            internal const string SP9_CREATED_BY = "SP9_CREATED_BY";
            internal const string SP9_LAST_MODIFIED_BY = "SP9_LAST_MODIFIED_BY";
            internal const string SP9_LAST_MODIFIED_TMST = "SP9_LAST_MODIFIED_TMST";
            internal const string SP9_FK_CLB_CLIENT_NO = "SP9_FK_CLB_CLIENT_NO";
            internal const string SP9_FK_CLI_CLIENT_NAME = "SP9_FK_CLI_CLIENT_NAME";
            internal const string SP9_FK_CLI_SSN = "SP9_FK_CLI_SSN";
            internal const string PH_CF2_INDEX = "PH_CF2_INDEX";
            internal const string PH_CF1_INDEX = "PH_CF1_INDEX";
            internal const string PH_CR2_INDEX = "PH_CR2_INDEX";
            internal const string PH_CR1_INDEX = "PH_CR1_INDEX";
        }
        #endregion

        #region Direct-access element properties
        public IField ADIM1 { get { return GetElementByName<IField>(Names.ADIM1); } }
        public IField ADIM2 { get { return GetElementByName<IField>(Names.ADIM2); } }
        public IField ADIM3 { get { return GetElementByName<IField>(Names.ADIM3); } }
        public IField GROUP_EXPORT_0001FL { get { return GetElementByName<IField>(Names.GROUP_EXPORT_0001FL); } }
        public IField GROUP_EXPORT_0001PS { get { return GetElementByName<IField>(Names.GROUP_EXPORT_0001PS); } }
        public IField GROUP_EXPORT_0001RF { get { return GetElementByName<IField>(Names.GROUP_EXPORT_0001RF); } }
        public IField FUNC_0329211337_ESC_FLAG { get { return GetElementByName<IField>(Names.FUNC_0329211337_ESC_FLAG); } }
        public IField SRADALNK { get { return GetElementByName<IField>(Names.SRADALNK); } }
        public IField SRMODLNK { get { return GetElementByName<IField>(Names.SRMODLNK); } }
        public IField SQLNUMB { get { return GetElementByName<IField>(Names.SQLNUMB); } }
        public IField EXIT_PGM_SW { get { return GetElementByName<IField>(Names.EXIT_PGM_SW); } }
        public ICheckField EXIT_PGM { get { return GetElementByName<ICheckField>(Names.EXIT_PGM); } }
        public IField STOP_READ { get { return GetElementByName<IField>(Names.STOP_READ); } }
        public IField OFC_FND { get { return GetElementByName<IField>(Names.OFC_FND); } }
        public IGroup INDEXS { get { return GetElementByName<IGroup>(Names.INDEXS); } }
        public IField MAX_NAME { get { return GetElementByName<IField>(Names.MAX_NAME); } }
        public IField MAX_OFC { get { return GetElementByName<IField>(Names.MAX_OFC); } }
        public IField TOT_OFC { get { return GetElementByName<IField>(Names.TOT_OFC); } }
        public IField NAME_LEN { get { return GetElementByName<IField>(Names.NAME_LEN); } }
        public IField OFC_LEN { get { return GetElementByName<IField>(Names.OFC_LEN); } }
        public IField I1 { get { return GetElementByName<IField>(Names.I1); } }
        public IField I2 { get { return GetElementByName<IField>(Names.I2); } }
        public IField I3 { get { return GetElementByName<IField>(Names.I3); } }
        public IField I4 { get { return GetElementByName<IField>(Names.I4); } }
        public IField TMP_OFC { get { return GetElementByName<IField>(Names.TMP_OFC); } }
        public IArrayElementAccessor<IField> TMP_OFC_X { get { return GetArrayElementAccessor<IField>(Names.TMP_OFC_X); } }
        public IGroup TMP_NAME { get { return GetElementByName<IGroup>(Names.TMP_NAME); } }
        public IField TMP_LAST_NAME { get { return GetElementByName<IField>(Names.TMP_LAST_NAME); } }
        public IGroup TMP_FIRST_NAME { get { return GetElementByName<IGroup>(Names.TMP_FIRST_NAME); } }
        public IField TMP_FIRST_NAME_1 { get { return GetElementByName<IField>(Names.TMP_FIRST_NAME_1); } }
        public IField TMP_FIRST_NAME_11 { get { return GetElementByName<IField>(Names.TMP_FIRST_NAME_11); } }
        public IField TMP_INITIAL { get { return GetElementByName<IField>(Names.TMP_INITIAL); } }
        public IField WRK_LAST_NAME { get { return GetElementByName<IField>(Names.WRK_LAST_NAME); } }
        public IField WRK_FIRST_NAME { get { return GetElementByName<IField>(Names.WRK_FIRST_NAME); } }
        public IGroup CUR_CLIENT_DATA { get { return GetElementByName<IGroup>(Names.CUR_CLIENT_DATA); } }
        public IGroup CUR_NAME { get { return GetElementByName<IGroup>(Names.CUR_NAME); } }
        public IField CUR_LAST_NAME { get { return GetElementByName<IField>(Names.CUR_LAST_NAME); } }
        public IField CUR_FIRST_NAME { get { return GetElementByName<IField>(Names.CUR_FIRST_NAME); } }
        public IField CUR_INIT { get { return GetElementByName<IField>(Names.CUR_INIT); } }
        public IField CUR_SSN { get { return GetElementByName<IField>(Names.CUR_SSN); } }
        public IGroup CUR_DOB_SEX { get { return GetElementByName<IGroup>(Names.CUR_DOB_SEX); } }
        public IField CUR_DOB { get { return GetElementByName<IField>(Names.CUR_DOB); } }
        public IField CUR_SEX { get { return GetElementByName<IField>(Names.CUR_SEX); } }
        public IGroup CUR_POINTER { get { return GetElementByName<IGroup>(Names.CUR_POINTER); } }
        public IField CUR_CLIENT_ID { get { return GetElementByName<IField>(Names.CUR_CLIENT_ID); } }
        public IField CUR_CLIENT_ID_NUM { get { return GetElementByName<IField>(Names.CUR_CLIENT_ID_NUM); } }
        public IGroup CUR_PTR_FLAGS { get { return GetElementByName<IGroup>(Names.CUR_PTR_FLAGS); } }
        public IField CUR_AE { get { return GetElementByName<IField>(Names.CUR_AE); } }
        public IField CUR_CSE { get { return GetElementByName<IField>(Names.CUR_CSE); } }
        public IField CUR_KANPAY { get { return GetElementByName<IField>(Names.CUR_KANPAY); } }
        public IField CUR_KSCARES { get { return GetElementByName<IField>(Names.CUR_KSCARES); } }
        public IField CUR_FACTS { get { return GetElementByName<IField>(Names.CUR_FACTS); } }
        public IField CUR_ALIAS_IND { get { return GetElementByName<IField>(Names.CUR_ALIAS_IND); } }
        public IField CUR_REPL_IND { get { return GetElementByName<IField>(Names.CUR_REPL_IND); } }
        public IArrayElementAccessor<IGroup> CUR_OFC_ARRAY { get { return GetArrayElementAccessor<IGroup>(Names.CUR_OFC_ARRAY); } }
        public IArrayElementAccessor<IField> CUR_OFC { get { return GetArrayElementAccessor<IField>(Names.CUR_OFC); } }
        public IField CUR_KEY { get { return GetElementByName<IField>(Names.CUR_KEY); } }
        public IGroup OFC_DATA { get { return GetElementByName<IGroup>(Names.OFC_DATA); } }
        public IField OFC_ID { get { return GetElementByName<IField>(Names.OFC_ID); } }
        public IField OFC_DISC_DT { get { return GetElementByName<IField>(Names.OFC_DISC_DT); } }
        public IGroup IMP_DATA { get { return GetElementByName<IGroup>(Names.IMP_DATA); } }
        public IField IMP_SEARCH_TYPE { get { return GetElementByName<IField>(Names.IMP_SEARCH_TYPE); } }
        public ICheckField IMP_SEARCH_SSN { get { return GetElementByName<ICheckField>(Names.IMP_SEARCH_SSN); } }
        public ICheckField IMP_SEARCH_NAME { get { return GetElementByName<ICheckField>(Names.IMP_SEARCH_NAME); } }
        public ICheckField IMP_SEARCH_ID { get { return GetElementByName<ICheckField>(Names.IMP_SEARCH_ID); } }
        public IField IMP_PERCENT { get { return GetElementByName<IField>(Names.IMP_PERCENT); } }
        public ICheckField IMP_EXACT { get { return GetElementByName<ICheckField>(Names.IMP_EXACT); } }
        public IField IMP_PERCENT_9V99 { get { return GetElementByName<IField>(Names.IMP_PERCENT_9V99); } }
        public IGroup IMP_NAME { get { return GetElementByName<IGroup>(Names.IMP_NAME); } }
        public IField IMP_LAST_NAME { get { return GetElementByName<IField>(Names.IMP_LAST_NAME); } }
        public IGroup IMP_FIRST_NAME { get { return GetElementByName<IGroup>(Names.IMP_FIRST_NAME); } }
        public IField IMP_FIRST_NAME_1 { get { return GetElementByName<IField>(Names.IMP_FIRST_NAME_1); } }
        public IField IMP_FIRST_NAME_2 { get { return GetElementByName<IField>(Names.IMP_FIRST_NAME_2); } }
        public IField IMP_INIT { get { return GetElementByName<IField>(Names.IMP_INIT); } }
        public IGroup IMP_DOB_SEX { get { return GetElementByName<IGroup>(Names.IMP_DOB_SEX); } }
        public IField IMP_DOB { get { return GetElementByName<IField>(Names.IMP_DOB); } }
        public IField IMP_SEX { get { return GetElementByName<IField>(Names.IMP_SEX); } }
        public IGroup IMP_SSN_X9 { get { return GetElementByName<IGroup>(Names.IMP_SSN_X9); } }
        public IField IMP_SSN { get { return GetElementByName<IField>(Names.IMP_SSN); } }
        public IGroup IMP_ID_X10 { get { return GetElementByName<IGroup>(Names.IMP_ID_X10); } }
        public IField IMP_ID { get { return GetElementByName<IField>(Names.IMP_ID); } }
        public IField IMP_OFC { get { return GetElementByName<IField>(Names.IMP_OFC); } }
        public IField IMP_KEY { get { return GetElementByName<IField>(Names.IMP_KEY); } }
        public IField FMT_NAME { get { return GetElementByName<IField>(Names.FMT_NAME); } }
        public IGroup TMP_PHON_DATA { get { return GetElementByName<IGroup>(Names.TMP_PHON_DATA); } }
        public IField TMP_PHON_1 { get { return GetElementByName<IField>(Names.TMP_PHON_1); } }
        public IField TMP_PHON_17 { get { return GetElementByName<IField>(Names.TMP_PHON_17); } }
        public IField TMP_PHON_3 { get { return GetElementByName<IField>(Names.TMP_PHON_3); } }
        public IGroup IMP_PHON_DATA { get { return GetElementByName<IGroup>(Names.IMP_PHON_DATA); } }
        public IField IMP_PHON_1 { get { return GetElementByName<IField>(Names.IMP_PHON_1); } }
        public IField IMP_PHON_17 { get { return GetElementByName<IField>(Names.IMP_PHON_17); } }
        public IField IMP_PHON_3 { get { return GetElementByName<IField>(Names.IMP_PHON_3); } }
        public IField PH_FNTIC_C1 { get { return GetElementByName<IField>(Names.PH_FNTIC_C1); } }
        public IField PH_FNTIC_C2 { get { return GetElementByName<IField>(Names.PH_FNTIC_C2); } }
        public IField PH_FNTIC_C3 { get { return GetElementByName<IField>(Names.PH_FNTIC_C3); } }
        public IField PH_FNTIC_CX { get { return GetElementByName<IField>(Names.PH_FNTIC_CX); } }
        public IField PH_SUSS_ID { get { return GetElementByName<IField>(Names.PH_SUSS_ID); } }
        public IField PH_HIT { get { return GetElementByName<IField>(Names.PH_HIT); } }
        public IField PH_ERR_NAME { get { return GetElementByName<IField>(Names.PH_ERR_NAME); } }
        public IField PH_COUNT_UP { get { return GetElementByName<IField>(Names.PH_COUNT_UP); } }
        public IField PH_COUNT_INQUIRY { get { return GetElementByName<IField>(Names.PH_COUNT_INQUIRY); } }
        public IField PH_COUNT_DB { get { return GetElementByName<IField>(Names.PH_COUNT_DB); } }
        public IField PH_L1 { get { return GetElementByName<IField>(Names.PH_L1); } }
        public IField PH_CR1_INDXX { get { return GetElementByName<IField>(Names.PH_CR1_INDXX); } }
        public IField PH_CR2_INDXX { get { return GetElementByName<IField>(Names.PH_CR2_INDXX); } }
        public IField PH_CF1_INDXX { get { return GetElementByName<IField>(Names.PH_CF1_INDXX); } }
        public IField PH_CF2_INDXX { get { return GetElementByName<IField>(Names.PH_CF2_INDXX); } }
        public IField PH_DEGREE { get { return GetElementByName<IField>(Names.PH_DEGREE); } }
        public IField PH_PERCENT { get { return GetElementByName<IField>(Names.PH_PERCENT); } }
        public IField PH_NAME_RAW_INQ { get { return GetElementByName<IField>(Names.PH_NAME_RAW_INQ); } }
        public IField PH_NAME_RAW_MSTR { get { return GetElementByName<IField>(Names.PH_NAME_RAW_MSTR); } }
        public IGroup PH_NAME_CRUNCH_INQ { get { return GetElementByName<IGroup>(Names.PH_NAME_CRUNCH_INQ); } }
        public IArrayElementAccessor<IField> PH_L_CRNCH { get { return GetArrayElementAccessor<IField>(Names.PH_L_CRNCH); } }
        public IGroup PH_NAME_REDUC_INQ { get { return GetElementByName<IGroup>(Names.PH_NAME_REDUC_INQ); } }
        public IArrayElementAccessor<IField> PH_L_REDUC { get { return GetArrayElementAccessor<IField>(Names.PH_L_REDUC); } }
        public IGroup PH_SAVE_REDUC_INQ { get { return GetElementByName<IGroup>(Names.PH_SAVE_REDUC_INQ); } }
        public IArrayElementAccessor<IField> PH_S_REDUC { get { return GetArrayElementAccessor<IField>(Names.PH_S_REDUC); } }
        public IGroup PH_NAME_PARTS { get { return GetElementByName<IGroup>(Names.PH_NAME_PARTS); } }
        public IGroup PH_THREE_LETTERS { get { return GetElementByName<IGroup>(Names.PH_THREE_LETTERS); } }
        public IArrayElementAccessor<IField> PH_LETTERS_3 { get { return GetArrayElementAccessor<IField>(Names.PH_LETTERS_3); } }
        public IField PH_TWO_LETTERS { get { return GetElementByName<IField>(Names.PH_TWO_LETTERS); } }
        public IField PH_ONE_LETTER { get { return GetElementByName<IField>(Names.PH_ONE_LETTER); } }
        public IGroup PH_NAME_34_NUMERIC { get { return GetElementByName<IGroup>(Names.PH_NAME_34_NUMERIC); } }
        public IArrayElementAccessor<IField> PH_NAME_NUM_34 { get { return GetArrayElementAccessor<IField>(Names.PH_NAME_NUM_34); } }
        public IGroup PH_NAME_17_NUMERIC { get { return GetElementByName<IGroup>(Names.PH_NAME_17_NUMERIC); } }
        public IArrayElementAccessor<IField> PH_NAME_NUM_17 { get { return GetArrayElementAccessor<IField>(Names.PH_NAME_NUM_17); } }
        public IGroup PH_REFMT_34_17 { get { return GetElementByName<IGroup>(Names.PH_REFMT_34_17); } }
        public IField PH_DIGIT_1 { get { return GetElementByName<IField>(Names.PH_DIGIT_1); } }
        public IField PH_DIGIT_2 { get { return GetElementByName<IField>(Names.PH_DIGIT_2); } }
        public IGroup PH_FIRST_2_TABLE { get { return GetElementByName<IGroup>(Names.PH_FIRST_2_TABLE); } }
        public IGroup PH_FIRST_2_TBL { get { return GetElementByName<IGroup>(Names.PH_FIRST_2_TBL); } }
        public IArrayElementAccessor<IGroup> PH_FR2_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_FR2_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPH2 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPH2); } }
        public IArrayElementAccessor<IField> PH_NUM2 { get { return GetArrayElementAccessor<IField>(Names.PH_NUM2); } }
        public IGroup PH_FIRST_1_TABLE { get { return GetElementByName<IGroup>(Names.PH_FIRST_1_TABLE); } }
        public IGroup PH_FIRST_1_TBL { get { return GetElementByName<IGroup>(Names.PH_FIRST_1_TBL); } }
        public IArrayElementAccessor<IGroup> PH_FR1_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_FR1_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPH1 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPH1); } }
        public IArrayElementAccessor<IField> PH_NUM1 { get { return GetArrayElementAccessor<IField>(Names.PH_NUM1); } }
        public IGroup PH_REMAIN_2_TABLE { get { return GetElementByName<IGroup>(Names.PH_REMAIN_2_TABLE); } }
        public IGroup PH_REMAIN_2_TBL { get { return GetElementByName<IGroup>(Names.PH_REMAIN_2_TBL); } }
        public IArrayElementAccessor<IGroup> PH_RR2_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_RR2_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPHR2 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPHR2); } }
        public IArrayElementAccessor<IField> PH_NUMR2 { get { return GetArrayElementAccessor<IField>(Names.PH_NUMR2); } }
        public IGroup PH_REMAIN_1_TABLE { get { return GetElementByName<IGroup>(Names.PH_REMAIN_1_TABLE); } }
        public IGroup PH_REMAIN_1_TBL { get { return GetElementByName<IGroup>(Names.PH_REMAIN_1_TBL); } }
        public IArrayElementAccessor<IGroup> PH_RR1_NUM { get { return GetArrayElementAccessor<IGroup>(Names.PH_RR1_NUM); } }
        public IArrayElementAccessor<IField> PH_ALPHR1 { get { return GetArrayElementAccessor<IField>(Names.PH_ALPHR1); } }
        public IArrayElementAccessor<IField> PH_NUMR1 { get { return GetArrayElementAccessor<IField>(Names.PH_NUMR1); } }
        public IGroup SW1_SWITCHES { get { return GetElementByName<IGroup>(Names.SW1_SWITCHES); } }
        public IField SW1_EOF_SW { get { return GetElementByName<IField>(Names.SW1_EOF_SW); } }
        public ICheckField SW1_EOF_NO { get { return GetElementByName<ICheckField>(Names.SW1_EOF_NO); } }
        public ICheckField SW1_EOF_YES { get { return GetElementByName<ICheckField>(Names.SW1_EOF_YES); } }
        public IField SW1_ERR_SW { get { return GetElementByName<IField>(Names.SW1_ERR_SW); } }
        public ICheckField SW1_ERR_NO { get { return GetElementByName<ICheckField>(Names.SW1_ERR_NO); } }
        public ICheckField SW1_ERR_YES { get { return GetElementByName<ICheckField>(Names.SW1_ERR_YES); } }
        public IGroup DBK1_KEYS { get { return GetElementByName<IGroup>(Names.DBK1_KEYS); } }
        public IField DBK1_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.DBK1_CLIENT_NUMBER); } }
        public IField DBK1_CLIENT_NAME { get { return GetElementByName<IField>(Names.DBK1_CLIENT_NAME); } }
        public IField DBK1_SSN { get { return GetElementByName<IField>(Names.DBK1_SSN); } }
        public IField DBK1_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.DBK1_DATE_OF_BIRTH); } }
        public IField DBK1_GENDER { get { return GetElementByName<IField>(Names.DBK1_GENDER); } }
        public IField DBK1_PHONETIC_DATA { get { return GetElementByName<IField>(Names.DBK1_PHONETIC_DATA); } }
        public IGroup ADA1_NAME_KEY { get { return GetElementByName<IGroup>(Names.ADA1_NAME_KEY); } }
        public IField ADA1_CLIENT_NAME { get { return GetElementByName<IField>(Names.ADA1_CLIENT_NAME); } }
        public IField ADA1_SSN { get { return GetElementByName<IField>(Names.ADA1_SSN); } }
        public IField ADA1_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.ADA1_DATE_OF_BIRTH); } }
        public IField ADA1_SEX { get { return GetElementByName<IField>(Names.ADA1_SEX); } }
        public IGroup ADA1_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.ADA1_CLIENT_POINTER); } }
        public IField ADA1_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.ADA1_CLIENT_NUMBER); } }
        public IGroup ADA2_PHONETIC_KEY { get { return GetElementByName<IGroup>(Names.ADA2_PHONETIC_KEY); } }
        public IField ADA2_PHONETIC_DATA { get { return GetElementByName<IField>(Names.ADA2_PHONETIC_DATA); } }
        public IField ADA2_CLIENT_NAME { get { return GetElementByName<IField>(Names.ADA2_CLIENT_NAME); } }
        public IField ADA2_SSN { get { return GetElementByName<IField>(Names.ADA2_SSN); } }
        public IField ADA2_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.ADA2_DATE_OF_BIRTH); } }
        public IField ADA2_SEX { get { return GetElementByName<IField>(Names.ADA2_SEX); } }
        public IGroup ADA2_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.ADA2_CLIENT_POINTER); } }
        public IField ADA2_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.ADA2_CLIENT_NUMBER); } }
        public IGroup ADA3_SSN_KEY { get { return GetElementByName<IGroup>(Names.ADA3_SSN_KEY); } }
        public IField ADA3_SSN { get { return GetElementByName<IField>(Names.ADA3_SSN); } }
        public IField ADA3_CLIENT_NAME { get { return GetElementByName<IField>(Names.ADA3_CLIENT_NAME); } }
        public IField ADA3_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.ADA3_DATE_OF_BIRTH); } }
        public IField ADA3_SEX { get { return GetElementByName<IField>(Names.ADA3_SEX); } }
        public IGroup ADA3_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.ADA3_CLIENT_POINTER); } }
        public IField ADA3_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.ADA3_CLIENT_NUMBER); } }
        public IGroup ADA4_ID_KEY { get { return GetElementByName<IGroup>(Names.ADA4_ID_KEY); } }
        public IField ADA4_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.ADA4_CLIENT_NUMBER); } }
        public IField ADA4_CLIENT_NAME { get { return GetElementByName<IField>(Names.ADA4_CLIENT_NAME); } }
        public IField ADA4_SSN { get { return GetElementByName<IField>(Names.ADA4_SSN); } }
        public IField ADA4_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.ADA4_DATE_OF_BIRTH); } }
        public IField ADA4_SEX { get { return GetElementByName<IField>(Names.ADA4_SEX); } }
        public IField ADA4_CLIENT_POINTER21 { get { return GetElementByName<IField>(Names.ADA4_CLIENT_POINTER21); } }
        public IGroup CL1_DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.CL1_DCLKSD_CLIENT); } }
        public IField CL1_SSN { get { return GetElementByName<IField>(Names.CL1_SSN); } }
        public IField CL1_PREVIOUS_SSN { get { return GetElementByName<IField>(Names.CL1_PREVIOUS_SSN); } }
        public IField CL1_PHONETIC_DATA { get { return GetElementByName<IField>(Names.CL1_PHONETIC_DATA); } }
        public IField CL1_DT_OF_LAST_UPDATE { get { return GetElementByName<IField>(Names.CL1_DT_OF_LAST_UPDATE); } }
        public IField CL1_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CL1_DATE_OF_BIRTH); } }
        public IField CL1_GENDER { get { return GetElementByName<IField>(Names.CL1_GENDER); } }
        public IField CL1_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CL1_VERIFIED_SSN_FLAG); } }
        public IField CL1_CLIENT_NAME { get { return GetElementByName<IField>(Names.CL1_CLIENT_NAME); } }
        public IField CL1_CREATED_BY { get { return GetElementByName<IField>(Names.CL1_CREATED_BY); } }
        public IField CL1_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CL1_CREATED_TIMESTAMP); } }
        public IField CL1_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CL1_LAST_MODIFIED_BY); } }
        public IField CL1_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CL1_LAST_MODIFIED_TMST); } }
        public IField CL1_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CL1_FK_CLB_CLIENT_NO); } }
        public IGroup WS9_SYSTEM_CODES { get { return GetElementByName<IGroup>(Names.WS9_SYSTEM_CODES); } }
        public IField WS9_SYSTEM_CODE_AE { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_AE); } }
        public IField WS9_SYSTEM_CODE_CS { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_CS); } }
        public IField WS9_SYSTEM_CODE_KA { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_KA); } }
        public IField WS9_SYSTEM_CODE_KS { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_KS); } }
        public IField WS9_SYSTEM_CODE_FA { get { return GetElementByName<IField>(Names.WS9_SYSTEM_CODE_FA); } }
        public IGroup SW9_SWITCHES { get { return GetElementByName<IGroup>(Names.SW9_SWITCHES); } }
        public IField SW9_EOF_SW { get { return GetElementByName<IField>(Names.SW9_EOF_SW); } }
        public ICheckField SW9_EOF_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.SW9_EOF_NOT_FOUND); } }
        public ICheckField SW9_EOF_NO { get { return GetElementByName<ICheckField>(Names.SW9_EOF_NO); } }
        public ICheckField SW9_EOF_YES { get { return GetElementByName<ICheckField>(Names.SW9_EOF_YES); } }
        public IField SW9_ERR_SW { get { return GetElementByName<IField>(Names.SW9_ERR_SW); } }
        public ICheckField SW9_ERR_NO { get { return GetElementByName<ICheckField>(Names.SW9_ERR_NO); } }
        public ICheckField SW9_ERR_YES { get { return GetElementByName<ICheckField>(Names.SW9_ERR_YES); } }
        public IField SW9_SELECT_CLIENT_SW { get { return GetElementByName<IField>(Names.SW9_SELECT_CLIENT_SW); } }
        public ICheckField SW9_SELECT_CLIENT_NO { get { return GetElementByName<ICheckField>(Names.SW9_SELECT_CLIENT_NO); } }
        public ICheckField SW9_SELECT_CLIENT_YES { get { return GetElementByName<ICheckField>(Names.SW9_SELECT_CLIENT_YES); } }
        public IGroup WS9_CLIENT_POINTER { get { return GetElementByName<IGroup>(Names.WS9_CLIENT_POINTER); } }
        public IField WS9_CLIENT_ID { get { return GetElementByName<IField>(Names.WS9_CLIENT_ID); } }
        public IField WS9_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.WS9_VERIFIED_SSN_FLAG); } }
        public IGroup WS9_SYSTEM_PARTICIPATION { get { return GetElementByName<IGroup>(Names.WS9_SYSTEM_PARTICIPATION); } }
        public IField WS9_SYS_PART_AE { get { return GetElementByName<IField>(Names.WS9_SYS_PART_AE); } }
        public IField WS9_SYS_PART_CSE { get { return GetElementByName<IField>(Names.WS9_SYS_PART_CSE); } }
        public IField WS9_SYS_PART_KANPAY { get { return GetElementByName<IField>(Names.WS9_SYS_PART_KANPAY); } }
        public IField WS9_SYS_PART_KSCARES { get { return GetElementByName<IField>(Names.WS9_SYS_PART_KSCARES); } }
        public IField WS9_SYS_PART_FACTS { get { return GetElementByName<IField>(Names.WS9_SYS_PART_FACTS); } }
        public IGroup WS9_ABEND_FIELDS { get { return GetElementByName<IGroup>(Names.WS9_ABEND_FIELDS); } }
        public IField WS9_ABEND_TYPE { get { return GetElementByName<IField>(Names.WS9_ABEND_TYPE); } }
        public ICheckField WS9_ABEND_TYPE_NONE { get { return GetElementByName<ICheckField>(Names.WS9_ABEND_TYPE_NONE); } }
        public ICheckField WS9_ABEND_TYPE_ADABAS { get { return GetElementByName<ICheckField>(Names.WS9_ABEND_TYPE_ADABAS); } }
        public ICheckField WS9_ABEND_TYPE_CICS { get { return GetElementByName<ICheckField>(Names.WS9_ABEND_TYPE_CICS); } }
        public IGroup WS9_ABEND_ADABAS { get { return GetElementByName<IGroup>(Names.WS9_ABEND_ADABAS); } }
        public IField WS9_ADA_FILE_NUMBER { get { return GetElementByName<IField>(Names.WS9_ADA_FILE_NUMBER); } }
        public IField WS9_ADA_FILE_ACTION { get { return GetElementByName<IField>(Names.WS9_ADA_FILE_ACTION); } }
        public IField WS9_ADA_RESPONSE_CD { get { return GetElementByName<IField>(Names.WS9_ADA_RESPONSE_CD); } }
        public IGroup WS9_ABEND_CICS { get { return GetElementByName<IGroup>(Names.WS9_ABEND_CICS); } }
        public IField WS9_CICS_RESOURCE_NM { get { return GetElementByName<IField>(Names.WS9_CICS_RESOURCE_NM); } }
        public IField WS9_CICS_FUNCTION_CD { get { return GetElementByName<IField>(Names.WS9_CICS_FUNCTION_CD); } }
        public IField WS9_CICS_RESPONSE_CD { get { return GetElementByName<IField>(Names.WS9_CICS_RESPONSE_CD); } }
        public IGroup WS9_MISC { get { return GetElementByName<IGroup>(Names.WS9_MISC); } }
        public IGroup WS9_MSG_X { get { return GetElementByName<IGroup>(Names.WS9_MSG_X); } }
        public IField WS9_MSG_PROG { get { return GetElementByName<IField>(Names.WS9_MSG_PROG); } }
        public IGroup WS9_MSG_1 { get { return GetElementByName<IGroup>(Names.WS9_MSG_1); } }
        public IField WS9_MSG { get { return GetElementByName<IField>(Names.WS9_MSG); } }
        public IGroup WS9_MSG_CODE { get { return GetElementByName<IGroup>(Names.WS9_MSG_CODE); } }
        public IField WS9_MSG_SQLCODE { get { return GetElementByName<IField>(Names.WS9_MSG_SQLCODE); } }
        public IGroup WS9_MSG_2 { get { return GetElementByName<IGroup>(Names.WS9_MSG_2); } }
        public IField WS9_MSG_FIELD { get { return GetElementByName<IField>(Names.WS9_MSG_FIELD); } }
        public IField WS9_MSG_VALUE { get { return GetElementByName<IField>(Names.WS9_MSG_VALUE); } }
        public IField WS9_DATE_ADA { get { return GetElementByName<IField>(Names.WS9_DATE_ADA); } }
        public IField WS9_DATE_DB2 { get { return GetElementByName<IField>(Names.WS9_DATE_DB2); } }
        public IGroup DBK9_KEYS { get { return GetElementByName<IGroup>(Names.DBK9_KEYS); } }
        public IField DBK9_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.DBK9_CLIENT_NUMBER); } }
        public IField DBK9_CLIENT_NAME { get { return GetElementByName<IField>(Names.DBK9_CLIENT_NAME); } }
        public IField DBK9_SSN { get { return GetElementByName<IField>(Names.DBK9_SSN); } }
        public IGroup CLB9_DCLKSD_CLIENT_BASIC { get { return GetElementByName<IGroup>(Names.CLB9_DCLKSD_CLIENT_BASIC); } }
        public IField CLB9_CLIENT_NUMBER { get { return GetElementByName<IField>(Names.CLB9_CLIENT_NUMBER); } }
        public IField CLB9_CLIENT_GIVEN_NAME { get { return GetElementByName<IField>(Names.CLB9_CLIENT_GIVEN_NAME); } }
        public IField CLB9_CLIENT_INITIALS { get { return GetElementByName<IField>(Names.CLB9_CLIENT_INITIALS); } }
        public IField CLB9_CLIENT_SURNAME { get { return GetElementByName<IField>(Names.CLB9_CLIENT_SURNAME); } }
        public IField CLB9_CIS_REPL_IND { get { return GetElementByName<IField>(Names.CLB9_CIS_REPL_IND); } }
        public IField CLB9_WORK_PHONE { get { return GetElementByName<IField>(Names.CLB9_WORK_PHONE); } }
        public IField CLB9_SSN { get { return GetElementByName<IField>(Names.CLB9_SSN); } }
        public IField CLB9_GENDER { get { return GetElementByName<IField>(Names.CLB9_GENDER); } }
        public IField CLB9_PARENT_RGHTS_SEV { get { return GetElementByName<IField>(Names.CLB9_PARENT_RGHTS_SEV); } }
        public IField CLB9_PRNT_RGHTS_SEV_DT { get { return GetElementByName<IField>(Names.CLB9_PRNT_RGHTS_SEV_DT); } }
        public IField CLB9_LEGAL_STATUS { get { return GetElementByName<IField>(Names.CLB9_LEGAL_STATUS); } }
        public IField CLB9_INSURANCE_CODE { get { return GetElementByName<IField>(Names.CLB9_INSURANCE_CODE); } }
        public IField CLB9_INITIAL_CUSTODY_DT { get { return GetElementByName<IField>(Names.CLB9_INITIAL_CUSTODY_DT); } }
        public IField CLB9_HOME_PHONE { get { return GetElementByName<IField>(Names.CLB9_HOME_PHONE); } }
        public IField CLB9_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLB9_DATE_OF_BIRTH); } }
        public IField CLB9_CURR_PLACEMNT_DT { get { return GetElementByName<IField>(Names.CLB9_CURR_PLACEMNT_DT); } }
        public IField CLB9_CURRENT_PLACEMENT { get { return GetElementByName<IField>(Names.CLB9_CURRENT_PLACEMENT); } }
        public IField CLB9_CSEA_G_CAUSE_CODE { get { return GetElementByName<IField>(Names.CLB9_CSEA_G_CAUSE_CODE); } }
        public IField CLB9_CSEA_G_CAUSE_CL_DT { get { return GetElementByName<IField>(Names.CLB9_CSEA_G_CAUSE_CL_DT); } }
        public IField CLB9_CSEA_COOP_CODE { get { return GetElementByName<IField>(Names.CLB9_CSEA_COOP_CODE); } }
        public IField CLB9_COUNTY_CRT_COMMIT { get { return GetElementByName<IField>(Names.CLB9_COUNTY_CRT_COMMIT); } }
        public IField CLB9_MONTHS_ASST_AF { get { return GetElementByName<IField>(Names.CLB9_MONTHS_ASST_AF); } }
        public IField CLB9_MONTHS_ASST_GA { get { return GetElementByName<IField>(Names.CLB9_MONTHS_ASST_GA); } }
        public IField CLB9_MO_DEATH_DT { get { return GetElementByName<IField>(Names.CLB9_MO_DEATH_DT); } }
        public IField CLB9_MO_PRT_DT { get { return GetElementByName<IField>(Names.CLB9_MO_PRT_DT); } }
        public IField CLB9_FA_DEATH_DT { get { return GetElementByName<IField>(Names.CLB9_FA_DEATH_DT); } }
        public IField CLB9_FA_PRT_DT { get { return GetElementByName<IField>(Names.CLB9_FA_PRT_DT); } }
        public IField CLB9_MPI_ID { get { return GetElementByName<IField>(Names.CLB9_MPI_ID); } }
        public IField CLB9_MED_COVERAGE_IND { get { return GetElementByName<IField>(Names.CLB9_MED_COVERAGE_IND); } }
        public IField CLB9_INSURANCE_CARRIER { get { return GetElementByName<IField>(Names.CLB9_INSURANCE_CARRIER); } }
        public IField CLB9_INSURANCE_POLCY_NO { get { return GetElementByName<IField>(Names.CLB9_INSURANCE_POLCY_NO); } }
        public IField CLB9_SPOKEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLB9_SPOKEN_LANGUAGE); } }
        public IField CLB9_WRITTEN_LANGUAGE { get { return GetElementByName<IField>(Names.CLB9_WRITTEN_LANGUAGE); } }
        public IField CLB9_STATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CLB9_STATE_OF_BIRTH); } }
        public IField CLB9_SCHOOL_DISTRICT { get { return GetElementByName<IField>(Names.CLB9_SCHOOL_DISTRICT); } }
        public IField CLB9_ETHNIC_CLASS { get { return GetElementByName<IField>(Names.CLB9_ETHNIC_CLASS); } }
        public IField CLB9_SUFFIX_NAME { get { return GetElementByName<IField>(Names.CLB9_SUFFIX_NAME); } }
        public IField CLB9_EMPLOYER_NAME { get { return GetElementByName<IField>(Names.CLB9_EMPLOYER_NAME); } }
        public IField CLB9_EARNED_INCOME_AMT { get { return GetElementByName<IField>(Names.CLB9_EARNED_INCOME_AMT); } }
        public IField CLB9_INCOME_FREQUENCY { get { return GetElementByName<IField>(Names.CLB9_INCOME_FREQUENCY); } }
        public IField CLB9_KEES_ABMS_ID { get { return GetElementByName<IField>(Names.CLB9_KEES_ABMS_ID); } }
        public IGroup CLB9_EMAIL_ADDRESS { get { return GetElementByName<IGroup>(Names.CLB9_EMAIL_ADDRESS); } }
        public IField CLB9_EMAIL_ADDRESS_LEN { get { return GetElementByName<IField>(Names.CLB9_EMAIL_ADDRESS_LEN); } }
        public IField CLB9_EMAIL_ADDRESS_TEXT { get { return GetElementByName<IField>(Names.CLB9_EMAIL_ADDRESS_TEXT); } }
        public IGroup CLB9_OCCUPATION { get { return GetElementByName<IGroup>(Names.CLB9_OCCUPATION); } }
        public IField CLB9_OCCUPATION_LEN { get { return GetElementByName<IField>(Names.CLB9_OCCUPATION_LEN); } }
        public IField CLB9_OCCUPATION_TEXT { get { return GetElementByName<IField>(Names.CLB9_OCCUPATION_TEXT); } }
        public IField CLB9_CREATED_BY { get { return GetElementByName<IField>(Names.CLB9_CREATED_BY); } }
        public IField CLB9_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CLB9_CREATED_TIMESTAMP); } }
        public IField CLB9_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CLB9_LAST_MODIFIED_BY); } }
        public IField CLB9_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CLB9_LAST_MODIFIED_TMST); } }
        public IGroup CL9_DCLKSD_CLIENT { get { return GetElementByName<IGroup>(Names.CL9_DCLKSD_CLIENT); } }
        public IField CL9_SSN { get { return GetElementByName<IField>(Names.CL9_SSN); } }
        public IField CL9_PREVIOUS_SSN { get { return GetElementByName<IField>(Names.CL9_PREVIOUS_SSN); } }
        public IField CL9_PHONETIC_DATA { get { return GetElementByName<IField>(Names.CL9_PHONETIC_DATA); } }
        public IField CL9_DT_OF_LAST_UPDATE { get { return GetElementByName<IField>(Names.CL9_DT_OF_LAST_UPDATE); } }
        public IField CL9_DATE_OF_BIRTH { get { return GetElementByName<IField>(Names.CL9_DATE_OF_BIRTH); } }
        public IField CL9_GENDER { get { return GetElementByName<IField>(Names.CL9_GENDER); } }
        public IField CL9_VERIFIED_SSN_FLAG { get { return GetElementByName<IField>(Names.CL9_VERIFIED_SSN_FLAG); } }
        public IField CL9_CLIENT_NAME { get { return GetElementByName<IField>(Names.CL9_CLIENT_NAME); } }
        public IField CL9_CREATED_BY { get { return GetElementByName<IField>(Names.CL9_CREATED_BY); } }
        public IField CL9_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.CL9_CREATED_TIMESTAMP); } }
        public IField CL9_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.CL9_LAST_MODIFIED_BY); } }
        public IField CL9_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.CL9_LAST_MODIFIED_TMST); } }
        public IField CL9_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.CL9_FK_CLB_CLIENT_NO); } }
        public IGroup SP9_DCLKSD_SYSTEM_PART { get { return GetElementByName<IGroup>(Names.SP9_DCLKSD_SYSTEM_PART); } }
        public IField SP9_SYSTEM_CODE { get { return GetElementByName<IField>(Names.SP9_SYSTEM_CODE); } }
        public IField SP9_PARTICIPATION_FLAG { get { return GetElementByName<IField>(Names.SP9_PARTICIPATION_FLAG); } }
        public IField SP9_CREATED_TIMESTAMP { get { return GetElementByName<IField>(Names.SP9_CREATED_TIMESTAMP); } }
        public IField SP9_CREATED_BY { get { return GetElementByName<IField>(Names.SP9_CREATED_BY); } }
        public IField SP9_LAST_MODIFIED_BY { get { return GetElementByName<IField>(Names.SP9_LAST_MODIFIED_BY); } }
        public IField SP9_LAST_MODIFIED_TMST { get { return GetElementByName<IField>(Names.SP9_LAST_MODIFIED_TMST); } }
        public IField SP9_FK_CLB_CLIENT_NO { get { return GetElementByName<IField>(Names.SP9_FK_CLB_CLIENT_NO); } }
        public IField SP9_FK_CLI_CLIENT_NAME { get { return GetElementByName<IField>(Names.SP9_FK_CLI_CLIENT_NAME); } }
        public IField SP9_FK_CLI_SSN { get { return GetElementByName<IField>(Names.SP9_FK_CLI_SSN); } }
        public IField PH_CF2_INDEX { get { return GetElementByName<IField>(Names.PH_CF2_INDEX); } }
        public IField PH_CF1_INDEX { get { return GetElementByName<IField>(Names.PH_CF1_INDEX); } }
        public IField PH_CR2_INDEX { get { return GetElementByName<IField>(Names.PH_CR2_INDEX); } }
        public IField PH_CR1_INDEX { get { return GetElementByName<IField>(Names.PH_CR1_INDEX); } }

        public CPY_SQLCA SQLCA = new CPY_SQLCA(null, true);
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup("FILLER", (FILLER) =>
           {
               FILLER.CreateNewField(Names.ADIM1, FieldType.CompInt, 8);
               FILLER.CreateNewField(Names.ADIM2, FieldType.CompInt, 8);
               FILLER.CreateNewField(Names.ADIM3, FieldType.CompInt, 8);
           });

            recordDef.CreateNewGroup("FILLER_d2", (FILLER_d2) =>
           {
               FILLER_d2.CreateNewField(Names.GROUP_EXPORT_0001FL, FieldType.String, 1);
               FILLER_d2.CreateNewField(Names.GROUP_EXPORT_0001PS, FieldType.CompShort, 4);
               FILLER_d2.CreateNewField(Names.GROUP_EXPORT_0001RF, FieldType.String, 1);
           });
            recordDef.CreateNewField(Names.FUNC_0329211337_ESC_FLAG, FieldType.String, 1);
            recordDef.CreateNewField(Names.SRADALNK, FieldType.String, 8, "SWASZ990");
            recordDef.CreateNewField(Names.SRMODLNK, FieldType.String, 8, "SWEXIR90");
            recordDef.CreateNewField(Names.SQLNUMB, FieldType.String, 9);
            recordDef.CreateNewField(Names.EXIT_PGM_SW, FieldType.String, 1, "N")
                .NewCheckField(Names.EXIT_PGM, "Y")
                ;
            recordDef.CreateNewField(Names.STOP_READ, FieldType.String, 1);
            recordDef.CreateNewField(Names.OFC_FND, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.INDEXS, (INDEXS) =>
           {
               INDEXS.CreateNewField(Names.MAX_NAME, FieldType.CompShort, 4, 117);
               INDEXS.CreateNewField(Names.MAX_OFC, FieldType.CompShort, 4, 10);
               INDEXS.CreateNewField(Names.TOT_OFC, FieldType.CompShort, 4);
               INDEXS.CreateNewField(Names.NAME_LEN, FieldType.CompShort, 4);
               INDEXS.CreateNewField(Names.OFC_LEN, FieldType.CompShort, 4);
               INDEXS.CreateNewField(Names.I1, FieldType.CompShort, 4);
               INDEXS.CreateNewField(Names.I2, FieldType.CompShort, 4);
               INDEXS.CreateNewField(Names.I3, FieldType.CompShort, 4);
               INDEXS.CreateNewField(Names.I4, FieldType.CompShort, 4);
           });

            IField TMP_OFC_local = recordDef.CreateNewField(Names.TMP_OFC, FieldType.String, 4);
            recordDef.CreateNewGroupRedefine("FILLER_d3", TMP_OFC_local, (FILLER_d3) =>
            {
                FILLER_d3.CreateNewFieldArray(Names.TMP_OFC_X, 4, FieldType.String, 1);
            });

            recordDef.CreateNewGroup(Names.TMP_NAME, (TMP_NAME) =>
           {
               TMP_NAME.CreateNewField(Names.TMP_LAST_NAME, FieldType.String, 17);
               TMP_NAME.CreateNewGroup(Names.TMP_FIRST_NAME, (TMP_FIRST_NAME) =>
               {
                   TMP_FIRST_NAME.CreateNewField(Names.TMP_FIRST_NAME_1, FieldType.String, 1);
                   TMP_FIRST_NAME.CreateNewField(Names.TMP_FIRST_NAME_11, FieldType.String, 11);
               });
               TMP_NAME.CreateNewField(Names.TMP_INITIAL, FieldType.String, 1);
           });
            recordDef.CreateNewField(Names.WRK_LAST_NAME, FieldType.String, 19);
            recordDef.CreateNewField(Names.WRK_FIRST_NAME, FieldType.String, 14);

            recordDef.CreateNewGroup(Names.CUR_CLIENT_DATA, (CUR_CLIENT_DATA) =>
           {
               CUR_CLIENT_DATA.CreateNewGroup(Names.CUR_NAME, (CUR_NAME) =>
               {
                   CUR_NAME.CreateNewField(Names.CUR_LAST_NAME, FieldType.String, 17);
                   CUR_NAME.CreateNewField(Names.CUR_FIRST_NAME, FieldType.String, 12);
                   CUR_NAME.CreateNewField(Names.CUR_INIT, FieldType.String, 1);
               });
               CUR_CLIENT_DATA.CreateNewField(Names.CUR_SSN, FieldType.UnsignedNumeric, 9);
               CUR_CLIENT_DATA.CreateNewGroup(Names.CUR_DOB_SEX, (CUR_DOB_SEX) =>
               {
                   CUR_DOB_SEX.CreateNewField(Names.CUR_DOB, FieldType.String, 8);
                   CUR_DOB_SEX.CreateNewField(Names.CUR_SEX, FieldType.String, 1);
               });
               CUR_CLIENT_DATA.CreateNewGroup(Names.CUR_POINTER, (CUR_POINTER) =>
               {

                   IField CUR_CLIENT_ID_local = CUR_POINTER.CreateNewField(Names.CUR_CLIENT_ID, FieldType.String, 10);
                   CUR_POINTER.CreateNewFieldRedefine(Names.CUR_CLIENT_ID_NUM, FieldType.UnsignedNumeric, CUR_CLIENT_ID_local, 10);
                   CUR_POINTER.CreateNewGroup(Names.CUR_PTR_FLAGS, (CUR_PTR_FLAGS) =>
                   {
                       CUR_PTR_FLAGS.CreateNewFillerField(1, FillWith.Hashes);
                       CUR_PTR_FLAGS.CreateNewField(Names.CUR_AE, FieldType.String, 1);
                       CUR_PTR_FLAGS.CreateNewField(Names.CUR_CSE, FieldType.String, 1);
                       CUR_PTR_FLAGS.CreateNewField(Names.CUR_KANPAY, FieldType.String, 1);
                       CUR_PTR_FLAGS.CreateNewField(Names.CUR_KSCARES, FieldType.String, 1);
                       CUR_PTR_FLAGS.CreateNewField(Names.CUR_FACTS, FieldType.String, 1);
                       CUR_PTR_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
                   });
               });
               CUR_CLIENT_DATA.CreateNewField(Names.CUR_ALIAS_IND, FieldType.String, 1);
               CUR_CLIENT_DATA.CreateNewField(Names.CUR_REPL_IND, FieldType.String, 1);
               CUR_CLIENT_DATA.CreateNewGroupArray(Names.CUR_OFC_ARRAY, 10, (CUR_OFC_ARRAY) =>
               {
                   CUR_OFC_ARRAY.CreateNewField(Names.CUR_OFC, FieldType.UnsignedNumeric, 4);
               });
               CUR_CLIENT_DATA.CreateNewField(Names.CUR_KEY, FieldType.String, 100);
           });

            recordDef.CreateNewGroup(Names.OFC_DATA, (OFC_DATA) =>
           {
               OFC_DATA.CreateNewField(Names.OFC_ID, FieldType.CompShort, 4);
               OFC_DATA.CreateNewField(Names.OFC_DISC_DT, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.IMP_DATA, (IMP_DATA) =>
           {
               IMP_DATA.CreateNewField(Names.IMP_SEARCH_TYPE, FieldType.String, 1)
                   .NewCheckField(Names.IMP_SEARCH_SSN, "1")
                   .NewCheckField(Names.IMP_SEARCH_NAME, "2")
                   .NewCheckField(Names.IMP_SEARCH_ID, "3")
                   ;

               IField IMP_PERCENT_local = IMP_DATA.CreateNewField(Names.IMP_PERCENT, FieldType.UnsignedNumeric, 3)
                   .NewCheckField(Names.IMP_EXACT, 100)
                   ;
               IMP_DATA.CreateNewFieldRedefine(Names.IMP_PERCENT_9V99, FieldType.UnsignedNumeric, IMP_PERCENT_local, 3, null, 2);
               IMP_DATA.CreateNewGroup(Names.IMP_NAME, (IMP_NAME) =>
               {
                   IMP_NAME.CreateNewField(Names.IMP_LAST_NAME, FieldType.String, 17);
                   IMP_NAME.CreateNewGroup(Names.IMP_FIRST_NAME, (IMP_FIRST_NAME) =>
                   {
                       IMP_FIRST_NAME.CreateNewField(Names.IMP_FIRST_NAME_1, FieldType.String, 1);
                       IMP_FIRST_NAME.CreateNewField(Names.IMP_FIRST_NAME_2, FieldType.String, 11);
                   });
                   IMP_NAME.CreateNewField(Names.IMP_INIT, FieldType.String, 1);
               });
               IMP_DATA.CreateNewGroup(Names.IMP_DOB_SEX, (IMP_DOB_SEX) =>
               {
                   IMP_DOB_SEX.CreateNewField(Names.IMP_DOB, FieldType.String, 8);
                   IMP_DOB_SEX.CreateNewField(Names.IMP_SEX, FieldType.String, 1);
               });
               IMP_DATA.CreateNewGroup(Names.IMP_SSN_X9, (IMP_SSN_X9) =>
               {
                   IMP_SSN_X9.CreateNewField(Names.IMP_SSN, FieldType.UnsignedNumeric, 9);
               });
               IMP_DATA.CreateNewGroup(Names.IMP_ID_X10, (IMP_ID_X10) =>
               {
                   IMP_ID_X10.CreateNewField(Names.IMP_ID, FieldType.UnsignedNumeric, 10);
               });
               IMP_DATA.CreateNewField(Names.IMP_OFC, FieldType.UnsignedNumeric, 4);
               IMP_DATA.CreateNewField(Names.IMP_KEY, FieldType.String, 100);
           });
            recordDef.CreateNewField(Names.FMT_NAME, FieldType.String, 33);

            recordDef.CreateNewGroup(Names.TMP_PHON_DATA, (TMP_PHON_DATA) =>
           {
               TMP_PHON_DATA.CreateNewField(Names.TMP_PHON_1, FieldType.String, 1);
               TMP_PHON_DATA.CreateNewField(Names.TMP_PHON_17, FieldType.String, 17);
               TMP_PHON_DATA.CreateNewField(Names.TMP_PHON_3, FieldType.String, 3);
           });

            recordDef.CreateNewGroup(Names.IMP_PHON_DATA, (IMP_PHON_DATA) =>
           {
               IMP_PHON_DATA.CreateNewField(Names.IMP_PHON_1, FieldType.String, 1);
               IMP_PHON_DATA.CreateNewField(Names.IMP_PHON_17, FieldType.String, 17);
               IMP_PHON_DATA.CreateNewField(Names.IMP_PHON_3, FieldType.String, 3);
           });
            recordDef.CreateNewField(Names.PH_FNTIC_C1, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_C2, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_C3, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_FNTIC_CX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_SUSS_ID, FieldType.String, 1);
            recordDef.CreateNewField(Names.PH_HIT, FieldType.String, 2);
            recordDef.CreateNewField(Names.PH_ERR_NAME, FieldType.String, 1);
            recordDef.CreateNewField(Names.PH_COUNT_UP, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_COUNT_INQUIRY, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_COUNT_DB, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_L1, FieldType.UnsignedNumeric, 1);
            recordDef.CreateNewField(Names.PH_CR1_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CR2_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CF1_INDXX, FieldType.UnsignedNumeric, 2);
            recordDef.CreateNewField(Names.PH_CF2_INDXX, FieldType.UnsignedNumeric, 2);

            IField PH_DEGREE_local = recordDef.CreateNewField(Names.PH_DEGREE, FieldType.UnsignedNumeric, 3, null, 2);
            recordDef.CreateNewFieldRedefine(Names.PH_PERCENT, FieldType.String, PH_DEGREE_local, 3);
            recordDef.CreateNewField(Names.PH_NAME_RAW_INQ, FieldType.String, 17);
            recordDef.CreateNewField(Names.PH_NAME_RAW_MSTR, FieldType.String, 17);

            recordDef.CreateNewGroup(Names.PH_NAME_CRUNCH_INQ, (PH_NAME_CRUNCH_INQ) =>
           {
               PH_NAME_CRUNCH_INQ.CreateNewFieldArray(Names.PH_L_CRNCH, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_REDUC_INQ, (PH_NAME_REDUC_INQ) =>
           {
               PH_NAME_REDUC_INQ.CreateNewFieldArray(Names.PH_L_REDUC, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_SAVE_REDUC_INQ, (PH_SAVE_REDUC_INQ) =>
           {
               PH_SAVE_REDUC_INQ.CreateNewFieldArray(Names.PH_S_REDUC, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_PARTS, (PH_NAME_PARTS) =>
           {
               PH_NAME_PARTS.CreateNewGroup(Names.PH_THREE_LETTERS, (PH_THREE_LETTERS) =>
               {
                   PH_THREE_LETTERS.CreateNewFieldArray(Names.PH_LETTERS_3, 3, FieldType.String, 1);
               });
               PH_NAME_PARTS.CreateNewField(Names.PH_TWO_LETTERS, FieldType.String, 2);
               PH_NAME_PARTS.CreateNewField(Names.PH_ONE_LETTER, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_34_NUMERIC, (PH_NAME_34_NUMERIC) =>
           {
               PH_NAME_34_NUMERIC.CreateNewFieldArray(Names.PH_NAME_NUM_34, 17, FieldType.String, 2);
           });

            recordDef.CreateNewGroup(Names.PH_NAME_17_NUMERIC, (PH_NAME_17_NUMERIC) =>
           {
               PH_NAME_17_NUMERIC.CreateNewFieldArray(Names.PH_NAME_NUM_17, 17, FieldType.String, 1);
           });

            recordDef.CreateNewGroup(Names.PH_REFMT_34_17, (PH_REFMT_34_17) =>
           {
               PH_REFMT_34_17.CreateNewField(Names.PH_DIGIT_1, FieldType.String, 1);
               PH_REFMT_34_17.CreateNewField(Names.PH_DIGIT_2, FieldType.String, 1);
           });

            IGroup PH_FIRST_2_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_FIRST_2_TABLE, (PH_FIRST_2_TABLE) =>
           {
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 24, "DG07GF08GM03GN02KN02PH08");
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 24, "PF08PN02PS00SH06TS00TZ00");
               PH_FIRST_2_TABLE.CreateNewFillerField(FieldType.String, 20, "WR04CE00CH06CI00CY00");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_FIRST_2_TBL, PH_FIRST_2_TABLE_local, (PH_FIRST_2_TBL) =>
            {
                PH_FIRST_2_TBL.CreateNewGroupArray(Names.PH_FR2_NUM, 17, (PH_FR2_NUM) =>
                {
                    PH_FR2_NUM.CreateNewField(Names.PH_ALPH2, FieldType.String, 2);
                    PH_FR2_NUM.CreateNewField(Names.PH_NUM2, FieldType.String, 2);
                });
            });

            IGroup PH_FIRST_1_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_FIRST_1_TABLE, (PH_FIRST_1_TABLE) =>
           {
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "A 1B09C07D01E 1F08G07H 2");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "I 1J 3K07L05M03N02O 1P09");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 24, "Q07R04S00T01U 1V08W 4X07");
               PH_FIRST_1_TABLE.CreateNewFillerField(FieldType.String, 6, "Y 5Z00");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_FIRST_1_TBL, PH_FIRST_1_TABLE_local, (PH_FIRST_1_TBL) =>
            {
                PH_FIRST_1_TBL.CreateNewGroupArray(Names.PH_FR1_NUM, 26, (PH_FR1_NUM) =>
                {
                    PH_FR1_NUM.CreateNewField(Names.PH_ALPH1, FieldType.String, 1);
                    PH_FR1_NUM.CreateNewField(Names.PH_NUM1, FieldType.String, 2);
                });
            });

            IGroup PH_REMAIN_2_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_REMAIN_2_TABLE, (PH_REMAIN_2_TABLE) =>
           {
               PH_REMAIN_2_TABLE.CreateNewFillerField(FieldType.String, 24, "CE 0CI 0CH 6CY 0DG 7PH 8");
               PH_REMAIN_2_TABLE.CreateNewFillerField(FieldType.String, 16, "SH 6TS 0TZ 0    ");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_REMAIN_2_TBL, PH_REMAIN_2_TABLE_local, (PH_REMAIN_2_TBL) =>
            {
                PH_REMAIN_2_TBL.CreateNewGroupArray(Names.PH_RR2_NUM, 10, (PH_RR2_NUM) =>
                {
                    PH_RR2_NUM.CreateNewField(Names.PH_ALPHR2, FieldType.String, 2);
                    PH_RR2_NUM.CreateNewField(Names.PH_NUMR2, FieldType.String, 2);
                });
            });

            IGroup PH_REMAIN_1_TABLE_local = (IGroup)recordDef.CreateNewGroup(Names.PH_REMAIN_1_TABLE, (PH_REMAIN_1_TABLE) =>
           {
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 24, "B 9C 7D 1F 8G 7J 6K 7L 5");
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 24, "M 3N 2P 9Q 7R 4S 0T 1V 8");
               PH_REMAIN_1_TABLE.CreateNewFillerField(FieldType.String, 6, "X 7Z 0");
           });
            recordDef.CreateNewGroupRedefine(Names.PH_REMAIN_1_TBL, PH_REMAIN_1_TABLE_local, (PH_REMAIN_1_TBL) =>
            {
                PH_REMAIN_1_TBL.CreateNewGroupArray(Names.PH_RR1_NUM, 18, (PH_RR1_NUM) =>
                {
                    PH_RR1_NUM.CreateNewField(Names.PH_ALPHR1, FieldType.String, 1);
                    PH_RR1_NUM.CreateNewField(Names.PH_NUMR1, FieldType.String, 2);
                });
            });

            recordDef.CreateNewGroup(Names.SW1_SWITCHES, (SW1_SWITCHES) =>
           {
               SW1_SWITCHES.CreateNewField(Names.SW1_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW1_EOF_NO, "N")
                   .NewCheckField(Names.SW1_EOF_YES, "Y")
                   ;
               SW1_SWITCHES.CreateNewField(Names.SW1_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW1_ERR_NO, "N")
                   .NewCheckField(Names.SW1_ERR_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.DBK1_KEYS, (DBK1_KEYS) =>
           {
               DBK1_KEYS.CreateNewField(Names.DBK1_CLIENT_NUMBER, FieldType.String, 10);
               DBK1_KEYS.CreateNewField(Names.DBK1_CLIENT_NAME, FieldType.String, 30);
               DBK1_KEYS.CreateNewField(Names.DBK1_SSN, FieldType.CompInt, 9);
               DBK1_KEYS.CreateNewField(Names.DBK1_DATE_OF_BIRTH, FieldType.String, 10);
               DBK1_KEYS.CreateNewField(Names.DBK1_GENDER, FieldType.String, 1);
               DBK1_KEYS.CreateNewField(Names.DBK1_PHONETIC_DATA, FieldType.String, 21);
           });

            recordDef.CreateNewGroup(Names.ADA1_NAME_KEY, (ADA1_NAME_KEY) =>
           {
               ADA1_NAME_KEY.CreateNewField(Names.ADA1_CLIENT_NAME, FieldType.String, 30);
               ADA1_NAME_KEY.CreateNewField(Names.ADA1_SSN, FieldType.UnsignedNumeric, 9);
               ADA1_NAME_KEY.CreateNewField(Names.ADA1_DATE_OF_BIRTH, FieldType.String, 8);
               ADA1_NAME_KEY.CreateNewField(Names.ADA1_SEX, FieldType.String, 1);
               ADA1_NAME_KEY.CreateNewGroup(Names.ADA1_CLIENT_POINTER, (ADA1_CLIENT_POINTER) =>
               {
                   ADA1_CLIENT_POINTER.CreateNewField(Names.ADA1_CLIENT_NUMBER, FieldType.String, 10);
                   ADA1_CLIENT_POINTER.CreateNewFillerField(21, FillWith.Hashes);
               });
           });

            recordDef.CreateNewGroup(Names.ADA2_PHONETIC_KEY, (ADA2_PHONETIC_KEY) =>
           {
               ADA2_PHONETIC_KEY.CreateNewField(Names.ADA2_PHONETIC_DATA, FieldType.String, 21);
               ADA2_PHONETIC_KEY.CreateNewField(Names.ADA2_CLIENT_NAME, FieldType.String, 30);
               ADA2_PHONETIC_KEY.CreateNewField(Names.ADA2_SSN, FieldType.UnsignedNumeric, 9);
               ADA2_PHONETIC_KEY.CreateNewField(Names.ADA2_DATE_OF_BIRTH, FieldType.String, 8);
               ADA2_PHONETIC_KEY.CreateNewField(Names.ADA2_SEX, FieldType.String, 1);
               ADA2_PHONETIC_KEY.CreateNewGroup(Names.ADA2_CLIENT_POINTER, (ADA2_CLIENT_POINTER) =>
               {
                   ADA2_CLIENT_POINTER.CreateNewField(Names.ADA2_CLIENT_NUMBER, FieldType.String, 10);
                   ADA2_CLIENT_POINTER.CreateNewFillerField(21, FillWith.Hashes);
               });
           });

            recordDef.CreateNewGroup(Names.ADA3_SSN_KEY, (ADA3_SSN_KEY) =>
           {
               ADA3_SSN_KEY.CreateNewField(Names.ADA3_SSN, FieldType.UnsignedNumeric, 9);
               ADA3_SSN_KEY.CreateNewField(Names.ADA3_CLIENT_NAME, FieldType.String, 30);
               ADA3_SSN_KEY.CreateNewField(Names.ADA3_DATE_OF_BIRTH, FieldType.String, 8);
               ADA3_SSN_KEY.CreateNewField(Names.ADA3_SEX, FieldType.String, 1);
               ADA3_SSN_KEY.CreateNewGroup(Names.ADA3_CLIENT_POINTER, (ADA3_CLIENT_POINTER) =>
               {
                   ADA3_CLIENT_POINTER.CreateNewField(Names.ADA3_CLIENT_NUMBER, FieldType.String, 10);
                   ADA3_CLIENT_POINTER.CreateNewFillerField(21, FillWith.Hashes);
               });
           });

            recordDef.CreateNewGroup(Names.ADA4_ID_KEY, (ADA4_ID_KEY) =>
           {
               ADA4_ID_KEY.CreateNewField(Names.ADA4_CLIENT_NUMBER, FieldType.String, 10);
               ADA4_ID_KEY.CreateNewField(Names.ADA4_CLIENT_NAME, FieldType.String, 30);
               ADA4_ID_KEY.CreateNewField(Names.ADA4_SSN, FieldType.UnsignedNumeric, 9);
               ADA4_ID_KEY.CreateNewField(Names.ADA4_DATE_OF_BIRTH, FieldType.String, 8);
               ADA4_ID_KEY.CreateNewField(Names.ADA4_SEX, FieldType.String, 1);
               ADA4_ID_KEY.CreateNewField(Names.ADA4_CLIENT_POINTER21, FieldType.String, 21);
           });

            recordDef.CreateNewGroup(Names.CL1_DCLKSD_CLIENT, (CL1_DCLKSD_CLIENT) =>
           {
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_SSN, FieldType.CompInt, 9);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_PREVIOUS_SSN, FieldType.CompInt, 9);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_PHONETIC_DATA, FieldType.String, 21);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_DT_OF_LAST_UPDATE, FieldType.String, 10);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_DATE_OF_BIRTH, FieldType.String, 10);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_GENDER, FieldType.String, 1);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_VERIFIED_SSN_FLAG, FieldType.String, 1);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_CLIENT_NAME, FieldType.String, 30);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_CREATED_BY, FieldType.String, 8);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_CREATED_TIMESTAMP, FieldType.String, 26);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_LAST_MODIFIED_BY, FieldType.String, 8);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_LAST_MODIFIED_TMST, FieldType.String, 26);
               CL1_DCLKSD_CLIENT.CreateNewField(Names.CL1_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.WS9_SYSTEM_CODES, (WS9_SYSTEM_CODES) =>
           {
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_AE, FieldType.String, 2, "AE");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_CS, FieldType.String, 2, "CS");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_KA, FieldType.String, 2, "KA");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_KS, FieldType.String, 2, "KS");
               WS9_SYSTEM_CODES.CreateNewField(Names.WS9_SYSTEM_CODE_FA, FieldType.String, 2, "FA");
           });

            recordDef.CreateNewGroup(Names.SW9_SWITCHES, (SW9_SWITCHES) =>
           {
               SW9_SWITCHES.CreateNewField(Names.SW9_EOF_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW9_EOF_NOT_FOUND, SPACE)
                   .NewCheckField(Names.SW9_EOF_NO, "N")
                   .NewCheckField(Names.SW9_EOF_YES, "Y")
                   ;
               SW9_SWITCHES.CreateNewField(Names.SW9_ERR_SW, FieldType.String, 1, "N")
                   .NewCheckField(Names.SW9_ERR_NO, "N")
                   .NewCheckField(Names.SW9_ERR_YES, "Y")
                   ;
               SW9_SWITCHES.CreateNewField(Names.SW9_SELECT_CLIENT_SW, FieldType.String, 1, "Y")
                   .NewCheckField(Names.SW9_SELECT_CLIENT_NO, "N")
                   .NewCheckField(Names.SW9_SELECT_CLIENT_YES, "Y")
                   ;
           });

            recordDef.CreateNewGroup(Names.WS9_CLIENT_POINTER, (WS9_CLIENT_POINTER) =>
           {
               WS9_CLIENT_POINTER.CreateNewField(Names.WS9_CLIENT_ID, FieldType.String, 10);
               WS9_CLIENT_POINTER.CreateNewField(Names.WS9_VERIFIED_SSN_FLAG, FieldType.String, 1);
               WS9_CLIENT_POINTER.CreateNewGroup(Names.WS9_SYSTEM_PARTICIPATION, (WS9_SYSTEM_PARTICIPATION) =>
               {
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_AE, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_CSE, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_KANPAY, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_KSCARES, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewField(Names.WS9_SYS_PART_FACTS, FieldType.String, 1);
                   WS9_SYSTEM_PARTICIPATION.CreateNewFillerField(15, FillWith.Hashes);
               });
           });

            recordDef.CreateNewGroup(Names.WS9_ABEND_FIELDS, (WS9_ABEND_FIELDS) =>
           {
               WS9_ABEND_FIELDS.CreateNewField(Names.WS9_ABEND_TYPE, FieldType.String, 1)
                   .NewCheckField(Names.WS9_ABEND_TYPE_NONE, SPACE)
                   .NewCheckField(Names.WS9_ABEND_TYPE_ADABAS, "A")
                   .NewCheckField(Names.WS9_ABEND_TYPE_CICS, "C")
                   ;
               WS9_ABEND_FIELDS.CreateNewGroup(Names.WS9_ABEND_ADABAS, (WS9_ABEND_ADABAS) =>
               {
                   WS9_ABEND_ADABAS.CreateNewField(Names.WS9_ADA_FILE_NUMBER, FieldType.UnsignedNumeric, 4);
                   WS9_ABEND_ADABAS.CreateNewField(Names.WS9_ADA_FILE_ACTION, FieldType.String, 3);
                   WS9_ABEND_ADABAS.CreateNewField(Names.WS9_ADA_RESPONSE_CD, FieldType.UnsignedNumeric, 4);
               });
               WS9_ABEND_FIELDS.CreateNewGroup(Names.WS9_ABEND_CICS, (WS9_ABEND_CICS) =>
               {
                   WS9_ABEND_CICS.CreateNewField(Names.WS9_CICS_RESOURCE_NM, FieldType.String, 8);
                   WS9_ABEND_CICS.CreateNewField(Names.WS9_CICS_FUNCTION_CD, FieldType.String, 2);
                   WS9_ABEND_CICS.CreateNewField(Names.WS9_CICS_RESPONSE_CD, FieldType.String, 6);
               });
           });

            recordDef.CreateNewGroup(Names.WS9_MISC, (WS9_MISC) =>
           {
               WS9_MISC.CreateNewGroup(Names.WS9_MSG_X, (WS9_MSG_X) =>
               {
                   WS9_MSG_X.CreateNewField(Names.WS9_MSG_PROG, FieldType.String, 10);
                   IGroup WS9_MSG_1_local = (IGroup)WS9_MSG_X.CreateNewGroup(Names.WS9_MSG_1, (WS9_MSG_1) =>
                   {
                       WS9_MSG_1.CreateNewField(Names.WS9_MSG, FieldType.String, 50);
                       WS9_MSG_1.CreateNewGroup(Names.WS9_MSG_CODE, (WS9_MSG_CODE) =>
                       {
                           WS9_MSG_CODE.CreateNewField(Names.WS9_MSG_SQLCODE, FieldType.NumericEdited, "---------9", 10);
                       });
                   });
                   WS9_MSG_X.CreateNewGroupRedefine(Names.WS9_MSG_2, WS9_MSG_1_local, (WS9_MSG_2) =>
                   {
                       WS9_MSG_2.CreateNewField(Names.WS9_MSG_FIELD, FieldType.String, 25);
                       WS9_MSG_2.CreateNewField(Names.WS9_MSG_VALUE, FieldType.String, 35);
                   });
               });
               WS9_MISC.CreateNewField(Names.WS9_DATE_ADA, FieldType.String, 8);
               WS9_MISC.CreateNewField(Names.WS9_DATE_DB2, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.DBK9_KEYS, (DBK9_KEYS) =>
           {
               DBK9_KEYS.CreateNewField(Names.DBK9_CLIENT_NUMBER, FieldType.String, 10);
               DBK9_KEYS.CreateNewField(Names.DBK9_CLIENT_NAME, FieldType.String, 30);
               DBK9_KEYS.CreateNewField(Names.DBK9_SSN, FieldType.CompInt, 9);
           });

            recordDef.CreateNewGroup(Names.CLB9_DCLKSD_CLIENT_BASIC, (CLB9_DCLKSD_CLIENT_BASIC) =>
           {
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_NUMBER, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_GIVEN_NAME, FieldType.String, 12);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_INITIALS, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CLIENT_SURNAME, FieldType.String, 17);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CIS_REPL_IND, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_WORK_PHONE, FieldType.PackedDecimal, 10, null, 0);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SSN, FieldType.CompInt, 9);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_GENDER, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_PARENT_RGHTS_SEV, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_PRNT_RGHTS_SEV_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_LEGAL_STATUS, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INSURANCE_CODE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INITIAL_CUSTODY_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_HOME_PHONE, FieldType.PackedDecimal, 10, null, 0);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_DATE_OF_BIRTH, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CURR_PLACEMNT_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CURRENT_PLACEMENT, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CSEA_G_CAUSE_CODE, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CSEA_G_CAUSE_CL_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CSEA_COOP_CODE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_COUNTY_CRT_COMMIT, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MONTHS_ASST_AF, FieldType.CompInt, 9);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MONTHS_ASST_GA, FieldType.CompInt, 9);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MO_DEATH_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MO_PRT_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_FA_DEATH_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_FA_PRT_DT, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MPI_ID, FieldType.String, 38);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_MED_COVERAGE_IND, FieldType.String, 1);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INSURANCE_CARRIER, FieldType.String, 30);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INSURANCE_POLCY_NO, FieldType.String, 30);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SPOKEN_LANGUAGE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_WRITTEN_LANGUAGE, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_STATE_OF_BIRTH, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SCHOOL_DISTRICT, FieldType.String, 3);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_ETHNIC_CLASS, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_SUFFIX_NAME, FieldType.String, 10);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_EMPLOYER_NAME, FieldType.String, 28);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_EARNED_INCOME_AMT, FieldType.PackedDecimal, 8, null, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_INCOME_FREQUENCY, FieldType.String, 2);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_KEES_ABMS_ID, FieldType.String, 38);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLB9_EMAIL_ADDRESS, (CLB9_EMAIL_ADDRESS) =>
               {
                   CLB9_EMAIL_ADDRESS.CreateNewField(Names.CLB9_EMAIL_ADDRESS_LEN, FieldType.CompShort, 4);
                   CLB9_EMAIL_ADDRESS.CreateNewField(Names.CLB9_EMAIL_ADDRESS_TEXT, FieldType.String, 100);
               });
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewGroup(Names.CLB9_OCCUPATION, (CLB9_OCCUPATION) =>
               {
                   CLB9_OCCUPATION.CreateNewField(Names.CLB9_OCCUPATION_LEN, FieldType.CompShort, 4);
                   CLB9_OCCUPATION.CreateNewField(Names.CLB9_OCCUPATION_TEXT, FieldType.String, 100);
               });
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CREATED_BY, FieldType.String, 8);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_CREATED_TIMESTAMP, FieldType.String, 26);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_LAST_MODIFIED_BY, FieldType.String, 8);
               CLB9_DCLKSD_CLIENT_BASIC.CreateNewField(Names.CLB9_LAST_MODIFIED_TMST, FieldType.String, 26);
           });

            recordDef.CreateNewGroup(Names.CL9_DCLKSD_CLIENT, (CL9_DCLKSD_CLIENT) =>
           {
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_SSN, FieldType.CompInt, 9);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_PREVIOUS_SSN, FieldType.CompInt, 9);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_PHONETIC_DATA, FieldType.String, 21);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_DT_OF_LAST_UPDATE, FieldType.String, 10);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_DATE_OF_BIRTH, FieldType.String, 10);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_GENDER, FieldType.String, 1);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_VERIFIED_SSN_FLAG, FieldType.String, 1);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_CLIENT_NAME, FieldType.String, 30);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_CREATED_BY, FieldType.String, 8);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_CREATED_TIMESTAMP, FieldType.String, 26);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_LAST_MODIFIED_BY, FieldType.String, 8);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_LAST_MODIFIED_TMST, FieldType.String, 26);
               CL9_DCLKSD_CLIENT.CreateNewField(Names.CL9_FK_CLB_CLIENT_NO, FieldType.String, 10);
           });

            recordDef.CreateNewGroup(Names.SP9_DCLKSD_SYSTEM_PART, (SP9_DCLKSD_SYSTEM_PART) =>
           {
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_SYSTEM_CODE, FieldType.String, 2);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_PARTICIPATION_FLAG, FieldType.String, 1);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_CREATED_TIMESTAMP, FieldType.String, 26);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_CREATED_BY, FieldType.String, 8);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_LAST_MODIFIED_BY, FieldType.String, 8);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_LAST_MODIFIED_TMST, FieldType.String, 26);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_FK_CLB_CLIENT_NO, FieldType.String, 10);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_FK_CLI_CLIENT_NAME, FieldType.String, 30);
               SP9_DCLKSD_SYSTEM_PART.CreateNewField(Names.SP9_FK_CLI_SSN, FieldType.CompInt, 9);
           });
            recordDef.CreateNewField(Names.PH_CF2_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CF1_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CR2_INDEX, FieldType.CompShort, 4);
            recordDef.CreateNewField(Names.PH_CR1_INDEX, FieldType.CompShort, 4);


        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            SQLCA.InitializeWithLowValues();
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXIR90_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXIR90_ls_LinkageSection";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string W_IA = "W_IA";
            internal const string IMPORT_START = "IMPORT_START";
            internal const string UNIQUE_KEY_0001 = "UNIQUE_KEY_0001";
            internal const string IMPORT_PHONETIC = "IMPORT_PHONETIC";
            internal const string PERCENTAGE_0002 = "PERCENTAGE_0002";
            internal const string IMPORT_WORKSET = "IMPORT_WORKSET";
            internal const string SSN_0003 = "SSN_0003";
            internal const string FIRST_NAME_0003 = "FIRST_NAME_0003";
            internal const string INITIAL_0003 = "INITIAL_0003";
            internal const string LAST_NAME_0003 = "LAST_NAME_0003";
            internal const string SEX_0003 = "SEX_0003";
            internal const string DOB_0003 = "DOB_0003";
            internal const string NUMBER_0003 = "NUMBER_0003";
            internal const string IMPORT_MATCH = "IMPORT_MATCH";
            internal const string FLAG_0004 = "FLAG_0004";
            internal const string OFFICE_ID_0005ET = "OFFICE_ID_0005ET";
            internal const string OFFICE_ID_0003 = "OFFICE_ID_0003";
            internal const string W_OA = "W_OA";
            internal const string EXPORT_NEXT = "EXPORT_NEXT";
            internal const string EXP_UNIQUE_KEY = "EXP_UNIQUE_KEY";
            internal const string EXPORT_ABEND = "EXPORT_ABEND";
            internal const string EXP_ABEND_TYPE = "EXP_ABEND_TYPE";
            internal const string EXP_ADA_FILE_NBR = "EXP_ADA_FILE_NBR";
            internal const string EXP_ADA_FILE_ACT = "EXP_ADA_FILE_ACT";
            internal const string EXP_ADA_RESPONSE = "EXP_ADA_RESPONSE";
            internal const string EXP_CICS_RESOURCE = "EXP_CICS_RESOURCE";
            internal const string EXP_CICS_FUNCTION = "EXP_CICS_FUNCTION";
            internal const string EXP_CICS_RESPONSE = "EXP_CICS_RESPONSE";
            internal const string GROUP_EXPORT_0001RG = "GROUP_EXPORT_0001RG";
            internal const string EXP_GROUP_OCCUR = "EXP_GROUP_OCCUR";
            internal const string GROUP_EXPORT_0001 = "GROUP_EXPORT_0001";
            internal const string GROUP_EXPORT_DETAIL = "GROUP_EXPORT_DETAIL";
            internal const string SELECT_0008 = "SELECT_0008";
            internal const string NUMBER_0008 = "NUMBER_0008";
            internal const string SEX_0008 = "SEX_0008";
            internal const string DOB_0008 = "DOB_0008";
            internal const string SSN_0008 = "SSN_0008";
            internal const string FIRST_NAME_0008 = "FIRST_NAME_0008";
            internal const string INITIAL_0008 = "INITIAL_0008";
            internal const string LAST_NAME_0008 = "LAST_NAME_0008";
            internal const string FORMAT_NAME_0008 = "FORMAT_NAME_0008";
            internal const string REPL_IND_0008 = "REPL_IND_0008";
            internal const string GROUP_EXPORT_ALT_0013EV = "GROUP_EXPORT_ALT_0013EV";
            internal const string FLAG_JUNK = "FLAG_JUNK";
            internal const string FLAG_ALIAS = "FLAG_ALIAS";
            internal const string GROUP_EXPORT_KSCARES_0012EV = "GROUP_EXPORT_KSCARES_0012EV";
            internal const string EXP_KSCARES = "EXP_KSCARES";
            internal const string GROUP_EXPORT_KANPAY_0011EV = "GROUP_EXPORT_KANPAY_0011EV";
            internal const string EXP_KANPAY = "EXP_KANPAY";
            internal const string GROUP_EXPORT_CSE_0010EV = "GROUP_EXPORT_CSE_0010EV";
            internal const string EXP_CSE = "EXP_CSE";
            internal const string GROUP_EXPORT_AE_0009EV = "GROUP_EXPORT_AE_0009EV";
            internal const string EXP_AE = "EXP_AE";
            internal const string GROUP_EXPORT_FACTS_0014EV = "GROUP_EXPORT_FACTS_0014EV";
            internal const string EXP_FACTS = "EXP_FACTS";
            internal const string TWA = "TWA";
            internal const string TWA_ADABAS_PARMS = "TWA_ADABAS_PARMS";
            internal const string TWA_CICS_PARMS = "TWA_CICS_PARMS";
            internal const string TWA_PROGRAM_ID = "TWA_PROGRAM_ID";
            internal const string TWA_ADDR_LIST = "TWA_ADDR_LIST";
        }
        #endregion

        #region Direct-access element properties
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup W_IA { get { return GetElementByName<IGroup>(Names.W_IA); } }
        public IGroup IMPORT_START { get { return GetElementByName<IGroup>(Names.IMPORT_START); } }
        public IField UNIQUE_KEY_0001 { get { return GetElementByName<IField>(Names.UNIQUE_KEY_0001); } }
        public IGroup IMPORT_PHONETIC { get { return GetElementByName<IGroup>(Names.IMPORT_PHONETIC); } }
        public IField PERCENTAGE_0002 { get { return GetElementByName<IField>(Names.PERCENTAGE_0002); } }
        public IGroup IMPORT_WORKSET { get { return GetElementByName<IGroup>(Names.IMPORT_WORKSET); } }
        public IField SSN_0003 { get { return GetElementByName<IField>(Names.SSN_0003); } }
        public IField FIRST_NAME_0003 { get { return GetElementByName<IField>(Names.FIRST_NAME_0003); } }
        public IField INITIAL_0003 { get { return GetElementByName<IField>(Names.INITIAL_0003); } }
        public IField LAST_NAME_0003 { get { return GetElementByName<IField>(Names.LAST_NAME_0003); } }
        public IField SEX_0003 { get { return GetElementByName<IField>(Names.SEX_0003); } }
        public IField DOB_0003 { get { return GetElementByName<IField>(Names.DOB_0003); } }
        public IField NUMBER_0003 { get { return GetElementByName<IField>(Names.NUMBER_0003); } }
        public IGroup IMPORT_MATCH { get { return GetElementByName<IGroup>(Names.IMPORT_MATCH); } }
        public IField FLAG_0004 { get { return GetElementByName<IField>(Names.FLAG_0004); } }
        public IGroup OFFICE_ID_0005ET { get { return GetElementByName<IGroup>(Names.OFFICE_ID_0005ET); } }
        public IField OFFICE_ID_0003 { get { return GetElementByName<IField>(Names.OFFICE_ID_0003); } }
        public IGroup W_OA { get { return GetElementByName<IGroup>(Names.W_OA); } }
        public IGroup EXPORT_NEXT { get { return GetElementByName<IGroup>(Names.EXPORT_NEXT); } }
        public IField EXP_UNIQUE_KEY { get { return GetElementByName<IField>(Names.EXP_UNIQUE_KEY); } }
        public IGroup EXPORT_ABEND { get { return GetElementByName<IGroup>(Names.EXPORT_ABEND); } }
        public IField EXP_ABEND_TYPE { get { return GetElementByName<IField>(Names.EXP_ABEND_TYPE); } }
        public IField EXP_ADA_FILE_NBR { get { return GetElementByName<IField>(Names.EXP_ADA_FILE_NBR); } }
        public IField EXP_ADA_FILE_ACT { get { return GetElementByName<IField>(Names.EXP_ADA_FILE_ACT); } }
        public IField EXP_ADA_RESPONSE { get { return GetElementByName<IField>(Names.EXP_ADA_RESPONSE); } }
        public IField EXP_CICS_RESOURCE { get { return GetElementByName<IField>(Names.EXP_CICS_RESOURCE); } }
        public IField EXP_CICS_FUNCTION { get { return GetElementByName<IField>(Names.EXP_CICS_FUNCTION); } }
        public IField EXP_CICS_RESPONSE { get { return GetElementByName<IField>(Names.EXP_CICS_RESPONSE); } }
        public IGroup GROUP_EXPORT_0001RG { get { return GetElementByName<IGroup>(Names.GROUP_EXPORT_0001RG); } }
        public IField EXP_GROUP_OCCUR { get { return GetElementByName<IField>(Names.EXP_GROUP_OCCUR); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_0001 { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_0001); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_DETAIL { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_DETAIL); } }
        public IArrayElementAccessor<IField> SELECT_0008 { get { return GetArrayElementAccessor<IField>(Names.SELECT_0008); } }
        public IArrayElementAccessor<IField> NUMBER_0008 { get { return GetArrayElementAccessor<IField>(Names.NUMBER_0008); } }
        public IArrayElementAccessor<IField> SEX_0008 { get { return GetArrayElementAccessor<IField>(Names.SEX_0008); } }
        public IArrayElementAccessor<IField> DOB_0008 { get { return GetArrayElementAccessor<IField>(Names.DOB_0008); } }
        public IArrayElementAccessor<IField> SSN_0008 { get { return GetArrayElementAccessor<IField>(Names.SSN_0008); } }
        public IArrayElementAccessor<IField> FIRST_NAME_0008 { get { return GetArrayElementAccessor<IField>(Names.FIRST_NAME_0008); } }
        public IArrayElementAccessor<IField> INITIAL_0008 { get { return GetArrayElementAccessor<IField>(Names.INITIAL_0008); } }
        public IArrayElementAccessor<IField> LAST_NAME_0008 { get { return GetArrayElementAccessor<IField>(Names.LAST_NAME_0008); } }
        public IArrayElementAccessor<IField> FORMAT_NAME_0008 { get { return GetArrayElementAccessor<IField>(Names.FORMAT_NAME_0008); } }
        public IArrayElementAccessor<IField> REPL_IND_0008 { get { return GetArrayElementAccessor<IField>(Names.REPL_IND_0008); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_ALT_0013EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_ALT_0013EV); } }
        public IArrayElementAccessor<IField> FLAG_JUNK { get { return GetArrayElementAccessor<IField>(Names.FLAG_JUNK); } }
        public IArrayElementAccessor<IField> FLAG_ALIAS { get { return GetArrayElementAccessor<IField>(Names.FLAG_ALIAS); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_KSCARES_0012EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_KSCARES_0012EV); } }
        public IArrayElementAccessor<IField> EXP_KSCARES { get { return GetArrayElementAccessor<IField>(Names.EXP_KSCARES); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_KANPAY_0011EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_KANPAY_0011EV); } }
        public IArrayElementAccessor<IField> EXP_KANPAY { get { return GetArrayElementAccessor<IField>(Names.EXP_KANPAY); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_CSE_0010EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_CSE_0010EV); } }
        public IArrayElementAccessor<IField> EXP_CSE { get { return GetArrayElementAccessor<IField>(Names.EXP_CSE); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_AE_0009EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_AE_0009EV); } }
        public IArrayElementAccessor<IField> EXP_AE { get { return GetArrayElementAccessor<IField>(Names.EXP_AE); } }
        public IArrayElementAccessor<IGroup> GROUP_EXPORT_FACTS_0014EV { get { return GetArrayElementAccessor<IGroup>(Names.GROUP_EXPORT_FACTS_0014EV); } }
        public IArrayElementAccessor<IField> EXP_FACTS { get { return GetArrayElementAccessor<IField>(Names.EXP_FACTS); } }
        public IGroup TWA { get { return GetElementByName<IGroup>(Names.TWA); } }
        public IGroup TWA_ADABAS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_ADABAS_PARMS); } }
        public IGroup TWA_CICS_PARMS { get { return GetElementByName<IGroup>(Names.TWA_CICS_PARMS); } }
        public IField TWA_PROGRAM_ID { get { return GetElementByName<IField>(Names.TWA_PROGRAM_ID); } }
        public IGroup TWA_ADDR_LIST { get { return GetElementByName<IGroup>(Names.TWA_ADDR_LIST); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
           {
               PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
               PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
               {
                   PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
               });
           });

            recordDef.CreateNewGroup(Names.W_IA, (W_IA) =>
           {
               W_IA.CreateNewGroup(Names.IMPORT_START, (IMPORT_START) =>
               {
                   IMPORT_START.CreateNewFillerField(1, FillWith.Hashes);
                   IMPORT_START.CreateNewField(Names.UNIQUE_KEY_0001, FieldType.String, 100);
               });
               W_IA.CreateNewGroup(Names.IMPORT_PHONETIC, (IMPORT_PHONETIC) =>
               {
                   IMPORT_PHONETIC.CreateNewFillerField(1, FillWith.Hashes);
                   IMPORT_PHONETIC.CreateNewField(Names.PERCENTAGE_0002, FieldType.SignedNumeric, 3);
               });
               W_IA.CreateNewGroup(Names.IMPORT_WORKSET, (IMPORT_WORKSET) =>
               {
                   IMPORT_WORKSET.CreateNewFillerField(1, FillWith.Hashes);
                   IMPORT_WORKSET.CreateNewField(Names.SSN_0003, FieldType.String, 9);
                   IMPORT_WORKSET.CreateNewFillerField(1, FillWith.Hashes);
                   IMPORT_WORKSET.CreateNewField(Names.FIRST_NAME_0003, FieldType.String, 12);
                   IMPORT_WORKSET.CreateNewFillerField(1, FillWith.Hashes);
                   IMPORT_WORKSET.CreateNewField(Names.INITIAL_0003, FieldType.String, 1);
                   IMPORT_WORKSET.CreateNewFillerField(1, FillWith.Hashes);
                   IMPORT_WORKSET.CreateNewField(Names.LAST_NAME_0003, FieldType.String, 17);
                   IMPORT_WORKSET.CreateNewFillerField(1, FillWith.Hashes);
                   IMPORT_WORKSET.CreateNewField(Names.SEX_0003, FieldType.String, 1);
                   IMPORT_WORKSET.CreateNewFillerField(1, FillWith.Hashes);
                   IMPORT_WORKSET.CreateNewField(Names.DOB_0003, FieldType.SignedNumeric, 8);
                   IMPORT_WORKSET.CreateNewFillerField(1, FillWith.Hashes);
                   IMPORT_WORKSET.CreateNewField(Names.NUMBER_0003, FieldType.String, 10);
               });
               W_IA.CreateNewGroup(Names.IMPORT_MATCH, (IMPORT_MATCH) =>
               {
                   IMPORT_MATCH.CreateNewFillerField(1, FillWith.Hashes);
                   IMPORT_MATCH.CreateNewField(Names.FLAG_0004, FieldType.String, 1);
               });
               W_IA.CreateNewGroup(Names.OFFICE_ID_0005ET, (OFFICE_ID_0005ET) =>
               {
                   OFFICE_ID_0005ET.CreateNewFillerField(1, FillWith.Hashes);
                   OFFICE_ID_0005ET.CreateNewField(Names.OFFICE_ID_0003, FieldType.SignedNumeric, 4);
               });
           });

            recordDef.CreateNewGroup(Names.W_OA, (W_OA) =>
           {
               W_OA.CreateNewGroup(Names.EXPORT_NEXT, (EXPORT_NEXT) =>
               {
                   EXPORT_NEXT.CreateNewFillerField(1, FillWith.Hashes);
                   EXPORT_NEXT.CreateNewField(Names.EXP_UNIQUE_KEY, FieldType.String, 100);
               });
               W_OA.CreateNewGroup(Names.EXPORT_ABEND, (EXPORT_ABEND) =>
               {
                   EXPORT_ABEND.CreateNewFillerField(1, FillWith.Hashes);
                   EXPORT_ABEND.CreateNewField(Names.EXP_ABEND_TYPE, FieldType.String, 1);
                   EXPORT_ABEND.CreateNewFillerField(1, FillWith.Hashes);
                   EXPORT_ABEND.CreateNewField(Names.EXP_ADA_FILE_NBR, FieldType.String, 4);
                   EXPORT_ABEND.CreateNewFillerField(1, FillWith.Hashes);
                   EXPORT_ABEND.CreateNewField(Names.EXP_ADA_FILE_ACT, FieldType.String, 3);
                   EXPORT_ABEND.CreateNewFillerField(1, FillWith.Hashes);
                   EXPORT_ABEND.CreateNewField(Names.EXP_ADA_RESPONSE, FieldType.String, 4);
                   EXPORT_ABEND.CreateNewFillerField(1, FillWith.Hashes);
                   EXPORT_ABEND.CreateNewField(Names.EXP_CICS_RESOURCE, FieldType.String, 8);
                   EXPORT_ABEND.CreateNewFillerField(1, FillWith.Hashes);
                   EXPORT_ABEND.CreateNewField(Names.EXP_CICS_FUNCTION, FieldType.String, 2);
                   EXPORT_ABEND.CreateNewFillerField(1, FillWith.Hashes);
                   EXPORT_ABEND.CreateNewField(Names.EXP_CICS_RESPONSE, FieldType.String, 6);
               });
               W_OA.CreateNewGroup(Names.GROUP_EXPORT_0001RG, (GROUP_EXPORT_0001RG) =>
               {
                   GROUP_EXPORT_0001RG.CreateNewField(Names.EXP_GROUP_OCCUR, FieldType.SignedNumeric, 4);
                   GROUP_EXPORT_0001RG.CreateNewGroupArray(Names.GROUP_EXPORT_0001, 117, (GROUP_EXPORT_0001) =>
                   {
                       GROUP_EXPORT_0001.CreateNewFillerField(1, FillWith.Hashes);
                       GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_DETAIL, (GROUP_EXPORT_DETAIL) =>
                       {
                           GROUP_EXPORT_DETAIL.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_DETAIL.CreateNewField(Names.SELECT_0008, FieldType.String, 1);
                           GROUP_EXPORT_DETAIL.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_DETAIL.CreateNewField(Names.NUMBER_0008, FieldType.String, 10);
                           GROUP_EXPORT_DETAIL.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_DETAIL.CreateNewField(Names.SEX_0008, FieldType.String, 1);
                           GROUP_EXPORT_DETAIL.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_DETAIL.CreateNewField(Names.DOB_0008, FieldType.String, 8);
                           GROUP_EXPORT_DETAIL.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_DETAIL.CreateNewField(Names.SSN_0008, FieldType.String, 9);
                           GROUP_EXPORT_DETAIL.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_DETAIL.CreateNewField(Names.FIRST_NAME_0008, FieldType.String, 12);
                           GROUP_EXPORT_DETAIL.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_DETAIL.CreateNewField(Names.INITIAL_0008, FieldType.String, 1);
                           GROUP_EXPORT_DETAIL.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_DETAIL.CreateNewField(Names.LAST_NAME_0008, FieldType.String, 17);
                           GROUP_EXPORT_DETAIL.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_DETAIL.CreateNewField(Names.FORMAT_NAME_0008, FieldType.String, 33);
                           GROUP_EXPORT_DETAIL.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_DETAIL.CreateNewField(Names.REPL_IND_0008, FieldType.String, 1);
                       });
                       GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_ALT_0013EV, (GROUP_EXPORT_ALT_0013EV) =>
                       {
                           GROUP_EXPORT_ALT_0013EV.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_ALT_0013EV.CreateNewField(Names.FLAG_JUNK, FieldType.String, 1);
                           GROUP_EXPORT_ALT_0013EV.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_ALT_0013EV.CreateNewField(Names.FLAG_ALIAS, FieldType.String, 1);
                       });
                       GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_KSCARES_0012EV, (GROUP_EXPORT_KSCARES_0012EV) =>
                       {
                           GROUP_EXPORT_KSCARES_0012EV.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_KSCARES_0012EV.CreateNewField(Names.EXP_KSCARES, FieldType.String, 1);
                       });
                       GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_KANPAY_0011EV, (GROUP_EXPORT_KANPAY_0011EV) =>
                       {
                           GROUP_EXPORT_KANPAY_0011EV.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_KANPAY_0011EV.CreateNewField(Names.EXP_KANPAY, FieldType.String, 1);
                       });
                       GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_CSE_0010EV, (GROUP_EXPORT_CSE_0010EV) =>
                       {
                           GROUP_EXPORT_CSE_0010EV.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_CSE_0010EV.CreateNewField(Names.EXP_CSE, FieldType.String, 1);
                       });
                       GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_AE_0009EV, (GROUP_EXPORT_AE_0009EV) =>
                       {
                           GROUP_EXPORT_AE_0009EV.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_AE_0009EV.CreateNewField(Names.EXP_AE, FieldType.String, 1);
                       });
                       GROUP_EXPORT_0001.CreateNewGroup(Names.GROUP_EXPORT_FACTS_0014EV, (GROUP_EXPORT_FACTS_0014EV) =>
                       {
                           GROUP_EXPORT_FACTS_0014EV.CreateNewFillerField(1, FillWith.Hashes);
                           GROUP_EXPORT_FACTS_0014EV.CreateNewField(Names.EXP_FACTS, FieldType.String, 1);
                       });
                   });
               });
           });

            recordDef.CreateNewGroup(Names.TWA, (TWA) =>
           {
               IGroup TWA_ADABAS_PARMS_local = (IGroup)TWA.CreateNewGroup(Names.TWA_ADABAS_PARMS, (TWA_ADABAS_PARMS) =>
               {
                   TWA_ADABAS_PARMS.CreateNewFieldArray("FILLER_d59", 7, FieldType.CompInt, 4);
               });
               TWA.CreateNewGroupRedefine(Names.TWA_CICS_PARMS, TWA_ADABAS_PARMS_local, (TWA_CICS_PARMS) =>
               {
                   TWA_CICS_PARMS.CreateNewField(Names.TWA_PROGRAM_ID, FieldType.String, 8);
                   TWA_CICS_PARMS.CreateNewGroup(Names.TWA_ADDR_LIST, (TWA_ADDR_LIST) =>
                   {
                       TWA_ADDR_LIST.CreateNewFieldArray("FILLER_d60", 5, FieldType.CompInt, 4);
                   });
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(W_IA, args, 0);
            SetPassedParm(W_OA, args, 1);
            SetPassedParm(PSMGR_EAB_DATA, args, 2);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(W_IA, args, 0);
            SetReturnParm(W_OA, args, 1);
            SetReturnParm(PSMGR_EAB_DATA, args, 2);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXIR90 : OnlineProgramBase
    {

        #region Public Constructors
        public SWEXIR90()
            : base()
        {
            this.ProgramName = "SWEXIR90";

            WS = new SWEXIR90_ws();
            LS = new SWEXIR90_ls();
            DbConv = new DBConversation();
            DbConv.SQLCA.Record = WS.SQLCA.Record;

            DbConv.SetQueryText("OFC-CSR", "SELECT DISTINCT ASN.OFF_ID, ASN.DISCONTINUE_DATE FROM CKT_ASSIGN_CASE ASN, CKT_CASE_ROLE ROL WHERE ASN.CAS_NO = ROL.CAS_NUMBER AND ASN.DISCONTINUE_DATE = ( SELECT MAX ( DISCONTINUE_DATE ) FROM CKT_ASSIGN_CASE WHERE CAS_NO = ROL.CAS_NUMBER ) AND ROL.CSP_NUMBER = {0}  ORDER BY ASN.DISCONTINUE_DATE DESC WITH UR",  //COBOL==>EXEC SQL DECLARE OFC-CSR CURSOR FOR SELECT DISTINCT ASN.OFF_ID , ASN.DISCONTINUE_DATE FROM CKT_ASSIGN_CASE ASN , CKT_CASE_ROLE ROL WHERE ASN.CAS_NO = ROL.CAS_NUMBER AND ASN.DISCONTINUE_DATE = ( SELECT MAX ( DISCONTINUE_DATE ) FROM CKT_ASSIGN_CASE WHERE CAS_NO = ROL.CAS_NUMBER ) AND ROL.CSP_NUMBER = :CUR-CLIENT-ID ORDER BY ASN.DISCONTINUE_DATE DESC WITH UR END-EXEC
                                WS.CUR_CLIENT_ID);

            DbConv.SetQueryText("NAME-VIEW", "SELECT CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( CLIENT_NAME = {0}  AND SSN = {1}  AND DATE_OF_BIRTH = {2}  AND GENDER = {3}  AND FK_CLB_CLIENT_NO >= {4}  ) OR ( CLIENT_NAME = {5}  AND SSN = {6}  AND DATE_OF_BIRTH = {7}  AND GENDER > {8}  ) OR ( CLIENT_NAME = {9}  AND SSN = {10}  AND DATE_OF_BIRTH > {11}  ) OR ( CLIENT_NAME = {12}  AND SSN > {13}  ) OR ( CLIENT_NAME > {14}  ) ORDER BY CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE NAME-VIEW CURSOR FOR SELECT CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER = :DBK1-GENDER AND FK_CLB_CLIENT_NO >= :DBK1-CLIENT-NUMBER ) OR ( CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER > :DBK1-GENDER ) OR ( CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH > :DBK1-DATE-OF-BIRTH ) OR ( CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN > :DBK1-SSN ) OR ( CLIENT_NAME > :DBK1-CLIENT-NAME ) ORDER BY CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG END-EXEC
                                WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_CLIENT_NUMBER, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_CLIENT_NAME);

            DbConv.SetQueryText("PHON-VIEW", "SELECT PHONETIC_DATA, CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( PHONETIC_DATA = {0}  AND CLIENT_NAME = {1}  AND SSN = {2}  AND DATE_OF_BIRTH = {3}  AND GENDER = {4}  AND FK_CLB_CLIENT_NO >= {5}  ) OR ( PHONETIC_DATA = {6}  AND CLIENT_NAME = {7}  AND SSN = {8}  AND DATE_OF_BIRTH = {9}  AND GENDER > {10}  ) OR ( PHONETIC_DATA = {11}  AND CLIENT_NAME = {12}  AND SSN = {13}  AND DATE_OF_BIRTH > {14}  ) OR ( PHONETIC_DATA = {15}  AND CLIENT_NAME = {16}  AND SSN > {17}  ) OR ( PHONETIC_DATA = {18}  AND CLIENT_NAME > {19}  ) OR ( PHONETIC_DATA > {20}  ) ORDER BY PHONETIC_DATA, CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE PHON-VIEW CURSOR FOR SELECT PHONETIC_DATA , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( PHONETIC_DATA = :DBK1-PHONETIC-DATA AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER = :DBK1-GENDER AND FK_CLB_CLIENT_NO >= :DBK1-CLIENT-NUMBER ) OR ( PHONETIC_DATA = :DBK1-PHONETIC-DATA AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER > :DBK1-GENDER ) OR ( PHONETIC_DATA = :DBK1-PHONETIC-DATA AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH > :DBK1-DATE-OF-BIRTH ) OR ( PHONETIC_DATA = :DBK1-PHONETIC-DATA AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN > :DBK1-SSN ) OR ( PHONETIC_DATA = :DBK1-PHONETIC-DATA AND CLIENT_NAME > :DBK1-CLIENT-NAME ) OR ( PHONETIC_DATA > :DBK1-PHONETIC-DATA ) ORDER BY PHONETIC_DATA , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG END-EXEC
                                WS.DBK1_PHONETIC_DATA, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_CLIENT_NUMBER, WS.DBK1_PHONETIC_DATA, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_PHONETIC_DATA, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_PHONETIC_DATA, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_PHONETIC_DATA, WS.DBK1_CLIENT_NAME, WS.DBK1_PHONETIC_DATA);

            DbConv.SetQueryText("SSN-VIEW", "SELECT SSN, CLIENT_NAME, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( SSN = {0}  AND CLIENT_NAME = {1}  AND DATE_OF_BIRTH = {2}  AND GENDER = {3}  AND FK_CLB_CLIENT_NO >= {4}  ) OR ( SSN = {5}  AND CLIENT_NAME = {6}  AND DATE_OF_BIRTH = {7}  AND GENDER > {8}  ) OR ( SSN = {9}  AND CLIENT_NAME = {10}  AND DATE_OF_BIRTH > {11}  ) OR ( SSN = {12}  AND CLIENT_NAME > {13}  ) OR ( SSN > {14}  ) ORDER BY SSN, CLIENT_NAME, DATE_OF_BIRTH, GENDER, FK_CLB_CLIENT_NO, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE SSN-VIEW CURSOR FOR SELECT SSN , CLIENT_NAME , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( SSN = :DBK1-SSN AND CLIENT_NAME = :DBK1-CLIENT-NAME AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER = :DBK1-GENDER AND FK_CLB_CLIENT_NO >= :DBK1-CLIENT-NUMBER ) OR ( SSN = :DBK1-SSN AND CLIENT_NAME = :DBK1-CLIENT-NAME AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER > :DBK1-GENDER ) OR ( SSN = :DBK1-SSN AND CLIENT_NAME = :DBK1-CLIENT-NAME AND DATE_OF_BIRTH > :DBK1-DATE-OF-BIRTH ) OR ( SSN = :DBK1-SSN AND CLIENT_NAME > :DBK1-CLIENT-NAME ) OR ( SSN > :DBK1-SSN ) ORDER BY SSN , CLIENT_NAME , DATE_OF_BIRTH , GENDER , FK_CLB_CLIENT_NO , VERIFIED_SSN_FLAG END-EXEC
                                WS.DBK1_SSN, WS.DBK1_CLIENT_NAME, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_CLIENT_NUMBER, WS.DBK1_SSN, WS.DBK1_CLIENT_NAME, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_SSN, WS.DBK1_CLIENT_NAME, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_SSN, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN);

            DbConv.SetQueryText("ID-VIEW", "SELECT FK_CLB_CLIENT_NO, CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( FK_CLB_CLIENT_NO = {0}  AND CLIENT_NAME = {1}  AND SSN = {2}  AND DATE_OF_BIRTH = {3}  AND GENDER >= {4}  ) OR ( FK_CLB_CLIENT_NO = {5}  AND CLIENT_NAME = {6}  AND SSN = {7}  AND DATE_OF_BIRTH > {8}  ) OR ( FK_CLB_CLIENT_NO = {9}  AND CLIENT_NAME = {10}  AND SSN > {11}  ) OR ( FK_CLB_CLIENT_NO = {12}  AND CLIENT_NAME > {13}  ) OR ( FK_CLB_CLIENT_NO > {14}  ) ORDER BY FK_CLB_CLIENT_NO, CLIENT_NAME, SSN, DATE_OF_BIRTH, GENDER, VERIFIED_SSN_FLAG",  //COBOL==>EXEC SQL DECLARE ID-VIEW CURSOR FOR SELECT FK_CLB_CLIENT_NO , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG FROM KSD_CLIENT WHERE ( FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH = :DBK1-DATE-OF-BIRTH AND GENDER >= :DBK1-GENDER ) OR ( FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN = :DBK1-SSN AND DATE_OF_BIRTH > :DBK1-DATE-OF-BIRTH ) OR ( FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER AND CLIENT_NAME = :DBK1-CLIENT-NAME AND SSN > :DBK1-SSN ) OR ( FK_CLB_CLIENT_NO = :DBK1-CLIENT-NUMBER AND CLIENT_NAME > :DBK1-CLIENT-NAME ) OR ( FK_CLB_CLIENT_NO > :DBK1-CLIENT-NUMBER ) ORDER BY FK_CLB_CLIENT_NO , CLIENT_NAME , SSN , DATE_OF_BIRTH , GENDER , VERIFIED_SSN_FLAG END-EXEC
                                WS.DBK1_CLIENT_NUMBER, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_GENDER, WS.DBK1_CLIENT_NUMBER, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_DATE_OF_BIRTH, WS.DBK1_CLIENT_NUMBER, WS.DBK1_CLIENT_NAME, WS.DBK1_SSN, WS.DBK1_CLIENT_NUMBER, WS.DBK1_CLIENT_NAME, WS.DBK1_CLIENT_NUMBER);

        }

        public SWEXIR90(OnlineControl controlData) : base(controlData)
        {
            this.ProgramName = "SWEXIR90";

            WS = new SWEXIR90_ws();
            LS = new SWEXIR90_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXIR90_ws WS;

        //==== Linkage Section Data Class ========================================
        private SWEXIR90_ls LS;
        private DBConversation DbConv;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING W-IA , W-OA , PSMGR-EAB-DATA.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                SetData();
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
            finally
            {
                Data.CloseConnection();
            }
        }
        #endregion

        #region Private Methods

        private void SetData()
        {
            LS.InitializeWithLowValues();
            WS.InitializeWithLowValues();
        }

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN
        /// </summary>
        /// <remarks>
        ///COMMENT: **************************************************************
        /// </remarks>
        private void M_MAIN(string returnMethod = "")
        {
            M_INITIALIZE_DATA(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM INITIALIZE-DATA
            if ((WS.IMP_SEARCH_NAME.Value)
             && (WS.IMP_EXACT.Value))                             //COBOL==> IF IMP-SEARCH-NAME AND IMP-EXACT
            {
                M_GET_NAME_1ST(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM GET-NAME-1ST
                while (!(WS.EXIT_PGM.Value))                                                                        //COBOL==> PERFORM GET-NAME-NXT UNTIL EXIT-PGM
                {
                    M_GET_NAME_NXT(); if (Control.ExitProgram) { return; }
                }
            }                                                                                                   //COBOL==> END-IF
            if ((WS.IMP_SEARCH_NAME.Value)
             && (!(WS.IMP_EXACT.Value)))                         //COBOL==> IF IMP-SEARCH-NAME AND NOT IMP-EXACT
            {
                M_GET_PHON_1ST(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM GET-PHON-1ST
                while (!(WS.EXIT_PGM.Value))                                                                        //COBOL==> PERFORM GET-PHON-NXT UNTIL EXIT-PGM
                {
                    M_GET_PHON_NXT(); if (Control.ExitProgram) { return; }
                }
            }                                                                                                   //COBOL==> END-IF.
            if (WS.IMP_SEARCH_SSN.Value)                                                                        //COBOL==> IF IMP-SEARCH-SSN
            {
                M_GET_SSN_1ST(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM GET-SSN-1ST
                while (!(WS.EXIT_PGM.Value))                                                                        //COBOL==> PERFORM GET-SSN-NXT UNTIL EXIT-PGM
                {
                    M_GET_SSN_NXT(); if (Control.ExitProgram) { return; }
                }
            }                                                                                                   //COBOL==> END-IF
            if (WS.IMP_SEARCH_ID.Value)                                                                         //COBOL==> IF IMP-SEARCH-ID
            {
                M_GET_ID_1ST(); if (Control.ExitProgram) { return; }                                                  //COBOL==> PERFORM GET-ID-1ST
                while (!(WS.EXIT_PGM.Value))                                                                        //COBOL==> PERFORM GET-ID-NXT UNTIL EXIT-PGM
                {
                    M_GET_ID_NXT(); if (Control.ExitProgram) { return; }
                }
            }                                                                                                   //COBOL==> END-IF
            if (WS.I1.IsLessThanOrEqualTo(WS.MAX_NAME))                                                         //COBOL==> IF I1 <= MAX-NAME
            {
                LS.EXP_GROUP_OCCUR.SetValue(WS.I1);                                                                 //COBOL==> MOVE I1 TO EXP-GROUP-OCCUR
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.EXP_GROUP_OCCUR.SetValue(WS.MAX_NAME);                                                           //COBOL==> MOVE MAX-NAME TO EXP-GROUP-OCCUR
            }                                                                                                   //COBOL==> END-IF
            M_END_PROGRAM(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM END-PROGRAM.
            if (returnMethod != "" && returnMethod != "M_MAIN") { M_INITIALIZE_DATA(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_INITIALIZE_DATA
        /// </summary>
        /// <remarks>
        ///COMMENT:  INITIALIZE PROGRAM VARIABLES
        /// </remarks>
        private void M_INITIALIZE_DATA(string returnMethod = "")
        {
            LS.EXPORT_NEXT.ResetToInitialValue();                                                               //COBOL==> INITIALIZE EXPORT-NEXT
            LS.EXPORT_ABEND.ResetToInitialValue();                                                              //COBOL==> INITIALIZE EXPORT-ABEND
            WS.GROUP_EXPORT_0001PS.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO GROUP-EXPORT-0001PS
            LS.GROUP_EXPORT_0001RG.ResetToInitialValue();                                                       //COBOL==> INITIALIZE GROUP-EXPORT-0001RG
            WS.FUNC_0329211337_ESC_FLAG.SetValue("N");                                                          //COBOL==> MOVE 'N' TO FUNC-0329211337-ESC-FLAG.
            WS.I1.ResetToInitialValue();                                                                        //COBOL==> INITIALIZE I1.
            SetHandleCondtions(HandleCondition.ERROR, "M_CICS_ABEND");                                          //COBOL==> EXEC CICS HANDLE CONDITION ERROR ( CICS-ABEND ) END-EXEC.
            WS.IMP_DATA.SetValueWithSpaces();                                                                   //COBOL==> MOVE SPACES TO IMP-DATA.
            WS.IMP_SEARCH_TYPE.SetValue(LS.FLAG_0004);                                                          //COBOL==> MOVE FLAG-0004 TO IMP-SEARCH-TYPE.
            WS.IMP_PERCENT.SetValue(LS.PERCENTAGE_0002);                                                        //COBOL==> MOVE PERCENTAGE-0002 TO IMP-PERCENT.
            WS.IMP_LAST_NAME.SetValue(LS.LAST_NAME_0003);                                                       //COBOL==> MOVE LAST-NAME-0003 TO IMP-LAST-NAME.
            WS.IMP_FIRST_NAME.SetValue(LS.FIRST_NAME_0003);                                                     //COBOL==> MOVE FIRST-NAME-0003 TO IMP-FIRST-NAME.
            WS.IMP_INIT.SetValue(LS.INITIAL_0003);                                                              //COBOL==> MOVE INITIAL-0003 TO IMP-INIT.
            if (LS.DOB_0003.IsEqualTo("00000000"))                                                              //COBOL==> IF DOB-0003 = '00000000'
            {
                WS.IMP_DOB.SetValueWithSpaces();                                                                    //COBOL==> MOVE SPACES TO IMP-DOB
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.IMP_DOB.SetValue(LS.DOB_0003);                                                                   //COBOL==> MOVE DOB-0003 TO IMP-DOB
            }                                                                                                   //COBOL==> END-IF.
            WS.IMP_SEX.SetValue(LS.SEX_0003);                                                                   //COBOL==> MOVE SEX-0003 TO IMP-SEX.
            WS.IMP_SSN.SetValue(LS.SSN_0003);                                                                   //COBOL==> MOVE SSN-0003 TO IMP-SSN.
            WS.IMP_ID_X10.SetValue(LS.NUMBER_0003);                                                             //COBOL==> MOVE NUMBER-0003 TO IMP-ID-X10.
            WS.IMP_OFC.SetValue(LS.OFFICE_ID_0003);                                                             //COBOL==> MOVE OFFICE-ID-0003 TO IMP-OFC.
            WS.IMP_KEY.SetValue(LS.UNIQUE_KEY_0001);                                                            //COBOL==> MOVE UNIQUE-KEY-0001 TO IMP-KEY.
                                                                                                                //COMMENT: ** GQB 03/05/2014 - ADDED NEW CODE FOR DB2
            WS.WS9_MSG_X.SetValue("*SWEXIR90*");                                                                //COBOL==> MOVE '*SWEXIR90*' TO WS9-MSG-X.
            if (returnMethod != "" && returnMethod != "M_INITIALIZE_DATA") { M_GET_NAME_1ST(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_NAME_1ST
        /// </summary>
        /// <remarks>
        ///COMMENT:  GET FIRST RECORD BY NAME
        ///COMMENT: ** GQB 03/05/2014 - OPEN CURSOR FOR NAME VIEW
        /// </remarks>
        private void M_GET_NAME_1ST(string returnMethod = "")
        {
            WS.ADA1_NAME_KEY.ResetToInitialValue();                                                             //COBOL==> INITIALIZE ADA1-NAME-KEY.
            if (!(WS.IMP_KEY.IsSpaces()))                                                                       //COBOL==> IF IMP-KEY NOT = SPACES
            {
                WS.ADA1_NAME_KEY.SetValue(WS.IMP_KEY);                                                              //COBOL==> MOVE IMP-KEY TO ADA1-NAME-KEY
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.ADA1_CLIENT_NAME.SetValue(WS.IMP_NAME);                                                          //COBOL==> MOVE IMP-NAME TO ADA1-CLIENT-NAME
            }                                                                                                   //COBOL==> END-IF.
            WS.DBK1_CLIENT_NAME.SetValue(WS.ADA1_CLIENT_NAME);                                                  //COBOL==> MOVE ADA1-CLIENT-NAME TO DBK1-CLIENT-NAME.
            WS.DBK1_SSN.SetValue(WS.ADA1_SSN);                                                                  //COBOL==> MOVE ADA1-SSN TO DBK1-SSN.
            WS.WS9_DATE_ADA.SetValue(WS.ADA1_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA1-DATE-OF-BIRTH TO WS9-DATE-ADA.
            M_91100_CONVERT_DATE_ADA_TO_DB2("M_91100_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2.
            WS.DBK1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                    //COBOL==> MOVE WS9-DATE-DB2 TO DBK1-DATE-OF-BIRTH.
            WS.DBK1_GENDER.SetValue(WS.ADA1_SEX);                                                               //COBOL==> MOVE ADA1-SEX TO DBK1-GENDER.
            WS.DBK1_CLIENT_NUMBER.SetValue(WS.ADA1_CLIENT_NUMBER);                                              //COBOL==> MOVE ADA1-CLIENT-NUMBER TO DBK1-CLIENT-NUMBER.
            M_1100_OPEN_NAME_VIEW("M_1100_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 1100-OPEN-NAME-VIEW.
            if (returnMethod != "" && returnMethod != "M_GET_NAME_1ST") { M_GET_NAME_NXT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_NAME_NXT
        /// </summary>
        /// <remarks>
        ///COMMENT:  READ NEXT RECORD BY NAME
        ///COMMENT: ** GQB 03/05/2014 - FETCH NEXT RECORD ON NAME VIEW
        /// </remarks>
        private void M_GET_NAME_NXT(string returnMethod = "")
        {
            if (WS.SW1_ERR_NO.Value)                                                                            //COBOL==> IF SW1-ERR-NO
            {
                M_1200_FETCH_NAME_VIEW("M_1200_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 1200-FETCH-NAME-VIEW
            }                                                                                                   //COBOL==> END-IF.
            M_READ_NAME(); if (Control.ExitProgram) { return; }                                                   //COBOL==> PERFORM READ-NAME.
            if (returnMethod != "" && returnMethod != "M_GET_NAME_NXT") { M_READ_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_READ_NAME
        /// </summary>
        /// <remarks>
        ///COMMENT:  CHECK THE NAME READ RESPONSE AND COMPARE RECORD TO START VALUE
        ///COMMENT: ** GQB 03/05/2014 - CHECK RECORD ON NAME VIEW
        /// </remarks>
        private void M_READ_NAME(string returnMethod = "")
        {
            if ((WS.SW1_ERR_NO.Value)
             && (WS.SW1_EOF_NO.Value))                                 //COBOL==> IF SW1-ERR-NO AND SW1-EOF-NO
            {
                WS.TMP_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                           //COBOL==> MOVE CL1-CLIENT-NAME TO TMP-NAME
                WS.IMP_FIRST_NAME.SetValueInspectReplacing(WS.IMP_FIRST_NAME, "FIRST", " ", "9", "", "", "", "");  //COBOL==> INSPECT IMP-FIRST-NAME REPLACING FIRST SPACE BY '9'
                if ((WS.TMP_LAST_NAME.IsGreaterThan(WS.IMP_LAST_NAME))
             || ((WS.TMP_LAST_NAME.IsEqualTo(WS.IMP_LAST_NAME))
             && (WS.TMP_FIRST_NAME.IsGreaterThan(WS.IMP_FIRST_NAME))))  //COBOL==> IF ( TMP-LAST-NAME > IMP-LAST-NAME ) OR ( TMP-LAST-NAME = IMP-LAST-NAME AND TMP-FIRST-NAME > IMP-FIRST-NAME )
                {
                    WS.EXIT_PGM.SetValue(true);                                                                         //COBOL==> SET EXIT-PGM TO TRUE
                    M_1300_CLOSE_NAME_VIEW("M_1300_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 1300-CLOSE-NAME-VIEW
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_MOVE_NAME(); if (Control.ExitProgram) { return; }                                                   //COBOL==> PERFORM MOVE-NAME
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.SW1_EOF_YES.Value)                                                                           //COBOL==> IF SW1-EOF-YES
                {
                    WS.EXIT_PGM.SetValue(true);                                                                         //COBOL==> SET EXIT-PGM TO TRUE
                    M_1300_CLOSE_NAME_VIEW("M_1300_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 1300-CLOSE-NAME-VIEW
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        M_1300_CLOSE_NAME_VIEW("M_1300_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 1300-CLOSE-NAME-VIEW
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_READ_NAME") { M_MOVE_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MOVE_NAME
        /// </summary>
        /// <remarks>
        ///COMMENT:  MOVE NAME READ TO COMMON VARIABLES
        ///COMMENT: ** GQB 03/05/2014 - MOVE NAME VIEW DATA TO WS
        /// </remarks>
        private void M_MOVE_NAME(string returnMethod = "")
        {
            WS.CUR_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                           //COBOL==> MOVE CL1-CLIENT-NAME TO CUR-NAME.
            WS.CUR_SSN.SetValue(WS.CL1_SSN);                                                                    //COBOL==> MOVE CL1-SSN TO CUR-SSN.
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.CUR_DOB.SetValue(WS.WS9_DATE_ADA);                                                               //COBOL==> MOVE WS9-DATE-ADA TO CUR-DOB.
            WS.CUR_SEX.SetValue(WS.CL1_GENDER);                                                                 //COBOL==> MOVE CL1-GENDER TO CUR-SEX.
                                                                                                                //COMMENT: ** GQB 07/24/2014 - CODE FOR CLIENT POINTER INFORMATION
                                                                                                                //COMMENT: **                  SWCSZG87 AND SWCSZG88 MUST BE INCLUDED
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                            //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO DBK9-CLIENT-NUMBER.
            WS.DBK9_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                          //COBOL==> MOVE CUR-NAME TO DBK9-CLIENT-NAME.
            WS.DBK9_SSN.SetValue(WS.CUR_SSN);                                                                   //COBOL==> MOVE CUR-SSN TO DBK9-SSN.
            WS.WS9_CLIENT_POINTER.ResetToInitialValue();                                                        //COBOL==> INITIALIZE WS9-CLIENT-POINTER.
            WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL1_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL1-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG.
            WS.SW9_SELECT_CLIENT_NO.SetValue(true);                                                             //COBOL==> SET SW9-SELECT-CLIENT-NO TO TRUE.
            M_99000_CLIENT_POINTER_ROUTINE("M_99000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 99000-CLIENT-POINTER-ROUTINE.
                                                                                                                  //COMMENT: ** GQB 07/25/2014 - IGNORE ERRORS AND PASS CLIENT POINTER
                                                                                                                  //COMMENT: **                  TO ENABLE CONTINUATION OF THE PROCESS
            WS.CUR_POINTER.SetValue(WS.WS9_CLIENT_POINTER);                                                     //COBOL==> MOVE WS9-CLIENT-POINTER TO CUR-POINTER.
                                                                                                                //COMMENT:     IF NOT WS9-ABEND-TYPE-NONE
                                                                                                                //COMMENT:        MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                                                                                                                //COMMENT:        MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                                                                                                                //COMMENT:        MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                                                                                                                //COMMENT:        PERFORM ADABAS-ABEND
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT: ** GQB 03/05/2014 - POPULATE CLIENT NAME KEY
            WS.ADA1_NAME_KEY.ResetToInitialValue();                                                             //COBOL==> INITIALIZE ADA1-NAME-KEY.
            WS.ADA1_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO ADA1-CLIENT-NAME.
            WS.ADA1_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO ADA1-SSN.
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.ADA1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_ADA);                                                    //COBOL==> MOVE WS9-DATE-ADA TO ADA1-DATE-OF-BIRTH.
            WS.ADA1_SEX.SetValue(WS.CL1_GENDER);                                                                //COBOL==> MOVE CL1-GENDER TO ADA1-SEX.
            WS.ADA1_CLIENT_POINTER.SetValue(WS.WS9_CLIENT_POINTER);                                             //COBOL==> MOVE WS9-CLIENT-POINTER TO ADA1-CLIENT-POINTER.
            WS.CUR_KEY.SetValue(WS.ADA1_NAME_KEY);                                                              //COBOL==> MOVE ADA1-NAME-KEY TO CUR-KEY.
            M_FILTER_DATA(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM FILTER-DATA.
            if (returnMethod != "" && returnMethod != "M_MOVE_NAME") { M_GET_PHON_1ST(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_PHON_1ST
        /// </summary>
        /// <remarks>
        ///COMMENT:  GET FIRST RECORD BY PHONETIC
        ///COMMENT: ** GQB 03/05/2014 - OPEN PHON VIEW CURSOR
        /// </remarks>
        private void M_GET_PHON_1ST(string returnMethod = "")
        {
            WS.PH_NAME_RAW_INQ.SetValue(WS.IMP_LAST_NAME);                                                      //COBOL==> MOVE IMP-LAST-NAME TO PH-NAME-RAW-INQ.
            M_PH002_0000_CONVERT_NAME("M_PH002_0000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM PH002-0000-CONVERT-NAME THRU PH002-0000-EXIT.
            if (WS.PH_ERR_NAME.IsEqualTo("1"))                                                                  //COBOL==> IF PH-ERR-NAME = '1'
            {
                LS.EXP_ADA_FILE_NBR.SetValue(149);                                                                  //COBOL==> MOVE 149 TO EXP-ADA-FILE-NBR
                LS.EXP_ADA_FILE_ACT.SetValue("CPL");                                                                //COBOL==> MOVE 'CPL' TO EXP-ADA-FILE-ACT
                LS.EXP_ADA_RESPONSE.SetValueWithZeroes();                                                           //COBOL==> MOVE ZERO TO EXP-ADA-RESPONSE
                M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
            }                                                                                                   //COBOL==> END-IF.
            WS.IMP_PHON_17.SetValue(WS.PH_NAME_17_NUMERIC);                                                     //COBOL==> MOVE PH-NAME-17-NUMERIC TO IMP-PHON-17.
            WS.PH_SAVE_REDUC_INQ.SetValue(WS.PH_NAME_REDUC_INQ);                                                //COBOL==> MOVE PH-NAME-REDUC-INQ TO PH-SAVE-REDUC-INQ.
            WS.IMP_PHON_1.SetValue(WS.IMP_FIRST_NAME);                                                          //COBOL==> MOVE IMP-FIRST-NAME TO IMP-PHON-1 IMP-PHON-3.
            WS.IMP_PHON_3.SetValue(WS.IMP_FIRST_NAME);
            //COMMENT: ** GQB 03/05/2014 - ADDED NEW CODE FOR DB2
            WS.ADA2_PHONETIC_KEY.ResetToInitialValue();                                                         //COBOL==> INITIALIZE ADA2-PHONETIC-KEY.
            if (!(WS.IMP_KEY.IsSpaces()))                                                                       //COBOL==> IF IMP-KEY NOT = SPACES
            {
                WS.ADA2_PHONETIC_KEY.SetValue(WS.IMP_KEY);                                                          //COBOL==> MOVE IMP-KEY TO ADA2-PHONETIC-KEY
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.ADA2_PHONETIC_DATA.SetValue(WS.IMP_PHON_DATA);                                                   //COBOL==> MOVE IMP-PHON-DATA TO ADA2-PHONETIC-DATA
            }                                                                                                   //COBOL==> END-IF.
            WS.DBK1_PHONETIC_DATA.SetValue(WS.ADA2_PHONETIC_DATA);                                              //COBOL==> MOVE ADA2-PHONETIC-DATA TO DBK1-PHONETIC-DATA.
            WS.DBK1_CLIENT_NAME.SetValue(WS.ADA2_CLIENT_NAME);                                                  //COBOL==> MOVE ADA2-CLIENT-NAME TO DBK1-CLIENT-NAME.
            WS.DBK1_SSN.SetValue(WS.ADA2_SSN);                                                                  //COBOL==> MOVE ADA2-SSN TO DBK1-SSN.
            WS.WS9_DATE_ADA.SetValue(WS.ADA2_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA2-DATE-OF-BIRTH TO WS9-DATE-ADA.
            M_91100_CONVERT_DATE_ADA_TO_DB2("M_91100_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2.
            WS.DBK1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                    //COBOL==> MOVE WS9-DATE-DB2 TO DBK1-DATE-OF-BIRTH.
            WS.DBK1_GENDER.SetValue(WS.ADA2_SEX);                                                               //COBOL==> MOVE ADA2-SEX TO DBK1-GENDER.
            WS.DBK1_CLIENT_NUMBER.SetValue(WS.ADA2_CLIENT_NUMBER);                                              //COBOL==> MOVE ADA2-CLIENT-NUMBER TO DBK1-CLIENT-NUMBER.
            M_2100_OPEN_PHON_VIEW("M_2100_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 2100-OPEN-PHON-VIEW.
            if (returnMethod != "" && returnMethod != "M_GET_PHON_1ST") { M_GET_PHON_NXT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_PHON_NXT
        /// </summary>
        /// <remarks>
        ///COMMENT:  READ NEXT RECORD BY PHONETIC
        ///COMMENT: ** GQB 03/05/2014 - FETCH NEXT RECORD FOR PHON VIEW
        /// </remarks>
        private void M_GET_PHON_NXT(string returnMethod = "")
        {
            if (WS.SW1_ERR_NO.Value)                                                                            //COBOL==> IF SW1-ERR-NO
            {
                M_2200_FETCH_PHON_VIEW("M_2200_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 2200-FETCH-PHON-VIEW
            }                                                                                                   //COBOL==> END-IF.
            M_READ_PHON(); if (Control.ExitProgram) { return; }                                                   //COBOL==> PERFORM READ-PHON.
            if (returnMethod != "" && returnMethod != "M_GET_PHON_NXT") { M_READ_PHON(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_READ_PHON
        /// </summary>
        /// <remarks>
        ///COMMENT:  CHECK THE PHON READ RESPONSE AND COMPARE RECORD TO START VALUE
        ///COMMENT: ** GQB 03/05/2014 - CHECK PHON VIEW RECORD
        /// </remarks>
        private void M_READ_PHON(string returnMethod = "")
        {
            if ((WS.SW1_ERR_NO.Value)
             && (WS.SW1_EOF_NO.Value))                                 //COBOL==> IF SW1-ERR-NO AND SW1-EOF-NO
            {
                WS.TMP_PHON_DATA.SetValue(WS.CL1_PHONETIC_DATA);                                                    //COBOL==> MOVE CL1-PHONETIC-DATA TO TMP-PHON-DATA
                WS.IMP_PHON_3.SetValueInspectReplacing(WS.IMP_PHON_3, "FIRST", " ", "9", "", "", "", "");          //COBOL==> INSPECT IMP-PHON-3 REPLACING FIRST SPACE BY '9'
                if (((!(WS.TMP_PHON_1.IsEqualTo(WS.IMP_PHON_1)))
             || (!(WS.TMP_PHON_17.IsEqualTo(WS.IMP_PHON_17))))
             || (WS.TMP_PHON_3.IsGreaterThan(WS.IMP_PHON_3)))  //COBOL==> IF TMP-PHON-1 NOT = IMP-PHON-1 OR TMP-PHON-17 NOT = IMP-PHON-17 OR TMP-PHON-3 > IMP-PHON-3
                {
                    WS.EXIT_PGM.SetValue(true);                                                                         //COBOL==> SET EXIT-PGM TO TRUE
                    M_2300_CLOSE_PHON_VIEW("M_2300_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 2300-CLOSE-PHON-VIEW
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_MOVE_PHON(); if (Control.ExitProgram) { return; }                                                   //COBOL==> PERFORM MOVE-PHON
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.SW1_EOF_YES.Value)                                                                           //COBOL==> IF SW1-EOF-YES
                {
                    WS.EXIT_PGM.SetValue(true);                                                                         //COBOL==> SET EXIT-PGM TO TRUE
                    M_2300_CLOSE_PHON_VIEW("M_2300_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 2300-CLOSE-PHON-VIEW
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        M_2300_CLOSE_PHON_VIEW("M_2300_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 2300-CLOSE-PHON-VIEW
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_READ_PHON") { M_MOVE_PHON(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MOVE_PHON
        /// </summary>
        /// <remarks>
        ///COMMENT:  MOVE PHONETIC READ TO COMMON VARIABLES
        ///COMMENT: ** GQB 03/05/2014 - MOVE PHON VIEW DATA TO WS
        /// </remarks>
        private void M_MOVE_PHON(string returnMethod = "")
        {
            WS.CUR_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                           //COBOL==> MOVE CL1-CLIENT-NAME TO CUR-NAME.
            WS.CUR_SSN.SetValue(WS.CL1_SSN);                                                                    //COBOL==> MOVE CL1-SSN TO CUR-SSN.
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.CUR_DOB.SetValue(WS.WS9_DATE_ADA);                                                               //COBOL==> MOVE WS9-DATE-ADA TO CUR-DOB.
            WS.CUR_SEX.SetValue(WS.CL1_GENDER);                                                                 //COBOL==> MOVE CL1-GENDER TO CUR-SEX.
                                                                                                                //COMMENT: ** GQB 07/24/2014 - CODE FOR CLIENT POINTER INFORMATION
                                                                                                                //COMMENT: **                  SWCSZG87 AND SWCSZG88 MUST BE INCLUDED
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                            //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO DBK9-CLIENT-NUMBER.
            WS.DBK9_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                          //COBOL==> MOVE CUR-NAME TO DBK9-CLIENT-NAME.
            WS.DBK9_SSN.SetValue(WS.CUR_SSN);                                                                   //COBOL==> MOVE CUR-SSN TO DBK9-SSN.
            WS.WS9_CLIENT_POINTER.ResetToInitialValue();                                                        //COBOL==> INITIALIZE WS9-CLIENT-POINTER.
            WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL1_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL1-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG.
            WS.SW9_SELECT_CLIENT_NO.SetValue(true);                                                             //COBOL==> SET SW9-SELECT-CLIENT-NO TO TRUE.
            M_99000_CLIENT_POINTER_ROUTINE("M_99000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 99000-CLIENT-POINTER-ROUTINE.
                                                                                                                  //COMMENT: ** GQB 07/25/2014 - IGNORE ERRORS AND PASS CLIENT POINTER
                                                                                                                  //COMMENT: **                  TO ENABLE CONTINUATION OF THE PROCESS
            WS.CUR_POINTER.SetValue(WS.WS9_CLIENT_POINTER);                                                     //COBOL==> MOVE WS9-CLIENT-POINTER TO CUR-POINTER.
                                                                                                                //COMMENT:     IF NOT WS9-ABEND-TYPE-NONE
                                                                                                                //COMMENT:        MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                                                                                                                //COMMENT:        MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                                                                                                                //COMMENT:        MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                                                                                                                //COMMENT:        PERFORM ADABAS-ABEND
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT: ** GQB 03/05/2014 - POPULATE CLIENT PHONETIC KEY
            WS.ADA2_PHONETIC_KEY.ResetToInitialValue();                                                         //COBOL==> INITIALIZE ADA2-PHONETIC-KEY.
            WS.ADA2_PHONETIC_DATA.SetValue(WS.CL1_PHONETIC_DATA);                                               //COBOL==> MOVE CL1-PHONETIC-DATA TO ADA2-PHONETIC-DATA.
            WS.ADA2_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO ADA2-CLIENT-NAME.
            WS.ADA2_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO ADA2-SSN.
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.ADA2_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_ADA);                                                    //COBOL==> MOVE WS9-DATE-ADA TO ADA2-DATE-OF-BIRTH.
            WS.ADA2_SEX.SetValue(WS.CL1_GENDER);                                                                //COBOL==> MOVE CL1-GENDER TO ADA2-SEX.
            WS.ADA2_CLIENT_POINTER.SetValue(WS.WS9_CLIENT_POINTER);                                             //COBOL==> MOVE WS9-CLIENT-POINTER TO ADA2-CLIENT-POINTER.
            WS.CUR_KEY.SetValue(WS.ADA2_PHONETIC_KEY);                                                          //COBOL==> MOVE ADA2-PHONETIC-KEY TO CUR-KEY.
            WS.TMP_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                           //COBOL==> MOVE CL1-CLIENT-NAME TO TMP-NAME.
            WS.PH_NAME_RAW_MSTR.SetValue(WS.TMP_LAST_NAME);                                                     //COBOL==> MOVE TMP-LAST-NAME TO PH-NAME-RAW-MSTR.
            M_PH004_0000_LIKENESS("M_PH004_0000_EXIT"); if (Control.ExitProgram) { return; }                      //COBOL==> PERFORM PH004-0000-LIKENESS THRU PH004-0000-EXIT.
            if (WS.PH_DEGREE.IsGreaterThanOrEqualTo(WS.IMP_PERCENT_9V99))                                       //COBOL==> IF PH-DEGREE >= IMP-PERCENT-9V99
            {
                M_FILTER_DATA(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM FILTER-DATA
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_MOVE_PHON") { M_GET_SSN_1ST(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_SSN_1ST
        /// </summary>
        /// <remarks>
        ///COMMENT:  GET FIRST RECORD BY SSN
        ///COMMENT: ** GQB 03/05/2014 - OPEN CURSOR FOR SSN VIEW
        /// </remarks>
        private void M_GET_SSN_1ST(string returnMethod = "")
        {
            WS.ADA3_SSN_KEY.ResetToInitialValue();                                                              //COBOL==> INITIALIZE ADA3-SSN-KEY.
            if (!(WS.IMP_KEY.IsSpaces()))                                                                       //COBOL==> IF IMP-KEY NOT = SPACES
            {
                WS.ADA3_SSN_KEY.SetValue(WS.IMP_KEY);                                                               //COBOL==> MOVE IMP-KEY TO ADA3-SSN-KEY
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.ADA3_SSN.SetValue(WS.IMP_SSN);                                                                   //COBOL==> MOVE IMP-SSN TO ADA3-SSN
            }                                                                                                   //COBOL==> END-IF.
            WS.DBK1_SSN.SetValue(WS.ADA3_SSN);                                                                  //COBOL==> MOVE ADA3-SSN TO DBK1-SSN.
            WS.DBK1_CLIENT_NAME.SetValue(WS.ADA3_CLIENT_NAME);                                                  //COBOL==> MOVE ADA3-CLIENT-NAME TO DBK1-CLIENT-NAME.
            WS.WS9_DATE_ADA.SetValue(WS.ADA3_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA3-DATE-OF-BIRTH TO WS9-DATE-ADA.
            M_91100_CONVERT_DATE_ADA_TO_DB2("M_91100_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2.
            WS.DBK1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                    //COBOL==> MOVE WS9-DATE-DB2 TO DBK1-DATE-OF-BIRTH.
            WS.DBK1_GENDER.SetValue(WS.ADA3_SEX);                                                               //COBOL==> MOVE ADA3-SEX TO DBK1-GENDER.
            WS.DBK1_CLIENT_NUMBER.SetValue(WS.ADA3_CLIENT_NUMBER);                                              //COBOL==> MOVE ADA3-CLIENT-NUMBER TO DBK1-CLIENT-NUMBER.
            M_3100_OPEN_SSN_VIEW("M_3100_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 3100-OPEN-SSN-VIEW.
            if (returnMethod != "" && returnMethod != "M_GET_SSN_1ST") { M_GET_SSN_NXT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_SSN_NXT
        /// </summary>
        /// <remarks>
        ///COMMENT:  READ NEXT RECORD BY SSN
        ///COMMENT: ** GQB 03/05/2014 - FETCH NEXT RECORD FOR SSN VIEW
        /// </remarks>
        private void M_GET_SSN_NXT(string returnMethod = "")
        {
            if (WS.SW1_ERR_NO.Value)                                                                            //COBOL==> IF SW1-ERR-NO
            {
                M_3200_FETCH_SSN_VIEW("M_3200_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 3200-FETCH-SSN-VIEW
            }                                                                                                   //COBOL==> END-IF.
            M_READ_SSN(); if (Control.ExitProgram) { return; }                                                    //COBOL==> PERFORM READ-SSN.
            if (returnMethod != "" && returnMethod != "M_GET_SSN_NXT") { M_READ_SSN(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_READ_SSN
        /// </summary>
        /// <remarks>
        ///COMMENT:  CHECK THE SSN READ RESPONSE AND COMPARE RECORD TO START VALUE
        ///COMMENT: ** GQB 03/05/2014 - CHECK RECORD FOR SSN VIEW
        /// </remarks>
        private void M_READ_SSN(string returnMethod = "")
        {
            if ((WS.SW1_ERR_NO.Value)
             && (WS.SW1_EOF_NO.Value))                                 //COBOL==> IF SW1-ERR-NO AND SW1-EOF-NO
            {
                if (WS.CL1_SSN.IsGreaterThan(WS.IMP_SSN))                                                           //COBOL==> IF CL1-SSN > IMP-SSN
                {
                    WS.EXIT_PGM.SetValue(true);                                                                         //COBOL==> SET EXIT-PGM TO TRUE
                    M_3300_CLOSE_SSN_VIEW("M_3300_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 3300-CLOSE-SSN-VIEW
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_MOVE_SSN(); if (Control.ExitProgram) { return; }                                                    //COBOL==> PERFORM MOVE-SSN
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.SW1_EOF_YES.Value)                                                                           //COBOL==> IF SW1-EOF-YES
                {
                    WS.EXIT_PGM.SetValue(true);                                                                         //COBOL==> SET EXIT-PGM TO TRUE
                    M_3300_CLOSE_SSN_VIEW("M_3300_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 3300-CLOSE-SSN-VIEW
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        M_3300_CLOSE_SSN_VIEW("M_3300_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 3300-CLOSE-SSN-VIEW
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_READ_SSN") { M_MOVE_SSN(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MOVE_SSN
        /// </summary>
        /// <remarks>
        ///COMMENT:  MOVE SSN READ TO COMMON VARIABLES
        ///COMMENT: ** GQB 03/05/2014 - MOVE SSN VIEW DATA TO WS
        /// </remarks>
        private void M_MOVE_SSN(string returnMethod = "")
        {
            WS.CUR_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                           //COBOL==> MOVE CL1-CLIENT-NAME TO CUR-NAME.
            WS.CUR_SSN.SetValue(WS.CL1_SSN);                                                                    //COBOL==> MOVE CL1-SSN TO CUR-SSN.
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.CUR_DOB.SetValue(WS.WS9_DATE_ADA);                                                               //COBOL==> MOVE WS9-DATE-ADA TO CUR-DOB.
            WS.CUR_SEX.SetValue(WS.CL1_GENDER);                                                                 //COBOL==> MOVE CL1-GENDER TO CUR-SEX.
                                                                                                                //COMMENT: ** GQB 07/24/2014 - CODE FOR CLIENT POINTER INFORMATION
                                                                                                                //COMMENT: **                  SWCSZG87 AND SWCSZG88 MUST BE INCLUDED
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                            //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO DBK9-CLIENT-NUMBER.
            WS.DBK9_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                          //COBOL==> MOVE CUR-NAME TO DBK9-CLIENT-NAME.
            WS.DBK9_SSN.SetValue(WS.CUR_SSN);                                                                   //COBOL==> MOVE CUR-SSN TO DBK9-SSN.
            WS.WS9_CLIENT_POINTER.ResetToInitialValue();                                                        //COBOL==> INITIALIZE WS9-CLIENT-POINTER.
            WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL1_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL1-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG.
            WS.SW9_SELECT_CLIENT_NO.SetValue(true);                                                             //COBOL==> SET SW9-SELECT-CLIENT-NO TO TRUE.
            M_99000_CLIENT_POINTER_ROUTINE("M_99000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 99000-CLIENT-POINTER-ROUTINE.
                                                                                                                  //COMMENT: ** GQB 07/25/2014 - IGNORE ERRORS AND PASS CLIENT POINTER
                                                                                                                  //COMMENT: **                  TO ENABLE CONTINUATION OF THE PROCESS
            WS.CUR_POINTER.SetValue(WS.WS9_CLIENT_POINTER);                                                     //COBOL==> MOVE WS9-CLIENT-POINTER TO CUR-POINTER.
                                                                                                                //COMMENT:     IF NOT WS9-ABEND-TYPE-NONE
                                                                                                                //COMMENT:        MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                                                                                                                //COMMENT:        MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                                                                                                                //COMMENT:        MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                                                                                                                //COMMENT:        PERFORM ADABAS-ABEND
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT: ** GQB 03/05/2014 - POPULATE CLIENT SSN KEY
            WS.ADA3_SSN_KEY.ResetToInitialValue();                                                              //COBOL==> INITIALIZE ADA3-SSN-KEY.
            WS.ADA3_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO ADA3-SSN.
            WS.ADA3_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO ADA3-CLIENT-NAME.
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.ADA3_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_ADA);                                                    //COBOL==> MOVE WS9-DATE-ADA TO ADA3-DATE-OF-BIRTH.
            WS.ADA3_SEX.SetValue(WS.CL1_GENDER);                                                                //COBOL==> MOVE CL1-GENDER TO ADA3-SEX.
            WS.ADA3_CLIENT_POINTER.SetValue(WS.WS9_CLIENT_POINTER);                                             //COBOL==> MOVE WS9-CLIENT-POINTER TO ADA3-CLIENT-POINTER.
            WS.CUR_KEY.SetValue(WS.ADA3_SSN_KEY);                                                               //COBOL==> MOVE ADA3-SSN-KEY TO CUR-KEY.
            M_FILTER_DATA(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM FILTER-DATA.
            if (returnMethod != "" && returnMethod != "M_MOVE_SSN") { M_GET_ID_1ST(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_ID_1ST
        /// </summary>
        /// <remarks>
        ///COMMENT:  GET FIRST RECORD BY ID
        ///COMMENT: ** GQB 03/05/2014 - OPEN CURSOR FOR ID VIEW
        /// </remarks>
        private void M_GET_ID_1ST(string returnMethod = "")
        {
            WS.ADA4_ID_KEY.ResetToInitialValue();                                                               //COBOL==> INITIALIZE ADA4-ID-KEY.
            if (!(WS.IMP_KEY.IsSpaces()))                                                                       //COBOL==> IF IMP-KEY NOT = SPACES
            {
                WS.ADA4_ID_KEY.SetValue(WS.IMP_KEY);                                                                //COBOL==> MOVE IMP-KEY TO ADA4-ID-KEY
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.ADA4_CLIENT_NUMBER.SetValue(WS.IMP_ID);                                                          //COBOL==> MOVE IMP-ID TO ADA4-CLIENT-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            WS.DBK1_CLIENT_NUMBER.SetValue(WS.ADA4_CLIENT_NUMBER);                                              //COBOL==> MOVE ADA4-CLIENT-NUMBER TO DBK1-CLIENT-NUMBER.
            WS.DBK1_CLIENT_NAME.SetValue(WS.ADA4_CLIENT_NAME);                                                  //COBOL==> MOVE ADA4-CLIENT-NAME TO DBK1-CLIENT-NAME.
            WS.DBK1_SSN.SetValue(WS.ADA4_SSN);                                                                  //COBOL==> MOVE ADA4-SSN TO DBK1-SSN.
            WS.WS9_DATE_ADA.SetValue(WS.ADA4_DATE_OF_BIRTH);                                                    //COBOL==> MOVE ADA4-DATE-OF-BIRTH TO WS9-DATE-ADA.
            M_91100_CONVERT_DATE_ADA_TO_DB2("M_91100_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91100-CONVERT-DATE-ADA-TO-DB2.
            WS.DBK1_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_DB2);                                                    //COBOL==> MOVE WS9-DATE-DB2 TO DBK1-DATE-OF-BIRTH.
            WS.DBK1_GENDER.SetValue(WS.ADA4_SEX);                                                               //COBOL==> MOVE ADA4-SEX TO DBK1-GENDER.
            M_4100_OPEN_ID_VIEW("M_4100_EXIT"); if (Control.ExitProgram) { return; }                              //COBOL==> PERFORM 4100-OPEN-ID-VIEW.
            if (returnMethod != "" && returnMethod != "M_GET_ID_1ST") { M_GET_ID_NXT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_ID_NXT
        /// </summary>
        /// <remarks>
        ///COMMENT:  READ NEXT RECORD BY ID
        ///COMMENT: ** GQB 03/05/2014 - FETCH NEXT RECORD FOR ID VIEW
        /// </remarks>
        private void M_GET_ID_NXT(string returnMethod = "")
        {
            if (WS.SW1_ERR_NO.Value)                                                                            //COBOL==> IF SW1-ERR-NO
            {
                M_4200_FETCH_ID_VIEW("M_4200_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 4200-FETCH-ID-VIEW
            }                                                                                                   //COBOL==> END-IF.
            M_READ_ID(); if (Control.ExitProgram) { return; }                                                     //COBOL==> PERFORM READ-ID.
            if (returnMethod != "" && returnMethod != "M_GET_ID_NXT") { M_READ_ID(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_READ_ID
        /// </summary>
        /// <remarks>
        ///COMMENT:  CHECK THE ID READ RESPONSE AND COMPARE RECORD TO START VALUE
        ///COMMENT: ** GQB 03/05/2014 - CHECK DATA FOR ID VIEW
        /// </remarks>
        private void M_READ_ID(string returnMethod = "")
        {
            if ((WS.SW1_ERR_NO.Value)
             && (WS.SW1_EOF_NO.Value))                                 //COBOL==> IF SW1-ERR-NO AND SW1-EOF-NO
            {
                if (WS.CL1_FK_CLB_CLIENT_NO.IsGreaterThan(WS.IMP_ID))                                               //COBOL==> IF CL1-FK-CLB-CLIENT-NO > IMP-ID
                {
                    WS.EXIT_PGM.SetValue(true);                                                                         //COBOL==> SET EXIT-PGM TO TRUE
                    M_4300_CLOSE_ID_VIEW("M_4300_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 4300-CLOSE-ID-VIEW
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_MOVE_ID(); if (Control.ExitProgram) { return; }                                                     //COBOL==> PERFORM MOVE-ID
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.SW1_EOF_YES.Value)                                                                           //COBOL==> IF SW1-EOF-YES
                {
                    WS.EXIT_PGM.SetValue(true);                                                                         //COBOL==> SET EXIT-PGM TO TRUE
                    M_4300_CLOSE_ID_VIEW("M_4300_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 4300-CLOSE-ID-VIEW
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
                    {
                        M_4300_CLOSE_ID_VIEW("M_4300_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM 4300-CLOSE-ID-VIEW
                        LS.EXP_ADA_FILE_NBR.SetValue(WS.WS9_ADA_FILE_NUMBER);                                               //COBOL==> MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                        LS.EXP_ADA_FILE_ACT.SetValue(WS.WS9_ADA_FILE_ACTION);                                               //COBOL==> MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                        LS.EXP_ADA_RESPONSE.SetValue(WS.WS9_ADA_RESPONSE_CD);                                               //COBOL==> MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                        M_ADABAS_ABEND(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM ADABAS-ABEND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_READ_ID") { M_MOVE_ID(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MOVE_ID
        /// </summary>
        /// <remarks>
        ///COMMENT:  MOVE ID READ TO COMMON VARIABLES
        ///COMMENT: ** GQB 03/05/2014 - MOVE ID VIEW DATA TO WS
        /// </remarks>
        private void M_MOVE_ID(string returnMethod = "")
        {
            WS.CUR_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                           //COBOL==> MOVE CL1-CLIENT-NAME TO CUR-NAME.
            WS.CUR_SSN.SetValue(WS.CL1_SSN);                                                                    //COBOL==> MOVE CL1-SSN TO CUR-SSN.
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.CUR_DOB.SetValue(WS.WS9_DATE_ADA);                                                               //COBOL==> MOVE WS9-DATE-ADA TO CUR-DOB.
            WS.CUR_SEX.SetValue(WS.CL1_GENDER);                                                                 //COBOL==> MOVE CL1-GENDER TO CUR-SEX.
                                                                                                                //COMMENT: ** GQB 07/24/2014 - CODE FOR CLIENT POINTER INFORMATION
                                                                                                                //COMMENT: **                  SWCSZG87 AND SWCSZG88 MUST BE INCLUDED
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                            //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO DBK9-CLIENT-NUMBER.
            WS.DBK9_CLIENT_NAME.SetValue(WS.CUR_NAME);                                                          //COBOL==> MOVE CUR-NAME TO DBK9-CLIENT-NAME.
            WS.DBK9_SSN.SetValue(WS.CUR_SSN);                                                                   //COBOL==> MOVE CUR-SSN TO DBK9-SSN.
            WS.WS9_CLIENT_POINTER.ResetToInitialValue();                                                        //COBOL==> INITIALIZE WS9-CLIENT-POINTER.
            WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL1_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL1-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG.
            WS.SW9_SELECT_CLIENT_NO.SetValue(true);                                                             //COBOL==> SET SW9-SELECT-CLIENT-NO TO TRUE.
            M_99000_CLIENT_POINTER_ROUTINE("M_99000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM 99000-CLIENT-POINTER-ROUTINE.
                                                                                                                  //COMMENT: ** GQB 07/25/2014 - IGNORE ERRORS AND PASS CLIENT POINTER
                                                                                                                  //COMMENT: **                  TO ENABLE CONTINUATION OF THE PROCESS
            WS.CUR_POINTER.SetValue(WS.WS9_CLIENT_POINTER);                                                     //COBOL==> MOVE WS9-CLIENT-POINTER TO CUR-POINTER.
                                                                                                                //COMMENT:     IF NOT WS9-ABEND-TYPE-NONE
                                                                                                                //COMMENT:        MOVE WS9-ADA-FILE-NUMBER TO EXP-ADA-FILE-NBR
                                                                                                                //COMMENT:        MOVE WS9-ADA-FILE-ACTION TO EXP-ADA-FILE-ACT
                                                                                                                //COMMENT:        MOVE WS9-ADA-RESPONSE-CD TO EXP-ADA-RESPONSE
                                                                                                                //COMMENT:        PERFORM ADABAS-ABEND
                                                                                                                //COMMENT:     END-IF.
                                                                                                                //COMMENT: ** GQB 03/05/2014 - POPULATE CLIENT ID KEY
            WS.ADA4_ID_KEY.ResetToInitialValue();                                                               //COBOL==> INITIALIZE ADA4-ID-KEY.
            WS.ADA4_CLIENT_NUMBER.SetValue(WS.CL1_FK_CLB_CLIENT_NO);                                            //COBOL==> MOVE CL1-FK-CLB-CLIENT-NO TO ADA4-CLIENT-NUMBER.
            WS.ADA4_CLIENT_NAME.SetValue(WS.CL1_CLIENT_NAME);                                                   //COBOL==> MOVE CL1-CLIENT-NAME TO ADA4-CLIENT-NAME.
            WS.ADA4_SSN.SetValue(WS.CL1_SSN);                                                                   //COBOL==> MOVE CL1-SSN TO ADA4-SSN.
            WS.WS9_DATE_DB2.SetValue(WS.CL1_DATE_OF_BIRTH);                                                     //COBOL==> MOVE CL1-DATE-OF-BIRTH TO WS9-DATE-DB2.
            M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA.
            WS.ADA4_DATE_OF_BIRTH.SetValue(WS.WS9_DATE_ADA);                                                    //COBOL==> MOVE WS9-DATE-ADA TO ADA4-DATE-OF-BIRTH.
            WS.ADA4_SEX.SetValue(WS.CL1_GENDER);                                                                //COBOL==> MOVE CL1-GENDER TO ADA4-SEX.
            WS.ADA4_CLIENT_POINTER21.SetValue(WS.WS9_CLIENT_POINTER.GetSubstring(11));                          //COBOL==> MOVE WS9-CLIENT-POINTER ( 11: ) TO ADA4-CLIENT-POINTER21.
            WS.CUR_KEY.SetValue(WS.ADA4_ID_KEY);                                                                //COBOL==> MOVE ADA4-ID-KEY TO CUR-KEY.
            M_FILTER_DATA(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM FILTER-DATA.
            if (returnMethod != "" && returnMethod != "M_MOVE_ID") { M_FILTER_DATA(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FILTER_DATA
        /// </summary>
        /// <remarks>
        ///COMMENT:  ASSIGN DATA TO THE EXPORT ARRAY TO BE DISPLAYED ON SCREEN
        /// </remarks>
        private void M_FILTER_DATA(string returnMethod = "")
        {
            for (WS.I2.SetValue(1); (!(WS.I2.IsGreaterThan(WS.MAX_OFC))); WS.I2.Add(1))                        //COBOL==> PERFORM VARYING I2 FROM 1 BY 1 UNTIL I2 > MAX-OFC
            {
                WS.CUR_OFC[WS.I2.AsInt()].ResetToInitialValue();                                                    //COBOL==> INITIALIZE CUR-OFC ( I2 )
            }                                                                                                   //COBOL==> END-PERFORM
            if (WS.CUR_CSE.IsGreaterThan(SPACES))                                                               //COBOL==> IF CUR-CSE > SPACES
            {
                M_OPEN_OFFICE(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM OPEN-OFFICE
                while (!(WS.STOP_READ.IsEqualTo("Y")))                                                              //COBOL==> PERFORM READ-OFFICE UNTIL STOP-READ = 'Y'
                {
                    M_READ_OFFICE(); if (Control.ExitProgram) { return; }
                }
                M_CLOSE_OFFICE(); if (Control.ExitProgram) { return; }                                                //COBOL==> PERFORM CLOSE-OFFICE
                WS.OFC_FND.SetValue("N");                                                                           //COBOL==> MOVE 'N' TO OFC-FND
                for (WS.I3.SetValue(1); (!((WS.I3.IsGreaterThan(WS.MAX_OFC)) || (WS.OFC_FND.IsEqualTo("Y")))); WS.I3.Add(1))  //COBOL==> PERFORM VARYING I3 FROM 1 BY 1 UNTIL I3 > MAX-OFC OR OFC-FND = 'Y'
                {
                    if (WS.IMP_OFC.IsEqualTo(WS.CUR_OFC[WS.I3.AsInt()]))                                                //COBOL==> IF IMP-OFC = CUR-OFC ( I3 )
                    {
                        WS.OFC_FND.SetValue("Y");                                                                           //COBOL==> MOVE 'Y' TO OFC-FND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-PERFORM
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.OFC_FND.SetValue("N");                                                                           //COBOL==> MOVE 'N' TO OFC-FND
            }                                                                                                   //COBOL==> END-IF
            if ((((((((WS.IMP_INIT.IsSpaces())
             || (WS.IMP_INIT.IsEqualTo(WS.CUR_INIT)))
             || (!(WS.IMP_EXACT.Value)))
             && (((WS.IMP_DOB.IsSpaces())
             || (WS.IMP_DOB.IsEqualTo(WS.CUR_DOB)))
             || (!(WS.IMP_EXACT.Value))))
             && ((WS.IMP_SEX.IsSpaces())
             || (WS.IMP_SEX.IsEqualTo(WS.CUR_SEX))))
             && ((WS.IMP_OFC.IsZeros())
             || (WS.OFC_FND.IsEqualTo("Y"))))
             && (WS.IMP_SEARCH_NAME.Value))
             || (!(WS.IMP_SEARCH_NAME.Value)))  //COBOL==> IF ( ( IMP-INIT = SPACE OR IMP-INIT = CUR-INIT OR NOT IMP-EXACT ) AND ( IMP-DOB = SPACE OR IMP-DOB = CUR-DOB OR NOT IMP-EXACT ) AND ( IMP-SEX = SPACE OR IMP-SEX = CUR-SEX ) AND ( IMP-OFC = ZERO OR OFC-FND = 'Y' ) AND IMP-SEARCH-NAME ) OR NOT IMP-SEARCH-NAME
            {
                WS.I1.Add(1);                                                                                       //COBOL==> ADD 1 TO I1
                if (WS.I1.IsGreaterThan(WS.MAX_NAME))                                                               //COBOL==> IF I1 > MAX-NAME
                {
                    LS.EXP_UNIQUE_KEY.SetValue(WS.CUR_KEY);                                                             //COBOL==> MOVE CUR-KEY TO EXP-UNIQUE-KEY
                    WS.EXIT_PGM.SetValue(true);                                                                         //COBOL==> SET EXIT-PGM TO TRUE
                }                                                                                                   //COBOL==> END-IF
                if (WS.I1.IsLessThanOrEqualTo(WS.MAX_NAME))                                                         //COBOL==> IF I1 <= MAX-NAME
                {
                    M_SET_ALIAS_IND(); if (Control.ExitProgram) { return; }                                               //COBOL==> PERFORM SET-ALIAS-IND
                    LS.NUMBER_0008[WS.I1.AsInt()].SetValue(WS.CUR_CLIENT_ID);                                           //COBOL==> MOVE CUR-CLIENT-ID TO NUMBER-0008 ( I1 )
                    LS.LAST_NAME_0008[WS.I1.AsInt()].SetValue(WS.CUR_LAST_NAME);                                        //COBOL==> MOVE CUR-LAST-NAME TO LAST-NAME-0008 ( I1 )
                    LS.FIRST_NAME_0008[WS.I1.AsInt()].SetValue(WS.CUR_FIRST_NAME);                                      //COBOL==> MOVE CUR-FIRST-NAME TO FIRST-NAME-0008 ( I1 )
                    LS.INITIAL_0008[WS.I1.AsInt()].SetValue(WS.CUR_INIT);                                               //COBOL==> MOVE CUR-INIT TO INITIAL-0008 ( I1 )
                    M_FORMAT_NAME(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM FORMAT-NAME
                    LS.FORMAT_NAME_0008[WS.I1.AsInt()].SetValue(WS.FMT_NAME);                                           //COBOL==> MOVE FMT-NAME TO FORMAT-NAME-0008 ( I1 )
                    LS.REPL_IND_0008[WS.I1.AsInt()].SetValue(WS.CUR_REPL_IND);                                          //COBOL==> MOVE CUR-REPL-IND TO REPL-IND-0008 ( I1 )
                    LS.DOB_0008[WS.I1.AsInt()].SetValue("00000000");                                                    //COBOL==> MOVE '00000000' TO DOB-0008 ( I1 )
                    if ((WS.CUR_DOB.IsNumericValue())
             && (WS.CUR_DOB.IsGreaterThan("00010101")))        //COBOL==> IF CUR-DOB NUMERIC AND CUR-DOB > '00010101'
                    {
                        LS.DOB_0008[WS.I1.AsInt()].SetValue(WS.CUR_DOB);                                                    //COBOL==> MOVE CUR-DOB TO DOB-0008 ( I1 )
                    }                                                                                                   //COBOL==> END-IF
                    LS.SEX_0008[WS.I1.AsInt()].SetValue(WS.CUR_SEX);                                                    //COBOL==> MOVE CUR-SEX TO SEX-0008 ( I1 )
                    LS.SSN_0008[WS.I1.AsInt()].SetValue(WS.CUR_SSN);                                                    //COBOL==> MOVE CUR-SSN TO SSN-0008 ( I1 )
                    LS.EXP_AE[WS.I1.AsInt()].SetValue(WS.CUR_AE);                                                       //COBOL==> MOVE CUR-AE TO EXP-AE ( I1 )
                    LS.EXP_CSE[WS.I1.AsInt()].SetValue(WS.CUR_CSE);                                                     //COBOL==> MOVE CUR-CSE TO EXP-CSE ( I1 )
                    LS.EXP_KANPAY[WS.I1.AsInt()].SetValue(WS.CUR_KANPAY);                                               //COBOL==> MOVE CUR-KANPAY TO EXP-KANPAY ( I1 )
                    LS.EXP_KSCARES[WS.I1.AsInt()].SetValue(WS.CUR_KSCARES);                                             //COBOL==> MOVE CUR-KSCARES TO EXP-KSCARES ( I1 )
                    LS.FLAG_ALIAS[WS.I1.AsInt()].SetValue(WS.CUR_ALIAS_IND);                                            //COBOL==> MOVE CUR-ALIAS-IND TO FLAG-ALIAS ( I1 )
                    LS.EXP_FACTS[WS.I1.AsInt()].SetValue(WS.CUR_FACTS);                                                 //COBOL==> MOVE CUR-FACTS TO EXP-FACTS ( I1 )
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF .
            if (returnMethod != "" && returnMethod != "M_FILTER_DATA") { M_GET_BASIC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_BASIC
        /// </summary>
        /// <remarks>
        ///COMMENT:  READ THE CLIENT BASIC RECORD
        ///COMMENT: ** GQB 03/05/2014 - READ CLIENT BASIC TABLE
        /// </remarks>
        private void M_GET_BASIC(string returnMethod = "")
        {
            WS.DBK9_CLIENT_NUMBER.SetValue(WS.CUR_CLIENT_ID);                                                   //COBOL==> MOVE CUR-CLIENT-ID TO DBK9-CLIENT-NUMBER.
            M_98000_SELECT_CLIENT_BASIC("M_98000_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM 98000-SELECT-CLIENT-BASIC.
            if (!(WS.WS9_ABEND_TYPE_NONE.Value))                                                               //COBOL==> IF NOT WS9-ABEND-TYPE-NONE
            {
                WS.CLB9_CLIENT_NUMBER.SetValue("9999999999");                                                       //COBOL==> MOVE '9999999999' TO CLB9-CLIENT-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_GET_BASIC") { M_SET_ALIAS_IND(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SET_ALIAS_IND
        /// </summary>
        /// <remarks>
        ///COMMENT:  SET THE ALIAS INDICATOR
        ///COMMENT: ** GQB 03/05/2014 - ADDED NEW CODE FOR DB2
        /// </remarks>
        private void M_SET_ALIAS_IND(string returnMethod = "")
        {
            M_GET_BASIC(); if (Control.ExitProgram) { return; }                                                   //COBOL==> PERFORM GET-BASIC.
            if (WS.CLB9_CLIENT_NUMBER.IsEqualTo(WS.CUR_CLIENT_ID))                                              //COBOL==> IF CLB9-CLIENT-NUMBER = CUR-CLIENT-ID
            {
                WS.WS9_DATE_DB2.SetValue(WS.CLB9_DATE_OF_BIRTH);                                                    //COBOL==> MOVE CLB9-DATE-OF-BIRTH TO WS9-DATE-DB2
                M_91200_CONVERT_DATE_DB2_TO_ADA("M_91200_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM 91200-CONVERT-DATE-DB2-TO-ADA
                WS.CUR_REPL_IND.SetValue(WS.CLB9_CIS_REPL_IND);                                                     //COBOL==> MOVE CLB9-CIS-REPL-IND TO CUR-REPL-IND
                if ((((((WS.CLB9_CLIENT_SURNAME.IsEqualTo(WS.CUR_LAST_NAME))
             && (WS.CLB9_CLIENT_GIVEN_NAME.IsEqualTo(WS.CUR_FIRST_NAME)))
             && (WS.CLB9_CLIENT_INITIALS.IsEqualTo(WS.CUR_INIT)))
             && (WS.WS9_DATE_ADA.IsEqualTo(WS.CUR_DOB)))
             && (WS.CLB9_SSN.IsEqualTo(WS.CUR_SSN)))
             && (WS.CLB9_GENDER.IsEqualTo(WS.CUR_SEX)))  //COBOL==> IF CLB9-CLIENT-SURNAME = CUR-LAST-NAME AND CLB9-CLIENT-GIVEN-NAME = CUR-FIRST-NAME AND CLB9-CLIENT-INITIALS = CUR-INIT AND WS9-DATE-ADA = CUR-DOB AND CLB9-SSN = CUR-SSN AND CLB9-GENDER = CUR-SEX
                {
                    WS.CUR_ALIAS_IND.SetValue(" ");                                                                     //COBOL==> MOVE ' ' TO CUR-ALIAS-IND
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.CUR_ALIAS_IND.SetValue("Y");                                                                     //COBOL==> MOVE 'Y' TO CUR-ALIAS-IND
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.CUR_ALIAS_IND.SetValue("E");                                                                     //COBOL==> MOVE 'E' TO CUR-ALIAS-IND
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_SET_ALIAS_IND") { M_FORMAT_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_NAME
        /// </summary>
        /// <remarks>
        ///COMMENT:  FORMAT NAME AS LAST, FIRST.  APPEND OFFICE ID TO END.
        /// </remarks>
        private void M_FORMAT_NAME(string returnMethod = "")
        {
            WS.FMT_NAME.ResetToInitialValue();                                                                  //COBOL==> INITIALIZE FMT-NAME
            WS.WRK_LAST_NAME.SetValue(WS.CUR_LAST_NAME);                                                        //COBOL==> MOVE CUR-LAST-NAME TO WRK-LAST-NAME
            WS.WRK_FIRST_NAME.SetValue(WS.CUR_FIRST_NAME);                                                      //COBOL==> MOVE CUR-FIRST-NAME TO WRK-FIRST-NAME
            WS.FMT_NAME.SetValue(StringUtils.Stringify(StringUtils.DelimitedByString("  ", WS.WRK_LAST_NAME.AsString()), StringUtils.DelimitedBySize(", "), StringUtils.DelimitedByString("  ", WS.WRK_FIRST_NAME.AsString()), StringUtils.DelimitedBySize(" "), StringUtils.DelimitedBySize(WS.CUR_INIT.AsString())));  //COBOL==> STRING WRK-LAST-NAME DELIMITED BY '  ' ', ' DELIMITED BY SIZE WRK-FIRST-NAME DELIMITED BY '  ' ' ' DELIMITED BY SIZE CUR-INIT DELIMITED BY SIZE INTO FMT-NAME
            WS.TMP_OFC.ResetToInitialValue();                                                                   //COBOL==> INITIALIZE TMP-OFC
            if (WS.CUR_OFC[1].IsGreaterThan(ZEROS))                                                             //COBOL==> IF CUR-OFC ( 1 ) > ZERO
            {
                for (WS.I2.SetValue(1); (!((WS.I2.IsGreaterThan(WS.TOT_OFC)) || (WS.TMP_OFC.IsEqualTo("*")))); WS.I2.Add(1))  //COBOL==> PERFORM VARYING I2 FROM 1 BY 1 UNTIL I2 > TOT-OFC OR TMP-OFC = '*'
                {
                    M_JUSTIFY_OFFICE(); if (Control.ExitProgram) { return; }                                              //COBOL==> PERFORM JUSTIFY-OFFICE
                    WS.NAME_LEN.ResetToInitialValue();                                                                  //COBOL==> INITIALIZE NAME-LEN OFC-LEN
                    WS.OFC_LEN.ResetToInitialValue();
                    WS.NAME_LEN.SetValue(WS.FMT_NAME.InspectGivingCount("  ".AsString(), "CHARACTERS BEFORE"));         //COBOL==> INSPECT FMT-NAME TALLYING NAME-LEN FOR CHARACTERS BEFORE '  '
                    WS.OFC_LEN.SetValue(WS.TMP_OFC.InspectGivingCount(" ".AsString(), "CHARACTERS BEFORE"));            //COBOL==> INSPECT TMP-OFC TALLYING OFC-LEN FOR CHARACTERS BEFORE ' '
                    if ((((WS.NAME_LEN.AsDecimal() + WS.OFC_LEN.AsDecimal()) + 1m).IsGreaterThan(29))
             || ((((WS.NAME_LEN.AsDecimal() + WS.OFC_LEN.AsDecimal()) + 1m).IsGreaterThan(27))
             && (WS.I2.IsLessThan(WS.TOT_OFC))))  //COBOL==> IF ( NAME-LEN + OFC-LEN + 1 > 29 ) OR ( NAME-LEN + OFC-LEN + 1 > 27 AND I2 < TOT-OFC )
                    {
                        WS.TMP_OFC.SetValue("*");                                                                           //COBOL==> MOVE '*' TO TMP-OFC
                    }                                                                                                   //COBOL==> END-IF
                    if (WS.I2.IsEqualTo(1))                                                                             //COBOL==> IF I2 = 1
                    {
                        WS.FMT_NAME.SetValue(StringUtils.Stringify(StringUtils.DelimitedByString("  ", WS.FMT_NAME.AsString(), " (", WS.TMP_OFC.AsString())));  //COBOL==> STRING FMT-NAME ' (' TMP-OFC DELIMITED BY '  ' INTO FMT-NAME
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.FMT_NAME.SetValue(StringUtils.Stringify(StringUtils.DelimitedByString("  ", WS.FMT_NAME.AsString(), ",", WS.TMP_OFC.AsString())));  //COBOL==> STRING FMT-NAME ',' TMP-OFC DELIMITED BY '  ' INTO FMT-NAME
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-PERFORM
                M_JUSTIFY_OFFICE(); if (Control.ExitProgram) { return; }                                              //COBOL==> PERFORM JUSTIFY-OFFICE
                WS.FMT_NAME.SetValue(StringUtils.Stringify(StringUtils.DelimitedByString("  ", WS.FMT_NAME.AsString(), ")")));  //COBOL==> STRING FMT-NAME ')' DELIMITED BY '  ' INTO FMT-NAME
            }                                                                                                   //COBOL==> END-IF .
            if (returnMethod != "" && returnMethod != "M_FORMAT_NAME") { M_JUSTIFY_OFFICE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_JUSTIFY_OFFICE
        /// </summary>
        /// <remarks>
        ///COMMENT:   REMOVE LEADING ZEROES AND LEFT JUSTIFY OFFICE ID
        /// </remarks>
        private void M_JUSTIFY_OFFICE(string returnMethod = "")
        {
            WS.TMP_OFC.SetValue(WS.CUR_OFC[WS.I2.AsInt()]);                                                     //COBOL==> MOVE CUR-OFC ( I2 ) TO TMP-OFC
            for (WS.I3.SetValue(1); (!(WS.TMP_OFC_X[WS.I3.AsInt()].IsGreaterThan("0"))); WS.I3.Add(1))         //COBOL==> PERFORM VARYING I3 FROM 1 BY 1 UNTIL TMP-OFC-X ( I3 ) > '0'
            {
            }                                                                                                   //COBOL==> END-PERFORM
            WS.I4.SetComputeValue((4m - WS.I3.AsDecimal()) + 1m);                                               //COBOL==> COMPUTE I4 = 4 - I3 + 1
            WS.TMP_OFC.SetValue(WS.TMP_OFC.GetSubstring(WS.I3.AsInt(), WS.I4.AsInt()));                         //COBOL==> MOVE TMP-OFC ( I3:I4 ) TO TMP-OFC .
            if (returnMethod != "" && returnMethod != "M_JUSTIFY_OFFICE") { M_OPEN_OFFICE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_OPEN_OFFICE
        /// </summary>
        /// <remarks>
        ///COMMENT:  OPEN OFFICE CURSOR
        /// </remarks>
        private void M_OPEN_OFFICE(string returnMethod = "")
        {
            WS.I2.ResetToInitialValue();                                                                        //COBOL==> INITIALIZE I2 TOT-OFC STOP-READ
            WS.TOT_OFC.ResetToInitialValue();
            WS.STOP_READ.ResetToInitialValue();
            DbConv.OpenReader("OFC-CSR");                                                                       //COBOL==> EXEC SQL OPEN OFC-CSR END-EXEC.
            if (!(WS.SQLCA.SQLCODE.IsEqualTo(0)))                                                               //COBOL==> IF SQLCODE NOT = 0
            {
                M_DB2_ABEND(); if (Control.ExitProgram) { return; }                                                   //COBOL==> PERFORM DB2-ABEND
            }                                                                                                   //COBOL==> END-IF .
            if (returnMethod != "" && returnMethod != "M_OPEN_OFFICE") { M_READ_OFFICE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_READ_OFFICE
        /// </summary>
        /// <remarks>
        ///COMMENT:  FETCH OFFICE RECORD
        /// </remarks>
        private void M_READ_OFFICE(string returnMethod = "")
        {
            DbConv.FetchReaderRow("OFC-CSR",                                                                 //COBOL==> EXEC SQL FETCH OFC-CSR INTO :OFC-ID , :OFC-DISC-DT END-EXEC.
                             WS.OFC_ID, WS.OFC_DISC_DT);
            if (WS.SQLCA.SQLCODE.IsEqualTo(100))                                                                //COBOL==> IF SQLCODE = 100
            {
                WS.STOP_READ.SetValue("Y");                                                                         //COBOL==> MOVE 'Y' TO STOP-READ
            }                                                                                                   //COBOL==> END-IF
            if (WS.SQLCA.SQLCODE.IsLessThan(0))                                                                 //COBOL==> IF SQLCODE < 0
            {
                M_DB2_ABEND(); if (Control.ExitProgram) { return; }                                                   //COBOL==> PERFORM DB2-ABEND
            }                                                                                                   //COBOL==> END-IF
            if (WS.SQLCA.SQLCODE.IsEqualTo(0))                                                                  //COBOL==> IF SQLCODE = 0
            {
                WS.OFC_FND.SetValue("N");                                                                           //COBOL==> MOVE 'N' TO OFC-FND
                for (WS.I3.SetValue(1); (!(WS.I3.IsGreaterThan(WS.MAX_OFC))); WS.I3.Add(1))                        //COBOL==> PERFORM VARYING I3 FROM 1 BY 1 UNTIL I3 > MAX-OFC
                {
                    if (WS.OFC_ID.IsEqualTo(WS.CUR_OFC[WS.I3.AsInt()]))                                                 //COBOL==> IF OFC-ID = CUR-OFC ( I3 )
                    {
                        WS.OFC_FND.SetValue("Y");                                                                           //COBOL==> MOVE 'Y' TO OFC-FND
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-PERFORM
                if (WS.OFC_FND.IsEqualTo("N"))                                                                      //COBOL==> IF OFC-FND = 'N'
                {
                    WS.I2.Add(1);                                                                                       //COBOL==> ADD 1 TO I2
                    if (WS.I2.IsLessThanOrEqualTo(WS.MAX_OFC))                                                          //COBOL==> IF I2 <= MAX-OFC
                    {
                        WS.CUR_OFC[WS.I2.AsInt()].SetValue(WS.OFC_ID);                                                      //COBOL==> MOVE OFC-ID TO CUR-OFC ( I2 )
                        WS.TOT_OFC.SetValue(WS.I2);                                                                         //COBOL==> MOVE I2 TO TOT-OFC
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF .
            if (returnMethod != "" && returnMethod != "M_READ_OFFICE") { M_CLOSE_OFFICE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CLOSE_OFFICE
        /// </summary>
        /// <remarks>
        ///COMMENT:  CLOSE CURSOR
        /// </remarks>
        private void M_CLOSE_OFFICE(string returnMethod = "")
        {
            DbConv.CloseReader("OFC-CSR");                                                                      //COBOL==> EXEC SQL CLOSE OFC-CSR END-EXEC
            if (returnMethod != "" && returnMethod != "M_CLOSE_OFFICE") { M_CICS_ABEND(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CICS_ABEND
        /// </summary>
        /// <remarks>
        ///COMMENT:  CICS ERROR
        /// </remarks>
        private void M_CICS_ABEND(string returnMethod = "")
        {
            LS.EXP_ABEND_TYPE.SetValue("C");                                                                    //COBOL==> MOVE 'C' TO EXP-ABEND-TYPE
            LS.EXP_CICS_RESOURCE.SetValue(Control.EIBRSRCE);                                                    //COBOL==> MOVE EIBRSRCE TO EXP-CICS-RESOURCE
            LS.EXP_CICS_FUNCTION.SetValue(Control.EIBFN);                                                       //COBOL==> MOVE EIBFN TO EXP-CICS-FUNCTION
            LS.EXP_CICS_RESPONSE.SetValue(Control.EIBRCODE);                                                    //COBOL==> MOVE EIBRCODE TO EXP-CICS-RESPONSE
            M_END_PROGRAM(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM END-PROGRAM .
            if (returnMethod != "" && returnMethod != "M_CICS_ABEND") { M_ADABAS_ABEND(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ADABAS_ABEND
        /// </summary>
        /// <remarks>
        ///COMMENT:  ADABAS ERROR
        /// </remarks>
        private void M_ADABAS_ABEND(string returnMethod = "")
        {
            LS.EXP_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO EXP-ABEND-TYPE
            M_END_PROGRAM(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM END-PROGRAM .
            if (returnMethod != "" && returnMethod != "M_ADABAS_ABEND") { M_DB2_ABEND(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_DB2_ABEND
        /// </summary>
        /// <remarks>
        ///COMMENT:  DB2 ERROR, FORMAT SQL CODE
        /// </remarks>
        private void M_DB2_ABEND(string returnMethod = "")
        {
            LS.EXP_ABEND_TYPE.SetValue("D");                                                                    //COBOL==> MOVE 'D' TO EXP-ABEND-TYPE
            WS.SQLNUMB.SetValue(WS.SQLCA.SQLCODE);                                                              //COBOL==> MOVE SQLCODE TO SQLNUMB
            LS.EXP_ADA_RESPONSE.SetValue(WS.SQLNUMB.GetSubstring(6, 4));                                        //COBOL==> MOVE SQLNUMB ( 6:4 ) TO EXP-ADA-RESPONSE
            M_END_PROGRAM(); if (Control.ExitProgram) { return; }                                                 //COBOL==> PERFORM END-PROGRAM .
            if (returnMethod != "" && returnMethod != "M_DB2_ABEND") { M_END_PROGRAM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_END_PROGRAM
        /// </summary>
        /// <remarks>
        ///COMMENT:  EXIT THE PROGRAM
        /// </remarks>
        private void M_END_PROGRAM(string returnMethod = "")
        {
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PH002_0000_CONVERT_NAME
        /// </summary>
        /// <remarks>
        ///COMMENT:  CONVERT LAST NAME TO PHONETIC
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH002                                       *
        ///COMMENT:   DESCRIPTION:  CONVERT LAST NAME TO PHONETIC VALUE            *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:                                                                *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_PH002_0000_CONVERT_NAME(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   CONVERT LAST NAME TO A PHONETIC VALUE                        *
            //COMMENT: ---------------------------------------------------------------*
            M_PH002_1000_INITIALIZE("M_PH002_1000_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM PH002-1000-INITIALIZE THRU PH002-1000-EXIT.
            WS.PH_THREE_LETTERS.SetValue(WS.PH_NAME_RAW_INQ);                                                   //COBOL==> MOVE PH-NAME-RAW-INQ TO PH-THREE-LETTERS.
            WS.PH_TWO_LETTERS.SetValue(WS.PH_THREE_LETTERS);                                                    //COBOL==> MOVE PH-THREE-LETTERS TO PH-TWO-LETTERS.
            WS.PH_ONE_LETTER.SetValue(WS.PH_THREE_LETTERS);                                                     //COBOL==> MOVE PH-THREE-LETTERS TO PH-ONE-LETTER.
            WS.PH_NAME_CRUNCH_INQ.SetValue(WS.PH_NAME_RAW_INQ);                                                 //COBOL==> MOVE PH-NAME-RAW-INQ TO PH-NAME-CRUNCH-INQ.
            M_PH003_0000_CRUNCH_NAME("M_PH003_0000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH003-0000-CRUNCH-NAME THRU PH003-0000-EXIT.
            WS.PH_FNTIC_CX.SetValue(01);                                                                        //COBOL==> MOVE 01 TO PH-FNTIC-CX.
                                                                                                                //COMMENT: ---------------------------------------------------------------*
                                                                                                                //COMMENT:   CHECKING FIRST THREE,TWO, OR 1 LETTER THEN CONVERT           *
                                                                                                                //COMMENT:      THE REMAINDER OF THE NAME                                 *
                                                                                                                //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_THREE_LETTERS.IsEqualTo("SCH"))                                                           //COBOL==> IF PH-THREE-LETTERS = 'SCH'
            {
                WS.PH_FNTIC_C3.SetValue(04);                                                                        //COBOL==> MOVE 04 TO PH-FNTIC-C3
                WS.PH_NAME_NUM_34[1].SetValue("06");                                                                //COBOL==> MOVE '06' TO PH-NAME-NUM-34 ( 1 )
                M_PH002_2000_REMAIN_NAME("M_PH002_2000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                M_PH002_0000_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_CF2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CF2-INDEX TO 1.
            WS.PH_CF2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CF2-INDXX.
            M_PH002_3000_FIRST_2_LETTERS("M_PH002_3000_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM PH002-3000-FIRST-2-LETTERS THRU PH002-3000-EXIT.
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_C3.SetValue(03);                                                                        //COBOL==> MOVE 03 TO PH-FNTIC-C3
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_NAME_NUM_34[1].SetValue(WS.PH_HIT);                                                           //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( 1 )
                M_PH002_2000_REMAIN_NAME("M_PH002_2000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                M_PH002_0000_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_CF1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CF1-INDEX TO 1.
            WS.PH_CF1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CF1-INDXX.
            M_PH002_4000_FIRST_1_LETTER("M_PH002_4000_EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM PH002-4000-FIRST-1-LETTER THRU PH002-4000-EXIT.
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_C3.SetValue(02);                                                                        //COBOL==> MOVE 02 TO PH-FNTIC-C3
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_NAME_NUM_34[1].SetValue(WS.PH_HIT);                                                           //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( 1 )
                M_PH002_2000_REMAIN_NAME("M_PH002_2000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH002-2000-REMAIN-NAME THRU PH002-2000-EXIT
                M_PH002_0000_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-0000-EXIT.
            }
            WS.PH_ERR_NAME.SetValue("1");                                                                       //COBOL==> MOVE '1' TO PH-ERR-NAME.
            if (returnMethod != "" && returnMethod != "M_PH002_0000_CONVERT_NAME") { M_PH002_0000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_0000_EXIT
        /// </summary>
        private void M_PH002_0000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_0000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_0000_EXIT") { M_PH002_1000_INITIALIZE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_1000_INITIALIZE
        /// </summary>
        private void M_PH002_1000_INITIALIZE(string returnMethod = "")
        {
            WS.PH_NAME_CRUNCH_INQ.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO PH-NAME-CRUNCH-INQ.
            WS.PH_NAME_REDUC_INQ.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO PH-NAME-REDUC-INQ.
            WS.PH_NAME_PARTS.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACES TO PH-NAME-PARTS.
            WS.PH_NAME_34_NUMERIC.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO PH-NAME-34-NUMERIC.
            WS.PH_HIT.SetValueWithSpaces();                                                                     //COBOL==> MOVE SPACES TO PH-HIT.
            WS.PH_NAME_17_NUMERIC.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO PH-NAME-17-NUMERIC.
            WS.PH_FNTIC_C1.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C2.
            WS.PH_FNTIC_C3.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C3.
            WS.PH_FNTIC_CX.SetValue(01);                                                                        //COBOL==> MOVE 01 TO PH-FNTIC-CX.
            WS.PH_SUSS_ID.SetValueWithZeroes();                                                                 //COBOL==> MOVE ZEROS TO PH-SUSS-ID.
            WS.PH_ERR_NAME.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-ERR-NAME.
            if (returnMethod != "" && returnMethod != "M_PH002_1000_INITIALIZE") { M_PH002_1000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_1000_EXIT
        /// </summary>
        private void M_PH002_1000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_1000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_1000_EXIT") { M_PH002_2000_REMAIN_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2000_REMAIN_NAME
        /// </summary>
        private void M_PH002_2000_REMAIN_NAME(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     CONVERT REMAINDER OF NAME                                  *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_FNTIC_C3.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH002-2010-FINISH-NAME THRU PH002-2010-EXIT UNTIL PH-FNTIC-C3 > 17.
            {
                M_PH002_2010_FINISH_NAME("M_PH002_2010_EXIT"); if (Control.ExitProgram) { return; }
            }
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-FNTIC-C2.
            while (!(WS.PH_FNTIC_C1.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH002-2020-WRAP-UP THRU PH002-2020-EXIT UNTIL PH-FNTIC-C1 > 17.
            {
                M_PH002_2020_WRAP_UP("M_PH002_2020_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2000_REMAIN_NAME") { M_PH002_2000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2000_EXIT
        /// </summary>
        private void M_PH002_2000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2000_EXIT") { M_PH002_2010_FINISH_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2010_FINISH_NAME
        /// </summary>
        private void M_PH002_2010_FINISH_NAME(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    IF ON THE LAST 2 CHARACTERS OF THE NAME THEN HANDLE         *
            //COMMENT:    SPERATELY.                                                  *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C3.IsEqualTo(17))                                                                   //COBOL==> IF PH-FNTIC-C3 = 17
            {
                M_PH002_2011_LAST_LETTER("M_PH002_2011_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH002-2011-LAST-LETTER THRU PH002-2011-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                // next                                                                                             //COBOL==> NEXT SENTENCE.
            }
            if (WS.PH_FNTIC_C3.IsEqualTo(16))                                                                   //COBOL==> IF PH-FNTIC-C3 = 16
            {
                M_PH002_2901_BUILD_2_1("M_PH002_2901_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PH002-2901-BUILD-2-1 THRU PH002-2901-EXIT
                M_PH002_2012_CHECK_2_LETTERS("M_PH002_2012_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM PH002-2012-CHECK-2-LETTERS THRU PH002-2012-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PH002_2014_MIDDLE_LETTERS("M_PH002_2014_EXIT"); if (Control.ExitProgram) { return; }                //COBOL==> PERFORM PH002-2014-MIDDLE-LETTERS THRU PH002-2014-EXIT.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2010_FINISH_NAME") { M_PH002_2010_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2010_EXIT
        /// </summary>
        private void M_PH002_2010_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2010_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2010_EXIT") { M_PH002_2011_LAST_LETTER(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_LAST_LETTER
        /// </summary>
        private void M_PH002_2011_LAST_LETTER(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CONVERT LAST LETTER OF THE NAME                             *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_REDUC[17].IsSpaces())                                                                   //COBOL==> IF PH-L-REDUC ( 17 ) = SPACE
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_ONE_LETTER.SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C3.AsInt()]);                                   //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C3 ) TO PH-ONE-LETTER
                WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1
                WS.PH_SUSS_ID.SetValueWithZeroes();                                                                 //COBOL==> MOVE 0 TO PH-SUSS-ID
                WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX
                M_PH002_2011_1_RE_ONE("M_PH002_2011_1_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM PH002-2011-1-RE-ONE THRU PH002-2011-1-EXIT
                M_PH002_2011_2_CK_SU_ID("M_PH002_2011_2_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM PH002-2011-2-CK-SU-ID THRU PH002-2011-2-EXIT.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2011_LAST_LETTER") { M_PH002_2011_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_EXIT
        /// </summary>
        private void M_PH002_2011_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2011_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2011_EXIT") { M_PH002_2011_1_RE_ONE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_1_RE_ONE
        /// </summary>
        private void M_PH002_2011_1_RE_ONE(string returnMethod = "")
        {
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                M_PH002_2903_REM_ONE("M_PH002_2903_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2011_1_RE_ONE") { M_PH002_2011_1_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_1_EXIT
        /// </summary>
        private void M_PH002_2011_1_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2011_1_EXIT") { return; }                                              //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2011_1_EXIT") { M_PH002_2011_2_CK_SU_ID(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_2_CK_SU_ID
        /// </summary>
        private void M_PH002_2011_2_CK_SU_ID(string returnMethod = "")
        {
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX ) .
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2011_2_CK_SU_ID") { M_PH002_2011_2_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2011_2_EXIT
        /// </summary>
        private void M_PH002_2011_2_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2011_2_EXIT") { return; }                                              //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2011_2_EXIT") { M_PH002_2012_CHECK_2_LETTERS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2012_CHECK_2_LETTERS
        /// </summary>
        private void M_PH002_2012_CHECK_2_LETTERS(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   CONVERT LAST 2 LETTERS OF NAME.                              *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_TWO_LETTERS.IsSpaces())                                                                   //COBOL==> IF PH-TWO-LETTERS = SPACES
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                M_PH002_2012_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-2012-EXIT.
            }
            WS.PH_CR2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR2-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR2-INDXX.
            while (!(WS.PH_CR2_INDXX.IsGreaterThan(9)))                                                         //COBOL==> PERFORM PH002-2902-REM-TWO THRU PH002-2902-EXIT UNTIL PH-CR2-INDXX > 9.
            {
                M_PH002_2902_REM_TWO("M_PH002_2902_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                M_PH002_2012_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-2012-EXIT.
            }
            WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX.
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                M_PH002_2903_REM_ONE("M_PH002_2903_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2012_CHECK_2_LETTERS") { M_PH002_2012_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2012_EXIT
        /// </summary>
        private void M_PH002_2012_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2012_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2012_EXIT") { M_PH002_2014_MIDDLE_LETTERS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2014_MIDDLE_LETTERS
        /// </summary>
        private void M_PH002_2014_MIDDLE_LETTERS(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    THE FOLLOWING WILL CONVERT THE MIDDLE CHARATERS OF THE NAME.*
            //COMMENT: ---------------------------------------------------------------*
            M_PH002_2900_BUILD_3_2_1("M_PH002_2900_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH002-2900-BUILD-3-2-1 THRU PH002-2900-EXIT.
            if (WS.PH_THREE_LETTERS.IsSpaces())                                                                 //COBOL==> IF PH-THREE-LETTERS = SPACES
            {
                WS.PH_FNTIC_C3.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C3
                M_PH002_2014_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-2014-EXIT.
            }
            if (WS.PH_THREE_LETTERS.IsEqualTo("SCH"))                                                           //COBOL==> IF PH-THREE-LETTERS = 'SCH'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue("06");                                           //COBOL==> MOVE '06' TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(3);                                                                              //COBOL==> ADD 3 TO PH-FNTIC-C3
                M_PH002_2014_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-2014-EXIT.
            }
            WS.PH_CR2_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR2-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR2_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR2-INDXX.
            while (!(WS.PH_CR2_INDXX.IsGreaterThan(9)))                                                         //COBOL==> PERFORM PH002-2902-REM-TWO THRU PH002-2902-EXIT UNTIL PH-CR2-INDXX > 9.
            {
                M_PH002_2902_REM_TWO("M_PH002_2902_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(2);                                                                              //COBOL==> ADD 2 TO PH-FNTIC-C3
                M_PH002_2014_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH002-2014-EXIT.
            }
            WS.PH_CR1_INDEX.SetValue(1);                                                                        //COBOL==> SET PH-CR1-INDEX TO 1.
            WS.PH_SUSS_ID.SetValue("0");                                                                        //COBOL==> MOVE '0' TO PH-SUSS-ID.
            WS.PH_CR1_INDXX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO PH-CR1-INDXX.
            while (!(WS.PH_CR1_INDXX.IsGreaterThan(18)))                                                        //COBOL==> PERFORM PH002-2903-REM-ONE THRU PH002-2903-EXIT UNTIL PH-CR1-INDXX > 18.
            {
                M_PH002_2903_REM_ONE("M_PH002_2903_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (WS.PH_SUSS_ID.IsEqualTo("1"))                                                                   //COBOL==> IF PH-SUSS-ID = '1'
            {
                WS.PH_FNTIC_CX.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-CX
                WS.PH_NAME_NUM_34[WS.PH_FNTIC_CX.AsInt()].SetValue(WS.PH_HIT);                                      //COBOL==> MOVE PH-HIT TO PH-NAME-NUM-34 ( PH-FNTIC-CX )
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C3.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C3.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2014_MIDDLE_LETTERS") { M_PH002_2014_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2014_EXIT
        /// </summary>
        private void M_PH002_2014_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2014_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2014_EXIT") { M_PH002_2020_WRAP_UP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2020_WRAP_UP
        /// </summary>
        private void M_PH002_2020_WRAP_UP(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:   REDUCES THE 34 BYTE PHONETIC VALUE NAME TO A 17 BYTE         *
            //COMMENT:   PHONETIC VALUE.                                              *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_REFMT_34_17.SetValue(WS.PH_NAME_NUM_34[WS.PH_FNTIC_C1.AsInt()]);                              //COBOL==> MOVE PH-NAME-NUM-34 ( PH-FNTIC-C1 ) TO PH-REFMT-34-17.
            if (WS.PH_DIGIT_1.IsSpaces())                                                                       //COBOL==> IF PH-DIGIT-1 = SPACE
            {
                M_PH002_2021_DIGIT_1("M_PH002_2021_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM PH002-2021-DIGIT-1 THRU PH002-2021-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_1);                                  //COBOL==> MOVE PH-DIGIT-1 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 )
                M_PH002_2022_DIGIT_2("M_PH002_2022_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM PH002-2022-DIGIT-2 THRU PH002-2022-EXIT.
            }
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (returnMethod != "" && returnMethod != "M_PH002_2020_WRAP_UP") { M_PH002_2020_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2020_EXIT
        /// </summary>
        private void M_PH002_2020_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2020_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2020_EXIT") { M_PH002_2021_DIGIT_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2021_DIGIT_1
        /// </summary>
        private void M_PH002_2021_DIGIT_1(string returnMethod = "")
        {
            if (WS.PH_DIGIT_2.IsSpaces())                                                                       //COBOL==> IF PH-DIGIT-2 = SPACE
            {
                WS.PH_FNTIC_C1.SetValue(18);                                                                        //COBOL==> MOVE 18 TO PH-FNTIC-C1
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_2);                                  //COBOL==> MOVE PH-DIGIT-2 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 ) .
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2021_DIGIT_1") { M_PH002_2021_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2021_EXIT
        /// </summary>
        private void M_PH002_2021_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2021_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2021_EXIT") { M_PH002_2022_DIGIT_2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2022_DIGIT_2
        /// </summary>
        private void M_PH002_2022_DIGIT_2(string returnMethod = "")
        {
            if (!(WS.PH_DIGIT_2.IsSpaces()))                                                                    //COBOL==> IF PH-DIGIT-2 NOT EQUAL SPACE
            {
                WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                WS.PH_NAME_NUM_17[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_DIGIT_2);                                  //COBOL==> MOVE PH-DIGIT-2 TO PH-NAME-NUM-17 ( PH-FNTIC-C2 ) .
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2022_DIGIT_2") { M_PH002_2022_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2022_EXIT
        /// </summary>
        private void M_PH002_2022_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2022_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2022_EXIT") { M_PH002_3000_FIRST_2_LETTERS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_3000_FIRST_2_LETTERS
        /// </summary>
        private void M_PH002_3000_FIRST_2_LETTERS(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST 2 LETTERS OF NAME                *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_CF2_INDXX.IsGreaterThan(17)))                                                        //COBOL==> PERFORM PH002-3010-FIRST-2 THRU PH002-3010-EXIT UNTIL PH-CF2-INDXX > 17.
            {
                M_PH002_3010_FIRST_2("M_PH002_3010_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnMethod != "" && returnMethod != "M_PH002_3000_FIRST_2_LETTERS") { M_PH002_3000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_3000_EXIT
        /// </summary>
        private void M_PH002_3000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_3000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_3000_EXIT") { M_PH002_3010_FIRST_2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_3010_FIRST_2
        /// </summary>
        private void M_PH002_3010_FIRST_2(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST 2 LETTERS OF NAME.               *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPH2[WS.PH_CF2_INDEX.AsInt()].IsEqualTo(WS.PH_TWO_LETTERS))                              //COBOL==> IF PH-ALPH2 ( PH-CF2-INDEX ) = PH-TWO-LETTERS
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUM2[WS.PH_CF2_INDEX.AsInt()]);                                            //COBOL==> MOVE PH-NUM2 ( PH-CF2-INDEX ) TO PH-HIT
                WS.PH_CF2_INDXX.SetValue(18);                                                                       //COBOL==> MOVE 18 TO PH-CF2-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CF2_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CF2-INDXX
                WS.PH_CF2_INDEX.Add(1);                                                                             //COBOL==> SET PH-CF2-INDEX UP BY 1.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_3010_FIRST_2") { M_PH002_3010_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_3010_EXIT
        /// </summary>
        private void M_PH002_3010_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_3010_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_3010_EXIT") { M_PH002_4000_FIRST_1_LETTER(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_4000_FIRST_1_LETTER
        /// </summary>
        private void M_PH002_4000_FIRST_1_LETTER(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR 1ST LETTER OF NAME                     *
            //COMMENT: ---------------------------------------------------------------*
            while (!(WS.PH_CF1_INDXX.IsGreaterThan(26)))                                                        //COBOL==> PERFORM PH002-4010-FIRST-1 THRU PH002-4010-EXIT UNTIL PH-CF1-INDXX > 26.
            {
                M_PH002_4010_FIRST_1("M_PH002_4010_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnMethod != "" && returnMethod != "M_PH002_4000_FIRST_1_LETTER") { M_PH002_4000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_4000_EXIT
        /// </summary>
        private void M_PH002_4000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_4000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_4000_EXIT") { M_PH002_4010_FIRST_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_4010_FIRST_1
        /// </summary>
        private void M_PH002_4010_FIRST_1(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     DETERMINE VALUE FOR FIRST LETTER OF NAME                   *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPH1[WS.PH_CF1_INDEX.AsInt()].IsEqualTo(WS.PH_ONE_LETTER))                               //COBOL==> IF PH-ALPH1 ( PH-CF1-INDEX ) = PH-ONE-LETTER
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUM1[WS.PH_CF1_INDEX.AsInt()]);                                            //COBOL==> MOVE PH-NUM1 ( PH-CF1-INDEX ) TO PH-HIT
                WS.PH_CF1_INDXX.SetValue(27);                                                                       //COBOL==> MOVE 27 TO PH-CF1-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CF1_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CF1-INDXX
                WS.PH_CF1_INDEX.Add(1);                                                                             //COBOL==> SET PH-CF1-INDEX UP BY 1.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_4010_FIRST_1") { M_PH002_4010_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_4010_EXIT
        /// </summary>
        private void M_PH002_4010_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_4010_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_4010_EXIT") { M_PH002_2900_BUILD_3_2_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2900_BUILD_3_2_1
        /// </summary>
        private void M_PH002_2900_BUILD_3_2_1(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     SETS UP THE 3 LETTER FIELD                                 *
            //COMMENT: ---------------------------------------------------------------*
            M_PH002_2901_BUILD_2_1("M_PH002_2901_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PH002-2901-BUILD-2-1 THRU PH002-2901-EXIT.
            WS.PH_FNTIC_C2.SetValue(2 + WS.PH_FNTIC_C3.AsDecimal());                                            //COBOL==> ADD 2 PH-FNTIC-C3 GIVING PH-FNTIC-C2.
            WS.PH_LETTERS_3[3].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C2 ) TO PH-LETTERS-3 ( 3 ) .
            if (returnMethod != "" && returnMethod != "M_PH002_2900_BUILD_3_2_1") { M_PH002_2900_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2900_EXIT
        /// </summary>
        private void M_PH002_2900_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2900_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2900_EXIT") { M_PH002_2901_BUILD_2_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2901_BUILD_2_1
        /// </summary>
        private void M_PH002_2901_BUILD_2_1(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    SETS UP FIELDS TO CHECK 2 LETTERS AND 1 LETTER              *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_LETTERS_3[1].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C3.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C3 ) TO PH-LETTERS-3 ( 1 ) .
            WS.PH_FNTIC_C2.SetValue(1 + WS.PH_FNTIC_C3.AsDecimal());                                            //COBOL==> ADD 1 PH-FNTIC-C3 GIVING PH-FNTIC-C2.
            WS.PH_LETTERS_3[2].SetValue(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]);                                 //COBOL==> MOVE PH-L-REDUC ( PH-FNTIC-C2 ) TO PH-LETTERS-3 ( 2 ) .
            WS.PH_LETTERS_3[3].SetValueWithSpaces();                                                            //COBOL==> MOVE SPACE TO PH-LETTERS-3 ( 3 ) .
            WS.PH_TWO_LETTERS.SetValue(WS.PH_THREE_LETTERS);                                                    //COBOL==> MOVE PH-THREE-LETTERS TO PH-TWO-LETTERS.
            WS.PH_ONE_LETTER.SetValue(WS.PH_THREE_LETTERS);                                                     //COBOL==> MOVE PH-THREE-LETTERS TO PH-ONE-LETTER.
            if (returnMethod != "" && returnMethod != "M_PH002_2901_BUILD_2_1") { M_PH002_2901_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2901_EXIT
        /// </summary>
        private void M_PH002_2901_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2901_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2901_EXIT") { M_PH002_2902_REM_TWO(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2902_REM_TWO
        /// </summary>
        private void M_PH002_2902_REM_TWO(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    SEARCHES REMAINING 2 LETTER TABLE                           *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPHR2[WS.PH_CR2_INDEX.AsInt()].IsEqualTo(WS.PH_TWO_LETTERS))                             //COBOL==> IF PH-ALPHR2 ( PH-CR2-INDEX ) = PH-TWO-LETTERS
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUMR2[WS.PH_CR2_INDEX.AsInt()]);                                           //COBOL==> MOVE PH-NUMR2 ( PH-CR2-INDEX ) TO PH-HIT
                WS.PH_CR2_INDXX.SetValue(10);                                                                       //COBOL==> MOVE 10 TO PH-CR2-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CR2_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CR2-INDXX
                WS.PH_CR2_INDEX.Add(1);                                                                             //COBOL==> SET PH-CR2-INDEX UP BY 1.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2902_REM_TWO") { M_PH002_2902_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2902_EXIT
        /// </summary>
        private void M_PH002_2902_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2902_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2902_EXIT") { M_PH002_2903_REM_ONE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2903_REM_ONE
        /// </summary>
        private void M_PH002_2903_REM_ONE(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:     SEARCHES REMAINING 1 LETTER TABLE                          *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_ALPHR1[WS.PH_CR1_INDEX.AsInt()].IsEqualTo(WS.PH_ONE_LETTER))                              //COBOL==> IF PH-ALPHR1 ( PH-CR1-INDEX ) = PH-ONE-LETTER
            {
                WS.PH_SUSS_ID.SetValue("1");                                                                        //COBOL==> MOVE '1' TO PH-SUSS-ID
                WS.PH_HIT.SetValue(WS.PH_NUMR1[WS.PH_CR1_INDEX.AsInt()]);                                           //COBOL==> MOVE PH-NUMR1 ( PH-CR1-INDEX ) TO PH-HIT
                WS.PH_CR1_INDXX.SetValue(19);                                                                       //COBOL==> MOVE 19 TO PH-CR1-INDXX
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_CR1_INDXX.Add(1);                                                                             //COBOL==> ADD 1 TO PH-CR1-INDXX
                WS.PH_CR1_INDEX.Add(1);                                                                             //COBOL==> SET PH-CR1-INDEX UP BY 1.
            }
            if (returnMethod != "" && returnMethod != "M_PH002_2903_REM_ONE") { M_PH002_2903_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH002_2903_EXIT
        /// </summary>
        private void M_PH002_2903_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH002_2903_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH002_2903_EXIT") { M_PH003_0000_CRUNCH_NAME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_0000_CRUNCH_NAME
        /// </summary>
        /// <remarks>
        ///COMMENT: ********************************************
        ///COMMENT: ***  THIS IS THE END OF MODULE SWAPH002   **
        ///COMMENT: ********************************************
        ///COMMENT:  COMPRESS NAME
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH003                                       *
        ///COMMENT:   DESCRIPTION:  REMOVE DUPLICATE LETTERS AND EMBEDDED BLANKS   *
        ///COMMENT:                 AND SPECIAL CHARACTERS (INCLUDING NUMBERS).    *
        ///COMMENT:                 ALSO REMOVE ANY NAME SUFFIX (JR, SR, ETC).     *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:  12/12/03 PAM LEAK I21982 UPDATE PHOENTIC SEARCH TO INCLUDE    *
        ///COMMENT:                           SUFFIX I,III,V,VI,VII,VIII,DR,RN,MD, *
        ///COMMENT:                           PHD                                  *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_PH003_0000_CRUNCH_NAME(string returnMethod = "")
        {
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValueWithZeroes();                                                                //COBOL==> MOVE 0 TO PH-FNTIC-C2.
            M_PH003_0500_REMOVE_SUFFIX("M_PH003_0500_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PH003-0500-REMOVE-SUFFIX THRU PH003-0500-EXIT.
            while (!(WS.PH_FNTIC_C1.IsGreaterThan(17)))                                                         //COBOL==> PERFORM PH003-1000-CRUNCH-REM THRU PH003-1000-EXIT UNTIL PH-FNTIC-C1 > 17.
            {
                M_PH003_1000_CRUNCH_REM("M_PH003_1000_EXIT"); if (Control.ExitProgram) { return; }
            }
            if (returnMethod != "" && returnMethod != "M_PH003_0000_CRUNCH_NAME") { M_PH003_0000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_0000_EXIT
        /// </summary>
        private void M_PH003_0000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH003_0000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH003_0000_EXIT") { M_PH003_0500_REMOVE_SUFFIX(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_0500_REMOVE_SUFFIX
        /// </summary>
        private void M_PH003_0500_REMOVE_SUFFIX(string returnMethod = "")
        {
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " JR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' JR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",JR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',JR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " SR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' SR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",SR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',SR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " DR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' DR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",DR", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',DR' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " RN", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' RN' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",RN", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',RN' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " MD", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' MD' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",MD", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',MD' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " PHD", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' PHD' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",PHD", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',PHD' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " III", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' III' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",III", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',III' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " II", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' II' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",II", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',II' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " I", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' I' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",I", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',I' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " IV", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' IV' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",IV", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',IV' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VIII", "     ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VIII' BY '     '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VIII", "     ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VIII' BY '     '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VII", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VII' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VII", "    ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VII' BY '    '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " VI", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' VI' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",VI", "   ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',VI' BY '   '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", " V", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ' V' BY '  '.
            WS.PH_NAME_CRUNCH_INQ.SetValueInspectReplacing(WS.PH_NAME_CRUNCH_INQ, "ALL", ",V", "  ", "", "", "", "");  //COBOL==> INSPECT PH-NAME-CRUNCH-INQ REPLACING ALL ',V' BY '  '.
            if (returnMethod != "" && returnMethod != "M_PH003_0500_REMOVE_SUFFIX") { M_PH003_0500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_0500_EXIT
        /// </summary>
        private void M_PH003_0500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH003_0500_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH003_0500_EXIT") { M_PH003_1000_CRUNCH_REM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1000_CRUNCH_REM
        /// </summary>
        private void M_PH003_1000_CRUNCH_REM(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    REMOVE BLANKS, DOUBLE LETTERS, NUMBERS, AND SPECIAL         *
            //COMMENT:    CHARACTERS.                                                 *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C1.IsEqualTo(17))                                                                   //COBOL==> IF PH-FNTIC-C1 = 17
            {
                M_PH003_1020_CHECK_SPACE("M_PH003_1020_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH003-1020-CHECK-SPACE THRU PH003-1020-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_CX.SetValue(1 + WS.PH_FNTIC_C1.AsDecimal());                                            //COBOL==> ADD 1 PH-FNTIC-C1 GIVING PH-FNTIC-CX
                M_PH003_1010_CHECK_DUP("M_PH003_1010_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PH003-1010-CHECK-DUP THRU PH003-1010-EXIT.
            }
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (returnMethod != "" && returnMethod != "M_PH003_1000_CRUNCH_REM") { M_PH003_1000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1000_EXIT
        /// </summary>
        private void M_PH003_1000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH003_1000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH003_1000_EXIT") { M_PH003_1010_CHECK_DUP(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1010_CHECK_DUP
        /// </summary>
        private void M_PH003_1010_CHECK_DUP(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CHECK FOR DUPLICATE LETTERS                                 *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_CRNCH[WS.PH_FNTIC_CX.AsInt()]))         //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) = PH-L-CRNCH ( PH-FNTIC-CX )
            {
                goto EndOfSentence_1;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PH003_1020_CHECK_SPACE("M_PH003_1020_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH003-1020-CHECK-SPACE THRU PH003-1020-EXIT.
            }
        EndOfSentence_1:;
            if (returnMethod != "" && returnMethod != "M_PH003_1010_CHECK_DUP") { M_PH003_1010_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1010_EXIT
        /// </summary>
        private void M_PH003_1010_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH003_1010_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH003_1010_EXIT") { M_PH003_1020_CHECK_SPACE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1020_CHECK_SPACE
        /// </summary>
        private void M_PH003_1020_CHECK_SPACE(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:    CHECK A SPACE, A NUMBER, OR A SPECIAL CHARACTER IN          *
            //COMMENT:    A GIVEN POSITION.                                           *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) = SPACE
            {
                goto EndOfSentence_2;                                                                               //COBOL==> NEXT SENTENCE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()].IsAlphabetic())                                           //COBOL==> IF PH-L-CRNCH ( PH-FNTIC-C1 ) IS ALPHABETIC
                {
                    WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
                    WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()].SetValue(WS.PH_L_CRNCH[WS.PH_FNTIC_C1.AsInt()]);              //COBOL==> MOVE PH-L-CRNCH ( PH-FNTIC-C1 ) TO PH-L-REDUC ( PH-FNTIC-C2 )
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    // next                                                                                             //COBOL==> NEXT SENTENCE.
                }
            }
        EndOfSentence_2:;
            if (returnMethod != "" && returnMethod != "M_PH003_1020_CHECK_SPACE") { M_PH003_1020_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH003_1020_EXIT
        /// </summary>
        private void M_PH003_1020_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH003_1020_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH003_1020_EXIT") { M_PH004_0000_LIKENESS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_0000_LIKENESS
        /// </summary>
        /// <remarks>
        ///COMMENT: ********************************
        ///COMMENT: ***   END MODULE SWAPH003   ****
        ///COMMENT: ********************************
        ///COMMENT:  COMPUTE PERCENTAGES
        ///COMMENT: ** DESCRIPTION *************************************************
        ///COMMENT:                                                                *
        ///COMMENT:     COPY NAME:  SWAPH004                                       *
        ///COMMENT:   DESCRIPTION:  COMPUTE PERCENTAGE OF LIKENESS BETWEEN THE     *
        ///COMMENT:                 INQUIRY NAME AND THE DATABASE NAME. BOTH NAMES *
        ///COMMENT:                 HAVE HAD DUPLICATE LETTERS AND EMBEDDED BLANKS *
        ///COMMENT:                 REMOVED.                                       *
        ///COMMENT:        LENGTH:                                                 *
        ///COMMENT:       CREATED:  JUNE,  1991.                                   *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                   CHANGE                                       *
        ///COMMENT:  DATE     AUTHOR  NUMBER  DESCRIPTION                          *
        ///COMMENT:  -------  ------  ------  ------------------------------------ *
        ///COMMENT:                                                                *
        ///COMMENT: ****************************************************************
        /// </remarks>
        private void M_PH004_0000_LIKENESS(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      REMOVE DUPLICATE LETTERS AND EMBEDDED BLANKS FROM THE     *
            //COMMENT:      DATABASE NAME.                                            *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_NAME_CRUNCH_INQ.SetValue(WS.PH_NAME_RAW_MSTR);                                                //COBOL==> MOVE PH-NAME-RAW-MSTR TO PH-NAME-CRUNCH-INQ.
            WS.PH_NAME_REDUC_INQ.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO PH-NAME-REDUC-INQ.
            M_PH003_0000_CRUNCH_NAME("M_PH003_0000_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PH003-0000-CRUNCH-NAME THRU PH003-0000-EXIT.
                                                                                                                  //COMMENT: ---------------------------------------------------------------*
                                                                                                                  //COMMENT:      INITIALIZE FIELDS.                                        *
                                                                                                                  //COMMENT: ---------------------------------------------------------------*
            WS.PH_COUNT_UP.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-COUNT-UP.
            WS.PH_DEGREE.SetValueWithZeroes();                                                                  //COBOL==> MOVE ZEROS TO PH-DEGREE.
            WS.PH_L1.SetValueWithZeroes();                                                                      //COBOL==> MOVE ZEROS TO PH-L1.
            WS.PH_COUNT_INQUIRY.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO PH-COUNT-INQUIRY.
            WS.PH_COUNT_DB.SetValueWithZeroes();                                                                //COBOL==> MOVE ZEROS TO PH-COUNT-DB.
            WS.PH_FNTIC_C1.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C1.
            WS.PH_FNTIC_C2.SetValue(1);                                                                         //COBOL==> MOVE 1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                M_PH004_1000_CHECK_DEGREE("M_PH004_1000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT
                M_PH004_0000_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-0000-EXIT.
            }
            WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                M_PH004_1000_CHECK_DEGREE("M_PH004_1000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT
                M_PH004_0000_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-0000-EXIT.
            }
            M_PH004_1000_CHECK_DEGREE("M_PH004_1000_EXIT"); if (Control.ExitProgram) { return; }                  //COBOL==> PERFORM PH004-1000-CHECK-DEGREE THRU PH004-1000-EXIT.
            if (returnMethod != "" && returnMethod != "M_PH004_0000_LIKENESS") { M_PH004_0000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_0000_EXIT
        /// </summary>
        private void M_PH004_0000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH004_0000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH004_0000_EXIT") { M_PH004_1000_CHECK_DEGREE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1000_CHECK_DEGREE
        /// </summary>
        private void M_PH004_1000_CHECK_DEGREE(string returnMethod = "")
        {
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            while (!(WS.PH_L1.IsEqualTo(1)))                                                                    //COBOL==> PERFORM PH004-1100-PROCESS-DEGREE THRU PH004-1100-EXIT UNTIL PH-L1 = 1.
            {
                M_PH004_1100_PROCESS_DEGREE("M_PH004_1100_EXIT"); if (Control.ExitProgram) { return; }
            }
            WS.PH_L1.SetValueWithZeroes();                                                                      //COBOL==> MOVE 0 TO PH-L1.
            WS.PH_FNTIC_C1.SetValueWithZeroes();                                                                //COBOL==> MOVE 0 TO PH-FNTIC-C1.
            while (!(WS.PH_L1.IsEqualTo(1)))                                                                    //COBOL==> PERFORM PH004-1200-COUNT-DIGITS THRU PH004-1200-EXIT UNTIL PH-L1 = 1.
            {
                M_PH004_1200_COUNT_DIGITS("M_PH004_1200_EXIT"); if (Control.ExitProgram) { return; }
            }
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COMPUTE DEGREE OF LIKENESS.                               *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_COUNT_INQUIRY.IsGreaterThan(WS.PH_COUNT_DB))                                              //COBOL==> IF PH-COUNT-INQUIRY > PH-COUNT-DB
            {
                WS.PH_DEGREE.SetValue(Math.Round(WS.PH_COUNT_UP.AsDecimal() / WS.PH_COUNT_INQUIRY.AsDecimal(), WS.PH_DEGREE.DecimalDigits, MidpointRounding.AwayFromZero));  //COBOL==> DIVIDE PH-COUNT-UP BY PH-COUNT-INQUIRY GIVING PH-DEGREE ROUNDED
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_DEGREE.SetValue(Math.Round(WS.PH_COUNT_UP.AsDecimal() / WS.PH_COUNT_DB.AsDecimal(), WS.PH_DEGREE.DecimalDigits, MidpointRounding.AwayFromZero));  //COBOL==> DIVIDE PH-COUNT-UP BY PH-COUNT-DB GIVING PH-DEGREE ROUNDED.
            }
            if (returnMethod != "" && returnMethod != "M_PH004_1000_CHECK_DEGREE") { M_PH004_1000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1000_EXIT
        /// </summary>
        private void M_PH004_1000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH004_1000_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH004_1000_EXIT") { M_PH004_1100_PROCESS_DEGREE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1100_PROCESS_DEGREE
        /// </summary>
        private void M_PH004_1100_PROCESS_DEGREE(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COMPARE LETTERS IN THE INQUIRY NAME TO LETTERS IN THE     *
            //COMMENT:      DATABASE NAME.                                            *
            //COMMENT: ---------------------------------------------------------------*
            if (WS.PH_FNTIC_C1.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C1 > 17
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C1);                                                            //COBOL==> MOVE PH-FNTIC-C1 TO PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = SPACE
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
            }
            if (WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C2 ) = SPACE
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C2
            if (WS.PH_FNTIC_C2.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C2 > 17
            {
                WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C2.AsInt() - 2);                                                //COBOL==> SUBTRACT 2 FROM PH-FNTIC-C2
                if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
                {
                    WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                    WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                    M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                    M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
                }
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
                M_PH004_1100_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1100-EXIT.
            }
            WS.PH_FNTIC_C2.SetValue(WS.PH_FNTIC_C2.AsInt() - 2);                                                //COBOL==> SUBTRACT 2 FROM PH-FNTIC-C2.
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsEqualTo(WS.PH_L_REDUC[WS.PH_FNTIC_C2.AsInt()]))         //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = PH-L-REDUC ( PH-FNTIC-C2 )
            {
                WS.PH_COUNT_UP.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-UP
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            }
            if (returnMethod != "" && returnMethod != "M_PH004_1100_PROCESS_DEGREE") { M_PH004_1100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1100_EXIT
        /// </summary>
        private void M_PH004_1100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH004_1100_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH004_1100_EXIT") { M_PH004_1200_COUNT_DIGITS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1200_COUNT_DIGITS
        /// </summary>
        private void M_PH004_1200_COUNT_DIGITS(string returnMethod = "")
        {
            //COMMENT: ---------------------------------------------------------------*
            //COMMENT:      COUNT THE DIGITS IN THE INQUIRY AND DATABASE NAMES.       *
            //COMMENT: ---------------------------------------------------------------*
            WS.PH_FNTIC_C1.Add(1);                                                                              //COBOL==> ADD 1 TO PH-FNTIC-C1.
            if (WS.PH_FNTIC_C1.IsGreaterThan(17))                                                               //COBOL==> IF PH-FNTIC-C1 > 17
            {
                WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                M_PH004_1200_EXIT(CheckGotoReturn(returnMethod)); return;                                           //COBOL==> GO TO PH004-1200-EXIT.
            }
            if (WS.PH_S_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-S-REDUC ( PH-FNTIC-C1 ) = SPACES
            {
                if (WS.PH_L_REDUC[WS.PH_FNTIC_C1.AsInt()].IsSpaces())                                               //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C1 ) = SPACES
                {
                    WS.PH_L1.SetValue(1);                                                                               //COBOL==> MOVE 1 TO PH-L1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.PH_COUNT_DB.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-DB
                }                                                                                                   //COBOL==> ELSE
            }
            else
            {
                WS.PH_COUNT_INQUIRY.Add(1);                                                                         //COBOL==> ADD 1 TO PH-COUNT-INQUIRY
                if (WS.PH_L_REDUC[WS.PH_FNTIC_C1.AsInt()].IsGreaterThan(SPACES))                                    //COBOL==> IF PH-L-REDUC ( PH-FNTIC-C1 ) > SPACES
                {
                    WS.PH_COUNT_DB.Add(1);                                                                              //COBOL==> ADD 1 TO PH-COUNT-DB.
                }
            }
            if (returnMethod != "" && returnMethod != "M_PH004_1200_COUNT_DIGITS") { M_PH004_1200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PH004_1200_EXIT
        /// </summary>
        private void M_PH004_1200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PH004_1200_EXIT") { return; }                                                //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PH004_1200_EXIT") { M_1100_OPEN_NAME_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1100_OPEN_NAME_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************
        ///COMMENT: **  END OF SWAPH004  ***
        ///COMMENT: ************************
        ///COMMENT: ** GQB 03/05/2014 - OPEN CURSOR FOR NAME VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_1100_OPEN_NAME_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'DBK1-CLIENT-NAME    NAME=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-SSN            NAME=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-DATE-OF-BIRTH  NAME=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-DATE-OF-BIRTH          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-GENDER         NAME=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-GENDER                 TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NUMBER  NAME=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.OpenReader("NAME-VIEW");                                                                     //COBOL==> EXEC SQL OPEN NAME-VIEW END-EXEC.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_1100_OPEN_NAME_VIEW") { M_1100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1100_EXIT
        /// </summary>
        private void M_1100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1100_EXIT") { M_1200_FETCH_NAME_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1200_FETCH_NAME_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 07/24/2014 - FETCH NEXT RECORD FOR NAME VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_1200_FETCH_NAME_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.FetchReaderRow("NAME-VIEW",                                                               //COBOL==> EXEC SQL FETCH NAME-VIEW INTO :CL1-CLIENT-NAME , :CL1-SSN , :CL1-DATE-OF-BIRTH , :CL1-GENDER , :CL1-FK-CLB-CLIENT-NO , :CL1-VERIFIED-SSN-FLAG END-EXEC.
                             WS.CL1_CLIENT_NAME, WS.CL1_SSN, WS.CL1_DATE_OF_BIRTH, WS.CL1_GENDER, WS.CL1_FK_CLB_CLIENT_NO, WS.CL1_VERIFIED_SSN_FLAG);
            // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((WS.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_1200_FETCH_NAME_VIEW") { M_1200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1200_EXIT
        /// </summary>
        private void M_1200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1200_EXIT") { M_1300_CLOSE_NAME_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1300_CLOSE_NAME_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 03/05/2014 - CLOSE CURSOR FOR NAME VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_1300_CLOSE_NAME_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            DbConv.CloseReader("NAME-VIEW");                                                                    //COBOL==> EXEC SQL CLOSE NAME-VIEW END-EXEC.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                M_1300_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 1300-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_1300_CLOSE_NAME_VIEW") { M_1300_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_1300_EXIT
        /// </summary>
        private void M_1300_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_1300_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_1300_EXIT") { M_2100_OPEN_PHON_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2100_OPEN_PHON_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 03/05/2014 - OPEN CURSOR FOR PHON-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_2100_OPEN_PHON_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'DBK1-PHONETIC-DATA  PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-PHONETIC-DATA          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NAME    PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-SSN            PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-DATE-OF-BIRTH  PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-DATE-OF-BIRTH          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-GENDER         PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-GENDER                 TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NUMBER  PHON=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.OpenReader("PHON-VIEW");                                                                     //COBOL==> EXEC SQL OPEN PHON-VIEW END-EXEC.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_2100_OPEN_PHON_VIEW") { M_2100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2100_EXIT
        /// </summary>
        private void M_2100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2100_EXIT") { M_2200_FETCH_PHON_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2200_FETCH_PHON_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 07/24/2014 - FETCH NEXT RECORD FOR PHON-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_2200_FETCH_PHON_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.FetchReaderRow("PHON-VIEW",                                                               //COBOL==> EXEC SQL FETCH PHON-VIEW INTO :CL1-PHONETIC-DATA , :CL1-CLIENT-NAME , :CL1-SSN , :CL1-DATE-OF-BIRTH , :CL1-GENDER , :CL1-FK-CLB-CLIENT-NO , :CL1-VERIFIED-SSN-FLAG END-EXEC.
                             WS.CL1_PHONETIC_DATA, WS.CL1_CLIENT_NAME, WS.CL1_SSN, WS.CL1_DATE_OF_BIRTH, WS.CL1_GENDER, WS.CL1_FK_CLB_CLIENT_NO, WS.CL1_VERIFIED_SSN_FLAG);
            // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((WS.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_2200_FETCH_PHON_VIEW") { M_2200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2200_EXIT
        /// </summary>
        private void M_2200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2200_EXIT") { M_2300_CLOSE_PHON_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2300_CLOSE_PHON_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 03/05/2014 - CLOSE CURSOR FOR PHON-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_2300_CLOSE_PHON_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            DbConv.CloseReader("PHON-VIEW");                                                                    //COBOL==> EXEC SQL CLOSE PHON-VIEW END-EXEC.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                M_2300_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2300-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_2300_CLOSE_PHON_VIEW") { M_2300_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2300_EXIT
        /// </summary>
        private void M_2300_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2300_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2300_EXIT") { M_3100_OPEN_SSN_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3100_OPEN_SSN_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 03/05/2014 - OPEN CURSOR FOR SSN-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_3100_OPEN_SSN_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'DBK1-SSN             SSN=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NAME     SSN=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-DATE-OF-BIRTH   SSN=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-DATE-OF-BIRTH          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-GENDER          SSN=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-GENDER                 TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NUMBER   SSN=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.OpenReader("SSN-VIEW");                                                                      //COBOL==> EXEC SQL OPEN SSN-VIEW END-EXEC.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_3100_OPEN_SSN_VIEW") { M_3100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3100_EXIT
        /// </summary>
        private void M_3100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_3100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_3100_EXIT") { M_3200_FETCH_SSN_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3200_FETCH_SSN_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 07/24/2014 - FETCH NEXT RECORD FOR SSN-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_3200_FETCH_SSN_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.FetchReaderRow("SSN-VIEW",                                                                //COBOL==> EXEC SQL FETCH SSN-VIEW INTO :CL1-SSN , :CL1-CLIENT-NAME , :CL1-DATE-OF-BIRTH , :CL1-GENDER , :CL1-FK-CLB-CLIENT-NO , :CL1-VERIFIED-SSN-FLAG END-EXEC.
                             WS.CL1_SSN, WS.CL1_CLIENT_NAME, WS.CL1_DATE_OF_BIRTH, WS.CL1_GENDER, WS.CL1_FK_CLB_CLIENT_NO, WS.CL1_VERIFIED_SSN_FLAG);
            // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((WS.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_3200_FETCH_SSN_VIEW") { M_3200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3200_EXIT
        /// </summary>
        private void M_3200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_3200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_3200_EXIT") { M_3300_CLOSE_SSN_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3300_CLOSE_SSN_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 03/05/2014 - CLOSE CURSOR FOR SSN-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_3300_CLOSE_SSN_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            DbConv.CloseReader("SSN-VIEW");                                                                     //COBOL==> EXEC SQL CLOSE SSN-VIEW END-EXEC.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                M_3300_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 3300-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_3300_CLOSE_SSN_VIEW") { M_3300_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3300_EXIT
        /// </summary>
        private void M_3300_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_3300_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_3300_EXIT") { M_4100_OPEN_ID_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4100_OPEN_ID_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 03/05/2014 - OPEN CURSOR FOR ID-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_4100_OPEN_ID_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'DBK1-CLIENT-NUMBER    ID=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-CLIENT-NAME      ID=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-SSN              ID=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-DATE-OF-BIRTH    ID=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-DATE-OF-BIRTH          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'DBK1-GENDER           ID=' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK1-GENDER                 TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.OpenReader("ID-VIEW");                                                                       //COBOL==> EXEC SQL OPEN ID-VIEW END-EXEC.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_4100_OPEN_ID_VIEW") { M_4100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4100_EXIT
        /// </summary>
        private void M_4100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4100_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4100_EXIT") { M_4200_FETCH_ID_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4200_FETCH_ID_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 07/24/2014 - FETCH NEXT RECORD FOR ID-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_4200_FETCH_ID_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.FetchReaderRow("ID-VIEW",                                                                 //COBOL==> EXEC SQL FETCH ID-VIEW INTO :CL1-FK-CLB-CLIENT-NO , :CL1-CLIENT-NAME , :CL1-SSN , :CL1-DATE-OF-BIRTH , :CL1-GENDER , :CL1-VERIFIED-SSN-FLAG END-EXEC.
                             WS.CL1_FK_CLB_CLIENT_NO, WS.CL1_CLIENT_NAME, WS.CL1_SSN, WS.CL1_DATE_OF_BIRTH, WS.CL1_GENDER, WS.CL1_VERIFIED_SSN_FLAG);
            // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((WS.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW1_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW1-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_4200_FETCH_ID_VIEW") { M_4200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4200_EXIT
        /// </summary>
        private void M_4200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4200_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4200_EXIT") { M_4300_CLOSE_ID_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4300_CLOSE_ID_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 03/05/2014 - CLOSE CURSOR FOR ID-VIEW
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_4300_CLOSE_ID_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            DbConv.CloseReader("ID-VIEW");                                                                      //COBOL==> EXEC SQL CLOSE ID-VIEW END-EXEC.
            if (WS.SW1_ERR_YES.Value)                                                                           //COBOL==> IF SW1-ERR-YES
            {
                M_4300_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 4300-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.SW1_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW1-EOF-NO TO TRUE.
            WS.SW1_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW1-ERR-NO TO TRUE.
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("AVF");                                                             //COBOL==> MOVE 'AVF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW1_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW1-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_4300_CLOSE_ID_VIEW") { M_4300_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4300_EXIT
        /// </summary>
        private void M_4300_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_4300_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_4300_EXIT") { M_91100_CONVERT_DATE_ADA_TO_DB2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_91100_CONVERT_DATE_ADA_TO_DB2 //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: ** GQB 03/05/2014 - CLIENT POINTER INFORMATION CODE AREA
        ///COMMENT: ****************************************************************
        ///COMMENT:                                                                *
        ///COMMENT:  INCLUDE NAME:  SWCSZG88.                                      *
        ///COMMENT:      EAB NAME:  EXTERNAL PROGRAMS CONVERTED TO DB2             *
        ///COMMENT:   DESCRIPTION:  98000-SELECT-CLIENT-BASIC.                     *
        ///COMMENT:                 99000-CLIENT-POINTER-ROUTINE.                  *
        ///COMMENT:      LOCATION:  PROCEDURE DIVISION.                            *
        ///COMMENT:                                                                *
        ///COMMENT:       ACTIONS:  1. SELECT KSD_CLIENT
        ///COMMENT:                    USING CLIENT NUMBER, CLIENT NAME, CLIENT SSN
        ///COMMENT:                      RETURN VERIFIED-SSN-FLAG
        ///COMMENT:                 2. FETCH KSD_SYSTEM_PART
        ///COMMENT:                    USING CLIENT NUMBER, CLIENT NAME, CLIENT SSN
        ///COMMENT:                      RETURN SYSTEM CODE, PARTICIPATION FLAG
        ///COMMENT:                 3. POPULATE CLIENT POINTER WITH RETURN FIELDS
        ///COMMENT:       CREATED:  27-FEB-2014.
        ///COMMENT:            BY:  GQB - GADI BRAMSON                             *
        ///COMMENT:                                                                *
        ///COMMENT: ** MAINTENANCE *************************************************
        ///COMMENT:                       CHANGE
        ///COMMENT:    DATE      AUTHOR   CONTROL DESCRIPTION
        ///COMMENT:  ---------- --------- ------- ----------------------------------
        ///COMMENT:  02/17/2014 G.BRAMSON CQ35825 ADABAS TO DB2 KEES PHASE 3 CHANGES
        ///COMMENT:  02/27/2014 G.BRAMSON CQ35825 BUILD AND RETURN CLIENT POINTER
        ///COMMENT:  03/04/2014 G.BRAMSON CQ35825 READ CLIENT BASIC
        ///COMMENT:  03/05/2014 G.BRAMSON CQ35825 CONVERT DATES ADABAS TO DB2 VERS.
        ///COMMENT:  07/24/2014 G.BRAMSON CQ35825 SKIP CLIENT SELECT DEPENDING FLAG.
        ///COMMENT:  08/29/2017 RKM               ADD WITH UR TO QUERIES
        ///COMMENT: ****************************************************************
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_91100_CONVERT_DATE_ADA_TO_DB2(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            // EvaluateList !TRUE!                                                                              //COBOL==> EVALUATE TRUE
            if ((WS.WS9_DATE_ADA.IsSpaces()) || (WS.WS9_DATE_ADA.IsZeros()))                                //COBOL==> WHEN WS9-DATE-ADA = SPACE OR WS9-DATE-ADA = ZERO
            {
                WS.WS9_DATE_ADA.SetValue("00010101");                                                               //COBOL==> MOVE '00010101' TO WS9-DATE-ADA
            }                                                                                               //COBOL==> WHEN WS9-DATE-ADA = '99999999'
            else
            if (WS.WS9_DATE_ADA.IsEqualTo("99999999"))
            {
                WS.WS9_DATE_ADA.SetValue("20991231");                                                               //COBOL==> MOVE '20991231' TO WS9-DATE-ADA
            }                                                                                                   //COBOL==> END-EVALUATE.
            WS.WS9_DATE_DB2.SetValueOfSubstring(5, 1, "-");                                                     //COBOL==> MOVE '-' TO WS9-DATE-DB2 ( 5:1 ) WS9-DATE-DB2 ( 8:1 ) .
            WS.WS9_DATE_DB2.SetValueOfSubstring(8, 1, "-");
            WS.WS9_DATE_DB2.SetValueOfSubstring(1, 4, WS.WS9_DATE_ADA.GetSubstring(1, 4).AsString());           //COBOL==> MOVE WS9-DATE-ADA ( 1:4 ) TO WS9-DATE-DB2 ( 1:4 ) .
            WS.WS9_DATE_DB2.SetValueOfSubstring(6, 2, WS.WS9_DATE_ADA.GetSubstring(5, 2).AsString());           //COBOL==> MOVE WS9-DATE-ADA ( 5:2 ) TO WS9-DATE-DB2 ( 6:2 ) .
            WS.WS9_DATE_DB2.SetValueOfSubstring(9, 2, WS.WS9_DATE_ADA.GetSubstring(7, 2).AsString());           //COBOL==> MOVE WS9-DATE-ADA ( 7:2 ) TO WS9-DATE-DB2 ( 9:2 ) .
            if (returnMethod != "" && returnMethod != "M_91100_CONVERT_DATE_ADA_TO_DB2") { M_91100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_91100_EXIT
        /// </summary>
        private void M_91100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_91100_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_91100_EXIT") { M_91200_CONVERT_DATE_DB2_TO_ADA(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_91200_CONVERT_DATE_DB2_TO_ADA //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_91200_CONVERT_DATE_DB2_TO_ADA(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.WS9_DATE_ADA.SetValueOfSubstring(1, 4, WS.WS9_DATE_DB2.GetSubstring(1, 4).AsString());           //COBOL==> MOVE WS9-DATE-DB2 ( 1:4 ) TO WS9-DATE-ADA ( 1:4 ) .
            WS.WS9_DATE_ADA.SetValueOfSubstring(5, 2, WS.WS9_DATE_DB2.GetSubstring(6, 2).AsString());           //COBOL==> MOVE WS9-DATE-DB2 ( 6:2 ) TO WS9-DATE-ADA ( 5:2 ) .
            WS.WS9_DATE_ADA.SetValueOfSubstring(7, 2, WS.WS9_DATE_DB2.GetSubstring(9, 2).AsString());           //COBOL==> MOVE WS9-DATE-DB2 ( 9:2 ) TO WS9-DATE-ADA ( 7:2 ) .
            if (returnMethod != "" && returnMethod != "M_91200_CONVERT_DATE_DB2_TO_ADA") { M_91200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_91200_EXIT
        /// </summary>
        private void M_91200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_91200_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_91200_EXIT") { M_98000_SELECT_CLIENT_BASIC(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_98000_SELECT_CLIENT_BASIC //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_98000_SELECT_CLIENT_BASIC(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.ExecuteSqlQuery("SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , SSN , GENDER , DATE_OF_BIRTH INTO {0} , {1} , {2} , {3} , {4} , {5} , {6} , {7} FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = {8} WITH UR ",  //COBOL==> EXEC SQL SELECT CLIENT_NUMBER , CLIENT_GIVEN_NAME , CLIENT_INITIALS , CLIENT_SURNAME , CIS_REPL_IND , SSN , GENDER , DATE_OF_BIRTH INTO :CLB9-CLIENT-NUMBER , :CLB9-CLIENT-GIVEN-NAME , :CLB9-CLIENT-INITIALS , :CLB9-CLIENT-SURNAME , :CLB9-CIS-REPL-IND , :CLB9-SSN , :CLB9-GENDER , :CLB9-DATE-OF-BIRTH FROM KSD_CLIENT_BASIC WHERE CLIENT_NUMBER = :DBK9-CLIENT-NUMBER WITH UR END-EXEC.
                                 WS.CLB9_CLIENT_NUMBER, WS.CLB9_CLIENT_GIVEN_NAME, WS.CLB9_CLIENT_INITIALS, WS.CLB9_CLIENT_SURNAME, WS.CLB9_CIS_REPL_IND, WS.CLB9_SSN, WS.CLB9_GENDER, WS.CLB9_DATE_OF_BIRTH, WS.DBK9_CLIENT_NUMBER);
            // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((WS.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(154);                                                               //COBOL==> MOVE 154 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue(" NF");                                                             //COBOL==> MOVE ' NF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO WS9-ADA-RESPONSE-CD
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(154);                                                               //COBOL==> MOVE 154 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RI");                                                              //COBOL==> MOVE 'RI' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_98000_SELECT_CLIENT_BASIC") { M_98000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_98000_EXIT
        /// </summary>
        private void M_98000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_98000_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_98000_EXIT") { M_98100_SELECT_CLIENT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_98100_SELECT_CLIENT //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_98100_SELECT_CLIENT(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '98100-SELECT-CLIENT:' SW9-SELECT-CLIENT-SW
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            DbConv.ExecuteSqlQuery("SELECT VERIFIED_SSN_FLAG INTO {0} FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = {1} AND CLIENT_NAME = {2} AND SSN = {3} WITH UR ",  //COBOL==> EXEC SQL SELECT VERIFIED_SSN_FLAG INTO :CL9-VERIFIED-SSN-FLAG FROM KSD_CLIENT WHERE FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER AND CLIENT_NAME = :DBK9-CLIENT-NAME AND SSN = :DBK9-SSN WITH UR END-EXEC.
                                 WS.CL9_VERIFIED_SSN_FLAG, WS.DBK9_CLIENT_NUMBER, WS.DBK9_CLIENT_NAME, WS.DBK9_SSN);
            // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                WS.WS9_VERIFIED_SSN_FLAG.SetValue(WS.CL9_VERIFIED_SSN_FLAG);                                        //COBOL==> MOVE CL9-VERIFIED-SSN-FLAG TO WS9-VERIFIED-SSN-FLAG
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((WS.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue(" NF");                                                             //COBOL==> MOVE ' NF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValueWithZeroes();                                                        //COBOL==> MOVE ZERO TO WS9-ADA-RESPONSE-CD
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_98100_SELECT_CLIENT") { M_98100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_98100_EXIT
        /// </summary>
        private void M_98100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_98100_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_98100_EXIT") { M_99000_CLIENT_POINTER_ROUTINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99000_CLIENT_POINTER_ROUTINE //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99000_CLIENT_POINTER_ROUTINE(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            M_99100_PROCESS_INIT("M_99100_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 99100-PROCESS-INIT.
            M_99200_PROCESS_MAIN("M_99200_EXIT"); if (Control.ExitProgram) { return; }                            //COBOL==> PERFORM 99200-PROCESS-MAIN.
            if (returnMethod != "" && returnMethod != "M_99000_CLIENT_POINTER_ROUTINE") { M_99000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99000_EXIT
        /// </summary>
        private void M_99000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99000_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99000_EXIT") { M_99100_PROCESS_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99100_PROCESS_INIT //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99100_PROCESS_INIT(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     INITIALIZE WS9-CLIENT-POINTER
            WS.WS9_ABEND_FIELDS.ResetToInitialValue();                                                          //COBOL==> INITIALIZE WS9-ABEND-FIELDS.
            WS.WS9_CLIENT_ID.SetValue(WS.DBK9_CLIENT_NUMBER);                                                   //COBOL==> MOVE DBK9-CLIENT-NUMBER TO WS9-CLIENT-ID.
            WS.SW9_EOF_NOT_FOUND.SetValue(true);                                                                //COBOL==> SET SW9-EOF-NOT-FOUND TO TRUE.
            WS.SW9_ERR_NO.SetValue(true);                                                                       //COBOL==> SET SW9-ERR-NO TO TRUE.
            if (returnMethod != "" && returnMethod != "M_99100_PROCESS_INIT") { M_99100_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99100_EXIT
        /// </summary>
        private void M_99100_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99100_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99100_EXIT") { M_99200_PROCESS_MAIN(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99200_PROCESS_MAIN //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99200_PROCESS_MAIN(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '992200- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            if (WS.SW9_SELECT_CLIENT_YES.Value)                                                                 //COBOL==> IF SW9-SELECT-CLIENT-YES
            {
                M_98100_SELECT_CLIENT("M_98100_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 98100-SELECT-CLIENT
                if (!(WS.SQLCA.SQLCODE.IsZeros()))                                                                  //COBOL==> IF SQLCODE NOT = ZERO
                {
                    M_99200_EXIT(CheckGotoReturn(returnMethod)); return;                                                //COBOL==> GO TO 99200-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:     PERFORM 99400-DECLARE-SPA-VIEW.
                                                                                                                //COMMENT:     IF SW9-ERR-YES
                                                                                                                //COMMENT:        GO TO 99200-EXIT
                                                                                                                //COMMENT:     END-IF.
            M_99500_OPEN_SPA_VIEW("M_99500_EXIT"); if (Control.ExitProgram) { return; }                           //COBOL==> PERFORM 99500-OPEN-SPA-VIEW.
            if (WS.SW9_ERR_YES.Value)                                                                           //COBOL==> IF SW9-ERR-YES
            {
                M_99200_EXIT(CheckGotoReturn(returnMethod)); return;                                                //COBOL==> GO TO 99200-EXIT
            }                                                                                                   //COBOL==> END-IF.
            while (!((WS.SW9_EOF_YES.Value) || (WS.SW9_ERR_YES.Value)))                                         //COBOL==> PERFORM 99600-FETCH-SPA-VIEW UNTIL SW9-EOF-YES OR SW9-ERR-YES.
            {
                M_99600_FETCH_SPA_VIEW("M_99600_EXIT"); if (Control.ExitProgram) { return; }
            }
            M_99900_CLOSE_SPA_VIEW("M_99900_EXIT"); if (Control.ExitProgram) { return; }                          //COBOL==> PERFORM 99900-CLOSE-SPA-VIEW THRU 99900-EXIT.
            if (returnMethod != "" && returnMethod != "M_99200_PROCESS_MAIN") { M_99200_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99200_EXIT
        /// </summary>
        private void M_99200_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99200_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99200_EXIT") { M_99400_DECLARE_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99400_DECLARE_SPA_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99400_DECLARE_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99400- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW.
            //COMMENT: ** GQB TEMPORARY CODE FOR DISPLAY ***
            //COMMENT:     MOVE 'CLIENT NUMBER/SPA-VIEW  =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK9-CLIENT-NUMBER          TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'SSN/SPA-VIEW            =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK9-SSN                    TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            //COMMENT:     MOVE 'CLIENT NAME/SPA-VIEW    =' TO WS9-MSG-FIELD.
            //COMMENT:     MOVE DBK9-CLIENT-NAME            TO WS9-MSG-VALUE.
            //COMMENT:     DISPLAY WS9-MSG-X.
            DbConv.SetQueryText("SPA-VIEW", "SELECT SYSTEM_CODE, PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = {0}  AND FK_CLI_CLIENT_NAME = {1}  AND FK_CLI_SSN = {2}  WITH UR",  //COBOL==> EXEC SQL DECLARE SPA-VIEW CURSOR FOR SELECT SYSTEM_CODE , PARTICIPATION_FLAG FROM KSD_SYSTEM_PART WHERE FK_CLB_CLIENT_NO = :DBK9-CLIENT-NUMBER AND FK_CLI_CLIENT_NAME = :DBK9-CLIENT-NAME AND FK_CLI_SSN = :DBK9-SSN WITH UR END-EXEC.
                                WS.DBK9_CLIENT_NUMBER, WS.DBK9_CLIENT_NAME, WS.DBK9_SSN);
            if (returnMethod != "" && returnMethod != "M_99400_DECLARE_SPA_VIEW") { M_99400_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99400_EXIT
        /// </summary>
        private void M_99400_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99400_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99400_EXIT") { M_99500_OPEN_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99500_OPEN_SPA_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99500_OPEN_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99500- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            DbConv.OpenReader("SPA-VIEW");                                                                      //COBOL==> EXEC SQL OPEN SPA-VIEW END-EXEC.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW9_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW9-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99500_OPEN_SPA_VIEW") { M_99500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99500_EXIT
        /// </summary>
        private void M_99500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99500_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99500_EXIT") { M_99600_FETCH_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99600_FETCH_SPA_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99600_FETCH_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99600- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            DbConv.FetchReaderRow("SPA-VIEW",                                                                //COBOL==> EXEC SQL FETCH SPA-VIEW INTO :SP9-SYSTEM-CODE , :SP9-PARTICIPATION-FLAG END-EXEC.
                             WS.SP9_SYSTEM_CODE, WS.SP9_PARTICIPATION_FLAG);
            // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                WS.SW9_EOF_NO.SetValue(true);                                                                       //COBOL==> SET SW9-EOF-NO TO TRUE
                M_99610_POPULATE_SYSTEM_CODE("M_99610_EXIT"); if (Control.ExitProgram) { return; }                    //COBOL==> PERFORM 99610-POPULATE-SYSTEM-CODE
            }                                                                                                //COBOL==> WHEN 100
            else
            if ((WS.SQLCA.SQLCODE.IsEqualTo(100)))
            {
                WS.SW9_EOF_YES.SetValue(true);                                                                      //COBOL==> SET SW9-EOF-YES TO TRUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW9_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW9-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99600_FETCH_SPA_VIEW") { M_99600_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99600_EXIT
        /// </summary>
        private void M_99600_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99600_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99600_EXIT") { M_99610_POPULATE_SYSTEM_CODE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99610_POPULATE_SYSTEM_CODE //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99610_POPULATE_SYSTEM_CODE(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            // EvaluateList !TRUE!                                                                              //COBOL==> EVALUATE TRUE
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_AE))                                        //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-AE
            {
                WS.WS9_SYS_PART_AE.SetValue(WS.SP9_PARTICIPATION_FLAG);                                             //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-AE
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-CS
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_CS))
            {
                WS.WS9_SYS_PART_CSE.SetValue(WS.SP9_PARTICIPATION_FLAG);                                            //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-CSE
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-KA
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_KA))
            {
                WS.WS9_SYS_PART_KANPAY.SetValue(WS.SP9_PARTICIPATION_FLAG);                                         //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-KANPAY
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-KS
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_KS))
            {
                WS.WS9_SYS_PART_KSCARES.SetValue(WS.SP9_PARTICIPATION_FLAG);                                        //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-KSCARES
            }                                                                                               //COBOL==> WHEN SP9-SYSTEM-CODE = WS9-SYSTEM-CODE-FA
            else
            if (WS.SP9_SYSTEM_CODE.IsEqualTo(WS.WS9_SYSTEM_CODE_FA))
            {
                WS.WS9_SYS_PART_FACTS.SetValue(WS.SP9_PARTICIPATION_FLAG);                                          //COBOL==> MOVE SP9-PARTICIPATION-FLAG TO WS9-SYS-PART-FACTS
            }                                                                                               //COBOL==> WHEN OTHER
            else
            {
                //COMMENT: ** GQB DISPLAY SQL ERROR MESSAGE ***
                WS.WS9_MSG_1.SetValue("99610-POPULATE FAILED.    SYSTEM-CODE NOT DEFINED=");                        //COBOL==> MOVE '99610-POPULATE FAILED.    SYSTEM-CODE NOT DEFINED=' TO WS9-MSG-1
                WS.WS9_MSG_CODE.SetValue(WS.SP9_SYSTEM_CODE);                                                       //COBOL==> MOVE SP9-SYSTEM-CODE TO WS9-MSG-CODE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99610_POPULATE_SYSTEM_CODE") { M_99610_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99610_EXIT
        /// </summary>
        private void M_99610_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99610_EXIT") { return; }                                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_99610_EXIT") { M_99900_CLOSE_SPA_VIEW(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99900_CLOSE_SPA_VIEW //Section
        /// </summary>
        /// <remarks>
        ///COMMENT: -----------------------------------------------------------------
        /// </remarks>
        private void M_99900_CLOSE_SPA_VIEW(string returnMethod = "")
        {
            //COMMENT: -----------------------------------------------------------------
            //COMMENT:     DISPLAY '99900- CLIENT SELECT SW:' SW9-SELECT-CLIENT-SW
            DbConv.CloseReader("SPA-VIEW");                                                                     //COBOL==> EXEC SQL CLOSE SPA-VIEW END-EXEC.
            if (WS.SW9_ERR_YES.Value)                                                                           //COBOL==> IF SW9-ERR-YES
            {
                M_99900_EXIT(CheckGotoReturn(returnMethod)); return;                                                //COBOL==> GO TO 99900-EXIT
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                // EvaluateList !WS.SQLCA.SQLCODE!                                                                  //COBOL==> EVALUATE SQLCODE
            if ((WS.SQLCA.SQLCODE.IsZeroes()))                                                                  //COBOL==> WHEN ZERO
            {
                //Continue                                                                                          //COBOL==> CONTINUE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                WS.WS9_ABEND_TYPE.SetValue("A");                                                                    //COBOL==> MOVE 'A' TO WS9-ABEND-TYPE
                WS.WS9_ADA_FILE_NUMBER.SetValue(149);                                                               //COBOL==> MOVE 149 TO WS9-ADA-FILE-NUMBER
                WS.WS9_ADA_FILE_ACTION.SetValue("RLF");                                                             //COBOL==> MOVE 'RLF' TO WS9-ADA-FILE-ACTION
                WS.WS9_ADA_RESPONSE_CD.SetValue(WS.SQLCA.SQLCODE);                                                  //COBOL==> MOVE SQLCODE TO WS9-ADA-RESPONSE-CD
                WS.SW9_ERR_YES.SetValue(true);                                                                      //COBOL==> SET SW9-ERR-YES TO TRUE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_99900_CLOSE_SPA_VIEW") { M_99900_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_99900_EXIT
        /// </summary>
        private void M_99900_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_99900_EXIT") { return; }                                                     //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
