#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:46:07 PM
   **        *   FROM COBOL PGM   :  SWEXF700
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   *********************************************************
     SOURCE CODE GENERATED BY CANAM REPORT COMPOSER V4.0.35A
     COPYRIGHT (C) CANAM SOFTWARE LABS, INC. 1995-1998,1999
     REPORT COMPOSER LICENSE INFORMATION:
           STATE OF KANSAS
    EAB DEFINITION NAME:  OCSE-34 REPORT V1.1
    ACTION BLOCK NAME:    EAB-OCSE34-REPORT
    LANGUAGE:             COBOL
    STYLE:                BLOCK MODE REPORT
    TARGET OS:            MVS
    SOURCE:               C:\COOLGEN\MODELS\EXTRN\SWEXF700.CBL
    PRODUCT:              COMPOSER
    GEN DATE:             10/6/1999
    GEN TIME:             24:20:28
    LAST UPDATE USER:     FAIRLEY , COLIN
    LAST UPDATE DATE:     10/6/1999 12:20:28 PM
    IMPORT VIEW SPECIAL ATTRIBUTES
    ------------------------------
    PARM1 - USED TO CONTROL REPORT ACTION AND I/O TYPE
    I/O CONTROL CODE VALUES:
       'OF' - OPEN REPORT FILE
       'AF' - APPEND TO REPORT FILE
       'CF' - CLOSE REPORT FILE
       'VR' - VIEW REPORT FILE (ONLINE ONLY)
       'PR' - PRINT REPORT FILE (ONLINE ONLY)
       'GR' - GENERATE A REPORT LINE
    PARM2 - USED TO OVERRIDE REPORT PROPERTIES AT RUN TIME
    RUNTIME REPORT OPTION VALUES:
       'Y ' - ON OF RECORD ONLY, FORCES KEEP BODY LINES
              TOGETHER OPTION ON
       'N ' - ON OF RECORD ONLY, FORCES KEEP BODY LINES
              TOGETHER OPTION OFF
       '  ' - ON OF RECORD, USE THE KEEP BODY LINES
              TOGETHER SETTING FROM THE EAB DEFINITION
       'S ' - ON GR RECORDS, FORCES SUPPRESSION OF BODY LINE,
              BUT DETAILS WILL STILL BE ACCUMULATED IN COLUMN
              FUNCTIONS AND BREAKS WILL OCCUR IF NECESSARY
       'D ' - ON GR RECORDS, FORCES PRINTING OF BODY LINE, EVEN IF
              SUPPRESS BODY LINES PROPERTY IS SET IN EAB DEFINITION
       '0 ' - ON OF RECORD ONLY, SUPPRESS THE INITIAL PAGE EJECT
       '  ' - ON GR RECORDS, USE THE SUPPRESS BODY LINES PROPERTY
              SET IN EAB DEFINITION
    EXPORT VIEW SPECIAL ATTRIBUTES
    ------------------------------
    PARM1 - USED TO INDICATE ERROR ON I/O
            OR INVALID IMPORT PARM1 OR PARM2
    RETURN CODE VALUES:
       'EO' - ERROR ON OPEN REPORT FILE
       'EC' - ERROR ON CLOSE REPORT FILE
       'ER' - ERROR ON WRITING A REPORT LINE
       'II' - INVALID I/O CONTROL CODE
              (SEE VALID CODES IN PARM1 ABOVE)
       'RI' - INVALID RUNTIME REPORT OPTION
              (SEE VALID CODES IN PARM2 ABOVE)
       'IS' - INVALID SUBREPORT CODE
              (SUBREPORT CODES MUST BE IN UPPERCASE CHARACTERS)
    PARM2 - RETURNS THE FILE STATUS AFTER THE OUTPUT
            OPERATION ON THE REPORT FILE
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.IO.Common;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
using GOV.KS.DCF.CSS.Common.BL;
using MDSY.Framework.IO.Common;
#endregion

namespace GOV.KS.DCF.CSS.Batch.BL
{
    #region File Section Class
    internal class SWEXF700_fd : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string FileSection = "SWEXF700_fd_FileSection";
            internal const string REPORT_FILE = "REPORT_FILE";
            internal const string REPORT_LINE = "REPORT_LINE";
        }
        #endregion

        #region Direct-access element properties
        public IFileLink REPORT_FILE { get; set; }
        public IGroup REPORT_LINE { get { return GetElementByName<IGroup>(Names.REPORT_LINE); } }


        internal SWEXF700_ws WS;
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the FileSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.REPORT_LINE, (REPORT_LINE) =>
           {
               REPORT_LINE.CreateNewFillerField(133, FillWith.Hashes);
           });

        }

        protected override string GetRecordName()
        {
            return Names.FileSection;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            IFileHandler FileHandler = InversionContainer.GetImplementingObject<IFileHandler>();

            REPORT_FILE = FileHandler.GetFile("OCSE34A");
            REPORT_FILE.StatusField = WS.WS_FILE_STATUS;
            REPORT_FILE.AssociatedBuffer = REPORT_LINE;
            REPORT_FILE.RecordLength = 133;
        }
        #endregion

        #region Constructors
        public SWEXF700_fd(SWEXF700_ws ws)
            : base()
        {
            this.WS = ws;
            Initialize();

        }
        #endregion
    }
    #endregion File Section Class
    #region Working Storage Class
    internal class SWEXF700_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXF700_ws_WorkingStorage";
            internal const string WS_FILE_STATUS = "WS_FILE_STATUS";
            internal const string WORK_FIELDS = "WORK_FIELDS";
            internal const string WS_STK_CONTROL_BRK_FLAG = "WS_STK_CONTROL_BRK_FLAG";
            internal const string WS_STK_SECTION_PROCESSING_IND = "WS_STK_SECTION_PROCESSING_IND";
            internal const string WS_VERY_FIRST_WRITE = "WS_VERY_FIRST_WRITE";
            internal const string WS_PG_BRK_FLAG = "WS_PG_BRK_FLAG";
            internal const string WS_PG_BRK = "WS_PG_BRK";
            internal const string WS_PG_BRK_FLAG_SAVE = "WS_PG_BRK_FLAG_SAVE";
            internal const string WS_PRINT_LINE_SPACING = "WS_PRINT_LINE_SPACING";
            internal const string WS_TEMP_PRINT_LINE_SPACING = "WS_TEMP_PRINT_LINE_SPACING";
            internal const string WS_PRINT_RECORD = "WS_PRINT_RECORD";
            internal const string WS_PRINT_LINE = "WS_PRINT_LINE";
            internal const string WS_SPACE_RECORD = "WS_SPACE_RECORD";
            internal const string WS_SPACE_LINE = "WS_SPACE_LINE";
            internal const string WS_TEMP_PRINT_LINE = "WS_TEMP_PRINT_LINE";
            internal const string WS_TEMP_SAVE_PRINT_LINE = "WS_TEMP_SAVE_PRINT_LINE";
            internal const string WS_LINE_COUNT = "WS_LINE_COUNT";
            internal const string WS_PG_LENGTH = "WS_PG_LENGTH";
            internal const string WS_PG_NUMBER = "WS_PG_NUMBER";
            internal const string WS_PG_NUMBER_SAVE = "WS_PG_NUMBER_SAVE";
            internal const string SAVE_FOR_WRAP_TEXT = "SAVE_FOR_WRAP_TEXT";
            internal const string WS_CUR_SUBRPT_CODE = "WS_CUR_SUBRPT_CODE";
            internal const string WS_PREV_SUBRPT_CODE = "WS_PREV_SUBRPT_CODE";
            internal const string WS_CONTROL_BRK_FLAG = "WS_CONTROL_BRK_FLAG";
            internal const string WS_NOT_IN_CONTROL_BRK = "WS_NOT_IN_CONTROL_BRK";
            internal const string WS_SAVE_SECTION_PROCESSING_IND = "WS_SAVE_SECTION_PROCESSING_IND";
            internal const string WS_SAVE_RPT_HDR_IS_PROCESSED = "WS_SAVE_RPT_HDR_IS_PROCESSED";
            internal const string WS_SAVE_RPT_FTR_IS_PROCESSED = "WS_SAVE_RPT_FTR_IS_PROCESSED";
            internal const string WS_SAVE_PG_HDR_IS_PROCESSED = "WS_SAVE_PG_HDR_IS_PROCESSED";
            internal const string WS_SAVE_BODY_IS_PROCESSED = "WS_SAVE_BODY_IS_PROCESSED";
            internal const string WS_RESET_PG_NUMBER = "WS_RESET_PG_NUMBER";
            internal const string WS_SUPPRSS_BLANK_LINE = "WS_SUPPRSS_BLANK_LINE";
            internal const string WS_SUPPRSS_BLANK_LINE_SAVE = "WS_SUPPRSS_BLANK_LINE_SAVE";
            internal const string WS_USER_NULL_DATE = "WS_USER_NULL_DATE";
            internal const string WS_TEMP_LINE_QT = "WS_TEMP_LINE_QT";
            internal const string WS_CUR_SECTION_LINE_QT = "WS_CUR_SECTION_LINE_QT";
            internal const string WS_SAVE_PRINT_ATBOTTM = "WS_SAVE_PRINT_ATBOTTM";
            internal const string WS_TEMP_LINE_COUNT = "WS_TEMP_LINE_COUNT";
            internal const string WS_TEMP_INDX = "WS_TEMP_INDX";
            internal const string WS_MONTH_TEXT_LENGTH = "WS_MONTH_TEXT_LENGTH";
            internal const string PREV_IO_CONTROL_CD = "PREV_IO_CONTROL_CD";
            internal const string DATE_TIME_CONVERSION_FIELDS = "DATE_TIME_CONVERSION_FIELDS";
            internal const string IEF_DATE_TIME = "IEF_DATE_TIME";
            internal const string IEF_DATE = "IEF_DATE";
            internal const string IEF_TIME = "IEF_TIME";
            internal const string DT_YEAR_4 = "DT_YEAR_4";
            internal const string DT_YEAR_2 = "DT_YEAR_2";
            internal const string DT_YEAR_1 = "DT_YEAR_1";
            internal const string DT_MONTH_MM = "DT_MONTH_MM";
            internal const string DT_DAY = "DT_DAY";
            internal const string DT_TIME = "DT_TIME";
            internal const string DT_HOUR = "DT_HOUR";
            internal const string DT_MINUTES = "DT_MINUTES";
            internal const string DT_SECONDS = "DT_SECONDS";
            internal const string DT_MICROSECONDS = "DT_MICROSECONDS";
            internal const string DT_EDIT_PATTERN = "DT_EDIT_PATTERN";
            internal const string TS_EDIT_PATTERN = "TS_EDIT_PATTERN";
            internal const string DT_MONTH_MON = "DT_MONTH_MON";
            internal const string DT_MONTH_MON_U_STRING = "DT_MONTH_MON_U_STRING";
            internal const string DT_MONTH_MON_U_TABLE = "DT_MONTH_MON_U_TABLE";
            internal const string DT_MONTH_MON_U_TEXT = "DT_MONTH_MON_U_TEXT";
            internal const string DT_MONTH_MON_L_STRING = "DT_MONTH_MON_L_STRING";
            internal const string DT_MONTH_MON_L_TABLE = "DT_MONTH_MON_L_TABLE";
            internal const string DT_MONTH_MON_L_TEXT = "DT_MONTH_MON_L_TEXT";
            internal const string DT_MONTH_MONTH = "DT_MONTH_MONTH";
            internal const string DT_MONTH_MONTH_U_STRING = "DT_MONTH_MONTH_U_STRING";
            internal const string DT_MONTH_MONTH_U_TABLE = "DT_MONTH_MONTH_U_TABLE";
            internal const string DT_MONTH_MONTH_U_TEXT = "DT_MONTH_MONTH_U_TEXT";
            internal const string DT_MONTH_MONTH_L_STRING = "DT_MONTH_MONTH_L_STRING";
            internal const string DT_MONTH_MONTH_L_TABLE = "DT_MONTH_MONTH_L_TABLE";
            internal const string DT_MONTH_MONTH_L_TEXT = "DT_MONTH_MONTH_L_TEXT";
            internal const string DT_FORMATTED_DATETIME = "DT_FORMATTED_DATETIME";
            internal const string DT_FORMATTED_DATETIME_TABLE = "DT_FORMATTED_DATETIME_TABLE";
            internal const string DT_FORMATTED_DATETIME_TEXT = "DT_FORMATTED_DATETIME_TEXT";
            internal const string DT_FORMATTED_DATE = "DT_FORMATTED_DATE";
            internal const string DT_FORMATTED_DATE_TABLE = "DT_FORMATTED_DATE_TABLE";
            internal const string DT_FORMATTED_DATE_TEXT = "DT_FORMATTED_DATE_TEXT";
            internal const string DT_FORMATTED_TIME = "DT_FORMATTED_TIME";
            internal const string DT_FORMATTED_TIME_TABLE = "DT_FORMATTED_TIME_TABLE";
            internal const string DT_FORMATTED_TIME_TEXT = "DT_FORMATTED_TIME_TEXT";
            internal const string DT_STRING_COUNT = "DT_STRING_COUNT";
            internal const string DT_STRING_FOUND = "DT_STRING_FOUND";
            internal const string DT_LEAP_YEAR_DAYS1 = "DT_LEAP_YEAR_DAYS1";
            internal const string DT_LEAP_YEAR_TABLE1 = "DT_LEAP_YEAR_TABLE1";
            internal const string DT_NO_LEAP_DAYS = "DT_NO_LEAP_DAYS";
            internal const string DT_LEAP_YEAR_DAYS2 = "DT_LEAP_YEAR_DAYS2";
            internal const string DT_LEAP_YEAR_TABLE1_d2 = "DT_LEAP_YEAR_TABLE1_d2";
            internal const string DT_LEAP_DAYS = "DT_LEAP_DAYS";
            internal const string LEAP_DAY = "LEAP_DAY";
            internal const string LEAP1 = "LEAP1";
            internal const string LEAP2 = "LEAP2";
            internal const string LEAP3 = "LEAP3";
            internal const string DT_START = "DT_START";
            internal const string DT_INDEX = "DT_INDEX";
            internal const string WS_CURRENT_DATE_8 = "WS_CURRENT_DATE_8";
            internal const string WS_CURRENT_DATE_8_CC = "WS_CURRENT_DATE_8_CC";
            internal const string WS_CURRENT_DATE_8_YY = "WS_CURRENT_DATE_8_YY";
            internal const string WS_CURRENT_DATE_8_MM = "WS_CURRENT_DATE_8_MM";
            internal const string WS_CURRENT_DATE_8_DD = "WS_CURRENT_DATE_8_DD";
            internal const string WS_CURRENT_DATE = "WS_CURRENT_DATE";
            internal const string WS_CURRENT_DATE_6 = "WS_CURRENT_DATE_6";
            internal const string WS_CURRENT_DATE_6_YY = "WS_CURRENT_DATE_6_YY";
            internal const string WS_CURRENT_DATE_6_MM = "WS_CURRENT_DATE_6_MM";
            internal const string WS_CURRENT_DATE_6_DD = "WS_CURRENT_DATE_6_DD";
            internal const string WS_CURRENT_TIME = "WS_CURRENT_TIME";
            internal const string WS_CURRENT_TIME_X = "WS_CURRENT_TIME_X";
            internal const string WS_CURRENT_TIME_6 = "WS_CURRENT_TIME_6";
            internal const string WS_UNJUSTIFIED_TEXT_IDX = "WS_UNJUSTIFIED_TEXT_IDX";
            internal const string WS_JUSTIFIED_TEXT_IDX = "WS_JUSTIFIED_TEXT_IDX";
            internal const string WS_JUSTIFY_TEXT_FIELDS = "WS_JUSTIFY_TEXT_FIELDS";
            internal const string WS_UNJUSTIFIED_TEXT_FIELD = "WS_UNJUSTIFIED_TEXT_FIELD";
            internal const string WS_UNJUSTIFIED_TEXT_CHAR = "WS_UNJUSTIFIED_TEXT_CHAR";
            internal const string WS_JUSTIFIED_TEXT_FIELD = "WS_JUSTIFIED_TEXT_FIELD";
            internal const string WS_JUSTIFIED_TEXT_CHAR = "WS_JUSTIFIED_TEXT_CHAR";
            internal const string WS_JUSTIFICATION_TYPE_CD = "WS_JUSTIFICATION_TYPE_CD";
            internal const string WS_JUSTIFIED_NONE = "WS_JUSTIFIED_NONE";
            internal const string WS_JUSTIFIED_LEFT = "WS_JUSTIFIED_LEFT";
            internal const string WS_JUSTIFIED_CENTER = "WS_JUSTIFIED_CENTER";
            internal const string WS_JUSTIFIED_RIGHT = "WS_JUSTIFIED_RIGHT";
            internal const string WS_JUSTIFIED_TEXT_FIELD_LENGTH = "WS_JUSTIFIED_TEXT_FIELD_LENGTH";
            internal const string WS_JUSTIFIED_TEXT_DATA_LENGTH = "WS_JUSTIFIED_TEXT_DATA_LENGTH";
            internal const string WS_JUSTIFIED_FIELD_START = "WS_JUSTIFIED_FIELD_START";
            internal const string WS_FIRST_CHAR = "WS_FIRST_CHAR";
            internal const string WS_LAST_CHAR = "WS_LAST_CHAR";
            internal const string WS_CHAR_CNTR = "WS_CHAR_CNTR";
            internal const string SECC_WORK_FIELDS = "SECC_WORK_FIELDS";
            internal const string WS_SECC_CNTL_HDR_FLAG = "WS_SECC_CNTL_HDR_FLAG";
            internal const string WS_SECC_CNTL_HDR = "WS_SECC_CNTL_HDR";
            internal const string WS_SECC_CNTL_FTR_FLAG = "WS_SECC_CNTL_FTR_FLAG";
            internal const string WS_SECC_CNTL_FTR = "WS_SECC_CNTL_FTR";
            internal const string WS_SECC_RPT_FTR_FLAG = "WS_SECC_RPT_FTR_FLAG";
            internal const string WS_SECC_RPT_FTR = "WS_SECC_RPT_FTR";
            internal const string WS_SECC_DTL_LINE_QT = "WS_SECC_DTL_LINE_QT";
            internal const string WS_SECC_PG_HDR_LINE_QT = "WS_SECC_PG_HDR_LINE_QT";
            internal const string WS_SECC_PG_FTR_LINE_QT = "WS_SECC_PG_FTR_LINE_QT";
            internal const string WS_SECC_RPT_HDR_LINE_QT = "WS_SECC_RPT_HDR_LINE_QT";
            internal const string WS_SECC_RPT_FTR_LINE_QT = "WS_SECC_RPT_FTR_LINE_QT";
            internal const string WS_SECC_LINE_SPACING = "WS_SECC_LINE_SPACING";
            internal const string WS_SECC_RPT_TYPE_CD = "WS_SECC_RPT_TYPE_CD";
            internal const string WS_SECC_SUMMARY_RPT_REQUESTED = "WS_SECC_SUMMARY_RPT_REQUESTED";
            internal const string WS_SECC_DTL_RPT_REQUESTED = "WS_SECC_DTL_RPT_REQUESTED";
            internal const string WS_SECC_SECTION_PROCESSING_IND = "WS_SECC_SECTION_PROCESSING_IND";
            internal const string WS_SECC_RPT_HDR_IS_PROCESSED = "WS_SECC_RPT_HDR_IS_PROCESSED";
            internal const string WS_SECC_RPT_FTR_IS_PROCESSED = "WS_SECC_RPT_FTR_IS_PROCESSED";
            internal const string WS_SECC_PG_HDR_IS_PROCESSED = "WS_SECC_PG_HDR_IS_PROCESSED";
            internal const string WS_SECC_BODY_IS_PROCESSED = "WS_SECC_BODY_IS_PROCESSED";
            internal const string WS_SECC_KEEP_DTL_TOGETHER_FG = "WS_SECC_KEEP_DTL_TOGETHER_FG";
            internal const string WS_SECC_PRINT_PG_BRK_SPACING = "WS_SECC_PRINT_PG_BRK_SPACING";
            internal const string WS_SECC_PRINT_PG_BRK_LINE = "WS_SECC_PRINT_PG_BRK_LINE";
            internal const string WS_SECC_PRINT_RPT_FTR_LINE = "WS_SECC_PRINT_RPT_FTR_LINE";
            internal const string WS_SECC_PG_BRK_FLAG = "WS_SECC_PG_BRK_FLAG";
            internal const string WS_SECC_CUR_RPT_HDR_LINE_NUM = "WS_SECC_CUR_RPT_HDR_LINE_NUM";
            internal const string WS_SECC_CUR_RPT_FTR_LINE_NUM = "WS_SECC_CUR_RPT_FTR_LINE_NUM";
            internal const string WS_SECC_FIRST_TIME_FLAG = "WS_SECC_FIRST_TIME_FLAG";
            internal const string WS_SECC_FIRST_TIME = "WS_SECC_FIRST_TIME";
            internal const string WS_SECC_DISABLE_SUPPRESS = "WS_SECC_DISABLE_SUPPRESS";
            internal const string WS_SECC_SUPPRESS_DUPLICATES = "WS_SECC_SUPPRESS_DUPLICATES";
            internal const string WS_SECC_PRINT_DUPLICATES = "WS_SECC_PRINT_DUPLICATES";
            internal const string WS_SECC_BODY_SECTION_LINES = "WS_SECC_BODY_SECTION_LINES";
            internal const string WS_SECC_BODY_SUPPRESS_LINES = "WS_SECC_BODY_SUPPRESS_LINES";
            internal const string WS_SECC_GR_COUNTER = "WS_SECC_GR_COUNTER";
            internal const string WS_SECC_PAGE_SUPPRESS = "WS_SECC_PAGE_SUPPRESS";
            internal const string WS_SECC_PAGE_SUPPRESS_AFTER = "WS_SECC_PAGE_SUPPRESS_AFTER";
            internal const string WS_SECC_PAGE_DTL_LINES = "WS_SECC_PAGE_DTL_LINES";
            internal const string WS_SECC_CURRENTLY_WRAPPING = "WS_SECC_CURRENTLY_WRAPPING";
            internal const string WS_SECC_CUR_PRINTING_PAGE_HDR = "WS_SECC_CUR_PRINTING_PAGE_HDR";
            internal const string SECC_EDIT_PATTERN_OBJ12 = "SECC_EDIT_PATTERN_OBJ12";
            internal const string SECC_EDIT_PATTERN_OBJ84 = "SECC_EDIT_PATTERN_OBJ84";
            internal const string SECC_EDIT_PATTERN_OBJ85 = "SECC_EDIT_PATTERN_OBJ85";
            internal const string SECC_EDIT_PATTERN_OBJ86 = "SECC_EDIT_PATTERN_OBJ86";
            internal const string SECC_EDIT_PATTERN_OBJ87 = "SECC_EDIT_PATTERN_OBJ87";
            internal const string SECC_EDIT_PATTERN_OBJ88 = "SECC_EDIT_PATTERN_OBJ88";
            internal const string SECC_EDIT_PATTERN_OBJ89 = "SECC_EDIT_PATTERN_OBJ89";
            internal const string SECC_EDIT_PATTERN_OBJ90 = "SECC_EDIT_PATTERN_OBJ90";
            internal const string SECC_EDIT_PATTERN_OBJ91 = "SECC_EDIT_PATTERN_OBJ91";
            internal const string SECC_EDIT_PATTERN_OBJ92 = "SECC_EDIT_PATTERN_OBJ92";
            internal const string SECC_EDIT_PATTERN_OBJ93 = "SECC_EDIT_PATTERN_OBJ93";
            internal const string SECC_EDIT_PATTERN_OBJ94 = "SECC_EDIT_PATTERN_OBJ94";
            internal const string SECC_DTL_LINE_SECTION = "SECC_DTL_LINE_SECTION";
            internal const string SECC_DTL_LINE_BEFORE_SPACE = "SECC_DTL_LINE_BEFORE_SPACE";
            internal const string SECC_DTL_LINE_AFTER_SPACING = "SECC_DTL_LINE_AFTER_SPACING";
            internal const string SECC_DTL_LINE_RESETPG_AFTER = "SECC_DTL_LINE_RESETPG_AFTER";
            internal const string SECC_DTL_LINE_KEEP_TOGETHER = "SECC_DTL_LINE_KEEP_TOGETHER";
            internal const string SECC_DTL_LINE_SUPPRSS_BLANK = "SECC_DTL_LINE_SUPPRSS_BLANK";
            internal const string SECC_DTL_LINE_PRINT_ATBOTTM = "SECC_DTL_LINE_PRINT_ATBOTTM";
            internal const string SECC_DTL_LINE_KEEP_WITHNEXT = "SECC_DTL_LINE_KEEP_WITHNEXT";
            internal const string SECC_DTL_LINE_BEFORE_PG_BRK = "SECC_DTL_LINE_BEFORE_PG_BRK";
            internal const string SECC_DTL_LINE_AFTER_PG_BRK = "SECC_DTL_LINE_AFTER_PG_BRK";
            internal const string SECC_DTL_LINE_PRINT_FLAG = "SECC_DTL_LINE_PRINT_FLAG";
            internal const string SECC_DTL_LINE_0 = "SECC_DTL_LINE_0";
            internal const string SECC_DTL_LINE_1 = "SECC_DTL_LINE_1";
            internal const string SECC_DTL_LINE_2 = "SECC_DTL_LINE_2";
            internal const string SECC_DTL_LINE_3 = "SECC_DTL_LINE_3";
            internal const string SECC_DTL_LINE_4 = "SECC_DTL_LINE_4";
            internal const string SECC_DTL_LINE_5 = "SECC_DTL_LINE_5";
            internal const string SECC_DTL_LINE_6 = "SECC_DTL_LINE_6";
            internal const string SECC_DTL_LINE_6_A_OBJ84 = "SECC_DTL_LINE_6_A_OBJ84";
            internal const string SECC_DTL_SUPRES_6_A_OBJ84 = "SECC_DTL_SUPRES_6_A_OBJ84";
            internal const string SECC_DTL_LINE_6_A_OBJ85 = "SECC_DTL_LINE_6_A_OBJ85";
            internal const string SECC_DTL_SUPRES_6_A_OBJ85 = "SECC_DTL_SUPRES_6_A_OBJ85";
            internal const string SECC_DTL_LINE_6_A_OBJ86 = "SECC_DTL_LINE_6_A_OBJ86";
            internal const string SECC_DTL_SUPRES_6_A_OBJ86 = "SECC_DTL_SUPRES_6_A_OBJ86";
            internal const string SECC_DTL_LINE_6_A_OBJ87 = "SECC_DTL_LINE_6_A_OBJ87";
            internal const string SECC_DTL_SUPRES_6_A_OBJ87 = "SECC_DTL_SUPRES_6_A_OBJ87";
            internal const string SECC_DTL_LINE_7 = "SECC_DTL_LINE_7";
            internal const string SECC_DTL_LINE_8 = "SECC_DTL_LINE_8";
            internal const string SECC_DTL_LINE_8_A_OBJ88 = "SECC_DTL_LINE_8_A_OBJ88";
            internal const string SECC_DTL_SUPRES_8_A_OBJ88 = "SECC_DTL_SUPRES_8_A_OBJ88";
            internal const string SECC_DTL_LINE_8_A_OBJ89 = "SECC_DTL_LINE_8_A_OBJ89";
            internal const string SECC_DTL_SUPRES_8_A_OBJ89 = "SECC_DTL_SUPRES_8_A_OBJ89";
            internal const string SECC_DTL_LINE_8_A_OBJ90 = "SECC_DTL_LINE_8_A_OBJ90";
            internal const string SECC_DTL_SUPRES_8_A_OBJ90 = "SECC_DTL_SUPRES_8_A_OBJ90";
            internal const string SECC_DTL_LINE_9 = "SECC_DTL_LINE_9";
            internal const string SECC_DTL_LINE_10 = "SECC_DTL_LINE_10";
            internal const string SECC_DTL_LINE_10_A_OBJ91 = "SECC_DTL_LINE_10_A_OBJ91";
            internal const string SECC_DTL_SUPRES_10_A_OBJ91 = "SECC_DTL_SUPRES_10_A_OBJ91";
            internal const string SECC_DTL_LINE_10_A_OBJ92 = "SECC_DTL_LINE_10_A_OBJ92";
            internal const string SECC_DTL_SUPRES_10_A_OBJ92 = "SECC_DTL_SUPRES_10_A_OBJ92";
            internal const string SECC_DTL_LINE_10_A_OBJ93 = "SECC_DTL_LINE_10_A_OBJ93";
            internal const string SECC_DTL_SUPRES_10_A_OBJ93 = "SECC_DTL_SUPRES_10_A_OBJ93";
            internal const string SECC_DTL_LINE_11 = "SECC_DTL_LINE_11";
            internal const string SECC_DTL_LINE_12 = "SECC_DTL_LINE_12";
            internal const string SECC_DTL_LINE_12_A_OBJ94 = "SECC_DTL_LINE_12_A_OBJ94";
            internal const string SECC_DTL_SUPRES_12_A_OBJ94 = "SECC_DTL_SUPRES_12_A_OBJ94";
            internal const string SECC_DTL_LINE_13 = "SECC_DTL_LINE_13";
            internal const string SECC_DTL_LINE_14 = "SECC_DTL_LINE_14";
            internal const string SECC_DTL_LINE_15 = "SECC_DTL_LINE_15";
            internal const string SECC_DTL_LINE_16 = "SECC_DTL_LINE_16";
            internal const string SECC_DTL_LINE_17 = "SECC_DTL_LINE_17";
            internal const string SECC_DTL_LINE_18 = "SECC_DTL_LINE_18";
            internal const string SECC_DTL_LINE_19 = "SECC_DTL_LINE_19";
            internal const string SECC_DTL_LINE_20 = "SECC_DTL_LINE_20";
            internal const string SECC_DTL_LINE_21 = "SECC_DTL_LINE_21";
            internal const string SECC_DTL_LINE_22 = "SECC_DTL_LINE_22";
            internal const string SECC_DTL_LINE_23 = "SECC_DTL_LINE_23";
            internal const string SECC_DTL_LINE_24 = "SECC_DTL_LINE_24";
            internal const string SECC_DTL_LINE_25 = "SECC_DTL_LINE_25";
            internal const string SECC_DTL_LINE_26 = "SECC_DTL_LINE_26";
            internal const string SECC_DTL_LINE_27 = "SECC_DTL_LINE_27";
            internal const string SECC_PAGE_HDR_SECTION = "SECC_PAGE_HDR_SECTION";
            internal const string SECC_PAGE_HDR_BEFORE_SPACE = "SECC_PAGE_HDR_BEFORE_SPACE";
            internal const string SECC_PAGE_HDR_AFTER_SPACING = "SECC_PAGE_HDR_AFTER_SPACING";
            internal const string SECC_PAGE_HDR_RESETPG_AFTER = "SECC_PAGE_HDR_RESETPG_AFTER";
            internal const string SECC_PAGE_HDR_KEEP_TOGETHER = "SECC_PAGE_HDR_KEEP_TOGETHER";
            internal const string SECC_PAGE_HDR_SUPPRSS_BLANK = "SECC_PAGE_HDR_SUPPRSS_BLANK";
            internal const string SECC_PAGE_HDR_PRINT_ATBOTTM = "SECC_PAGE_HDR_PRINT_ATBOTTM";
            internal const string SECC_PAGE_HDR_KEEP_WITHNEXT = "SECC_PAGE_HDR_KEEP_WITHNEXT";
            internal const string SECC_PAGE_HDR_BEFORE_PG_BRK = "SECC_PAGE_HDR_BEFORE_PG_BRK";
            internal const string SECC_PAGE_HDR_AFTER_PG_BRK = "SECC_PAGE_HDR_AFTER_PG_BRK";
            internal const string SECC_PAGE_HDR_PRINT_FLAG = "SECC_PAGE_HDR_PRINT_FLAG";
            internal const string SECC_PAGE_HDR_0 = "SECC_PAGE_HDR_0";
            internal const string SECC_PAGE_HDR_0_P_OBJ4 = "SECC_PAGE_HDR_0_P_OBJ4";
            internal const string SECC_PAGE_HDR_1 = "SECC_PAGE_HDR_1";
            internal const string SECC_PAGE_HDR_1_D_OBJ6 = "SECC_PAGE_HDR_1_D_OBJ6";
            internal const string SECC_PAGE_HDR_2 = "SECC_PAGE_HDR_2";
            internal const string SECC_PAGE_HDR_2_T_OBJ9 = "SECC_PAGE_HDR_2_T_OBJ9";
            internal const string SECC_PAGE_HDR_3 = "SECC_PAGE_HDR_3";
            internal const string SECC_PAGE_HDR_3_A_OBJ12 = "SECC_PAGE_HDR_3_A_OBJ12";
            internal const string MAIN_WORK_FIELDS = "MAIN_WORK_FIELDS";
            internal const string WS_MAIN_CNTL_HDR_FLAG = "WS_MAIN_CNTL_HDR_FLAG";
            internal const string WS_MAIN_CNTL_HDR = "WS_MAIN_CNTL_HDR";
            internal const string WS_MAIN_CNTL_FTR_FLAG = "WS_MAIN_CNTL_FTR_FLAG";
            internal const string WS_MAIN_CNTL_FTR = "WS_MAIN_CNTL_FTR";
            internal const string WS_MAIN_RPT_FTR_FLAG = "WS_MAIN_RPT_FTR_FLAG";
            internal const string WS_MAIN_RPT_FTR = "WS_MAIN_RPT_FTR";
            internal const string WS_MAIN_DTL_LINE_QT = "WS_MAIN_DTL_LINE_QT";
            internal const string WS_MAIN_PG_HDR_LINE_QT = "WS_MAIN_PG_HDR_LINE_QT";
            internal const string WS_MAIN_PG_FTR_LINE_QT = "WS_MAIN_PG_FTR_LINE_QT";
            internal const string WS_MAIN_RPT_HDR_LINE_QT = "WS_MAIN_RPT_HDR_LINE_QT";
            internal const string WS_MAIN_RPT_FTR_LINE_QT = "WS_MAIN_RPT_FTR_LINE_QT";
            internal const string WS_MAIN_LINE_SPACING = "WS_MAIN_LINE_SPACING";
            internal const string WS_MAIN_RPT_TYPE_CD = "WS_MAIN_RPT_TYPE_CD";
            internal const string WS_MAIN_SUMMARY_RPT_REQUESTED = "WS_MAIN_SUMMARY_RPT_REQUESTED";
            internal const string WS_MAIN_DTL_RPT_REQUESTED = "WS_MAIN_DTL_RPT_REQUESTED";
            internal const string WS_MAIN_SECTION_PROCESSING_IND = "WS_MAIN_SECTION_PROCESSING_IND";
            internal const string WS_MAIN_RPT_HDR_IS_PROCESSED = "WS_MAIN_RPT_HDR_IS_PROCESSED";
            internal const string WS_MAIN_RPT_FTR_IS_PROCESSED = "WS_MAIN_RPT_FTR_IS_PROCESSED";
            internal const string WS_MAIN_PG_HDR_IS_PROCESSED = "WS_MAIN_PG_HDR_IS_PROCESSED";
            internal const string WS_MAIN_BODY_IS_PROCESSED = "WS_MAIN_BODY_IS_PROCESSED";
            internal const string WS_MAIN_KEEP_DTL_TOGETHER_FG = "WS_MAIN_KEEP_DTL_TOGETHER_FG";
            internal const string WS_MAIN_PRINT_PG_BRK_SPACING = "WS_MAIN_PRINT_PG_BRK_SPACING";
            internal const string WS_MAIN_PRINT_PG_BRK_LINE = "WS_MAIN_PRINT_PG_BRK_LINE";
            internal const string WS_MAIN_PRINT_RPT_FTR_LINE = "WS_MAIN_PRINT_RPT_FTR_LINE";
            internal const string WS_MAIN_PG_BRK_FLAG = "WS_MAIN_PG_BRK_FLAG";
            internal const string WS_MAIN_CUR_RPT_HDR_LINE_NUM = "WS_MAIN_CUR_RPT_HDR_LINE_NUM";
            internal const string WS_MAIN_CUR_RPT_FTR_LINE_NUM = "WS_MAIN_CUR_RPT_FTR_LINE_NUM";
            internal const string WS_MAIN_FIRST_TIME_FLAG = "WS_MAIN_FIRST_TIME_FLAG";
            internal const string WS_MAIN_FIRST_TIME = "WS_MAIN_FIRST_TIME";
            internal const string WS_MAIN_DISABLE_SUPPRESS = "WS_MAIN_DISABLE_SUPPRESS";
            internal const string WS_MAIN_SUPPRESS_DUPLICATES = "WS_MAIN_SUPPRESS_DUPLICATES";
            internal const string WS_MAIN_PRINT_DUPLICATES = "WS_MAIN_PRINT_DUPLICATES";
            internal const string WS_MAIN_BODY_SECTION_LINES = "WS_MAIN_BODY_SECTION_LINES";
            internal const string WS_MAIN_BODY_SUPPRESS_LINES = "WS_MAIN_BODY_SUPPRESS_LINES";
            internal const string WS_MAIN_GR_COUNTER = "WS_MAIN_GR_COUNTER";
            internal const string WS_MAIN_PAGE_SUPPRESS = "WS_MAIN_PAGE_SUPPRESS";
            internal const string WS_MAIN_PAGE_SUPPRESS_AFTER = "WS_MAIN_PAGE_SUPPRESS_AFTER";
            internal const string WS_MAIN_PAGE_DTL_LINES = "WS_MAIN_PAGE_DTL_LINES";
            internal const string WS_MAIN_CURRENTLY_WRAPPING = "WS_MAIN_CURRENTLY_WRAPPING";
            internal const string WS_MAIN_CUR_PRINTING_PAGE_HDR = "WS_MAIN_CUR_PRINTING_PAGE_HDR";
            internal const string MAIN_EDIT_PATTERN_OBJ6 = "MAIN_EDIT_PATTERN_OBJ6";
            internal const string MAIN_EDIT_PATTERN_OBJ200 = "MAIN_EDIT_PATTERN_OBJ200";
            internal const string MAIN_EDIT_PATTERN_OBJ201 = "MAIN_EDIT_PATTERN_OBJ201";
            internal const string MAIN_EDIT_PATTERN_OBJ202 = "MAIN_EDIT_PATTERN_OBJ202";
            internal const string MAIN_EDIT_PATTERN_OBJ210 = "MAIN_EDIT_PATTERN_OBJ210";
            internal const string MAIN_EDIT_PATTERN_OBJ207 = "MAIN_EDIT_PATTERN_OBJ207";
            internal const string MAIN_EDIT_PATTERN_OBJ214 = "MAIN_EDIT_PATTERN_OBJ214";
            internal const string MAIN_EDIT_PATTERN_OBJ208 = "MAIN_EDIT_PATTERN_OBJ208";
            internal const string MAIN_EDIT_PATTERN_OBJ215 = "MAIN_EDIT_PATTERN_OBJ215";
            internal const string MAIN_EDIT_PATTERN_OBJ209 = "MAIN_EDIT_PATTERN_OBJ209";
            internal const string MAIN_EDIT_PATTERN_OBJ216 = "MAIN_EDIT_PATTERN_OBJ216";
            internal const string MAIN_EDIT_PATTERN_OBJ219 = "MAIN_EDIT_PATTERN_OBJ219";
            internal const string MAIN_EDIT_PATTERN_OBJ221 = "MAIN_EDIT_PATTERN_OBJ221";
            internal const string MAIN_EDIT_PATTERN_OBJ227 = "MAIN_EDIT_PATTERN_OBJ227";
            internal const string MAIN_EDIT_PATTERN_OBJ228 = "MAIN_EDIT_PATTERN_OBJ228";
            internal const string MAIN_EDIT_PATTERN_OBJ229 = "MAIN_EDIT_PATTERN_OBJ229";
            internal const string MAIN_EDIT_PATTERN_OBJ220 = "MAIN_EDIT_PATTERN_OBJ220";
            internal const string MAIN_EDIT_PATTERN_OBJ230 = "MAIN_EDIT_PATTERN_OBJ230";
            internal const string MAIN_EDIT_PATTERN_OBJ231 = "MAIN_EDIT_PATTERN_OBJ231";
            internal const string MAIN_EDIT_PATTERN_OBJ247 = "MAIN_EDIT_PATTERN_OBJ247";
            internal const string MAIN_EDIT_PATTERN_OBJ248 = "MAIN_EDIT_PATTERN_OBJ248";
            internal const string MAIN_EDIT_PATTERN_OBJ249 = "MAIN_EDIT_PATTERN_OBJ249";
            internal const string MAIN_EDIT_PATTERN_OBJ250 = "MAIN_EDIT_PATTERN_OBJ250";
            internal const string MAIN_EDIT_PATTERN_OBJ251 = "MAIN_EDIT_PATTERN_OBJ251";
            internal const string MAIN_EDIT_PATTERN_OBJ252 = "MAIN_EDIT_PATTERN_OBJ252";
            internal const string MAIN_EDIT_PATTERN_OBJ253 = "MAIN_EDIT_PATTERN_OBJ253";
            internal const string MAIN_EDIT_PATTERN_OBJ254 = "MAIN_EDIT_PATTERN_OBJ254";
            internal const string MAIN_EDIT_PATTERN_OBJ255 = "MAIN_EDIT_PATTERN_OBJ255";
            internal const string MAIN_EDIT_PATTERN_OBJ256 = "MAIN_EDIT_PATTERN_OBJ256";
            internal const string MAIN_EDIT_PATTERN_OBJ257 = "MAIN_EDIT_PATTERN_OBJ257";
            internal const string MAIN_EDIT_PATTERN_OBJ258 = "MAIN_EDIT_PATTERN_OBJ258";
            internal const string MAIN_EDIT_PATTERN_OBJ259 = "MAIN_EDIT_PATTERN_OBJ259";
            internal const string MAIN_EDIT_PATTERN_OBJ260 = "MAIN_EDIT_PATTERN_OBJ260";
            internal const string MAIN_EDIT_PATTERN_OBJ261 = "MAIN_EDIT_PATTERN_OBJ261";
            internal const string MAIN_EDIT_PATTERN_OBJ262 = "MAIN_EDIT_PATTERN_OBJ262";
            internal const string MAIN_EDIT_PATTERN_OBJ263 = "MAIN_EDIT_PATTERN_OBJ263";
            internal const string MAIN_EDIT_PATTERN_OBJ264 = "MAIN_EDIT_PATTERN_OBJ264";
            internal const string MAIN_EDIT_PATTERN_OBJ265 = "MAIN_EDIT_PATTERN_OBJ265";
            internal const string MAIN_EDIT_PATTERN_OBJ266 = "MAIN_EDIT_PATTERN_OBJ266";
            internal const string MAIN_EDIT_PATTERN_OBJ267 = "MAIN_EDIT_PATTERN_OBJ267";
            internal const string MAIN_DTL_LINE_SECTION = "MAIN_DTL_LINE_SECTION";
            internal const string MAIN_DTL_LINE_BEFORE_SPACE = "MAIN_DTL_LINE_BEFORE_SPACE";
            internal const string MAIN_DTL_LINE_AFTER_SPACING = "MAIN_DTL_LINE_AFTER_SPACING";
            internal const string MAIN_DTL_LINE_RESETPG_AFTER = "MAIN_DTL_LINE_RESETPG_AFTER";
            internal const string MAIN_DTL_LINE_KEEP_TOGETHER = "MAIN_DTL_LINE_KEEP_TOGETHER";
            internal const string MAIN_DTL_LINE_SUPPRSS_BLANK = "MAIN_DTL_LINE_SUPPRSS_BLANK";
            internal const string MAIN_DTL_LINE_PRINT_ATBOTTM = "MAIN_DTL_LINE_PRINT_ATBOTTM";
            internal const string MAIN_DTL_LINE_KEEP_WITHNEXT = "MAIN_DTL_LINE_KEEP_WITHNEXT";
            internal const string MAIN_DTL_LINE_BEFORE_PG_BRK = "MAIN_DTL_LINE_BEFORE_PG_BRK";
            internal const string MAIN_DTL_LINE_AFTER_PG_BRK = "MAIN_DTL_LINE_AFTER_PG_BRK";
            internal const string MAIN_DTL_LINE_PRINT_FLAG = "MAIN_DTL_LINE_PRINT_FLAG";
            internal const string MAIN_DTL_LINE_0 = "MAIN_DTL_LINE_0";
            internal const string MAIN_DTL_LINE_1 = "MAIN_DTL_LINE_1";
            internal const string MAIN_DTL_LINE_2 = "MAIN_DTL_LINE_2";
            internal const string MAIN_DTL_LINE_3 = "MAIN_DTL_LINE_3";
            internal const string MAIN_DTL_LINE_4 = "MAIN_DTL_LINE_4";
            internal const string MAIN_DTL_LINE_4_A_OBJ200 = "MAIN_DTL_LINE_4_A_OBJ200";
            internal const string MAIN_DTL_SUPRES_4_A_OBJ200 = "MAIN_DTL_SUPRES_4_A_OBJ200";
            internal const string MAIN_DTL_LINE_5 = "MAIN_DTL_LINE_5";
            internal const string MAIN_DTL_LINE_6 = "MAIN_DTL_LINE_6";
            internal const string MAIN_DTL_LINE_6_A_OBJ201 = "MAIN_DTL_LINE_6_A_OBJ201";
            internal const string MAIN_DTL_SUPRES_6_A_OBJ201 = "MAIN_DTL_SUPRES_6_A_OBJ201";
            internal const string MAIN_DTL_LINE_7 = "MAIN_DTL_LINE_7";
            internal const string MAIN_DTL_LINE_8 = "MAIN_DTL_LINE_8";
            internal const string MAIN_DTL_LINE_8_A_OBJ202 = "MAIN_DTL_LINE_8_A_OBJ202";
            internal const string MAIN_DTL_SUPRES_8_A_OBJ202 = "MAIN_DTL_SUPRES_8_A_OBJ202";
            internal const string MAIN_DTL_LINE_8_A_OBJ210 = "MAIN_DTL_LINE_8_A_OBJ210";
            internal const string MAIN_DTL_SUPRES_8_A_OBJ210 = "MAIN_DTL_SUPRES_8_A_OBJ210";
            internal const string MAIN_DTL_LINE_9 = "MAIN_DTL_LINE_9";
            internal const string MAIN_DTL_LINE_10 = "MAIN_DTL_LINE_10";
            internal const string MAIN_DTL_LINE_10_A_OBJ207 = "MAIN_DTL_LINE_10_A_OBJ207";
            internal const string MAIN_DTL_SUPRES_10_A_OBJ207 = "MAIN_DTL_SUPRES_10_A_OBJ207";
            internal const string MAIN_DTL_LINE_10_A_OBJ214 = "MAIN_DTL_LINE_10_A_OBJ214";
            internal const string MAIN_DTL_SUPRES_10_A_OBJ214 = "MAIN_DTL_SUPRES_10_A_OBJ214";
            internal const string MAIN_DTL_LINE_11 = "MAIN_DTL_LINE_11";
            internal const string MAIN_DTL_LINE_12 = "MAIN_DTL_LINE_12";
            internal const string MAIN_DTL_LINE_12_A_OBJ208 = "MAIN_DTL_LINE_12_A_OBJ208";
            internal const string MAIN_DTL_SUPRES_12_A_OBJ208 = "MAIN_DTL_SUPRES_12_A_OBJ208";
            internal const string MAIN_DTL_LINE_12_A_OBJ215 = "MAIN_DTL_LINE_12_A_OBJ215";
            internal const string MAIN_DTL_SUPRES_12_A_OBJ215 = "MAIN_DTL_SUPRES_12_A_OBJ215";
            internal const string MAIN_DTL_LINE_13 = "MAIN_DTL_LINE_13";
            internal const string MAIN_DTL_LINE_14 = "MAIN_DTL_LINE_14";
            internal const string MAIN_DTL_LINE_14_A_OBJ209 = "MAIN_DTL_LINE_14_A_OBJ209";
            internal const string MAIN_DTL_SUPRES_14_A_OBJ209 = "MAIN_DTL_SUPRES_14_A_OBJ209";
            internal const string MAIN_DTL_LINE_15 = "MAIN_DTL_LINE_15";
            internal const string MAIN_DTL_LINE_16 = "MAIN_DTL_LINE_16";
            internal const string MAIN_DTL_LINE_16_A_OBJ216 = "MAIN_DTL_LINE_16_A_OBJ216";
            internal const string MAIN_DTL_SUPRES_16_A_OBJ216 = "MAIN_DTL_SUPRES_16_A_OBJ216";
            internal const string MAIN_DTL_LINE_17 = "MAIN_DTL_LINE_17";
            internal const string MAIN_DTL_LINE_18 = "MAIN_DTL_LINE_18";
            internal const string MAIN_DTL_LINE_18_A_OBJ219 = "MAIN_DTL_LINE_18_A_OBJ219";
            internal const string MAIN_DTL_SUPRES_18_A_OBJ219 = "MAIN_DTL_SUPRES_18_A_OBJ219";
            internal const string MAIN_DTL_LINE_19 = "MAIN_DTL_LINE_19";
            internal const string MAIN_DTL_LINE_20 = "MAIN_DTL_LINE_20";
            internal const string MAIN_DTL_LINE_21 = "MAIN_DTL_LINE_21";
            internal const string MAIN_DTL_LINE_22 = "MAIN_DTL_LINE_22";
            internal const string MAIN_DTL_LINE_23 = "MAIN_DTL_LINE_23";
            internal const string MAIN_DTL_LINE_23_A_OBJ221 = "MAIN_DTL_LINE_23_A_OBJ221";
            internal const string MAIN_DTL_SUPRES_23_A_OBJ221 = "MAIN_DTL_SUPRES_23_A_OBJ221";
            internal const string MAIN_DTL_LINE_23_A_OBJ227 = "MAIN_DTL_LINE_23_A_OBJ227";
            internal const string MAIN_DTL_SUPRES_23_A_OBJ227 = "MAIN_DTL_SUPRES_23_A_OBJ227";
            internal const string MAIN_DTL_LINE_23_A_OBJ228 = "MAIN_DTL_LINE_23_A_OBJ228";
            internal const string MAIN_DTL_SUPRES_23_A_OBJ228 = "MAIN_DTL_SUPRES_23_A_OBJ228";
            internal const string MAIN_DTL_LINE_23_A_OBJ229 = "MAIN_DTL_LINE_23_A_OBJ229";
            internal const string MAIN_DTL_SUPRES_23_A_OBJ229 = "MAIN_DTL_SUPRES_23_A_OBJ229";
            internal const string MAIN_DTL_LINE_23_A_OBJ220 = "MAIN_DTL_LINE_23_A_OBJ220";
            internal const string MAIN_DTL_SUPRES_23_A_OBJ220 = "MAIN_DTL_SUPRES_23_A_OBJ220";
            internal const string MAIN_DTL_LINE_24 = "MAIN_DTL_LINE_24";
            internal const string MAIN_DTL_LINE_25 = "MAIN_DTL_LINE_25";
            internal const string MAIN_DTL_LINE_25_A_OBJ230 = "MAIN_DTL_LINE_25_A_OBJ230";
            internal const string MAIN_DTL_SUPRES_25_A_OBJ230 = "MAIN_DTL_SUPRES_25_A_OBJ230";
            internal const string MAIN_DTL_LINE_26 = "MAIN_DTL_LINE_26";
            internal const string MAIN_DTL_LINE_27 = "MAIN_DTL_LINE_27";
            internal const string MAIN_DTL_LINE_28 = "MAIN_DTL_LINE_28";
            internal const string MAIN_DTL_LINE_29 = "MAIN_DTL_LINE_29";
            internal const string MAIN_DTL_LINE_30 = "MAIN_DTL_LINE_30";
            internal const string MAIN_DTL_LINE_30_A_OBJ231 = "MAIN_DTL_LINE_30_A_OBJ231";
            internal const string MAIN_DTL_SUPRES_30_A_OBJ231 = "MAIN_DTL_SUPRES_30_A_OBJ231";
            internal const string MAIN_DTL_LINE_30_A_OBJ247 = "MAIN_DTL_LINE_30_A_OBJ247";
            internal const string MAIN_DTL_SUPRES_30_A_OBJ247 = "MAIN_DTL_SUPRES_30_A_OBJ247";
            internal const string MAIN_DTL_LINE_30_A_OBJ248 = "MAIN_DTL_LINE_30_A_OBJ248";
            internal const string MAIN_DTL_SUPRES_30_A_OBJ248 = "MAIN_DTL_SUPRES_30_A_OBJ248";
            internal const string MAIN_DTL_LINE_30_A_OBJ249 = "MAIN_DTL_LINE_30_A_OBJ249";
            internal const string MAIN_DTL_SUPRES_30_A_OBJ249 = "MAIN_DTL_SUPRES_30_A_OBJ249";
            internal const string MAIN_DTL_LINE_31 = "MAIN_DTL_LINE_31";
            internal const string MAIN_DTL_LINE_32 = "MAIN_DTL_LINE_32";
            internal const string MAIN_DTL_LINE_32_A_OBJ250 = "MAIN_DTL_LINE_32_A_OBJ250";
            internal const string MAIN_DTL_SUPRES_32_A_OBJ250 = "MAIN_DTL_SUPRES_32_A_OBJ250";
            internal const string MAIN_DTL_LINE_32_A_OBJ251 = "MAIN_DTL_LINE_32_A_OBJ251";
            internal const string MAIN_DTL_SUPRES_32_A_OBJ251 = "MAIN_DTL_SUPRES_32_A_OBJ251";
            internal const string MAIN_DTL_LINE_32_A_OBJ252 = "MAIN_DTL_LINE_32_A_OBJ252";
            internal const string MAIN_DTL_SUPRES_32_A_OBJ252 = "MAIN_DTL_SUPRES_32_A_OBJ252";
            internal const string MAIN_DTL_LINE_32_A_OBJ253 = "MAIN_DTL_LINE_32_A_OBJ253";
            internal const string MAIN_DTL_SUPRES_32_A_OBJ253 = "MAIN_DTL_SUPRES_32_A_OBJ253";
            internal const string MAIN_DTL_LINE_32_A_OBJ254 = "MAIN_DTL_LINE_32_A_OBJ254";
            internal const string MAIN_DTL_SUPRES_32_A_OBJ254 = "MAIN_DTL_SUPRES_32_A_OBJ254";
            internal const string MAIN_DTL_LINE_33 = "MAIN_DTL_LINE_33";
            internal const string MAIN_DTL_LINE_34 = "MAIN_DTL_LINE_34";
            internal const string MAIN_DTL_LINE_34_A_OBJ255 = "MAIN_DTL_LINE_34_A_OBJ255";
            internal const string MAIN_DTL_SUPRES_34_A_OBJ255 = "MAIN_DTL_SUPRES_34_A_OBJ255";
            internal const string MAIN_DTL_LINE_34_A_OBJ256 = "MAIN_DTL_LINE_34_A_OBJ256";
            internal const string MAIN_DTL_SUPRES_34_A_OBJ256 = "MAIN_DTL_SUPRES_34_A_OBJ256";
            internal const string MAIN_DTL_LINE_34_A_OBJ257 = "MAIN_DTL_LINE_34_A_OBJ257";
            internal const string MAIN_DTL_SUPRES_34_A_OBJ257 = "MAIN_DTL_SUPRES_34_A_OBJ257";
            internal const string MAIN_DTL_LINE_34_A_OBJ258 = "MAIN_DTL_LINE_34_A_OBJ258";
            internal const string MAIN_DTL_SUPRES_34_A_OBJ258 = "MAIN_DTL_SUPRES_34_A_OBJ258";
            internal const string MAIN_DTL_LINE_34_A_OBJ259 = "MAIN_DTL_LINE_34_A_OBJ259";
            internal const string MAIN_DTL_SUPRES_34_A_OBJ259 = "MAIN_DTL_SUPRES_34_A_OBJ259";
            internal const string MAIN_DTL_LINE_35 = "MAIN_DTL_LINE_35";
            internal const string MAIN_DTL_LINE_36 = "MAIN_DTL_LINE_36";
            internal const string MAIN_DTL_LINE_36_A_OBJ260 = "MAIN_DTL_LINE_36_A_OBJ260";
            internal const string MAIN_DTL_SUPRES_36_A_OBJ260 = "MAIN_DTL_SUPRES_36_A_OBJ260";
            internal const string MAIN_DTL_LINE_36_A_OBJ261 = "MAIN_DTL_LINE_36_A_OBJ261";
            internal const string MAIN_DTL_SUPRES_36_A_OBJ261 = "MAIN_DTL_SUPRES_36_A_OBJ261";
            internal const string MAIN_DTL_LINE_36_A_OBJ262 = "MAIN_DTL_LINE_36_A_OBJ262";
            internal const string MAIN_DTL_SUPRES_36_A_OBJ262 = "MAIN_DTL_SUPRES_36_A_OBJ262";
            internal const string MAIN_DTL_LINE_36_A_OBJ263 = "MAIN_DTL_LINE_36_A_OBJ263";
            internal const string MAIN_DTL_SUPRES_36_A_OBJ263 = "MAIN_DTL_SUPRES_36_A_OBJ263";
            internal const string MAIN_DTL_LINE_36_A_OBJ264 = "MAIN_DTL_LINE_36_A_OBJ264";
            internal const string MAIN_DTL_SUPRES_36_A_OBJ264 = "MAIN_DTL_SUPRES_36_A_OBJ264";
            internal const string MAIN_DTL_LINE_37 = "MAIN_DTL_LINE_37";
            internal const string MAIN_DTL_LINE_38 = "MAIN_DTL_LINE_38";
            internal const string MAIN_DTL_LINE_38_A_OBJ265 = "MAIN_DTL_LINE_38_A_OBJ265";
            internal const string MAIN_DTL_SUPRES_38_A_OBJ265 = "MAIN_DTL_SUPRES_38_A_OBJ265";
            internal const string MAIN_DTL_LINE_39 = "MAIN_DTL_LINE_39";
            internal const string MAIN_DTL_LINE_40 = "MAIN_DTL_LINE_40";
            internal const string MAIN_DTL_LINE_40_A_OBJ266 = "MAIN_DTL_LINE_40_A_OBJ266";
            internal const string MAIN_DTL_SUPRES_40_A_OBJ266 = "MAIN_DTL_SUPRES_40_A_OBJ266";
            internal const string MAIN_DTL_LINE_41 = "MAIN_DTL_LINE_41";
            internal const string MAIN_DTL_LINE_42 = "MAIN_DTL_LINE_42";
            internal const string MAIN_DTL_LINE_42_A_OBJ267 = "MAIN_DTL_LINE_42_A_OBJ267";
            internal const string MAIN_DTL_SUPRES_42_A_OBJ267 = "MAIN_DTL_SUPRES_42_A_OBJ267";
            internal const string MAIN_DTL_LINE_43 = "MAIN_DTL_LINE_43";
            internal const string MAIN_DTL_LINE_44 = "MAIN_DTL_LINE_44";
            internal const string MAIN_DTL_LINE_45 = "MAIN_DTL_LINE_45";
            internal const string MAIN_PAGE_HDR_SECTION = "MAIN_PAGE_HDR_SECTION";
            internal const string MAIN_PAGE_HDR_BEFORE_SPACE = "MAIN_PAGE_HDR_BEFORE_SPACE";
            internal const string MAIN_PAGE_HDR_AFTER_SPACING = "MAIN_PAGE_HDR_AFTER_SPACING";
            internal const string MAIN_PAGE_HDR_RESETPG_AFTER = "MAIN_PAGE_HDR_RESETPG_AFTER";
            internal const string MAIN_PAGE_HDR_KEEP_TOGETHER = "MAIN_PAGE_HDR_KEEP_TOGETHER";
            internal const string MAIN_PAGE_HDR_SUPPRSS_BLANK = "MAIN_PAGE_HDR_SUPPRSS_BLANK";
            internal const string MAIN_PAGE_HDR_PRINT_ATBOTTM = "MAIN_PAGE_HDR_PRINT_ATBOTTM";
            internal const string MAIN_PAGE_HDR_KEEP_WITHNEXT = "MAIN_PAGE_HDR_KEEP_WITHNEXT";
            internal const string MAIN_PAGE_HDR_BEFORE_PG_BRK = "MAIN_PAGE_HDR_BEFORE_PG_BRK";
            internal const string MAIN_PAGE_HDR_AFTER_PG_BRK = "MAIN_PAGE_HDR_AFTER_PG_BRK";
            internal const string MAIN_PAGE_HDR_PRINT_FLAG = "MAIN_PAGE_HDR_PRINT_FLAG";
            internal const string MAIN_PAGE_HDR_0 = "MAIN_PAGE_HDR_0";
            internal const string MAIN_PAGE_HDR_0_P_OBJ217 = "MAIN_PAGE_HDR_0_P_OBJ217";
            internal const string MAIN_PAGE_HDR_1 = "MAIN_PAGE_HDR_1";
            internal const string MAIN_PAGE_HDR_1_D_OBJ272 = "MAIN_PAGE_HDR_1_D_OBJ272";
            internal const string MAIN_PAGE_HDR_2 = "MAIN_PAGE_HDR_2";
            internal const string MAIN_PAGE_HDR_2_T_OBJ273 = "MAIN_PAGE_HDR_2_T_OBJ273";
            internal const string MAIN_PAGE_HDR_3 = "MAIN_PAGE_HDR_3";
            internal const string MAIN_PAGE_HDR_3_A_OBJ6 = "MAIN_PAGE_HDR_3_A_OBJ6";
            internal const string P_IMPORT_EV1 = "P_IMPORT_EV1";
            internal const string P_REPORT_PARMS_ET = "P_REPORT_PARMS_ET";
            internal const string P_PARM1_0001_001MS = "P_PARM1_0001_001MS";
            internal const string P_PARM1_0001_001 = "P_PARM1_0001_001";
            internal const string P_PARM1_0001_001XX = "P_PARM1_0001_001XX";
            internal const string P_PARM2_0001_002MS = "P_PARM2_0001_002MS";
            internal const string P_PARM2_0001_002 = "P_PARM2_0001_002";
            internal const string P_PARM2_0001_002XX = "P_PARM2_0001_002XX";
            internal const string P_SUBREPORT_CODE_0001_003MS = "P_SUBREPORT_CODE_0001_003MS";
            internal const string P_SUBREPORT_CODE_0001_003 = "P_SUBREPORT_CODE_0001_003";
            internal const string P_SUBREPORT_CODE_0001_003XX = "P_SUBREPORT_CODE_0001_003XX";
            internal const string P_IMPORT_EV2 = "P_IMPORT_EV2";
            internal const string P_OCSE34_ET = "P_OCSE34_ET";
            internal const string P_PERIOD_0002_004MS = "P_PERIOD_0002_004MS";
            internal const string P_PERIOD_0002_004 = "P_PERIOD_0002_004";
            internal const string P_PERIOD_0002_004XX = "P_PERIOD_0002_004XX";
            internal const string P_PREVIOUS_UNDISTRIB_AMOUN05MS = "P_PREVIOUS_UNDISTRIB_AMOUN05MS";
            internal const string P_PREVIOUS_UNDISTRIB_AMOUN_005 = "P_PREVIOUS_UNDISTRIB_AMOUN_005";
            internal const string P_PREVIOUS_UNDISTRIB_AMOUN05XX = "P_PREVIOUS_UNDISTRIB_AMOUN05XX";
            internal const string P_TOTAL_COLLECTIONS_AMOUNT06MS = "P_TOTAL_COLLECTIONS_AMOUNT06MS";
            internal const string P_TOTAL_COLLECTIONS_AMOUNT_006 = "P_TOTAL_COLLECTIONS_AMOUNT_006";
            internal const string P_TOTAL_COLLECTIONS_AMOUNT06XX = "P_TOTAL_COLLECTIONS_AMOUNT06XX";
            internal const string P_OFFSET_FEDERAL_TAXREFUND07MS = "P_OFFSET_FEDERAL_TAXREFUND07MS";
            internal const string P_OFFSET_FEDERAL_TAXREFUND_007 = "P_OFFSET_FEDERAL_TAXREFUND_007";
            internal const string P_OFFSET_FEDERAL_TAXREFUND07XX = "P_OFFSET_FEDERAL_TAXREFUND07XX";
            internal const string P_OFFSET_STATE_TAX_REFUND_08MS = "P_OFFSET_STATE_TAX_REFUND_08MS";
            internal const string P_OFFSET_STATE_TAX_REFUND__008 = "P_OFFSET_STATE_TAX_REFUND__008";
            internal const string P_OFFSET_STATE_TAX_REFUND_08XX = "P_OFFSET_STATE_TAX_REFUND_08XX";
            internal const string P_UNEMPLOYMENT_COMP_AMOUNT09MS = "P_UNEMPLOYMENT_COMP_AMOUNT09MS";
            internal const string P_UNEMPLOYMENT_COMP_AMOUNT_009 = "P_UNEMPLOYMENT_COMP_AMOUNT_009";
            internal const string P_UNEMPLOYMENT_COMP_AMOUNT09XX = "P_UNEMPLOYMENT_COMP_AMOUNT09XX";
            internal const string P_ADMINSTRATIVE_ENFORCE_AM10MS = "P_ADMINSTRATIVE_ENFORCE_AM10MS";
            internal const string P_ADMINSTRATIVE_ENFORCE_AM_010 = "P_ADMINSTRATIVE_ENFORCE_AM_010";
            internal const string P_ADMINSTRATIVE_ENFORCE_AM10XX = "P_ADMINSTRATIVE_ENFORCE_AM10XX";
            internal const string P_INCOME_WITHHOLDING_AMOUN11MS = "P_INCOME_WITHHOLDING_AMOUN11MS";
            internal const string P_INCOME_WITHHOLDING_AMOUN_011 = "P_INCOME_WITHHOLDING_AMOUN_011";
            internal const string P_INCOME_WITHHOLDING_AMOUN11XX = "P_INCOME_WITHHOLDING_AMOUN11XX";
            internal const string P_OTHER_STATES_AMOUNT_000912MS = "P_OTHER_STATES_AMOUNT_000912MS";
            internal const string P_OTHER_STATES_AMOUNT_0009_012 = "P_OTHER_STATES_AMOUNT_0009_012";
            internal const string P_OTHER_STATES_AMOUNT_000912XX = "P_OTHER_STATES_AMOUNT_000912XX";
            internal const string P_OTHER_SOURCES_AMOUNT_00013MS = "P_OTHER_SOURCES_AMOUNT_00013MS";
            internal const string P_OTHER_SOURCES_AMOUNT_000_013 = "P_OTHER_SOURCES_AMOUNT_000_013";
            internal const string P_OTHER_SOURCES_AMOUNT_00013XX = "P_OTHER_SOURCES_AMOUNT_00013XX";
            internal const string P_ADJUSTMENTS_AMOUNT_000914MS = "P_ADJUSTMENTS_AMOUNT_000914MS";
            internal const string P_ADJUSTMENTS_AMOUNT_0009_014 = "P_ADJUSTMENTS_AMOUNT_0009_014";
            internal const string P_ADJUSTMENTS_AMOUNT_000914XX = "P_ADJUSTMENTS_AMOUNT_000914XX";
            internal const string P_NON_IVD_CASES_AMOUNT_00015MS = "P_NON_IVD_CASES_AMOUNT_00015MS";
            internal const string P_NON_IVD_CASES_AMOUNT_000_015 = "P_NON_IVD_CASES_AMOUNT_000_015";
            internal const string P_NON_IVD_CASES_AMOUNT_00015XX = "P_NON_IVD_CASES_AMOUNT_00015XX";
            internal const string P_OTHER_STATES_CURRENT_IVA16MS = "P_OTHER_STATES_CURRENT_IVA16MS";
            internal const string P_OTHER_STATES_CURRENT_IVA_016 = "P_OTHER_STATES_CURRENT_IVA_016";
            internal const string P_OTHER_STATES_CURRENT_IVA16XX = "P_OTHER_STATES_CURRENT_IVA16XX";
            internal const string P_OTHER_STATES_CURRENT_IVE17MS = "P_OTHER_STATES_CURRENT_IVE17MS";
            internal const string P_OTHER_STATES_CURRENT_IVE_017 = "P_OTHER_STATES_CURRENT_IVE_017";
            internal const string P_OTHER_STATES_CURRENT_IVE17XX = "P_OTHER_STATES_CURRENT_IVE17XX";
            internal const string P_OTHERSTATE_FORMER_ASSIST18MS = "P_OTHERSTATE_FORMER_ASSIST18MS";
            internal const string P_OTHERSTATE_FORMER_ASSIST_018 = "P_OTHERSTATE_FORMER_ASSIST_018";
            internal const string P_OTHERSTATE_FORMER_ASSIST18XX = "P_OTHERSTATE_FORMER_ASSIST18XX";
            internal const string P_OTHER_STATE_NEVER_ASSIST19MS = "P_OTHER_STATE_NEVER_ASSIST19MS";
            internal const string P_OTHER_STATE_NEVER_ASSIST_019 = "P_OTHER_STATE_NEVER_ASSIST_019";
            internal const string P_OTHER_STATE_NEVER_ASSIST19XX = "P_OTHER_STATE_NEVER_ASSIST19XX";
            internal const string P_OTHER_STATE_AMT_FORWARD_20MS = "P_OTHER_STATE_AMT_FORWARD_20MS";
            internal const string P_OTHER_STATE_AMT_FORWARD__020 = "P_OTHER_STATE_AMT_FORWARD__020";
            internal const string P_OTHER_STATE_AMT_FORWARD_20XX = "P_OTHER_STATE_AMT_FORWARD_20XX";
            internal const string P_AVAIL_FOR_DISTRIBUTION_A21MS = "P_AVAIL_FOR_DISTRIBUTION_A21MS";
            internal const string P_AVAIL_FOR_DISTRIBUTION_A_021 = "P_AVAIL_FOR_DISTRIBUTION_A_021";
            internal const string P_AVAIL_FOR_DISTRIBUTION_A21XX = "P_AVAIL_FOR_DISTRIBUTION_A21XX";
            internal const string P_DISTRIB_ASSIST_REIMB_IVA22MS = "P_DISTRIB_ASSIST_REIMB_IVA22MS";
            internal const string P_DISTRIB_ASSIST_REIMB_IVA_022 = "P_DISTRIB_ASSIST_REIMB_IVA_022";
            internal const string P_DISTRIB_ASSIST_REIMB_IVA22XX = "P_DISTRIB_ASSIST_REIMB_IVA22XX";
            internal const string P_DISTRIB_ASSIST_REIMB_IVE23MS = "P_DISTRIB_ASSIST_REIMB_IVE23MS";
            internal const string P_DISTRIB_ASSIST_REIMB_IVE_023 = "P_DISTRIB_ASSIST_REIMB_IVE_023";
            internal const string P_DISTRIB_ASSIST_REIMB_IVE23XX = "P_DISTRIB_ASSIST_REIMB_IVE23XX";
            internal const string P_DISTRIB_ASSIST_REIMB_FMR24MS = "P_DISTRIB_ASSIST_REIMB_FMR24MS";
            internal const string P_DISTRIB_ASSIST_REIMB_FMR_024 = "P_DISTRIB_ASSIST_REIMB_FMR_024";
            internal const string P_DISTRIB_ASSIST_REIMB_FMR24XX = "P_DISTRIB_ASSIST_REIMB_FMR24XX";
            internal const string P_DISTRIB_ASSIST_REIMB_AMO25MS = "P_DISTRIB_ASSIST_REIMB_AMO25MS";
            internal const string P_DISTRIB_ASSIST_REIMB_AMO_025 = "P_DISTRIB_ASSIST_REIMB_AMO_025";
            internal const string P_DISTRIB_ASSIST_REIMB_AMO25XX = "P_DISTRIB_ASSIST_REIMB_AMO25XX";
            internal const string P_DISTRIBUTED_MED_SUPPORT_26MS = "P_DISTRIBUTED_MED_SUPPORT_26MS";
            internal const string P_DISTRIBUTED_MED_SUPPORT__026 = "P_DISTRIBUTED_MED_SUPPORT__026";
            internal const string P_DISTRIBUTED_MED_SUPPORT_26XX = "P_DISTRIBUTED_MED_SUPPORT_26XX";
            internal const string P_DISTRIBUTED_MED_SUPPORT_27MS = "P_DISTRIBUTED_MED_SUPPORT_27MS";
            internal const string P_DISTRIBUTED_MED_SUPPORT__027 = "P_DISTRIBUTED_MED_SUPPORT__027";
            internal const string P_DISTRIBUTED_MED_SUPPORT_27XX = "P_DISTRIBUTED_MED_SUPPORT_27XX";
            internal const string P_DISTRIBUTED_MED_SUPPORT_28MS = "P_DISTRIBUTED_MED_SUPPORT_28MS";
            internal const string P_DISTRIBUTED_MED_SUPPORT__028 = "P_DISTRIBUTED_MED_SUPPORT__028";
            internal const string P_DISTRIBUTED_MED_SUPPORT_28XX = "P_DISTRIBUTED_MED_SUPPORT_28XX";
            internal const string P_DISTRIBUTED_MED_SUPPORT_29MS = "P_DISTRIBUTED_MED_SUPPORT_29MS";
            internal const string P_DISTRIBUTED_MED_SUPPORT__029 = "P_DISTRIBUTED_MED_SUPPORT__029";
            internal const string P_DISTRIBUTED_MED_SUPPORT_29XX = "P_DISTRIBUTED_MED_SUPPORT_29XX";
            internal const string P_DISTRIBUTED_MED_SUPPORT_30MS = "P_DISTRIBUTED_MED_SUPPORT_30MS";
            internal const string P_DISTRIBUTED_MED_SUPPORT__030 = "P_DISTRIBUTED_MED_SUPPORT__030";
            internal const string P_DISTRIBUTED_MED_SUPPORT_30XX = "P_DISTRIBUTED_MED_SUPPORT_30XX";
            internal const string P_DISTRIBUTED_FAMILY_IVA_A31MS = "P_DISTRIBUTED_FAMILY_IVA_A31MS";
            internal const string P_DISTRIBUTED_FAMILY_IVA_A_031 = "P_DISTRIBUTED_FAMILY_IVA_A_031";
            internal const string P_DISTRIBUTED_FAMILY_IVA_A31XX = "P_DISTRIBUTED_FAMILY_IVA_A31XX";
            internal const string P_DISTRIBUTED_FAMILY_IVE_A32MS = "P_DISTRIBUTED_FAMILY_IVE_A32MS";
            internal const string P_DISTRIBUTED_FAMILY_IVE_A_032 = "P_DISTRIBUTED_FAMILY_IVE_A_032";
            internal const string P_DISTRIBUTED_FAMILY_IVE_A32XX = "P_DISTRIBUTED_FAMILY_IVE_A32XX";
            internal const string P_DISTRIBUTED_FAMILY_FORME33MS = "P_DISTRIBUTED_FAMILY_FORME33MS";
            internal const string P_DISTRIBUTED_FAMILY_FORME_033 = "P_DISTRIBUTED_FAMILY_FORME_033";
            internal const string P_DISTRIBUTED_FAMILY_FORME33XX = "P_DISTRIBUTED_FAMILY_FORME33XX";
            internal const string P_DISTRIBUTED_FAMILY_NEVER34MS = "P_DISTRIBUTED_FAMILY_NEVER34MS";
            internal const string P_DISTRIBUTED_FAMILY_NEVER_034 = "P_DISTRIBUTED_FAMILY_NEVER_034";
            internal const string P_DISTRIBUTED_FAMILY_NEVER34XX = "P_DISTRIBUTED_FAMILY_NEVER34XX";
            internal const string P_DISTRIBUTED_FAMILY_AMOUN35MS = "P_DISTRIBUTED_FAMILY_AMOUN35MS";
            internal const string P_DISTRIBUTED_FAMILY_AMOUN_035 = "P_DISTRIBUTED_FAMILY_AMOUN_035";
            internal const string P_DISTRIBUTED_FAMILY_AMOUN35XX = "P_DISTRIBUTED_FAMILY_AMOUN35XX";
            internal const string P_TOTAL_DISTRIBUTED_IVA_AM36MS = "P_TOTAL_DISTRIBUTED_IVA_AM36MS";
            internal const string P_TOTAL_DISTRIBUTED_IVA_AM_036 = "P_TOTAL_DISTRIBUTED_IVA_AM_036";
            internal const string P_TOTAL_DISTRIBUTED_IVA_AM36XX = "P_TOTAL_DISTRIBUTED_IVA_AM36XX";
            internal const string P_TOTAL_DISTRIBUTED_IVE_AM37MS = "P_TOTAL_DISTRIBUTED_IVE_AM37MS";
            internal const string P_TOTAL_DISTRIBUTED_IVE_AM_037 = "P_TOTAL_DISTRIBUTED_IVE_AM_037";
            internal const string P_TOTAL_DISTRIBUTED_IVE_AM37XX = "P_TOTAL_DISTRIBUTED_IVE_AM37XX";
            internal const string P_TOTAL_DISTRIBUTED_FORMER38MS = "P_TOTAL_DISTRIBUTED_FORMER38MS";
            internal const string P_TOTAL_DISTRIBUTED_FORMER_038 = "P_TOTAL_DISTRIBUTED_FORMER_038";
            internal const string P_TOTAL_DISTRIBUTED_FORMER38XX = "P_TOTAL_DISTRIBUTED_FORMER38XX";
            internal const string P_TOTAL_DISTRIBUTED_NEVER_39MS = "P_TOTAL_DISTRIBUTED_NEVER_39MS";
            internal const string P_TOTAL_DISTRIBUTED_NEVER__039 = "P_TOTAL_DISTRIBUTED_NEVER__039";
            internal const string P_TOTAL_DISTRIBUTED_NEVER_39XX = "P_TOTAL_DISTRIBUTED_NEVER_39XX";
            internal const string P_TOTAL_DISTRIBUTED_AMOUNT40MS = "P_TOTAL_DISTRIBUTED_AMOUNT40MS";
            internal const string P_TOTAL_DISTRIBUTED_AMOUNT_040 = "P_TOTAL_DISTRIBUTED_AMOUNT_040";
            internal const string P_TOTAL_DISTRIBUTED_AMOUNT40XX = "P_TOTAL_DISTRIBUTED_AMOUNT40XX";
            internal const string P_GROSS_UNDISTRIBUTED_AMOU41MS = "P_GROSS_UNDISTRIBUTED_AMOU41MS";
            internal const string P_GROSS_UNDISTRIBUTED_AMOU_041 = "P_GROSS_UNDISTRIBUTED_AMOU_041";
            internal const string P_GROSS_UNDISTRIBUTED_AMOU41XX = "P_GROSS_UNDISTRIBUTED_AMOU41XX";
            internal const string P_UNDISTRIBUTED_AMOUNT_00342MS = "P_UNDISTRIBUTED_AMOUNT_00342MS";
            internal const string P_UNDISTRIBUTED_AMOUNT_003_042 = "P_UNDISTRIBUTED_AMOUNT_003_042";
            internal const string P_UNDISTRIBUTED_AMOUNT_00342XX = "P_UNDISTRIBUTED_AMOUNT_00342XX";
            internal const string P_NET_UNDISTRIBUTED_AMOUNT43MS = "P_NET_UNDISTRIBUTED_AMOUNT43MS";
            internal const string P_NET_UNDISTRIBUTED_AMOUNT_043 = "P_NET_UNDISTRIBUTED_AMOUNT_043";
            internal const string P_NET_UNDISTRIBUTED_AMOUNT43XX = "P_NET_UNDISTRIBUTED_AMOUNT43XX";
            internal const string P_FEDERAL_SHARE_IVA_AMOUNT44MS = "P_FEDERAL_SHARE_IVA_AMOUNT44MS";
            internal const string P_FEDERAL_SHARE_IVA_AMOUNT_044 = "P_FEDERAL_SHARE_IVA_AMOUNT_044";
            internal const string P_FEDERAL_SHARE_IVA_AMOUNT44XX = "P_FEDERAL_SHARE_IVA_AMOUNT44XX";
            internal const string P_FEDERAL_SHARE_IVE_AMOUNT45MS = "P_FEDERAL_SHARE_IVE_AMOUNT45MS";
            internal const string P_FEDERAL_SHARE_IVE_AMOUNT_045 = "P_FEDERAL_SHARE_IVE_AMOUNT_045";
            internal const string P_FEDERAL_SHARE_IVE_AMOUNT45XX = "P_FEDERAL_SHARE_IVE_AMOUNT45XX";
            internal const string P_FEDERAL_SHARE_FORMER_AMO46MS = "P_FEDERAL_SHARE_FORMER_AMO46MS";
            internal const string P_FEDERAL_SHARE_FORMER_AMO_046 = "P_FEDERAL_SHARE_FORMER_AMO_046";
            internal const string P_FEDERAL_SHARE_FORMER_AMO46XX = "P_FEDERAL_SHARE_FORMER_AMO46XX";
            internal const string P_FEDERAL_SHARE_TOTAL_AMOU47MS = "P_FEDERAL_SHARE_TOTAL_AMOU47MS";
            internal const string P_FEDERAL_SHARE_TOTAL_AMOU_047 = "P_FEDERAL_SHARE_TOTAL_AMOU_047";
            internal const string P_FEDERAL_SHARE_TOTAL_AMOU47XX = "P_FEDERAL_SHARE_TOTAL_AMOU47XX";
            internal const string P_INCENTIVE_PAYMENT_IVA_AM48MS = "P_INCENTIVE_PAYMENT_IVA_AM48MS";
            internal const string P_INCENTIVE_PAYMENT_IVA_AM_048 = "P_INCENTIVE_PAYMENT_IVA_AM_048";
            internal const string P_INCENTIVE_PAYMENT_IVA_AM48XX = "P_INCENTIVE_PAYMENT_IVA_AM48XX";
            internal const string P_INCENTIVE_PAYMENT_FORMER49MS = "P_INCENTIVE_PAYMENT_FORMER49MS";
            internal const string P_INCENTIVE_PAYMENT_FORMER_049 = "P_INCENTIVE_PAYMENT_FORMER_049";
            internal const string P_INCENTIVE_PAYMENT_FORMER49XX = "P_INCENTIVE_PAYMENT_FORMER49XX";
            internal const string P_INCENTIVE_PAYMENT_AMOUNT50MS = "P_INCENTIVE_PAYMENT_AMOUNT50MS";
            internal const string P_INCENTIVE_PAYMENT_AMOUNT_050 = "P_INCENTIVE_PAYMENT_AMOUNT_050";
            internal const string P_INCENTIVE_PAYMENT_AMOUNT50XX = "P_INCENTIVE_PAYMENT_AMOUNT50XX";
            internal const string P_NET_FEDERAL_SHARE_IVA_AM51MS = "P_NET_FEDERAL_SHARE_IVA_AM51MS";
            internal const string P_NET_FEDERAL_SHARE_IVA_AM_051 = "P_NET_FEDERAL_SHARE_IVA_AM_051";
            internal const string P_NET_FEDERAL_SHARE_IVA_AM51XX = "P_NET_FEDERAL_SHARE_IVA_AM51XX";
            internal const string P_NET_FEDERAL_SHARE_FORMER52MS = "P_NET_FEDERAL_SHARE_FORMER52MS";
            internal const string P_NET_FEDERAL_SHARE_FORMER_052 = "P_NET_FEDERAL_SHARE_FORMER_052";
            internal const string P_NET_FEDERAL_SHARE_FORMER52XX = "P_NET_FEDERAL_SHARE_FORMER52XX";
            internal const string P_NET_FEDERAL_SHARE_AMOUNT53MS = "P_NET_FEDERAL_SHARE_AMOUNT53MS";
            internal const string P_NET_FEDERAL_SHARE_AMOUNT_053 = "P_NET_FEDERAL_SHARE_AMOUNT_053";
            internal const string P_NET_FEDERAL_SHARE_AMOUNT53XX = "P_NET_FEDERAL_SHARE_AMOUNT53XX";
            internal const string P_FEES_RETAIN_OTHER_STATES54MS = "P_FEES_RETAIN_OTHER_STATES54MS";
            internal const string P_FEES_RETAIN_OTHER_STATES_054 = "P_FEES_RETAIN_OTHER_STATES_054";
            internal const string P_FEES_RETAIN_OTHER_STATES54XX = "P_FEES_RETAIN_OTHER_STATES54XX";
            internal const string P_CREATED_TIMESTAMP_0047_055MS = "P_CREATED_TIMESTAMP_0047_055MS";
            internal const string P_CREATED_TIMESTAMP_0047_055 = "P_CREATED_TIMESTAMP_0047_055";
            internal const string P_CREATED_TIMESTAMP_0047_055XX = "P_CREATED_TIMESTAMP_0047_055XX";
            internal const string P_CREATED_BY_0047_056MS = "P_CREATED_BY_0047_056MS";
            internal const string P_CREATED_BY_0047_056 = "P_CREATED_BY_0047_056";
            internal const string P_CREATED_BY_0047_056XX = "P_CREATED_BY_0047_056XX";
            internal const string NUMERIC_EDIT_PATTERNS = "NUMERIC_EDIT_PATTERNS";
            internal const string EP_INTEGER2 = "EP_INTEGER2";
            internal const string EP_INTEGER = "EP_INTEGER";
            internal const string EP_INTEGER_XX = "EP_INTEGER_XX";
            internal const string EP_INTEGER_X = "EP_INTEGER_X";
            internal const string EP_DECIMAL = "EP_DECIMAL";
            internal const string EP_DECIMAL_XX = "EP_DECIMAL_XX";
            internal const string EP_DECIMAL_X = "EP_DECIMAL_X";
            internal const string EP_PRECISION = "EP_PRECISION";
            internal const string EP_SCALE = "EP_SCALE";
            internal const string EP_INP_INDEX = "EP_INP_INDEX";
            internal const string EP_OUT_INDEX = "EP_OUT_INDEX";
            internal const string EP_INDEX = "EP_INDEX";
            internal const string EP_COUNT = "EP_COUNT";
            internal const string EP_COUNT2 = "EP_COUNT2";
            internal const string EP_SIGN = "EP_SIGN";
            internal const string EP_DPOINT_USED = "EP_DPOINT_USED";
            internal const string EP_SIGN_USED = "EP_SIGN_USED";
            internal const string EP_DOLLAR_USED = "EP_DOLLAR_USED";
            internal const string EP_FIRST_DIGIT = "EP_FIRST_DIGIT";
            internal const string EP_ISTHERE_DCML = "EP_ISTHERE_DCML";
            internal const string EP_ISTHERE_V = "EP_ISTHERE_V";
            internal const string EP_INTEGER_LEN = "EP_INTEGER_LEN";
            internal const string EP_SZNUMERIC = "EP_SZNUMERIC";
            internal const string EP_SZNUMERIC_X = "EP_SZNUMERIC_X";
            internal const string EP_FORMATTED_VALUE = "EP_FORMATTED_VALUE";
            internal const string EP_FORMATTED_VALUE_X = "EP_FORMATTED_VALUE_X";
            internal const string EP_EDIT_PATTERN = "EP_EDIT_PATTERN";
            internal const string EP_EDIT_PATTERN_X = "EP_EDIT_PATTERN_X";
            internal const string EP_EDIT_PATTERN_LEN = "EP_EDIT_PATTERN_LEN";
            internal const string EP_SZNUMERIC_LEN = "EP_SZNUMERIC_LEN";
            internal const string EP_STOP = "EP_STOP";
            internal const string EP_CURRENCY_COUNT = "EP_CURRENCY_COUNT";
        }
        #endregion

        #region Direct-access element properties
        public IField WS_FILE_STATUS { get { return GetElementByName<IField>(Names.WS_FILE_STATUS); } }
        public IGroup WORK_FIELDS { get { return GetElementByName<IGroup>(Names.WORK_FIELDS); } }
        public IField WS_STK_CONTROL_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_STK_CONTROL_BRK_FLAG); } }
        public IField WS_STK_SECTION_PROCESSING_IND { get { return GetElementByName<IField>(Names.WS_STK_SECTION_PROCESSING_IND); } }
        public IField WS_VERY_FIRST_WRITE { get { return GetElementByName<IField>(Names.WS_VERY_FIRST_WRITE); } }
        public IField WS_PG_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_PG_BRK_FLAG); } }
        public ICheckField WS_PG_BRK { get { return GetElementByName<ICheckField>(Names.WS_PG_BRK); } }
        public IField WS_PG_BRK_FLAG_SAVE { get { return GetElementByName<IField>(Names.WS_PG_BRK_FLAG_SAVE); } }
        public IField WS_PRINT_LINE_SPACING { get { return GetElementByName<IField>(Names.WS_PRINT_LINE_SPACING); } }
        public IField WS_TEMP_PRINT_LINE_SPACING { get { return GetElementByName<IField>(Names.WS_TEMP_PRINT_LINE_SPACING); } }
        public IGroup WS_PRINT_RECORD { get { return GetElementByName<IGroup>(Names.WS_PRINT_RECORD); } }
        public IField WS_PRINT_LINE { get { return GetElementByName<IField>(Names.WS_PRINT_LINE); } }
        public IGroup WS_SPACE_RECORD { get { return GetElementByName<IGroup>(Names.WS_SPACE_RECORD); } }
        public IField WS_SPACE_LINE { get { return GetElementByName<IField>(Names.WS_SPACE_LINE); } }
        public IField WS_TEMP_PRINT_LINE { get { return GetElementByName<IField>(Names.WS_TEMP_PRINT_LINE); } }
        public IField WS_TEMP_SAVE_PRINT_LINE { get { return GetElementByName<IField>(Names.WS_TEMP_SAVE_PRINT_LINE); } }
        public IField WS_LINE_COUNT { get { return GetElementByName<IField>(Names.WS_LINE_COUNT); } }
        public IField WS_PG_LENGTH { get { return GetElementByName<IField>(Names.WS_PG_LENGTH); } }
        public IField WS_PG_NUMBER { get { return GetElementByName<IField>(Names.WS_PG_NUMBER); } }
        public IField WS_PG_NUMBER_SAVE { get { return GetElementByName<IField>(Names.WS_PG_NUMBER_SAVE); } }
        public IField SAVE_FOR_WRAP_TEXT { get { return GetElementByName<IField>(Names.SAVE_FOR_WRAP_TEXT); } }
        public IField WS_CUR_SUBRPT_CODE { get { return GetElementByName<IField>(Names.WS_CUR_SUBRPT_CODE); } }
        public IField WS_PREV_SUBRPT_CODE { get { return GetElementByName<IField>(Names.WS_PREV_SUBRPT_CODE); } }
        public IField WS_CONTROL_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_CONTROL_BRK_FLAG); } }
        public ICheckField WS_NOT_IN_CONTROL_BRK { get { return GetElementByName<ICheckField>(Names.WS_NOT_IN_CONTROL_BRK); } }
        public IField WS_SAVE_SECTION_PROCESSING_IND { get { return GetElementByName<IField>(Names.WS_SAVE_SECTION_PROCESSING_IND); } }
        public ICheckField WS_SAVE_RPT_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SAVE_RPT_HDR_IS_PROCESSED); } }
        public ICheckField WS_SAVE_RPT_FTR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SAVE_RPT_FTR_IS_PROCESSED); } }
        public ICheckField WS_SAVE_PG_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SAVE_PG_HDR_IS_PROCESSED); } }
        public ICheckField WS_SAVE_BODY_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SAVE_BODY_IS_PROCESSED); } }
        public IField WS_RESET_PG_NUMBER { get { return GetElementByName<IField>(Names.WS_RESET_PG_NUMBER); } }
        public IField WS_SUPPRSS_BLANK_LINE { get { return GetElementByName<IField>(Names.WS_SUPPRSS_BLANK_LINE); } }
        public IField WS_SUPPRSS_BLANK_LINE_SAVE { get { return GetElementByName<IField>(Names.WS_SUPPRSS_BLANK_LINE_SAVE); } }
        public IField WS_USER_NULL_DATE { get { return GetElementByName<IField>(Names.WS_USER_NULL_DATE); } }
        public IField WS_TEMP_LINE_QT { get { return GetElementByName<IField>(Names.WS_TEMP_LINE_QT); } }
        public IField WS_CUR_SECTION_LINE_QT { get { return GetElementByName<IField>(Names.WS_CUR_SECTION_LINE_QT); } }
        public IField WS_SAVE_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.WS_SAVE_PRINT_ATBOTTM); } }
        public IField WS_TEMP_LINE_COUNT { get { return GetElementByName<IField>(Names.WS_TEMP_LINE_COUNT); } }
        public IField WS_TEMP_INDX { get { return GetElementByName<IField>(Names.WS_TEMP_INDX); } }
        public IField WS_MONTH_TEXT_LENGTH { get { return GetElementByName<IField>(Names.WS_MONTH_TEXT_LENGTH); } }
        public IField PREV_IO_CONTROL_CD { get { return GetElementByName<IField>(Names.PREV_IO_CONTROL_CD); } }
        public IGroup DATE_TIME_CONVERSION_FIELDS { get { return GetElementByName<IGroup>(Names.DATE_TIME_CONVERSION_FIELDS); } }
        public IField IEF_DATE_TIME { get { return GetElementByName<IField>(Names.IEF_DATE_TIME); } }
        public IField IEF_DATE { get { return GetElementByName<IField>(Names.IEF_DATE); } }
        public IField IEF_TIME { get { return GetElementByName<IField>(Names.IEF_TIME); } }
        public IField DT_YEAR_4 { get { return GetElementByName<IField>(Names.DT_YEAR_4); } }
        public IField DT_YEAR_2 { get { return GetElementByName<IField>(Names.DT_YEAR_2); } }
        public IField DT_YEAR_1 { get { return GetElementByName<IField>(Names.DT_YEAR_1); } }
        public IField DT_MONTH_MM { get { return GetElementByName<IField>(Names.DT_MONTH_MM); } }
        public IField DT_DAY { get { return GetElementByName<IField>(Names.DT_DAY); } }
        public IField DT_TIME { get { return GetElementByName<IField>(Names.DT_TIME); } }
        public IField DT_HOUR { get { return GetElementByName<IField>(Names.DT_HOUR); } }
        public IField DT_MINUTES { get { return GetElementByName<IField>(Names.DT_MINUTES); } }
        public IField DT_SECONDS { get { return GetElementByName<IField>(Names.DT_SECONDS); } }
        public IField DT_MICROSECONDS { get { return GetElementByName<IField>(Names.DT_MICROSECONDS); } }
        public IField DT_EDIT_PATTERN { get { return GetElementByName<IField>(Names.DT_EDIT_PATTERN); } }
        public IField TS_EDIT_PATTERN { get { return GetElementByName<IField>(Names.TS_EDIT_PATTERN); } }
        public IField DT_MONTH_MON { get { return GetElementByName<IField>(Names.DT_MONTH_MON); } }
        public IField DT_MONTH_MON_U_STRING { get { return GetElementByName<IField>(Names.DT_MONTH_MON_U_STRING); } }
        public IGroup DT_MONTH_MON_U_TABLE { get { return GetElementByName<IGroup>(Names.DT_MONTH_MON_U_TABLE); } }
        public IArrayElementAccessor<IField> DT_MONTH_MON_U_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_MONTH_MON_U_TEXT); } }
        public IField DT_MONTH_MON_L_STRING { get { return GetElementByName<IField>(Names.DT_MONTH_MON_L_STRING); } }
        public IGroup DT_MONTH_MON_L_TABLE { get { return GetElementByName<IGroup>(Names.DT_MONTH_MON_L_TABLE); } }
        public IArrayElementAccessor<IField> DT_MONTH_MON_L_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_MONTH_MON_L_TEXT); } }
        public IField DT_MONTH_MONTH { get { return GetElementByName<IField>(Names.DT_MONTH_MONTH); } }
        public IGroup DT_MONTH_MONTH_U_STRING { get { return GetElementByName<IGroup>(Names.DT_MONTH_MONTH_U_STRING); } }
        public IGroup DT_MONTH_MONTH_U_TABLE { get { return GetElementByName<IGroup>(Names.DT_MONTH_MONTH_U_TABLE); } }
        public IArrayElementAccessor<IField> DT_MONTH_MONTH_U_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_MONTH_MONTH_U_TEXT); } }
        public IGroup DT_MONTH_MONTH_L_STRING { get { return GetElementByName<IGroup>(Names.DT_MONTH_MONTH_L_STRING); } }
        public IGroup DT_MONTH_MONTH_L_TABLE { get { return GetElementByName<IGroup>(Names.DT_MONTH_MONTH_L_TABLE); } }
        public IArrayElementAccessor<IField> DT_MONTH_MONTH_L_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_MONTH_MONTH_L_TEXT); } }
        public IField DT_FORMATTED_DATETIME { get { return GetElementByName<IField>(Names.DT_FORMATTED_DATETIME); } }
        public IGroup DT_FORMATTED_DATETIME_TABLE { get { return GetElementByName<IGroup>(Names.DT_FORMATTED_DATETIME_TABLE); } }
        public IArrayElementAccessor<IField> DT_FORMATTED_DATETIME_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_FORMATTED_DATETIME_TEXT); } }
        public IField DT_FORMATTED_DATE { get { return GetElementByName<IField>(Names.DT_FORMATTED_DATE); } }
        public IGroup DT_FORMATTED_DATE_TABLE { get { return GetElementByName<IGroup>(Names.DT_FORMATTED_DATE_TABLE); } }
        public IArrayElementAccessor<IField> DT_FORMATTED_DATE_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_FORMATTED_DATE_TEXT); } }
        public IField DT_FORMATTED_TIME { get { return GetElementByName<IField>(Names.DT_FORMATTED_TIME); } }
        public IGroup DT_FORMATTED_TIME_TABLE { get { return GetElementByName<IGroup>(Names.DT_FORMATTED_TIME_TABLE); } }
        public IArrayElementAccessor<IField> DT_FORMATTED_TIME_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_FORMATTED_TIME_TEXT); } }
        public IField DT_STRING_COUNT { get { return GetElementByName<IField>(Names.DT_STRING_COUNT); } }
        public ICheckField DT_STRING_FOUND { get { return GetElementByName<ICheckField>(Names.DT_STRING_FOUND); } }
        public IField DT_LEAP_YEAR_DAYS1 { get { return GetElementByName<IField>(Names.DT_LEAP_YEAR_DAYS1); } }
        public IGroup DT_LEAP_YEAR_TABLE1 { get { return GetElementByName<IGroup>(Names.DT_LEAP_YEAR_TABLE1); } }
        public IArrayElementAccessor<IField> DT_NO_LEAP_DAYS { get { return GetArrayElementAccessor<IField>(Names.DT_NO_LEAP_DAYS); } }
        public IField DT_LEAP_YEAR_DAYS2 { get { return GetElementByName<IField>(Names.DT_LEAP_YEAR_DAYS2); } }
        public IGroup DT_LEAP_YEAR_TABLE1_d2 { get { return GetElementByName<IGroup>(Names.DT_LEAP_YEAR_TABLE1_d2); } }
        public IArrayElementAccessor<IField> DT_LEAP_DAYS { get { return GetArrayElementAccessor<IField>(Names.DT_LEAP_DAYS); } }
        public IField LEAP_DAY { get { return GetElementByName<IField>(Names.LEAP_DAY); } }
        public IField LEAP1 { get { return GetElementByName<IField>(Names.LEAP1); } }
        public IField LEAP2 { get { return GetElementByName<IField>(Names.LEAP2); } }
        public IField LEAP3 { get { return GetElementByName<IField>(Names.LEAP3); } }
        public IField DT_START { get { return GetElementByName<IField>(Names.DT_START); } }
        public IField DT_INDEX { get { return GetElementByName<IField>(Names.DT_INDEX); } }
        public IGroup WS_CURRENT_DATE_8 { get { return GetElementByName<IGroup>(Names.WS_CURRENT_DATE_8); } }
        public IField WS_CURRENT_DATE_8_CC { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_8_CC); } }
        public IField WS_CURRENT_DATE_8_YY { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_8_YY); } }
        public IField WS_CURRENT_DATE_8_MM { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_8_MM); } }
        public IField WS_CURRENT_DATE_8_DD { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_8_DD); } }
        public IField WS_CURRENT_DATE { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE); } }
        public IGroup WS_CURRENT_DATE_6 { get { return GetElementByName<IGroup>(Names.WS_CURRENT_DATE_6); } }
        public IField WS_CURRENT_DATE_6_YY { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_6_YY); } }
        public IField WS_CURRENT_DATE_6_MM { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_6_MM); } }
        public IField WS_CURRENT_DATE_6_DD { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_6_DD); } }
        public IField WS_CURRENT_TIME { get { return GetElementByName<IField>(Names.WS_CURRENT_TIME); } }
        public IGroup WS_CURRENT_TIME_X { get { return GetElementByName<IGroup>(Names.WS_CURRENT_TIME_X); } }
        public IField WS_CURRENT_TIME_6 { get { return GetElementByName<IField>(Names.WS_CURRENT_TIME_6); } }
        public IField WS_UNJUSTIFIED_TEXT_IDX { get { return GetElementByName<IField>(Names.WS_UNJUSTIFIED_TEXT_IDX); } }
        public IField WS_JUSTIFIED_TEXT_IDX { get { return GetElementByName<IField>(Names.WS_JUSTIFIED_TEXT_IDX); } }
        public IGroup WS_JUSTIFY_TEXT_FIELDS { get { return GetElementByName<IGroup>(Names.WS_JUSTIFY_TEXT_FIELDS); } }
        public IGroup WS_UNJUSTIFIED_TEXT_FIELD { get { return GetElementByName<IGroup>(Names.WS_UNJUSTIFIED_TEXT_FIELD); } }
        public IArrayElementAccessor<IField> WS_UNJUSTIFIED_TEXT_CHAR { get { return GetArrayElementAccessor<IField>(Names.WS_UNJUSTIFIED_TEXT_CHAR); } }
        public IGroup WS_JUSTIFIED_TEXT_FIELD { get { return GetElementByName<IGroup>(Names.WS_JUSTIFIED_TEXT_FIELD); } }
        public IArrayElementAccessor<IField> WS_JUSTIFIED_TEXT_CHAR { get { return GetArrayElementAccessor<IField>(Names.WS_JUSTIFIED_TEXT_CHAR); } }
        public IField WS_JUSTIFICATION_TYPE_CD { get { return GetElementByName<IField>(Names.WS_JUSTIFICATION_TYPE_CD); } }
        public ICheckField WS_JUSTIFIED_NONE { get { return GetElementByName<ICheckField>(Names.WS_JUSTIFIED_NONE); } }
        public ICheckField WS_JUSTIFIED_LEFT { get { return GetElementByName<ICheckField>(Names.WS_JUSTIFIED_LEFT); } }
        public ICheckField WS_JUSTIFIED_CENTER { get { return GetElementByName<ICheckField>(Names.WS_JUSTIFIED_CENTER); } }
        public ICheckField WS_JUSTIFIED_RIGHT { get { return GetElementByName<ICheckField>(Names.WS_JUSTIFIED_RIGHT); } }
        public IField WS_JUSTIFIED_TEXT_FIELD_LENGTH { get { return GetElementByName<IField>(Names.WS_JUSTIFIED_TEXT_FIELD_LENGTH); } }
        public IField WS_JUSTIFIED_TEXT_DATA_LENGTH { get { return GetElementByName<IField>(Names.WS_JUSTIFIED_TEXT_DATA_LENGTH); } }
        public IField WS_JUSTIFIED_FIELD_START { get { return GetElementByName<IField>(Names.WS_JUSTIFIED_FIELD_START); } }
        public IField WS_FIRST_CHAR { get { return GetElementByName<IField>(Names.WS_FIRST_CHAR); } }
        public IField WS_LAST_CHAR { get { return GetElementByName<IField>(Names.WS_LAST_CHAR); } }
        public IField WS_CHAR_CNTR { get { return GetElementByName<IField>(Names.WS_CHAR_CNTR); } }
        public IGroup SECC_WORK_FIELDS { get { return GetElementByName<IGroup>(Names.SECC_WORK_FIELDS); } }
        public IField WS_SECC_CNTL_HDR_FLAG { get { return GetElementByName<IField>(Names.WS_SECC_CNTL_HDR_FLAG); } }
        public ICheckField WS_SECC_CNTL_HDR { get { return GetElementByName<ICheckField>(Names.WS_SECC_CNTL_HDR); } }
        public IField WS_SECC_CNTL_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_SECC_CNTL_FTR_FLAG); } }
        public ICheckField WS_SECC_CNTL_FTR { get { return GetElementByName<ICheckField>(Names.WS_SECC_CNTL_FTR); } }
        public IField WS_SECC_RPT_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_SECC_RPT_FTR_FLAG); } }
        public ICheckField WS_SECC_RPT_FTR { get { return GetElementByName<ICheckField>(Names.WS_SECC_RPT_FTR); } }
        public IField WS_SECC_DTL_LINE_QT { get { return GetElementByName<IField>(Names.WS_SECC_DTL_LINE_QT); } }
        public IField WS_SECC_PG_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_SECC_PG_HDR_LINE_QT); } }
        public IField WS_SECC_PG_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_SECC_PG_FTR_LINE_QT); } }
        public IField WS_SECC_RPT_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_SECC_RPT_HDR_LINE_QT); } }
        public IField WS_SECC_RPT_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_SECC_RPT_FTR_LINE_QT); } }
        public IField WS_SECC_LINE_SPACING { get { return GetElementByName<IField>(Names.WS_SECC_LINE_SPACING); } }
        public IField WS_SECC_RPT_TYPE_CD { get { return GetElementByName<IField>(Names.WS_SECC_RPT_TYPE_CD); } }
        public ICheckField WS_SECC_SUMMARY_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_SECC_SUMMARY_RPT_REQUESTED); } }
        public ICheckField WS_SECC_DTL_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_SECC_DTL_RPT_REQUESTED); } }
        public IField WS_SECC_SECTION_PROCESSING_IND { get { return GetElementByName<IField>(Names.WS_SECC_SECTION_PROCESSING_IND); } }
        public ICheckField WS_SECC_RPT_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SECC_RPT_HDR_IS_PROCESSED); } }
        public ICheckField WS_SECC_RPT_FTR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SECC_RPT_FTR_IS_PROCESSED); } }
        public ICheckField WS_SECC_PG_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SECC_PG_HDR_IS_PROCESSED); } }
        public ICheckField WS_SECC_BODY_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SECC_BODY_IS_PROCESSED); } }
        public IField WS_SECC_KEEP_DTL_TOGETHER_FG { get { return GetElementByName<IField>(Names.WS_SECC_KEEP_DTL_TOGETHER_FG); } }
        public IField WS_SECC_PRINT_PG_BRK_SPACING { get { return GetElementByName<IField>(Names.WS_SECC_PRINT_PG_BRK_SPACING); } }
        public IField WS_SECC_PRINT_PG_BRK_LINE { get { return GetElementByName<IField>(Names.WS_SECC_PRINT_PG_BRK_LINE); } }
        public IField WS_SECC_PRINT_RPT_FTR_LINE { get { return GetElementByName<IField>(Names.WS_SECC_PRINT_RPT_FTR_LINE); } }
        public IField WS_SECC_PG_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_SECC_PG_BRK_FLAG); } }
        public IField WS_SECC_CUR_RPT_HDR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_SECC_CUR_RPT_HDR_LINE_NUM); } }
        public IField WS_SECC_CUR_RPT_FTR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_SECC_CUR_RPT_FTR_LINE_NUM); } }
        public IField WS_SECC_FIRST_TIME_FLAG { get { return GetElementByName<IField>(Names.WS_SECC_FIRST_TIME_FLAG); } }
        public ICheckField WS_SECC_FIRST_TIME { get { return GetElementByName<ICheckField>(Names.WS_SECC_FIRST_TIME); } }
        public IField WS_SECC_DISABLE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_SECC_DISABLE_SUPPRESS); } }
        public ICheckField WS_SECC_SUPPRESS_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_SECC_SUPPRESS_DUPLICATES); } }
        public ICheckField WS_SECC_PRINT_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_SECC_PRINT_DUPLICATES); } }
        public IField WS_SECC_BODY_SECTION_LINES { get { return GetElementByName<IField>(Names.WS_SECC_BODY_SECTION_LINES); } }
        public IField WS_SECC_BODY_SUPPRESS_LINES { get { return GetElementByName<IField>(Names.WS_SECC_BODY_SUPPRESS_LINES); } }
        public IField WS_SECC_GR_COUNTER { get { return GetElementByName<IField>(Names.WS_SECC_GR_COUNTER); } }
        public IField WS_SECC_PAGE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_SECC_PAGE_SUPPRESS); } }
        public IField WS_SECC_PAGE_SUPPRESS_AFTER { get { return GetElementByName<IField>(Names.WS_SECC_PAGE_SUPPRESS_AFTER); } }
        public IField WS_SECC_PAGE_DTL_LINES { get { return GetElementByName<IField>(Names.WS_SECC_PAGE_DTL_LINES); } }
        public IField WS_SECC_CURRENTLY_WRAPPING { get { return GetElementByName<IField>(Names.WS_SECC_CURRENTLY_WRAPPING); } }
        public IField WS_SECC_CUR_PRINTING_PAGE_HDR { get { return GetElementByName<IField>(Names.WS_SECC_CUR_PRINTING_PAGE_HDR); } }
        public IField SECC_EDIT_PATTERN_OBJ12 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ12); } }
        public IField SECC_EDIT_PATTERN_OBJ84 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ84); } }
        public IField SECC_EDIT_PATTERN_OBJ85 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ85); } }
        public IField SECC_EDIT_PATTERN_OBJ86 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ86); } }
        public IField SECC_EDIT_PATTERN_OBJ87 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ87); } }
        public IField SECC_EDIT_PATTERN_OBJ88 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ88); } }
        public IField SECC_EDIT_PATTERN_OBJ89 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ89); } }
        public IField SECC_EDIT_PATTERN_OBJ90 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ90); } }
        public IField SECC_EDIT_PATTERN_OBJ91 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ91); } }
        public IField SECC_EDIT_PATTERN_OBJ92 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ92); } }
        public IField SECC_EDIT_PATTERN_OBJ93 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ93); } }
        public IField SECC_EDIT_PATTERN_OBJ94 { get { return GetElementByName<IField>(Names.SECC_EDIT_PATTERN_OBJ94); } }
        public IGroup SECC_DTL_LINE_SECTION { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_SECTION); } }
        public IField SECC_DTL_LINE_BEFORE_SPACE { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_BEFORE_SPACE); } }
        public IField SECC_DTL_LINE_AFTER_SPACING { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_AFTER_SPACING); } }
        public IField SECC_DTL_LINE_RESETPG_AFTER { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_RESETPG_AFTER); } }
        public IField SECC_DTL_LINE_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_KEEP_TOGETHER); } }
        public IField SECC_DTL_LINE_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_SUPPRSS_BLANK); } }
        public IField SECC_DTL_LINE_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_PRINT_ATBOTTM); } }
        public IField SECC_DTL_LINE_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_KEEP_WITHNEXT); } }
        public IField SECC_DTL_LINE_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_BEFORE_PG_BRK); } }
        public IField SECC_DTL_LINE_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_AFTER_PG_BRK); } }
        public IField SECC_DTL_LINE_PRINT_FLAG { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_PRINT_FLAG); } }
        public IGroup SECC_DTL_LINE_0 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_0); } }
        public IGroup SECC_DTL_LINE_1 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_1); } }
        public IGroup SECC_DTL_LINE_2 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_2); } }
        public IGroup SECC_DTL_LINE_3 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_3); } }
        public IGroup SECC_DTL_LINE_4 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_4); } }
        public IGroup SECC_DTL_LINE_5 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_5); } }
        public IGroup SECC_DTL_LINE_6 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_6); } }
        public IField SECC_DTL_LINE_6_A_OBJ84 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_6_A_OBJ84); } }
        public IField SECC_DTL_SUPRES_6_A_OBJ84 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_6_A_OBJ84); } }
        public IField SECC_DTL_LINE_6_A_OBJ85 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_6_A_OBJ85); } }
        public IField SECC_DTL_SUPRES_6_A_OBJ85 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_6_A_OBJ85); } }
        public IField SECC_DTL_LINE_6_A_OBJ86 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_6_A_OBJ86); } }
        public IField SECC_DTL_SUPRES_6_A_OBJ86 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_6_A_OBJ86); } }
        public IField SECC_DTL_LINE_6_A_OBJ87 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_6_A_OBJ87); } }
        public IField SECC_DTL_SUPRES_6_A_OBJ87 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_6_A_OBJ87); } }
        public IGroup SECC_DTL_LINE_7 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_7); } }
        public IGroup SECC_DTL_LINE_8 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_8); } }
        public IField SECC_DTL_LINE_8_A_OBJ88 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_8_A_OBJ88); } }
        public IField SECC_DTL_SUPRES_8_A_OBJ88 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_8_A_OBJ88); } }
        public IField SECC_DTL_LINE_8_A_OBJ89 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_8_A_OBJ89); } }
        public IField SECC_DTL_SUPRES_8_A_OBJ89 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_8_A_OBJ89); } }
        public IField SECC_DTL_LINE_8_A_OBJ90 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_8_A_OBJ90); } }
        public IField SECC_DTL_SUPRES_8_A_OBJ90 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_8_A_OBJ90); } }
        public IGroup SECC_DTL_LINE_9 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_9); } }
        public IGroup SECC_DTL_LINE_10 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_10); } }
        public IField SECC_DTL_LINE_10_A_OBJ91 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_10_A_OBJ91); } }
        public IField SECC_DTL_SUPRES_10_A_OBJ91 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_10_A_OBJ91); } }
        public IField SECC_DTL_LINE_10_A_OBJ92 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_10_A_OBJ92); } }
        public IField SECC_DTL_SUPRES_10_A_OBJ92 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_10_A_OBJ92); } }
        public IField SECC_DTL_LINE_10_A_OBJ93 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_10_A_OBJ93); } }
        public IField SECC_DTL_SUPRES_10_A_OBJ93 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_10_A_OBJ93); } }
        public IGroup SECC_DTL_LINE_11 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_11); } }
        public IGroup SECC_DTL_LINE_12 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_12); } }
        public IField SECC_DTL_LINE_12_A_OBJ94 { get { return GetElementByName<IField>(Names.SECC_DTL_LINE_12_A_OBJ94); } }
        public IField SECC_DTL_SUPRES_12_A_OBJ94 { get { return GetElementByName<IField>(Names.SECC_DTL_SUPRES_12_A_OBJ94); } }
        public IGroup SECC_DTL_LINE_13 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_13); } }
        public IGroup SECC_DTL_LINE_14 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_14); } }
        public IGroup SECC_DTL_LINE_15 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_15); } }
        public IGroup SECC_DTL_LINE_16 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_16); } }
        public IGroup SECC_DTL_LINE_17 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_17); } }
        public IGroup SECC_DTL_LINE_18 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_18); } }
        public IGroup SECC_DTL_LINE_19 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_19); } }
        public IGroup SECC_DTL_LINE_20 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_20); } }
        public IGroup SECC_DTL_LINE_21 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_21); } }
        public IGroup SECC_DTL_LINE_22 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_22); } }
        public IGroup SECC_DTL_LINE_23 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_23); } }
        public IGroup SECC_DTL_LINE_24 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_24); } }
        public IGroup SECC_DTL_LINE_25 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_25); } }
        public IGroup SECC_DTL_LINE_26 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_26); } }
        public IGroup SECC_DTL_LINE_27 { get { return GetElementByName<IGroup>(Names.SECC_DTL_LINE_27); } }
        public IGroup SECC_PAGE_HDR_SECTION { get { return GetElementByName<IGroup>(Names.SECC_PAGE_HDR_SECTION); } }
        public IField SECC_PAGE_HDR_BEFORE_SPACE { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_BEFORE_SPACE); } }
        public IField SECC_PAGE_HDR_AFTER_SPACING { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_AFTER_SPACING); } }
        public IField SECC_PAGE_HDR_RESETPG_AFTER { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_RESETPG_AFTER); } }
        public IField SECC_PAGE_HDR_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_KEEP_TOGETHER); } }
        public IField SECC_PAGE_HDR_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_SUPPRSS_BLANK); } }
        public IField SECC_PAGE_HDR_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_PRINT_ATBOTTM); } }
        public IField SECC_PAGE_HDR_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_KEEP_WITHNEXT); } }
        public IField SECC_PAGE_HDR_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_BEFORE_PG_BRK); } }
        public IField SECC_PAGE_HDR_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_AFTER_PG_BRK); } }
        public IField SECC_PAGE_HDR_PRINT_FLAG { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_PRINT_FLAG); } }
        public IGroup SECC_PAGE_HDR_0 { get { return GetElementByName<IGroup>(Names.SECC_PAGE_HDR_0); } }
        public IField SECC_PAGE_HDR_0_P_OBJ4 { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_0_P_OBJ4); } }
        public IGroup SECC_PAGE_HDR_1 { get { return GetElementByName<IGroup>(Names.SECC_PAGE_HDR_1); } }
        public IField SECC_PAGE_HDR_1_D_OBJ6 { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_1_D_OBJ6); } }
        public IGroup SECC_PAGE_HDR_2 { get { return GetElementByName<IGroup>(Names.SECC_PAGE_HDR_2); } }
        public IField SECC_PAGE_HDR_2_T_OBJ9 { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_2_T_OBJ9); } }
        public IGroup SECC_PAGE_HDR_3 { get { return GetElementByName<IGroup>(Names.SECC_PAGE_HDR_3); } }
        public IField SECC_PAGE_HDR_3_A_OBJ12 { get { return GetElementByName<IField>(Names.SECC_PAGE_HDR_3_A_OBJ12); } }
        public IGroup MAIN_WORK_FIELDS { get { return GetElementByName<IGroup>(Names.MAIN_WORK_FIELDS); } }
        public IField WS_MAIN_CNTL_HDR_FLAG { get { return GetElementByName<IField>(Names.WS_MAIN_CNTL_HDR_FLAG); } }
        public ICheckField WS_MAIN_CNTL_HDR { get { return GetElementByName<ICheckField>(Names.WS_MAIN_CNTL_HDR); } }
        public IField WS_MAIN_CNTL_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_MAIN_CNTL_FTR_FLAG); } }
        public ICheckField WS_MAIN_CNTL_FTR { get { return GetElementByName<ICheckField>(Names.WS_MAIN_CNTL_FTR); } }
        public IField WS_MAIN_RPT_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_MAIN_RPT_FTR_FLAG); } }
        public ICheckField WS_MAIN_RPT_FTR { get { return GetElementByName<ICheckField>(Names.WS_MAIN_RPT_FTR); } }
        public IField WS_MAIN_DTL_LINE_QT { get { return GetElementByName<IField>(Names.WS_MAIN_DTL_LINE_QT); } }
        public IField WS_MAIN_PG_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_MAIN_PG_HDR_LINE_QT); } }
        public IField WS_MAIN_PG_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_MAIN_PG_FTR_LINE_QT); } }
        public IField WS_MAIN_RPT_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_MAIN_RPT_HDR_LINE_QT); } }
        public IField WS_MAIN_RPT_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_MAIN_RPT_FTR_LINE_QT); } }
        public IField WS_MAIN_LINE_SPACING { get { return GetElementByName<IField>(Names.WS_MAIN_LINE_SPACING); } }
        public IField WS_MAIN_RPT_TYPE_CD { get { return GetElementByName<IField>(Names.WS_MAIN_RPT_TYPE_CD); } }
        public ICheckField WS_MAIN_SUMMARY_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_SUMMARY_RPT_REQUESTED); } }
        public ICheckField WS_MAIN_DTL_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_DTL_RPT_REQUESTED); } }
        public IField WS_MAIN_SECTION_PROCESSING_IND { get { return GetElementByName<IField>(Names.WS_MAIN_SECTION_PROCESSING_IND); } }
        public ICheckField WS_MAIN_RPT_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_RPT_HDR_IS_PROCESSED); } }
        public ICheckField WS_MAIN_RPT_FTR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_RPT_FTR_IS_PROCESSED); } }
        public ICheckField WS_MAIN_PG_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_PG_HDR_IS_PROCESSED); } }
        public ICheckField WS_MAIN_BODY_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_BODY_IS_PROCESSED); } }
        public IField WS_MAIN_KEEP_DTL_TOGETHER_FG { get { return GetElementByName<IField>(Names.WS_MAIN_KEEP_DTL_TOGETHER_FG); } }
        public IField WS_MAIN_PRINT_PG_BRK_SPACING { get { return GetElementByName<IField>(Names.WS_MAIN_PRINT_PG_BRK_SPACING); } }
        public IField WS_MAIN_PRINT_PG_BRK_LINE { get { return GetElementByName<IField>(Names.WS_MAIN_PRINT_PG_BRK_LINE); } }
        public IField WS_MAIN_PRINT_RPT_FTR_LINE { get { return GetElementByName<IField>(Names.WS_MAIN_PRINT_RPT_FTR_LINE); } }
        public IField WS_MAIN_PG_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_MAIN_PG_BRK_FLAG); } }
        public IField WS_MAIN_CUR_RPT_HDR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_MAIN_CUR_RPT_HDR_LINE_NUM); } }
        public IField WS_MAIN_CUR_RPT_FTR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_MAIN_CUR_RPT_FTR_LINE_NUM); } }
        public IField WS_MAIN_FIRST_TIME_FLAG { get { return GetElementByName<IField>(Names.WS_MAIN_FIRST_TIME_FLAG); } }
        public ICheckField WS_MAIN_FIRST_TIME { get { return GetElementByName<ICheckField>(Names.WS_MAIN_FIRST_TIME); } }
        public IField WS_MAIN_DISABLE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_MAIN_DISABLE_SUPPRESS); } }
        public ICheckField WS_MAIN_SUPPRESS_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_MAIN_SUPPRESS_DUPLICATES); } }
        public ICheckField WS_MAIN_PRINT_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_MAIN_PRINT_DUPLICATES); } }
        public IField WS_MAIN_BODY_SECTION_LINES { get { return GetElementByName<IField>(Names.WS_MAIN_BODY_SECTION_LINES); } }
        public IField WS_MAIN_BODY_SUPPRESS_LINES { get { return GetElementByName<IField>(Names.WS_MAIN_BODY_SUPPRESS_LINES); } }
        public IField WS_MAIN_GR_COUNTER { get { return GetElementByName<IField>(Names.WS_MAIN_GR_COUNTER); } }
        public IField WS_MAIN_PAGE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_MAIN_PAGE_SUPPRESS); } }
        public IField WS_MAIN_PAGE_SUPPRESS_AFTER { get { return GetElementByName<IField>(Names.WS_MAIN_PAGE_SUPPRESS_AFTER); } }
        public IField WS_MAIN_PAGE_DTL_LINES { get { return GetElementByName<IField>(Names.WS_MAIN_PAGE_DTL_LINES); } }
        public IField WS_MAIN_CURRENTLY_WRAPPING { get { return GetElementByName<IField>(Names.WS_MAIN_CURRENTLY_WRAPPING); } }
        public IField WS_MAIN_CUR_PRINTING_PAGE_HDR { get { return GetElementByName<IField>(Names.WS_MAIN_CUR_PRINTING_PAGE_HDR); } }
        public IField MAIN_EDIT_PATTERN_OBJ6 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ6); } }
        public IField MAIN_EDIT_PATTERN_OBJ200 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ200); } }
        public IField MAIN_EDIT_PATTERN_OBJ201 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ201); } }
        public IField MAIN_EDIT_PATTERN_OBJ202 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ202); } }
        public IField MAIN_EDIT_PATTERN_OBJ210 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ210); } }
        public IField MAIN_EDIT_PATTERN_OBJ207 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ207); } }
        public IField MAIN_EDIT_PATTERN_OBJ214 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ214); } }
        public IField MAIN_EDIT_PATTERN_OBJ208 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ208); } }
        public IField MAIN_EDIT_PATTERN_OBJ215 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ215); } }
        public IField MAIN_EDIT_PATTERN_OBJ209 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ209); } }
        public IField MAIN_EDIT_PATTERN_OBJ216 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ216); } }
        public IField MAIN_EDIT_PATTERN_OBJ219 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ219); } }
        public IField MAIN_EDIT_PATTERN_OBJ221 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ221); } }
        public IField MAIN_EDIT_PATTERN_OBJ227 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ227); } }
        public IField MAIN_EDIT_PATTERN_OBJ228 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ228); } }
        public IField MAIN_EDIT_PATTERN_OBJ229 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ229); } }
        public IField MAIN_EDIT_PATTERN_OBJ220 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ220); } }
        public IField MAIN_EDIT_PATTERN_OBJ230 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ230); } }
        public IField MAIN_EDIT_PATTERN_OBJ231 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ231); } }
        public IField MAIN_EDIT_PATTERN_OBJ247 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ247); } }
        public IField MAIN_EDIT_PATTERN_OBJ248 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ248); } }
        public IField MAIN_EDIT_PATTERN_OBJ249 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ249); } }
        public IField MAIN_EDIT_PATTERN_OBJ250 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ250); } }
        public IField MAIN_EDIT_PATTERN_OBJ251 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ251); } }
        public IField MAIN_EDIT_PATTERN_OBJ252 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ252); } }
        public IField MAIN_EDIT_PATTERN_OBJ253 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ253); } }
        public IField MAIN_EDIT_PATTERN_OBJ254 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ254); } }
        public IField MAIN_EDIT_PATTERN_OBJ255 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ255); } }
        public IField MAIN_EDIT_PATTERN_OBJ256 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ256); } }
        public IField MAIN_EDIT_PATTERN_OBJ257 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ257); } }
        public IField MAIN_EDIT_PATTERN_OBJ258 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ258); } }
        public IField MAIN_EDIT_PATTERN_OBJ259 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ259); } }
        public IField MAIN_EDIT_PATTERN_OBJ260 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ260); } }
        public IField MAIN_EDIT_PATTERN_OBJ261 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ261); } }
        public IField MAIN_EDIT_PATTERN_OBJ262 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ262); } }
        public IField MAIN_EDIT_PATTERN_OBJ263 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ263); } }
        public IField MAIN_EDIT_PATTERN_OBJ264 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ264); } }
        public IField MAIN_EDIT_PATTERN_OBJ265 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ265); } }
        public IField MAIN_EDIT_PATTERN_OBJ266 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ266); } }
        public IField MAIN_EDIT_PATTERN_OBJ267 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ267); } }
        public IGroup MAIN_DTL_LINE_SECTION { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_SECTION); } }
        public IField MAIN_DTL_LINE_BEFORE_SPACE { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_BEFORE_SPACE); } }
        public IField MAIN_DTL_LINE_AFTER_SPACING { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_AFTER_SPACING); } }
        public IField MAIN_DTL_LINE_RESETPG_AFTER { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_RESETPG_AFTER); } }
        public IField MAIN_DTL_LINE_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_KEEP_TOGETHER); } }
        public IField MAIN_DTL_LINE_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_SUPPRSS_BLANK); } }
        public IField MAIN_DTL_LINE_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_PRINT_ATBOTTM); } }
        public IField MAIN_DTL_LINE_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_KEEP_WITHNEXT); } }
        public IField MAIN_DTL_LINE_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_BEFORE_PG_BRK); } }
        public IField MAIN_DTL_LINE_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_AFTER_PG_BRK); } }
        public IField MAIN_DTL_LINE_PRINT_FLAG { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_PRINT_FLAG); } }
        public IGroup MAIN_DTL_LINE_0 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_0); } }
        public IGroup MAIN_DTL_LINE_1 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_1); } }
        public IGroup MAIN_DTL_LINE_2 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_2); } }
        public IGroup MAIN_DTL_LINE_3 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_3); } }
        public IGroup MAIN_DTL_LINE_4 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_4); } }
        public IField MAIN_DTL_LINE_4_A_OBJ200 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_4_A_OBJ200); } }
        public IField MAIN_DTL_SUPRES_4_A_OBJ200 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_4_A_OBJ200); } }
        public IGroup MAIN_DTL_LINE_5 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_5); } }
        public IGroup MAIN_DTL_LINE_6 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_6); } }
        public IField MAIN_DTL_LINE_6_A_OBJ201 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_6_A_OBJ201); } }
        public IField MAIN_DTL_SUPRES_6_A_OBJ201 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_6_A_OBJ201); } }
        public IGroup MAIN_DTL_LINE_7 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_7); } }
        public IGroup MAIN_DTL_LINE_8 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_8); } }
        public IField MAIN_DTL_LINE_8_A_OBJ202 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_8_A_OBJ202); } }
        public IField MAIN_DTL_SUPRES_8_A_OBJ202 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_8_A_OBJ202); } }
        public IField MAIN_DTL_LINE_8_A_OBJ210 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_8_A_OBJ210); } }
        public IField MAIN_DTL_SUPRES_8_A_OBJ210 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_8_A_OBJ210); } }
        public IGroup MAIN_DTL_LINE_9 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_9); } }
        public IGroup MAIN_DTL_LINE_10 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_10); } }
        public IField MAIN_DTL_LINE_10_A_OBJ207 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_10_A_OBJ207); } }
        public IField MAIN_DTL_SUPRES_10_A_OBJ207 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_10_A_OBJ207); } }
        public IField MAIN_DTL_LINE_10_A_OBJ214 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_10_A_OBJ214); } }
        public IField MAIN_DTL_SUPRES_10_A_OBJ214 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_10_A_OBJ214); } }
        public IGroup MAIN_DTL_LINE_11 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_11); } }
        public IGroup MAIN_DTL_LINE_12 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_12); } }
        public IField MAIN_DTL_LINE_12_A_OBJ208 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_12_A_OBJ208); } }
        public IField MAIN_DTL_SUPRES_12_A_OBJ208 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_12_A_OBJ208); } }
        public IField MAIN_DTL_LINE_12_A_OBJ215 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_12_A_OBJ215); } }
        public IField MAIN_DTL_SUPRES_12_A_OBJ215 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_12_A_OBJ215); } }
        public IGroup MAIN_DTL_LINE_13 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_13); } }
        public IGroup MAIN_DTL_LINE_14 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_14); } }
        public IField MAIN_DTL_LINE_14_A_OBJ209 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_14_A_OBJ209); } }
        public IField MAIN_DTL_SUPRES_14_A_OBJ209 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_14_A_OBJ209); } }
        public IGroup MAIN_DTL_LINE_15 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_15); } }
        public IGroup MAIN_DTL_LINE_16 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_16); } }
        public IField MAIN_DTL_LINE_16_A_OBJ216 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_16_A_OBJ216); } }
        public IField MAIN_DTL_SUPRES_16_A_OBJ216 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_16_A_OBJ216); } }
        public IGroup MAIN_DTL_LINE_17 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_17); } }
        public IGroup MAIN_DTL_LINE_18 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_18); } }
        public IField MAIN_DTL_LINE_18_A_OBJ219 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_18_A_OBJ219); } }
        public IField MAIN_DTL_SUPRES_18_A_OBJ219 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_18_A_OBJ219); } }
        public IGroup MAIN_DTL_LINE_19 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_19); } }
        public IGroup MAIN_DTL_LINE_20 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_20); } }
        public IGroup MAIN_DTL_LINE_21 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_21); } }
        public IGroup MAIN_DTL_LINE_22 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_22); } }
        public IGroup MAIN_DTL_LINE_23 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_23); } }
        public IField MAIN_DTL_LINE_23_A_OBJ221 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_23_A_OBJ221); } }
        public IField MAIN_DTL_SUPRES_23_A_OBJ221 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_23_A_OBJ221); } }
        public IField MAIN_DTL_LINE_23_A_OBJ227 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_23_A_OBJ227); } }
        public IField MAIN_DTL_SUPRES_23_A_OBJ227 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_23_A_OBJ227); } }
        public IField MAIN_DTL_LINE_23_A_OBJ228 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_23_A_OBJ228); } }
        public IField MAIN_DTL_SUPRES_23_A_OBJ228 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_23_A_OBJ228); } }
        public IField MAIN_DTL_LINE_23_A_OBJ229 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_23_A_OBJ229); } }
        public IField MAIN_DTL_SUPRES_23_A_OBJ229 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_23_A_OBJ229); } }
        public IField MAIN_DTL_LINE_23_A_OBJ220 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_23_A_OBJ220); } }
        public IField MAIN_DTL_SUPRES_23_A_OBJ220 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_23_A_OBJ220); } }
        public IGroup MAIN_DTL_LINE_24 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_24); } }
        public IGroup MAIN_DTL_LINE_25 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_25); } }
        public IField MAIN_DTL_LINE_25_A_OBJ230 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_25_A_OBJ230); } }
        public IField MAIN_DTL_SUPRES_25_A_OBJ230 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_25_A_OBJ230); } }
        public IGroup MAIN_DTL_LINE_26 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_26); } }
        public IGroup MAIN_DTL_LINE_27 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_27); } }
        public IGroup MAIN_DTL_LINE_28 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_28); } }
        public IGroup MAIN_DTL_LINE_29 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_29); } }
        public IGroup MAIN_DTL_LINE_30 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_30); } }
        public IField MAIN_DTL_LINE_30_A_OBJ231 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_30_A_OBJ231); } }
        public IField MAIN_DTL_SUPRES_30_A_OBJ231 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_30_A_OBJ231); } }
        public IField MAIN_DTL_LINE_30_A_OBJ247 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_30_A_OBJ247); } }
        public IField MAIN_DTL_SUPRES_30_A_OBJ247 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_30_A_OBJ247); } }
        public IField MAIN_DTL_LINE_30_A_OBJ248 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_30_A_OBJ248); } }
        public IField MAIN_DTL_SUPRES_30_A_OBJ248 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_30_A_OBJ248); } }
        public IField MAIN_DTL_LINE_30_A_OBJ249 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_30_A_OBJ249); } }
        public IField MAIN_DTL_SUPRES_30_A_OBJ249 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_30_A_OBJ249); } }
        public IGroup MAIN_DTL_LINE_31 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_31); } }
        public IGroup MAIN_DTL_LINE_32 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_32); } }
        public IField MAIN_DTL_LINE_32_A_OBJ250 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_32_A_OBJ250); } }
        public IField MAIN_DTL_SUPRES_32_A_OBJ250 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_32_A_OBJ250); } }
        public IField MAIN_DTL_LINE_32_A_OBJ251 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_32_A_OBJ251); } }
        public IField MAIN_DTL_SUPRES_32_A_OBJ251 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_32_A_OBJ251); } }
        public IField MAIN_DTL_LINE_32_A_OBJ252 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_32_A_OBJ252); } }
        public IField MAIN_DTL_SUPRES_32_A_OBJ252 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_32_A_OBJ252); } }
        public IField MAIN_DTL_LINE_32_A_OBJ253 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_32_A_OBJ253); } }
        public IField MAIN_DTL_SUPRES_32_A_OBJ253 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_32_A_OBJ253); } }
        public IField MAIN_DTL_LINE_32_A_OBJ254 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_32_A_OBJ254); } }
        public IField MAIN_DTL_SUPRES_32_A_OBJ254 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_32_A_OBJ254); } }
        public IGroup MAIN_DTL_LINE_33 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_33); } }
        public IGroup MAIN_DTL_LINE_34 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_34); } }
        public IField MAIN_DTL_LINE_34_A_OBJ255 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_34_A_OBJ255); } }
        public IField MAIN_DTL_SUPRES_34_A_OBJ255 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_34_A_OBJ255); } }
        public IField MAIN_DTL_LINE_34_A_OBJ256 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_34_A_OBJ256); } }
        public IField MAIN_DTL_SUPRES_34_A_OBJ256 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_34_A_OBJ256); } }
        public IField MAIN_DTL_LINE_34_A_OBJ257 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_34_A_OBJ257); } }
        public IField MAIN_DTL_SUPRES_34_A_OBJ257 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_34_A_OBJ257); } }
        public IField MAIN_DTL_LINE_34_A_OBJ258 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_34_A_OBJ258); } }
        public IField MAIN_DTL_SUPRES_34_A_OBJ258 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_34_A_OBJ258); } }
        public IField MAIN_DTL_LINE_34_A_OBJ259 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_34_A_OBJ259); } }
        public IField MAIN_DTL_SUPRES_34_A_OBJ259 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_34_A_OBJ259); } }
        public IGroup MAIN_DTL_LINE_35 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_35); } }
        public IGroup MAIN_DTL_LINE_36 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_36); } }
        public IField MAIN_DTL_LINE_36_A_OBJ260 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_36_A_OBJ260); } }
        public IField MAIN_DTL_SUPRES_36_A_OBJ260 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_36_A_OBJ260); } }
        public IField MAIN_DTL_LINE_36_A_OBJ261 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_36_A_OBJ261); } }
        public IField MAIN_DTL_SUPRES_36_A_OBJ261 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_36_A_OBJ261); } }
        public IField MAIN_DTL_LINE_36_A_OBJ262 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_36_A_OBJ262); } }
        public IField MAIN_DTL_SUPRES_36_A_OBJ262 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_36_A_OBJ262); } }
        public IField MAIN_DTL_LINE_36_A_OBJ263 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_36_A_OBJ263); } }
        public IField MAIN_DTL_SUPRES_36_A_OBJ263 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_36_A_OBJ263); } }
        public IField MAIN_DTL_LINE_36_A_OBJ264 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_36_A_OBJ264); } }
        public IField MAIN_DTL_SUPRES_36_A_OBJ264 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_36_A_OBJ264); } }
        public IGroup MAIN_DTL_LINE_37 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_37); } }
        public IGroup MAIN_DTL_LINE_38 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_38); } }
        public IField MAIN_DTL_LINE_38_A_OBJ265 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_38_A_OBJ265); } }
        public IField MAIN_DTL_SUPRES_38_A_OBJ265 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_38_A_OBJ265); } }
        public IGroup MAIN_DTL_LINE_39 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_39); } }
        public IGroup MAIN_DTL_LINE_40 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_40); } }
        public IField MAIN_DTL_LINE_40_A_OBJ266 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_40_A_OBJ266); } }
        public IField MAIN_DTL_SUPRES_40_A_OBJ266 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_40_A_OBJ266); } }
        public IGroup MAIN_DTL_LINE_41 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_41); } }
        public IGroup MAIN_DTL_LINE_42 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_42); } }
        public IField MAIN_DTL_LINE_42_A_OBJ267 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_42_A_OBJ267); } }
        public IField MAIN_DTL_SUPRES_42_A_OBJ267 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_42_A_OBJ267); } }
        public IGroup MAIN_DTL_LINE_43 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_43); } }
        public IGroup MAIN_DTL_LINE_44 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_44); } }
        public IGroup MAIN_DTL_LINE_45 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_45); } }
        public IGroup MAIN_PAGE_HDR_SECTION { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_SECTION); } }
        public IField MAIN_PAGE_HDR_BEFORE_SPACE { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_BEFORE_SPACE); } }
        public IField MAIN_PAGE_HDR_AFTER_SPACING { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_AFTER_SPACING); } }
        public IField MAIN_PAGE_HDR_RESETPG_AFTER { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_RESETPG_AFTER); } }
        public IField MAIN_PAGE_HDR_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_KEEP_TOGETHER); } }
        public IField MAIN_PAGE_HDR_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_SUPPRSS_BLANK); } }
        public IField MAIN_PAGE_HDR_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_PRINT_ATBOTTM); } }
        public IField MAIN_PAGE_HDR_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_KEEP_WITHNEXT); } }
        public IField MAIN_PAGE_HDR_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_BEFORE_PG_BRK); } }
        public IField MAIN_PAGE_HDR_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_AFTER_PG_BRK); } }
        public IField MAIN_PAGE_HDR_PRINT_FLAG { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_PRINT_FLAG); } }
        public IGroup MAIN_PAGE_HDR_0 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_0); } }
        public IField MAIN_PAGE_HDR_0_P_OBJ217 { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_0_P_OBJ217); } }
        public IGroup MAIN_PAGE_HDR_1 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_1); } }
        public IField MAIN_PAGE_HDR_1_D_OBJ272 { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_1_D_OBJ272); } }
        public IGroup MAIN_PAGE_HDR_2 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_2); } }
        public IField MAIN_PAGE_HDR_2_T_OBJ273 { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_2_T_OBJ273); } }
        public IGroup MAIN_PAGE_HDR_3 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_3); } }
        public IField MAIN_PAGE_HDR_3_A_OBJ6 { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_3_A_OBJ6); } }
        public IGroup P_IMPORT_EV1 { get { return GetElementByName<IGroup>(Names.P_IMPORT_EV1); } }
        public IGroup P_REPORT_PARMS_ET { get { return GetElementByName<IGroup>(Names.P_REPORT_PARMS_ET); } }
        public IField P_PARM1_0001_001MS { get { return GetElementByName<IField>(Names.P_PARM1_0001_001MS); } }
        public IField P_PARM1_0001_001 { get { return GetElementByName<IField>(Names.P_PARM1_0001_001); } }
        public IField P_PARM1_0001_001XX { get { return GetElementByName<IField>(Names.P_PARM1_0001_001XX); } }
        public IField P_PARM2_0001_002MS { get { return GetElementByName<IField>(Names.P_PARM2_0001_002MS); } }
        public IField P_PARM2_0001_002 { get { return GetElementByName<IField>(Names.P_PARM2_0001_002); } }
        public IField P_PARM2_0001_002XX { get { return GetElementByName<IField>(Names.P_PARM2_0001_002XX); } }
        public IField P_SUBREPORT_CODE_0001_003MS { get { return GetElementByName<IField>(Names.P_SUBREPORT_CODE_0001_003MS); } }
        public IField P_SUBREPORT_CODE_0001_003 { get { return GetElementByName<IField>(Names.P_SUBREPORT_CODE_0001_003); } }
        public IField P_SUBREPORT_CODE_0001_003XX { get { return GetElementByName<IField>(Names.P_SUBREPORT_CODE_0001_003XX); } }
        public IGroup P_IMPORT_EV2 { get { return GetElementByName<IGroup>(Names.P_IMPORT_EV2); } }
        public IGroup P_OCSE34_ET { get { return GetElementByName<IGroup>(Names.P_OCSE34_ET); } }
        public IField P_PERIOD_0002_004MS { get { return GetElementByName<IField>(Names.P_PERIOD_0002_004MS); } }
        public IField P_PERIOD_0002_004 { get { return GetElementByName<IField>(Names.P_PERIOD_0002_004); } }
        public IField P_PERIOD_0002_004XX { get { return GetElementByName<IField>(Names.P_PERIOD_0002_004XX); } }
        public IField P_PREVIOUS_UNDISTRIB_AMOUN05MS { get { return GetElementByName<IField>(Names.P_PREVIOUS_UNDISTRIB_AMOUN05MS); } }
        public IField P_PREVIOUS_UNDISTRIB_AMOUN_005 { get { return GetElementByName<IField>(Names.P_PREVIOUS_UNDISTRIB_AMOUN_005); } }
        public IField P_PREVIOUS_UNDISTRIB_AMOUN05XX { get { return GetElementByName<IField>(Names.P_PREVIOUS_UNDISTRIB_AMOUN05XX); } }
        public IField P_TOTAL_COLLECTIONS_AMOUNT06MS { get { return GetElementByName<IField>(Names.P_TOTAL_COLLECTIONS_AMOUNT06MS); } }
        public IField P_TOTAL_COLLECTIONS_AMOUNT_006 { get { return GetElementByName<IField>(Names.P_TOTAL_COLLECTIONS_AMOUNT_006); } }
        public IField P_TOTAL_COLLECTIONS_AMOUNT06XX { get { return GetElementByName<IField>(Names.P_TOTAL_COLLECTIONS_AMOUNT06XX); } }
        public IField P_OFFSET_FEDERAL_TAXREFUND07MS { get { return GetElementByName<IField>(Names.P_OFFSET_FEDERAL_TAXREFUND07MS); } }
        public IField P_OFFSET_FEDERAL_TAXREFUND_007 { get { return GetElementByName<IField>(Names.P_OFFSET_FEDERAL_TAXREFUND_007); } }
        public IField P_OFFSET_FEDERAL_TAXREFUND07XX { get { return GetElementByName<IField>(Names.P_OFFSET_FEDERAL_TAXREFUND07XX); } }
        public IField P_OFFSET_STATE_TAX_REFUND_08MS { get { return GetElementByName<IField>(Names.P_OFFSET_STATE_TAX_REFUND_08MS); } }
        public IField P_OFFSET_STATE_TAX_REFUND__008 { get { return GetElementByName<IField>(Names.P_OFFSET_STATE_TAX_REFUND__008); } }
        public IField P_OFFSET_STATE_TAX_REFUND_08XX { get { return GetElementByName<IField>(Names.P_OFFSET_STATE_TAX_REFUND_08XX); } }
        public IField P_UNEMPLOYMENT_COMP_AMOUNT09MS { get { return GetElementByName<IField>(Names.P_UNEMPLOYMENT_COMP_AMOUNT09MS); } }
        public IField P_UNEMPLOYMENT_COMP_AMOUNT_009 { get { return GetElementByName<IField>(Names.P_UNEMPLOYMENT_COMP_AMOUNT_009); } }
        public IField P_UNEMPLOYMENT_COMP_AMOUNT09XX { get { return GetElementByName<IField>(Names.P_UNEMPLOYMENT_COMP_AMOUNT09XX); } }
        public IField P_ADMINSTRATIVE_ENFORCE_AM10MS { get { return GetElementByName<IField>(Names.P_ADMINSTRATIVE_ENFORCE_AM10MS); } }
        public IField P_ADMINSTRATIVE_ENFORCE_AM_010 { get { return GetElementByName<IField>(Names.P_ADMINSTRATIVE_ENFORCE_AM_010); } }
        public IField P_ADMINSTRATIVE_ENFORCE_AM10XX { get { return GetElementByName<IField>(Names.P_ADMINSTRATIVE_ENFORCE_AM10XX); } }
        public IField P_INCOME_WITHHOLDING_AMOUN11MS { get { return GetElementByName<IField>(Names.P_INCOME_WITHHOLDING_AMOUN11MS); } }
        public IField P_INCOME_WITHHOLDING_AMOUN_011 { get { return GetElementByName<IField>(Names.P_INCOME_WITHHOLDING_AMOUN_011); } }
        public IField P_INCOME_WITHHOLDING_AMOUN11XX { get { return GetElementByName<IField>(Names.P_INCOME_WITHHOLDING_AMOUN11XX); } }
        public IField P_OTHER_STATES_AMOUNT_000912MS { get { return GetElementByName<IField>(Names.P_OTHER_STATES_AMOUNT_000912MS); } }
        public IField P_OTHER_STATES_AMOUNT_0009_012 { get { return GetElementByName<IField>(Names.P_OTHER_STATES_AMOUNT_0009_012); } }
        public IField P_OTHER_STATES_AMOUNT_000912XX { get { return GetElementByName<IField>(Names.P_OTHER_STATES_AMOUNT_000912XX); } }
        public IField P_OTHER_SOURCES_AMOUNT_00013MS { get { return GetElementByName<IField>(Names.P_OTHER_SOURCES_AMOUNT_00013MS); } }
        public IField P_OTHER_SOURCES_AMOUNT_000_013 { get { return GetElementByName<IField>(Names.P_OTHER_SOURCES_AMOUNT_000_013); } }
        public IField P_OTHER_SOURCES_AMOUNT_00013XX { get { return GetElementByName<IField>(Names.P_OTHER_SOURCES_AMOUNT_00013XX); } }
        public IField P_ADJUSTMENTS_AMOUNT_000914MS { get { return GetElementByName<IField>(Names.P_ADJUSTMENTS_AMOUNT_000914MS); } }
        public IField P_ADJUSTMENTS_AMOUNT_0009_014 { get { return GetElementByName<IField>(Names.P_ADJUSTMENTS_AMOUNT_0009_014); } }
        public IField P_ADJUSTMENTS_AMOUNT_000914XX { get { return GetElementByName<IField>(Names.P_ADJUSTMENTS_AMOUNT_000914XX); } }
        public IField P_NON_IVD_CASES_AMOUNT_00015MS { get { return GetElementByName<IField>(Names.P_NON_IVD_CASES_AMOUNT_00015MS); } }
        public IField P_NON_IVD_CASES_AMOUNT_000_015 { get { return GetElementByName<IField>(Names.P_NON_IVD_CASES_AMOUNT_000_015); } }
        public IField P_NON_IVD_CASES_AMOUNT_00015XX { get { return GetElementByName<IField>(Names.P_NON_IVD_CASES_AMOUNT_00015XX); } }
        public IField P_OTHER_STATES_CURRENT_IVA16MS { get { return GetElementByName<IField>(Names.P_OTHER_STATES_CURRENT_IVA16MS); } }
        public IField P_OTHER_STATES_CURRENT_IVA_016 { get { return GetElementByName<IField>(Names.P_OTHER_STATES_CURRENT_IVA_016); } }
        public IField P_OTHER_STATES_CURRENT_IVA16XX { get { return GetElementByName<IField>(Names.P_OTHER_STATES_CURRENT_IVA16XX); } }
        public IField P_OTHER_STATES_CURRENT_IVE17MS { get { return GetElementByName<IField>(Names.P_OTHER_STATES_CURRENT_IVE17MS); } }
        public IField P_OTHER_STATES_CURRENT_IVE_017 { get { return GetElementByName<IField>(Names.P_OTHER_STATES_CURRENT_IVE_017); } }
        public IField P_OTHER_STATES_CURRENT_IVE17XX { get { return GetElementByName<IField>(Names.P_OTHER_STATES_CURRENT_IVE17XX); } }
        public IField P_OTHERSTATE_FORMER_ASSIST18MS { get { return GetElementByName<IField>(Names.P_OTHERSTATE_FORMER_ASSIST18MS); } }
        public IField P_OTHERSTATE_FORMER_ASSIST_018 { get { return GetElementByName<IField>(Names.P_OTHERSTATE_FORMER_ASSIST_018); } }
        public IField P_OTHERSTATE_FORMER_ASSIST18XX { get { return GetElementByName<IField>(Names.P_OTHERSTATE_FORMER_ASSIST18XX); } }
        public IField P_OTHER_STATE_NEVER_ASSIST19MS { get { return GetElementByName<IField>(Names.P_OTHER_STATE_NEVER_ASSIST19MS); } }
        public IField P_OTHER_STATE_NEVER_ASSIST_019 { get { return GetElementByName<IField>(Names.P_OTHER_STATE_NEVER_ASSIST_019); } }
        public IField P_OTHER_STATE_NEVER_ASSIST19XX { get { return GetElementByName<IField>(Names.P_OTHER_STATE_NEVER_ASSIST19XX); } }
        public IField P_OTHER_STATE_AMT_FORWARD_20MS { get { return GetElementByName<IField>(Names.P_OTHER_STATE_AMT_FORWARD_20MS); } }
        public IField P_OTHER_STATE_AMT_FORWARD__020 { get { return GetElementByName<IField>(Names.P_OTHER_STATE_AMT_FORWARD__020); } }
        public IField P_OTHER_STATE_AMT_FORWARD_20XX { get { return GetElementByName<IField>(Names.P_OTHER_STATE_AMT_FORWARD_20XX); } }
        public IField P_AVAIL_FOR_DISTRIBUTION_A21MS { get { return GetElementByName<IField>(Names.P_AVAIL_FOR_DISTRIBUTION_A21MS); } }
        public IField P_AVAIL_FOR_DISTRIBUTION_A_021 { get { return GetElementByName<IField>(Names.P_AVAIL_FOR_DISTRIBUTION_A_021); } }
        public IField P_AVAIL_FOR_DISTRIBUTION_A21XX { get { return GetElementByName<IField>(Names.P_AVAIL_FOR_DISTRIBUTION_A21XX); } }
        public IField P_DISTRIB_ASSIST_REIMB_IVA22MS { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_IVA22MS); } }
        public IField P_DISTRIB_ASSIST_REIMB_IVA_022 { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_IVA_022); } }
        public IField P_DISTRIB_ASSIST_REIMB_IVA22XX { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_IVA22XX); } }
        public IField P_DISTRIB_ASSIST_REIMB_IVE23MS { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_IVE23MS); } }
        public IField P_DISTRIB_ASSIST_REIMB_IVE_023 { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_IVE_023); } }
        public IField P_DISTRIB_ASSIST_REIMB_IVE23XX { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_IVE23XX); } }
        public IField P_DISTRIB_ASSIST_REIMB_FMR24MS { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_FMR24MS); } }
        public IField P_DISTRIB_ASSIST_REIMB_FMR_024 { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_FMR_024); } }
        public IField P_DISTRIB_ASSIST_REIMB_FMR24XX { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_FMR24XX); } }
        public IField P_DISTRIB_ASSIST_REIMB_AMO25MS { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_AMO25MS); } }
        public IField P_DISTRIB_ASSIST_REIMB_AMO_025 { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_AMO_025); } }
        public IField P_DISTRIB_ASSIST_REIMB_AMO25XX { get { return GetElementByName<IField>(Names.P_DISTRIB_ASSIST_REIMB_AMO25XX); } }
        public IField P_DISTRIBUTED_MED_SUPPORT_26MS { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT_26MS); } }
        public IField P_DISTRIBUTED_MED_SUPPORT__026 { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT__026); } }
        public IField P_DISTRIBUTED_MED_SUPPORT_26XX { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT_26XX); } }
        public IField P_DISTRIBUTED_MED_SUPPORT_27MS { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT_27MS); } }
        public IField P_DISTRIBUTED_MED_SUPPORT__027 { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT__027); } }
        public IField P_DISTRIBUTED_MED_SUPPORT_27XX { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT_27XX); } }
        public IField P_DISTRIBUTED_MED_SUPPORT_28MS { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT_28MS); } }
        public IField P_DISTRIBUTED_MED_SUPPORT__028 { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT__028); } }
        public IField P_DISTRIBUTED_MED_SUPPORT_28XX { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT_28XX); } }
        public IField P_DISTRIBUTED_MED_SUPPORT_29MS { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT_29MS); } }
        public IField P_DISTRIBUTED_MED_SUPPORT__029 { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT__029); } }
        public IField P_DISTRIBUTED_MED_SUPPORT_29XX { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT_29XX); } }
        public IField P_DISTRIBUTED_MED_SUPPORT_30MS { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT_30MS); } }
        public IField P_DISTRIBUTED_MED_SUPPORT__030 { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT__030); } }
        public IField P_DISTRIBUTED_MED_SUPPORT_30XX { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_MED_SUPPORT_30XX); } }
        public IField P_DISTRIBUTED_FAMILY_IVA_A31MS { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_IVA_A31MS); } }
        public IField P_DISTRIBUTED_FAMILY_IVA_A_031 { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_IVA_A_031); } }
        public IField P_DISTRIBUTED_FAMILY_IVA_A31XX { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_IVA_A31XX); } }
        public IField P_DISTRIBUTED_FAMILY_IVE_A32MS { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_IVE_A32MS); } }
        public IField P_DISTRIBUTED_FAMILY_IVE_A_032 { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_IVE_A_032); } }
        public IField P_DISTRIBUTED_FAMILY_IVE_A32XX { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_IVE_A32XX); } }
        public IField P_DISTRIBUTED_FAMILY_FORME33MS { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_FORME33MS); } }
        public IField P_DISTRIBUTED_FAMILY_FORME_033 { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_FORME_033); } }
        public IField P_DISTRIBUTED_FAMILY_FORME33XX { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_FORME33XX); } }
        public IField P_DISTRIBUTED_FAMILY_NEVER34MS { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_NEVER34MS); } }
        public IField P_DISTRIBUTED_FAMILY_NEVER_034 { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_NEVER_034); } }
        public IField P_DISTRIBUTED_FAMILY_NEVER34XX { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_NEVER34XX); } }
        public IField P_DISTRIBUTED_FAMILY_AMOUN35MS { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_AMOUN35MS); } }
        public IField P_DISTRIBUTED_FAMILY_AMOUN_035 { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_AMOUN_035); } }
        public IField P_DISTRIBUTED_FAMILY_AMOUN35XX { get { return GetElementByName<IField>(Names.P_DISTRIBUTED_FAMILY_AMOUN35XX); } }
        public IField P_TOTAL_DISTRIBUTED_IVA_AM36MS { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_IVA_AM36MS); } }
        public IField P_TOTAL_DISTRIBUTED_IVA_AM_036 { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_IVA_AM_036); } }
        public IField P_TOTAL_DISTRIBUTED_IVA_AM36XX { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_IVA_AM36XX); } }
        public IField P_TOTAL_DISTRIBUTED_IVE_AM37MS { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_IVE_AM37MS); } }
        public IField P_TOTAL_DISTRIBUTED_IVE_AM_037 { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_IVE_AM_037); } }
        public IField P_TOTAL_DISTRIBUTED_IVE_AM37XX { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_IVE_AM37XX); } }
        public IField P_TOTAL_DISTRIBUTED_FORMER38MS { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_FORMER38MS); } }
        public IField P_TOTAL_DISTRIBUTED_FORMER_038 { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_FORMER_038); } }
        public IField P_TOTAL_DISTRIBUTED_FORMER38XX { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_FORMER38XX); } }
        public IField P_TOTAL_DISTRIBUTED_NEVER_39MS { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_NEVER_39MS); } }
        public IField P_TOTAL_DISTRIBUTED_NEVER__039 { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_NEVER__039); } }
        public IField P_TOTAL_DISTRIBUTED_NEVER_39XX { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_NEVER_39XX); } }
        public IField P_TOTAL_DISTRIBUTED_AMOUNT40MS { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_AMOUNT40MS); } }
        public IField P_TOTAL_DISTRIBUTED_AMOUNT_040 { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_AMOUNT_040); } }
        public IField P_TOTAL_DISTRIBUTED_AMOUNT40XX { get { return GetElementByName<IField>(Names.P_TOTAL_DISTRIBUTED_AMOUNT40XX); } }
        public IField P_GROSS_UNDISTRIBUTED_AMOU41MS { get { return GetElementByName<IField>(Names.P_GROSS_UNDISTRIBUTED_AMOU41MS); } }
        public IField P_GROSS_UNDISTRIBUTED_AMOU_041 { get { return GetElementByName<IField>(Names.P_GROSS_UNDISTRIBUTED_AMOU_041); } }
        public IField P_GROSS_UNDISTRIBUTED_AMOU41XX { get { return GetElementByName<IField>(Names.P_GROSS_UNDISTRIBUTED_AMOU41XX); } }
        public IField P_UNDISTRIBUTED_AMOUNT_00342MS { get { return GetElementByName<IField>(Names.P_UNDISTRIBUTED_AMOUNT_00342MS); } }
        public IField P_UNDISTRIBUTED_AMOUNT_003_042 { get { return GetElementByName<IField>(Names.P_UNDISTRIBUTED_AMOUNT_003_042); } }
        public IField P_UNDISTRIBUTED_AMOUNT_00342XX { get { return GetElementByName<IField>(Names.P_UNDISTRIBUTED_AMOUNT_00342XX); } }
        public IField P_NET_UNDISTRIBUTED_AMOUNT43MS { get { return GetElementByName<IField>(Names.P_NET_UNDISTRIBUTED_AMOUNT43MS); } }
        public IField P_NET_UNDISTRIBUTED_AMOUNT_043 { get { return GetElementByName<IField>(Names.P_NET_UNDISTRIBUTED_AMOUNT_043); } }
        public IField P_NET_UNDISTRIBUTED_AMOUNT43XX { get { return GetElementByName<IField>(Names.P_NET_UNDISTRIBUTED_AMOUNT43XX); } }
        public IField P_FEDERAL_SHARE_IVA_AMOUNT44MS { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_IVA_AMOUNT44MS); } }
        public IField P_FEDERAL_SHARE_IVA_AMOUNT_044 { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_IVA_AMOUNT_044); } }
        public IField P_FEDERAL_SHARE_IVA_AMOUNT44XX { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_IVA_AMOUNT44XX); } }
        public IField P_FEDERAL_SHARE_IVE_AMOUNT45MS { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_IVE_AMOUNT45MS); } }
        public IField P_FEDERAL_SHARE_IVE_AMOUNT_045 { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_IVE_AMOUNT_045); } }
        public IField P_FEDERAL_SHARE_IVE_AMOUNT45XX { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_IVE_AMOUNT45XX); } }
        public IField P_FEDERAL_SHARE_FORMER_AMO46MS { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_FORMER_AMO46MS); } }
        public IField P_FEDERAL_SHARE_FORMER_AMO_046 { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_FORMER_AMO_046); } }
        public IField P_FEDERAL_SHARE_FORMER_AMO46XX { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_FORMER_AMO46XX); } }
        public IField P_FEDERAL_SHARE_TOTAL_AMOU47MS { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_TOTAL_AMOU47MS); } }
        public IField P_FEDERAL_SHARE_TOTAL_AMOU_047 { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_TOTAL_AMOU_047); } }
        public IField P_FEDERAL_SHARE_TOTAL_AMOU47XX { get { return GetElementByName<IField>(Names.P_FEDERAL_SHARE_TOTAL_AMOU47XX); } }
        public IField P_INCENTIVE_PAYMENT_IVA_AM48MS { get { return GetElementByName<IField>(Names.P_INCENTIVE_PAYMENT_IVA_AM48MS); } }
        public IField P_INCENTIVE_PAYMENT_IVA_AM_048 { get { return GetElementByName<IField>(Names.P_INCENTIVE_PAYMENT_IVA_AM_048); } }
        public IField P_INCENTIVE_PAYMENT_IVA_AM48XX { get { return GetElementByName<IField>(Names.P_INCENTIVE_PAYMENT_IVA_AM48XX); } }
        public IField P_INCENTIVE_PAYMENT_FORMER49MS { get { return GetElementByName<IField>(Names.P_INCENTIVE_PAYMENT_FORMER49MS); } }
        public IField P_INCENTIVE_PAYMENT_FORMER_049 { get { return GetElementByName<IField>(Names.P_INCENTIVE_PAYMENT_FORMER_049); } }
        public IField P_INCENTIVE_PAYMENT_FORMER49XX { get { return GetElementByName<IField>(Names.P_INCENTIVE_PAYMENT_FORMER49XX); } }
        public IField P_INCENTIVE_PAYMENT_AMOUNT50MS { get { return GetElementByName<IField>(Names.P_INCENTIVE_PAYMENT_AMOUNT50MS); } }
        public IField P_INCENTIVE_PAYMENT_AMOUNT_050 { get { return GetElementByName<IField>(Names.P_INCENTIVE_PAYMENT_AMOUNT_050); } }
        public IField P_INCENTIVE_PAYMENT_AMOUNT50XX { get { return GetElementByName<IField>(Names.P_INCENTIVE_PAYMENT_AMOUNT50XX); } }
        public IField P_NET_FEDERAL_SHARE_IVA_AM51MS { get { return GetElementByName<IField>(Names.P_NET_FEDERAL_SHARE_IVA_AM51MS); } }
        public IField P_NET_FEDERAL_SHARE_IVA_AM_051 { get { return GetElementByName<IField>(Names.P_NET_FEDERAL_SHARE_IVA_AM_051); } }
        public IField P_NET_FEDERAL_SHARE_IVA_AM51XX { get { return GetElementByName<IField>(Names.P_NET_FEDERAL_SHARE_IVA_AM51XX); } }
        public IField P_NET_FEDERAL_SHARE_FORMER52MS { get { return GetElementByName<IField>(Names.P_NET_FEDERAL_SHARE_FORMER52MS); } }
        public IField P_NET_FEDERAL_SHARE_FORMER_052 { get { return GetElementByName<IField>(Names.P_NET_FEDERAL_SHARE_FORMER_052); } }
        public IField P_NET_FEDERAL_SHARE_FORMER52XX { get { return GetElementByName<IField>(Names.P_NET_FEDERAL_SHARE_FORMER52XX); } }
        public IField P_NET_FEDERAL_SHARE_AMOUNT53MS { get { return GetElementByName<IField>(Names.P_NET_FEDERAL_SHARE_AMOUNT53MS); } }
        public IField P_NET_FEDERAL_SHARE_AMOUNT_053 { get { return GetElementByName<IField>(Names.P_NET_FEDERAL_SHARE_AMOUNT_053); } }
        public IField P_NET_FEDERAL_SHARE_AMOUNT53XX { get { return GetElementByName<IField>(Names.P_NET_FEDERAL_SHARE_AMOUNT53XX); } }
        public IField P_FEES_RETAIN_OTHER_STATES54MS { get { return GetElementByName<IField>(Names.P_FEES_RETAIN_OTHER_STATES54MS); } }
        public IField P_FEES_RETAIN_OTHER_STATES_054 { get { return GetElementByName<IField>(Names.P_FEES_RETAIN_OTHER_STATES_054); } }
        public IField P_FEES_RETAIN_OTHER_STATES54XX { get { return GetElementByName<IField>(Names.P_FEES_RETAIN_OTHER_STATES54XX); } }
        public IField P_CREATED_TIMESTAMP_0047_055MS { get { return GetElementByName<IField>(Names.P_CREATED_TIMESTAMP_0047_055MS); } }
        public IField P_CREATED_TIMESTAMP_0047_055 { get { return GetElementByName<IField>(Names.P_CREATED_TIMESTAMP_0047_055); } }
        public IField P_CREATED_TIMESTAMP_0047_055XX { get { return GetElementByName<IField>(Names.P_CREATED_TIMESTAMP_0047_055XX); } }
        public IField P_CREATED_BY_0047_056MS { get { return GetElementByName<IField>(Names.P_CREATED_BY_0047_056MS); } }
        public IField P_CREATED_BY_0047_056 { get { return GetElementByName<IField>(Names.P_CREATED_BY_0047_056); } }
        public IField P_CREATED_BY_0047_056XX { get { return GetElementByName<IField>(Names.P_CREATED_BY_0047_056XX); } }
        public IGroup NUMERIC_EDIT_PATTERNS { get { return GetElementByName<IGroup>(Names.NUMERIC_EDIT_PATTERNS); } }
        public IField EP_INTEGER2 { get { return GetElementByName<IField>(Names.EP_INTEGER2); } }
        public IField EP_INTEGER { get { return GetElementByName<IField>(Names.EP_INTEGER); } }
        public IGroup EP_INTEGER_XX { get { return GetElementByName<IGroup>(Names.EP_INTEGER_XX); } }
        public IArrayElementAccessor<IField> EP_INTEGER_X { get { return GetArrayElementAccessor<IField>(Names.EP_INTEGER_X); } }
        public IField EP_DECIMAL { get { return GetElementByName<IField>(Names.EP_DECIMAL); } }
        public IGroup EP_DECIMAL_XX { get { return GetElementByName<IGroup>(Names.EP_DECIMAL_XX); } }
        public IArrayElementAccessor<IField> EP_DECIMAL_X { get { return GetArrayElementAccessor<IField>(Names.EP_DECIMAL_X); } }
        public IField EP_PRECISION { get { return GetElementByName<IField>(Names.EP_PRECISION); } }
        public IField EP_SCALE { get { return GetElementByName<IField>(Names.EP_SCALE); } }
        public IField EP_INP_INDEX { get { return GetElementByName<IField>(Names.EP_INP_INDEX); } }
        public IField EP_OUT_INDEX { get { return GetElementByName<IField>(Names.EP_OUT_INDEX); } }
        public IField EP_INDEX { get { return GetElementByName<IField>(Names.EP_INDEX); } }
        public IField EP_COUNT { get { return GetElementByName<IField>(Names.EP_COUNT); } }
        public IField EP_COUNT2 { get { return GetElementByName<IField>(Names.EP_COUNT2); } }
        public IField EP_SIGN { get { return GetElementByName<IField>(Names.EP_SIGN); } }
        public IField EP_DPOINT_USED { get { return GetElementByName<IField>(Names.EP_DPOINT_USED); } }
        public IField EP_SIGN_USED { get { return GetElementByName<IField>(Names.EP_SIGN_USED); } }
        public IField EP_DOLLAR_USED { get { return GetElementByName<IField>(Names.EP_DOLLAR_USED); } }
        public IField EP_FIRST_DIGIT { get { return GetElementByName<IField>(Names.EP_FIRST_DIGIT); } }
        public IField EP_ISTHERE_DCML { get { return GetElementByName<IField>(Names.EP_ISTHERE_DCML); } }
        public IField EP_ISTHERE_V { get { return GetElementByName<IField>(Names.EP_ISTHERE_V); } }
        public IField EP_INTEGER_LEN { get { return GetElementByName<IField>(Names.EP_INTEGER_LEN); } }
        public IGroup EP_SZNUMERIC { get { return GetElementByName<IGroup>(Names.EP_SZNUMERIC); } }
        public IArrayElementAccessor<IField> EP_SZNUMERIC_X { get { return GetArrayElementAccessor<IField>(Names.EP_SZNUMERIC_X); } }
        public IGroup EP_FORMATTED_VALUE { get { return GetElementByName<IGroup>(Names.EP_FORMATTED_VALUE); } }
        public IArrayElementAccessor<IField> EP_FORMATTED_VALUE_X { get { return GetArrayElementAccessor<IField>(Names.EP_FORMATTED_VALUE_X); } }
        public IGroup EP_EDIT_PATTERN { get { return GetElementByName<IGroup>(Names.EP_EDIT_PATTERN); } }
        public IArrayElementAccessor<IField> EP_EDIT_PATTERN_X { get { return GetArrayElementAccessor<IField>(Names.EP_EDIT_PATTERN_X); } }
        public IField EP_EDIT_PATTERN_LEN { get { return GetElementByName<IField>(Names.EP_EDIT_PATTERN_LEN); } }
        public IField EP_SZNUMERIC_LEN { get { return GetElementByName<IField>(Names.EP_SZNUMERIC_LEN); } }
        public IField EP_STOP { get { return GetElementByName<IField>(Names.EP_STOP); } }
        public IField EP_CURRENCY_COUNT { get { return GetElementByName<IField>(Names.EP_CURRENCY_COUNT); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewFillerField(FieldType.String, 40, "SWEXF700 WORKING STORAGE STARTS HERE");
            recordDef.CreateNewField(Names.WS_FILE_STATUS, FieldType.String, 2);

            recordDef.CreateNewGroup(Names.WORK_FIELDS, (WORK_FIELDS) =>
           {
               WORK_FIELDS.CreateNewField(Names.WS_STK_CONTROL_BRK_FLAG, FieldType.String, 1, "Y");
               WORK_FIELDS.CreateNewField(Names.WS_STK_SECTION_PROCESSING_IND, FieldType.String, 1, "Y");
               WORK_FIELDS.CreateNewField(Names.WS_VERY_FIRST_WRITE, FieldType.String, 1, "Y");
               WORK_FIELDS.CreateNewField(Names.WS_PG_BRK_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_PG_BRK, "Y")
                   ;
               WORK_FIELDS.CreateNewField(Names.WS_PG_BRK_FLAG_SAVE, FieldType.String, 1, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_PRINT_LINE_SPACING, FieldType.UnsignedNumeric, 4, 0);
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_PRINT_LINE_SPACING, FieldType.UnsignedNumeric, 4);
               WORK_FIELDS.CreateNewGroup(Names.WS_PRINT_RECORD, (WS_PRINT_RECORD) =>
               {
                   WS_PRINT_RECORD.CreateNewFillerField(FieldType.String, 1, SPACE);
                   WS_PRINT_RECORD.CreateNewField(Names.WS_PRINT_LINE, FieldType.String, 132);
               });
               WORK_FIELDS.CreateNewGroup(Names.WS_SPACE_RECORD, (WS_SPACE_RECORD) =>
               {
                   WS_SPACE_RECORD.CreateNewFillerField(FieldType.String, 1, SPACE);
                   WS_SPACE_RECORD.CreateNewField(Names.WS_SPACE_LINE, FieldType.String, 132, SPACES);
               });
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_PRINT_LINE, FieldType.String, 132);
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_SAVE_PRINT_LINE, FieldType.String, 132);
               WORK_FIELDS.CreateNewField(Names.WS_LINE_COUNT, FieldType.UnsignedNumeric, 4, 0);
               WORK_FIELDS.CreateNewField(Names.WS_PG_LENGTH, FieldType.UnsignedNumeric, 4, 50);
               WORK_FIELDS.CreateNewField(Names.WS_PG_NUMBER, FieldType.UnsignedNumeric, 7, 0);
               WORK_FIELDS.CreateNewField(Names.WS_PG_NUMBER_SAVE, FieldType.UnsignedNumeric, 7, 0);
               WORK_FIELDS.CreateNewField(Names.SAVE_FOR_WRAP_TEXT, FieldType.String, 133);
               WORK_FIELDS.CreateNewField(Names.WS_CUR_SUBRPT_CODE, FieldType.String, 8, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_PREV_SUBRPT_CODE, FieldType.String, 8, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_CONTROL_BRK_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_NOT_IN_CONTROL_BRK, "N")
                   ;
               WORK_FIELDS.CreateNewField(Names.WS_SAVE_SECTION_PROCESSING_IND, FieldType.String, 3, SPACE)
                   .NewCheckField(Names.WS_SAVE_RPT_HDR_IS_PROCESSED, "H  ")
                   .NewCheckField(Names.WS_SAVE_RPT_FTR_IS_PROCESSED, "F  ")
                   .NewCheckField(Names.WS_SAVE_PG_HDR_IS_PROCESSED, "P  ")
                   .NewCheckField(Names.WS_SAVE_BODY_IS_PROCESSED, "B  ")
                   ;
               WORK_FIELDS.CreateNewField(Names.WS_RESET_PG_NUMBER, FieldType.String, 1, "N");
               WORK_FIELDS.CreateNewField(Names.WS_SUPPRSS_BLANK_LINE, FieldType.String, 1, "N");
               WORK_FIELDS.CreateNewField(Names.WS_SUPPRSS_BLANK_LINE_SAVE, FieldType.String, 1, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_USER_NULL_DATE, FieldType.String, 8, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_LINE_QT, FieldType.UnsignedNumeric, 4, ZERO);
               WORK_FIELDS.CreateNewField(Names.WS_CUR_SECTION_LINE_QT, FieldType.UnsignedNumeric, 4, ZERO);
               WORK_FIELDS.CreateNewField(Names.WS_SAVE_PRINT_ATBOTTM, FieldType.String, 1, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_LINE_COUNT, FieldType.UnsignedNumeric, 4, 0);
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_INDX, FieldType.UnsignedNumeric, 4, 0);
               WORK_FIELDS.CreateNewField(Names.WS_MONTH_TEXT_LENGTH, FieldType.UnsignedNumeric, 2, 0);
               WORK_FIELDS.CreateNewField(Names.PREV_IO_CONTROL_CD, FieldType.String, 2, SPACES);
           });

            recordDef.CreateNewGroup(Names.DATE_TIME_CONVERSION_FIELDS, (DATE_TIME_CONVERSION_FIELDS) =>
           {

               IField IEF_DATE_TIME_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.IEF_DATE_TIME, FieldType.String, 20);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine("FILLER_d5", IEF_DATE_TIME_local, (FILLER_d5) =>
               {
                   FILLER_d5.CreateNewField(Names.IEF_DATE, FieldType.UnsignedNumeric, 8);
                   FILLER_d5.CreateNewField(Names.IEF_TIME, FieldType.UnsignedNumeric, 6);
                   FILLER_d5.CreateNewFillerField(6, FillWith.Hashes);
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine("FILLER_d7", IEF_DATE_TIME_local, (FILLER_d7) =>
               {

                   IField DT_YEAR_4_local = FILLER_d7.CreateNewField(Names.DT_YEAR_4, FieldType.UnsignedNumeric, 4);
                   FILLER_d7.CreateNewGroupRedefine("FILLER_d8", DT_YEAR_4_local, (FILLER_d8) =>
                   {
                       FILLER_d8.CreateNewFillerField(2, FillWith.Hashes);
                       FILLER_d8.CreateNewField(Names.DT_YEAR_2, FieldType.UnsignedNumeric, 2);
                   });
                   FILLER_d7.CreateNewGroupRedefine("FILLER_d10", DT_YEAR_4_local, (FILLER_d10) =>
                   {
                       FILLER_d10.CreateNewFillerField(3, FillWith.Hashes);
                       FILLER_d10.CreateNewField(Names.DT_YEAR_1, FieldType.UnsignedNumeric, 1);
                   });
                   FILLER_d7.CreateNewField(Names.DT_MONTH_MM, FieldType.UnsignedNumeric, 2);
                   FILLER_d7.CreateNewField(Names.DT_DAY, FieldType.UnsignedNumeric, 2);

                   IField DT_TIME_local = FILLER_d7.CreateNewField(Names.DT_TIME, FieldType.UnsignedNumeric, 12);
                   FILLER_d7.CreateNewGroupRedefine("FILLER_d12", DT_TIME_local, (FILLER_d12) =>
                   {
                       FILLER_d12.CreateNewField(Names.DT_HOUR, FieldType.UnsignedNumeric, 2);
                       FILLER_d12.CreateNewField(Names.DT_MINUTES, FieldType.UnsignedNumeric, 2);
                       FILLER_d12.CreateNewField(Names.DT_SECONDS, FieldType.UnsignedNumeric, 2);
                       FILLER_d12.CreateNewField(Names.DT_MICROSECONDS, FieldType.UnsignedNumeric, 6);
                   });
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_EDIT_PATTERN, FieldType.String, 18);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.TS_EDIT_PATTERN, FieldType.String, 26);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_MONTH_MON, FieldType.String, 3);

               IField DT_MONTH_MON_U_STRING_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_MONTH_MON_U_STRING, FieldType.String, 36, "JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC");
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_MONTH_MON_U_TABLE, DT_MONTH_MON_U_STRING_local, (DT_MONTH_MON_U_TABLE) =>
               {
                   DT_MONTH_MON_U_TABLE.CreateNewFieldArray(Names.DT_MONTH_MON_U_TEXT, 12, FieldType.String, 3);
               });

               IField DT_MONTH_MON_L_STRING_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_MONTH_MON_L_STRING, FieldType.String, 36, "JanFebMarAprMayJunJulAugSepOctNovDec");
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_MONTH_MON_L_TABLE, DT_MONTH_MON_L_STRING_local, (DT_MONTH_MON_L_TABLE) =>
               {
                   DT_MONTH_MON_L_TABLE.CreateNewFieldArray(Names.DT_MONTH_MON_L_TEXT, 12, FieldType.String, 3);
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_MONTH_MONTH, FieldType.String, 9);
               IGroup DT_MONTH_MONTH_U_STRING_local = (IGroup)DATE_TIME_CONVERSION_FIELDS.CreateNewGroup(Names.DT_MONTH_MONTH_U_STRING, (DT_MONTH_MONTH_U_STRING) =>
               {
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "JANUARY");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "FEBRUARY");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "MARCH");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "APRIL");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "MAY");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "JUNE");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "JULY");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "AUGUST");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "SEPTEMBER");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "OCTOBER");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "NOVEMBER");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "DECEMBER");
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_MONTH_MONTH_U_TABLE, DT_MONTH_MONTH_U_STRING_local, (DT_MONTH_MONTH_U_TABLE) =>
               {
                   DT_MONTH_MONTH_U_TABLE.CreateNewFieldArray(Names.DT_MONTH_MONTH_U_TEXT, 12, FieldType.String, 9);
               });
               IGroup DT_MONTH_MONTH_L_STRING_local = (IGroup)DATE_TIME_CONVERSION_FIELDS.CreateNewGroup(Names.DT_MONTH_MONTH_L_STRING, (DT_MONTH_MONTH_L_STRING) =>
               {
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "January");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "February");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "March");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "April");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "May");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "June");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "July");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "August");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "September");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "October");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "November");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "December");
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_MONTH_MONTH_L_TABLE, DT_MONTH_MONTH_L_STRING_local, (DT_MONTH_MONTH_L_TABLE) =>
               {
                   DT_MONTH_MONTH_L_TABLE.CreateNewFieldArray(Names.DT_MONTH_MONTH_L_TEXT, 12, FieldType.String, 9);
               });

               IField DT_FORMATTED_DATETIME_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_FORMATTED_DATETIME, FieldType.String, 32);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_FORMATTED_DATETIME_TABLE, DT_FORMATTED_DATETIME_local, (DT_FORMATTED_DATETIME_TABLE) =>
               {
                   DT_FORMATTED_DATETIME_TABLE.CreateNewFieldArray(Names.DT_FORMATTED_DATETIME_TEXT, 32, FieldType.String, 1);
               });

               IField DT_FORMATTED_DATE_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_FORMATTED_DATE, FieldType.String, 18);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_FORMATTED_DATE_TABLE, DT_FORMATTED_DATE_local, (DT_FORMATTED_DATE_TABLE) =>
               {
                   DT_FORMATTED_DATE_TABLE.CreateNewFieldArray(Names.DT_FORMATTED_DATE_TEXT, 18, FieldType.String, 1);
               });

               IField DT_FORMATTED_TIME_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_FORMATTED_TIME, FieldType.String, 13);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_FORMATTED_TIME_TABLE, DT_FORMATTED_TIME_local, (DT_FORMATTED_TIME_TABLE) =>
               {
                   DT_FORMATTED_TIME_TABLE.CreateNewFieldArray(Names.DT_FORMATTED_TIME_TEXT, 13, FieldType.String, 1);
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_STRING_COUNT, FieldType.UnsignedNumeric, 1)
                   .NewCheckField(Names.DT_STRING_FOUND, 1)
                   ;

               IField DT_LEAP_YEAR_DAYS1_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_LEAP_YEAR_DAYS1, FieldType.String, 36, "000031059090120151181212243273304334");
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_LEAP_YEAR_TABLE1, DT_LEAP_YEAR_DAYS1_local, (DT_LEAP_YEAR_TABLE1) =>
               {
                   DT_LEAP_YEAR_TABLE1.CreateNewFieldArray(Names.DT_NO_LEAP_DAYS, 12, FieldType.UnsignedNumeric, 3);
               });

               IField DT_LEAP_YEAR_DAYS2_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_LEAP_YEAR_DAYS2, FieldType.String, 36, "000031060091121152182213244274305335");
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_LEAP_YEAR_TABLE1_d2, DT_LEAP_YEAR_DAYS2_local, (DT_LEAP_YEAR_TABLE1_d2) =>
               {
                   DT_LEAP_YEAR_TABLE1_d2.CreateNewFieldArray(Names.DT_LEAP_DAYS, 12, FieldType.UnsignedNumeric, 3);
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.LEAP_DAY, FieldType.UnsignedNumeric, 3);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.LEAP1, FieldType.UnsignedNumeric, 4);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.LEAP2, FieldType.UnsignedNumeric, 4);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.LEAP3, FieldType.UnsignedNumeric, 4);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_START, FieldType.UnsignedNumeric, 2);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_INDEX, FieldType.UnsignedNumeric, 3);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroup(Names.WS_CURRENT_DATE_8, (WS_CURRENT_DATE_8) =>
               {
                   WS_CURRENT_DATE_8.CreateNewField(Names.WS_CURRENT_DATE_8_CC, FieldType.String, 2);
                   WS_CURRENT_DATE_8.CreateNewField(Names.WS_CURRENT_DATE_8_YY, FieldType.String, 2);
                   WS_CURRENT_DATE_8.CreateNewField(Names.WS_CURRENT_DATE_8_MM, FieldType.String, 2);
                   WS_CURRENT_DATE_8.CreateNewField(Names.WS_CURRENT_DATE_8_DD, FieldType.String, 2);
               });

               IField WS_CURRENT_DATE_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.WS_CURRENT_DATE, FieldType.UnsignedNumeric, 6);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.WS_CURRENT_DATE_6, WS_CURRENT_DATE_local, (WS_CURRENT_DATE_6) =>
               {
                   WS_CURRENT_DATE_6.CreateNewField(Names.WS_CURRENT_DATE_6_YY, FieldType.UnsignedNumeric, 2);
                   WS_CURRENT_DATE_6.CreateNewField(Names.WS_CURRENT_DATE_6_MM, FieldType.UnsignedNumeric, 2);
                   WS_CURRENT_DATE_6.CreateNewField(Names.WS_CURRENT_DATE_6_DD, FieldType.UnsignedNumeric, 2);
               });

               IField WS_CURRENT_TIME_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.WS_CURRENT_TIME, FieldType.UnsignedNumeric, 8);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.WS_CURRENT_TIME_X, WS_CURRENT_TIME_local, (WS_CURRENT_TIME_X) =>
               {
                   WS_CURRENT_TIME_X.CreateNewField(Names.WS_CURRENT_TIME_6, FieldType.UnsignedNumeric, 6);
                   WS_CURRENT_TIME_X.CreateNewFillerField(2, FillWith.Hashes);
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.WS_UNJUSTIFIED_TEXT_IDX, FieldType.SignedNumeric, 3);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.WS_JUSTIFIED_TEXT_IDX, FieldType.SignedNumeric, 3);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroup(Names.WS_JUSTIFY_TEXT_FIELDS, (WS_JUSTIFY_TEXT_FIELDS) =>
               {
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewGroup(Names.WS_UNJUSTIFIED_TEXT_FIELD, (WS_UNJUSTIFIED_TEXT_FIELD) =>
                   {
                       WS_UNJUSTIFIED_TEXT_FIELD.CreateNewFieldArray(Names.WS_UNJUSTIFIED_TEXT_CHAR, 250, FieldType.String, 1);
                   });
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewGroup(Names.WS_JUSTIFIED_TEXT_FIELD, (WS_JUSTIFIED_TEXT_FIELD) =>
                   {
                       WS_JUSTIFIED_TEXT_FIELD.CreateNewFieldArray(Names.WS_JUSTIFIED_TEXT_CHAR, 250, FieldType.String, 1);
                   });
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_JUSTIFICATION_TYPE_CD, FieldType.String, 1)
                       .NewCheckField(Names.WS_JUSTIFIED_NONE, "N")
                       .NewCheckField(Names.WS_JUSTIFIED_LEFT, "L")
                       .NewCheckField(Names.WS_JUSTIFIED_CENTER, "C")
                       .NewCheckField(Names.WS_JUSTIFIED_RIGHT, "R")
                       ;
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_JUSTIFIED_TEXT_FIELD_LENGTH, FieldType.UnsignedNumeric, 4);
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_JUSTIFIED_TEXT_DATA_LENGTH, FieldType.UnsignedNumeric, 4);
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_JUSTIFIED_FIELD_START, FieldType.UnsignedNumeric, 4);
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_FIRST_CHAR, FieldType.UnsignedNumeric, 4);
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_LAST_CHAR, FieldType.UnsignedNumeric, 4);
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_CHAR_CNTR, FieldType.UnsignedNumeric, 4);
               });
           });

            recordDef.CreateNewGroup(Names.SECC_WORK_FIELDS, (SECC_WORK_FIELDS) =>
           {
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_CNTL_HDR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_SECC_CNTL_HDR, "Y")
                   ;
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_CNTL_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_SECC_CNTL_FTR, "Y")
                   ;
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_RPT_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_SECC_RPT_FTR, "Y")
                   ;
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_DTL_LINE_QT, FieldType.UnsignedNumeric, 4, 28);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_PG_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 4);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_PG_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_RPT_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_RPT_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_LINE_SPACING, FieldType.UnsignedNumeric, 4, 1);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_RPT_TYPE_CD, FieldType.String, 1, "D")
                   .NewCheckField(Names.WS_SECC_SUMMARY_RPT_REQUESTED, "S")
                   .NewCheckField(Names.WS_SECC_DTL_RPT_REQUESTED, "D")
                   ;
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_SECTION_PROCESSING_IND, FieldType.String, 3, SPACE)
                   .NewCheckField(Names.WS_SECC_RPT_HDR_IS_PROCESSED, "H  ")
                   .NewCheckField(Names.WS_SECC_RPT_FTR_IS_PROCESSED, "F  ")
                   .NewCheckField(Names.WS_SECC_PG_HDR_IS_PROCESSED, "P  ")
                   .NewCheckField(Names.WS_SECC_BODY_IS_PROCESSED, "B  ")
                   ;
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_KEEP_DTL_TOGETHER_FG, FieldType.String, 1, "N");
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_PRINT_PG_BRK_SPACING, FieldType.CompShort, 4);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_PRINT_PG_BRK_LINE, FieldType.String, 132);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_PRINT_RPT_FTR_LINE, FieldType.String, 132);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_PG_BRK_FLAG, FieldType.String, 1, "Y");
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_CUR_RPT_HDR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_CUR_RPT_FTR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_FIRST_TIME_FLAG, FieldType.String, 1, "Y")
                   .NewCheckField(Names.WS_SECC_FIRST_TIME, "Y")
                   ;
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_DISABLE_SUPPRESS, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_SECC_SUPPRESS_DUPLICATES, "N")
                   .NewCheckField(Names.WS_SECC_PRINT_DUPLICATES, "Y")
                   ;
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_BODY_SECTION_LINES, FieldType.UnsignedNumeric, 3, 28);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_BODY_SUPPRESS_LINES, FieldType.SignedNumeric, 3, 1);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_GR_COUNTER, FieldType.UnsignedNumeric, 7, ZERO);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_PAGE_SUPPRESS, FieldType.String, 1, "N");
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_PAGE_SUPPRESS_AFTER, FieldType.String, 1, "N");
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_PAGE_DTL_LINES, FieldType.SignedNumeric, 3, 0);
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_CURRENTLY_WRAPPING, FieldType.String, 1, "N");
               SECC_WORK_FIELDS.CreateNewField(Names.WS_SECC_CUR_PRINTING_PAGE_HDR, FieldType.String, 1, "N");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ12, FieldType.String, 7, "9999/99");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ84, FieldType.String, 10, "---------9");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ85, FieldType.String, 10, "---------9");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ86, FieldType.String, 10, "---------9");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ87, FieldType.String, 10, "---------9");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ88, FieldType.String, 10, "---------9");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ89, FieldType.String, 10, "---------9");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ90, FieldType.String, 10, "---------9");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ91, FieldType.String, 10, "---------9");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ92, FieldType.String, 10, "---------9");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ93, FieldType.String, 10, "---------9");
               SECC_WORK_FIELDS.CreateNewField(Names.SECC_EDIT_PATTERN_OBJ94, FieldType.String, 10, "---------9");
           });

            recordDef.CreateNewGroup(Names.SECC_DTL_LINE_SECTION, (SECC_DTL_LINE_SECTION) =>
           {
               SECC_DTL_LINE_SECTION.CreateNewField(Names.SECC_DTL_LINE_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               SECC_DTL_LINE_SECTION.CreateNewField(Names.SECC_DTL_LINE_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               SECC_DTL_LINE_SECTION.CreateNewField(Names.SECC_DTL_LINE_RESETPG_AFTER, FieldType.String, 1, "N");
               SECC_DTL_LINE_SECTION.CreateNewField(Names.SECC_DTL_LINE_KEEP_TOGETHER, FieldType.String, 1, "N");
               SECC_DTL_LINE_SECTION.CreateNewField(Names.SECC_DTL_LINE_SUPPRSS_BLANK, FieldType.String, 1, "N");
               SECC_DTL_LINE_SECTION.CreateNewField(Names.SECC_DTL_LINE_PRINT_ATBOTTM, FieldType.String, 1, "N");
               SECC_DTL_LINE_SECTION.CreateNewField(Names.SECC_DTL_LINE_KEEP_WITHNEXT, FieldType.String, 1, "N");
               SECC_DTL_LINE_SECTION.CreateNewField(Names.SECC_DTL_LINE_BEFORE_PG_BRK, FieldType.String, 1, "N");
               SECC_DTL_LINE_SECTION.CreateNewField(Names.SECC_DTL_LINE_AFTER_PG_BRK, FieldType.String, 1, "N");
               SECC_DTL_LINE_SECTION.CreateNewField(Names.SECC_DTL_LINE_PRINT_FLAG, FieldType.String, 1, "Y");
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_0, (SECC_DTL_LINE_0) =>
               {
                   SECC_DTL_LINE_0.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_1, (SECC_DTL_LINE_1) =>
               {
                   SECC_DTL_LINE_1.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_2, (SECC_DTL_LINE_2) =>
               {
                   SECC_DTL_LINE_2.CreateNewFillerField(FieldType.String, 30, "|-----------------------------");
                   SECC_DTL_LINE_2.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_2.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_2.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_2.CreateNewFillerField(FieldType.String, 12, "-----------|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_3, (SECC_DTL_LINE_3) =>
               {
                   SECC_DTL_LINE_3.CreateNewFillerField(FieldType.String, 30, "| SECTION C.  FEDERAL SHARE / ");
                   SECC_DTL_LINE_3.CreateNewFillerField(FieldType.String, 30, "INCENTIVE PAYMENTS / FEES     ");
                   SECC_DTL_LINE_3.CreateNewFillerField(FieldType.String, 30, "                              ");
                   SECC_DTL_LINE_3.CreateNewFillerField(FieldType.String, 30, "                              ");
                   SECC_DTL_LINE_3.CreateNewFillerField(FieldType.String, 12, "           |");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_4, (SECC_DTL_LINE_4) =>
               {
                   SECC_DTL_LINE_4.CreateNewFillerField(FieldType.String, 30, "|-----------------------------");
                   SECC_DTL_LINE_4.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_4.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_4.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_4.CreateNewFillerField(FieldType.String, 12, "-----------|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_5, (SECC_DTL_LINE_5) =>
               {
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 29, "| 10. Federal Share         |");
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 15, SPACES);
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 15, SPACES);
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 15, SPACES);
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 40, SPACES);
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 13, SPACES);
                   SECC_DTL_LINE_5.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_6, (SECC_DTL_LINE_6) =>
               {
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 30, "|     of Collections........|$");
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_6_A_OBJ84_local = SECC_DTL_LINE_6.CreateNewField(Names.SECC_DTL_LINE_6_A_OBJ84, FieldType.String, 10);
                   SECC_DTL_LINE_6.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_6_A_OBJ84, FieldType.String, SECC_DTL_LINE_6_A_OBJ84_local, 10);
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 3, SPACES);
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 2, "|$");
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_6_A_OBJ85_local = SECC_DTL_LINE_6.CreateNewField(Names.SECC_DTL_LINE_6_A_OBJ85, FieldType.String, 10);
                   SECC_DTL_LINE_6.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_6_A_OBJ85, FieldType.String, SECC_DTL_LINE_6_A_OBJ85_local, 10);
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 3, SPACES);
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 2, "|$");
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_6_A_OBJ86_local = SECC_DTL_LINE_6.CreateNewField(Names.SECC_DTL_LINE_6_A_OBJ86, FieldType.String, 10);
                   SECC_DTL_LINE_6.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_6_A_OBJ86, FieldType.String, SECC_DTL_LINE_6_A_OBJ86_local, 10);
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 3, SPACES);
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 40, SPACES);
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 2, "|$");
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_6_A_OBJ87_local = SECC_DTL_LINE_6.CreateNewField(Names.SECC_DTL_LINE_6_A_OBJ87, FieldType.String, 10);
                   SECC_DTL_LINE_6.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_6_A_OBJ87, FieldType.String, SECC_DTL_LINE_6_A_OBJ87_local, 10);
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SECC_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_7, (SECC_DTL_LINE_7) =>
               {
                   SECC_DTL_LINE_7.CreateNewFillerField(FieldType.String, 30, "| 11. Estimated Incentive   --");
                   SECC_DTL_LINE_7.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_7.CreateNewFillerField(FieldType.String, 17, "-----------------");
                   SECC_DTL_LINE_7.CreateNewFillerField(FieldType.String, 40, SPACES);
                   SECC_DTL_LINE_7.CreateNewFillerField(FieldType.String, 15, "|-------------|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_8, (SECC_DTL_LINE_8) =>
               {
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 30, "|     Payments..............|$");
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_8_A_OBJ88_local = SECC_DTL_LINE_8.CreateNewField(Names.SECC_DTL_LINE_8_A_OBJ88, FieldType.String, 10);
                   SECC_DTL_LINE_8.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_8_A_OBJ88, FieldType.String, SECC_DTL_LINE_8_A_OBJ88_local, 10);
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 3, SPACES);
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 15, SPACES);
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 2, "|$");
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_8_A_OBJ89_local = SECC_DTL_LINE_8.CreateNewField(Names.SECC_DTL_LINE_8_A_OBJ89, FieldType.String, 10);
                   SECC_DTL_LINE_8.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_8_A_OBJ89, FieldType.String, SECC_DTL_LINE_8_A_OBJ89_local, 10);
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 3, SPACES);
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 40, SPACES);
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 2, "|$");
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_8_A_OBJ90_local = SECC_DTL_LINE_8.CreateNewField(Names.SECC_DTL_LINE_8_A_OBJ90, FieldType.String, 10);
                   SECC_DTL_LINE_8.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_8_A_OBJ90, FieldType.String, SECC_DTL_LINE_8_A_OBJ90_local, 10);
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SECC_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_9, (SECC_DTL_LINE_9) =>
               {
                   SECC_DTL_LINE_9.CreateNewFillerField(FieldType.String, 30, "| 12. Net Federal Share     --");
                   SECC_DTL_LINE_9.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_9.CreateNewFillerField(FieldType.String, 17, "-----------------");
                   SECC_DTL_LINE_9.CreateNewFillerField(FieldType.String, 40, SPACES);
                   SECC_DTL_LINE_9.CreateNewFillerField(FieldType.String, 15, "|-------------|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_10, (SECC_DTL_LINE_10) =>
               {
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 30, "|     of Collections........|$");
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_10_A_OBJ91_local = SECC_DTL_LINE_10.CreateNewField(Names.SECC_DTL_LINE_10_A_OBJ91, FieldType.String, 10);
                   SECC_DTL_LINE_10.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_10_A_OBJ91, FieldType.String, SECC_DTL_LINE_10_A_OBJ91_local, 10);
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 3, SPACES);
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 15, SPACES);
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 2, "|$");
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_10_A_OBJ92_local = SECC_DTL_LINE_10.CreateNewField(Names.SECC_DTL_LINE_10_A_OBJ92, FieldType.String, 10);
                   SECC_DTL_LINE_10.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_10_A_OBJ92, FieldType.String, SECC_DTL_LINE_10_A_OBJ92_local, 10);
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 3, SPACES);
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 40, SPACES);
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 2, "|$");
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_10_A_OBJ93_local = SECC_DTL_LINE_10.CreateNewField(Names.SECC_DTL_LINE_10_A_OBJ93, FieldType.String, 10);
                   SECC_DTL_LINE_10.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_10_A_OBJ93, FieldType.String, SECC_DTL_LINE_10_A_OBJ93_local, 10);
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SECC_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_11, (SECC_DTL_LINE_11) =>
               {
                   SECC_DTL_LINE_11.CreateNewFillerField(FieldType.String, 30, "| 13. Fees Retained         --");
                   SECC_DTL_LINE_11.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_11.CreateNewFillerField(FieldType.String, 17, "-----------------");
                   SECC_DTL_LINE_11.CreateNewFillerField(FieldType.String, 40, SPACES);
                   SECC_DTL_LINE_11.CreateNewFillerField(FieldType.String, 15, "|-------------|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_12, (SECC_DTL_LINE_12) =>
               {
                   SECC_DTL_LINE_12.CreateNewFillerField(FieldType.String, 29, "|     by Other States.......|");
                   SECC_DTL_LINE_12.CreateNewFillerField(FieldType.String, 88, SPACES);
                   SECC_DTL_LINE_12.CreateNewFillerField(FieldType.String, 2, "|$");
                   SECC_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SECC_DTL_LINE_12_A_OBJ94_local = SECC_DTL_LINE_12.CreateNewField(Names.SECC_DTL_LINE_12_A_OBJ94, FieldType.String, 10);
                   SECC_DTL_LINE_12.CreateNewFieldRedefine(Names.SECC_DTL_SUPRES_12_A_OBJ94, FieldType.String, SECC_DTL_LINE_12_A_OBJ94_local, 10);
                   SECC_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SECC_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_13, (SECC_DTL_LINE_13) =>
               {
                   SECC_DTL_LINE_13.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_13.CreateNewFillerField(FieldType.String, 116, SPACES);
                   SECC_DTL_LINE_13.CreateNewFillerField(FieldType.String, 15, "|-------------|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_14, (SECC_DTL_LINE_14) =>
               {
                   SECC_DTL_LINE_14.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_14.CreateNewFillerField(FieldType.String, 130, SPACES);
                   SECC_DTL_LINE_14.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_15, (SECC_DTL_LINE_15) =>
               {
                   SECC_DTL_LINE_15.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_15.CreateNewFillerField(FieldType.String, 10, SPACES);
                   SECC_DTL_LINE_15.CreateNewFillerField(FieldType.String, 30, "This certifies that the inform");
                   SECC_DTL_LINE_15.CreateNewFillerField(FieldType.String, 30, "ation on this form is accurate");
                   SECC_DTL_LINE_15.CreateNewFillerField(FieldType.String, 30, " and true to the best of my kn");
                   SECC_DTL_LINE_15.CreateNewFillerField(FieldType.String, 19, "owledge and belief.");
                   SECC_DTL_LINE_15.CreateNewFillerField(FieldType.String, 11, SPACES);
                   SECC_DTL_LINE_15.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_16, (SECC_DTL_LINE_16) =>
               {
                   SECC_DTL_LINE_16.CreateNewFillerField(FieldType.String, 30, "|-----------------------------");
                   SECC_DTL_LINE_16.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_16.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_16.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_16.CreateNewFillerField(FieldType.String, 12, "-----------|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_17, (SECC_DTL_LINE_17) =>
               {
                   SECC_DTL_LINE_17.CreateNewFillerField(FieldType.String, 30, "| Signature, IV-D Agency Direc");
                   SECC_DTL_LINE_17.CreateNewFillerField(FieldType.String, 3, "tor");
                   SECC_DTL_LINE_17.CreateNewFillerField(FieldType.String, 33, SPACES);
                   SECC_DTL_LINE_17.CreateNewFillerField(FieldType.String, 30, "| Signature, Approving State O");
                   SECC_DTL_LINE_17.CreateNewFillerField(FieldType.String, 7, "fficial");
                   SECC_DTL_LINE_17.CreateNewFillerField(FieldType.String, 28, SPACES);
                   SECC_DTL_LINE_17.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_18, (SECC_DTL_LINE_18) =>
               {
                   SECC_DTL_LINE_18.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_18.CreateNewFillerField(FieldType.String, 65, SPACES);
                   SECC_DTL_LINE_18.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_18.CreateNewFillerField(FieldType.String, 64, SPACES);
                   SECC_DTL_LINE_18.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_19, (SECC_DTL_LINE_19) =>
               {
                   SECC_DTL_LINE_19.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_19.CreateNewFillerField(FieldType.String, 50, SPACES);
                   SECC_DTL_LINE_19.CreateNewFillerField(FieldType.String, 5, "Date:");
                   SECC_DTL_LINE_19.CreateNewFillerField(FieldType.String, 10, SPACES);
                   SECC_DTL_LINE_19.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_19.CreateNewFillerField(FieldType.String, 48, SPACES);
                   SECC_DTL_LINE_19.CreateNewFillerField(FieldType.String, 5, "Date:");
                   SECC_DTL_LINE_19.CreateNewFillerField(FieldType.String, 11, SPACES);
                   SECC_DTL_LINE_19.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_20, (SECC_DTL_LINE_20) =>
               {
                   SECC_DTL_LINE_20.CreateNewFillerField(FieldType.String, 30, "|-----------------------------");
                   SECC_DTL_LINE_20.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_20.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_20.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_20.CreateNewFillerField(FieldType.String, 12, "-----------|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_21, (SECC_DTL_LINE_21) =>
               {
                   SECC_DTL_LINE_21.CreateNewFillerField(FieldType.String, 27, "| Typed Name, Title, Agency");
                   SECC_DTL_LINE_21.CreateNewFillerField(FieldType.String, 39, SPACES);
                   SECC_DTL_LINE_21.CreateNewFillerField(FieldType.String, 27, "| Typed Name, Title, Agency");
                   SECC_DTL_LINE_21.CreateNewFillerField(FieldType.String, 38, SPACES);
                   SECC_DTL_LINE_21.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_22, (SECC_DTL_LINE_22) =>
               {
                   SECC_DTL_LINE_22.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_22.CreateNewFillerField(FieldType.String, 65, SPACES);
                   SECC_DTL_LINE_22.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_22.CreateNewFillerField(FieldType.String, 64, SPACES);
                   SECC_DTL_LINE_22.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_23, (SECC_DTL_LINE_23) =>
               {
                   SECC_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_23.CreateNewFillerField(FieldType.String, 65, SPACES);
                   SECC_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_23.CreateNewFillerField(FieldType.String, 64, SPACES);
                   SECC_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_24, (SECC_DTL_LINE_24) =>
               {
                   SECC_DTL_LINE_24.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_24.CreateNewFillerField(FieldType.String, 65, SPACES);
                   SECC_DTL_LINE_24.CreateNewFillerField(FieldType.String, 1, "|");
                   SECC_DTL_LINE_24.CreateNewFillerField(FieldType.String, 64, SPACES);
                   SECC_DTL_LINE_24.CreateNewFillerField(FieldType.String, 1, "|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_25, (SECC_DTL_LINE_25) =>
               {
                   SECC_DTL_LINE_25.CreateNewFillerField(FieldType.String, 30, "|-----------------------------");
                   SECC_DTL_LINE_25.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_25.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_25.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   SECC_DTL_LINE_25.CreateNewFillerField(FieldType.String, 12, "-----------|");
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_26, (SECC_DTL_LINE_26) =>
               {
                   SECC_DTL_LINE_26.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               SECC_DTL_LINE_SECTION.CreateNewGroup(Names.SECC_DTL_LINE_27, (SECC_DTL_LINE_27) =>
               {
                   SECC_DTL_LINE_27.CreateNewFillerField(FieldType.String, 5, SPACES);
                   SECC_DTL_LINE_27.CreateNewFillerField(FieldType.String, 24, "Form OCSE-34A (10/01/98)");
               });
           });

            recordDef.CreateNewGroup(Names.SECC_PAGE_HDR_SECTION, (SECC_PAGE_HDR_SECTION) =>
           {
               SECC_PAGE_HDR_SECTION.CreateNewField(Names.SECC_PAGE_HDR_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               SECC_PAGE_HDR_SECTION.CreateNewField(Names.SECC_PAGE_HDR_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               SECC_PAGE_HDR_SECTION.CreateNewField(Names.SECC_PAGE_HDR_RESETPG_AFTER, FieldType.String, 1, "N");
               SECC_PAGE_HDR_SECTION.CreateNewField(Names.SECC_PAGE_HDR_KEEP_TOGETHER, FieldType.String, 1, "N");
               SECC_PAGE_HDR_SECTION.CreateNewField(Names.SECC_PAGE_HDR_SUPPRSS_BLANK, FieldType.String, 1, "N");
               SECC_PAGE_HDR_SECTION.CreateNewField(Names.SECC_PAGE_HDR_PRINT_ATBOTTM, FieldType.String, 1, "N");
               SECC_PAGE_HDR_SECTION.CreateNewField(Names.SECC_PAGE_HDR_KEEP_WITHNEXT, FieldType.String, 1, "N");
               SECC_PAGE_HDR_SECTION.CreateNewField(Names.SECC_PAGE_HDR_BEFORE_PG_BRK, FieldType.String, 1, "Y");
               SECC_PAGE_HDR_SECTION.CreateNewField(Names.SECC_PAGE_HDR_AFTER_PG_BRK, FieldType.String, 1, "N");
               SECC_PAGE_HDR_SECTION.CreateNewField(Names.SECC_PAGE_HDR_PRINT_FLAG, FieldType.String, 1, "Y");
               SECC_PAGE_HDR_SECTION.CreateNewGroup(Names.SECC_PAGE_HDR_0, (SECC_PAGE_HDR_0) =>
               {
                   SECC_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 8, "SRRUN151");
                   SECC_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 50, SPACES);
                   SECC_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 15, "State of Kansas");
                   SECC_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 46, SPACES);
                   SECC_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 5, "Page:");
                   SECC_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SECC_PAGE_HDR_0.CreateNewField(Names.SECC_PAGE_HDR_0_P_OBJ4, FieldType.NumericEdited, "ZZ9", 3);
               });
               SECC_PAGE_HDR_SECTION.CreateNewGroup(Names.SECC_PAGE_HDR_1, (SECC_PAGE_HDR_1) =>
               {
                   SECC_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 9, "Run Date:");
                   SECC_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SECC_PAGE_HDR_1.CreateNewField(Names.SECC_PAGE_HDR_1_D_OBJ6, FieldType.String, 10);
                   SECC_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 22, SPACES);
                   SECC_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 30, "Department of Social and Rehab");
                   SECC_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 18, "ilitation Services");
               });
               SECC_PAGE_HDR_SECTION.CreateNewGroup(Names.SECC_PAGE_HDR_2, (SECC_PAGE_HDR_2) =>
               {
                   SECC_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 9, "Run Time:");
                   SECC_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SECC_PAGE_HDR_2.CreateNewField(Names.SECC_PAGE_HDR_2_T_OBJ9, FieldType.String, 8);
                   SECC_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 31, SPACES);
                   SECC_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 30, "Child Support Enforcement Prog");
                   SECC_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 3, "ram");
               });
               SECC_PAGE_HDR_SECTION.CreateNewGroup(Names.SECC_PAGE_HDR_3, (SECC_PAGE_HDR_3) =>
               {
                   SECC_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 8, "Quarter:");
                   SECC_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SECC_PAGE_HDR_3.CreateNewField(Names.SECC_PAGE_HDR_3_A_OBJ12, FieldType.String, 7);
                   SECC_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 34, SPACES);
                   SECC_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 30, "Quarterly Report of Collection");
                   SECC_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 1, "s");
               });
           });

            recordDef.CreateNewGroup(Names.MAIN_WORK_FIELDS, (MAIN_WORK_FIELDS) =>
           {
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CNTL_HDR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_MAIN_CNTL_HDR, "Y")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CNTL_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_MAIN_CNTL_FTR, "Y")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_RPT_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_MAIN_RPT_FTR, "Y")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_DTL_LINE_QT, FieldType.UnsignedNumeric, 4, 46);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PG_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 4);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PG_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_RPT_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_RPT_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_LINE_SPACING, FieldType.UnsignedNumeric, 4, 1);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_RPT_TYPE_CD, FieldType.String, 1, "D")
                   .NewCheckField(Names.WS_MAIN_SUMMARY_RPT_REQUESTED, "S")
                   .NewCheckField(Names.WS_MAIN_DTL_RPT_REQUESTED, "D")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_SECTION_PROCESSING_IND, FieldType.String, 3, SPACE)
                   .NewCheckField(Names.WS_MAIN_RPT_HDR_IS_PROCESSED, "H  ")
                   .NewCheckField(Names.WS_MAIN_RPT_FTR_IS_PROCESSED, "F  ")
                   .NewCheckField(Names.WS_MAIN_PG_HDR_IS_PROCESSED, "P  ")
                   .NewCheckField(Names.WS_MAIN_BODY_IS_PROCESSED, "B  ")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_KEEP_DTL_TOGETHER_FG, FieldType.String, 1, "N");
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PRINT_PG_BRK_SPACING, FieldType.CompShort, 4);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PRINT_PG_BRK_LINE, FieldType.String, 132);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PRINT_RPT_FTR_LINE, FieldType.String, 132);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PG_BRK_FLAG, FieldType.String, 1, "Y");
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CUR_RPT_HDR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CUR_RPT_FTR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_FIRST_TIME_FLAG, FieldType.String, 1, "Y")
                   .NewCheckField(Names.WS_MAIN_FIRST_TIME, "Y")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_DISABLE_SUPPRESS, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_MAIN_SUPPRESS_DUPLICATES, "N")
                   .NewCheckField(Names.WS_MAIN_PRINT_DUPLICATES, "Y")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_BODY_SECTION_LINES, FieldType.UnsignedNumeric, 3, 46);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_BODY_SUPPRESS_LINES, FieldType.SignedNumeric, 3, 1);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_GR_COUNTER, FieldType.UnsignedNumeric, 7, ZERO);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PAGE_SUPPRESS, FieldType.String, 1, "N");
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PAGE_SUPPRESS_AFTER, FieldType.String, 1, "N");
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PAGE_DTL_LINES, FieldType.SignedNumeric, 3, 0);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CURRENTLY_WRAPPING, FieldType.String, 1, "N");
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CUR_PRINTING_PAGE_HDR, FieldType.String, 1, "N");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ6, FieldType.String, 7, "9999/99");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ200, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ201, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ202, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ210, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ207, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ214, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ208, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ215, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ209, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ216, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ219, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ221, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ227, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ228, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ229, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ220, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ230, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ231, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ247, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ248, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ249, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ250, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ251, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ252, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ253, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ254, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ255, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ256, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ257, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ258, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ259, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ260, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ261, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ262, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ263, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ264, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ265, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ266, FieldType.String, 10, "---------9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ267, FieldType.String, 10, "---------9");
           });

            recordDef.CreateNewGroup(Names.MAIN_DTL_LINE_SECTION, (MAIN_DTL_LINE_SECTION) =>
           {
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_RESETPG_AFTER, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_KEEP_TOGETHER, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_SUPPRSS_BLANK, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_PRINT_ATBOTTM, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_KEEP_WITHNEXT, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_BEFORE_PG_BRK, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_AFTER_PG_BRK, FieldType.String, 1, "Y");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_PRINT_FLAG, FieldType.String, 1, "Y");
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_0, (MAIN_DTL_LINE_0) =>
               {
                   MAIN_DTL_LINE_0.CreateNewFillerField(FieldType.String, 97, SPACES);
                   MAIN_DTL_LINE_0.CreateNewFillerField(FieldType.String, 16, "Initial Report__");
                   MAIN_DTL_LINE_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_0.CreateNewFillerField(FieldType.String, 16, "Revised Report__");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_1, (MAIN_DTL_LINE_1) =>
               {
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 12, "------------");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_2, (MAIN_DTL_LINE_2) =>
               {
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 30, "| SECTION A.  AVAILABLE COLLEC");
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 30, "TIONS                         ");
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 30, "                              ");
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 28, "                           |");
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 14, "(E)    Total |");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_3, (MAIN_DTL_LINE_3) =>
               {
                   MAIN_DTL_LINE_3.CreateNewFillerField(FieldType.String, 30, "|-----------------------------");
                   MAIN_DTL_LINE_3.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_3.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_3.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_3.CreateNewFillerField(FieldType.String, 12, "-----------|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_4, (MAIN_DTL_LINE_4) =>
               {
                   MAIN_DTL_LINE_4.CreateNewFillerField(FieldType.String, 30, "| 1. Balance Remaining Undistr");
                   MAIN_DTL_LINE_4.CreateNewFillerField(FieldType.String, 30, "ibuted From Previous Quarter  ");
                   MAIN_DTL_LINE_4.CreateNewFillerField(FieldType.String, 30, "(From Line 9b Last Quarter) ..");
                   MAIN_DTL_LINE_4.CreateNewFillerField(FieldType.String, 27, "...........................");
                   MAIN_DTL_LINE_4.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_4.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_4.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_4_A_OBJ200_local = MAIN_DTL_LINE_4.CreateNewField(Names.MAIN_DTL_LINE_4_A_OBJ200, FieldType.String, 10);
                   MAIN_DTL_LINE_4.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_4_A_OBJ200, FieldType.String, MAIN_DTL_LINE_4_A_OBJ200_local, 10);
                   MAIN_DTL_LINE_4.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_4.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_5, (MAIN_DTL_LINE_5) =>
               {
                   MAIN_DTL_LINE_5.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_5.CreateNewFillerField(FieldType.String, 116, SPACES);
                   MAIN_DTL_LINE_5.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_5.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_5.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_6, (MAIN_DTL_LINE_6) =>
               {
                   MAIN_DTL_LINE_6.CreateNewFillerField(FieldType.String, 30, "| 2. Total Collections Receive");
                   MAIN_DTL_LINE_6.CreateNewFillerField(FieldType.String, 30, "d During the Quarter (Sum of L");
                   MAIN_DTL_LINE_6.CreateNewFillerField(FieldType.String, 30, "ines 2a through 2g)...........");
                   MAIN_DTL_LINE_6.CreateNewFillerField(FieldType.String, 27, "...........................");
                   MAIN_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_6_A_OBJ201_local = MAIN_DTL_LINE_6.CreateNewField(Names.MAIN_DTL_LINE_6_A_OBJ201, FieldType.String, 10);
                   MAIN_DTL_LINE_6.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_6_A_OBJ201, FieldType.String, MAIN_DTL_LINE_6_A_OBJ201_local, 10);
                   MAIN_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_6.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_7, (MAIN_DTL_LINE_7) =>
               {
                   MAIN_DTL_LINE_7.CreateNewFillerField(FieldType.String, 30, "|     2a. From Offset of      ");
                   MAIN_DTL_LINE_7.CreateNewFillerField(FieldType.String, 17, "  |-------------|");
                   MAIN_DTL_LINE_7.CreateNewFillerField(FieldType.String, 16, SPACES);
                   MAIN_DTL_LINE_7.CreateNewFillerField(FieldType.String, 30, "2e. From Income               ");
                   MAIN_DTL_LINE_7.CreateNewFillerField(FieldType.String, 17, "  |-------------|");
                   MAIN_DTL_LINE_7.CreateNewFillerField(FieldType.String, 7, SPACES);
                   MAIN_DTL_LINE_7.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_7.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_7.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_8, (MAIN_DTL_LINE_8) =>
               {
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 30, "|         Federal Tax Refund..");
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 4, "..|$");
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_8_A_OBJ202_local = MAIN_DTL_LINE_8.CreateNewField(Names.MAIN_DTL_LINE_8_A_OBJ202, FieldType.String, 10);
                   MAIN_DTL_LINE_8.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_8_A_OBJ202, FieldType.String, MAIN_DTL_LINE_8_A_OBJ202_local, 10);
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 20, SPACES);
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 30, "Witholding..................|$");
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_8_A_OBJ210_local = MAIN_DTL_LINE_8.CreateNewField(Names.MAIN_DTL_LINE_8_A_OBJ210, FieldType.String, 10);
                   MAIN_DTL_LINE_8.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_8_A_OBJ210, FieldType.String, MAIN_DTL_LINE_8_A_OBJ210_local, 10);
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 7, SPACES);
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 13, SPACES);
                   MAIN_DTL_LINE_8.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_9, (MAIN_DTL_LINE_9) =>
               {
                   MAIN_DTL_LINE_9.CreateNewFillerField(FieldType.String, 30, "|     2b. From Offset of      ");
                   MAIN_DTL_LINE_9.CreateNewFillerField(FieldType.String, 17, "  |-------------|");
                   MAIN_DTL_LINE_9.CreateNewFillerField(FieldType.String, 16, SPACES);
                   MAIN_DTL_LINE_9.CreateNewFillerField(FieldType.String, 30, "2f. From                      ");
                   MAIN_DTL_LINE_9.CreateNewFillerField(FieldType.String, 17, "  |-------------|");
                   MAIN_DTL_LINE_9.CreateNewFillerField(FieldType.String, 7, SPACES);
                   MAIN_DTL_LINE_9.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_9.CreateNewFillerField(FieldType.String, 13, SPACES);
                   MAIN_DTL_LINE_9.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_10, (MAIN_DTL_LINE_10) =>
               {
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 30, "|         State Tax Refund....");
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 4, "..|$");
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_10_A_OBJ207_local = MAIN_DTL_LINE_10.CreateNewField(Names.MAIN_DTL_LINE_10_A_OBJ207, FieldType.String, 10);
                   MAIN_DTL_LINE_10.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_10_A_OBJ207, FieldType.String, MAIN_DTL_LINE_10_A_OBJ207_local, 10);
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 20, SPACES);
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 30, "Other States................|$");
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_10_A_OBJ214_local = MAIN_DTL_LINE_10.CreateNewField(Names.MAIN_DTL_LINE_10_A_OBJ214, FieldType.String, 10);
                   MAIN_DTL_LINE_10.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_10_A_OBJ214, FieldType.String, MAIN_DTL_LINE_10_A_OBJ214_local, 10);
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 7, SPACES);
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 13, SPACES);
                   MAIN_DTL_LINE_10.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_11, (MAIN_DTL_LINE_11) =>
               {
                   MAIN_DTL_LINE_11.CreateNewFillerField(FieldType.String, 30, "|     2c. From Offset of      ");
                   MAIN_DTL_LINE_11.CreateNewFillerField(FieldType.String, 17, "  |-------------|");
                   MAIN_DTL_LINE_11.CreateNewFillerField(FieldType.String, 16, SPACES);
                   MAIN_DTL_LINE_11.CreateNewFillerField(FieldType.String, 30, "2g. From                      ");
                   MAIN_DTL_LINE_11.CreateNewFillerField(FieldType.String, 17, "  |-------------|");
                   MAIN_DTL_LINE_11.CreateNewFillerField(FieldType.String, 7, SPACES);
                   MAIN_DTL_LINE_11.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_11.CreateNewFillerField(FieldType.String, 13, SPACES);
                   MAIN_DTL_LINE_11.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_12, (MAIN_DTL_LINE_12) =>
               {
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 30, "|         Unemployment Comp...");
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 4, "..|$");
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_12_A_OBJ208_local = MAIN_DTL_LINE_12.CreateNewField(Names.MAIN_DTL_LINE_12_A_OBJ208, FieldType.String, 10);
                   MAIN_DTL_LINE_12.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_12_A_OBJ208, FieldType.String, MAIN_DTL_LINE_12_A_OBJ208_local, 10);
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 20, SPACES);
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 30, "Other Sources...............|$");
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_12_A_OBJ215_local = MAIN_DTL_LINE_12.CreateNewField(Names.MAIN_DTL_LINE_12_A_OBJ215, FieldType.String, 10);
                   MAIN_DTL_LINE_12.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_12_A_OBJ215, FieldType.String, MAIN_DTL_LINE_12_A_OBJ215_local, 10);
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 7, SPACES);
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 13, SPACES);
                   MAIN_DTL_LINE_12.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_13, (MAIN_DTL_LINE_13) =>
               {
                   MAIN_DTL_LINE_13.CreateNewFillerField(FieldType.String, 30, "|     2d. Through Administrati");
                   MAIN_DTL_LINE_13.CreateNewFillerField(FieldType.String, 17, "ve|-------------|");
                   MAIN_DTL_LINE_13.CreateNewFillerField(FieldType.String, 48, SPACES);
                   MAIN_DTL_LINE_13.CreateNewFillerField(FieldType.String, 15, "|-------------|");
                   MAIN_DTL_LINE_13.CreateNewFillerField(FieldType.String, 7, SPACES);
                   MAIN_DTL_LINE_13.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_13.CreateNewFillerField(FieldType.String, 13, SPACES);
                   MAIN_DTL_LINE_13.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_14, (MAIN_DTL_LINE_14) =>
               {
                   MAIN_DTL_LINE_14.CreateNewFillerField(FieldType.String, 30, "|         Enforcement.........");
                   MAIN_DTL_LINE_14.CreateNewFillerField(FieldType.String, 4, "..|$");
                   MAIN_DTL_LINE_14.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_14_A_OBJ209_local = MAIN_DTL_LINE_14.CreateNewField(Names.MAIN_DTL_LINE_14_A_OBJ209, FieldType.String, 10);
                   MAIN_DTL_LINE_14.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_14_A_OBJ209, FieldType.String, MAIN_DTL_LINE_14_A_OBJ209_local, 10);
                   MAIN_DTL_LINE_14.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_14.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_14.CreateNewFillerField(FieldType.String, 70, SPACES);
                   MAIN_DTL_LINE_14.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_14.CreateNewFillerField(FieldType.String, 13, SPACES);
                   MAIN_DTL_LINE_14.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_15, (MAIN_DTL_LINE_15) =>
               {
                   MAIN_DTL_LINE_15.CreateNewFillerField(FieldType.String, 30, "|                             ");
                   MAIN_DTL_LINE_15.CreateNewFillerField(FieldType.String, 17, "  |-------------|");
                   MAIN_DTL_LINE_15.CreateNewFillerField(FieldType.String, 70, SPACES);
                   MAIN_DTL_LINE_15.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_15.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_15.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_16, (MAIN_DTL_LINE_16) =>
               {
                   MAIN_DTL_LINE_16.CreateNewFillerField(FieldType.String, 30, "| 3.  Net Amount of Increasing");
                   MAIN_DTL_LINE_16.CreateNewFillerField(FieldType.String, 30, " and (Decreasing) Adjustments.");
                   MAIN_DTL_LINE_16.CreateNewFillerField(FieldType.String, 30, "..............................");
                   MAIN_DTL_LINE_16.CreateNewFillerField(FieldType.String, 27, "...........................");
                   MAIN_DTL_LINE_16.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_16.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_16.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_16_A_OBJ216_local = MAIN_DTL_LINE_16.CreateNewField(Names.MAIN_DTL_LINE_16_A_OBJ216, FieldType.String, 10);
                   MAIN_DTL_LINE_16.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_16_A_OBJ216, FieldType.String, MAIN_DTL_LINE_16_A_OBJ216_local, 10);
                   MAIN_DTL_LINE_16.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_16.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_17, (MAIN_DTL_LINE_17) =>
               {
                   MAIN_DTL_LINE_17.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_17.CreateNewFillerField(FieldType.String, 116, SPACES);
                   MAIN_DTL_LINE_17.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_17.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_17.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_18, (MAIN_DTL_LINE_18) =>
               {
                   MAIN_DTL_LINE_18.CreateNewFillerField(FieldType.String, 30, "| 4.  Collections Forwarded To");
                   MAIN_DTL_LINE_18.CreateNewFillerField(FieldType.String, 30, " Non-IV-D Cases...............");
                   MAIN_DTL_LINE_18.CreateNewFillerField(FieldType.String, 30, "..............................");
                   MAIN_DTL_LINE_18.CreateNewFillerField(FieldType.String, 27, "...........................");
                   MAIN_DTL_LINE_18.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_18.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_18.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_18_A_OBJ219_local = MAIN_DTL_LINE_18.CreateNewField(Names.MAIN_DTL_LINE_18_A_OBJ219, FieldType.String, 10);
                   MAIN_DTL_LINE_18.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_18_A_OBJ219, FieldType.String, MAIN_DTL_LINE_18_A_OBJ219_local, 10);
                   MAIN_DTL_LINE_18.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_18.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_19, (MAIN_DTL_LINE_19) =>
               {
                   MAIN_DTL_LINE_19.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_19.CreateNewFillerField(FieldType.String, 28, SPACES);
                   MAIN_DTL_LINE_19.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_19.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_19.CreateNewFillerField(FieldType.String, 5, "-----");
                   MAIN_DTL_LINE_19.CreateNewFillerField(FieldType.String, 23, SPACES);
                   MAIN_DTL_LINE_19.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_19.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_19.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_20, (MAIN_DTL_LINE_20) =>
               {
                   MAIN_DTL_LINE_20.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_20.CreateNewFillerField(FieldType.String, 28, SPACES);
                   MAIN_DTL_LINE_20.CreateNewFillerField(FieldType.String, 30, "| (A)  Current  | (B)  Current");
                   MAIN_DTL_LINE_20.CreateNewFillerField(FieldType.String, 30, "  | (C)   Former  |(D)   Never");
                   MAIN_DTL_LINE_20.CreateNewFillerField(FieldType.String, 5, "    |");
                   MAIN_DTL_LINE_20.CreateNewFillerField(FieldType.String, 23, SPACES);
                   MAIN_DTL_LINE_20.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_20.CreateNewFillerField(FieldType.String, 13, SPACES);
                   MAIN_DTL_LINE_20.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_21, (MAIN_DTL_LINE_21) =>
               {
                   MAIN_DTL_LINE_21.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_21.CreateNewFillerField(FieldType.String, 28, SPACES);
                   MAIN_DTL_LINE_21.CreateNewFillerField(FieldType.String, 30, "|IV-A Assistance|IV-E Assistan");
                   MAIN_DTL_LINE_21.CreateNewFillerField(FieldType.String, 30, "ce|    Assistance |    Assista");
                   MAIN_DTL_LINE_21.CreateNewFillerField(FieldType.String, 5, "nce |");
                   MAIN_DTL_LINE_21.CreateNewFillerField(FieldType.String, 23, SPACES);
                   MAIN_DTL_LINE_21.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_21.CreateNewFillerField(FieldType.String, 13, SPACES);
                   MAIN_DTL_LINE_21.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_22, (MAIN_DTL_LINE_22) =>
               {
                   MAIN_DTL_LINE_22.CreateNewFillerField(FieldType.String, 27, "| 5.  Collections Forwarded");
                   MAIN_DTL_LINE_22.CreateNewFillerField(FieldType.String, 2, SPACES);
                   MAIN_DTL_LINE_22.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_22.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_22.CreateNewFillerField(FieldType.String, 5, "-----");
                   MAIN_DTL_LINE_22.CreateNewFillerField(FieldType.String, 23, SPACES);
                   MAIN_DTL_LINE_22.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_22.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_22.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_23, (MAIN_DTL_LINE_23) =>
               {
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 29, "|     To Other States........");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 2, "|$");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_23_A_OBJ221_local = MAIN_DTL_LINE_23.CreateNewField(Names.MAIN_DTL_LINE_23_A_OBJ221, FieldType.String, 10);
                   MAIN_DTL_LINE_23.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_23_A_OBJ221, FieldType.String, MAIN_DTL_LINE_23_A_OBJ221_local, 10);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_23_A_OBJ227_local = MAIN_DTL_LINE_23.CreateNewField(Names.MAIN_DTL_LINE_23_A_OBJ227, FieldType.String, 10);
                   MAIN_DTL_LINE_23.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_23_A_OBJ227, FieldType.String, MAIN_DTL_LINE_23_A_OBJ227_local, 10);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_23_A_OBJ228_local = MAIN_DTL_LINE_23.CreateNewField(Names.MAIN_DTL_LINE_23_A_OBJ228, FieldType.String, 10);
                   MAIN_DTL_LINE_23.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_23_A_OBJ228, FieldType.String, MAIN_DTL_LINE_23_A_OBJ228_local, 10);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_23_A_OBJ229_local = MAIN_DTL_LINE_23.CreateNewField(Names.MAIN_DTL_LINE_23_A_OBJ229, FieldType.String, 10);
                   MAIN_DTL_LINE_23.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_23_A_OBJ229, FieldType.String, MAIN_DTL_LINE_23_A_OBJ229_local, 10);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 23, SPACES);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_23_A_OBJ220_local = MAIN_DTL_LINE_23.CreateNewField(Names.MAIN_DTL_LINE_23_A_OBJ220, FieldType.String, 10);
                   MAIN_DTL_LINE_23.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_23_A_OBJ220, FieldType.String, MAIN_DTL_LINE_23_A_OBJ220_local, 10);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_23.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_24, (MAIN_DTL_LINE_24) =>
               {
                   MAIN_DTL_LINE_24.CreateNewFillerField(FieldType.String, 27, "| 6.  Collections Available");
                   MAIN_DTL_LINE_24.CreateNewFillerField(FieldType.String, 2, SPACES);
                   MAIN_DTL_LINE_24.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_24.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_24.CreateNewFillerField(FieldType.String, 5, "-----");
                   MAIN_DTL_LINE_24.CreateNewFillerField(FieldType.String, 23, SPACES);
                   MAIN_DTL_LINE_24.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_24.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_24.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_25, (MAIN_DTL_LINE_25) =>
               {
                   MAIN_DTL_LINE_25.CreateNewFillerField(FieldType.String, 29, "|     For Distribution.......");
                   MAIN_DTL_LINE_25.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_25.CreateNewFillerField(FieldType.String, 63, SPACES);
                   MAIN_DTL_LINE_25.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_25.CreateNewFillerField(FieldType.String, 23, SPACES);
                   MAIN_DTL_LINE_25.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_25.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_25.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_25_A_OBJ230_local = MAIN_DTL_LINE_25.CreateNewField(Names.MAIN_DTL_LINE_25_A_OBJ230, FieldType.String, 10);
                   MAIN_DTL_LINE_25.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_25_A_OBJ230, FieldType.String, MAIN_DTL_LINE_25_A_OBJ230_local, 10);
                   MAIN_DTL_LINE_25.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_25.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_26, (MAIN_DTL_LINE_26) =>
               {
                   MAIN_DTL_LINE_26.CreateNewFillerField(FieldType.String, 30, "|-----------------------------");
                   MAIN_DTL_LINE_26.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_26.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_26.CreateNewFillerField(FieldType.String, 27, "---------------------------");
                   MAIN_DTL_LINE_26.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_26.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_26.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_27, (MAIN_DTL_LINE_27) =>
               {
                   MAIN_DTL_LINE_27.CreateNewFillerField(FieldType.String, 30, "| SECTION B.  DISTRIBUTED / UN");
                   MAIN_DTL_LINE_27.CreateNewFillerField(FieldType.String, 23, "DISTRIBUTED COLLECTIONS");
                   MAIN_DTL_LINE_27.CreateNewFillerField(FieldType.String, 78, SPACES);
                   MAIN_DTL_LINE_27.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_28, (MAIN_DTL_LINE_28) =>
               {
                   MAIN_DTL_LINE_28.CreateNewFillerField(FieldType.String, 30, "|-----------------------------");
                   MAIN_DTL_LINE_28.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_28.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_28.CreateNewFillerField(FieldType.String, 27, "---------------------------");
                   MAIN_DTL_LINE_28.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_28.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_28.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_29, (MAIN_DTL_LINE_29) =>
               {
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 20, "| 7a. Distributed as");
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 8, SPACES);
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 15, SPACES);
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 15, SPACES);
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 15, SPACES);
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 15, SPACES);
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 24, SPACES);
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 13, SPACES);
                   MAIN_DTL_LINE_29.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_30, (MAIN_DTL_LINE_30) =>
               {
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 28, "|     Assistance Reimburse..");
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 2, "|$");
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_30_A_OBJ231_local = MAIN_DTL_LINE_30.CreateNewField(Names.MAIN_DTL_LINE_30_A_OBJ231, FieldType.String, 10);
                   MAIN_DTL_LINE_30.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_30_A_OBJ231, FieldType.String, MAIN_DTL_LINE_30_A_OBJ231_local, 10);
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_30_A_OBJ247_local = MAIN_DTL_LINE_30.CreateNewField(Names.MAIN_DTL_LINE_30_A_OBJ247, FieldType.String, 10);
                   MAIN_DTL_LINE_30.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_30_A_OBJ247, FieldType.String, MAIN_DTL_LINE_30_A_OBJ247_local, 10);
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_30_A_OBJ248_local = MAIN_DTL_LINE_30.CreateNewField(Names.MAIN_DTL_LINE_30_A_OBJ248, FieldType.String, 10);
                   MAIN_DTL_LINE_30.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_30_A_OBJ248, FieldType.String, MAIN_DTL_LINE_30_A_OBJ248_local, 10);
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 15, SPACES);
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 24, SPACES);
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_30_A_OBJ249_local = MAIN_DTL_LINE_30.CreateNewField(Names.MAIN_DTL_LINE_30_A_OBJ249, FieldType.String, 10);
                   MAIN_DTL_LINE_30.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_30_A_OBJ249, FieldType.String, MAIN_DTL_LINE_30_A_OBJ249_local, 10);
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_30.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_31, (MAIN_DTL_LINE_31) =>
               {
                   MAIN_DTL_LINE_31.CreateNewFillerField(FieldType.String, 20, "| 7b. Distributed as");
                   MAIN_DTL_LINE_31.CreateNewFillerField(FieldType.String, 8, SPACES);
                   MAIN_DTL_LINE_31.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_31.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_31.CreateNewFillerField(FieldType.String, 5, "-----");
                   MAIN_DTL_LINE_31.CreateNewFillerField(FieldType.String, 24, SPACES);
                   MAIN_DTL_LINE_31.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_31.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_31.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_32, (MAIN_DTL_LINE_32) =>
               {
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 28, "|     Medical Support.......");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 2, "|$");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_32_A_OBJ250_local = MAIN_DTL_LINE_32.CreateNewField(Names.MAIN_DTL_LINE_32_A_OBJ250, FieldType.String, 10);
                   MAIN_DTL_LINE_32.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_32_A_OBJ250, FieldType.String, MAIN_DTL_LINE_32_A_OBJ250_local, 10);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_32_A_OBJ251_local = MAIN_DTL_LINE_32.CreateNewField(Names.MAIN_DTL_LINE_32_A_OBJ251, FieldType.String, 10);
                   MAIN_DTL_LINE_32.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_32_A_OBJ251, FieldType.String, MAIN_DTL_LINE_32_A_OBJ251_local, 10);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_32_A_OBJ252_local = MAIN_DTL_LINE_32.CreateNewField(Names.MAIN_DTL_LINE_32_A_OBJ252, FieldType.String, 10);
                   MAIN_DTL_LINE_32.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_32_A_OBJ252, FieldType.String, MAIN_DTL_LINE_32_A_OBJ252_local, 10);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_32_A_OBJ253_local = MAIN_DTL_LINE_32.CreateNewField(Names.MAIN_DTL_LINE_32_A_OBJ253, FieldType.String, 10);
                   MAIN_DTL_LINE_32.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_32_A_OBJ253, FieldType.String, MAIN_DTL_LINE_32_A_OBJ253_local, 10);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 24, SPACES);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_32_A_OBJ254_local = MAIN_DTL_LINE_32.CreateNewField(Names.MAIN_DTL_LINE_32_A_OBJ254, FieldType.String, 10);
                   MAIN_DTL_LINE_32.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_32_A_OBJ254, FieldType.String, MAIN_DTL_LINE_32_A_OBJ254_local, 10);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_32.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_33, (MAIN_DTL_LINE_33) =>
               {
                   MAIN_DTL_LINE_33.CreateNewFillerField(FieldType.String, 17, "| 7c. Distributed");
                   MAIN_DTL_LINE_33.CreateNewFillerField(FieldType.String, 11, SPACES);
                   MAIN_DTL_LINE_33.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_33.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_33.CreateNewFillerField(FieldType.String, 5, "-----");
                   MAIN_DTL_LINE_33.CreateNewFillerField(FieldType.String, 24, SPACES);
                   MAIN_DTL_LINE_33.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_33.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_33.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_34, (MAIN_DTL_LINE_34) =>
               {
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 28, "|     To Family.............");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 2, "|$");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_34_A_OBJ255_local = MAIN_DTL_LINE_34.CreateNewField(Names.MAIN_DTL_LINE_34_A_OBJ255, FieldType.String, 10);
                   MAIN_DTL_LINE_34.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_34_A_OBJ255, FieldType.String, MAIN_DTL_LINE_34_A_OBJ255_local, 10);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_34_A_OBJ256_local = MAIN_DTL_LINE_34.CreateNewField(Names.MAIN_DTL_LINE_34_A_OBJ256, FieldType.String, 10);
                   MAIN_DTL_LINE_34.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_34_A_OBJ256, FieldType.String, MAIN_DTL_LINE_34_A_OBJ256_local, 10);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_34_A_OBJ257_local = MAIN_DTL_LINE_34.CreateNewField(Names.MAIN_DTL_LINE_34_A_OBJ257, FieldType.String, 10);
                   MAIN_DTL_LINE_34.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_34_A_OBJ257, FieldType.String, MAIN_DTL_LINE_34_A_OBJ257_local, 10);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_34_A_OBJ258_local = MAIN_DTL_LINE_34.CreateNewField(Names.MAIN_DTL_LINE_34_A_OBJ258, FieldType.String, 10);
                   MAIN_DTL_LINE_34.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_34_A_OBJ258, FieldType.String, MAIN_DTL_LINE_34_A_OBJ258_local, 10);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 24, SPACES);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_34_A_OBJ259_local = MAIN_DTL_LINE_34.CreateNewField(Names.MAIN_DTL_LINE_34_A_OBJ259, FieldType.String, 10);
                   MAIN_DTL_LINE_34.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_34_A_OBJ259, FieldType.String, MAIN_DTL_LINE_34_A_OBJ259_local, 10);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_34.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_35, (MAIN_DTL_LINE_35) =>
               {
                   MAIN_DTL_LINE_35.CreateNewFillerField(FieldType.String, 23, "| 8.  Total Collections");
                   MAIN_DTL_LINE_35.CreateNewFillerField(FieldType.String, 5, SPACES);
                   MAIN_DTL_LINE_35.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_35.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_35.CreateNewFillerField(FieldType.String, 5, "-----");
                   MAIN_DTL_LINE_35.CreateNewFillerField(FieldType.String, 24, SPACES);
                   MAIN_DTL_LINE_35.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_35.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_35.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_36, (MAIN_DTL_LINE_36) =>
               {
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 28, "|     Distributed...........");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 2, "|$");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_36_A_OBJ260_local = MAIN_DTL_LINE_36.CreateNewField(Names.MAIN_DTL_LINE_36_A_OBJ260, FieldType.String, 10);
                   MAIN_DTL_LINE_36.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_36_A_OBJ260, FieldType.String, MAIN_DTL_LINE_36_A_OBJ260_local, 10);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_36_A_OBJ261_local = MAIN_DTL_LINE_36.CreateNewField(Names.MAIN_DTL_LINE_36_A_OBJ261, FieldType.String, 10);
                   MAIN_DTL_LINE_36.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_36_A_OBJ261, FieldType.String, MAIN_DTL_LINE_36_A_OBJ261_local, 10);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_36_A_OBJ262_local = MAIN_DTL_LINE_36.CreateNewField(Names.MAIN_DTL_LINE_36_A_OBJ262, FieldType.String, 10);
                   MAIN_DTL_LINE_36.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_36_A_OBJ262, FieldType.String, MAIN_DTL_LINE_36_A_OBJ262_local, 10);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_36_A_OBJ263_local = MAIN_DTL_LINE_36.CreateNewField(Names.MAIN_DTL_LINE_36_A_OBJ263, FieldType.String, 10);
                   MAIN_DTL_LINE_36.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_36_A_OBJ263, FieldType.String, MAIN_DTL_LINE_36_A_OBJ263_local, 10);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 24, SPACES);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_36_A_OBJ264_local = MAIN_DTL_LINE_36.CreateNewField(Names.MAIN_DTL_LINE_36_A_OBJ264, FieldType.String, 10);
                   MAIN_DTL_LINE_36.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_36_A_OBJ264, FieldType.String, MAIN_DTL_LINE_36_A_OBJ264_local, 10);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_36.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_37, (MAIN_DTL_LINE_37) =>
               {
                   MAIN_DTL_LINE_37.CreateNewFillerField(FieldType.String, 25, "| 9.  Gross Undistributed");
                   MAIN_DTL_LINE_37.CreateNewFillerField(FieldType.String, 3, SPACES);
                   MAIN_DTL_LINE_37.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_37.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_37.CreateNewFillerField(FieldType.String, 5, "-----");
                   MAIN_DTL_LINE_37.CreateNewFillerField(FieldType.String, 24, SPACES);
                   MAIN_DTL_LINE_37.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_37.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_37.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_38, (MAIN_DTL_LINE_38) =>
               {
                   MAIN_DTL_LINE_38.CreateNewFillerField(FieldType.String, 29, "|     Collections...........|");
                   MAIN_DTL_LINE_38.CreateNewFillerField(FieldType.String, 88, SPACES);
                   MAIN_DTL_LINE_38.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_38.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_38.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_38_A_OBJ265_local = MAIN_DTL_LINE_38.CreateNewField(Names.MAIN_DTL_LINE_38_A_OBJ265, FieldType.String, 10);
                   MAIN_DTL_LINE_38.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_38_A_OBJ265, FieldType.String, MAIN_DTL_LINE_38_A_OBJ265_local, 10);
                   MAIN_DTL_LINE_38.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_38.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_39, (MAIN_DTL_LINE_39) =>
               {
                   MAIN_DTL_LINE_39.CreateNewFillerField(FieldType.String, 21, "| 9a. Undistributable");
                   MAIN_DTL_LINE_39.CreateNewFillerField(FieldType.String, 7, SPACES);
                   MAIN_DTL_LINE_39.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_39.CreateNewFillerField(FieldType.String, 88, SPACES);
                   MAIN_DTL_LINE_39.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_39.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_39.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_40, (MAIN_DTL_LINE_40) =>
               {
                   MAIN_DTL_LINE_40.CreateNewFillerField(FieldType.String, 29, "|     Collections...........|");
                   MAIN_DTL_LINE_40.CreateNewFillerField(FieldType.String, 88, SPACES);
                   MAIN_DTL_LINE_40.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_40.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_40.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_40_A_OBJ266_local = MAIN_DTL_LINE_40.CreateNewField(Names.MAIN_DTL_LINE_40_A_OBJ266, FieldType.String, 10);
                   MAIN_DTL_LINE_40.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_40_A_OBJ266, FieldType.String, MAIN_DTL_LINE_40_A_OBJ266_local, 10);
                   MAIN_DTL_LINE_40.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_40.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_41, (MAIN_DTL_LINE_41) =>
               {
                   MAIN_DTL_LINE_41.CreateNewFillerField(FieldType.String, 23, "| 9b. Net Undistributed");
                   MAIN_DTL_LINE_41.CreateNewFillerField(FieldType.String, 5, SPACES);
                   MAIN_DTL_LINE_41.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_41.CreateNewFillerField(FieldType.String, 88, SPACES);
                   MAIN_DTL_LINE_41.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_41.CreateNewFillerField(FieldType.String, 13, "-------------");
                   MAIN_DTL_LINE_41.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_42, (MAIN_DTL_LINE_42) =>
               {
                   MAIN_DTL_LINE_42.CreateNewFillerField(FieldType.String, 29, "|     Collections...........|");
                   MAIN_DTL_LINE_42.CreateNewFillerField(FieldType.String, 88, SPACES);
                   MAIN_DTL_LINE_42.CreateNewFillerField(FieldType.String, 1, "|");
                   MAIN_DTL_LINE_42.CreateNewFillerField(FieldType.String, 1, "$");
                   MAIN_DTL_LINE_42.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_42_A_OBJ267_local = MAIN_DTL_LINE_42.CreateNewField(Names.MAIN_DTL_LINE_42_A_OBJ267, FieldType.String, 10);
                   MAIN_DTL_LINE_42.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_42_A_OBJ267, FieldType.String, MAIN_DTL_LINE_42_A_OBJ267_local, 10);
                   MAIN_DTL_LINE_42.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_42.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_43, (MAIN_DTL_LINE_43) =>
               {
                   MAIN_DTL_LINE_43.CreateNewFillerField(FieldType.String, 30, "|-----------------------------");
                   MAIN_DTL_LINE_43.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_43.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_43.CreateNewFillerField(FieldType.String, 30, "------------------------------");
                   MAIN_DTL_LINE_43.CreateNewFillerField(FieldType.String, 11, "-----------");
                   MAIN_DTL_LINE_43.CreateNewFillerField(FieldType.String, 1, "|");
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_44, (MAIN_DTL_LINE_44) =>
               {
                   MAIN_DTL_LINE_44.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_45, (MAIN_DTL_LINE_45) =>
               {
                   MAIN_DTL_LINE_45.CreateNewFillerField(FieldType.String, 5, SPACES);
                   MAIN_DTL_LINE_45.CreateNewFillerField(FieldType.String, 24, "Form OCSE-34A (10/01/98)");
               });
           });

            recordDef.CreateNewGroup(Names.MAIN_PAGE_HDR_SECTION, (MAIN_PAGE_HDR_SECTION) =>
           {
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_RESETPG_AFTER, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_KEEP_TOGETHER, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_SUPPRSS_BLANK, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_PRINT_ATBOTTM, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_KEEP_WITHNEXT, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_BEFORE_PG_BRK, FieldType.String, 1, "Y");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_AFTER_PG_BRK, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_PRINT_FLAG, FieldType.String, 1, "Y");
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_0, (MAIN_PAGE_HDR_0) =>
               {
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 8, "SRRUN151");
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 50, SPACES);
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 15, "State of Kansas");
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 46, SPACES);
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 5, "Page:");
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_0.CreateNewField(Names.MAIN_PAGE_HDR_0_P_OBJ217, FieldType.NumericEdited, "ZZ9", 3);
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_1, (MAIN_PAGE_HDR_1) =>
               {
                   MAIN_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 9, "Run Date:");
                   MAIN_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_1.CreateNewField(Names.MAIN_PAGE_HDR_1_D_OBJ272, FieldType.String, 10);
                   MAIN_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 22, SPACES);
                   MAIN_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 30, "Department of Social and Rehab");
                   MAIN_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 18, "ilitation Services");
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_2, (MAIN_PAGE_HDR_2) =>
               {
                   MAIN_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 9, "Run Time:");
                   MAIN_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_2.CreateNewField(Names.MAIN_PAGE_HDR_2_T_OBJ273, FieldType.String, 8);
                   MAIN_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 31, SPACES);
                   MAIN_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 30, "Child Support Enforcement Prog");
                   MAIN_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 3, "ram");
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_3, (MAIN_PAGE_HDR_3) =>
               {
                   MAIN_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 8, "Quarter:");
                   MAIN_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_3.CreateNewField(Names.MAIN_PAGE_HDR_3_A_OBJ6, FieldType.String, 7);
                   MAIN_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 34, SPACES);
                   MAIN_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 30, "Quarterly Report of Collection");
                   MAIN_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 1, "s");
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_EV1, (P_IMPORT_EV1) =>
           {
               P_IMPORT_EV1.CreateNewGroup(Names.P_REPORT_PARMS_ET, (P_REPORT_PARMS_ET) =>
               {
                   P_REPORT_PARMS_ET.CreateNewField(Names.P_PARM1_0001_001MS, FieldType.String, 1);

                   IField P_PARM1_0001_001_local = P_REPORT_PARMS_ET.CreateNewField(Names.P_PARM1_0001_001, FieldType.String, 2);
                   P_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.P_PARM1_0001_001XX, FieldType.String, P_PARM1_0001_001_local, 2);
                   P_REPORT_PARMS_ET.CreateNewField(Names.P_PARM2_0001_002MS, FieldType.String, 1);

                   IField P_PARM2_0001_002_local = P_REPORT_PARMS_ET.CreateNewField(Names.P_PARM2_0001_002, FieldType.String, 2);
                   P_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.P_PARM2_0001_002XX, FieldType.String, P_PARM2_0001_002_local, 2);
                   P_REPORT_PARMS_ET.CreateNewField(Names.P_SUBREPORT_CODE_0001_003MS, FieldType.String, 1);

                   IField P_SUBREPORT_CODE_0001_003_local = P_REPORT_PARMS_ET.CreateNewField(Names.P_SUBREPORT_CODE_0001_003, FieldType.String, 4);
                   P_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.P_SUBREPORT_CODE_0001_003XX, FieldType.String, P_SUBREPORT_CODE_0001_003_local, 4);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_EV2, (P_IMPORT_EV2) =>
           {
               P_IMPORT_EV2.CreateNewGroup(Names.P_OCSE34_ET, (P_OCSE34_ET) =>
               {
                   P_OCSE34_ET.CreateNewField(Names.P_PERIOD_0002_004MS, FieldType.String, 1);

                   IField P_PERIOD_0002_004_local = P_OCSE34_ET.CreateNewField(Names.P_PERIOD_0002_004, FieldType.SignedNumeric, 6);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_PERIOD_0002_004XX, FieldType.String, P_PERIOD_0002_004_local, 6);
                   P_OCSE34_ET.CreateNewField(Names.P_PREVIOUS_UNDISTRIB_AMOUN05MS, FieldType.String, 1);

                   IField P_PREVIOUS_UNDISTRIB_AMOUN_005_local = P_OCSE34_ET.CreateNewField(Names.P_PREVIOUS_UNDISTRIB_AMOUN_005, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_PREVIOUS_UNDISTRIB_AMOUN05XX, FieldType.String, P_PREVIOUS_UNDISTRIB_AMOUN_005_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_TOTAL_COLLECTIONS_AMOUNT06MS, FieldType.String, 1);

                   IField P_TOTAL_COLLECTIONS_AMOUNT_006_local = P_OCSE34_ET.CreateNewField(Names.P_TOTAL_COLLECTIONS_AMOUNT_006, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_TOTAL_COLLECTIONS_AMOUNT06XX, FieldType.String, P_TOTAL_COLLECTIONS_AMOUNT_006_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_OFFSET_FEDERAL_TAXREFUND07MS, FieldType.String, 1);

                   IField P_OFFSET_FEDERAL_TAXREFUND_007_local = P_OCSE34_ET.CreateNewField(Names.P_OFFSET_FEDERAL_TAXREFUND_007, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_OFFSET_FEDERAL_TAXREFUND07XX, FieldType.String, P_OFFSET_FEDERAL_TAXREFUND_007_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_OFFSET_STATE_TAX_REFUND_08MS, FieldType.String, 1);

                   IField P_OFFSET_STATE_TAX_REFUND__008_local = P_OCSE34_ET.CreateNewField(Names.P_OFFSET_STATE_TAX_REFUND__008, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_OFFSET_STATE_TAX_REFUND_08XX, FieldType.String, P_OFFSET_STATE_TAX_REFUND__008_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_UNEMPLOYMENT_COMP_AMOUNT09MS, FieldType.String, 1);

                   IField P_UNEMPLOYMENT_COMP_AMOUNT_009_local = P_OCSE34_ET.CreateNewField(Names.P_UNEMPLOYMENT_COMP_AMOUNT_009, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_UNEMPLOYMENT_COMP_AMOUNT09XX, FieldType.String, P_UNEMPLOYMENT_COMP_AMOUNT_009_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_ADMINSTRATIVE_ENFORCE_AM10MS, FieldType.String, 1);

                   IField P_ADMINSTRATIVE_ENFORCE_AM_010_local = P_OCSE34_ET.CreateNewField(Names.P_ADMINSTRATIVE_ENFORCE_AM_010, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_ADMINSTRATIVE_ENFORCE_AM10XX, FieldType.String, P_ADMINSTRATIVE_ENFORCE_AM_010_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_INCOME_WITHHOLDING_AMOUN11MS, FieldType.String, 1);

                   IField P_INCOME_WITHHOLDING_AMOUN_011_local = P_OCSE34_ET.CreateNewField(Names.P_INCOME_WITHHOLDING_AMOUN_011, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_INCOME_WITHHOLDING_AMOUN11XX, FieldType.String, P_INCOME_WITHHOLDING_AMOUN_011_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_OTHER_STATES_AMOUNT_000912MS, FieldType.String, 1);

                   IField P_OTHER_STATES_AMOUNT_0009_012_local = P_OCSE34_ET.CreateNewField(Names.P_OTHER_STATES_AMOUNT_0009_012, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_OTHER_STATES_AMOUNT_000912XX, FieldType.String, P_OTHER_STATES_AMOUNT_0009_012_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_OTHER_SOURCES_AMOUNT_00013MS, FieldType.String, 1);

                   IField P_OTHER_SOURCES_AMOUNT_000_013_local = P_OCSE34_ET.CreateNewField(Names.P_OTHER_SOURCES_AMOUNT_000_013, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_OTHER_SOURCES_AMOUNT_00013XX, FieldType.String, P_OTHER_SOURCES_AMOUNT_000_013_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_ADJUSTMENTS_AMOUNT_000914MS, FieldType.String, 1);

                   IField P_ADJUSTMENTS_AMOUNT_0009_014_local = P_OCSE34_ET.CreateNewField(Names.P_ADJUSTMENTS_AMOUNT_0009_014, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_ADJUSTMENTS_AMOUNT_000914XX, FieldType.String, P_ADJUSTMENTS_AMOUNT_0009_014_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_NON_IVD_CASES_AMOUNT_00015MS, FieldType.String, 1);

                   IField P_NON_IVD_CASES_AMOUNT_000_015_local = P_OCSE34_ET.CreateNewField(Names.P_NON_IVD_CASES_AMOUNT_000_015, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_NON_IVD_CASES_AMOUNT_00015XX, FieldType.String, P_NON_IVD_CASES_AMOUNT_000_015_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_OTHER_STATES_CURRENT_IVA16MS, FieldType.String, 1);

                   IField P_OTHER_STATES_CURRENT_IVA_016_local = P_OCSE34_ET.CreateNewField(Names.P_OTHER_STATES_CURRENT_IVA_016, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_OTHER_STATES_CURRENT_IVA16XX, FieldType.String, P_OTHER_STATES_CURRENT_IVA_016_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_OTHER_STATES_CURRENT_IVE17MS, FieldType.String, 1);

                   IField P_OTHER_STATES_CURRENT_IVE_017_local = P_OCSE34_ET.CreateNewField(Names.P_OTHER_STATES_CURRENT_IVE_017, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_OTHER_STATES_CURRENT_IVE17XX, FieldType.String, P_OTHER_STATES_CURRENT_IVE_017_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_OTHERSTATE_FORMER_ASSIST18MS, FieldType.String, 1);

                   IField P_OTHERSTATE_FORMER_ASSIST_018_local = P_OCSE34_ET.CreateNewField(Names.P_OTHERSTATE_FORMER_ASSIST_018, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_OTHERSTATE_FORMER_ASSIST18XX, FieldType.String, P_OTHERSTATE_FORMER_ASSIST_018_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_OTHER_STATE_NEVER_ASSIST19MS, FieldType.String, 1);

                   IField P_OTHER_STATE_NEVER_ASSIST_019_local = P_OCSE34_ET.CreateNewField(Names.P_OTHER_STATE_NEVER_ASSIST_019, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_OTHER_STATE_NEVER_ASSIST19XX, FieldType.String, P_OTHER_STATE_NEVER_ASSIST_019_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_OTHER_STATE_AMT_FORWARD_20MS, FieldType.String, 1);

                   IField P_OTHER_STATE_AMT_FORWARD__020_local = P_OCSE34_ET.CreateNewField(Names.P_OTHER_STATE_AMT_FORWARD__020, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_OTHER_STATE_AMT_FORWARD_20XX, FieldType.String, P_OTHER_STATE_AMT_FORWARD__020_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_AVAIL_FOR_DISTRIBUTION_A21MS, FieldType.String, 1);

                   IField P_AVAIL_FOR_DISTRIBUTION_A_021_local = P_OCSE34_ET.CreateNewField(Names.P_AVAIL_FOR_DISTRIBUTION_A_021, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_AVAIL_FOR_DISTRIBUTION_A21XX, FieldType.String, P_AVAIL_FOR_DISTRIBUTION_A_021_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIB_ASSIST_REIMB_IVA22MS, FieldType.String, 1);

                   IField P_DISTRIB_ASSIST_REIMB_IVA_022_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIB_ASSIST_REIMB_IVA_022, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIB_ASSIST_REIMB_IVA22XX, FieldType.String, P_DISTRIB_ASSIST_REIMB_IVA_022_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIB_ASSIST_REIMB_IVE23MS, FieldType.String, 1);

                   IField P_DISTRIB_ASSIST_REIMB_IVE_023_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIB_ASSIST_REIMB_IVE_023, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIB_ASSIST_REIMB_IVE23XX, FieldType.String, P_DISTRIB_ASSIST_REIMB_IVE_023_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIB_ASSIST_REIMB_FMR24MS, FieldType.String, 1);

                   IField P_DISTRIB_ASSIST_REIMB_FMR_024_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIB_ASSIST_REIMB_FMR_024, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIB_ASSIST_REIMB_FMR24XX, FieldType.String, P_DISTRIB_ASSIST_REIMB_FMR_024_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIB_ASSIST_REIMB_AMO25MS, FieldType.String, 1);

                   IField P_DISTRIB_ASSIST_REIMB_AMO_025_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIB_ASSIST_REIMB_AMO_025, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIB_ASSIST_REIMB_AMO25XX, FieldType.String, P_DISTRIB_ASSIST_REIMB_AMO_025_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_MED_SUPPORT_26MS, FieldType.String, 1);

                   IField P_DISTRIBUTED_MED_SUPPORT__026_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_MED_SUPPORT__026, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIBUTED_MED_SUPPORT_26XX, FieldType.String, P_DISTRIBUTED_MED_SUPPORT__026_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_MED_SUPPORT_27MS, FieldType.String, 1);

                   IField P_DISTRIBUTED_MED_SUPPORT__027_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_MED_SUPPORT__027, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIBUTED_MED_SUPPORT_27XX, FieldType.String, P_DISTRIBUTED_MED_SUPPORT__027_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_MED_SUPPORT_28MS, FieldType.String, 1);

                   IField P_DISTRIBUTED_MED_SUPPORT__028_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_MED_SUPPORT__028, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIBUTED_MED_SUPPORT_28XX, FieldType.String, P_DISTRIBUTED_MED_SUPPORT__028_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_MED_SUPPORT_29MS, FieldType.String, 1);

                   IField P_DISTRIBUTED_MED_SUPPORT__029_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_MED_SUPPORT__029, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIBUTED_MED_SUPPORT_29XX, FieldType.String, P_DISTRIBUTED_MED_SUPPORT__029_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_MED_SUPPORT_30MS, FieldType.String, 1);

                   IField P_DISTRIBUTED_MED_SUPPORT__030_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_MED_SUPPORT__030, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIBUTED_MED_SUPPORT_30XX, FieldType.String, P_DISTRIBUTED_MED_SUPPORT__030_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_FAMILY_IVA_A31MS, FieldType.String, 1);

                   IField P_DISTRIBUTED_FAMILY_IVA_A_031_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_FAMILY_IVA_A_031, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIBUTED_FAMILY_IVA_A31XX, FieldType.String, P_DISTRIBUTED_FAMILY_IVA_A_031_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_FAMILY_IVE_A32MS, FieldType.String, 1);

                   IField P_DISTRIBUTED_FAMILY_IVE_A_032_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_FAMILY_IVE_A_032, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIBUTED_FAMILY_IVE_A32XX, FieldType.String, P_DISTRIBUTED_FAMILY_IVE_A_032_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_FAMILY_FORME33MS, FieldType.String, 1);

                   IField P_DISTRIBUTED_FAMILY_FORME_033_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_FAMILY_FORME_033, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIBUTED_FAMILY_FORME33XX, FieldType.String, P_DISTRIBUTED_FAMILY_FORME_033_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_FAMILY_NEVER34MS, FieldType.String, 1);

                   IField P_DISTRIBUTED_FAMILY_NEVER_034_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_FAMILY_NEVER_034, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIBUTED_FAMILY_NEVER34XX, FieldType.String, P_DISTRIBUTED_FAMILY_NEVER_034_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_FAMILY_AMOUN35MS, FieldType.String, 1);

                   IField P_DISTRIBUTED_FAMILY_AMOUN_035_local = P_OCSE34_ET.CreateNewField(Names.P_DISTRIBUTED_FAMILY_AMOUN_035, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_DISTRIBUTED_FAMILY_AMOUN35XX, FieldType.String, P_DISTRIBUTED_FAMILY_AMOUN_035_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_TOTAL_DISTRIBUTED_IVA_AM36MS, FieldType.String, 1);

                   IField P_TOTAL_DISTRIBUTED_IVA_AM_036_local = P_OCSE34_ET.CreateNewField(Names.P_TOTAL_DISTRIBUTED_IVA_AM_036, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_TOTAL_DISTRIBUTED_IVA_AM36XX, FieldType.String, P_TOTAL_DISTRIBUTED_IVA_AM_036_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_TOTAL_DISTRIBUTED_IVE_AM37MS, FieldType.String, 1);

                   IField P_TOTAL_DISTRIBUTED_IVE_AM_037_local = P_OCSE34_ET.CreateNewField(Names.P_TOTAL_DISTRIBUTED_IVE_AM_037, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_TOTAL_DISTRIBUTED_IVE_AM37XX, FieldType.String, P_TOTAL_DISTRIBUTED_IVE_AM_037_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_TOTAL_DISTRIBUTED_FORMER38MS, FieldType.String, 1);

                   IField P_TOTAL_DISTRIBUTED_FORMER_038_local = P_OCSE34_ET.CreateNewField(Names.P_TOTAL_DISTRIBUTED_FORMER_038, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_TOTAL_DISTRIBUTED_FORMER38XX, FieldType.String, P_TOTAL_DISTRIBUTED_FORMER_038_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_TOTAL_DISTRIBUTED_NEVER_39MS, FieldType.String, 1);

                   IField P_TOTAL_DISTRIBUTED_NEVER__039_local = P_OCSE34_ET.CreateNewField(Names.P_TOTAL_DISTRIBUTED_NEVER__039, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_TOTAL_DISTRIBUTED_NEVER_39XX, FieldType.String, P_TOTAL_DISTRIBUTED_NEVER__039_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_TOTAL_DISTRIBUTED_AMOUNT40MS, FieldType.String, 1);

                   IField P_TOTAL_DISTRIBUTED_AMOUNT_040_local = P_OCSE34_ET.CreateNewField(Names.P_TOTAL_DISTRIBUTED_AMOUNT_040, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_TOTAL_DISTRIBUTED_AMOUNT40XX, FieldType.String, P_TOTAL_DISTRIBUTED_AMOUNT_040_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_GROSS_UNDISTRIBUTED_AMOU41MS, FieldType.String, 1);

                   IField P_GROSS_UNDISTRIBUTED_AMOU_041_local = P_OCSE34_ET.CreateNewField(Names.P_GROSS_UNDISTRIBUTED_AMOU_041, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_GROSS_UNDISTRIBUTED_AMOU41XX, FieldType.String, P_GROSS_UNDISTRIBUTED_AMOU_041_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_UNDISTRIBUTED_AMOUNT_00342MS, FieldType.String, 1);

                   IField P_UNDISTRIBUTED_AMOUNT_003_042_local = P_OCSE34_ET.CreateNewField(Names.P_UNDISTRIBUTED_AMOUNT_003_042, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_UNDISTRIBUTED_AMOUNT_00342XX, FieldType.String, P_UNDISTRIBUTED_AMOUNT_003_042_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_NET_UNDISTRIBUTED_AMOUNT43MS, FieldType.String, 1);

                   IField P_NET_UNDISTRIBUTED_AMOUNT_043_local = P_OCSE34_ET.CreateNewField(Names.P_NET_UNDISTRIBUTED_AMOUNT_043, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_NET_UNDISTRIBUTED_AMOUNT43XX, FieldType.String, P_NET_UNDISTRIBUTED_AMOUNT_043_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_FEDERAL_SHARE_IVA_AMOUNT44MS, FieldType.String, 1);

                   IField P_FEDERAL_SHARE_IVA_AMOUNT_044_local = P_OCSE34_ET.CreateNewField(Names.P_FEDERAL_SHARE_IVA_AMOUNT_044, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_FEDERAL_SHARE_IVA_AMOUNT44XX, FieldType.String, P_FEDERAL_SHARE_IVA_AMOUNT_044_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_FEDERAL_SHARE_IVE_AMOUNT45MS, FieldType.String, 1);

                   IField P_FEDERAL_SHARE_IVE_AMOUNT_045_local = P_OCSE34_ET.CreateNewField(Names.P_FEDERAL_SHARE_IVE_AMOUNT_045, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_FEDERAL_SHARE_IVE_AMOUNT45XX, FieldType.String, P_FEDERAL_SHARE_IVE_AMOUNT_045_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_FEDERAL_SHARE_FORMER_AMO46MS, FieldType.String, 1);

                   IField P_FEDERAL_SHARE_FORMER_AMO_046_local = P_OCSE34_ET.CreateNewField(Names.P_FEDERAL_SHARE_FORMER_AMO_046, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_FEDERAL_SHARE_FORMER_AMO46XX, FieldType.String, P_FEDERAL_SHARE_FORMER_AMO_046_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_FEDERAL_SHARE_TOTAL_AMOU47MS, FieldType.String, 1);

                   IField P_FEDERAL_SHARE_TOTAL_AMOU_047_local = P_OCSE34_ET.CreateNewField(Names.P_FEDERAL_SHARE_TOTAL_AMOU_047, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_FEDERAL_SHARE_TOTAL_AMOU47XX, FieldType.String, P_FEDERAL_SHARE_TOTAL_AMOU_047_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_INCENTIVE_PAYMENT_IVA_AM48MS, FieldType.String, 1);

                   IField P_INCENTIVE_PAYMENT_IVA_AM_048_local = P_OCSE34_ET.CreateNewField(Names.P_INCENTIVE_PAYMENT_IVA_AM_048, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_INCENTIVE_PAYMENT_IVA_AM48XX, FieldType.String, P_INCENTIVE_PAYMENT_IVA_AM_048_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_INCENTIVE_PAYMENT_FORMER49MS, FieldType.String, 1);

                   IField P_INCENTIVE_PAYMENT_FORMER_049_local = P_OCSE34_ET.CreateNewField(Names.P_INCENTIVE_PAYMENT_FORMER_049, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_INCENTIVE_PAYMENT_FORMER49XX, FieldType.String, P_INCENTIVE_PAYMENT_FORMER_049_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_INCENTIVE_PAYMENT_AMOUNT50MS, FieldType.String, 1);

                   IField P_INCENTIVE_PAYMENT_AMOUNT_050_local = P_OCSE34_ET.CreateNewField(Names.P_INCENTIVE_PAYMENT_AMOUNT_050, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_INCENTIVE_PAYMENT_AMOUNT50XX, FieldType.String, P_INCENTIVE_PAYMENT_AMOUNT_050_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_NET_FEDERAL_SHARE_IVA_AM51MS, FieldType.String, 1);

                   IField P_NET_FEDERAL_SHARE_IVA_AM_051_local = P_OCSE34_ET.CreateNewField(Names.P_NET_FEDERAL_SHARE_IVA_AM_051, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_NET_FEDERAL_SHARE_IVA_AM51XX, FieldType.String, P_NET_FEDERAL_SHARE_IVA_AM_051_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_NET_FEDERAL_SHARE_FORMER52MS, FieldType.String, 1);

                   IField P_NET_FEDERAL_SHARE_FORMER_052_local = P_OCSE34_ET.CreateNewField(Names.P_NET_FEDERAL_SHARE_FORMER_052, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_NET_FEDERAL_SHARE_FORMER52XX, FieldType.String, P_NET_FEDERAL_SHARE_FORMER_052_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_NET_FEDERAL_SHARE_AMOUNT53MS, FieldType.String, 1);

                   IField P_NET_FEDERAL_SHARE_AMOUNT_053_local = P_OCSE34_ET.CreateNewField(Names.P_NET_FEDERAL_SHARE_AMOUNT_053, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_NET_FEDERAL_SHARE_AMOUNT53XX, FieldType.String, P_NET_FEDERAL_SHARE_AMOUNT_053_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_FEES_RETAIN_OTHER_STATES54MS, FieldType.String, 1);

                   IField P_FEES_RETAIN_OTHER_STATES_054_local = P_OCSE34_ET.CreateNewField(Names.P_FEES_RETAIN_OTHER_STATES_054, FieldType.SignedNumeric, 9);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_FEES_RETAIN_OTHER_STATES54XX, FieldType.String, P_FEES_RETAIN_OTHER_STATES_054_local, 9);
                   P_OCSE34_ET.CreateNewField(Names.P_CREATED_TIMESTAMP_0047_055MS, FieldType.String, 1);

                   IField P_CREATED_TIMESTAMP_0047_055_local = P_OCSE34_ET.CreateNewField(Names.P_CREATED_TIMESTAMP_0047_055, FieldType.String, 20);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_CREATED_TIMESTAMP_0047_055XX, FieldType.String, P_CREATED_TIMESTAMP_0047_055_local, 20);
                   P_OCSE34_ET.CreateNewField(Names.P_CREATED_BY_0047_056MS, FieldType.String, 1);

                   IField P_CREATED_BY_0047_056_local = P_OCSE34_ET.CreateNewField(Names.P_CREATED_BY_0047_056, FieldType.String, 8);
                   P_OCSE34_ET.CreateNewFieldRedefine(Names.P_CREATED_BY_0047_056XX, FieldType.String, P_CREATED_BY_0047_056_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.NUMERIC_EDIT_PATTERNS, (NUMERIC_EDIT_PATTERNS) =>
           {
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INTEGER2, FieldType.SignedNumeric, 18);

               IField EP_INTEGER_local = NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INTEGER, FieldType.NumericEdited, "-ZZZZZZZZZZZZZZZZZ9.", 20, null, 0);
               NUMERIC_EDIT_PATTERNS.CreateNewGroupRedefine(Names.EP_INTEGER_XX, EP_INTEGER_local, (EP_INTEGER_XX) =>
               {
                   EP_INTEGER_XX.CreateNewFieldArray(Names.EP_INTEGER_X, 20, FieldType.String, 1);
               });

               IField EP_DECIMAL_local = NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_DECIMAL, FieldType.UnsignedNumeric, 18, null, 18);
               NUMERIC_EDIT_PATTERNS.CreateNewGroupRedefine(Names.EP_DECIMAL_XX, EP_DECIMAL_local, (EP_DECIMAL_XX) =>
               {
                   EP_DECIMAL_XX.CreateNewFieldArray(Names.EP_DECIMAL_X, 18, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_PRECISION, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SCALE, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INP_INDEX, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_OUT_INDEX, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INDEX, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_COUNT, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_COUNT2, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SIGN, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_DPOINT_USED, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SIGN_USED, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_DOLLAR_USED, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_FIRST_DIGIT, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_ISTHERE_DCML, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_ISTHERE_V, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INTEGER_LEN, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewGroup(Names.EP_SZNUMERIC, (EP_SZNUMERIC) =>
               {
                   EP_SZNUMERIC.CreateNewFieldArray(Names.EP_SZNUMERIC_X, 40, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewGroup(Names.EP_FORMATTED_VALUE, (EP_FORMATTED_VALUE) =>
               {
                   EP_FORMATTED_VALUE.CreateNewFieldArray(Names.EP_FORMATTED_VALUE_X, 40, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewGroup(Names.EP_EDIT_PATTERN, (EP_EDIT_PATTERN) =>
               {
                   EP_EDIT_PATTERN.CreateNewFieldArray(Names.EP_EDIT_PATTERN_X, 40, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_EDIT_PATTERN_LEN, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SZNUMERIC_LEN, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_STOP, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_CURRENCY_COUNT, FieldType.UnsignedNumeric, 2);
           });
            recordDef.CreateNewFillerField(FieldType.String, 22, "END OF WORKING STORAGE");

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXF700_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXF700_ls_LinkageSection";
            internal const string TI_RUNTIME_PARM1 = "TI_RUNTIME_PARM1";
            internal const string TI_RUNTIME_PARM2 = "TI_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string I_IMPORT_EV1 = "I_IMPORT_EV1";
            internal const string I_REPORT_PARMS_ET = "I_REPORT_PARMS_ET";
            internal const string I_PARM1_0001_001MS = "I_PARM1_0001_001MS";
            internal const string I_PARM1_0001_001 = "I_PARM1_0001_001";
            internal const string I_PARM1_0001_001XX = "I_PARM1_0001_001XX";
            internal const string IO_CONTROL_CD = "IO_CONTROL_CD";
            internal const string LS_OPEN_FILE_PASS = "LS_OPEN_FILE_PASS";
            internal const string LS_APPEND_FILE_PASS = "LS_APPEND_FILE_PASS";
            internal const string LS_CLOSE_FILE_PASS = "LS_CLOSE_FILE_PASS";
            internal const string LS_GEN_RPT_PASS = "LS_GEN_RPT_PASS";
            internal const string I_PARM2_0001_002MS = "I_PARM2_0001_002MS";
            internal const string I_PARM2_0001_002 = "I_PARM2_0001_002";
            internal const string I_PARM2_0001_002XX = "I_PARM2_0001_002XX";
            internal const string LS_RUNTIME_RPT_TYPE_CD = "LS_RUNTIME_RPT_TYPE_CD";
            internal const string I_PARM2_1 = "I_PARM2_1";
            internal const string I_PARM2_2 = "I_PARM2_2";
            internal const string I_SUBREPORT_CODE_0001_003MS = "I_SUBREPORT_CODE_0001_003MS";
            internal const string I_SUBREPORT_CODE_0001_003 = "I_SUBREPORT_CODE_0001_003";
            internal const string I_SUBREPORT_CODE_0001_003XX = "I_SUBREPORT_CODE_0001_003XX";
            internal const string I_IMPORT_EV2 = "I_IMPORT_EV2";
            internal const string I_OCSE34_ET = "I_OCSE34_ET";
            internal const string I_PERIOD_0002_004MS = "I_PERIOD_0002_004MS";
            internal const string I_PERIOD_0002_004 = "I_PERIOD_0002_004";
            internal const string I_PERIOD_0002_004XX = "I_PERIOD_0002_004XX";
            internal const string I_PREVIOUS_UNDISTRIB_AMOUN05MS = "I_PREVIOUS_UNDISTRIB_AMOUN05MS";
            internal const string I_PREVIOUS_UNDISTRIB_AMOUN_005 = "I_PREVIOUS_UNDISTRIB_AMOUN_005";
            internal const string I_PREVIOUS_UNDISTRIB_AMOUN05XX = "I_PREVIOUS_UNDISTRIB_AMOUN05XX";
            internal const string I_TOTAL_COLLECTIONS_AMOUNT06MS = "I_TOTAL_COLLECTIONS_AMOUNT06MS";
            internal const string I_TOTAL_COLLECTIONS_AMOUNT_006 = "I_TOTAL_COLLECTIONS_AMOUNT_006";
            internal const string I_TOTAL_COLLECTIONS_AMOUNT06XX = "I_TOTAL_COLLECTIONS_AMOUNT06XX";
            internal const string I_OFFSET_FEDERAL_TAXREFUND07MS = "I_OFFSET_FEDERAL_TAXREFUND07MS";
            internal const string I_OFFSET_FEDERAL_TAXREFUND_007 = "I_OFFSET_FEDERAL_TAXREFUND_007";
            internal const string I_OFFSET_FEDERAL_TAXREFUND07XX = "I_OFFSET_FEDERAL_TAXREFUND07XX";
            internal const string I_OFFSET_STATE_TAX_REFUND_08MS = "I_OFFSET_STATE_TAX_REFUND_08MS";
            internal const string I_OFFSET_STATE_TAX_REFUND__008 = "I_OFFSET_STATE_TAX_REFUND__008";
            internal const string I_OFFSET_STATE_TAX_REFUND_08XX = "I_OFFSET_STATE_TAX_REFUND_08XX";
            internal const string I_UNEMPLOYMENT_COMP_AMOUNT09MS = "I_UNEMPLOYMENT_COMP_AMOUNT09MS";
            internal const string I_UNEMPLOYMENT_COMP_AMOUNT_009 = "I_UNEMPLOYMENT_COMP_AMOUNT_009";
            internal const string I_UNEMPLOYMENT_COMP_AMOUNT09XX = "I_UNEMPLOYMENT_COMP_AMOUNT09XX";
            internal const string I_ADMINSTRATIVE_ENFORCE_AM10MS = "I_ADMINSTRATIVE_ENFORCE_AM10MS";
            internal const string I_ADMINSTRATIVE_ENFORCE_AM_010 = "I_ADMINSTRATIVE_ENFORCE_AM_010";
            internal const string I_ADMINSTRATIVE_ENFORCE_AM10XX = "I_ADMINSTRATIVE_ENFORCE_AM10XX";
            internal const string I_INCOME_WITHHOLDING_AMOUN11MS = "I_INCOME_WITHHOLDING_AMOUN11MS";
            internal const string I_INCOME_WITHHOLDING_AMOUN_011 = "I_INCOME_WITHHOLDING_AMOUN_011";
            internal const string I_INCOME_WITHHOLDING_AMOUN11XX = "I_INCOME_WITHHOLDING_AMOUN11XX";
            internal const string I_OTHER_STATES_AMOUNT_000912MS = "I_OTHER_STATES_AMOUNT_000912MS";
            internal const string I_OTHER_STATES_AMOUNT_0009_012 = "I_OTHER_STATES_AMOUNT_0009_012";
            internal const string I_OTHER_STATES_AMOUNT_000912XX = "I_OTHER_STATES_AMOUNT_000912XX";
            internal const string I_OTHER_SOURCES_AMOUNT_00013MS = "I_OTHER_SOURCES_AMOUNT_00013MS";
            internal const string I_OTHER_SOURCES_AMOUNT_000_013 = "I_OTHER_SOURCES_AMOUNT_000_013";
            internal const string I_OTHER_SOURCES_AMOUNT_00013XX = "I_OTHER_SOURCES_AMOUNT_00013XX";
            internal const string I_ADJUSTMENTS_AMOUNT_000914MS = "I_ADJUSTMENTS_AMOUNT_000914MS";
            internal const string I_ADJUSTMENTS_AMOUNT_0009_014 = "I_ADJUSTMENTS_AMOUNT_0009_014";
            internal const string I_ADJUSTMENTS_AMOUNT_000914XX = "I_ADJUSTMENTS_AMOUNT_000914XX";
            internal const string I_NON_IVD_CASES_AMOUNT_00015MS = "I_NON_IVD_CASES_AMOUNT_00015MS";
            internal const string I_NON_IVD_CASES_AMOUNT_000_015 = "I_NON_IVD_CASES_AMOUNT_000_015";
            internal const string I_NON_IVD_CASES_AMOUNT_00015XX = "I_NON_IVD_CASES_AMOUNT_00015XX";
            internal const string I_OTHER_STATES_CURRENT_IVA16MS = "I_OTHER_STATES_CURRENT_IVA16MS";
            internal const string I_OTHER_STATES_CURRENT_IVA_016 = "I_OTHER_STATES_CURRENT_IVA_016";
            internal const string I_OTHER_STATES_CURRENT_IVA16XX = "I_OTHER_STATES_CURRENT_IVA16XX";
            internal const string I_OTHER_STATES_CURRENT_IVE17MS = "I_OTHER_STATES_CURRENT_IVE17MS";
            internal const string I_OTHER_STATES_CURRENT_IVE_017 = "I_OTHER_STATES_CURRENT_IVE_017";
            internal const string I_OTHER_STATES_CURRENT_IVE17XX = "I_OTHER_STATES_CURRENT_IVE17XX";
            internal const string I_OTHERSTATE_FORMER_ASSIST18MS = "I_OTHERSTATE_FORMER_ASSIST18MS";
            internal const string I_OTHERSTATE_FORMER_ASSIST_018 = "I_OTHERSTATE_FORMER_ASSIST_018";
            internal const string I_OTHERSTATE_FORMER_ASSIST18XX = "I_OTHERSTATE_FORMER_ASSIST18XX";
            internal const string I_OTHER_STATE_NEVER_ASSIST19MS = "I_OTHER_STATE_NEVER_ASSIST19MS";
            internal const string I_OTHER_STATE_NEVER_ASSIST_019 = "I_OTHER_STATE_NEVER_ASSIST_019";
            internal const string I_OTHER_STATE_NEVER_ASSIST19XX = "I_OTHER_STATE_NEVER_ASSIST19XX";
            internal const string I_OTHER_STATE_AMT_FORWARD_20MS = "I_OTHER_STATE_AMT_FORWARD_20MS";
            internal const string I_OTHER_STATE_AMT_FORWARD__020 = "I_OTHER_STATE_AMT_FORWARD__020";
            internal const string I_OTHER_STATE_AMT_FORWARD_20XX = "I_OTHER_STATE_AMT_FORWARD_20XX";
            internal const string I_AVAIL_FOR_DISTRIBUTION_A21MS = "I_AVAIL_FOR_DISTRIBUTION_A21MS";
            internal const string I_AVAIL_FOR_DISTRIBUTION_A_021 = "I_AVAIL_FOR_DISTRIBUTION_A_021";
            internal const string I_AVAIL_FOR_DISTRIBUTION_A21XX = "I_AVAIL_FOR_DISTRIBUTION_A21XX";
            internal const string I_DISTRIB_ASSIST_REIMB_IVA22MS = "I_DISTRIB_ASSIST_REIMB_IVA22MS";
            internal const string I_DISTRIB_ASSIST_REIMB_IVA_022 = "I_DISTRIB_ASSIST_REIMB_IVA_022";
            internal const string I_DISTRIB_ASSIST_REIMB_IVA22XX = "I_DISTRIB_ASSIST_REIMB_IVA22XX";
            internal const string I_DISTRIB_ASSIST_REIMB_IVE23MS = "I_DISTRIB_ASSIST_REIMB_IVE23MS";
            internal const string I_DISTRIB_ASSIST_REIMB_IVE_023 = "I_DISTRIB_ASSIST_REIMB_IVE_023";
            internal const string I_DISTRIB_ASSIST_REIMB_IVE23XX = "I_DISTRIB_ASSIST_REIMB_IVE23XX";
            internal const string I_DISTRIB_ASSIST_REIMB_FMR24MS = "I_DISTRIB_ASSIST_REIMB_FMR24MS";
            internal const string I_DISTRIB_ASSIST_REIMB_FMR_024 = "I_DISTRIB_ASSIST_REIMB_FMR_024";
            internal const string I_DISTRIB_ASSIST_REIMB_FMR24XX = "I_DISTRIB_ASSIST_REIMB_FMR24XX";
            internal const string I_DISTRIB_ASSIST_REIMB_AMO25MS = "I_DISTRIB_ASSIST_REIMB_AMO25MS";
            internal const string I_DISTRIB_ASSIST_REIMB_AMO_025 = "I_DISTRIB_ASSIST_REIMB_AMO_025";
            internal const string I_DISTRIB_ASSIST_REIMB_AMO25XX = "I_DISTRIB_ASSIST_REIMB_AMO25XX";
            internal const string I_DISTRIBUTED_MED_SUPPORT_26MS = "I_DISTRIBUTED_MED_SUPPORT_26MS";
            internal const string I_DISTRIBUTED_MED_SUPPORT__026 = "I_DISTRIBUTED_MED_SUPPORT__026";
            internal const string I_DISTRIBUTED_MED_SUPPORT_26XX = "I_DISTRIBUTED_MED_SUPPORT_26XX";
            internal const string I_DISTRIBUTED_MED_SUPPORT_27MS = "I_DISTRIBUTED_MED_SUPPORT_27MS";
            internal const string I_DISTRIBUTED_MED_SUPPORT__027 = "I_DISTRIBUTED_MED_SUPPORT__027";
            internal const string I_DISTRIBUTED_MED_SUPPORT_27XX = "I_DISTRIBUTED_MED_SUPPORT_27XX";
            internal const string I_DISTRIBUTED_MED_SUPPORT_28MS = "I_DISTRIBUTED_MED_SUPPORT_28MS";
            internal const string I_DISTRIBUTED_MED_SUPPORT__028 = "I_DISTRIBUTED_MED_SUPPORT__028";
            internal const string I_DISTRIBUTED_MED_SUPPORT_28XX = "I_DISTRIBUTED_MED_SUPPORT_28XX";
            internal const string I_DISTRIBUTED_MED_SUPPORT_29MS = "I_DISTRIBUTED_MED_SUPPORT_29MS";
            internal const string I_DISTRIBUTED_MED_SUPPORT__029 = "I_DISTRIBUTED_MED_SUPPORT__029";
            internal const string I_DISTRIBUTED_MED_SUPPORT_29XX = "I_DISTRIBUTED_MED_SUPPORT_29XX";
            internal const string I_DISTRIBUTED_MED_SUPPORT_30MS = "I_DISTRIBUTED_MED_SUPPORT_30MS";
            internal const string I_DISTRIBUTED_MED_SUPPORT__030 = "I_DISTRIBUTED_MED_SUPPORT__030";
            internal const string I_DISTRIBUTED_MED_SUPPORT_30XX = "I_DISTRIBUTED_MED_SUPPORT_30XX";
            internal const string I_DISTRIBUTED_FAMILY_IVA_A31MS = "I_DISTRIBUTED_FAMILY_IVA_A31MS";
            internal const string I_DISTRIBUTED_FAMILY_IVA_A_031 = "I_DISTRIBUTED_FAMILY_IVA_A_031";
            internal const string I_DISTRIBUTED_FAMILY_IVA_A31XX = "I_DISTRIBUTED_FAMILY_IVA_A31XX";
            internal const string I_DISTRIBUTED_FAMILY_IVE_A32MS = "I_DISTRIBUTED_FAMILY_IVE_A32MS";
            internal const string I_DISTRIBUTED_FAMILY_IVE_A_032 = "I_DISTRIBUTED_FAMILY_IVE_A_032";
            internal const string I_DISTRIBUTED_FAMILY_IVE_A32XX = "I_DISTRIBUTED_FAMILY_IVE_A32XX";
            internal const string I_DISTRIBUTED_FAMILY_FORME33MS = "I_DISTRIBUTED_FAMILY_FORME33MS";
            internal const string I_DISTRIBUTED_FAMILY_FORME_033 = "I_DISTRIBUTED_FAMILY_FORME_033";
            internal const string I_DISTRIBUTED_FAMILY_FORME33XX = "I_DISTRIBUTED_FAMILY_FORME33XX";
            internal const string I_DISTRIBUTED_FAMILY_NEVER34MS = "I_DISTRIBUTED_FAMILY_NEVER34MS";
            internal const string I_DISTRIBUTED_FAMILY_NEVER_034 = "I_DISTRIBUTED_FAMILY_NEVER_034";
            internal const string I_DISTRIBUTED_FAMILY_NEVER34XX = "I_DISTRIBUTED_FAMILY_NEVER34XX";
            internal const string I_DISTRIBUTED_FAMILY_AMOUN35MS = "I_DISTRIBUTED_FAMILY_AMOUN35MS";
            internal const string I_DISTRIBUTED_FAMILY_AMOUN_035 = "I_DISTRIBUTED_FAMILY_AMOUN_035";
            internal const string I_DISTRIBUTED_FAMILY_AMOUN35XX = "I_DISTRIBUTED_FAMILY_AMOUN35XX";
            internal const string I_TOTAL_DISTRIBUTED_IVA_AM36MS = "I_TOTAL_DISTRIBUTED_IVA_AM36MS";
            internal const string I_TOTAL_DISTRIBUTED_IVA_AM_036 = "I_TOTAL_DISTRIBUTED_IVA_AM_036";
            internal const string I_TOTAL_DISTRIBUTED_IVA_AM36XX = "I_TOTAL_DISTRIBUTED_IVA_AM36XX";
            internal const string I_TOTAL_DISTRIBUTED_IVE_AM37MS = "I_TOTAL_DISTRIBUTED_IVE_AM37MS";
            internal const string I_TOTAL_DISTRIBUTED_IVE_AM_037 = "I_TOTAL_DISTRIBUTED_IVE_AM_037";
            internal const string I_TOTAL_DISTRIBUTED_IVE_AM37XX = "I_TOTAL_DISTRIBUTED_IVE_AM37XX";
            internal const string I_TOTAL_DISTRIBUTED_FORMER38MS = "I_TOTAL_DISTRIBUTED_FORMER38MS";
            internal const string I_TOTAL_DISTRIBUTED_FORMER_038 = "I_TOTAL_DISTRIBUTED_FORMER_038";
            internal const string I_TOTAL_DISTRIBUTED_FORMER38XX = "I_TOTAL_DISTRIBUTED_FORMER38XX";
            internal const string I_TOTAL_DISTRIBUTED_NEVER_39MS = "I_TOTAL_DISTRIBUTED_NEVER_39MS";
            internal const string I_TOTAL_DISTRIBUTED_NEVER__039 = "I_TOTAL_DISTRIBUTED_NEVER__039";
            internal const string I_TOTAL_DISTRIBUTED_NEVER_39XX = "I_TOTAL_DISTRIBUTED_NEVER_39XX";
            internal const string I_TOTAL_DISTRIBUTED_AMOUNT40MS = "I_TOTAL_DISTRIBUTED_AMOUNT40MS";
            internal const string I_TOTAL_DISTRIBUTED_AMOUNT_040 = "I_TOTAL_DISTRIBUTED_AMOUNT_040";
            internal const string I_TOTAL_DISTRIBUTED_AMOUNT40XX = "I_TOTAL_DISTRIBUTED_AMOUNT40XX";
            internal const string I_GROSS_UNDISTRIBUTED_AMOU41MS = "I_GROSS_UNDISTRIBUTED_AMOU41MS";
            internal const string I_GROSS_UNDISTRIBUTED_AMOU_041 = "I_GROSS_UNDISTRIBUTED_AMOU_041";
            internal const string I_GROSS_UNDISTRIBUTED_AMOU41XX = "I_GROSS_UNDISTRIBUTED_AMOU41XX";
            internal const string I_UNDISTRIBUTED_AMOUNT_00342MS = "I_UNDISTRIBUTED_AMOUNT_00342MS";
            internal const string I_UNDISTRIBUTED_AMOUNT_003_042 = "I_UNDISTRIBUTED_AMOUNT_003_042";
            internal const string I_UNDISTRIBUTED_AMOUNT_00342XX = "I_UNDISTRIBUTED_AMOUNT_00342XX";
            internal const string I_NET_UNDISTRIBUTED_AMOUNT43MS = "I_NET_UNDISTRIBUTED_AMOUNT43MS";
            internal const string I_NET_UNDISTRIBUTED_AMOUNT_043 = "I_NET_UNDISTRIBUTED_AMOUNT_043";
            internal const string I_NET_UNDISTRIBUTED_AMOUNT43XX = "I_NET_UNDISTRIBUTED_AMOUNT43XX";
            internal const string I_FEDERAL_SHARE_IVA_AMOUNT44MS = "I_FEDERAL_SHARE_IVA_AMOUNT44MS";
            internal const string I_FEDERAL_SHARE_IVA_AMOUNT_044 = "I_FEDERAL_SHARE_IVA_AMOUNT_044";
            internal const string I_FEDERAL_SHARE_IVA_AMOUNT44XX = "I_FEDERAL_SHARE_IVA_AMOUNT44XX";
            internal const string I_FEDERAL_SHARE_IVE_AMOUNT45MS = "I_FEDERAL_SHARE_IVE_AMOUNT45MS";
            internal const string I_FEDERAL_SHARE_IVE_AMOUNT_045 = "I_FEDERAL_SHARE_IVE_AMOUNT_045";
            internal const string I_FEDERAL_SHARE_IVE_AMOUNT45XX = "I_FEDERAL_SHARE_IVE_AMOUNT45XX";
            internal const string I_FEDERAL_SHARE_FORMER_AMO46MS = "I_FEDERAL_SHARE_FORMER_AMO46MS";
            internal const string I_FEDERAL_SHARE_FORMER_AMO_046 = "I_FEDERAL_SHARE_FORMER_AMO_046";
            internal const string I_FEDERAL_SHARE_FORMER_AMO46XX = "I_FEDERAL_SHARE_FORMER_AMO46XX";
            internal const string I_FEDERAL_SHARE_TOTAL_AMOU47MS = "I_FEDERAL_SHARE_TOTAL_AMOU47MS";
            internal const string I_FEDERAL_SHARE_TOTAL_AMOU_047 = "I_FEDERAL_SHARE_TOTAL_AMOU_047";
            internal const string I_FEDERAL_SHARE_TOTAL_AMOU47XX = "I_FEDERAL_SHARE_TOTAL_AMOU47XX";
            internal const string I_INCENTIVE_PAYMENT_IVA_AM48MS = "I_INCENTIVE_PAYMENT_IVA_AM48MS";
            internal const string I_INCENTIVE_PAYMENT_IVA_AM_048 = "I_INCENTIVE_PAYMENT_IVA_AM_048";
            internal const string I_INCENTIVE_PAYMENT_IVA_AM48XX = "I_INCENTIVE_PAYMENT_IVA_AM48XX";
            internal const string I_INCENTIVE_PAYMENT_FORMER49MS = "I_INCENTIVE_PAYMENT_FORMER49MS";
            internal const string I_INCENTIVE_PAYMENT_FORMER_049 = "I_INCENTIVE_PAYMENT_FORMER_049";
            internal const string I_INCENTIVE_PAYMENT_FORMER49XX = "I_INCENTIVE_PAYMENT_FORMER49XX";
            internal const string I_INCENTIVE_PAYMENT_AMOUNT50MS = "I_INCENTIVE_PAYMENT_AMOUNT50MS";
            internal const string I_INCENTIVE_PAYMENT_AMOUNT_050 = "I_INCENTIVE_PAYMENT_AMOUNT_050";
            internal const string I_INCENTIVE_PAYMENT_AMOUNT50XX = "I_INCENTIVE_PAYMENT_AMOUNT50XX";
            internal const string I_NET_FEDERAL_SHARE_IVA_AM51MS = "I_NET_FEDERAL_SHARE_IVA_AM51MS";
            internal const string I_NET_FEDERAL_SHARE_IVA_AM_051 = "I_NET_FEDERAL_SHARE_IVA_AM_051";
            internal const string I_NET_FEDERAL_SHARE_IVA_AM51XX = "I_NET_FEDERAL_SHARE_IVA_AM51XX";
            internal const string I_NET_FEDERAL_SHARE_FORMER52MS = "I_NET_FEDERAL_SHARE_FORMER52MS";
            internal const string I_NET_FEDERAL_SHARE_FORMER_052 = "I_NET_FEDERAL_SHARE_FORMER_052";
            internal const string I_NET_FEDERAL_SHARE_FORMER52XX = "I_NET_FEDERAL_SHARE_FORMER52XX";
            internal const string I_NET_FEDERAL_SHARE_AMOUNT53MS = "I_NET_FEDERAL_SHARE_AMOUNT53MS";
            internal const string I_NET_FEDERAL_SHARE_AMOUNT_053 = "I_NET_FEDERAL_SHARE_AMOUNT_053";
            internal const string I_NET_FEDERAL_SHARE_AMOUNT53XX = "I_NET_FEDERAL_SHARE_AMOUNT53XX";
            internal const string I_FEES_RETAIN_OTHER_STATES54MS = "I_FEES_RETAIN_OTHER_STATES54MS";
            internal const string I_FEES_RETAIN_OTHER_STATES_054 = "I_FEES_RETAIN_OTHER_STATES_054";
            internal const string I_FEES_RETAIN_OTHER_STATES54XX = "I_FEES_RETAIN_OTHER_STATES54XX";
            internal const string I_CREATED_TIMESTAMP_0047_055MS = "I_CREATED_TIMESTAMP_0047_055MS";
            internal const string I_CREATED_TIMESTAMP_0047_055 = "I_CREATED_TIMESTAMP_0047_055";
            internal const string I_CREATED_TIMESTAMP_0047_055XX = "I_CREATED_TIMESTAMP_0047_055XX";
            internal const string I_CREATED_BY_0047_056MS = "I_CREATED_BY_0047_056MS";
            internal const string I_CREATED_BY_0047_056 = "I_CREATED_BY_0047_056";
            internal const string I_CREATED_BY_0047_056XX = "I_CREATED_BY_0047_056XX";
            internal const string E_EXPORT_EV3 = "E_EXPORT_EV3";
            internal const string E_REPORT_PARMS_ET = "E_REPORT_PARMS_ET";
            internal const string E_PARM1_0048_057MS = "E_PARM1_0048_057MS";
            internal const string E_PARM1_0048_057 = "E_PARM1_0048_057";
            internal const string E_PARM1_0048_057XX = "E_PARM1_0048_057XX";
            internal const string LS_RETURN_CD = "LS_RETURN_CD";
            internal const string E_PARM2_0048_058MS = "E_PARM2_0048_058MS";
            internal const string E_PARM2_0048_058 = "E_PARM2_0048_058";
            internal const string E_PARM2_0048_058XX = "E_PARM2_0048_058XX";
            internal const string E_SUBREPORT_CODE_0048_059MS = "E_SUBREPORT_CODE_0048_059MS";
            internal const string E_SUBREPORT_CODE_0048_059 = "E_SUBREPORT_CODE_0048_059";
            internal const string E_SUBREPORT_CODE_0048_059XX = "E_SUBREPORT_CODE_0048_059XX";
        }
        #endregion

        #region Direct-access element properties
        public IField TI_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.TI_RUNTIME_PARM1); } }
        public IField TI_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.TI_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup I_IMPORT_EV1 { get { return GetElementByName<IGroup>(Names.I_IMPORT_EV1); } }
        public IGroup I_REPORT_PARMS_ET { get { return GetElementByName<IGroup>(Names.I_REPORT_PARMS_ET); } }
        public IField I_PARM1_0001_001MS { get { return GetElementByName<IField>(Names.I_PARM1_0001_001MS); } }
        public IField I_PARM1_0001_001 { get { return GetElementByName<IField>(Names.I_PARM1_0001_001); } }
        public IField I_PARM1_0001_001XX { get { return GetElementByName<IField>(Names.I_PARM1_0001_001XX); } }
        public IField IO_CONTROL_CD { get { return GetElementByName<IField>(Names.IO_CONTROL_CD); } }
        public ICheckField LS_OPEN_FILE_PASS { get { return GetElementByName<ICheckField>(Names.LS_OPEN_FILE_PASS); } }
        public ICheckField LS_APPEND_FILE_PASS { get { return GetElementByName<ICheckField>(Names.LS_APPEND_FILE_PASS); } }
        public ICheckField LS_CLOSE_FILE_PASS { get { return GetElementByName<ICheckField>(Names.LS_CLOSE_FILE_PASS); } }
        public ICheckField LS_GEN_RPT_PASS { get { return GetElementByName<ICheckField>(Names.LS_GEN_RPT_PASS); } }
        public IField I_PARM2_0001_002MS { get { return GetElementByName<IField>(Names.I_PARM2_0001_002MS); } }
        public IField I_PARM2_0001_002 { get { return GetElementByName<IField>(Names.I_PARM2_0001_002); } }
        public IField I_PARM2_0001_002XX { get { return GetElementByName<IField>(Names.I_PARM2_0001_002XX); } }
        public IGroup LS_RUNTIME_RPT_TYPE_CD { get { return GetElementByName<IGroup>(Names.LS_RUNTIME_RPT_TYPE_CD); } }
        public IField I_PARM2_1 { get { return GetElementByName<IField>(Names.I_PARM2_1); } }
        public IField I_PARM2_2 { get { return GetElementByName<IField>(Names.I_PARM2_2); } }
        public IField I_SUBREPORT_CODE_0001_003MS { get { return GetElementByName<IField>(Names.I_SUBREPORT_CODE_0001_003MS); } }
        public IField I_SUBREPORT_CODE_0001_003 { get { return GetElementByName<IField>(Names.I_SUBREPORT_CODE_0001_003); } }
        public IField I_SUBREPORT_CODE_0001_003XX { get { return GetElementByName<IField>(Names.I_SUBREPORT_CODE_0001_003XX); } }
        public IGroup I_IMPORT_EV2 { get { return GetElementByName<IGroup>(Names.I_IMPORT_EV2); } }
        public IGroup I_OCSE34_ET { get { return GetElementByName<IGroup>(Names.I_OCSE34_ET); } }
        public IField I_PERIOD_0002_004MS { get { return GetElementByName<IField>(Names.I_PERIOD_0002_004MS); } }
        public IField I_PERIOD_0002_004 { get { return GetElementByName<IField>(Names.I_PERIOD_0002_004); } }
        public IField I_PERIOD_0002_004XX { get { return GetElementByName<IField>(Names.I_PERIOD_0002_004XX); } }
        public IField I_PREVIOUS_UNDISTRIB_AMOUN05MS { get { return GetElementByName<IField>(Names.I_PREVIOUS_UNDISTRIB_AMOUN05MS); } }
        public IField I_PREVIOUS_UNDISTRIB_AMOUN_005 { get { return GetElementByName<IField>(Names.I_PREVIOUS_UNDISTRIB_AMOUN_005); } }
        public IField I_PREVIOUS_UNDISTRIB_AMOUN05XX { get { return GetElementByName<IField>(Names.I_PREVIOUS_UNDISTRIB_AMOUN05XX); } }
        public IField I_TOTAL_COLLECTIONS_AMOUNT06MS { get { return GetElementByName<IField>(Names.I_TOTAL_COLLECTIONS_AMOUNT06MS); } }
        public IField I_TOTAL_COLLECTIONS_AMOUNT_006 { get { return GetElementByName<IField>(Names.I_TOTAL_COLLECTIONS_AMOUNT_006); } }
        public IField I_TOTAL_COLLECTIONS_AMOUNT06XX { get { return GetElementByName<IField>(Names.I_TOTAL_COLLECTIONS_AMOUNT06XX); } }
        public IField I_OFFSET_FEDERAL_TAXREFUND07MS { get { return GetElementByName<IField>(Names.I_OFFSET_FEDERAL_TAXREFUND07MS); } }
        public IField I_OFFSET_FEDERAL_TAXREFUND_007 { get { return GetElementByName<IField>(Names.I_OFFSET_FEDERAL_TAXREFUND_007); } }
        public IField I_OFFSET_FEDERAL_TAXREFUND07XX { get { return GetElementByName<IField>(Names.I_OFFSET_FEDERAL_TAXREFUND07XX); } }
        public IField I_OFFSET_STATE_TAX_REFUND_08MS { get { return GetElementByName<IField>(Names.I_OFFSET_STATE_TAX_REFUND_08MS); } }
        public IField I_OFFSET_STATE_TAX_REFUND__008 { get { return GetElementByName<IField>(Names.I_OFFSET_STATE_TAX_REFUND__008); } }
        public IField I_OFFSET_STATE_TAX_REFUND_08XX { get { return GetElementByName<IField>(Names.I_OFFSET_STATE_TAX_REFUND_08XX); } }
        public IField I_UNEMPLOYMENT_COMP_AMOUNT09MS { get { return GetElementByName<IField>(Names.I_UNEMPLOYMENT_COMP_AMOUNT09MS); } }
        public IField I_UNEMPLOYMENT_COMP_AMOUNT_009 { get { return GetElementByName<IField>(Names.I_UNEMPLOYMENT_COMP_AMOUNT_009); } }
        public IField I_UNEMPLOYMENT_COMP_AMOUNT09XX { get { return GetElementByName<IField>(Names.I_UNEMPLOYMENT_COMP_AMOUNT09XX); } }
        public IField I_ADMINSTRATIVE_ENFORCE_AM10MS { get { return GetElementByName<IField>(Names.I_ADMINSTRATIVE_ENFORCE_AM10MS); } }
        public IField I_ADMINSTRATIVE_ENFORCE_AM_010 { get { return GetElementByName<IField>(Names.I_ADMINSTRATIVE_ENFORCE_AM_010); } }
        public IField I_ADMINSTRATIVE_ENFORCE_AM10XX { get { return GetElementByName<IField>(Names.I_ADMINSTRATIVE_ENFORCE_AM10XX); } }
        public IField I_INCOME_WITHHOLDING_AMOUN11MS { get { return GetElementByName<IField>(Names.I_INCOME_WITHHOLDING_AMOUN11MS); } }
        public IField I_INCOME_WITHHOLDING_AMOUN_011 { get { return GetElementByName<IField>(Names.I_INCOME_WITHHOLDING_AMOUN_011); } }
        public IField I_INCOME_WITHHOLDING_AMOUN11XX { get { return GetElementByName<IField>(Names.I_INCOME_WITHHOLDING_AMOUN11XX); } }
        public IField I_OTHER_STATES_AMOUNT_000912MS { get { return GetElementByName<IField>(Names.I_OTHER_STATES_AMOUNT_000912MS); } }
        public IField I_OTHER_STATES_AMOUNT_0009_012 { get { return GetElementByName<IField>(Names.I_OTHER_STATES_AMOUNT_0009_012); } }
        public IField I_OTHER_STATES_AMOUNT_000912XX { get { return GetElementByName<IField>(Names.I_OTHER_STATES_AMOUNT_000912XX); } }
        public IField I_OTHER_SOURCES_AMOUNT_00013MS { get { return GetElementByName<IField>(Names.I_OTHER_SOURCES_AMOUNT_00013MS); } }
        public IField I_OTHER_SOURCES_AMOUNT_000_013 { get { return GetElementByName<IField>(Names.I_OTHER_SOURCES_AMOUNT_000_013); } }
        public IField I_OTHER_SOURCES_AMOUNT_00013XX { get { return GetElementByName<IField>(Names.I_OTHER_SOURCES_AMOUNT_00013XX); } }
        public IField I_ADJUSTMENTS_AMOUNT_000914MS { get { return GetElementByName<IField>(Names.I_ADJUSTMENTS_AMOUNT_000914MS); } }
        public IField I_ADJUSTMENTS_AMOUNT_0009_014 { get { return GetElementByName<IField>(Names.I_ADJUSTMENTS_AMOUNT_0009_014); } }
        public IField I_ADJUSTMENTS_AMOUNT_000914XX { get { return GetElementByName<IField>(Names.I_ADJUSTMENTS_AMOUNT_000914XX); } }
        public IField I_NON_IVD_CASES_AMOUNT_00015MS { get { return GetElementByName<IField>(Names.I_NON_IVD_CASES_AMOUNT_00015MS); } }
        public IField I_NON_IVD_CASES_AMOUNT_000_015 { get { return GetElementByName<IField>(Names.I_NON_IVD_CASES_AMOUNT_000_015); } }
        public IField I_NON_IVD_CASES_AMOUNT_00015XX { get { return GetElementByName<IField>(Names.I_NON_IVD_CASES_AMOUNT_00015XX); } }
        public IField I_OTHER_STATES_CURRENT_IVA16MS { get { return GetElementByName<IField>(Names.I_OTHER_STATES_CURRENT_IVA16MS); } }
        public IField I_OTHER_STATES_CURRENT_IVA_016 { get { return GetElementByName<IField>(Names.I_OTHER_STATES_CURRENT_IVA_016); } }
        public IField I_OTHER_STATES_CURRENT_IVA16XX { get { return GetElementByName<IField>(Names.I_OTHER_STATES_CURRENT_IVA16XX); } }
        public IField I_OTHER_STATES_CURRENT_IVE17MS { get { return GetElementByName<IField>(Names.I_OTHER_STATES_CURRENT_IVE17MS); } }
        public IField I_OTHER_STATES_CURRENT_IVE_017 { get { return GetElementByName<IField>(Names.I_OTHER_STATES_CURRENT_IVE_017); } }
        public IField I_OTHER_STATES_CURRENT_IVE17XX { get { return GetElementByName<IField>(Names.I_OTHER_STATES_CURRENT_IVE17XX); } }
        public IField I_OTHERSTATE_FORMER_ASSIST18MS { get { return GetElementByName<IField>(Names.I_OTHERSTATE_FORMER_ASSIST18MS); } }
        public IField I_OTHERSTATE_FORMER_ASSIST_018 { get { return GetElementByName<IField>(Names.I_OTHERSTATE_FORMER_ASSIST_018); } }
        public IField I_OTHERSTATE_FORMER_ASSIST18XX { get { return GetElementByName<IField>(Names.I_OTHERSTATE_FORMER_ASSIST18XX); } }
        public IField I_OTHER_STATE_NEVER_ASSIST19MS { get { return GetElementByName<IField>(Names.I_OTHER_STATE_NEVER_ASSIST19MS); } }
        public IField I_OTHER_STATE_NEVER_ASSIST_019 { get { return GetElementByName<IField>(Names.I_OTHER_STATE_NEVER_ASSIST_019); } }
        public IField I_OTHER_STATE_NEVER_ASSIST19XX { get { return GetElementByName<IField>(Names.I_OTHER_STATE_NEVER_ASSIST19XX); } }
        public IField I_OTHER_STATE_AMT_FORWARD_20MS { get { return GetElementByName<IField>(Names.I_OTHER_STATE_AMT_FORWARD_20MS); } }
        public IField I_OTHER_STATE_AMT_FORWARD__020 { get { return GetElementByName<IField>(Names.I_OTHER_STATE_AMT_FORWARD__020); } }
        public IField I_OTHER_STATE_AMT_FORWARD_20XX { get { return GetElementByName<IField>(Names.I_OTHER_STATE_AMT_FORWARD_20XX); } }
        public IField I_AVAIL_FOR_DISTRIBUTION_A21MS { get { return GetElementByName<IField>(Names.I_AVAIL_FOR_DISTRIBUTION_A21MS); } }
        public IField I_AVAIL_FOR_DISTRIBUTION_A_021 { get { return GetElementByName<IField>(Names.I_AVAIL_FOR_DISTRIBUTION_A_021); } }
        public IField I_AVAIL_FOR_DISTRIBUTION_A21XX { get { return GetElementByName<IField>(Names.I_AVAIL_FOR_DISTRIBUTION_A21XX); } }
        public IField I_DISTRIB_ASSIST_REIMB_IVA22MS { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_IVA22MS); } }
        public IField I_DISTRIB_ASSIST_REIMB_IVA_022 { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_IVA_022); } }
        public IField I_DISTRIB_ASSIST_REIMB_IVA22XX { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_IVA22XX); } }
        public IField I_DISTRIB_ASSIST_REIMB_IVE23MS { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_IVE23MS); } }
        public IField I_DISTRIB_ASSIST_REIMB_IVE_023 { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_IVE_023); } }
        public IField I_DISTRIB_ASSIST_REIMB_IVE23XX { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_IVE23XX); } }
        public IField I_DISTRIB_ASSIST_REIMB_FMR24MS { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_FMR24MS); } }
        public IField I_DISTRIB_ASSIST_REIMB_FMR_024 { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_FMR_024); } }
        public IField I_DISTRIB_ASSIST_REIMB_FMR24XX { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_FMR24XX); } }
        public IField I_DISTRIB_ASSIST_REIMB_AMO25MS { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_AMO25MS); } }
        public IField I_DISTRIB_ASSIST_REIMB_AMO_025 { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_AMO_025); } }
        public IField I_DISTRIB_ASSIST_REIMB_AMO25XX { get { return GetElementByName<IField>(Names.I_DISTRIB_ASSIST_REIMB_AMO25XX); } }
        public IField I_DISTRIBUTED_MED_SUPPORT_26MS { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT_26MS); } }
        public IField I_DISTRIBUTED_MED_SUPPORT__026 { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT__026); } }
        public IField I_DISTRIBUTED_MED_SUPPORT_26XX { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT_26XX); } }
        public IField I_DISTRIBUTED_MED_SUPPORT_27MS { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT_27MS); } }
        public IField I_DISTRIBUTED_MED_SUPPORT__027 { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT__027); } }
        public IField I_DISTRIBUTED_MED_SUPPORT_27XX { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT_27XX); } }
        public IField I_DISTRIBUTED_MED_SUPPORT_28MS { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT_28MS); } }
        public IField I_DISTRIBUTED_MED_SUPPORT__028 { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT__028); } }
        public IField I_DISTRIBUTED_MED_SUPPORT_28XX { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT_28XX); } }
        public IField I_DISTRIBUTED_MED_SUPPORT_29MS { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT_29MS); } }
        public IField I_DISTRIBUTED_MED_SUPPORT__029 { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT__029); } }
        public IField I_DISTRIBUTED_MED_SUPPORT_29XX { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT_29XX); } }
        public IField I_DISTRIBUTED_MED_SUPPORT_30MS { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT_30MS); } }
        public IField I_DISTRIBUTED_MED_SUPPORT__030 { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT__030); } }
        public IField I_DISTRIBUTED_MED_SUPPORT_30XX { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_MED_SUPPORT_30XX); } }
        public IField I_DISTRIBUTED_FAMILY_IVA_A31MS { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_IVA_A31MS); } }
        public IField I_DISTRIBUTED_FAMILY_IVA_A_031 { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_IVA_A_031); } }
        public IField I_DISTRIBUTED_FAMILY_IVA_A31XX { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_IVA_A31XX); } }
        public IField I_DISTRIBUTED_FAMILY_IVE_A32MS { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_IVE_A32MS); } }
        public IField I_DISTRIBUTED_FAMILY_IVE_A_032 { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_IVE_A_032); } }
        public IField I_DISTRIBUTED_FAMILY_IVE_A32XX { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_IVE_A32XX); } }
        public IField I_DISTRIBUTED_FAMILY_FORME33MS { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_FORME33MS); } }
        public IField I_DISTRIBUTED_FAMILY_FORME_033 { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_FORME_033); } }
        public IField I_DISTRIBUTED_FAMILY_FORME33XX { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_FORME33XX); } }
        public IField I_DISTRIBUTED_FAMILY_NEVER34MS { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_NEVER34MS); } }
        public IField I_DISTRIBUTED_FAMILY_NEVER_034 { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_NEVER_034); } }
        public IField I_DISTRIBUTED_FAMILY_NEVER34XX { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_NEVER34XX); } }
        public IField I_DISTRIBUTED_FAMILY_AMOUN35MS { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_AMOUN35MS); } }
        public IField I_DISTRIBUTED_FAMILY_AMOUN_035 { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_AMOUN_035); } }
        public IField I_DISTRIBUTED_FAMILY_AMOUN35XX { get { return GetElementByName<IField>(Names.I_DISTRIBUTED_FAMILY_AMOUN35XX); } }
        public IField I_TOTAL_DISTRIBUTED_IVA_AM36MS { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_IVA_AM36MS); } }
        public IField I_TOTAL_DISTRIBUTED_IVA_AM_036 { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_IVA_AM_036); } }
        public IField I_TOTAL_DISTRIBUTED_IVA_AM36XX { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_IVA_AM36XX); } }
        public IField I_TOTAL_DISTRIBUTED_IVE_AM37MS { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_IVE_AM37MS); } }
        public IField I_TOTAL_DISTRIBUTED_IVE_AM_037 { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_IVE_AM_037); } }
        public IField I_TOTAL_DISTRIBUTED_IVE_AM37XX { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_IVE_AM37XX); } }
        public IField I_TOTAL_DISTRIBUTED_FORMER38MS { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_FORMER38MS); } }
        public IField I_TOTAL_DISTRIBUTED_FORMER_038 { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_FORMER_038); } }
        public IField I_TOTAL_DISTRIBUTED_FORMER38XX { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_FORMER38XX); } }
        public IField I_TOTAL_DISTRIBUTED_NEVER_39MS { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_NEVER_39MS); } }
        public IField I_TOTAL_DISTRIBUTED_NEVER__039 { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_NEVER__039); } }
        public IField I_TOTAL_DISTRIBUTED_NEVER_39XX { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_NEVER_39XX); } }
        public IField I_TOTAL_DISTRIBUTED_AMOUNT40MS { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_AMOUNT40MS); } }
        public IField I_TOTAL_DISTRIBUTED_AMOUNT_040 { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_AMOUNT_040); } }
        public IField I_TOTAL_DISTRIBUTED_AMOUNT40XX { get { return GetElementByName<IField>(Names.I_TOTAL_DISTRIBUTED_AMOUNT40XX); } }
        public IField I_GROSS_UNDISTRIBUTED_AMOU41MS { get { return GetElementByName<IField>(Names.I_GROSS_UNDISTRIBUTED_AMOU41MS); } }
        public IField I_GROSS_UNDISTRIBUTED_AMOU_041 { get { return GetElementByName<IField>(Names.I_GROSS_UNDISTRIBUTED_AMOU_041); } }
        public IField I_GROSS_UNDISTRIBUTED_AMOU41XX { get { return GetElementByName<IField>(Names.I_GROSS_UNDISTRIBUTED_AMOU41XX); } }
        public IField I_UNDISTRIBUTED_AMOUNT_00342MS { get { return GetElementByName<IField>(Names.I_UNDISTRIBUTED_AMOUNT_00342MS); } }
        public IField I_UNDISTRIBUTED_AMOUNT_003_042 { get { return GetElementByName<IField>(Names.I_UNDISTRIBUTED_AMOUNT_003_042); } }
        public IField I_UNDISTRIBUTED_AMOUNT_00342XX { get { return GetElementByName<IField>(Names.I_UNDISTRIBUTED_AMOUNT_00342XX); } }
        public IField I_NET_UNDISTRIBUTED_AMOUNT43MS { get { return GetElementByName<IField>(Names.I_NET_UNDISTRIBUTED_AMOUNT43MS); } }
        public IField I_NET_UNDISTRIBUTED_AMOUNT_043 { get { return GetElementByName<IField>(Names.I_NET_UNDISTRIBUTED_AMOUNT_043); } }
        public IField I_NET_UNDISTRIBUTED_AMOUNT43XX { get { return GetElementByName<IField>(Names.I_NET_UNDISTRIBUTED_AMOUNT43XX); } }
        public IField I_FEDERAL_SHARE_IVA_AMOUNT44MS { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_IVA_AMOUNT44MS); } }
        public IField I_FEDERAL_SHARE_IVA_AMOUNT_044 { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_IVA_AMOUNT_044); } }
        public IField I_FEDERAL_SHARE_IVA_AMOUNT44XX { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_IVA_AMOUNT44XX); } }
        public IField I_FEDERAL_SHARE_IVE_AMOUNT45MS { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_IVE_AMOUNT45MS); } }
        public IField I_FEDERAL_SHARE_IVE_AMOUNT_045 { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_IVE_AMOUNT_045); } }
        public IField I_FEDERAL_SHARE_IVE_AMOUNT45XX { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_IVE_AMOUNT45XX); } }
        public IField I_FEDERAL_SHARE_FORMER_AMO46MS { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_FORMER_AMO46MS); } }
        public IField I_FEDERAL_SHARE_FORMER_AMO_046 { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_FORMER_AMO_046); } }
        public IField I_FEDERAL_SHARE_FORMER_AMO46XX { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_FORMER_AMO46XX); } }
        public IField I_FEDERAL_SHARE_TOTAL_AMOU47MS { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_TOTAL_AMOU47MS); } }
        public IField I_FEDERAL_SHARE_TOTAL_AMOU_047 { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_TOTAL_AMOU_047); } }
        public IField I_FEDERAL_SHARE_TOTAL_AMOU47XX { get { return GetElementByName<IField>(Names.I_FEDERAL_SHARE_TOTAL_AMOU47XX); } }
        public IField I_INCENTIVE_PAYMENT_IVA_AM48MS { get { return GetElementByName<IField>(Names.I_INCENTIVE_PAYMENT_IVA_AM48MS); } }
        public IField I_INCENTIVE_PAYMENT_IVA_AM_048 { get { return GetElementByName<IField>(Names.I_INCENTIVE_PAYMENT_IVA_AM_048); } }
        public IField I_INCENTIVE_PAYMENT_IVA_AM48XX { get { return GetElementByName<IField>(Names.I_INCENTIVE_PAYMENT_IVA_AM48XX); } }
        public IField I_INCENTIVE_PAYMENT_FORMER49MS { get { return GetElementByName<IField>(Names.I_INCENTIVE_PAYMENT_FORMER49MS); } }
        public IField I_INCENTIVE_PAYMENT_FORMER_049 { get { return GetElementByName<IField>(Names.I_INCENTIVE_PAYMENT_FORMER_049); } }
        public IField I_INCENTIVE_PAYMENT_FORMER49XX { get { return GetElementByName<IField>(Names.I_INCENTIVE_PAYMENT_FORMER49XX); } }
        public IField I_INCENTIVE_PAYMENT_AMOUNT50MS { get { return GetElementByName<IField>(Names.I_INCENTIVE_PAYMENT_AMOUNT50MS); } }
        public IField I_INCENTIVE_PAYMENT_AMOUNT_050 { get { return GetElementByName<IField>(Names.I_INCENTIVE_PAYMENT_AMOUNT_050); } }
        public IField I_INCENTIVE_PAYMENT_AMOUNT50XX { get { return GetElementByName<IField>(Names.I_INCENTIVE_PAYMENT_AMOUNT50XX); } }
        public IField I_NET_FEDERAL_SHARE_IVA_AM51MS { get { return GetElementByName<IField>(Names.I_NET_FEDERAL_SHARE_IVA_AM51MS); } }
        public IField I_NET_FEDERAL_SHARE_IVA_AM_051 { get { return GetElementByName<IField>(Names.I_NET_FEDERAL_SHARE_IVA_AM_051); } }
        public IField I_NET_FEDERAL_SHARE_IVA_AM51XX { get { return GetElementByName<IField>(Names.I_NET_FEDERAL_SHARE_IVA_AM51XX); } }
        public IField I_NET_FEDERAL_SHARE_FORMER52MS { get { return GetElementByName<IField>(Names.I_NET_FEDERAL_SHARE_FORMER52MS); } }
        public IField I_NET_FEDERAL_SHARE_FORMER_052 { get { return GetElementByName<IField>(Names.I_NET_FEDERAL_SHARE_FORMER_052); } }
        public IField I_NET_FEDERAL_SHARE_FORMER52XX { get { return GetElementByName<IField>(Names.I_NET_FEDERAL_SHARE_FORMER52XX); } }
        public IField I_NET_FEDERAL_SHARE_AMOUNT53MS { get { return GetElementByName<IField>(Names.I_NET_FEDERAL_SHARE_AMOUNT53MS); } }
        public IField I_NET_FEDERAL_SHARE_AMOUNT_053 { get { return GetElementByName<IField>(Names.I_NET_FEDERAL_SHARE_AMOUNT_053); } }
        public IField I_NET_FEDERAL_SHARE_AMOUNT53XX { get { return GetElementByName<IField>(Names.I_NET_FEDERAL_SHARE_AMOUNT53XX); } }
        public IField I_FEES_RETAIN_OTHER_STATES54MS { get { return GetElementByName<IField>(Names.I_FEES_RETAIN_OTHER_STATES54MS); } }
        public IField I_FEES_RETAIN_OTHER_STATES_054 { get { return GetElementByName<IField>(Names.I_FEES_RETAIN_OTHER_STATES_054); } }
        public IField I_FEES_RETAIN_OTHER_STATES54XX { get { return GetElementByName<IField>(Names.I_FEES_RETAIN_OTHER_STATES54XX); } }
        public IField I_CREATED_TIMESTAMP_0047_055MS { get { return GetElementByName<IField>(Names.I_CREATED_TIMESTAMP_0047_055MS); } }
        public IField I_CREATED_TIMESTAMP_0047_055 { get { return GetElementByName<IField>(Names.I_CREATED_TIMESTAMP_0047_055); } }
        public IField I_CREATED_TIMESTAMP_0047_055XX { get { return GetElementByName<IField>(Names.I_CREATED_TIMESTAMP_0047_055XX); } }
        public IField I_CREATED_BY_0047_056MS { get { return GetElementByName<IField>(Names.I_CREATED_BY_0047_056MS); } }
        public IField I_CREATED_BY_0047_056 { get { return GetElementByName<IField>(Names.I_CREATED_BY_0047_056); } }
        public IField I_CREATED_BY_0047_056XX { get { return GetElementByName<IField>(Names.I_CREATED_BY_0047_056XX); } }
        public IGroup E_EXPORT_EV3 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV3); } }
        public IGroup E_REPORT_PARMS_ET { get { return GetElementByName<IGroup>(Names.E_REPORT_PARMS_ET); } }
        public IField E_PARM1_0048_057MS { get { return GetElementByName<IField>(Names.E_PARM1_0048_057MS); } }
        public IField E_PARM1_0048_057 { get { return GetElementByName<IField>(Names.E_PARM1_0048_057); } }
        public IField E_PARM1_0048_057XX { get { return GetElementByName<IField>(Names.E_PARM1_0048_057XX); } }
        public IField LS_RETURN_CD { get { return GetElementByName<IField>(Names.LS_RETURN_CD); } }
        public IField E_PARM2_0048_058MS { get { return GetElementByName<IField>(Names.E_PARM2_0048_058MS); } }
        public IField E_PARM2_0048_058 { get { return GetElementByName<IField>(Names.E_PARM2_0048_058); } }
        public IField E_PARM2_0048_058XX { get { return GetElementByName<IField>(Names.E_PARM2_0048_058XX); } }
        public IField E_SUBREPORT_CODE_0048_059MS { get { return GetElementByName<IField>(Names.E_SUBREPORT_CODE_0048_059MS); } }
        public IField E_SUBREPORT_CODE_0048_059 { get { return GetElementByName<IField>(Names.E_SUBREPORT_CODE_0048_059); } }
        public IField E_SUBREPORT_CODE_0048_059XX { get { return GetElementByName<IField>(Names.E_SUBREPORT_CODE_0048_059XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.TI_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.TI_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d688", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d688) =>
                   {
                       FILLER_d688.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d688.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d688.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(96, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 16);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewFillerField(199, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_EV1, (I_IMPORT_EV1) =>
           {
               I_IMPORT_EV1.CreateNewGroup(Names.I_REPORT_PARMS_ET, (I_REPORT_PARMS_ET) =>
               {
                   I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM1_0001_001MS, FieldType.String, 1);

                   IField I_PARM1_0001_001_local = I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM1_0001_001, FieldType.String, 2);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.I_PARM1_0001_001XX, FieldType.String, I_PARM1_0001_001_local, 2);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.IO_CONTROL_CD, FieldType.String, I_PARM1_0001_001_local, 2)
                       .NewCheckField(Names.LS_OPEN_FILE_PASS, "OF")
                       .NewCheckField(Names.LS_APPEND_FILE_PASS, "AF")
                       .NewCheckField(Names.LS_CLOSE_FILE_PASS, "CF")
                       .NewCheckField(Names.LS_GEN_RPT_PASS, "GR")
                       ;
                   I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM2_0001_002MS, FieldType.String, 1);

                   IField I_PARM2_0001_002_local = I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM2_0001_002, FieldType.String, 2);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.I_PARM2_0001_002XX, FieldType.String, I_PARM2_0001_002_local, 2);
                   I_REPORT_PARMS_ET.CreateNewGroupRedefine(Names.LS_RUNTIME_RPT_TYPE_CD, I_PARM2_0001_002_local, (LS_RUNTIME_RPT_TYPE_CD) =>
                   {
                       LS_RUNTIME_RPT_TYPE_CD.CreateNewField(Names.I_PARM2_1, FieldType.String, 1);
                       LS_RUNTIME_RPT_TYPE_CD.CreateNewField(Names.I_PARM2_2, FieldType.String, 1);
                   });
                   I_REPORT_PARMS_ET.CreateNewField(Names.I_SUBREPORT_CODE_0001_003MS, FieldType.String, 1);

                   IField I_SUBREPORT_CODE_0001_003_local = I_REPORT_PARMS_ET.CreateNewField(Names.I_SUBREPORT_CODE_0001_003, FieldType.String, 4);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.I_SUBREPORT_CODE_0001_003XX, FieldType.String, I_SUBREPORT_CODE_0001_003_local, 4);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_EV2, (I_IMPORT_EV2) =>
           {
               I_IMPORT_EV2.CreateNewGroup(Names.I_OCSE34_ET, (I_OCSE34_ET) =>
               {
                   I_OCSE34_ET.CreateNewField(Names.I_PERIOD_0002_004MS, FieldType.String, 1);

                   IField I_PERIOD_0002_004_local = I_OCSE34_ET.CreateNewField(Names.I_PERIOD_0002_004, FieldType.SignedNumeric, 6);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_PERIOD_0002_004XX, FieldType.String, I_PERIOD_0002_004_local, 6);
                   I_OCSE34_ET.CreateNewField(Names.I_PREVIOUS_UNDISTRIB_AMOUN05MS, FieldType.String, 1);

                   IField I_PREVIOUS_UNDISTRIB_AMOUN_005_local = I_OCSE34_ET.CreateNewField(Names.I_PREVIOUS_UNDISTRIB_AMOUN_005, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_PREVIOUS_UNDISTRIB_AMOUN05XX, FieldType.String, I_PREVIOUS_UNDISTRIB_AMOUN_005_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_TOTAL_COLLECTIONS_AMOUNT06MS, FieldType.String, 1);

                   IField I_TOTAL_COLLECTIONS_AMOUNT_006_local = I_OCSE34_ET.CreateNewField(Names.I_TOTAL_COLLECTIONS_AMOUNT_006, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_TOTAL_COLLECTIONS_AMOUNT06XX, FieldType.String, I_TOTAL_COLLECTIONS_AMOUNT_006_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_OFFSET_FEDERAL_TAXREFUND07MS, FieldType.String, 1);

                   IField I_OFFSET_FEDERAL_TAXREFUND_007_local = I_OCSE34_ET.CreateNewField(Names.I_OFFSET_FEDERAL_TAXREFUND_007, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_OFFSET_FEDERAL_TAXREFUND07XX, FieldType.String, I_OFFSET_FEDERAL_TAXREFUND_007_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_OFFSET_STATE_TAX_REFUND_08MS, FieldType.String, 1);

                   IField I_OFFSET_STATE_TAX_REFUND__008_local = I_OCSE34_ET.CreateNewField(Names.I_OFFSET_STATE_TAX_REFUND__008, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_OFFSET_STATE_TAX_REFUND_08XX, FieldType.String, I_OFFSET_STATE_TAX_REFUND__008_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_UNEMPLOYMENT_COMP_AMOUNT09MS, FieldType.String, 1);

                   IField I_UNEMPLOYMENT_COMP_AMOUNT_009_local = I_OCSE34_ET.CreateNewField(Names.I_UNEMPLOYMENT_COMP_AMOUNT_009, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_UNEMPLOYMENT_COMP_AMOUNT09XX, FieldType.String, I_UNEMPLOYMENT_COMP_AMOUNT_009_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_ADMINSTRATIVE_ENFORCE_AM10MS, FieldType.String, 1);

                   IField I_ADMINSTRATIVE_ENFORCE_AM_010_local = I_OCSE34_ET.CreateNewField(Names.I_ADMINSTRATIVE_ENFORCE_AM_010, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_ADMINSTRATIVE_ENFORCE_AM10XX, FieldType.String, I_ADMINSTRATIVE_ENFORCE_AM_010_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_INCOME_WITHHOLDING_AMOUN11MS, FieldType.String, 1);

                   IField I_INCOME_WITHHOLDING_AMOUN_011_local = I_OCSE34_ET.CreateNewField(Names.I_INCOME_WITHHOLDING_AMOUN_011, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_INCOME_WITHHOLDING_AMOUN11XX, FieldType.String, I_INCOME_WITHHOLDING_AMOUN_011_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_OTHER_STATES_AMOUNT_000912MS, FieldType.String, 1);

                   IField I_OTHER_STATES_AMOUNT_0009_012_local = I_OCSE34_ET.CreateNewField(Names.I_OTHER_STATES_AMOUNT_0009_012, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_OTHER_STATES_AMOUNT_000912XX, FieldType.String, I_OTHER_STATES_AMOUNT_0009_012_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_OTHER_SOURCES_AMOUNT_00013MS, FieldType.String, 1);

                   IField I_OTHER_SOURCES_AMOUNT_000_013_local = I_OCSE34_ET.CreateNewField(Names.I_OTHER_SOURCES_AMOUNT_000_013, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_OTHER_SOURCES_AMOUNT_00013XX, FieldType.String, I_OTHER_SOURCES_AMOUNT_000_013_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_ADJUSTMENTS_AMOUNT_000914MS, FieldType.String, 1);

                   IField I_ADJUSTMENTS_AMOUNT_0009_014_local = I_OCSE34_ET.CreateNewField(Names.I_ADJUSTMENTS_AMOUNT_0009_014, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_ADJUSTMENTS_AMOUNT_000914XX, FieldType.String, I_ADJUSTMENTS_AMOUNT_0009_014_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_NON_IVD_CASES_AMOUNT_00015MS, FieldType.String, 1);

                   IField I_NON_IVD_CASES_AMOUNT_000_015_local = I_OCSE34_ET.CreateNewField(Names.I_NON_IVD_CASES_AMOUNT_000_015, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_NON_IVD_CASES_AMOUNT_00015XX, FieldType.String, I_NON_IVD_CASES_AMOUNT_000_015_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_OTHER_STATES_CURRENT_IVA16MS, FieldType.String, 1);

                   IField I_OTHER_STATES_CURRENT_IVA_016_local = I_OCSE34_ET.CreateNewField(Names.I_OTHER_STATES_CURRENT_IVA_016, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_OTHER_STATES_CURRENT_IVA16XX, FieldType.String, I_OTHER_STATES_CURRENT_IVA_016_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_OTHER_STATES_CURRENT_IVE17MS, FieldType.String, 1);

                   IField I_OTHER_STATES_CURRENT_IVE_017_local = I_OCSE34_ET.CreateNewField(Names.I_OTHER_STATES_CURRENT_IVE_017, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_OTHER_STATES_CURRENT_IVE17XX, FieldType.String, I_OTHER_STATES_CURRENT_IVE_017_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_OTHERSTATE_FORMER_ASSIST18MS, FieldType.String, 1);

                   IField I_OTHERSTATE_FORMER_ASSIST_018_local = I_OCSE34_ET.CreateNewField(Names.I_OTHERSTATE_FORMER_ASSIST_018, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_OTHERSTATE_FORMER_ASSIST18XX, FieldType.String, I_OTHERSTATE_FORMER_ASSIST_018_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_OTHER_STATE_NEVER_ASSIST19MS, FieldType.String, 1);

                   IField I_OTHER_STATE_NEVER_ASSIST_019_local = I_OCSE34_ET.CreateNewField(Names.I_OTHER_STATE_NEVER_ASSIST_019, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_OTHER_STATE_NEVER_ASSIST19XX, FieldType.String, I_OTHER_STATE_NEVER_ASSIST_019_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_OTHER_STATE_AMT_FORWARD_20MS, FieldType.String, 1);

                   IField I_OTHER_STATE_AMT_FORWARD__020_local = I_OCSE34_ET.CreateNewField(Names.I_OTHER_STATE_AMT_FORWARD__020, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_OTHER_STATE_AMT_FORWARD_20XX, FieldType.String, I_OTHER_STATE_AMT_FORWARD__020_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_AVAIL_FOR_DISTRIBUTION_A21MS, FieldType.String, 1);

                   IField I_AVAIL_FOR_DISTRIBUTION_A_021_local = I_OCSE34_ET.CreateNewField(Names.I_AVAIL_FOR_DISTRIBUTION_A_021, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_AVAIL_FOR_DISTRIBUTION_A21XX, FieldType.String, I_AVAIL_FOR_DISTRIBUTION_A_021_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIB_ASSIST_REIMB_IVA22MS, FieldType.String, 1);

                   IField I_DISTRIB_ASSIST_REIMB_IVA_022_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIB_ASSIST_REIMB_IVA_022, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIB_ASSIST_REIMB_IVA22XX, FieldType.String, I_DISTRIB_ASSIST_REIMB_IVA_022_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIB_ASSIST_REIMB_IVE23MS, FieldType.String, 1);

                   IField I_DISTRIB_ASSIST_REIMB_IVE_023_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIB_ASSIST_REIMB_IVE_023, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIB_ASSIST_REIMB_IVE23XX, FieldType.String, I_DISTRIB_ASSIST_REIMB_IVE_023_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIB_ASSIST_REIMB_FMR24MS, FieldType.String, 1);

                   IField I_DISTRIB_ASSIST_REIMB_FMR_024_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIB_ASSIST_REIMB_FMR_024, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIB_ASSIST_REIMB_FMR24XX, FieldType.String, I_DISTRIB_ASSIST_REIMB_FMR_024_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIB_ASSIST_REIMB_AMO25MS, FieldType.String, 1);

                   IField I_DISTRIB_ASSIST_REIMB_AMO_025_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIB_ASSIST_REIMB_AMO_025, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIB_ASSIST_REIMB_AMO25XX, FieldType.String, I_DISTRIB_ASSIST_REIMB_AMO_025_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_MED_SUPPORT_26MS, FieldType.String, 1);

                   IField I_DISTRIBUTED_MED_SUPPORT__026_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_MED_SUPPORT__026, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIBUTED_MED_SUPPORT_26XX, FieldType.String, I_DISTRIBUTED_MED_SUPPORT__026_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_MED_SUPPORT_27MS, FieldType.String, 1);

                   IField I_DISTRIBUTED_MED_SUPPORT__027_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_MED_SUPPORT__027, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIBUTED_MED_SUPPORT_27XX, FieldType.String, I_DISTRIBUTED_MED_SUPPORT__027_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_MED_SUPPORT_28MS, FieldType.String, 1);

                   IField I_DISTRIBUTED_MED_SUPPORT__028_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_MED_SUPPORT__028, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIBUTED_MED_SUPPORT_28XX, FieldType.String, I_DISTRIBUTED_MED_SUPPORT__028_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_MED_SUPPORT_29MS, FieldType.String, 1);

                   IField I_DISTRIBUTED_MED_SUPPORT__029_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_MED_SUPPORT__029, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIBUTED_MED_SUPPORT_29XX, FieldType.String, I_DISTRIBUTED_MED_SUPPORT__029_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_MED_SUPPORT_30MS, FieldType.String, 1);

                   IField I_DISTRIBUTED_MED_SUPPORT__030_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_MED_SUPPORT__030, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIBUTED_MED_SUPPORT_30XX, FieldType.String, I_DISTRIBUTED_MED_SUPPORT__030_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_FAMILY_IVA_A31MS, FieldType.String, 1);

                   IField I_DISTRIBUTED_FAMILY_IVA_A_031_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_FAMILY_IVA_A_031, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIBUTED_FAMILY_IVA_A31XX, FieldType.String, I_DISTRIBUTED_FAMILY_IVA_A_031_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_FAMILY_IVE_A32MS, FieldType.String, 1);

                   IField I_DISTRIBUTED_FAMILY_IVE_A_032_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_FAMILY_IVE_A_032, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIBUTED_FAMILY_IVE_A32XX, FieldType.String, I_DISTRIBUTED_FAMILY_IVE_A_032_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_FAMILY_FORME33MS, FieldType.String, 1);

                   IField I_DISTRIBUTED_FAMILY_FORME_033_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_FAMILY_FORME_033, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIBUTED_FAMILY_FORME33XX, FieldType.String, I_DISTRIBUTED_FAMILY_FORME_033_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_FAMILY_NEVER34MS, FieldType.String, 1);

                   IField I_DISTRIBUTED_FAMILY_NEVER_034_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_FAMILY_NEVER_034, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIBUTED_FAMILY_NEVER34XX, FieldType.String, I_DISTRIBUTED_FAMILY_NEVER_034_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_FAMILY_AMOUN35MS, FieldType.String, 1);

                   IField I_DISTRIBUTED_FAMILY_AMOUN_035_local = I_OCSE34_ET.CreateNewField(Names.I_DISTRIBUTED_FAMILY_AMOUN_035, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_DISTRIBUTED_FAMILY_AMOUN35XX, FieldType.String, I_DISTRIBUTED_FAMILY_AMOUN_035_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_TOTAL_DISTRIBUTED_IVA_AM36MS, FieldType.String, 1);

                   IField I_TOTAL_DISTRIBUTED_IVA_AM_036_local = I_OCSE34_ET.CreateNewField(Names.I_TOTAL_DISTRIBUTED_IVA_AM_036, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_TOTAL_DISTRIBUTED_IVA_AM36XX, FieldType.String, I_TOTAL_DISTRIBUTED_IVA_AM_036_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_TOTAL_DISTRIBUTED_IVE_AM37MS, FieldType.String, 1);

                   IField I_TOTAL_DISTRIBUTED_IVE_AM_037_local = I_OCSE34_ET.CreateNewField(Names.I_TOTAL_DISTRIBUTED_IVE_AM_037, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_TOTAL_DISTRIBUTED_IVE_AM37XX, FieldType.String, I_TOTAL_DISTRIBUTED_IVE_AM_037_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_TOTAL_DISTRIBUTED_FORMER38MS, FieldType.String, 1);

                   IField I_TOTAL_DISTRIBUTED_FORMER_038_local = I_OCSE34_ET.CreateNewField(Names.I_TOTAL_DISTRIBUTED_FORMER_038, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_TOTAL_DISTRIBUTED_FORMER38XX, FieldType.String, I_TOTAL_DISTRIBUTED_FORMER_038_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_TOTAL_DISTRIBUTED_NEVER_39MS, FieldType.String, 1);

                   IField I_TOTAL_DISTRIBUTED_NEVER__039_local = I_OCSE34_ET.CreateNewField(Names.I_TOTAL_DISTRIBUTED_NEVER__039, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_TOTAL_DISTRIBUTED_NEVER_39XX, FieldType.String, I_TOTAL_DISTRIBUTED_NEVER__039_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_TOTAL_DISTRIBUTED_AMOUNT40MS, FieldType.String, 1);

                   IField I_TOTAL_DISTRIBUTED_AMOUNT_040_local = I_OCSE34_ET.CreateNewField(Names.I_TOTAL_DISTRIBUTED_AMOUNT_040, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_TOTAL_DISTRIBUTED_AMOUNT40XX, FieldType.String, I_TOTAL_DISTRIBUTED_AMOUNT_040_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_GROSS_UNDISTRIBUTED_AMOU41MS, FieldType.String, 1);

                   IField I_GROSS_UNDISTRIBUTED_AMOU_041_local = I_OCSE34_ET.CreateNewField(Names.I_GROSS_UNDISTRIBUTED_AMOU_041, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_GROSS_UNDISTRIBUTED_AMOU41XX, FieldType.String, I_GROSS_UNDISTRIBUTED_AMOU_041_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_UNDISTRIBUTED_AMOUNT_00342MS, FieldType.String, 1);

                   IField I_UNDISTRIBUTED_AMOUNT_003_042_local = I_OCSE34_ET.CreateNewField(Names.I_UNDISTRIBUTED_AMOUNT_003_042, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_UNDISTRIBUTED_AMOUNT_00342XX, FieldType.String, I_UNDISTRIBUTED_AMOUNT_003_042_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_NET_UNDISTRIBUTED_AMOUNT43MS, FieldType.String, 1);

                   IField I_NET_UNDISTRIBUTED_AMOUNT_043_local = I_OCSE34_ET.CreateNewField(Names.I_NET_UNDISTRIBUTED_AMOUNT_043, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_NET_UNDISTRIBUTED_AMOUNT43XX, FieldType.String, I_NET_UNDISTRIBUTED_AMOUNT_043_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_FEDERAL_SHARE_IVA_AMOUNT44MS, FieldType.String, 1);

                   IField I_FEDERAL_SHARE_IVA_AMOUNT_044_local = I_OCSE34_ET.CreateNewField(Names.I_FEDERAL_SHARE_IVA_AMOUNT_044, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_FEDERAL_SHARE_IVA_AMOUNT44XX, FieldType.String, I_FEDERAL_SHARE_IVA_AMOUNT_044_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_FEDERAL_SHARE_IVE_AMOUNT45MS, FieldType.String, 1);

                   IField I_FEDERAL_SHARE_IVE_AMOUNT_045_local = I_OCSE34_ET.CreateNewField(Names.I_FEDERAL_SHARE_IVE_AMOUNT_045, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_FEDERAL_SHARE_IVE_AMOUNT45XX, FieldType.String, I_FEDERAL_SHARE_IVE_AMOUNT_045_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_FEDERAL_SHARE_FORMER_AMO46MS, FieldType.String, 1);

                   IField I_FEDERAL_SHARE_FORMER_AMO_046_local = I_OCSE34_ET.CreateNewField(Names.I_FEDERAL_SHARE_FORMER_AMO_046, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_FEDERAL_SHARE_FORMER_AMO46XX, FieldType.String, I_FEDERAL_SHARE_FORMER_AMO_046_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_FEDERAL_SHARE_TOTAL_AMOU47MS, FieldType.String, 1);

                   IField I_FEDERAL_SHARE_TOTAL_AMOU_047_local = I_OCSE34_ET.CreateNewField(Names.I_FEDERAL_SHARE_TOTAL_AMOU_047, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_FEDERAL_SHARE_TOTAL_AMOU47XX, FieldType.String, I_FEDERAL_SHARE_TOTAL_AMOU_047_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_INCENTIVE_PAYMENT_IVA_AM48MS, FieldType.String, 1);

                   IField I_INCENTIVE_PAYMENT_IVA_AM_048_local = I_OCSE34_ET.CreateNewField(Names.I_INCENTIVE_PAYMENT_IVA_AM_048, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_INCENTIVE_PAYMENT_IVA_AM48XX, FieldType.String, I_INCENTIVE_PAYMENT_IVA_AM_048_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_INCENTIVE_PAYMENT_FORMER49MS, FieldType.String, 1);

                   IField I_INCENTIVE_PAYMENT_FORMER_049_local = I_OCSE34_ET.CreateNewField(Names.I_INCENTIVE_PAYMENT_FORMER_049, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_INCENTIVE_PAYMENT_FORMER49XX, FieldType.String, I_INCENTIVE_PAYMENT_FORMER_049_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_INCENTIVE_PAYMENT_AMOUNT50MS, FieldType.String, 1);

                   IField I_INCENTIVE_PAYMENT_AMOUNT_050_local = I_OCSE34_ET.CreateNewField(Names.I_INCENTIVE_PAYMENT_AMOUNT_050, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_INCENTIVE_PAYMENT_AMOUNT50XX, FieldType.String, I_INCENTIVE_PAYMENT_AMOUNT_050_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_NET_FEDERAL_SHARE_IVA_AM51MS, FieldType.String, 1);

                   IField I_NET_FEDERAL_SHARE_IVA_AM_051_local = I_OCSE34_ET.CreateNewField(Names.I_NET_FEDERAL_SHARE_IVA_AM_051, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_NET_FEDERAL_SHARE_IVA_AM51XX, FieldType.String, I_NET_FEDERAL_SHARE_IVA_AM_051_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_NET_FEDERAL_SHARE_FORMER52MS, FieldType.String, 1);

                   IField I_NET_FEDERAL_SHARE_FORMER_052_local = I_OCSE34_ET.CreateNewField(Names.I_NET_FEDERAL_SHARE_FORMER_052, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_NET_FEDERAL_SHARE_FORMER52XX, FieldType.String, I_NET_FEDERAL_SHARE_FORMER_052_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_NET_FEDERAL_SHARE_AMOUNT53MS, FieldType.String, 1);

                   IField I_NET_FEDERAL_SHARE_AMOUNT_053_local = I_OCSE34_ET.CreateNewField(Names.I_NET_FEDERAL_SHARE_AMOUNT_053, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_NET_FEDERAL_SHARE_AMOUNT53XX, FieldType.String, I_NET_FEDERAL_SHARE_AMOUNT_053_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_FEES_RETAIN_OTHER_STATES54MS, FieldType.String, 1);

                   IField I_FEES_RETAIN_OTHER_STATES_054_local = I_OCSE34_ET.CreateNewField(Names.I_FEES_RETAIN_OTHER_STATES_054, FieldType.SignedNumeric, 9);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_FEES_RETAIN_OTHER_STATES54XX, FieldType.String, I_FEES_RETAIN_OTHER_STATES_054_local, 9);
                   I_OCSE34_ET.CreateNewField(Names.I_CREATED_TIMESTAMP_0047_055MS, FieldType.String, 1);

                   IField I_CREATED_TIMESTAMP_0047_055_local = I_OCSE34_ET.CreateNewField(Names.I_CREATED_TIMESTAMP_0047_055, FieldType.String, 20);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_CREATED_TIMESTAMP_0047_055XX, FieldType.String, I_CREATED_TIMESTAMP_0047_055_local, 20);
                   I_OCSE34_ET.CreateNewField(Names.I_CREATED_BY_0047_056MS, FieldType.String, 1);

                   IField I_CREATED_BY_0047_056_local = I_OCSE34_ET.CreateNewField(Names.I_CREATED_BY_0047_056, FieldType.String, 8);
                   I_OCSE34_ET.CreateNewFieldRedefine(Names.I_CREATED_BY_0047_056XX, FieldType.String, I_CREATED_BY_0047_056_local, 8);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV3, (E_EXPORT_EV3) =>
           {
               E_EXPORT_EV3.CreateNewGroup(Names.E_REPORT_PARMS_ET, (E_REPORT_PARMS_ET) =>
               {
                   E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM1_0048_057MS, FieldType.String, 1);

                   IField E_PARM1_0048_057_local = E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM1_0048_057, FieldType.String, 2);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.E_PARM1_0048_057XX, FieldType.String, E_PARM1_0048_057_local, 2);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.LS_RETURN_CD, FieldType.String, E_PARM1_0048_057_local, 2);
                   E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM2_0048_058MS, FieldType.String, 1);

                   IField E_PARM2_0048_058_local = E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM2_0048_058, FieldType.String, 2);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.E_PARM2_0048_058XX, FieldType.String, E_PARM2_0048_058_local, 2);
                   E_REPORT_PARMS_ET.CreateNewField(Names.E_SUBREPORT_CODE_0048_059MS, FieldType.String, 1);

                   IField E_SUBREPORT_CODE_0048_059_local = E_REPORT_PARMS_ET.CreateNewField(Names.E_SUBREPORT_CODE_0048_059, FieldType.String, 4);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.E_SUBREPORT_CODE_0048_059XX, FieldType.String, E_SUBREPORT_CODE_0048_059_local, 4);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(TI_RUNTIME_PARM1, args, 0);
            SetPassedParm(TI_RUNTIME_PARM2, args, 1);
            SetPassedParm(GLOBDATA, args, 2);
            SetPassedParm(I_IMPORT_EV1, args, 3);
            SetPassedParm(I_IMPORT_EV2, args, 4);
            SetPassedParm(E_EXPORT_EV3, args, 5);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(TI_RUNTIME_PARM1, args, 0);
            SetReturnParm(TI_RUNTIME_PARM2, args, 1);
            SetReturnParm(GLOBDATA, args, 2);
            SetReturnParm(I_IMPORT_EV1, args, 3);
            SetReturnParm(I_IMPORT_EV2, args, 4);
            SetReturnParm(E_EXPORT_EV3, args, 5);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXF700 : EABBase
    {

        #region Public Constructors
        public SWEXF700()
            : base()
        {
            this.ProgramName.SetValue("SWEXF700");

            WS = new SWEXF700_ws();
            FD = new SWEXF700_fd(WS);
            LS = new SWEXF700_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXF700_ws WS;

        //==== File Data Class ========================================
        private SWEXF700_fd FD;

        //==== Linkage Section Data Class ========================================
        private SWEXF700_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING TI-RUNTIME-PARM1 , TI-RUNTIME-PARM2 , GLOBDATA , I-IMPORT-EV1 , I-IMPORT-EV2 , E-EXPORT-EV3.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_LINE(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_LINE
        /// </summary>
        private void M_MAIN_LINE(string returnMethod = "")
        {
            M_INI_IMPORT_EXPORT_FLDS("M_INI_IMPORT_EXPORT_FLDS_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM INI-IMPORT-EXPORT-FLDS THRU INI-IMPORT-EXPORT-FLDS-EXIT.
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                if ((LS.I_SUBREPORT_CODE_0001_003.IsEqualTo("SECC"))
             || (LS.I_SUBREPORT_CODE_0001_003.IsEqualTo("MAIN")))  //COBOL==> IF I-SUBREPORT-CODE-0001-003 = 'SECC' OR I-SUBREPORT-CODE-0001-003 = 'MAIN'
                {
                    LS.LS_RETURN_CD.SetValueWithSpaces();                                                               //COBOL==> MOVE SPACES TO LS-RETURN-CD
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    LS.LS_RETURN_CD.SetValue("IS");                                                                     //COBOL==> MOVE 'IS' TO LS-RETURN-CD
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                if (LS.LS_OPEN_FILE_PASS.Value)                                                                     //COBOL==> IF LS-OPEN-FILE-PASS
                {
                    FD.REPORT_FILE.OpenFile(FileAccessMode.Write);                                                      //COBOL==> OPEN OUTPUT REPORT-FILE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    FD.REPORT_FILE.OpenFile(FileAccessMode.WriteExtend);                                                //COBOL==> OPEN EXTEND REPORT-FILE
                }                                                                                                   //COBOL==> END-IF
                if ((LS.I_PARM2_1.IsEqualTo("Y"))
             || (LS.I_PARM2_2.IsEqualTo("Y")))                 //COBOL==> IF I-PARM2-1 = 'Y' OR I-PARM2-2 = 'Y'
                {
                    WS.WS_MAIN_KEEP_DTL_TOGETHER_FG.SetValue("Y");                                                      //COBOL==> MOVE 'Y' TO WS-MAIN-KEEP-DTL-TOGETHER-FG
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if ((LS.I_PARM2_1.IsEqualTo("N"))
             || (LS.I_PARM2_2.IsEqualTo("N")))                 //COBOL==> IF I-PARM2-1 = 'N' OR I-PARM2-2 = 'N'
                    {
                        WS.WS_MAIN_KEEP_DTL_TOGETHER_FG.SetValue("N");                                                      //COBOL==> MOVE 'N' TO WS-MAIN-KEEP-DTL-TOGETHER-FG
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((LS.I_PARM2_1.IsEqualTo("0"))
             || (LS.I_PARM2_2.IsEqualTo("0")))                 //COBOL==> IF I-PARM2-1 = '0' OR I-PARM2-2 = '0'
                        {
                            WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                            WS.WS_MAIN_PAGE_SUPPRESS.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-MAIN-PAGE-SUPPRESS
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (!(LS.LS_RUNTIME_RPT_TYPE_CD.IsSpaces()))                                                        //COBOL==> IF LS-RUNTIME-RPT-TYPE-CD NOT = SPACES
                            {
                                LS.LS_RETURN_CD.SetValue("RI");                                                                     //COBOL==> MOVE 'RI' TO LS-RETURN-CD
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_CUR_SUBRPT_CODE.SetValue(LS.I_SUBREPORT_CODE_0001_003);                                       //COBOL==> MOVE I-SUBREPORT-CODE-0001-003 TO WS-CUR-SUBRPT-CODE
                M_GET_SYSTEM_DATE_N_TIME("M_GET_SYSTEM_DATE_N_TIME_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM GET-SYSTEM-DATE-N-TIME THRU GET-SYSTEM-DATE-N-TIME-EXIT
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (LS.LS_CLOSE_FILE_PASS.Value)                                                                    //COBOL==> IF LS-CLOSE-FILE-PASS
                {
                    if ((LS.I_PARM2_1.IsEqualTo("0"))
             || (LS.I_PARM2_2.IsEqualTo("0")))                 //COBOL==> IF I-PARM2-1 = '0' OR I-PARM2-2 = '0'
                    {
                        WS.WS_MAIN_PAGE_SUPPRESS_AFTER.SetValue("Y");                                                       //COBOL==> MOVE 'Y' TO WS-MAIN-PAGE-SUPPRESS-AFTER
                    }                                                                                                   //COBOL==> END-IF
                                                                                                                        //COMMENT: **********************************************************
                                                                                                                        //COMMENT:  FOR THE LAST SUBREPORT CALLED (NOT INCLUDING THE MAIN REPORT)
                                                                                                                        //COMMENT:  PRINT THE FINAL CONTROL/SUBREPORT/PAGE FOOTER
                                                                                                                        //COMMENT: **********************************************************
                                                                                                                        //COMMENT: **********************************************************
                                                                                                                        //COMMENT:  PRINT THE MAIN REPORT's control footer and report footer
                                                                                                                        //COMMENT: **********************************************************
                                                                                                                        //COMMENT: **********************************************************
                                                                                                                        //COMMENT:  PRINT THE APPROPRIATE FINAL PAGE FOOTER
                                                                                                                        //COMMENT: **********************************************************
                    FD.REPORT_FILE.CloseFile();                                                                         //COBOL==> CLOSE REPORT-FILE
                    WS.WS_MAIN_FIRST_TIME_FLAG.SetValue("Y");                                                           //COBOL==> MOVE 'Y' TO WS-MAIN-FIRST-TIME-FLAG
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    WS.WS_CONTROL_BRK_FLAG.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-CONTROL-BRK-FLAG
                    WS.WS_MAIN_CNTL_FTR_FLAG.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-MAIN-CNTL-FTR-FLAG
                    WS.WS_MAIN_GR_COUNTER.SetComputeValue(0);                                                           //COBOL==> COMPUTE WS-MAIN-GR-COUNTER = 0
                    WS.WS_LINE_COUNT.SetComputeValue(0);                                                                //COBOL==> COMPUTE WS-LINE-COUNT = 0
                    WS.WS_PG_NUMBER.SetComputeValue(0);                                                                 //COBOL==> COMPUTE WS-PG-NUMBER = 0
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
                    {
                        if (((LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("S"))
             || (LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("D")))
             || (LS.LS_RUNTIME_RPT_TYPE_CD.IsSpaces()))  //COBOL==> IF LS-RUNTIME-RPT-TYPE-CD = 'S' OR 'D' OR SPACES
                        {
                            WS.WS_CUR_SUBRPT_CODE.SetValue(LS.I_SUBREPORT_CODE_0001_003);                                       //COBOL==> MOVE I-SUBREPORT-CODE-0001-003 TO WS-CUR-SUBRPT-CODE
                            if ((!(WS.WS_CUR_SUBRPT_CODE.IsEqualTo(WS.WS_PREV_SUBRPT_CODE)))
             && (!(WS.WS_PREV_SUBRPT_CODE.IsSpaces())))  //COBOL==> IF WS-CUR-SUBRPT-CODE NOT = WS-PREV-SUBRPT-CODE AND WS-PREV-SUBRPT-CODE NOT = SPACES
                            {
                                if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("MAIN"))                                                        //COBOL==> IF WS-CUR-SUBRPT-CODE = 'MAIN'
                                {
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("SECC"))                                                       //COBOL==> IF WS-PREV-SUBRPT-CODE = 'SECC'
                                    {
                                        M_CHECK_FOR_SECC_NEW_PAGE("M_CHECK_FOR_SECC_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM CHECK-FOR-SECC-NEW-PAGE THRU CHECK-FOR-SECC-NEW-PAGE-EXIT
                                        WS.WS_SECC_FIRST_TIME_FLAG.SetValue("Y");                                                           //COBOL==> MOVE 'Y' TO WS-SECC-FIRST-TIME-FLAG
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                                if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("SECC"))                                                        //COBOL==> IF WS-CUR-SUBRPT-CODE = 'SECC'
                                {
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("MAIN"))                                                       //COBOL==> IF WS-PREV-SUBRPT-CODE = 'MAIN'
                                    {
                                        WS.WS_MAIN_FIRST_TIME_FLAG.SetValue("N");                                                           //COBOL==> MOVE 'N' TO WS-MAIN-FIRST-TIME-FLAG
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                            if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("SECC"))                                                        //COBOL==> IF WS-CUR-SUBRPT-CODE = 'SECC'
                            {
                                WS.WS_SECC_GR_COUNTER.Add(1);                                                                       //COBOL==> ADD 1 TO WS-SECC-GR-COUNTER
                                if (WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_SECC_PAGE_DTL_LINES.SetValue(28);                                                             //COBOL==> MOVE 28 TO WS-SECC-PAGE-DTL-LINES
                                                                                                                                        //COMMENT:                     THIS STATEMENT IS HERE TO ENSURE PROPER CODE
                                                                                                                                        //COMMENT:                     GENERATION IN ALL CASES
                                    WS.WS_SECC_FIRST_TIME_FLAG.SetValue("Y");                                                           //COBOL==> MOVE 'Y' TO WS-SECC-FIRST-TIME-FLAG
                                    if ((WS.WS_PREV_SUBRPT_CODE.IsSpaces())
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))      //COBOL==> IF WS-PREV-SUBRPT-CODE = SPACES OR WS-PG-BRK-FLAG = 'Y'
                                    {
                                        M_PRINT_SECC_PG_HDR("M_PRINT_SECC_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-SECC-PG-HDR THRU PRINT-SECC-PG-HDR-EXIT
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                                M_SECC_MAINLINE_DTL("M_SECC_MAINLINE_DTL_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM SECC-MAINLINE-DTL THRU SECC-MAINLINE-DTL-EXIT
                                if (WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_SECC_FIRST_TIME_FLAG.SetValue("N");                                                           //COBOL==> MOVE 'N' TO WS-SECC-FIRST-TIME-FLAG
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                            if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("MAIN"))                                                        //COBOL==> IF WS-CUR-SUBRPT-CODE = 'MAIN'
                            {
                                WS.WS_MAIN_GR_COUNTER.Add(1);                                                                       //COBOL==> ADD 1 TO WS-MAIN-GR-COUNTER
                                if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_MAIN_PAGE_DTL_LINES.SetValue(46);                                                             //COBOL==> MOVE 46 TO WS-MAIN-PAGE-DTL-LINES
                                                                                                                                        //COMMENT:                     THIS STATEMENT IS HERE TO ENSURE PROPER CODE
                                                                                                                                        //COMMENT:                     GENERATION IN ALL CASES
                                    WS.WS_MAIN_FIRST_TIME_FLAG.SetValue("Y");                                                           //COBOL==> MOVE 'Y' TO WS-MAIN-FIRST-TIME-FLAG
                                    if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                                    {
                                        M_PRINT_MAIN_PG_HDR("M_PRINT_MAIN_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-HDR THRU PRINT-MAIN-PG-HDR-EXIT
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                                M_MAIN_MAINLINE_DTL("M_MAIN_MAINLINE_DTL_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM MAIN-MAINLINE-DTL THRU MAIN-MAINLINE-DTL-EXIT
                                if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_MAIN_FIRST_TIME_FLAG.SetValue("N");                                                           //COBOL==> MOVE 'N' TO WS-MAIN-FIRST-TIME-FLAG
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                            WS.WS_PREV_SUBRPT_CODE.SetValue(WS.WS_CUR_SUBRPT_CODE);                                             //COBOL==> MOVE WS-CUR-SUBRPT-CODE TO WS-PREV-SUBRPT-CODE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            LS.LS_RETURN_CD.SetValue("RI");                                                                     //COBOL==> MOVE 'RI' TO LS-RETURN-CD
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        LS.LS_RETURN_CD.SetValue("II");                                                                     //COBOL==> MOVE 'II' TO LS-RETURN-CD
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF.
            }
            WS.PREV_IO_CONTROL_CD.SetValue(LS.IO_CONTROL_CD);                                                   //COBOL==> MOVE IO-CONTROL-CD TO PREV-IO-CONTROL-CD.
            if (returnMethod != "" && returnMethod != "M_MAIN_LINE") { M_MAINLINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAINLINE_EXIT
        /// </summary>
        private void M_MAINLINE_EXIT(string returnMethod = "")
        {
            LS.E_PARM2_0048_058.SetValue(WS.WS_FILE_STATUS);                                                    //COBOL==> MOVE WS-FILE-STATUS TO E-PARM2-0048-058.
            if (!(WS.WS_FILE_STATUS.IsEqualTo("00")))                                                           //COBOL==> IF WS-FILE-STATUS IS NOT EQUAL TO '00'
            {
                if (LS.LS_CLOSE_FILE_PASS.Value)                                                                    //COBOL==> IF LS-CLOSE-FILE-PASS
                {
                    LS.LS_RETURN_CD.SetValue("EC");                                                                     //COBOL==> MOVE 'EC' TO LS-RETURN-CD
                }                                                                                                   //COBOL==> END-IF
                if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
                {
                    LS.LS_RETURN_CD.SetValue("ER");                                                                     //COBOL==> MOVE 'ER' TO LS-RETURN-CD
                }                                                                                                   //COBOL==> END-IF
                if (LS.LS_OPEN_FILE_PASS.Value)                                                                     //COBOL==> IF LS-OPEN-FILE-PASS
                {
                    LS.LS_RETURN_CD.SetValue("EO");                                                                     //COBOL==> MOVE 'EO' TO LS-RETURN-CD
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_EV1.SetValue(LS.I_IMPORT_EV1);                                                          //COBOL==> MOVE I-IMPORT-EV1 TO P-IMPORT-EV1.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_EV2.SetValue(LS.I_IMPORT_EV2);                                                          //COBOL==> MOVE I-IMPORT-EV2 TO P-IMPORT-EV2.
            }
            return;                                                                                             //COBOL==> EXIT PROGRAM.
        }
        /// <summary>
        /// Method M_SECC_MAINLINE_DTL
        /// </summary>
        private void M_SECC_MAINLINE_DTL(string returnMethod = "")
        {
            if (((WS.WS_SECC_DTL_RPT_REQUESTED.Value)
             && (!(LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("S"))))
             || ((WS.WS_SECC_SUMMARY_RPT_REQUESTED.Value)
             && (LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("D"))))  //COBOL==> IF ( WS-SECC-DTL-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD NOT = 'S' ) OR ( WS-SECC-SUMMARY-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD = 'D' )
            {
                WS.WS_SECC_SECTION_PROCESSING_IND.SetValue("B  ");                                                  //COBOL==> MOVE 'B  ' TO WS-SECC-SECTION-PROCESSING-IND
                WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.SECC_DTL_LINE_SUPPRSS_BLANK);                                  //COBOL==> MOVE SECC-DTL-LINE-SUPPRSS-BLANK TO WS-SUPPRSS-BLANK-LINE
                M_PRINT_SECC_DTL_LINE_0("M_PRINT_SECC_DTL_LINE_0_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-SECC-DTL-LINE-0 THRU PRINT-SECC-DTL-LINE-0-EXIT
                M_PRINT_SECC_DTL_LINE_1("M_PRINT_SECC_DTL_LINE_1_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-SECC-DTL-LINE-1 THRU PRINT-SECC-DTL-LINE-1-EXIT
                M_PRINT_SECC_DTL_LINE_2("M_PRINT_SECC_DTL_LINE_2_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-SECC-DTL-LINE-2 THRU PRINT-SECC-DTL-LINE-2-EXIT
                M_PRINT_SECC_DTL_LINE_3("M_PRINT_SECC_DTL_LINE_3_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-SECC-DTL-LINE-3 THRU PRINT-SECC-DTL-LINE-3-EXIT
                M_PRINT_SECC_DTL_LINE_4("M_PRINT_SECC_DTL_LINE_4_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-SECC-DTL-LINE-4 THRU PRINT-SECC-DTL-LINE-4-EXIT
                M_PRINT_SECC_DTL_LINE_5("M_PRINT_SECC_DTL_LINE_5_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-SECC-DTL-LINE-5 THRU PRINT-SECC-DTL-LINE-5-EXIT
                M_PRINT_SECC_DTL_LINE_6("M_PRINT_SECC_DTL_LINE_6_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-SECC-DTL-LINE-6 THRU PRINT-SECC-DTL-LINE-6-EXIT
                M_PRINT_SECC_DTL_LINE_7("M_PRINT_SECC_DTL_LINE_7_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-SECC-DTL-LINE-7 THRU PRINT-SECC-DTL-LINE-7-EXIT
                M_PRINT_SECC_DTL_LINE_8("M_PRINT_SECC_DTL_LINE_8_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-SECC-DTL-LINE-8 THRU PRINT-SECC-DTL-LINE-8-EXIT
                M_PRINT_SECC_DTL_LINE_9("M_PRINT_SECC_DTL_LINE_9_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-SECC-DTL-LINE-9 THRU PRINT-SECC-DTL-LINE-9-EXIT
                M_PRINT_SECC_DTL_LINE_10("M_PRINT_SECC_DTL_LINE_10_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-10 THRU PRINT-SECC-DTL-LINE-10-EXIT
                M_PRINT_SECC_DTL_LINE_11("M_PRINT_SECC_DTL_LINE_11_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-11 THRU PRINT-SECC-DTL-LINE-11-EXIT
                M_PRINT_SECC_DTL_LINE_12("M_PRINT_SECC_DTL_LINE_12_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-12 THRU PRINT-SECC-DTL-LINE-12-EXIT
                M_PRINT_SECC_DTL_LINE_13("M_PRINT_SECC_DTL_LINE_13_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-13 THRU PRINT-SECC-DTL-LINE-13-EXIT
                M_PRINT_SECC_DTL_LINE_14("M_PRINT_SECC_DTL_LINE_14_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-14 THRU PRINT-SECC-DTL-LINE-14-EXIT
                M_PRINT_SECC_DTL_LINE_15("M_PRINT_SECC_DTL_LINE_15_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-15 THRU PRINT-SECC-DTL-LINE-15-EXIT
                M_PRINT_SECC_DTL_LINE_16("M_PRINT_SECC_DTL_LINE_16_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-16 THRU PRINT-SECC-DTL-LINE-16-EXIT
                M_PRINT_SECC_DTL_LINE_17("M_PRINT_SECC_DTL_LINE_17_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-17 THRU PRINT-SECC-DTL-LINE-17-EXIT
                M_PRINT_SECC_DTL_LINE_18("M_PRINT_SECC_DTL_LINE_18_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-18 THRU PRINT-SECC-DTL-LINE-18-EXIT
                M_PRINT_SECC_DTL_LINE_19("M_PRINT_SECC_DTL_LINE_19_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-19 THRU PRINT-SECC-DTL-LINE-19-EXIT
                M_PRINT_SECC_DTL_LINE_20("M_PRINT_SECC_DTL_LINE_20_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-20 THRU PRINT-SECC-DTL-LINE-20-EXIT
                M_PRINT_SECC_DTL_LINE_21("M_PRINT_SECC_DTL_LINE_21_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-21 THRU PRINT-SECC-DTL-LINE-21-EXIT
                M_PRINT_SECC_DTL_LINE_22("M_PRINT_SECC_DTL_LINE_22_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-22 THRU PRINT-SECC-DTL-LINE-22-EXIT
                M_PRINT_SECC_DTL_LINE_23("M_PRINT_SECC_DTL_LINE_23_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-23 THRU PRINT-SECC-DTL-LINE-23-EXIT
                M_PRINT_SECC_DTL_LINE_24("M_PRINT_SECC_DTL_LINE_24_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-24 THRU PRINT-SECC-DTL-LINE-24-EXIT
                M_PRINT_SECC_DTL_LINE_25("M_PRINT_SECC_DTL_LINE_25_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-25 THRU PRINT-SECC-DTL-LINE-25-EXIT
                M_PRINT_SECC_DTL_LINE_26("M_PRINT_SECC_DTL_LINE_26_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-26 THRU PRINT-SECC-DTL-LINE-26-EXIT
                M_PRINT_SECC_DTL_LINE_27("M_PRINT_SECC_DTL_LINE_27_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-SECC-DTL-LINE-27 THRU PRINT-SECC-DTL-LINE-27-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_SECC_SECTION_PROCESSING_IND.SetValueWithSpaces();                                             //COBOL==> MOVE SPACES TO WS-SECC-SECTION-PROCESSING-IND.
            if (WS.SECC_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                   //COBOL==> IF SECC-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_SECC_MAINLINE_DTL") { M_SECC_MAINLINE_DTL_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SECC_MAINLINE_DTL_EXIT
        /// </summary>
        private void M_SECC_MAINLINE_DTL_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_SECC_MAINLINE_DTL_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_SECC_MAINLINE_DTL_EXIT") { M_PRINT_SECC_RPT_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_RPT_LINE
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  THIS SECTION PRINTS ALL SECC REPORT LINES.
        ///COMMENT:  IT IS CALLED FOR EACH REPORT LINE. IT CONTAINS:
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE PRINTING A LINE
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE DETAIL LINE PAGING
        ///COMMENT:  - ALSO CALL PRINT-A-SECC-LINE
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_SECC_RPT_LINE(string returnMethod = "")
        {
            M_CHECK_FOR_SECC_NEW_PAGE("M_CHECK_FOR_SECC_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM CHECK-FOR-SECC-NEW-PAGE THRU CHECK-FOR-SECC-NEW-PAGE-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                WS.WS_TEMP_PRINT_LINE.SetValue(WS.WS_PRINT_LINE);                                                   //COBOL==> MOVE WS-PRINT-LINE TO WS-TEMP-PRINT-LINE
                WS.WS_TEMP_PRINT_LINE_SPACING.SetValue(WS.WS_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-PRINT-LINE-SPACING TO WS-TEMP-PRINT-LINE-SPACING
                if (WS.SECC_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF SECC-PAGE-HDR-PRINT-FLAG = 'Y'
                {
                    WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                    if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                    {
                        if (WS.SECC_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF SECC-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_SECC_PG_HDR("M_PRINT_SECC_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-SECC-PG-HDR THRU PRINT-SECC-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
                    WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                         //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-TEMP-SAVE-PRINT-LINE
                    WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_TEMP_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE-SPACING TO WS-PRINT-LINE-SPACING
                    M_PRINT_A_SECC_LINE("M_PRINT_A_SECC_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-SECC-LINE THRU PRINT-A-SECC-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_PRINT_A_SECC_LINEONNEWPG("M_PRINT_A_SECC_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-SECC-LINEONNEWPG THRU PRINT-A-SECC-LINEONNEWPG-EXIT
                }                                                                                                   //COBOL==> END-IF
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((WS.WS_SECC_PRINT_DUPLICATES.Value)
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))        //COBOL==> IF WS-SECC-PRINT-DUPLICATES AND WS-NOT-IN-CONTROL-BRK
                {
                    WS.WS_SECC_BODY_SUPPRESS_LINES.SetValue(WS.WS_SECC_BODY_SUPPRESS_LINES.AsInt() - 1);                //COBOL==> SUBTRACT 1 FROM WS-SECC-BODY-SUPPRESS-LINES
                    if (WS.WS_SECC_BODY_SUPPRESS_LINES.IsEqualTo(0))                                                    //COBOL==> IF WS-SECC-BODY-SUPPRESS-LINES = 0
                    {
                        WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    if (WS.SECC_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF SECC-PAGE-HDR-PRINT-FLAG = 'Y'
                    {
                        WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                        if (WS.SECC_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF SECC-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_SECC_PG_HDR("M_PRINT_SECC_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-SECC-PG-HDR THRU PRINT-SECC-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                        WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                        M_PRINT_A_SECC_LINE("M_PRINT_A_SECC_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-SECC-LINE THRU PRINT-A-SECC-LINE-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_PRINT_A_SECC_LINE("M_PRINT_A_SECC_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-SECC-LINE THRU PRINT-A-SECC-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_RPT_LINE") { M_PRINT_SECC_RPT_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_RPT_LINE_EXIT
        /// </summary>
        private void M_PRINT_SECC_RPT_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_RPT_LINE_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_RPT_LINE_EXIT") { M_PRINT_A_SECC_LINEONNEWPG(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_SECC_LINEONNEWPG
        /// </summary>
        private void M_PRINT_A_SECC_LINEONNEWPG(string returnMethod = "")
        {
            if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
            {
                if (((WS.WS_SECC_CURRENTLY_WRAPPING.IsEqualTo("N"))
             && (WS.WS_SECC_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (WS.WS_CONTROL_BRK_FLAG.IsEqualTo("N")))  //COBOL==> IF WS-SECC-CURRENTLY-WRAPPING = 'N' AND WS-SECC-CUR-PRINTING-PAGE-HDR = 'N' AND WS-CONTROL-BRK-FLAG = 'N'
                {
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
                }                                                                                                   //COBOL==> END-IF
                WS.WS_SECC_PAGE_DTL_LINES.SetValue(28);                                                             //COBOL==> MOVE 28 TO WS-SECC-PAGE-DTL-LINES
                if (((WS.WS_SECC_BODY_IS_PROCESSED.Value)
             || (WS.WS_SECC_RPT_HDR_IS_PROCESSED.Value))
             || (WS.WS_SECC_RPT_FTR_IS_PROCESSED.Value))  //COBOL==> IF WS-SECC-BODY-IS-PROCESSED OR WS-SECC-RPT-HDR-IS-PROCESSED OR WS-SECC-RPT-FTR-IS-PROCESSED
                {
                    if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                    {
                        WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                        WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((!(WS.WS_SECC_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_SECC_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-SECC-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-SECC-RPT-FTR-IS-PROCESSED )
                        {
                            WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(1))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 1
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_SPACE_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-SPACE-RECORD AFTER ADVANCING PAGE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    M_PRINT_A_SECC_LINE("M_PRINT_A_SECC_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-SECC-LINE THRU PRINT-A-SECC-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                    WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    M_PRINT_A_SECC_LINE("M_PRINT_A_SECC_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-SECC-LINE THRU PRINT-A-SECC-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_SECC_LINEONNEWPG") { M_PRINT_A_SECC_LINEONNEWPG_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_SECC_LINEONNEWPG_EXIT
        /// </summary>
        private void M_PRINT_A_SECC_LINEONNEWPG_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_SECC_LINEONNEWPG_EXIT") { return; }                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_SECC_LINEONNEWPG_EXIT") { M_PRINT_A_SECC_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_SECC_LINE
        /// </summary>
        private void M_PRINT_A_SECC_LINE(string returnMethod = "")
        {
            if (((((((WS.WS_SECC_PAGE_DTL_LINES.IsGreaterThan(0))
             && (WS.WS_PREV_SUBRPT_CODE.IsEqualTo(WS.WS_CUR_SUBRPT_CODE)))
             && (!(WS.WS_SECC_CURRENTLY_WRAPPING.IsEqualTo("Y"))))
             && (WS.WS_SECC_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (!(WS.WS_SECC_RPT_HDR_IS_PROCESSED.Value)))
             && (!(WS.WS_SECC_PG_HDR_IS_PROCESSED.Value)))
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))  //COBOL==> IF WS-SECC-PAGE-DTL-LINES > 0 AND WS-PREV-SUBRPT-CODE = WS-CUR-SUBRPT-CODE AND WS-SECC-CURRENTLY-WRAPPING NOT = 'Y' AND WS-SECC-CUR-PRINTING-PAGE-HDR = 'N' AND NOT WS-SECC-RPT-HDR-IS-PROCESSED AND NOT WS-SECC-PG-HDR-IS-PROCESSED AND WS-NOT-IN-CONTROL-BRK
            {
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(0))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 0
            {
                if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                {
                    if (WS.WS_VERY_FIRST_WRITE.IsEqualTo("Y"))                                                          //COBOL==> IF WS-VERY-FIRST-WRITE = 'Y'
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                        WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.LINEBREAK, 0, WS.WS_PRINT_LINE_SPACING.AsInt());  //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING WS-PRINT-LINE-SPACING LINES
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_LINE_COUNT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-LINE-COUNT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_SECC_LINE") { M_PRINT_A_SECC_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_SECC_LINE_EXIT
        /// </summary>
        private void M_PRINT_A_SECC_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_SECC_LINE_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_SECC_LINE_EXIT") { M_CHECK_FOR_SECC_NEW_PAGE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_SECC_NEW_PAGE
        /// </summary>
        private void M_CHECK_FOR_SECC_NEW_PAGE(string returnMethod = "")
        {
            WS.WS_TEMP_LINE_QT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-TEMP-LINE-QT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
            if (WS.WS_TEMP_LINE_QT.IsGreaterThan(WS.WS_PG_LENGTH))                                              //COBOL==> IF WS-TEMP-LINE-QT > WS-PG-LENGTH
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_SECC_NEW_PAGE") { M_CHECK_FOR_SECC_NEW_PAGE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_SECC_NEW_PAGE_EXIT
        /// </summary>
        private void M_CHECK_FOR_SECC_NEW_PAGE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_CHECK_FOR_SECC_NEW_PAGE_EXIT") { return; }                                   //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_SECC_NEW_PAGE_EXIT") { M_SECC_CALC_4_PRINT_BOTTM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SECC_CALC_4_PRINT_BOTTM
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  FOR THE SECC REPORT
        ///COMMENT:  THIS PARAGRAPH CALCULATES THE NUMBER OF LINES
        ///COMMENT:  TO ADVANCE FOR A SECTION WHEN THE SECTION IS
        ///COMMENT:  SPECIFIED TO HAVE PRINT AT BOTTOM
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_SECC_CALC_4_PRINT_BOTTM(string returnMethod = "")
        {
            if (WS.WS_SAVE_PRINT_ATBOTTM.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SAVE-PRINT-ATBOTTM = 'Y'
            {
                WS.WS_SAVE_PRINT_ATBOTTM.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SAVE-PRINT-ATBOTTM
                WS.WS_TEMP_LINE_QT.SetValueWithZeroes();                                                            //COBOL==> MOVE 0 TO WS-TEMP-LINE-QT
                if (WS.WS_PG_LENGTH.IsLessThan(((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_TEMP_LINE_QT.AsDecimal()) + WS.WS_CUR_SECTION_LINE_QT.AsDecimal())))  //COBOL==> IF WS-PG-LENGTH < ( WS-LINE-COUNT + WS-TEMP-LINE-QT + WS-CUR-SECTION-LINE-QT )
                {
                    if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue((((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_COUNT.AsDecimal()) - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-COUNT - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_SECC_CALC_4_PRINT_BOTTM") { M_SECC_CALC_4_PRINT_BOTTM_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SECC_CALC_4_PRINT_BOTTM_EXIT
        /// </summary>
        private void M_SECC_CALC_4_PRINT_BOTTM_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_SECC_CALC_4_PRINT_BOTTM_EXIT") { return; }                                   //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_SECC_CALC_4_PRINT_BOTTM_EXIT") { M_SECC_UPDT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SECC_UPDT_PG_NBR_FLDS
        /// </summary>
        private void M_SECC_UPDT_PG_NBR_FLDS(string returnMethod = "")
        {
            WS.SECC_PAGE_HDR_0_P_OBJ4.SetValue(WS.WS_PG_NUMBER);                                                //COBOL==> MOVE WS-PG-NUMBER TO SECC-PAGE-HDR-0-P-OBJ4.
            if (returnMethod != "" && returnMethod != "M_SECC_UPDT_PG_NBR_FLDS") { M_SECC_UPDT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SECC_UPDT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_SECC_UPDT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_SECC_UPDT_PG_NBR_FLDS_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_SECC_UPDT_PG_NBR_FLDS_EXIT") { M_PRINT_SECC_DTL_LINE_0(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_0
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE BEFORE SPACING FOR SECC REPORT BODY (DETAIL LINES)
        ///COMMENT:  FOR EACH DETAIL LINE...
        ///COMMENT:  - POPULATE THE OUTPUT FIELDS FROM THE IMPORTED ATTRIBUTES
        ///COMMENT:  - REPLACE ATTRIBUTE VALUES WITH SPACES IF DUPLICATE
        ///COMMENT:    SUPPRESSION ON AND NOT FIRST LINE OF PAGE OR
        ///COMMENT:    FIRST LINE AFTER CONTROL BREAK
        ///COMMENT:  - MOVE DETAIL LINE TO THE PRINT LINE
        ///COMMENT:  - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:  - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  - REPEAT AS NECESSARY FOR TEXT WRAPPING ATTRIBUTES
        ///COMMENT:  HANDLE AFTER SPACING FOR BODY (DETAIL LINES)
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_SECC_DTL_LINE_0(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_0);                                                 //COBOL==> MOVE SECC-DTL-LINE-0 TO SAVE-FOR-WRAP-TEXT.
            if (WS.SECC_DTL_LINE_KEEP_TOGETHER.IsEqualTo("Y"))                                                  //COBOL==> IF SECC-DTL-LINE-KEEP-TOGETHER = 'Y'
            {
                if (((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_SECC_DTL_LINE_QT.AsDecimal()) + WS.WS_SECC_PG_FTR_LINE_QT.AsDecimal()).IsGreaterThan(WS.WS_PG_LENGTH))  //COBOL==> IF ( WS-LINE-COUNT + WS-SECC-DTL-LINE-QT + WS-SECC-PG-FTR-LINE-QT ) > WS-PG-LENGTH
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("Y"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'Y'
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_0);                                            //COBOL==> MOVE SECC-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_0);                                            //COBOL==> MOVE SECC-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_0);                                                      //COBOL==> MOVE SECC-DTL-LINE-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_0.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-0.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_0") { M_PRINT_SECC_DTL_LINE_0_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_0_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_0_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_0_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_0_EXIT") { M_PRINT_SECC_DTL_LINE_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_1
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_1(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_1);                                                 //COBOL==> MOVE SECC-DTL-LINE-1 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_1);                                            //COBOL==> MOVE SECC-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_1);                                            //COBOL==> MOVE SECC-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_1);                                                      //COBOL==> MOVE SECC-DTL-LINE-1 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_1.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-1.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_1") { M_PRINT_SECC_DTL_LINE_1_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_1_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_1_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_1_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_1_EXIT") { M_PRINT_SECC_DTL_LINE_2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_2
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_2(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_2);                                                 //COBOL==> MOVE SECC-DTL-LINE-2 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_2);                                            //COBOL==> MOVE SECC-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_2);                                            //COBOL==> MOVE SECC-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_2);                                                      //COBOL==> MOVE SECC-DTL-LINE-2 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_2.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-2.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_2") { M_PRINT_SECC_DTL_LINE_2_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_2_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_2_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_2_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_2_EXIT") { M_PRINT_SECC_DTL_LINE_3(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_3
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_3(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_3);                                                 //COBOL==> MOVE SECC-DTL-LINE-3 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_3);                                            //COBOL==> MOVE SECC-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_3);                                            //COBOL==> MOVE SECC-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_3);                                                      //COBOL==> MOVE SECC-DTL-LINE-3 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_3.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-3.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_3") { M_PRINT_SECC_DTL_LINE_3_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_3_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_3_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_3_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_3_EXIT") { M_PRINT_SECC_DTL_LINE_4(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_4
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_4(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_4);                                                 //COBOL==> MOVE SECC-DTL-LINE-4 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_4);                                            //COBOL==> MOVE SECC-DTL-LINE-4 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_4);                                            //COBOL==> MOVE SECC-DTL-LINE-4 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_4);                                                      //COBOL==> MOVE SECC-DTL-LINE-4 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_4.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-4.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_4") { M_PRINT_SECC_DTL_LINE_4_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_4_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_4_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_4_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_4_EXIT") { M_PRINT_SECC_DTL_LINE_5(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_5
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_5(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_5);                                                 //COBOL==> MOVE SECC-DTL-LINE-5 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_5);                                            //COBOL==> MOVE SECC-DTL-LINE-5 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_5);                                            //COBOL==> MOVE SECC-DTL-LINE-5 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_5);                                                      //COBOL==> MOVE SECC-DTL-LINE-5 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_5.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-5.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_5") { M_PRINT_SECC_DTL_LINE_5_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_5_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_5_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_5_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_5_EXIT") { M_PRINT_SECC_DTL_LINE_6(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_6
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_6(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_6);                                                 //COBOL==> MOVE SECC-DTL-LINE-6 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_FEDERAL_SHARE_IVA_AMOUNT_044);                                          //COBOL==> MOVE I-FEDERAL-SHARE-IVA-AMOUNT-044 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_FEDERAL_SHARE_IVA_AMOUNT_044);                                         //COBOL==> MOVE I-FEDERAL-SHARE-IVA-AMOUNT-044 TO EP-INTEGER2.
            if (LS.I_FEDERAL_SHARE_IVA_AMOUNT_044.IsLessThan(ZEROS))                                            //COBOL==> IF I-FEDERAL-SHARE-IVA-AMOUNT-044 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ84);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ84 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_6_A_OBJ84.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-6-A-OBJ84.
            if (LS.I_FEDERAL_SHARE_IVA_AMOUNT_044.IsEqualTo(0))                                                 //COBOL==> IF I-FEDERAL-SHARE-IVA-AMOUNT-044 = 0
            {
                WS.SECC_DTL_LINE_6_A_OBJ84.SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO SECC-DTL-LINE-6-A-OBJ84.
            }
            WS.EP_DECIMAL.SetValue(LS.I_FEDERAL_SHARE_IVE_AMOUNT_045);                                          //COBOL==> MOVE I-FEDERAL-SHARE-IVE-AMOUNT-045 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_FEDERAL_SHARE_IVE_AMOUNT_045);                                         //COBOL==> MOVE I-FEDERAL-SHARE-IVE-AMOUNT-045 TO EP-INTEGER2.
            if (LS.I_FEDERAL_SHARE_IVE_AMOUNT_045.IsLessThan(ZEROS))                                            //COBOL==> IF I-FEDERAL-SHARE-IVE-AMOUNT-045 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ85);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ85 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_6_A_OBJ85.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-6-A-OBJ85.
            if (LS.I_FEDERAL_SHARE_IVE_AMOUNT_045.IsEqualTo(0))                                                 //COBOL==> IF I-FEDERAL-SHARE-IVE-AMOUNT-045 = 0
            {
                WS.SECC_DTL_LINE_6_A_OBJ85.SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO SECC-DTL-LINE-6-A-OBJ85.
            }
            WS.EP_DECIMAL.SetValue(LS.I_FEDERAL_SHARE_FORMER_AMO_046);                                          //COBOL==> MOVE I-FEDERAL-SHARE-FORMER-AMO-046 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_FEDERAL_SHARE_FORMER_AMO_046);                                         //COBOL==> MOVE I-FEDERAL-SHARE-FORMER-AMO-046 TO EP-INTEGER2.
            if (LS.I_FEDERAL_SHARE_FORMER_AMO_046.IsLessThan(ZEROS))                                            //COBOL==> IF I-FEDERAL-SHARE-FORMER-AMO-046 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ86);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ86 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_6_A_OBJ86.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-6-A-OBJ86.
            if (LS.I_FEDERAL_SHARE_FORMER_AMO_046.IsEqualTo(0))                                                 //COBOL==> IF I-FEDERAL-SHARE-FORMER-AMO-046 = 0
            {
                WS.SECC_DTL_LINE_6_A_OBJ86.SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO SECC-DTL-LINE-6-A-OBJ86.
            }
            WS.EP_DECIMAL.SetValue(LS.I_FEDERAL_SHARE_TOTAL_AMOU_047);                                          //COBOL==> MOVE I-FEDERAL-SHARE-TOTAL-AMOU-047 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_FEDERAL_SHARE_TOTAL_AMOU_047);                                         //COBOL==> MOVE I-FEDERAL-SHARE-TOTAL-AMOU-047 TO EP-INTEGER2.
            if (LS.I_FEDERAL_SHARE_TOTAL_AMOU_047.IsLessThan(ZEROS))                                            //COBOL==> IF I-FEDERAL-SHARE-TOTAL-AMOU-047 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ87);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ87 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_6_A_OBJ87.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-6-A-OBJ87.
            if (LS.I_FEDERAL_SHARE_TOTAL_AMOU_047.IsEqualTo(0))                                                 //COBOL==> IF I-FEDERAL-SHARE-TOTAL-AMOU-047 = 0
            {
                WS.SECC_DTL_LINE_6_A_OBJ87.SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO SECC-DTL-LINE-6-A-OBJ87.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_6);                                            //COBOL==> MOVE SECC-DTL-LINE-6 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_6);                                            //COBOL==> MOVE SECC-DTL-LINE-6 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_6);                                                      //COBOL==> MOVE SECC-DTL-LINE-6 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_6.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-6.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_6") { M_PRINT_SECC_DTL_LINE_6_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_6_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_6_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_6_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_6_EXIT") { M_PRINT_SECC_DTL_LINE_7(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_7
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_7(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_7);                                                 //COBOL==> MOVE SECC-DTL-LINE-7 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_7);                                            //COBOL==> MOVE SECC-DTL-LINE-7 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_7);                                            //COBOL==> MOVE SECC-DTL-LINE-7 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_7);                                                      //COBOL==> MOVE SECC-DTL-LINE-7 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_7.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-7.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_7") { M_PRINT_SECC_DTL_LINE_7_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_7_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_7_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_7_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_7_EXIT") { M_PRINT_SECC_DTL_LINE_8(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_8
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_8(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_8);                                                 //COBOL==> MOVE SECC-DTL-LINE-8 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_INCENTIVE_PAYMENT_IVA_AM_048);                                          //COBOL==> MOVE I-INCENTIVE-PAYMENT-IVA-AM-048 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_INCENTIVE_PAYMENT_IVA_AM_048);                                         //COBOL==> MOVE I-INCENTIVE-PAYMENT-IVA-AM-048 TO EP-INTEGER2.
            if (LS.I_INCENTIVE_PAYMENT_IVA_AM_048.IsLessThan(ZEROS))                                            //COBOL==> IF I-INCENTIVE-PAYMENT-IVA-AM-048 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ88);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ88 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_8_A_OBJ88.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-8-A-OBJ88.
            if (LS.I_INCENTIVE_PAYMENT_IVA_AM_048.IsEqualTo(0))                                                 //COBOL==> IF I-INCENTIVE-PAYMENT-IVA-AM-048 = 0
            {
                WS.SECC_DTL_LINE_8_A_OBJ88.SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO SECC-DTL-LINE-8-A-OBJ88.
            }
            WS.EP_DECIMAL.SetValue(LS.I_INCENTIVE_PAYMENT_FORMER_049);                                          //COBOL==> MOVE I-INCENTIVE-PAYMENT-FORMER-049 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_INCENTIVE_PAYMENT_FORMER_049);                                         //COBOL==> MOVE I-INCENTIVE-PAYMENT-FORMER-049 TO EP-INTEGER2.
            if (LS.I_INCENTIVE_PAYMENT_FORMER_049.IsLessThan(ZEROS))                                            //COBOL==> IF I-INCENTIVE-PAYMENT-FORMER-049 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ89);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ89 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_8_A_OBJ89.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-8-A-OBJ89.
            if (LS.I_INCENTIVE_PAYMENT_FORMER_049.IsEqualTo(0))                                                 //COBOL==> IF I-INCENTIVE-PAYMENT-FORMER-049 = 0
            {
                WS.SECC_DTL_LINE_8_A_OBJ89.SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO SECC-DTL-LINE-8-A-OBJ89.
            }
            WS.EP_DECIMAL.SetValue(LS.I_INCENTIVE_PAYMENT_AMOUNT_050);                                          //COBOL==> MOVE I-INCENTIVE-PAYMENT-AMOUNT-050 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_INCENTIVE_PAYMENT_AMOUNT_050);                                         //COBOL==> MOVE I-INCENTIVE-PAYMENT-AMOUNT-050 TO EP-INTEGER2.
            if (LS.I_INCENTIVE_PAYMENT_AMOUNT_050.IsLessThan(ZEROS))                                            //COBOL==> IF I-INCENTIVE-PAYMENT-AMOUNT-050 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ90);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ90 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_8_A_OBJ90.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-8-A-OBJ90.
            if (LS.I_INCENTIVE_PAYMENT_AMOUNT_050.IsEqualTo(0))                                                 //COBOL==> IF I-INCENTIVE-PAYMENT-AMOUNT-050 = 0
            {
                WS.SECC_DTL_LINE_8_A_OBJ90.SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO SECC-DTL-LINE-8-A-OBJ90.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_8);                                            //COBOL==> MOVE SECC-DTL-LINE-8 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_8);                                            //COBOL==> MOVE SECC-DTL-LINE-8 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_8);                                                      //COBOL==> MOVE SECC-DTL-LINE-8 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_8.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-8.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_8") { M_PRINT_SECC_DTL_LINE_8_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_8_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_8_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_8_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_8_EXIT") { M_PRINT_SECC_DTL_LINE_9(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_9
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_9(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_9);                                                 //COBOL==> MOVE SECC-DTL-LINE-9 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_9);                                            //COBOL==> MOVE SECC-DTL-LINE-9 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_9);                                            //COBOL==> MOVE SECC-DTL-LINE-9 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_9);                                                      //COBOL==> MOVE SECC-DTL-LINE-9 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_9.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-9.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_9") { M_PRINT_SECC_DTL_LINE_9_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_9_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_9_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_9_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_9_EXIT") { M_PRINT_SECC_DTL_LINE_10(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_10
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_10(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_10);                                                //COBOL==> MOVE SECC-DTL-LINE-10 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_NET_FEDERAL_SHARE_IVA_AM_051);                                          //COBOL==> MOVE I-NET-FEDERAL-SHARE-IVA-AM-051 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_NET_FEDERAL_SHARE_IVA_AM_051);                                         //COBOL==> MOVE I-NET-FEDERAL-SHARE-IVA-AM-051 TO EP-INTEGER2.
            if (LS.I_NET_FEDERAL_SHARE_IVA_AM_051.IsLessThan(ZEROS))                                            //COBOL==> IF I-NET-FEDERAL-SHARE-IVA-AM-051 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ91);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ91 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_10_A_OBJ91.SetValue(WS.EP_FORMATTED_VALUE);                                        //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-10-A-OBJ91.
            if (LS.I_NET_FEDERAL_SHARE_IVA_AM_051.IsEqualTo(0))                                                 //COBOL==> IF I-NET-FEDERAL-SHARE-IVA-AM-051 = 0
            {
                WS.SECC_DTL_LINE_10_A_OBJ91.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO SECC-DTL-LINE-10-A-OBJ91.
            }
            WS.EP_DECIMAL.SetValue(LS.I_NET_FEDERAL_SHARE_FORMER_052);                                          //COBOL==> MOVE I-NET-FEDERAL-SHARE-FORMER-052 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_NET_FEDERAL_SHARE_FORMER_052);                                         //COBOL==> MOVE I-NET-FEDERAL-SHARE-FORMER-052 TO EP-INTEGER2.
            if (LS.I_NET_FEDERAL_SHARE_FORMER_052.IsLessThan(ZEROS))                                            //COBOL==> IF I-NET-FEDERAL-SHARE-FORMER-052 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ92);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ92 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_10_A_OBJ92.SetValue(WS.EP_FORMATTED_VALUE);                                        //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-10-A-OBJ92.
            if (LS.I_NET_FEDERAL_SHARE_FORMER_052.IsEqualTo(0))                                                 //COBOL==> IF I-NET-FEDERAL-SHARE-FORMER-052 = 0
            {
                WS.SECC_DTL_LINE_10_A_OBJ92.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO SECC-DTL-LINE-10-A-OBJ92.
            }
            WS.EP_DECIMAL.SetValue(LS.I_NET_FEDERAL_SHARE_AMOUNT_053);                                          //COBOL==> MOVE I-NET-FEDERAL-SHARE-AMOUNT-053 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_NET_FEDERAL_SHARE_AMOUNT_053);                                         //COBOL==> MOVE I-NET-FEDERAL-SHARE-AMOUNT-053 TO EP-INTEGER2.
            if (LS.I_NET_FEDERAL_SHARE_AMOUNT_053.IsLessThan(ZEROS))                                            //COBOL==> IF I-NET-FEDERAL-SHARE-AMOUNT-053 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ93);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ93 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_10_A_OBJ93.SetValue(WS.EP_FORMATTED_VALUE);                                        //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-10-A-OBJ93.
            if (LS.I_NET_FEDERAL_SHARE_AMOUNT_053.IsEqualTo(0))                                                 //COBOL==> IF I-NET-FEDERAL-SHARE-AMOUNT-053 = 0
            {
                WS.SECC_DTL_LINE_10_A_OBJ93.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO SECC-DTL-LINE-10-A-OBJ93.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_10);                                           //COBOL==> MOVE SECC-DTL-LINE-10 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_10);                                           //COBOL==> MOVE SECC-DTL-LINE-10 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_10);                                                     //COBOL==> MOVE SECC-DTL-LINE-10 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_10.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-10.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_10") { M_PRINT_SECC_DTL_LINE_10_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_10_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_10_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_10_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_10_EXIT") { M_PRINT_SECC_DTL_LINE_11(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_11
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_11(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_11);                                                //COBOL==> MOVE SECC-DTL-LINE-11 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_11);                                           //COBOL==> MOVE SECC-DTL-LINE-11 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_11);                                           //COBOL==> MOVE SECC-DTL-LINE-11 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_11);                                                     //COBOL==> MOVE SECC-DTL-LINE-11 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_11.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-11.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_11") { M_PRINT_SECC_DTL_LINE_11_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_11_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_11_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_11_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_11_EXIT") { M_PRINT_SECC_DTL_LINE_12(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_12
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_12(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_12);                                                //COBOL==> MOVE SECC-DTL-LINE-12 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_FEES_RETAIN_OTHER_STATES_054);                                          //COBOL==> MOVE I-FEES-RETAIN-OTHER-STATES-054 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_FEES_RETAIN_OTHER_STATES_054);                                         //COBOL==> MOVE I-FEES-RETAIN-OTHER-STATES-054 TO EP-INTEGER2.
            if (LS.I_FEES_RETAIN_OTHER_STATES_054.IsLessThan(ZEROS))                                            //COBOL==> IF I-FEES-RETAIN-OTHER-STATES-054 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ94);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ94 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SECC_DTL_LINE_12_A_OBJ94.SetValue(WS.EP_FORMATTED_VALUE);                                        //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-DTL-LINE-12-A-OBJ94.
            if (LS.I_FEES_RETAIN_OTHER_STATES_054.IsEqualTo(0))                                                 //COBOL==> IF I-FEES-RETAIN-OTHER-STATES-054 = 0
            {
                WS.SECC_DTL_LINE_12_A_OBJ94.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO SECC-DTL-LINE-12-A-OBJ94.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_12);                                           //COBOL==> MOVE SECC-DTL-LINE-12 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_12);                                           //COBOL==> MOVE SECC-DTL-LINE-12 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_12);                                                     //COBOL==> MOVE SECC-DTL-LINE-12 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_12.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-12.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_12") { M_PRINT_SECC_DTL_LINE_12_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_12_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_12_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_12_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_12_EXIT") { M_PRINT_SECC_DTL_LINE_13(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_13
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_13(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_13);                                                //COBOL==> MOVE SECC-DTL-LINE-13 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_13);                                           //COBOL==> MOVE SECC-DTL-LINE-13 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_13);                                           //COBOL==> MOVE SECC-DTL-LINE-13 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_13);                                                     //COBOL==> MOVE SECC-DTL-LINE-13 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_13.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-13.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_13") { M_PRINT_SECC_DTL_LINE_13_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_13_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_13_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_13_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_13_EXIT") { M_PRINT_SECC_DTL_LINE_14(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_14
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_14(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_14);                                                //COBOL==> MOVE SECC-DTL-LINE-14 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_14);                                           //COBOL==> MOVE SECC-DTL-LINE-14 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_14);                                           //COBOL==> MOVE SECC-DTL-LINE-14 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_14);                                                     //COBOL==> MOVE SECC-DTL-LINE-14 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_14.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-14.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_14") { M_PRINT_SECC_DTL_LINE_14_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_14_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_14_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_14_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_14_EXIT") { M_PRINT_SECC_DTL_LINE_15(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_15
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_15(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_15);                                                //COBOL==> MOVE SECC-DTL-LINE-15 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_15);                                           //COBOL==> MOVE SECC-DTL-LINE-15 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_15);                                           //COBOL==> MOVE SECC-DTL-LINE-15 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_15);                                                     //COBOL==> MOVE SECC-DTL-LINE-15 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_15.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-15.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_15") { M_PRINT_SECC_DTL_LINE_15_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_15_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_15_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_15_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_15_EXIT") { M_PRINT_SECC_DTL_LINE_16(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_16
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_16(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_16);                                                //COBOL==> MOVE SECC-DTL-LINE-16 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_16);                                           //COBOL==> MOVE SECC-DTL-LINE-16 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_16);                                           //COBOL==> MOVE SECC-DTL-LINE-16 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_16);                                                     //COBOL==> MOVE SECC-DTL-LINE-16 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_16.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-16.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_16") { M_PRINT_SECC_DTL_LINE_16_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_16_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_16_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_16_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_16_EXIT") { M_PRINT_SECC_DTL_LINE_17(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_17
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_17(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_17);                                                //COBOL==> MOVE SECC-DTL-LINE-17 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_17);                                           //COBOL==> MOVE SECC-DTL-LINE-17 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_17);                                           //COBOL==> MOVE SECC-DTL-LINE-17 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_17);                                                     //COBOL==> MOVE SECC-DTL-LINE-17 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_17.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-17.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_17") { M_PRINT_SECC_DTL_LINE_17_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_17_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_17_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_17_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_17_EXIT") { M_PRINT_SECC_DTL_LINE_18(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_18
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_18(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_18);                                                //COBOL==> MOVE SECC-DTL-LINE-18 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_18);                                           //COBOL==> MOVE SECC-DTL-LINE-18 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_18);                                           //COBOL==> MOVE SECC-DTL-LINE-18 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_18);                                                     //COBOL==> MOVE SECC-DTL-LINE-18 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_18.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-18.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_18") { M_PRINT_SECC_DTL_LINE_18_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_18_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_18_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_18_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_18_EXIT") { M_PRINT_SECC_DTL_LINE_19(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_19
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_19(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_19);                                                //COBOL==> MOVE SECC-DTL-LINE-19 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_19);                                           //COBOL==> MOVE SECC-DTL-LINE-19 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_19);                                           //COBOL==> MOVE SECC-DTL-LINE-19 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_19);                                                     //COBOL==> MOVE SECC-DTL-LINE-19 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_19.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-19.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_19") { M_PRINT_SECC_DTL_LINE_19_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_19_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_19_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_19_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_19_EXIT") { M_PRINT_SECC_DTL_LINE_20(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_20
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_20(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_20);                                                //COBOL==> MOVE SECC-DTL-LINE-20 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_20);                                           //COBOL==> MOVE SECC-DTL-LINE-20 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_20);                                           //COBOL==> MOVE SECC-DTL-LINE-20 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_20);                                                     //COBOL==> MOVE SECC-DTL-LINE-20 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_20.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-20.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_20") { M_PRINT_SECC_DTL_LINE_20_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_20_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_20_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_20_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_20_EXIT") { M_PRINT_SECC_DTL_LINE_21(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_21
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_21(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_21);                                                //COBOL==> MOVE SECC-DTL-LINE-21 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_21);                                           //COBOL==> MOVE SECC-DTL-LINE-21 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_21);                                           //COBOL==> MOVE SECC-DTL-LINE-21 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_21);                                                     //COBOL==> MOVE SECC-DTL-LINE-21 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_21.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-21.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_21") { M_PRINT_SECC_DTL_LINE_21_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_21_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_21_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_21_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_21_EXIT") { M_PRINT_SECC_DTL_LINE_22(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_22
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_22(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_22);                                                //COBOL==> MOVE SECC-DTL-LINE-22 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_22);                                           //COBOL==> MOVE SECC-DTL-LINE-22 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_22);                                           //COBOL==> MOVE SECC-DTL-LINE-22 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_22);                                                     //COBOL==> MOVE SECC-DTL-LINE-22 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_22.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-22.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_22") { M_PRINT_SECC_DTL_LINE_22_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_22_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_22_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_22_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_22_EXIT") { M_PRINT_SECC_DTL_LINE_23(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_23
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_23(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_23);                                                //COBOL==> MOVE SECC-DTL-LINE-23 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_23);                                           //COBOL==> MOVE SECC-DTL-LINE-23 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_23);                                           //COBOL==> MOVE SECC-DTL-LINE-23 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_23);                                                     //COBOL==> MOVE SECC-DTL-LINE-23 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_23.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-23.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_23") { M_PRINT_SECC_DTL_LINE_23_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_23_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_23_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_23_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_23_EXIT") { M_PRINT_SECC_DTL_LINE_24(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_24
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_24(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_24);                                                //COBOL==> MOVE SECC-DTL-LINE-24 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_24);                                           //COBOL==> MOVE SECC-DTL-LINE-24 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_24);                                           //COBOL==> MOVE SECC-DTL-LINE-24 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_24);                                                     //COBOL==> MOVE SECC-DTL-LINE-24 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_24.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-24.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_24") { M_PRINT_SECC_DTL_LINE_24_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_24_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_24_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_24_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_24_EXIT") { M_PRINT_SECC_DTL_LINE_25(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_25
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_25(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_25);                                                //COBOL==> MOVE SECC-DTL-LINE-25 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_25);                                           //COBOL==> MOVE SECC-DTL-LINE-25 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_25);                                           //COBOL==> MOVE SECC-DTL-LINE-25 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_25);                                                     //COBOL==> MOVE SECC-DTL-LINE-25 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_25.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-25.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_25") { M_PRINT_SECC_DTL_LINE_25_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_25_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_25_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_25_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_25_EXIT") { M_PRINT_SECC_DTL_LINE_26(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_26
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_26(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_26);                                                //COBOL==> MOVE SECC-DTL-LINE-26 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_26);                                           //COBOL==> MOVE SECC-DTL-LINE-26 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_26);                                           //COBOL==> MOVE SECC-DTL-LINE-26 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_26);                                                     //COBOL==> MOVE SECC-DTL-LINE-26 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            WS.SECC_DTL_LINE_26.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-26.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_26") { M_PRINT_SECC_DTL_LINE_26_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_26_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_26_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_26_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_26_EXIT") { M_PRINT_SECC_DTL_LINE_27(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_27
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_27(string returnMethod = "")
        {
            if (WS.SECC_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF SECC-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SECC_DTL_LINE_27);                                                //COBOL==> MOVE SECC-DTL-LINE-27 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SECC_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-SECC-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_27);                                           //COBOL==> MOVE SECC-DTL-LINE-27 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_27);                                           //COBOL==> MOVE SECC-DTL-LINE-27 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_DTL_LINE_27);                                                     //COBOL==> MOVE SECC-DTL-LINE-27 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SECC_RPT_LINE("M_PRINT_SECC_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SECC-RPT-LINE THRU PRINT-SECC-RPT-LINE-EXIT.
            if (WS.SECC_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                   //COBOL==> IF SECC-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            WS.SECC_DTL_LINE_27.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SECC-DTL-LINE-27.
            WS.WS_SECC_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SECC-DISABLE-SUPPRESS.
            WS.WS_SECC_PAGE_DTL_LINES.SetValue(WS.WS_SECC_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-SECC-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_27") { M_PRINT_SECC_DTL_LINE_27_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_DTL_LINE_27_EXIT
        /// </summary>
        private void M_PRINT_SECC_DTL_LINE_27_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_DTL_LINE_27_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_DTL_LINE_27_EXIT") { M_PRINT_SECC_PG_HDR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_PG_HDR
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  PRINT-SECC-PAGE-HDR
        ///COMMENT:  DISABLE DUPLICATE FIELD SUPPRESSION FOR FIRST
        ///COMMENT:    LINE ON NEW PAGE
        ///COMMENT:  HANDLE BEFORE SPACING FOR PAGE HEADER LINES
        ///COMMENT:  FOR EACH PAGE HEADER SECTION LINE
        ///COMMENT:    - MOVE IMPORT ATTRIBUTES TO REPORT FIELDS
        ///COMMENT:    - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:    - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  HANDLE AFTER SPACING FOR PAGE HEADER LINES
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_SECC_PG_HDR(string returnMethod = "")
        {
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((!(WS.WS_SECC_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_SECC_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-SECC-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-SECC-RPT-FTR-IS-PROCESSED )
                {
                    if ((WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT.
            WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_SECC_BODY_SUPPRESS_LINES.SetValue(WS.WS_SECC_BODY_SECTION_LINES);                             //COBOL==> MOVE WS-SECC-BODY-SECTION-LINES TO WS-SECC-BODY-SUPPRESS-LINES.
            WS.WS_SAVE_SECTION_PROCESSING_IND.SetValue(WS.WS_SECC_SECTION_PROCESSING_IND);                      //COBOL==> MOVE WS-SECC-SECTION-PROCESSING-IND TO WS-SAVE-SECTION-PROCESSING-IND.
            WS.WS_SECC_SECTION_PROCESSING_IND.SetValue("P  ");                                                  //COBOL==> MOVE 'P  ' TO WS-SECC-SECTION-PROCESSING-IND.
            if (WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SECC_SECTION_PROCESSING_IND.SetValueWithSpaces();                                             //COBOL==> MOVE SPACES TO WS-SECC-SECTION-PROCESSING-IND
                WS.WS_SECC_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-SECC-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_0);                                            //COBOL==> MOVE SECC-PAGE-HDR-0 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_SECC_CUR_PRINTING_PAGE_HDR.SetValue("Y");                                                     //COBOL==> MOVE 'Y' TO WS-SECC-CUR-PRINTING-PAGE-HDR
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_0);                                                      //COBOL==> MOVE SECC-PAGE-HDR-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_SECC_UPDT_PG_NBR_FLDS("M_SECC_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SECC-UPDT-PG-NBR-FLDS THRU SECC-UPDT-PG-NBR-FLDS-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SECC_LINEONNEWPG("M_PRINT_A_SECC_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-SECC-LINEONNEWPG THRU PRINT-A-SECC-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SECC_LINE("M_PRINT_A_SECC_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-SECC-LINE THRU PRINT-A-SECC-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_DATE.SetValue(WS.WS_CURRENT_DATE_8);                                                         //COBOL==> MOVE WS-CURRENT-DATE-8 TO IEF-DATE.
            WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN.
            WS.DT_FORMATTED_DATE.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO DT-FORMATTED-DATE
            if (!(WS.IEF_DATE.IsEqualTo(00000000)))                                                             //COBOL==> IF IEF-DATE NOT = 00000000
            {
                WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN
                M_FORMAT_DATE("M_FORMAT_DATE_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-DATE THRU FORMAT-DATE-EXIT
            }                                                                                                   //COBOL==> END-IF
            WS.SECC_PAGE_HDR_1_D_OBJ6.SetValue(WS.DT_FORMATTED_DATE);                                           //COBOL==> MOVE DT-FORMATTED-DATE TO SECC-PAGE-HDR-1-D-OBJ6.
            if (WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SECC_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-SECC-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_1);                                            //COBOL==> MOVE SECC-PAGE-HDR-1 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_1);                                                      //COBOL==> MOVE SECC-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_1);                                                      //COBOL==> MOVE SECC-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SECC_LINEONNEWPG("M_PRINT_A_SECC_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-SECC-LINEONNEWPG THRU PRINT-A-SECC-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SECC_LINE("M_PRINT_A_SECC_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-SECC-LINE THRU PRINT-A-SECC-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_TIME.SetValue(WS.WS_CURRENT_TIME_6);                                                         //COBOL==> MOVE WS-CURRENT-TIME-6 TO IEF-TIME.
            WS.DT_EDIT_PATTERN.SetValue("23:59:59");                                                            //COBOL==> MOVE '23:59:59' TO DT-EDIT-PATTERN.
            M_FORMAT_TIME("M_FORMAT_TIME_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-TIME THRU FORMAT-TIME-EXIT.
            WS.SECC_PAGE_HDR_2_T_OBJ9.SetValue(WS.DT_FORMATTED_TIME);                                           //COBOL==> MOVE DT-FORMATTED-TIME TO SECC-PAGE-HDR-2-T-OBJ9.
            if (WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SECC_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-SECC-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_2);                                            //COBOL==> MOVE SECC-PAGE-HDR-2 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_2);                                                      //COBOL==> MOVE SECC-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_2);                                                      //COBOL==> MOVE SECC-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SECC_LINEONNEWPG("M_PRINT_A_SECC_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-SECC-LINEONNEWPG THRU PRINT-A-SECC-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SECC_LINE("M_PRINT_A_SECC_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-SECC-LINE THRU PRINT-A-SECC-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WS_SECC_CNTL_FTR.Value))                                                                  //COBOL==> IF NOT WS-SECC-CNTL-FTR
            {
                WS.EP_DECIMAL.SetValue(LS.I_PERIOD_0002_004);                                                       //COBOL==> MOVE I-PERIOD-0002-004 TO EP-DECIMAL
                WS.EP_INTEGER2.SetValue(LS.I_PERIOD_0002_004);                                                      //COBOL==> MOVE I-PERIOD-0002-004 TO EP-INTEGER2
                if (LS.I_PERIOD_0002_004.IsLessThan(ZEROS))                                                         //COBOL==> IF I-PERIOD-0002-004 LESS THAN ZERO
                {
                    WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
                }                                                                                                   //COBOL==> END-IF
                WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ12);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ12 TO EP-EDIT-PATTERN
                WS.EP_EDIT_PATTERN_LEN.SetValue(7);                                                                 //COBOL==> MOVE 7 TO EP-EDIT-PATTERN-LEN
                M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT
                WS.SECC_PAGE_HDR_3_A_OBJ12.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-PAGE-HDR-3-A-OBJ12
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_DECIMAL.SetValue(WS.P_PERIOD_0002_004);                                                       //COBOL==> MOVE P-PERIOD-0002-004 TO EP-DECIMAL
                WS.EP_INTEGER2.SetValue(WS.P_PERIOD_0002_004);                                                      //COBOL==> MOVE P-PERIOD-0002-004 TO EP-INTEGER2
                if (WS.P_PERIOD_0002_004.IsLessThan(ZEROS))                                                         //COBOL==> IF P-PERIOD-0002-004 LESS THAN ZERO
                {
                    WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
                }                                                                                                   //COBOL==> END-IF
                WS.EP_EDIT_PATTERN.SetValue(WS.SECC_EDIT_PATTERN_OBJ12);                                            //COBOL==> MOVE SECC-EDIT-PATTERN-OBJ12 TO EP-EDIT-PATTERN
                WS.EP_EDIT_PATTERN_LEN.SetValue(7);                                                                 //COBOL==> MOVE 7 TO EP-EDIT-PATTERN-LEN
                M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT
                WS.SECC_PAGE_HDR_3_A_OBJ12.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO SECC-PAGE-HDR-3-A-OBJ12
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_SECC_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-SECC-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SECC_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-SECC-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_3);                                            //COBOL==> MOVE SECC-PAGE-HDR-3 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_3);                                                      //COBOL==> MOVE SECC-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SECC_PAGE_HDR_3);                                                      //COBOL==> MOVE SECC-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SECC_LINE_SPACING);                                         //COBOL==> MOVE WS-SECC-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SECC_LINEONNEWPG("M_PRINT_A_SECC_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-SECC-LINEONNEWPG THRU PRINT-A-SECC-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SECC_LINE("M_PRINT_A_SECC_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-SECC-LINE THRU PRINT-A-SECC-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SECC_SECTION_PROCESSING_IND.SetValue(WS.WS_SAVE_SECTION_PROCESSING_IND);                      //COBOL==> MOVE WS-SAVE-SECTION-PROCESSING-IND TO WS-SECC-SECTION-PROCESSING-IND.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_SECC_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-SECC-CUR-PRINTING-PAGE-HDR.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_PG_HDR") { M_PRINT_SECC_PG_HDR_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SECC_PG_HDR_EXIT
        /// </summary>
        private void M_PRINT_SECC_PG_HDR_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SECC_PG_HDR_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SECC_PG_HDR_EXIT") { M_SECC_UPDT_RPT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SECC_UPDT_RPT_PG_NBR_FLDS
        /// </summary>
        private void M_SECC_UPDT_RPT_PG_NBR_FLDS(string returnMethod = "")
        {
            //COMMENT:     STATEMENT BELOW EXISTS TO ENSURE PARAGRAPH NEVER EMPTY
            WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER);                                                          //COBOL==> MOVE WS-PG-NUMBER TO WS-PG-NUMBER.
            if (returnMethod != "" && returnMethod != "M_SECC_UPDT_RPT_PG_NBR_FLDS") { M_SECC_UPDT_RPT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SECC_UPDT_RPT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_SECC_UPDT_RPT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_SECC_UPDT_RPT_PG_NBR_FLDS_EXIT") { return; }                                 //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_SECC_UPDT_RPT_PG_NBR_FLDS_EXIT") { M_MAIN_MAINLINE_DTL(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_MAINLINE_DTL
        /// </summary>
        private void M_MAIN_MAINLINE_DTL(string returnMethod = "")
        {
            if (((WS.WS_MAIN_DTL_RPT_REQUESTED.Value)
             && (!(LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("S"))))
             || ((WS.WS_MAIN_SUMMARY_RPT_REQUESTED.Value)
             && (LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("D"))))  //COBOL==> IF ( WS-MAIN-DTL-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD NOT = 'S' ) OR ( WS-MAIN-SUMMARY-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD = 'D' )
            {
                WS.WS_MAIN_SECTION_PROCESSING_IND.SetValue("B  ");                                                  //COBOL==> MOVE 'B  ' TO WS-MAIN-SECTION-PROCESSING-IND
                WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.MAIN_DTL_LINE_SUPPRSS_BLANK);                                  //COBOL==> MOVE MAIN-DTL-LINE-SUPPRSS-BLANK TO WS-SUPPRSS-BLANK-LINE
                M_PRINT_MAIN_DTL_LINE_0("M_PRINT_MAIN_DTL_LINE_0_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-0 THRU PRINT-MAIN-DTL-LINE-0-EXIT
                M_PRINT_MAIN_DTL_LINE_1("M_PRINT_MAIN_DTL_LINE_1_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-1 THRU PRINT-MAIN-DTL-LINE-1-EXIT
                M_PRINT_MAIN_DTL_LINE_2("M_PRINT_MAIN_DTL_LINE_2_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-2 THRU PRINT-MAIN-DTL-LINE-2-EXIT
                M_PRINT_MAIN_DTL_LINE_3("M_PRINT_MAIN_DTL_LINE_3_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-3 THRU PRINT-MAIN-DTL-LINE-3-EXIT
                M_PRINT_MAIN_DTL_LINE_4("M_PRINT_MAIN_DTL_LINE_4_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-4 THRU PRINT-MAIN-DTL-LINE-4-EXIT
                M_PRINT_MAIN_DTL_LINE_5("M_PRINT_MAIN_DTL_LINE_5_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-5 THRU PRINT-MAIN-DTL-LINE-5-EXIT
                M_PRINT_MAIN_DTL_LINE_6("M_PRINT_MAIN_DTL_LINE_6_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-6 THRU PRINT-MAIN-DTL-LINE-6-EXIT
                M_PRINT_MAIN_DTL_LINE_7("M_PRINT_MAIN_DTL_LINE_7_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-7 THRU PRINT-MAIN-DTL-LINE-7-EXIT
                M_PRINT_MAIN_DTL_LINE_8("M_PRINT_MAIN_DTL_LINE_8_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-8 THRU PRINT-MAIN-DTL-LINE-8-EXIT
                M_PRINT_MAIN_DTL_LINE_9("M_PRINT_MAIN_DTL_LINE_9_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-9 THRU PRINT-MAIN-DTL-LINE-9-EXIT
                M_PRINT_MAIN_DTL_LINE_10("M_PRINT_MAIN_DTL_LINE_10_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-10 THRU PRINT-MAIN-DTL-LINE-10-EXIT
                M_PRINT_MAIN_DTL_LINE_11("M_PRINT_MAIN_DTL_LINE_11_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-11 THRU PRINT-MAIN-DTL-LINE-11-EXIT
                M_PRINT_MAIN_DTL_LINE_12("M_PRINT_MAIN_DTL_LINE_12_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-12 THRU PRINT-MAIN-DTL-LINE-12-EXIT
                M_PRINT_MAIN_DTL_LINE_13("M_PRINT_MAIN_DTL_LINE_13_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-13 THRU PRINT-MAIN-DTL-LINE-13-EXIT
                M_PRINT_MAIN_DTL_LINE_14("M_PRINT_MAIN_DTL_LINE_14_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-14 THRU PRINT-MAIN-DTL-LINE-14-EXIT
                M_PRINT_MAIN_DTL_LINE_15("M_PRINT_MAIN_DTL_LINE_15_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-15 THRU PRINT-MAIN-DTL-LINE-15-EXIT
                M_PRINT_MAIN_DTL_LINE_16("M_PRINT_MAIN_DTL_LINE_16_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-16 THRU PRINT-MAIN-DTL-LINE-16-EXIT
                M_PRINT_MAIN_DTL_LINE_17("M_PRINT_MAIN_DTL_LINE_17_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-17 THRU PRINT-MAIN-DTL-LINE-17-EXIT
                M_PRINT_MAIN_DTL_LINE_18("M_PRINT_MAIN_DTL_LINE_18_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-18 THRU PRINT-MAIN-DTL-LINE-18-EXIT
                M_PRINT_MAIN_DTL_LINE_19("M_PRINT_MAIN_DTL_LINE_19_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-19 THRU PRINT-MAIN-DTL-LINE-19-EXIT
                M_PRINT_MAIN_DTL_LINE_20("M_PRINT_MAIN_DTL_LINE_20_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-20 THRU PRINT-MAIN-DTL-LINE-20-EXIT
                M_PRINT_MAIN_DTL_LINE_21("M_PRINT_MAIN_DTL_LINE_21_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-21 THRU PRINT-MAIN-DTL-LINE-21-EXIT
                M_PRINT_MAIN_DTL_LINE_22("M_PRINT_MAIN_DTL_LINE_22_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-22 THRU PRINT-MAIN-DTL-LINE-22-EXIT
                M_PRINT_MAIN_DTL_LINE_23("M_PRINT_MAIN_DTL_LINE_23_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-23 THRU PRINT-MAIN-DTL-LINE-23-EXIT
                M_PRINT_MAIN_DTL_LINE_24("M_PRINT_MAIN_DTL_LINE_24_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-24 THRU PRINT-MAIN-DTL-LINE-24-EXIT
                M_PRINT_MAIN_DTL_LINE_25("M_PRINT_MAIN_DTL_LINE_25_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-25 THRU PRINT-MAIN-DTL-LINE-25-EXIT
                M_PRINT_MAIN_DTL_LINE_26("M_PRINT_MAIN_DTL_LINE_26_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-26 THRU PRINT-MAIN-DTL-LINE-26-EXIT
                M_PRINT_MAIN_DTL_LINE_27("M_PRINT_MAIN_DTL_LINE_27_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-27 THRU PRINT-MAIN-DTL-LINE-27-EXIT
                M_PRINT_MAIN_DTL_LINE_28("M_PRINT_MAIN_DTL_LINE_28_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-28 THRU PRINT-MAIN-DTL-LINE-28-EXIT
                M_PRINT_MAIN_DTL_LINE_29("M_PRINT_MAIN_DTL_LINE_29_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-29 THRU PRINT-MAIN-DTL-LINE-29-EXIT
                M_PRINT_MAIN_DTL_LINE_30("M_PRINT_MAIN_DTL_LINE_30_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-30 THRU PRINT-MAIN-DTL-LINE-30-EXIT
                M_PRINT_MAIN_DTL_LINE_31("M_PRINT_MAIN_DTL_LINE_31_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-31 THRU PRINT-MAIN-DTL-LINE-31-EXIT
                M_PRINT_MAIN_DTL_LINE_32("M_PRINT_MAIN_DTL_LINE_32_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-32 THRU PRINT-MAIN-DTL-LINE-32-EXIT
                M_PRINT_MAIN_DTL_LINE_33("M_PRINT_MAIN_DTL_LINE_33_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-33 THRU PRINT-MAIN-DTL-LINE-33-EXIT
                M_PRINT_MAIN_DTL_LINE_34("M_PRINT_MAIN_DTL_LINE_34_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-34 THRU PRINT-MAIN-DTL-LINE-34-EXIT
                M_PRINT_MAIN_DTL_LINE_35("M_PRINT_MAIN_DTL_LINE_35_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-35 THRU PRINT-MAIN-DTL-LINE-35-EXIT
                M_PRINT_MAIN_DTL_LINE_36("M_PRINT_MAIN_DTL_LINE_36_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-36 THRU PRINT-MAIN-DTL-LINE-36-EXIT
                M_PRINT_MAIN_DTL_LINE_37("M_PRINT_MAIN_DTL_LINE_37_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-37 THRU PRINT-MAIN-DTL-LINE-37-EXIT
                M_PRINT_MAIN_DTL_LINE_38("M_PRINT_MAIN_DTL_LINE_38_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-38 THRU PRINT-MAIN-DTL-LINE-38-EXIT
                M_PRINT_MAIN_DTL_LINE_39("M_PRINT_MAIN_DTL_LINE_39_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-39 THRU PRINT-MAIN-DTL-LINE-39-EXIT
                M_PRINT_MAIN_DTL_LINE_40("M_PRINT_MAIN_DTL_LINE_40_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-40 THRU PRINT-MAIN-DTL-LINE-40-EXIT
                M_PRINT_MAIN_DTL_LINE_41("M_PRINT_MAIN_DTL_LINE_41_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-41 THRU PRINT-MAIN-DTL-LINE-41-EXIT
                M_PRINT_MAIN_DTL_LINE_42("M_PRINT_MAIN_DTL_LINE_42_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-42 THRU PRINT-MAIN-DTL-LINE-42-EXIT
                M_PRINT_MAIN_DTL_LINE_43("M_PRINT_MAIN_DTL_LINE_43_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-43 THRU PRINT-MAIN-DTL-LINE-43-EXIT
                M_PRINT_MAIN_DTL_LINE_44("M_PRINT_MAIN_DTL_LINE_44_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-44 THRU PRINT-MAIN-DTL-LINE-44-EXIT
                M_PRINT_MAIN_DTL_LINE_45("M_PRINT_MAIN_DTL_LINE_45_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-45 THRU PRINT-MAIN-DTL-LINE-45-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_MAIN_SECTION_PROCESSING_IND.SetValueWithSpaces();                                             //COBOL==> MOVE SPACES TO WS-MAIN-SECTION-PROCESSING-IND.
            if (WS.MAIN_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                   //COBOL==> IF MAIN-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_MAIN_MAINLINE_DTL") { M_MAIN_MAINLINE_DTL_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_MAINLINE_DTL_EXIT
        /// </summary>
        private void M_MAIN_MAINLINE_DTL_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_MAIN_MAINLINE_DTL_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_MAIN_MAINLINE_DTL_EXIT") { M_PRINT_MAIN_RPT_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_RPT_LINE
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  THIS SECTION PRINTS ALL MAIN REPORT LINES.
        ///COMMENT:  IT IS CALLED FOR EACH REPORT LINE. IT CONTAINS:
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE PRINTING A LINE
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE DETAIL LINE PAGING
        ///COMMENT:  - ALSO CALL PRINT-A-MAIN-LINE
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_MAIN_RPT_LINE(string returnMethod = "")
        {
            M_CHECK_FOR_MAIN_NEW_PAGE("M_CHECK_FOR_MAIN_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM CHECK-FOR-MAIN-NEW-PAGE THRU CHECK-FOR-MAIN-NEW-PAGE-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                WS.WS_TEMP_PRINT_LINE.SetValue(WS.WS_PRINT_LINE);                                                   //COBOL==> MOVE WS-PRINT-LINE TO WS-TEMP-PRINT-LINE
                WS.WS_TEMP_PRINT_LINE_SPACING.SetValue(WS.WS_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-PRINT-LINE-SPACING TO WS-TEMP-PRINT-LINE-SPACING
                if (WS.MAIN_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-HDR-PRINT-FLAG = 'Y'
                {
                    WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                    if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                    {
                        if (WS.MAIN_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_MAIN_PG_HDR("M_PRINT_MAIN_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-HDR THRU PRINT-MAIN-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
                    WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                         //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-TEMP-SAVE-PRINT-LINE
                    WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_TEMP_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE-SPACING TO WS-PRINT-LINE-SPACING
                    M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
                }                                                                                                   //COBOL==> END-IF
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((WS.WS_MAIN_PRINT_DUPLICATES.Value)
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))        //COBOL==> IF WS-MAIN-PRINT-DUPLICATES AND WS-NOT-IN-CONTROL-BRK
                {
                    WS.WS_MAIN_BODY_SUPPRESS_LINES.SetValue(WS.WS_MAIN_BODY_SUPPRESS_LINES.AsInt() - 1);                //COBOL==> SUBTRACT 1 FROM WS-MAIN-BODY-SUPPRESS-LINES
                    if (WS.WS_MAIN_BODY_SUPPRESS_LINES.IsEqualTo(0))                                                    //COBOL==> IF WS-MAIN-BODY-SUPPRESS-LINES = 0
                    {
                        WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    if (WS.MAIN_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-HDR-PRINT-FLAG = 'Y'
                    {
                        WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                        if (WS.MAIN_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_MAIN_PG_HDR("M_PRINT_MAIN_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-HDR THRU PRINT-MAIN-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                        WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                        M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_RPT_LINE") { M_PRINT_MAIN_RPT_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_RPT_LINE_EXIT
        /// </summary>
        private void M_PRINT_MAIN_RPT_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_RPT_LINE_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_RPT_LINE_EXIT") { M_PRINT_A_MAIN_LINEONNEWPG(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_MAIN_LINEONNEWPG
        /// </summary>
        private void M_PRINT_A_MAIN_LINEONNEWPG(string returnMethod = "")
        {
            if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
            {
                if (((WS.WS_MAIN_CURRENTLY_WRAPPING.IsEqualTo("N"))
             && (WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (WS.WS_CONTROL_BRK_FLAG.IsEqualTo("N")))  //COBOL==> IF WS-MAIN-CURRENTLY-WRAPPING = 'N' AND WS-MAIN-CUR-PRINTING-PAGE-HDR = 'N' AND WS-CONTROL-BRK-FLAG = 'N'
                {
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
                }                                                                                                   //COBOL==> END-IF
                WS.WS_MAIN_PAGE_DTL_LINES.SetValue(46);                                                             //COBOL==> MOVE 46 TO WS-MAIN-PAGE-DTL-LINES
                if (((WS.WS_MAIN_BODY_IS_PROCESSED.Value)
             || (WS.WS_MAIN_RPT_HDR_IS_PROCESSED.Value))
             || (WS.WS_MAIN_RPT_FTR_IS_PROCESSED.Value))  //COBOL==> IF WS-MAIN-BODY-IS-PROCESSED OR WS-MAIN-RPT-HDR-IS-PROCESSED OR WS-MAIN-RPT-FTR-IS-PROCESSED
                {
                    if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                    {
                        WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                        WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((!(WS.WS_MAIN_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_MAIN_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-MAIN-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-MAIN-RPT-FTR-IS-PROCESSED )
                        {
                            WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(1))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 1
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_SPACE_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-SPACE-RECORD AFTER ADVANCING PAGE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                    WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_MAIN_LINEONNEWPG") { M_PRINT_A_MAIN_LINEONNEWPG_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_MAIN_LINEONNEWPG_EXIT
        /// </summary>
        private void M_PRINT_A_MAIN_LINEONNEWPG_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_MAIN_LINEONNEWPG_EXIT") { return; }                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_MAIN_LINEONNEWPG_EXIT") { M_PRINT_A_MAIN_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_MAIN_LINE
        /// </summary>
        private void M_PRINT_A_MAIN_LINE(string returnMethod = "")
        {
            if (((((((WS.WS_MAIN_PAGE_DTL_LINES.IsGreaterThan(0))
             && (WS.WS_PREV_SUBRPT_CODE.IsEqualTo(WS.WS_CUR_SUBRPT_CODE)))
             && (!(WS.WS_MAIN_CURRENTLY_WRAPPING.IsEqualTo("Y"))))
             && (WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (!(WS.WS_MAIN_RPT_HDR_IS_PROCESSED.Value)))
             && (!(WS.WS_MAIN_PG_HDR_IS_PROCESSED.Value)))
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))  //COBOL==> IF WS-MAIN-PAGE-DTL-LINES > 0 AND WS-PREV-SUBRPT-CODE = WS-CUR-SUBRPT-CODE AND WS-MAIN-CURRENTLY-WRAPPING NOT = 'Y' AND WS-MAIN-CUR-PRINTING-PAGE-HDR = 'N' AND NOT WS-MAIN-RPT-HDR-IS-PROCESSED AND NOT WS-MAIN-PG-HDR-IS-PROCESSED AND WS-NOT-IN-CONTROL-BRK
            {
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(0))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 0
            {
                if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                {
                    if (WS.WS_VERY_FIRST_WRITE.IsEqualTo("Y"))                                                          //COBOL==> IF WS-VERY-FIRST-WRITE = 'Y'
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                        WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.LINEBREAK, 0, WS.WS_PRINT_LINE_SPACING.AsInt());  //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING WS-PRINT-LINE-SPACING LINES
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_LINE_COUNT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-LINE-COUNT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_MAIN_LINE") { M_PRINT_A_MAIN_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_MAIN_LINE_EXIT
        /// </summary>
        private void M_PRINT_A_MAIN_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_MAIN_LINE_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_MAIN_LINE_EXIT") { M_CHECK_FOR_MAIN_NEW_PAGE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_MAIN_NEW_PAGE
        /// </summary>
        private void M_CHECK_FOR_MAIN_NEW_PAGE(string returnMethod = "")
        {
            WS.WS_TEMP_LINE_QT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-TEMP-LINE-QT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
            if (WS.WS_TEMP_LINE_QT.IsGreaterThan(WS.WS_PG_LENGTH))                                              //COBOL==> IF WS-TEMP-LINE-QT > WS-PG-LENGTH
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_MAIN_NEW_PAGE") { M_CHECK_FOR_MAIN_NEW_PAGE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_MAIN_NEW_PAGE_EXIT
        /// </summary>
        private void M_CHECK_FOR_MAIN_NEW_PAGE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_CHECK_FOR_MAIN_NEW_PAGE_EXIT") { return; }                                   //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_MAIN_NEW_PAGE_EXIT") { M_MAIN_CALC_4_PRINT_BOTTM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_CALC_4_PRINT_BOTTM
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  FOR THE MAIN REPORT
        ///COMMENT:  THIS PARAGRAPH CALCULATES THE NUMBER OF LINES
        ///COMMENT:  TO ADVANCE FOR A SECTION WHEN THE SECTION IS
        ///COMMENT:  SPECIFIED TO HAVE PRINT AT BOTTOM
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_MAIN_CALC_4_PRINT_BOTTM(string returnMethod = "")
        {
            if (WS.WS_SAVE_PRINT_ATBOTTM.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SAVE-PRINT-ATBOTTM = 'Y'
            {
                WS.WS_SAVE_PRINT_ATBOTTM.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SAVE-PRINT-ATBOTTM
                WS.WS_TEMP_LINE_QT.SetValueWithZeroes();                                                            //COBOL==> MOVE 0 TO WS-TEMP-LINE-QT
                if (WS.WS_PG_LENGTH.IsLessThan(((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_TEMP_LINE_QT.AsDecimal()) + WS.WS_CUR_SECTION_LINE_QT.AsDecimal())))  //COBOL==> IF WS-PG-LENGTH < ( WS-LINE-COUNT + WS-TEMP-LINE-QT + WS-CUR-SECTION-LINE-QT )
                {
                    if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue((((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_COUNT.AsDecimal()) - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-COUNT - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_MAIN_CALC_4_PRINT_BOTTM") { M_MAIN_CALC_4_PRINT_BOTTM_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_CALC_4_PRINT_BOTTM_EXIT
        /// </summary>
        private void M_MAIN_CALC_4_PRINT_BOTTM_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_MAIN_CALC_4_PRINT_BOTTM_EXIT") { return; }                                   //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_MAIN_CALC_4_PRINT_BOTTM_EXIT") { M_MAIN_UPDT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_UPDT_PG_NBR_FLDS
        /// </summary>
        private void M_MAIN_UPDT_PG_NBR_FLDS(string returnMethod = "")
        {
            WS.MAIN_PAGE_HDR_0_P_OBJ217.SetValue(WS.WS_PG_NUMBER);                                              //COBOL==> MOVE WS-PG-NUMBER TO MAIN-PAGE-HDR-0-P-OBJ217.
            if (returnMethod != "" && returnMethod != "M_MAIN_UPDT_PG_NBR_FLDS") { M_MAIN_UPDT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_UPDT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_MAIN_UPDT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_MAIN_UPDT_PG_NBR_FLDS_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_MAIN_UPDT_PG_NBR_FLDS_EXIT") { M_PRINT_MAIN_DTL_LINE_0(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_0
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE BEFORE SPACING FOR MAIN REPORT BODY (DETAIL LINES)
        ///COMMENT:  FOR EACH DETAIL LINE...
        ///COMMENT:  - POPULATE THE OUTPUT FIELDS FROM THE IMPORTED ATTRIBUTES
        ///COMMENT:  - REPLACE ATTRIBUTE VALUES WITH SPACES IF DUPLICATE
        ///COMMENT:    SUPPRESSION ON AND NOT FIRST LINE OF PAGE OR
        ///COMMENT:    FIRST LINE AFTER CONTROL BREAK
        ///COMMENT:  - MOVE DETAIL LINE TO THE PRINT LINE
        ///COMMENT:  - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:  - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  - REPEAT AS NECESSARY FOR TEXT WRAPPING ATTRIBUTES
        ///COMMENT:  HANDLE AFTER SPACING FOR BODY (DETAIL LINES)
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_MAIN_DTL_LINE_0(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_0);                                                 //COBOL==> MOVE MAIN-DTL-LINE-0 TO SAVE-FOR-WRAP-TEXT.
            if (WS.MAIN_DTL_LINE_KEEP_TOGETHER.IsEqualTo("Y"))                                                  //COBOL==> IF MAIN-DTL-LINE-KEEP-TOGETHER = 'Y'
            {
                if (((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_MAIN_DTL_LINE_QT.AsDecimal()) + WS.WS_MAIN_PG_FTR_LINE_QT.AsDecimal()).IsGreaterThan(WS.WS_PG_LENGTH))  //COBOL==> IF ( WS-LINE-COUNT + WS-MAIN-DTL-LINE-QT + WS-MAIN-PG-FTR-LINE-QT ) > WS-PG-LENGTH
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("Y"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'Y'
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_0);                                            //COBOL==> MOVE MAIN-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_0);                                            //COBOL==> MOVE MAIN-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_0);                                                      //COBOL==> MOVE MAIN-DTL-LINE-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_0.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-0.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_0") { M_PRINT_MAIN_DTL_LINE_0_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_0_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_0_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_0_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_0_EXIT") { M_PRINT_MAIN_DTL_LINE_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_1
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_1(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_1);                                                 //COBOL==> MOVE MAIN-DTL-LINE-1 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_1);                                            //COBOL==> MOVE MAIN-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_1);                                            //COBOL==> MOVE MAIN-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_1);                                                      //COBOL==> MOVE MAIN-DTL-LINE-1 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_1.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-1.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_1") { M_PRINT_MAIN_DTL_LINE_1_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_1_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_1_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_1_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_1_EXIT") { M_PRINT_MAIN_DTL_LINE_2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_2
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_2(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_2);                                                 //COBOL==> MOVE MAIN-DTL-LINE-2 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_2);                                            //COBOL==> MOVE MAIN-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_2);                                            //COBOL==> MOVE MAIN-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_2);                                                      //COBOL==> MOVE MAIN-DTL-LINE-2 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_2.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-2.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_2") { M_PRINT_MAIN_DTL_LINE_2_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_2_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_2_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_2_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_2_EXIT") { M_PRINT_MAIN_DTL_LINE_3(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_3
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_3(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_3);                                                 //COBOL==> MOVE MAIN-DTL-LINE-3 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_3);                                            //COBOL==> MOVE MAIN-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_3);                                            //COBOL==> MOVE MAIN-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_3);                                                      //COBOL==> MOVE MAIN-DTL-LINE-3 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_3.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-3.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_3") { M_PRINT_MAIN_DTL_LINE_3_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_3_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_3_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_3_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_3_EXIT") { M_PRINT_MAIN_DTL_LINE_4(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_4
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_4(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_4);                                                 //COBOL==> MOVE MAIN-DTL-LINE-4 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_PREVIOUS_UNDISTRIB_AMOUN_005);                                          //COBOL==> MOVE I-PREVIOUS-UNDISTRIB-AMOUN-005 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_PREVIOUS_UNDISTRIB_AMOUN_005);                                         //COBOL==> MOVE I-PREVIOUS-UNDISTRIB-AMOUN-005 TO EP-INTEGER2.
            if (LS.I_PREVIOUS_UNDISTRIB_AMOUN_005.IsLessThan(ZEROS))                                            //COBOL==> IF I-PREVIOUS-UNDISTRIB-AMOUN-005 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ200);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ200 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_4_A_OBJ200.SetValue(WS.EP_FORMATTED_VALUE);                                        //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-4-A-OBJ200.
            if (LS.I_PREVIOUS_UNDISTRIB_AMOUN_005.IsEqualTo(0))                                                 //COBOL==> IF I-PREVIOUS-UNDISTRIB-AMOUN-005 = 0
            {
                WS.MAIN_DTL_LINE_4_A_OBJ200.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-4-A-OBJ200.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_4);                                            //COBOL==> MOVE MAIN-DTL-LINE-4 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_4);                                            //COBOL==> MOVE MAIN-DTL-LINE-4 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_4);                                                      //COBOL==> MOVE MAIN-DTL-LINE-4 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_4.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-4.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_4") { M_PRINT_MAIN_DTL_LINE_4_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_4_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_4_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_4_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_4_EXIT") { M_PRINT_MAIN_DTL_LINE_5(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_5
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_5(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_5);                                                 //COBOL==> MOVE MAIN-DTL-LINE-5 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_5);                                            //COBOL==> MOVE MAIN-DTL-LINE-5 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_5);                                            //COBOL==> MOVE MAIN-DTL-LINE-5 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_5);                                                      //COBOL==> MOVE MAIN-DTL-LINE-5 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_5.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-5.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_5") { M_PRINT_MAIN_DTL_LINE_5_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_5_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_5_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_5_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_5_EXIT") { M_PRINT_MAIN_DTL_LINE_6(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_6
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_6(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_6);                                                 //COBOL==> MOVE MAIN-DTL-LINE-6 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_TOTAL_COLLECTIONS_AMOUNT_006);                                          //COBOL==> MOVE I-TOTAL-COLLECTIONS-AMOUNT-006 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_TOTAL_COLLECTIONS_AMOUNT_006);                                         //COBOL==> MOVE I-TOTAL-COLLECTIONS-AMOUNT-006 TO EP-INTEGER2.
            if (LS.I_TOTAL_COLLECTIONS_AMOUNT_006.IsLessThan(ZEROS))                                            //COBOL==> IF I-TOTAL-COLLECTIONS-AMOUNT-006 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ201);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ201 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_6_A_OBJ201.SetValue(WS.EP_FORMATTED_VALUE);                                        //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-6-A-OBJ201.
            if (LS.I_TOTAL_COLLECTIONS_AMOUNT_006.IsEqualTo(0))                                                 //COBOL==> IF I-TOTAL-COLLECTIONS-AMOUNT-006 = 0
            {
                WS.MAIN_DTL_LINE_6_A_OBJ201.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-6-A-OBJ201.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_6);                                            //COBOL==> MOVE MAIN-DTL-LINE-6 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_6);                                            //COBOL==> MOVE MAIN-DTL-LINE-6 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_6);                                                      //COBOL==> MOVE MAIN-DTL-LINE-6 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_6.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-6.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_6") { M_PRINT_MAIN_DTL_LINE_6_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_6_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_6_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_6_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_6_EXIT") { M_PRINT_MAIN_DTL_LINE_7(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_7
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_7(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_7);                                                 //COBOL==> MOVE MAIN-DTL-LINE-7 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_7);                                            //COBOL==> MOVE MAIN-DTL-LINE-7 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_7);                                            //COBOL==> MOVE MAIN-DTL-LINE-7 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_7);                                                      //COBOL==> MOVE MAIN-DTL-LINE-7 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_7.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-7.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_7") { M_PRINT_MAIN_DTL_LINE_7_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_7_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_7_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_7_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_7_EXIT") { M_PRINT_MAIN_DTL_LINE_8(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_8
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_8(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_8);                                                 //COBOL==> MOVE MAIN-DTL-LINE-8 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_OFFSET_FEDERAL_TAXREFUND_007);                                          //COBOL==> MOVE I-OFFSET-FEDERAL-TAXREFUND-007 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_OFFSET_FEDERAL_TAXREFUND_007);                                         //COBOL==> MOVE I-OFFSET-FEDERAL-TAXREFUND-007 TO EP-INTEGER2.
            if (LS.I_OFFSET_FEDERAL_TAXREFUND_007.IsLessThan(ZEROS))                                            //COBOL==> IF I-OFFSET-FEDERAL-TAXREFUND-007 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ202);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ202 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_8_A_OBJ202.SetValue(WS.EP_FORMATTED_VALUE);                                        //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-8-A-OBJ202.
            if (LS.I_OFFSET_FEDERAL_TAXREFUND_007.IsEqualTo(0))                                                 //COBOL==> IF I-OFFSET-FEDERAL-TAXREFUND-007 = 0
            {
                WS.MAIN_DTL_LINE_8_A_OBJ202.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-8-A-OBJ202.
            }
            WS.EP_DECIMAL.SetValue(LS.I_INCOME_WITHHOLDING_AMOUN_011);                                          //COBOL==> MOVE I-INCOME-WITHHOLDING-AMOUN-011 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_INCOME_WITHHOLDING_AMOUN_011);                                         //COBOL==> MOVE I-INCOME-WITHHOLDING-AMOUN-011 TO EP-INTEGER2.
            if (LS.I_INCOME_WITHHOLDING_AMOUN_011.IsLessThan(ZEROS))                                            //COBOL==> IF I-INCOME-WITHHOLDING-AMOUN-011 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ210);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ210 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_8_A_OBJ210.SetValue(WS.EP_FORMATTED_VALUE);                                        //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-8-A-OBJ210.
            if (LS.I_INCOME_WITHHOLDING_AMOUN_011.IsEqualTo(0))                                                 //COBOL==> IF I-INCOME-WITHHOLDING-AMOUN-011 = 0
            {
                WS.MAIN_DTL_LINE_8_A_OBJ210.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-8-A-OBJ210.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_8);                                            //COBOL==> MOVE MAIN-DTL-LINE-8 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_8);                                            //COBOL==> MOVE MAIN-DTL-LINE-8 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_8);                                                      //COBOL==> MOVE MAIN-DTL-LINE-8 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_8.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-8.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_8") { M_PRINT_MAIN_DTL_LINE_8_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_8_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_8_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_8_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_8_EXIT") { M_PRINT_MAIN_DTL_LINE_9(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_9
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_9(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_9);                                                 //COBOL==> MOVE MAIN-DTL-LINE-9 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_9);                                            //COBOL==> MOVE MAIN-DTL-LINE-9 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_9);                                            //COBOL==> MOVE MAIN-DTL-LINE-9 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_9);                                                      //COBOL==> MOVE MAIN-DTL-LINE-9 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_9.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-9.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_9") { M_PRINT_MAIN_DTL_LINE_9_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_9_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_9_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_9_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_9_EXIT") { M_PRINT_MAIN_DTL_LINE_10(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_10
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_10(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_10);                                                //COBOL==> MOVE MAIN-DTL-LINE-10 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_OFFSET_STATE_TAX_REFUND__008);                                          //COBOL==> MOVE I-OFFSET-STATE-TAX-REFUND--008 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_OFFSET_STATE_TAX_REFUND__008);                                         //COBOL==> MOVE I-OFFSET-STATE-TAX-REFUND--008 TO EP-INTEGER2.
            if (LS.I_OFFSET_STATE_TAX_REFUND__008.IsLessThan(ZEROS))                                            //COBOL==> IF I-OFFSET-STATE-TAX-REFUND--008 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ207);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ207 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_10_A_OBJ207.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-10-A-OBJ207.
            if (LS.I_OFFSET_STATE_TAX_REFUND__008.IsEqualTo(0))                                                 //COBOL==> IF I-OFFSET-STATE-TAX-REFUND--008 = 0
            {
                WS.MAIN_DTL_LINE_10_A_OBJ207.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-10-A-OBJ207.
            }
            WS.EP_DECIMAL.SetValue(LS.I_OTHER_STATES_AMOUNT_0009_012);                                          //COBOL==> MOVE I-OTHER-STATES-AMOUNT-0009-012 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_OTHER_STATES_AMOUNT_0009_012);                                         //COBOL==> MOVE I-OTHER-STATES-AMOUNT-0009-012 TO EP-INTEGER2.
            if (LS.I_OTHER_STATES_AMOUNT_0009_012.IsLessThan(ZEROS))                                            //COBOL==> IF I-OTHER-STATES-AMOUNT-0009-012 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ214);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ214 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_10_A_OBJ214.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-10-A-OBJ214.
            if (LS.I_OTHER_STATES_AMOUNT_0009_012.IsEqualTo(0))                                                 //COBOL==> IF I-OTHER-STATES-AMOUNT-0009-012 = 0
            {
                WS.MAIN_DTL_LINE_10_A_OBJ214.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-10-A-OBJ214.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_10);                                           //COBOL==> MOVE MAIN-DTL-LINE-10 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_10);                                           //COBOL==> MOVE MAIN-DTL-LINE-10 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_10);                                                     //COBOL==> MOVE MAIN-DTL-LINE-10 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_10.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-10.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_10") { M_PRINT_MAIN_DTL_LINE_10_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_10_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_10_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_10_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_10_EXIT") { M_PRINT_MAIN_DTL_LINE_11(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_11
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_11(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_11);                                                //COBOL==> MOVE MAIN-DTL-LINE-11 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_11);                                           //COBOL==> MOVE MAIN-DTL-LINE-11 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_11);                                           //COBOL==> MOVE MAIN-DTL-LINE-11 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_11);                                                     //COBOL==> MOVE MAIN-DTL-LINE-11 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_11.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-11.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_11") { M_PRINT_MAIN_DTL_LINE_11_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_11_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_11_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_11_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_11_EXIT") { M_PRINT_MAIN_DTL_LINE_12(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_12
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_12(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_12);                                                //COBOL==> MOVE MAIN-DTL-LINE-12 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_UNEMPLOYMENT_COMP_AMOUNT_009);                                          //COBOL==> MOVE I-UNEMPLOYMENT-COMP-AMOUNT-009 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_UNEMPLOYMENT_COMP_AMOUNT_009);                                         //COBOL==> MOVE I-UNEMPLOYMENT-COMP-AMOUNT-009 TO EP-INTEGER2.
            if (LS.I_UNEMPLOYMENT_COMP_AMOUNT_009.IsLessThan(ZEROS))                                            //COBOL==> IF I-UNEMPLOYMENT-COMP-AMOUNT-009 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ208);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ208 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_12_A_OBJ208.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-12-A-OBJ208.
            if (LS.I_UNEMPLOYMENT_COMP_AMOUNT_009.IsEqualTo(0))                                                 //COBOL==> IF I-UNEMPLOYMENT-COMP-AMOUNT-009 = 0
            {
                WS.MAIN_DTL_LINE_12_A_OBJ208.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-12-A-OBJ208.
            }
            WS.EP_DECIMAL.SetValue(LS.I_OTHER_SOURCES_AMOUNT_000_013);                                          //COBOL==> MOVE I-OTHER-SOURCES-AMOUNT-000-013 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_OTHER_SOURCES_AMOUNT_000_013);                                         //COBOL==> MOVE I-OTHER-SOURCES-AMOUNT-000-013 TO EP-INTEGER2.
            if (LS.I_OTHER_SOURCES_AMOUNT_000_013.IsLessThan(ZEROS))                                            //COBOL==> IF I-OTHER-SOURCES-AMOUNT-000-013 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ215);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ215 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_12_A_OBJ215.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-12-A-OBJ215.
            if (LS.I_OTHER_SOURCES_AMOUNT_000_013.IsEqualTo(0))                                                 //COBOL==> IF I-OTHER-SOURCES-AMOUNT-000-013 = 0
            {
                WS.MAIN_DTL_LINE_12_A_OBJ215.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-12-A-OBJ215.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_12);                                           //COBOL==> MOVE MAIN-DTL-LINE-12 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_12);                                           //COBOL==> MOVE MAIN-DTL-LINE-12 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_12);                                                     //COBOL==> MOVE MAIN-DTL-LINE-12 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_12.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-12.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_12") { M_PRINT_MAIN_DTL_LINE_12_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_12_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_12_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_12_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_12_EXIT") { M_PRINT_MAIN_DTL_LINE_13(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_13
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_13(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_13);                                                //COBOL==> MOVE MAIN-DTL-LINE-13 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_13);                                           //COBOL==> MOVE MAIN-DTL-LINE-13 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_13);                                           //COBOL==> MOVE MAIN-DTL-LINE-13 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_13);                                                     //COBOL==> MOVE MAIN-DTL-LINE-13 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_13.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-13.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_13") { M_PRINT_MAIN_DTL_LINE_13_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_13_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_13_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_13_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_13_EXIT") { M_PRINT_MAIN_DTL_LINE_14(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_14
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_14(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_14);                                                //COBOL==> MOVE MAIN-DTL-LINE-14 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_ADMINSTRATIVE_ENFORCE_AM_010);                                          //COBOL==> MOVE I-ADMINSTRATIVE-ENFORCE-AM-010 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_ADMINSTRATIVE_ENFORCE_AM_010);                                         //COBOL==> MOVE I-ADMINSTRATIVE-ENFORCE-AM-010 TO EP-INTEGER2.
            if (LS.I_ADMINSTRATIVE_ENFORCE_AM_010.IsLessThan(ZEROS))                                            //COBOL==> IF I-ADMINSTRATIVE-ENFORCE-AM-010 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ209);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ209 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_14_A_OBJ209.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-14-A-OBJ209.
            if (LS.I_ADMINSTRATIVE_ENFORCE_AM_010.IsEqualTo(0))                                                 //COBOL==> IF I-ADMINSTRATIVE-ENFORCE-AM-010 = 0
            {
                WS.MAIN_DTL_LINE_14_A_OBJ209.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-14-A-OBJ209.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_14);                                           //COBOL==> MOVE MAIN-DTL-LINE-14 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_14);                                           //COBOL==> MOVE MAIN-DTL-LINE-14 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_14);                                                     //COBOL==> MOVE MAIN-DTL-LINE-14 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_14.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-14.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_14") { M_PRINT_MAIN_DTL_LINE_14_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_14_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_14_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_14_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_14_EXIT") { M_PRINT_MAIN_DTL_LINE_15(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_15
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_15(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_15);                                                //COBOL==> MOVE MAIN-DTL-LINE-15 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_15);                                           //COBOL==> MOVE MAIN-DTL-LINE-15 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_15);                                           //COBOL==> MOVE MAIN-DTL-LINE-15 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_15);                                                     //COBOL==> MOVE MAIN-DTL-LINE-15 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_15.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-15.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_15") { M_PRINT_MAIN_DTL_LINE_15_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_15_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_15_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_15_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_15_EXIT") { M_PRINT_MAIN_DTL_LINE_16(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_16
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_16(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_16);                                                //COBOL==> MOVE MAIN-DTL-LINE-16 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_ADJUSTMENTS_AMOUNT_0009_014);                                           //COBOL==> MOVE I-ADJUSTMENTS-AMOUNT-0009-014 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_ADJUSTMENTS_AMOUNT_0009_014);                                          //COBOL==> MOVE I-ADJUSTMENTS-AMOUNT-0009-014 TO EP-INTEGER2.
            if (LS.I_ADJUSTMENTS_AMOUNT_0009_014.IsLessThan(ZEROS))                                             //COBOL==> IF I-ADJUSTMENTS-AMOUNT-0009-014 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ216);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ216 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_16_A_OBJ216.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-16-A-OBJ216.
            if (LS.I_ADJUSTMENTS_AMOUNT_0009_014.IsEqualTo(0))                                                  //COBOL==> IF I-ADJUSTMENTS-AMOUNT-0009-014 = 0
            {
                WS.MAIN_DTL_LINE_16_A_OBJ216.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-16-A-OBJ216.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_16);                                           //COBOL==> MOVE MAIN-DTL-LINE-16 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_16);                                           //COBOL==> MOVE MAIN-DTL-LINE-16 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_16);                                                     //COBOL==> MOVE MAIN-DTL-LINE-16 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_16.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-16.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_16") { M_PRINT_MAIN_DTL_LINE_16_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_16_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_16_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_16_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_16_EXIT") { M_PRINT_MAIN_DTL_LINE_17(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_17
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_17(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_17);                                                //COBOL==> MOVE MAIN-DTL-LINE-17 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_17);                                           //COBOL==> MOVE MAIN-DTL-LINE-17 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_17);                                           //COBOL==> MOVE MAIN-DTL-LINE-17 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_17);                                                     //COBOL==> MOVE MAIN-DTL-LINE-17 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_17.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-17.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_17") { M_PRINT_MAIN_DTL_LINE_17_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_17_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_17_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_17_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_17_EXIT") { M_PRINT_MAIN_DTL_LINE_18(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_18
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_18(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_18);                                                //COBOL==> MOVE MAIN-DTL-LINE-18 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_NON_IVD_CASES_AMOUNT_000_015);                                          //COBOL==> MOVE I-NON-IVD-CASES-AMOUNT-000-015 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_NON_IVD_CASES_AMOUNT_000_015);                                         //COBOL==> MOVE I-NON-IVD-CASES-AMOUNT-000-015 TO EP-INTEGER2.
            if (LS.I_NON_IVD_CASES_AMOUNT_000_015.IsLessThan(ZEROS))                                            //COBOL==> IF I-NON-IVD-CASES-AMOUNT-000-015 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ219);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ219 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_18_A_OBJ219.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-18-A-OBJ219.
            if (LS.I_NON_IVD_CASES_AMOUNT_000_015.IsEqualTo(0))                                                 //COBOL==> IF I-NON-IVD-CASES-AMOUNT-000-015 = 0
            {
                WS.MAIN_DTL_LINE_18_A_OBJ219.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-18-A-OBJ219.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_18);                                           //COBOL==> MOVE MAIN-DTL-LINE-18 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_18);                                           //COBOL==> MOVE MAIN-DTL-LINE-18 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_18);                                                     //COBOL==> MOVE MAIN-DTL-LINE-18 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_18.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-18.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_18") { M_PRINT_MAIN_DTL_LINE_18_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_18_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_18_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_18_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_18_EXIT") { M_PRINT_MAIN_DTL_LINE_19(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_19
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_19(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_19);                                                //COBOL==> MOVE MAIN-DTL-LINE-19 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_19);                                           //COBOL==> MOVE MAIN-DTL-LINE-19 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_19);                                           //COBOL==> MOVE MAIN-DTL-LINE-19 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_19);                                                     //COBOL==> MOVE MAIN-DTL-LINE-19 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_19.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-19.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_19") { M_PRINT_MAIN_DTL_LINE_19_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_19_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_19_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_19_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_19_EXIT") { M_PRINT_MAIN_DTL_LINE_20(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_20
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_20(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_20);                                                //COBOL==> MOVE MAIN-DTL-LINE-20 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_20);                                           //COBOL==> MOVE MAIN-DTL-LINE-20 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_20);                                           //COBOL==> MOVE MAIN-DTL-LINE-20 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_20);                                                     //COBOL==> MOVE MAIN-DTL-LINE-20 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_20.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-20.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_20") { M_PRINT_MAIN_DTL_LINE_20_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_20_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_20_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_20_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_20_EXIT") { M_PRINT_MAIN_DTL_LINE_21(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_21
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_21(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_21);                                                //COBOL==> MOVE MAIN-DTL-LINE-21 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_21);                                           //COBOL==> MOVE MAIN-DTL-LINE-21 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_21);                                           //COBOL==> MOVE MAIN-DTL-LINE-21 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_21);                                                     //COBOL==> MOVE MAIN-DTL-LINE-21 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_21.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-21.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_21") { M_PRINT_MAIN_DTL_LINE_21_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_21_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_21_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_21_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_21_EXIT") { M_PRINT_MAIN_DTL_LINE_22(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_22
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_22(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_22);                                                //COBOL==> MOVE MAIN-DTL-LINE-22 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_22);                                           //COBOL==> MOVE MAIN-DTL-LINE-22 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_22);                                           //COBOL==> MOVE MAIN-DTL-LINE-22 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_22);                                                     //COBOL==> MOVE MAIN-DTL-LINE-22 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_22.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-22.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_22") { M_PRINT_MAIN_DTL_LINE_22_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_22_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_22_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_22_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_22_EXIT") { M_PRINT_MAIN_DTL_LINE_23(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_23
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_23(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_23);                                                //COBOL==> MOVE MAIN-DTL-LINE-23 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_OTHER_STATES_CURRENT_IVA_016);                                          //COBOL==> MOVE I-OTHER-STATES-CURRENT-IVA-016 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_OTHER_STATES_CURRENT_IVA_016);                                         //COBOL==> MOVE I-OTHER-STATES-CURRENT-IVA-016 TO EP-INTEGER2.
            if (LS.I_OTHER_STATES_CURRENT_IVA_016.IsLessThan(ZEROS))                                            //COBOL==> IF I-OTHER-STATES-CURRENT-IVA-016 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ221);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ221 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_23_A_OBJ221.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-23-A-OBJ221.
            if (LS.I_OTHER_STATES_CURRENT_IVA_016.IsEqualTo(0))                                                 //COBOL==> IF I-OTHER-STATES-CURRENT-IVA-016 = 0
            {
                WS.MAIN_DTL_LINE_23_A_OBJ221.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-23-A-OBJ221.
            }
            WS.EP_DECIMAL.SetValue(LS.I_OTHER_STATES_CURRENT_IVE_017);                                          //COBOL==> MOVE I-OTHER-STATES-CURRENT-IVE-017 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_OTHER_STATES_CURRENT_IVE_017);                                         //COBOL==> MOVE I-OTHER-STATES-CURRENT-IVE-017 TO EP-INTEGER2.
            if (LS.I_OTHER_STATES_CURRENT_IVE_017.IsLessThan(ZEROS))                                            //COBOL==> IF I-OTHER-STATES-CURRENT-IVE-017 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ227);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ227 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_23_A_OBJ227.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-23-A-OBJ227.
            if (LS.I_OTHER_STATES_CURRENT_IVE_017.IsEqualTo(0))                                                 //COBOL==> IF I-OTHER-STATES-CURRENT-IVE-017 = 0
            {
                WS.MAIN_DTL_LINE_23_A_OBJ227.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-23-A-OBJ227.
            }
            WS.EP_DECIMAL.SetValue(LS.I_OTHERSTATE_FORMER_ASSIST_018);                                          //COBOL==> MOVE I-OTHERSTATE-FORMER-ASSIST-018 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_OTHERSTATE_FORMER_ASSIST_018);                                         //COBOL==> MOVE I-OTHERSTATE-FORMER-ASSIST-018 TO EP-INTEGER2.
            if (LS.I_OTHERSTATE_FORMER_ASSIST_018.IsLessThan(ZEROS))                                            //COBOL==> IF I-OTHERSTATE-FORMER-ASSIST-018 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ228);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ228 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_23_A_OBJ228.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-23-A-OBJ228.
            if (LS.I_OTHERSTATE_FORMER_ASSIST_018.IsEqualTo(0))                                                 //COBOL==> IF I-OTHERSTATE-FORMER-ASSIST-018 = 0
            {
                WS.MAIN_DTL_LINE_23_A_OBJ228.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-23-A-OBJ228.
            }
            WS.EP_DECIMAL.SetValue(LS.I_OTHER_STATE_NEVER_ASSIST_019);                                          //COBOL==> MOVE I-OTHER-STATE-NEVER-ASSIST-019 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_OTHER_STATE_NEVER_ASSIST_019);                                         //COBOL==> MOVE I-OTHER-STATE-NEVER-ASSIST-019 TO EP-INTEGER2.
            if (LS.I_OTHER_STATE_NEVER_ASSIST_019.IsLessThan(ZEROS))                                            //COBOL==> IF I-OTHER-STATE-NEVER-ASSIST-019 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ229);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ229 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_23_A_OBJ229.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-23-A-OBJ229.
            if (LS.I_OTHER_STATE_NEVER_ASSIST_019.IsEqualTo(0))                                                 //COBOL==> IF I-OTHER-STATE-NEVER-ASSIST-019 = 0
            {
                WS.MAIN_DTL_LINE_23_A_OBJ229.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-23-A-OBJ229.
            }
            WS.EP_DECIMAL.SetValue(LS.I_OTHER_STATE_AMT_FORWARD__020);                                          //COBOL==> MOVE I-OTHER-STATE-AMT-FORWARD--020 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_OTHER_STATE_AMT_FORWARD__020);                                         //COBOL==> MOVE I-OTHER-STATE-AMT-FORWARD--020 TO EP-INTEGER2.
            if (LS.I_OTHER_STATE_AMT_FORWARD__020.IsLessThan(ZEROS))                                            //COBOL==> IF I-OTHER-STATE-AMT-FORWARD--020 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ220);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ220 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_23_A_OBJ220.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-23-A-OBJ220.
            if (LS.I_OTHER_STATE_AMT_FORWARD__020.IsEqualTo(0))                                                 //COBOL==> IF I-OTHER-STATE-AMT-FORWARD--020 = 0
            {
                WS.MAIN_DTL_LINE_23_A_OBJ220.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-23-A-OBJ220.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_23);                                           //COBOL==> MOVE MAIN-DTL-LINE-23 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_23);                                           //COBOL==> MOVE MAIN-DTL-LINE-23 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_23);                                                     //COBOL==> MOVE MAIN-DTL-LINE-23 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_23.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-23.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_23") { M_PRINT_MAIN_DTL_LINE_23_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_23_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_23_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_23_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_23_EXIT") { M_PRINT_MAIN_DTL_LINE_24(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_24
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_24(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_24);                                                //COBOL==> MOVE MAIN-DTL-LINE-24 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_24);                                           //COBOL==> MOVE MAIN-DTL-LINE-24 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_24);                                           //COBOL==> MOVE MAIN-DTL-LINE-24 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_24);                                                     //COBOL==> MOVE MAIN-DTL-LINE-24 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_24.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-24.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_24") { M_PRINT_MAIN_DTL_LINE_24_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_24_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_24_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_24_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_24_EXIT") { M_PRINT_MAIN_DTL_LINE_25(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_25
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_25(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_25);                                                //COBOL==> MOVE MAIN-DTL-LINE-25 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_AVAIL_FOR_DISTRIBUTION_A_021);                                          //COBOL==> MOVE I-AVAIL-FOR-DISTRIBUTION-A-021 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AVAIL_FOR_DISTRIBUTION_A_021);                                         //COBOL==> MOVE I-AVAIL-FOR-DISTRIBUTION-A-021 TO EP-INTEGER2.
            if (LS.I_AVAIL_FOR_DISTRIBUTION_A_021.IsLessThan(ZEROS))                                            //COBOL==> IF I-AVAIL-FOR-DISTRIBUTION-A-021 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ230);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ230 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_25_A_OBJ230.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-25-A-OBJ230.
            if (LS.I_AVAIL_FOR_DISTRIBUTION_A_021.IsEqualTo(0))                                                 //COBOL==> IF I-AVAIL-FOR-DISTRIBUTION-A-021 = 0
            {
                WS.MAIN_DTL_LINE_25_A_OBJ230.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-25-A-OBJ230.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_25);                                           //COBOL==> MOVE MAIN-DTL-LINE-25 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_25);                                           //COBOL==> MOVE MAIN-DTL-LINE-25 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_25);                                                     //COBOL==> MOVE MAIN-DTL-LINE-25 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_25.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-25.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_25") { M_PRINT_MAIN_DTL_LINE_25_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_25_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_25_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_25_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_25_EXIT") { M_PRINT_MAIN_DTL_LINE_26(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_26
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_26(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_26);                                                //COBOL==> MOVE MAIN-DTL-LINE-26 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_26);                                           //COBOL==> MOVE MAIN-DTL-LINE-26 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_26);                                           //COBOL==> MOVE MAIN-DTL-LINE-26 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_26);                                                     //COBOL==> MOVE MAIN-DTL-LINE-26 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_26.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-26.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_26") { M_PRINT_MAIN_DTL_LINE_26_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_26_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_26_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_26_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_26_EXIT") { M_PRINT_MAIN_DTL_LINE_27(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_27
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_27(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_27);                                                //COBOL==> MOVE MAIN-DTL-LINE-27 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_27);                                           //COBOL==> MOVE MAIN-DTL-LINE-27 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_27);                                           //COBOL==> MOVE MAIN-DTL-LINE-27 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_27);                                                     //COBOL==> MOVE MAIN-DTL-LINE-27 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_27.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-27.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_27") { M_PRINT_MAIN_DTL_LINE_27_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_27_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_27_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_27_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_27_EXIT") { M_PRINT_MAIN_DTL_LINE_28(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_28
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_28(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_28);                                                //COBOL==> MOVE MAIN-DTL-LINE-28 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_28);                                           //COBOL==> MOVE MAIN-DTL-LINE-28 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_28);                                           //COBOL==> MOVE MAIN-DTL-LINE-28 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_28);                                                     //COBOL==> MOVE MAIN-DTL-LINE-28 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_28.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-28.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_28") { M_PRINT_MAIN_DTL_LINE_28_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_28_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_28_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_28_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_28_EXIT") { M_PRINT_MAIN_DTL_LINE_29(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_29
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_29(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_29);                                                //COBOL==> MOVE MAIN-DTL-LINE-29 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_29);                                           //COBOL==> MOVE MAIN-DTL-LINE-29 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_29);                                           //COBOL==> MOVE MAIN-DTL-LINE-29 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_29);                                                     //COBOL==> MOVE MAIN-DTL-LINE-29 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_29.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-29.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_29") { M_PRINT_MAIN_DTL_LINE_29_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_29_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_29_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_29_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_29_EXIT") { M_PRINT_MAIN_DTL_LINE_30(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_30
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_30(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_30);                                                //COBOL==> MOVE MAIN-DTL-LINE-30 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIB_ASSIST_REIMB_IVA_022);                                          //COBOL==> MOVE I-DISTRIB-ASSIST-REIMB-IVA-022 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIB_ASSIST_REIMB_IVA_022);                                         //COBOL==> MOVE I-DISTRIB-ASSIST-REIMB-IVA-022 TO EP-INTEGER2.
            if (LS.I_DISTRIB_ASSIST_REIMB_IVA_022.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIB-ASSIST-REIMB-IVA-022 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ231);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ231 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_30_A_OBJ231.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-30-A-OBJ231.
            if (LS.I_DISTRIB_ASSIST_REIMB_IVA_022.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIB-ASSIST-REIMB-IVA-022 = 0
            {
                WS.MAIN_DTL_LINE_30_A_OBJ231.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-30-A-OBJ231.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIB_ASSIST_REIMB_IVE_023);                                          //COBOL==> MOVE I-DISTRIB-ASSIST-REIMB-IVE-023 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIB_ASSIST_REIMB_IVE_023);                                         //COBOL==> MOVE I-DISTRIB-ASSIST-REIMB-IVE-023 TO EP-INTEGER2.
            if (LS.I_DISTRIB_ASSIST_REIMB_IVE_023.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIB-ASSIST-REIMB-IVE-023 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ247);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ247 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_30_A_OBJ247.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-30-A-OBJ247.
            if (LS.I_DISTRIB_ASSIST_REIMB_IVE_023.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIB-ASSIST-REIMB-IVE-023 = 0
            {
                WS.MAIN_DTL_LINE_30_A_OBJ247.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-30-A-OBJ247.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIB_ASSIST_REIMB_FMR_024);                                          //COBOL==> MOVE I-DISTRIB-ASSIST-REIMB-FMR-024 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIB_ASSIST_REIMB_FMR_024);                                         //COBOL==> MOVE I-DISTRIB-ASSIST-REIMB-FMR-024 TO EP-INTEGER2.
            if (LS.I_DISTRIB_ASSIST_REIMB_FMR_024.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIB-ASSIST-REIMB-FMR-024 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ248);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ248 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_30_A_OBJ248.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-30-A-OBJ248.
            if (LS.I_DISTRIB_ASSIST_REIMB_FMR_024.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIB-ASSIST-REIMB-FMR-024 = 0
            {
                WS.MAIN_DTL_LINE_30_A_OBJ248.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-30-A-OBJ248.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIB_ASSIST_REIMB_AMO_025);                                          //COBOL==> MOVE I-DISTRIB-ASSIST-REIMB-AMO-025 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIB_ASSIST_REIMB_AMO_025);                                         //COBOL==> MOVE I-DISTRIB-ASSIST-REIMB-AMO-025 TO EP-INTEGER2.
            if (LS.I_DISTRIB_ASSIST_REIMB_AMO_025.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIB-ASSIST-REIMB-AMO-025 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ249);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ249 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_30_A_OBJ249.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-30-A-OBJ249.
            if (LS.I_DISTRIB_ASSIST_REIMB_AMO_025.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIB-ASSIST-REIMB-AMO-025 = 0
            {
                WS.MAIN_DTL_LINE_30_A_OBJ249.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-30-A-OBJ249.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_30);                                           //COBOL==> MOVE MAIN-DTL-LINE-30 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_30);                                           //COBOL==> MOVE MAIN-DTL-LINE-30 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_30);                                                     //COBOL==> MOVE MAIN-DTL-LINE-30 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_30.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-30.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_30") { M_PRINT_MAIN_DTL_LINE_30_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_30_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_30_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_30_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_30_EXIT") { M_PRINT_MAIN_DTL_LINE_31(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_31
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_31(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_31);                                                //COBOL==> MOVE MAIN-DTL-LINE-31 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_31);                                           //COBOL==> MOVE MAIN-DTL-LINE-31 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_31);                                           //COBOL==> MOVE MAIN-DTL-LINE-31 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_31);                                                     //COBOL==> MOVE MAIN-DTL-LINE-31 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_31.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-31.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_31") { M_PRINT_MAIN_DTL_LINE_31_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_31_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_31_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_31_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_31_EXIT") { M_PRINT_MAIN_DTL_LINE_32(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_32
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_32(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_32);                                                //COBOL==> MOVE MAIN-DTL-LINE-32 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIBUTED_MED_SUPPORT__026);                                          //COBOL==> MOVE I-DISTRIBUTED-MED-SUPPORT--026 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIBUTED_MED_SUPPORT__026);                                         //COBOL==> MOVE I-DISTRIBUTED-MED-SUPPORT--026 TO EP-INTEGER2.
            if (LS.I_DISTRIBUTED_MED_SUPPORT__026.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--026 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ250);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ250 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_32_A_OBJ250.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-32-A-OBJ250.
            if (LS.I_DISTRIBUTED_MED_SUPPORT__026.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--026 = 0
            {
                WS.MAIN_DTL_LINE_32_A_OBJ250.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-32-A-OBJ250.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIBUTED_MED_SUPPORT__027);                                          //COBOL==> MOVE I-DISTRIBUTED-MED-SUPPORT--027 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIBUTED_MED_SUPPORT__027);                                         //COBOL==> MOVE I-DISTRIBUTED-MED-SUPPORT--027 TO EP-INTEGER2.
            if (LS.I_DISTRIBUTED_MED_SUPPORT__027.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--027 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ251);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ251 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_32_A_OBJ251.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-32-A-OBJ251.
            if (LS.I_DISTRIBUTED_MED_SUPPORT__027.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--027 = 0
            {
                WS.MAIN_DTL_LINE_32_A_OBJ251.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-32-A-OBJ251.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIBUTED_MED_SUPPORT__028);                                          //COBOL==> MOVE I-DISTRIBUTED-MED-SUPPORT--028 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIBUTED_MED_SUPPORT__028);                                         //COBOL==> MOVE I-DISTRIBUTED-MED-SUPPORT--028 TO EP-INTEGER2.
            if (LS.I_DISTRIBUTED_MED_SUPPORT__028.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--028 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ252);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ252 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_32_A_OBJ252.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-32-A-OBJ252.
            if (LS.I_DISTRIBUTED_MED_SUPPORT__028.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--028 = 0
            {
                WS.MAIN_DTL_LINE_32_A_OBJ252.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-32-A-OBJ252.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIBUTED_MED_SUPPORT__029);                                          //COBOL==> MOVE I-DISTRIBUTED-MED-SUPPORT--029 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIBUTED_MED_SUPPORT__029);                                         //COBOL==> MOVE I-DISTRIBUTED-MED-SUPPORT--029 TO EP-INTEGER2.
            if (LS.I_DISTRIBUTED_MED_SUPPORT__029.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--029 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ253);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ253 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_32_A_OBJ253.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-32-A-OBJ253.
            if (LS.I_DISTRIBUTED_MED_SUPPORT__029.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--029 = 0
            {
                WS.MAIN_DTL_LINE_32_A_OBJ253.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-32-A-OBJ253.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIBUTED_MED_SUPPORT__030);                                          //COBOL==> MOVE I-DISTRIBUTED-MED-SUPPORT--030 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIBUTED_MED_SUPPORT__030);                                         //COBOL==> MOVE I-DISTRIBUTED-MED-SUPPORT--030 TO EP-INTEGER2.
            if (LS.I_DISTRIBUTED_MED_SUPPORT__030.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--030 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ254);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ254 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_32_A_OBJ254.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-32-A-OBJ254.
            if (LS.I_DISTRIBUTED_MED_SUPPORT__030.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--030 = 0
            {
                WS.MAIN_DTL_LINE_32_A_OBJ254.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-32-A-OBJ254.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_32);                                           //COBOL==> MOVE MAIN-DTL-LINE-32 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_32);                                           //COBOL==> MOVE MAIN-DTL-LINE-32 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_32);                                                     //COBOL==> MOVE MAIN-DTL-LINE-32 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_32.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-32.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_32") { M_PRINT_MAIN_DTL_LINE_32_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_32_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_32_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_32_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_32_EXIT") { M_PRINT_MAIN_DTL_LINE_33(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_33
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_33(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_33);                                                //COBOL==> MOVE MAIN-DTL-LINE-33 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_33);                                           //COBOL==> MOVE MAIN-DTL-LINE-33 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_33);                                           //COBOL==> MOVE MAIN-DTL-LINE-33 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_33);                                                     //COBOL==> MOVE MAIN-DTL-LINE-33 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_33.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-33.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_33") { M_PRINT_MAIN_DTL_LINE_33_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_33_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_33_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_33_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_33_EXIT") { M_PRINT_MAIN_DTL_LINE_34(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_34
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_34(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_34);                                                //COBOL==> MOVE MAIN-DTL-LINE-34 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIBUTED_FAMILY_IVA_A_031);                                          //COBOL==> MOVE I-DISTRIBUTED-FAMILY-IVA-A-031 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIBUTED_FAMILY_IVA_A_031);                                         //COBOL==> MOVE I-DISTRIBUTED-FAMILY-IVA-A-031 TO EP-INTEGER2.
            if (LS.I_DISTRIBUTED_FAMILY_IVA_A_031.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIBUTED-FAMILY-IVA-A-031 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ255);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ255 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_34_A_OBJ255.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-34-A-OBJ255.
            if (LS.I_DISTRIBUTED_FAMILY_IVA_A_031.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIBUTED-FAMILY-IVA-A-031 = 0
            {
                WS.MAIN_DTL_LINE_34_A_OBJ255.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-34-A-OBJ255.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIBUTED_FAMILY_IVE_A_032);                                          //COBOL==> MOVE I-DISTRIBUTED-FAMILY-IVE-A-032 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIBUTED_FAMILY_IVE_A_032);                                         //COBOL==> MOVE I-DISTRIBUTED-FAMILY-IVE-A-032 TO EP-INTEGER2.
            if (LS.I_DISTRIBUTED_FAMILY_IVE_A_032.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIBUTED-FAMILY-IVE-A-032 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ256);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ256 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_34_A_OBJ256.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-34-A-OBJ256.
            if (LS.I_DISTRIBUTED_FAMILY_IVE_A_032.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIBUTED-FAMILY-IVE-A-032 = 0
            {
                WS.MAIN_DTL_LINE_34_A_OBJ256.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-34-A-OBJ256.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIBUTED_FAMILY_FORME_033);                                          //COBOL==> MOVE I-DISTRIBUTED-FAMILY-FORME-033 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIBUTED_FAMILY_FORME_033);                                         //COBOL==> MOVE I-DISTRIBUTED-FAMILY-FORME-033 TO EP-INTEGER2.
            if (LS.I_DISTRIBUTED_FAMILY_FORME_033.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIBUTED-FAMILY-FORME-033 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ257);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ257 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_34_A_OBJ257.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-34-A-OBJ257.
            if (LS.I_DISTRIBUTED_FAMILY_FORME_033.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIBUTED-FAMILY-FORME-033 = 0
            {
                WS.MAIN_DTL_LINE_34_A_OBJ257.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-34-A-OBJ257.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIBUTED_FAMILY_NEVER_034);                                          //COBOL==> MOVE I-DISTRIBUTED-FAMILY-NEVER-034 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIBUTED_FAMILY_NEVER_034);                                         //COBOL==> MOVE I-DISTRIBUTED-FAMILY-NEVER-034 TO EP-INTEGER2.
            if (LS.I_DISTRIBUTED_FAMILY_NEVER_034.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIBUTED-FAMILY-NEVER-034 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ258);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ258 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_34_A_OBJ258.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-34-A-OBJ258.
            if (LS.I_DISTRIBUTED_FAMILY_NEVER_034.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIBUTED-FAMILY-NEVER-034 = 0
            {
                WS.MAIN_DTL_LINE_34_A_OBJ258.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-34-A-OBJ258.
            }
            WS.EP_DECIMAL.SetValue(LS.I_DISTRIBUTED_FAMILY_AMOUN_035);                                          //COBOL==> MOVE I-DISTRIBUTED-FAMILY-AMOUN-035 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_DISTRIBUTED_FAMILY_AMOUN_035);                                         //COBOL==> MOVE I-DISTRIBUTED-FAMILY-AMOUN-035 TO EP-INTEGER2.
            if (LS.I_DISTRIBUTED_FAMILY_AMOUN_035.IsLessThan(ZEROS))                                            //COBOL==> IF I-DISTRIBUTED-FAMILY-AMOUN-035 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ259);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ259 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_34_A_OBJ259.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-34-A-OBJ259.
            if (LS.I_DISTRIBUTED_FAMILY_AMOUN_035.IsEqualTo(0))                                                 //COBOL==> IF I-DISTRIBUTED-FAMILY-AMOUN-035 = 0
            {
                WS.MAIN_DTL_LINE_34_A_OBJ259.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-34-A-OBJ259.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_34);                                           //COBOL==> MOVE MAIN-DTL-LINE-34 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_34);                                           //COBOL==> MOVE MAIN-DTL-LINE-34 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_34);                                                     //COBOL==> MOVE MAIN-DTL-LINE-34 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_34.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-34.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_34") { M_PRINT_MAIN_DTL_LINE_34_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_34_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_34_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_34_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_34_EXIT") { M_PRINT_MAIN_DTL_LINE_35(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_35
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_35(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_35);                                                //COBOL==> MOVE MAIN-DTL-LINE-35 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_35);                                           //COBOL==> MOVE MAIN-DTL-LINE-35 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_35);                                           //COBOL==> MOVE MAIN-DTL-LINE-35 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_35);                                                     //COBOL==> MOVE MAIN-DTL-LINE-35 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_35.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-35.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_35") { M_PRINT_MAIN_DTL_LINE_35_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_35_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_35_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_35_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_35_EXIT") { M_PRINT_MAIN_DTL_LINE_36(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_36
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_36(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_36);                                                //COBOL==> MOVE MAIN-DTL-LINE-36 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_TOTAL_DISTRIBUTED_IVA_AM_036);                                          //COBOL==> MOVE I-TOTAL-DISTRIBUTED-IVA-AM-036 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_TOTAL_DISTRIBUTED_IVA_AM_036);                                         //COBOL==> MOVE I-TOTAL-DISTRIBUTED-IVA-AM-036 TO EP-INTEGER2.
            if (LS.I_TOTAL_DISTRIBUTED_IVA_AM_036.IsLessThan(ZEROS))                                            //COBOL==> IF I-TOTAL-DISTRIBUTED-IVA-AM-036 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ260);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ260 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_36_A_OBJ260.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-36-A-OBJ260.
            if (LS.I_TOTAL_DISTRIBUTED_IVA_AM_036.IsEqualTo(0))                                                 //COBOL==> IF I-TOTAL-DISTRIBUTED-IVA-AM-036 = 0
            {
                WS.MAIN_DTL_LINE_36_A_OBJ260.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-36-A-OBJ260.
            }
            WS.EP_DECIMAL.SetValue(LS.I_TOTAL_DISTRIBUTED_IVE_AM_037);                                          //COBOL==> MOVE I-TOTAL-DISTRIBUTED-IVE-AM-037 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_TOTAL_DISTRIBUTED_IVE_AM_037);                                         //COBOL==> MOVE I-TOTAL-DISTRIBUTED-IVE-AM-037 TO EP-INTEGER2.
            if (LS.I_TOTAL_DISTRIBUTED_IVE_AM_037.IsLessThan(ZEROS))                                            //COBOL==> IF I-TOTAL-DISTRIBUTED-IVE-AM-037 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ261);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ261 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_36_A_OBJ261.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-36-A-OBJ261.
            if (LS.I_TOTAL_DISTRIBUTED_IVE_AM_037.IsEqualTo(0))                                                 //COBOL==> IF I-TOTAL-DISTRIBUTED-IVE-AM-037 = 0
            {
                WS.MAIN_DTL_LINE_36_A_OBJ261.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-36-A-OBJ261.
            }
            WS.EP_DECIMAL.SetValue(LS.I_TOTAL_DISTRIBUTED_FORMER_038);                                          //COBOL==> MOVE I-TOTAL-DISTRIBUTED-FORMER-038 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_TOTAL_DISTRIBUTED_FORMER_038);                                         //COBOL==> MOVE I-TOTAL-DISTRIBUTED-FORMER-038 TO EP-INTEGER2.
            if (LS.I_TOTAL_DISTRIBUTED_FORMER_038.IsLessThan(ZEROS))                                            //COBOL==> IF I-TOTAL-DISTRIBUTED-FORMER-038 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ262);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ262 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_36_A_OBJ262.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-36-A-OBJ262.
            if (LS.I_TOTAL_DISTRIBUTED_FORMER_038.IsEqualTo(0))                                                 //COBOL==> IF I-TOTAL-DISTRIBUTED-FORMER-038 = 0
            {
                WS.MAIN_DTL_LINE_36_A_OBJ262.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-36-A-OBJ262.
            }
            WS.EP_DECIMAL.SetValue(LS.I_TOTAL_DISTRIBUTED_NEVER__039);                                          //COBOL==> MOVE I-TOTAL-DISTRIBUTED-NEVER--039 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_TOTAL_DISTRIBUTED_NEVER__039);                                         //COBOL==> MOVE I-TOTAL-DISTRIBUTED-NEVER--039 TO EP-INTEGER2.
            if (LS.I_TOTAL_DISTRIBUTED_NEVER__039.IsLessThan(ZEROS))                                            //COBOL==> IF I-TOTAL-DISTRIBUTED-NEVER--039 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ263);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ263 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_36_A_OBJ263.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-36-A-OBJ263.
            if (LS.I_TOTAL_DISTRIBUTED_NEVER__039.IsEqualTo(0))                                                 //COBOL==> IF I-TOTAL-DISTRIBUTED-NEVER--039 = 0
            {
                WS.MAIN_DTL_LINE_36_A_OBJ263.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-36-A-OBJ263.
            }
            WS.EP_DECIMAL.SetValue(LS.I_TOTAL_DISTRIBUTED_AMOUNT_040);                                          //COBOL==> MOVE I-TOTAL-DISTRIBUTED-AMOUNT-040 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_TOTAL_DISTRIBUTED_AMOUNT_040);                                         //COBOL==> MOVE I-TOTAL-DISTRIBUTED-AMOUNT-040 TO EP-INTEGER2.
            if (LS.I_TOTAL_DISTRIBUTED_AMOUNT_040.IsLessThan(ZEROS))                                            //COBOL==> IF I-TOTAL-DISTRIBUTED-AMOUNT-040 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ264);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ264 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_36_A_OBJ264.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-36-A-OBJ264.
            if (LS.I_TOTAL_DISTRIBUTED_AMOUNT_040.IsEqualTo(0))                                                 //COBOL==> IF I-TOTAL-DISTRIBUTED-AMOUNT-040 = 0
            {
                WS.MAIN_DTL_LINE_36_A_OBJ264.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-36-A-OBJ264.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_36);                                           //COBOL==> MOVE MAIN-DTL-LINE-36 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_36);                                           //COBOL==> MOVE MAIN-DTL-LINE-36 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_36);                                                     //COBOL==> MOVE MAIN-DTL-LINE-36 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_36.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-36.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_36") { M_PRINT_MAIN_DTL_LINE_36_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_36_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_36_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_36_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_36_EXIT") { M_PRINT_MAIN_DTL_LINE_37(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_37
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_37(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_37);                                                //COBOL==> MOVE MAIN-DTL-LINE-37 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_37);                                           //COBOL==> MOVE MAIN-DTL-LINE-37 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_37);                                           //COBOL==> MOVE MAIN-DTL-LINE-37 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_37);                                                     //COBOL==> MOVE MAIN-DTL-LINE-37 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_37.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-37.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_37") { M_PRINT_MAIN_DTL_LINE_37_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_37_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_37_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_37_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_37_EXIT") { M_PRINT_MAIN_DTL_LINE_38(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_38
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_38(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_38);                                                //COBOL==> MOVE MAIN-DTL-LINE-38 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_GROSS_UNDISTRIBUTED_AMOU_041);                                          //COBOL==> MOVE I-GROSS-UNDISTRIBUTED-AMOU-041 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_GROSS_UNDISTRIBUTED_AMOU_041);                                         //COBOL==> MOVE I-GROSS-UNDISTRIBUTED-AMOU-041 TO EP-INTEGER2.
            if (LS.I_GROSS_UNDISTRIBUTED_AMOU_041.IsLessThan(ZEROS))                                            //COBOL==> IF I-GROSS-UNDISTRIBUTED-AMOU-041 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ265);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ265 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_38_A_OBJ265.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-38-A-OBJ265.
            if (LS.I_GROSS_UNDISTRIBUTED_AMOU_041.IsEqualTo(0))                                                 //COBOL==> IF I-GROSS-UNDISTRIBUTED-AMOU-041 = 0
            {
                WS.MAIN_DTL_LINE_38_A_OBJ265.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-38-A-OBJ265.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_38);                                           //COBOL==> MOVE MAIN-DTL-LINE-38 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_38);                                           //COBOL==> MOVE MAIN-DTL-LINE-38 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_38);                                                     //COBOL==> MOVE MAIN-DTL-LINE-38 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_38.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-38.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_38") { M_PRINT_MAIN_DTL_LINE_38_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_38_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_38_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_38_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_38_EXIT") { M_PRINT_MAIN_DTL_LINE_39(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_39
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_39(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_39);                                                //COBOL==> MOVE MAIN-DTL-LINE-39 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_39);                                           //COBOL==> MOVE MAIN-DTL-LINE-39 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_39);                                           //COBOL==> MOVE MAIN-DTL-LINE-39 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_39);                                                     //COBOL==> MOVE MAIN-DTL-LINE-39 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_39.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-39.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_39") { M_PRINT_MAIN_DTL_LINE_39_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_39_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_39_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_39_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_39_EXIT") { M_PRINT_MAIN_DTL_LINE_40(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_40
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_40(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_40);                                                //COBOL==> MOVE MAIN-DTL-LINE-40 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_UNDISTRIBUTED_AMOUNT_003_042);                                          //COBOL==> MOVE I-UNDISTRIBUTED-AMOUNT-003-042 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_UNDISTRIBUTED_AMOUNT_003_042);                                         //COBOL==> MOVE I-UNDISTRIBUTED-AMOUNT-003-042 TO EP-INTEGER2.
            if (LS.I_UNDISTRIBUTED_AMOUNT_003_042.IsLessThan(ZEROS))                                            //COBOL==> IF I-UNDISTRIBUTED-AMOUNT-003-042 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ266);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ266 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_40_A_OBJ266.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-40-A-OBJ266.
            if (LS.I_UNDISTRIBUTED_AMOUNT_003_042.IsEqualTo(0))                                                 //COBOL==> IF I-UNDISTRIBUTED-AMOUNT-003-042 = 0
            {
                WS.MAIN_DTL_LINE_40_A_OBJ266.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-40-A-OBJ266.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_40);                                           //COBOL==> MOVE MAIN-DTL-LINE-40 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_40);                                           //COBOL==> MOVE MAIN-DTL-LINE-40 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_40);                                                     //COBOL==> MOVE MAIN-DTL-LINE-40 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_40.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-40.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_40") { M_PRINT_MAIN_DTL_LINE_40_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_40_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_40_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_40_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_40_EXIT") { M_PRINT_MAIN_DTL_LINE_41(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_41
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_41(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_41);                                                //COBOL==> MOVE MAIN-DTL-LINE-41 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_41);                                           //COBOL==> MOVE MAIN-DTL-LINE-41 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_41);                                           //COBOL==> MOVE MAIN-DTL-LINE-41 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_41);                                                     //COBOL==> MOVE MAIN-DTL-LINE-41 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_41.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-41.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_41") { M_PRINT_MAIN_DTL_LINE_41_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_41_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_41_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_41_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_41_EXIT") { M_PRINT_MAIN_DTL_LINE_42(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_42
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_42(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_42);                                                //COBOL==> MOVE MAIN-DTL-LINE-42 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.EP_DECIMAL.SetValue(LS.I_NET_UNDISTRIBUTED_AMOUNT_043);                                          //COBOL==> MOVE I-NET-UNDISTRIBUTED-AMOUNT-043 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_NET_UNDISTRIBUTED_AMOUNT_043);                                         //COBOL==> MOVE I-NET-UNDISTRIBUTED-AMOUNT-043 TO EP-INTEGER2.
            if (LS.I_NET_UNDISTRIBUTED_AMOUNT_043.IsLessThan(ZEROS))                                            //COBOL==> IF I-NET-UNDISTRIBUTED-AMOUNT-043 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ267);                                           //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ267 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(10);                                                                //COBOL==> MOVE 10 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_42_A_OBJ267.SetValue(WS.EP_FORMATTED_VALUE);                                       //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-42-A-OBJ267.
            if (LS.I_NET_UNDISTRIBUTED_AMOUNT_043.IsEqualTo(0))                                                 //COBOL==> IF I-NET-UNDISTRIBUTED-AMOUNT-043 = 0
            {
                WS.MAIN_DTL_LINE_42_A_OBJ267.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO MAIN-DTL-LINE-42-A-OBJ267.
            }
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_42);                                           //COBOL==> MOVE MAIN-DTL-LINE-42 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_42);                                           //COBOL==> MOVE MAIN-DTL-LINE-42 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_42);                                                     //COBOL==> MOVE MAIN-DTL-LINE-42 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_42.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-42.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_42") { M_PRINT_MAIN_DTL_LINE_42_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_42_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_42_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_42_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_42_EXIT") { M_PRINT_MAIN_DTL_LINE_43(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_43
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_43(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_43);                                                //COBOL==> MOVE MAIN-DTL-LINE-43 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_43);                                           //COBOL==> MOVE MAIN-DTL-LINE-43 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_43);                                           //COBOL==> MOVE MAIN-DTL-LINE-43 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_43);                                                     //COBOL==> MOVE MAIN-DTL-LINE-43 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_43.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-43.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_43") { M_PRINT_MAIN_DTL_LINE_43_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_43_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_43_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_43_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_43_EXIT") { M_PRINT_MAIN_DTL_LINE_44(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_44
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_44(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_44);                                                //COBOL==> MOVE MAIN-DTL-LINE-44 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_44);                                           //COBOL==> MOVE MAIN-DTL-LINE-44 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_44);                                           //COBOL==> MOVE MAIN-DTL-LINE-44 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_44);                                                     //COBOL==> MOVE MAIN-DTL-LINE-44 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_44.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-44.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_44") { M_PRINT_MAIN_DTL_LINE_44_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_44_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_44_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_44_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_44_EXIT") { M_PRINT_MAIN_DTL_LINE_45(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_45
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_45(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_45);                                                //COBOL==> MOVE MAIN-DTL-LINE-45 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_45);                                           //COBOL==> MOVE MAIN-DTL-LINE-45 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_45);                                           //COBOL==> MOVE MAIN-DTL-LINE-45 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_45);                                                     //COBOL==> MOVE MAIN-DTL-LINE-45 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            if (WS.MAIN_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                   //COBOL==> IF MAIN-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            WS.MAIN_DTL_LINE_45.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-45.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_45") { M_PRINT_MAIN_DTL_LINE_45_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_45_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_45_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_45_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_45_EXIT") { M_PRINT_MAIN_PG_HDR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_PG_HDR
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  PRINT-MAIN-PAGE-HDR
        ///COMMENT:  DISABLE DUPLICATE FIELD SUPPRESSION FOR FIRST
        ///COMMENT:    LINE ON NEW PAGE
        ///COMMENT:  HANDLE BEFORE SPACING FOR PAGE HEADER LINES
        ///COMMENT:  FOR EACH PAGE HEADER SECTION LINE
        ///COMMENT:    - MOVE IMPORT ATTRIBUTES TO REPORT FIELDS
        ///COMMENT:    - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:    - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  HANDLE AFTER SPACING FOR PAGE HEADER LINES
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_MAIN_PG_HDR(string returnMethod = "")
        {
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((!(WS.WS_MAIN_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_MAIN_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-MAIN-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-MAIN-RPT-FTR-IS-PROCESSED )
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT.
            WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_MAIN_BODY_SUPPRESS_LINES.SetValue(WS.WS_MAIN_BODY_SECTION_LINES);                             //COBOL==> MOVE WS-MAIN-BODY-SECTION-LINES TO WS-MAIN-BODY-SUPPRESS-LINES.
            WS.WS_SAVE_SECTION_PROCESSING_IND.SetValue(WS.WS_MAIN_SECTION_PROCESSING_IND);                      //COBOL==> MOVE WS-MAIN-SECTION-PROCESSING-IND TO WS-SAVE-SECTION-PROCESSING-IND.
            WS.WS_MAIN_SECTION_PROCESSING_IND.SetValue("P  ");                                                  //COBOL==> MOVE 'P  ' TO WS-MAIN-SECTION-PROCESSING-IND.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_SECTION_PROCESSING_IND.SetValueWithSpaces();                                             //COBOL==> MOVE SPACES TO WS-MAIN-SECTION-PROCESSING-IND
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_0);                                            //COBOL==> MOVE MAIN-PAGE-HDR-0 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("Y");                                                     //COBOL==> MOVE 'Y' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_0);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_DATE.SetValue(WS.WS_CURRENT_DATE_8);                                                         //COBOL==> MOVE WS-CURRENT-DATE-8 TO IEF-DATE.
            WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN.
            WS.DT_FORMATTED_DATE.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO DT-FORMATTED-DATE
            if (!(WS.IEF_DATE.IsEqualTo(00000000)))                                                             //COBOL==> IF IEF-DATE NOT = 00000000
            {
                WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN
                M_FORMAT_DATE("M_FORMAT_DATE_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-DATE THRU FORMAT-DATE-EXIT
            }                                                                                                   //COBOL==> END-IF
            WS.MAIN_PAGE_HDR_1_D_OBJ272.SetValue(WS.DT_FORMATTED_DATE);                                         //COBOL==> MOVE DT-FORMATTED-DATE TO MAIN-PAGE-HDR-1-D-OBJ272.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_1);                                            //COBOL==> MOVE MAIN-PAGE-HDR-1 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_1);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_1);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_TIME.SetValue(WS.WS_CURRENT_TIME_6);                                                         //COBOL==> MOVE WS-CURRENT-TIME-6 TO IEF-TIME.
            WS.DT_EDIT_PATTERN.SetValue("23:59:59");                                                            //COBOL==> MOVE '23:59:59' TO DT-EDIT-PATTERN.
            M_FORMAT_TIME("M_FORMAT_TIME_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-TIME THRU FORMAT-TIME-EXIT.
            WS.MAIN_PAGE_HDR_2_T_OBJ273.SetValue(WS.DT_FORMATTED_TIME);                                         //COBOL==> MOVE DT-FORMATTED-TIME TO MAIN-PAGE-HDR-2-T-OBJ273.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_2);                                            //COBOL==> MOVE MAIN-PAGE-HDR-2 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_2);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_2);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WS_MAIN_CNTL_FTR.Value))                                                                  //COBOL==> IF NOT WS-MAIN-CNTL-FTR
            {
                WS.EP_DECIMAL.SetValue(LS.I_PERIOD_0002_004);                                                       //COBOL==> MOVE I-PERIOD-0002-004 TO EP-DECIMAL
                WS.EP_INTEGER2.SetValue(LS.I_PERIOD_0002_004);                                                      //COBOL==> MOVE I-PERIOD-0002-004 TO EP-INTEGER2
                if (LS.I_PERIOD_0002_004.IsLessThan(ZEROS))                                                         //COBOL==> IF I-PERIOD-0002-004 LESS THAN ZERO
                {
                    WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
                }                                                                                                   //COBOL==> END-IF
                WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ6);                                             //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ6 TO EP-EDIT-PATTERN
                WS.EP_EDIT_PATTERN_LEN.SetValue(7);                                                                 //COBOL==> MOVE 7 TO EP-EDIT-PATTERN-LEN
                M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT
                WS.MAIN_PAGE_HDR_3_A_OBJ6.SetValue(WS.EP_FORMATTED_VALUE);                                          //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-PAGE-HDR-3-A-OBJ6
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_DECIMAL.SetValue(WS.P_PERIOD_0002_004);                                                       //COBOL==> MOVE P-PERIOD-0002-004 TO EP-DECIMAL
                WS.EP_INTEGER2.SetValue(WS.P_PERIOD_0002_004);                                                      //COBOL==> MOVE P-PERIOD-0002-004 TO EP-INTEGER2
                if (WS.P_PERIOD_0002_004.IsLessThan(ZEROS))                                                         //COBOL==> IF P-PERIOD-0002-004 LESS THAN ZERO
                {
                    WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
                }                                                                                                   //COBOL==> END-IF
                WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ6);                                             //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ6 TO EP-EDIT-PATTERN
                WS.EP_EDIT_PATTERN_LEN.SetValue(7);                                                                 //COBOL==> MOVE 7 TO EP-EDIT-PATTERN-LEN
                M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT
                WS.MAIN_PAGE_HDR_3_A_OBJ6.SetValue(WS.EP_FORMATTED_VALUE);                                          //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-PAGE-HDR-3-A-OBJ6
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_3);                                            //COBOL==> MOVE MAIN-PAGE-HDR-3 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_3);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_3);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_MAIN_SECTION_PROCESSING_IND.SetValue(WS.WS_SAVE_SECTION_PROCESSING_IND);                      //COBOL==> MOVE WS-SAVE-SECTION-PROCESSING-IND TO WS-MAIN-SECTION-PROCESSING-IND.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_PG_HDR") { M_PRINT_MAIN_PG_HDR_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_PG_HDR_EXIT
        /// </summary>
        private void M_PRINT_MAIN_PG_HDR_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_PG_HDR_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_PG_HDR_EXIT") { M_MAIN_UPDT_RPT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_UPDT_RPT_PG_NBR_FLDS
        /// </summary>
        private void M_MAIN_UPDT_RPT_PG_NBR_FLDS(string returnMethod = "")
        {
            //COMMENT:     STATEMENT BELOW EXISTS TO ENSURE PARAGRAPH NEVER EMPTY
            WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER);                                                          //COBOL==> MOVE WS-PG-NUMBER TO WS-PG-NUMBER.
            if (returnMethod != "" && returnMethod != "M_MAIN_UPDT_RPT_PG_NBR_FLDS") { M_MAIN_UPDT_RPT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_UPDT_RPT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_MAIN_UPDT_RPT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_MAIN_UPDT_RPT_PG_NBR_FLDS_EXIT") { return; }                                 //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_MAIN_UPDT_RPT_PG_NBR_FLDS_EXIT") { M_INI_IMPORT_EXPORT_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_INI_IMPORT_EXPORT_FLDS
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  INITIALIZE IMPORT AND EXPORT ATTRIBUTES IN
        ///COMMENT:  THE LINKAGE SECTION
        ///COMMENT:    - IMPORT ATTRIBUTES
        ///COMMENT:        IF THEY HAVE INVALID VALUES
        ///COMMENT:    - EXPORT ATTRIBUTES ALWAYS
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_INI_IMPORT_EXPORT_FLDS(string returnMethod = "")
        {
            if ((LS.I_PARM1_0001_001XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_PARM1_0001_001XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-PARM1-0001-001XX = HIGH-VALUES OR I-PARM1-0001-001XX = LOW-VALUES
            {
                LS.I_PARM1_0001_001.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO I-PARM1-0001-001
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_PARM1_0001_001.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO P-PARM1-0001-001
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_PARM2_0001_002XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_PARM2_0001_002XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-PARM2-0001-002XX = HIGH-VALUES OR I-PARM2-0001-002XX = LOW-VALUES
            {
                LS.I_PARM2_0001_002.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO I-PARM2-0001-002
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_PARM2_0001_002.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO P-PARM2-0001-002
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_SUBREPORT_CODE_0001_003XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_SUBREPORT_CODE_0001_003XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-SUBREPORT-CODE-0001-003XX = HIGH-VALUES OR I-SUBREPORT-CODE-0001-003XX = LOW-VALUES
            {
                LS.I_SUBREPORT_CODE_0001_003.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO I-SUBREPORT-CODE-0001-003
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_SUBREPORT_CODE_0001_003.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO P-SUBREPORT-CODE-0001-003
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_PERIOD_0002_004.IsNumericValue()))                                                      //COBOL==> IF I-PERIOD-0002-004 IS NOT NUMERIC
            {
                LS.I_PERIOD_0002_004.SetValueWithZeroes();                                                          //COBOL==> MOVE ZEROS TO I-PERIOD-0002-004
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_PERIOD_0002_004.SetValueWithZeroes();                                                          //COBOL==> MOVE ZEROS TO P-PERIOD-0002-004
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_PREVIOUS_UNDISTRIB_AMOUN_005.IsNumericValue()))                                         //COBOL==> IF I-PREVIOUS-UNDISTRIB-AMOUN-005 IS NOT NUMERIC
            {
                LS.I_PREVIOUS_UNDISTRIB_AMOUN_005.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-PREVIOUS-UNDISTRIB-AMOUN-005
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_PREVIOUS_UNDISTRIB_AMOUN_005.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-PREVIOUS-UNDISTRIB-AMOUN-005
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_TOTAL_COLLECTIONS_AMOUNT_006.IsNumericValue()))                                         //COBOL==> IF I-TOTAL-COLLECTIONS-AMOUNT-006 IS NOT NUMERIC
            {
                LS.I_TOTAL_COLLECTIONS_AMOUNT_006.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-TOTAL-COLLECTIONS-AMOUNT-006
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_TOTAL_COLLECTIONS_AMOUNT_006.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-TOTAL-COLLECTIONS-AMOUNT-006
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_OFFSET_FEDERAL_TAXREFUND_007.IsNumericValue()))                                         //COBOL==> IF I-OFFSET-FEDERAL-TAXREFUND-007 IS NOT NUMERIC
            {
                LS.I_OFFSET_FEDERAL_TAXREFUND_007.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-OFFSET-FEDERAL-TAXREFUND-007
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_OFFSET_FEDERAL_TAXREFUND_007.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-OFFSET-FEDERAL-TAXREFUND-007
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_OFFSET_STATE_TAX_REFUND__008.IsNumericValue()))                                         //COBOL==> IF I-OFFSET-STATE-TAX-REFUND--008 IS NOT NUMERIC
            {
                LS.I_OFFSET_STATE_TAX_REFUND__008.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-OFFSET-STATE-TAX-REFUND--008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_OFFSET_STATE_TAX_REFUND__008.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-OFFSET-STATE-TAX-REFUND--008
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_UNEMPLOYMENT_COMP_AMOUNT_009.IsNumericValue()))                                         //COBOL==> IF I-UNEMPLOYMENT-COMP-AMOUNT-009 IS NOT NUMERIC
            {
                LS.I_UNEMPLOYMENT_COMP_AMOUNT_009.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-UNEMPLOYMENT-COMP-AMOUNT-009
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_UNEMPLOYMENT_COMP_AMOUNT_009.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-UNEMPLOYMENT-COMP-AMOUNT-009
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_ADMINSTRATIVE_ENFORCE_AM_010.IsNumericValue()))                                         //COBOL==> IF I-ADMINSTRATIVE-ENFORCE-AM-010 IS NOT NUMERIC
            {
                LS.I_ADMINSTRATIVE_ENFORCE_AM_010.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-ADMINSTRATIVE-ENFORCE-AM-010
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_ADMINSTRATIVE_ENFORCE_AM_010.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-ADMINSTRATIVE-ENFORCE-AM-010
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_INCOME_WITHHOLDING_AMOUN_011.IsNumericValue()))                                         //COBOL==> IF I-INCOME-WITHHOLDING-AMOUN-011 IS NOT NUMERIC
            {
                LS.I_INCOME_WITHHOLDING_AMOUN_011.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-INCOME-WITHHOLDING-AMOUN-011
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_INCOME_WITHHOLDING_AMOUN_011.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-INCOME-WITHHOLDING-AMOUN-011
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_OTHER_STATES_AMOUNT_0009_012.IsNumericValue()))                                         //COBOL==> IF I-OTHER-STATES-AMOUNT-0009-012 IS NOT NUMERIC
            {
                LS.I_OTHER_STATES_AMOUNT_0009_012.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-OTHER-STATES-AMOUNT-0009-012
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_OTHER_STATES_AMOUNT_0009_012.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-OTHER-STATES-AMOUNT-0009-012
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_OTHER_SOURCES_AMOUNT_000_013.IsNumericValue()))                                         //COBOL==> IF I-OTHER-SOURCES-AMOUNT-000-013 IS NOT NUMERIC
            {
                LS.I_OTHER_SOURCES_AMOUNT_000_013.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-OTHER-SOURCES-AMOUNT-000-013
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_OTHER_SOURCES_AMOUNT_000_013.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-OTHER-SOURCES-AMOUNT-000-013
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_ADJUSTMENTS_AMOUNT_0009_014.IsNumericValue()))                                          //COBOL==> IF I-ADJUSTMENTS-AMOUNT-0009-014 IS NOT NUMERIC
            {
                LS.I_ADJUSTMENTS_AMOUNT_0009_014.SetValueWithZeroes();                                              //COBOL==> MOVE ZEROS TO I-ADJUSTMENTS-AMOUNT-0009-014
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_ADJUSTMENTS_AMOUNT_0009_014.SetValueWithZeroes();                                              //COBOL==> MOVE ZEROS TO P-ADJUSTMENTS-AMOUNT-0009-014
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_NON_IVD_CASES_AMOUNT_000_015.IsNumericValue()))                                         //COBOL==> IF I-NON-IVD-CASES-AMOUNT-000-015 IS NOT NUMERIC
            {
                LS.I_NON_IVD_CASES_AMOUNT_000_015.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-NON-IVD-CASES-AMOUNT-000-015
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_NON_IVD_CASES_AMOUNT_000_015.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-NON-IVD-CASES-AMOUNT-000-015
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_OTHER_STATES_CURRENT_IVA_016.IsNumericValue()))                                         //COBOL==> IF I-OTHER-STATES-CURRENT-IVA-016 IS NOT NUMERIC
            {
                LS.I_OTHER_STATES_CURRENT_IVA_016.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-OTHER-STATES-CURRENT-IVA-016
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_OTHER_STATES_CURRENT_IVA_016.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-OTHER-STATES-CURRENT-IVA-016
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_OTHER_STATES_CURRENT_IVE_017.IsNumericValue()))                                         //COBOL==> IF I-OTHER-STATES-CURRENT-IVE-017 IS NOT NUMERIC
            {
                LS.I_OTHER_STATES_CURRENT_IVE_017.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-OTHER-STATES-CURRENT-IVE-017
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_OTHER_STATES_CURRENT_IVE_017.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-OTHER-STATES-CURRENT-IVE-017
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_OTHERSTATE_FORMER_ASSIST_018.IsNumericValue()))                                         //COBOL==> IF I-OTHERSTATE-FORMER-ASSIST-018 IS NOT NUMERIC
            {
                LS.I_OTHERSTATE_FORMER_ASSIST_018.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-OTHERSTATE-FORMER-ASSIST-018
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_OTHERSTATE_FORMER_ASSIST_018.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-OTHERSTATE-FORMER-ASSIST-018
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_OTHER_STATE_NEVER_ASSIST_019.IsNumericValue()))                                         //COBOL==> IF I-OTHER-STATE-NEVER-ASSIST-019 IS NOT NUMERIC
            {
                LS.I_OTHER_STATE_NEVER_ASSIST_019.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-OTHER-STATE-NEVER-ASSIST-019
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_OTHER_STATE_NEVER_ASSIST_019.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-OTHER-STATE-NEVER-ASSIST-019
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_OTHER_STATE_AMT_FORWARD__020.IsNumericValue()))                                         //COBOL==> IF I-OTHER-STATE-AMT-FORWARD--020 IS NOT NUMERIC
            {
                LS.I_OTHER_STATE_AMT_FORWARD__020.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-OTHER-STATE-AMT-FORWARD--020
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_OTHER_STATE_AMT_FORWARD__020.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-OTHER-STATE-AMT-FORWARD--020
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AVAIL_FOR_DISTRIBUTION_A_021.IsNumericValue()))                                         //COBOL==> IF I-AVAIL-FOR-DISTRIBUTION-A-021 IS NOT NUMERIC
            {
                LS.I_AVAIL_FOR_DISTRIBUTION_A_021.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-AVAIL-FOR-DISTRIBUTION-A-021
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AVAIL_FOR_DISTRIBUTION_A_021.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-AVAIL-FOR-DISTRIBUTION-A-021
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIB_ASSIST_REIMB_IVA_022.IsNumericValue()))                                         //COBOL==> IF I-DISTRIB-ASSIST-REIMB-IVA-022 IS NOT NUMERIC
            {
                LS.I_DISTRIB_ASSIST_REIMB_IVA_022.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIB-ASSIST-REIMB-IVA-022
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIB_ASSIST_REIMB_IVA_022.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIB-ASSIST-REIMB-IVA-022
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIB_ASSIST_REIMB_IVE_023.IsNumericValue()))                                         //COBOL==> IF I-DISTRIB-ASSIST-REIMB-IVE-023 IS NOT NUMERIC
            {
                LS.I_DISTRIB_ASSIST_REIMB_IVE_023.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIB-ASSIST-REIMB-IVE-023
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIB_ASSIST_REIMB_IVE_023.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIB-ASSIST-REIMB-IVE-023
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIB_ASSIST_REIMB_FMR_024.IsNumericValue()))                                         //COBOL==> IF I-DISTRIB-ASSIST-REIMB-FMR-024 IS NOT NUMERIC
            {
                LS.I_DISTRIB_ASSIST_REIMB_FMR_024.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIB-ASSIST-REIMB-FMR-024
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIB_ASSIST_REIMB_FMR_024.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIB-ASSIST-REIMB-FMR-024
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIB_ASSIST_REIMB_AMO_025.IsNumericValue()))                                         //COBOL==> IF I-DISTRIB-ASSIST-REIMB-AMO-025 IS NOT NUMERIC
            {
                LS.I_DISTRIB_ASSIST_REIMB_AMO_025.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIB-ASSIST-REIMB-AMO-025
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIB_ASSIST_REIMB_AMO_025.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIB-ASSIST-REIMB-AMO-025
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIBUTED_MED_SUPPORT__026.IsNumericValue()))                                         //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--026 IS NOT NUMERIC
            {
                LS.I_DISTRIBUTED_MED_SUPPORT__026.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIBUTED-MED-SUPPORT--026
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIBUTED_MED_SUPPORT__026.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIBUTED-MED-SUPPORT--026
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIBUTED_MED_SUPPORT__027.IsNumericValue()))                                         //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--027 IS NOT NUMERIC
            {
                LS.I_DISTRIBUTED_MED_SUPPORT__027.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIBUTED-MED-SUPPORT--027
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIBUTED_MED_SUPPORT__027.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIBUTED-MED-SUPPORT--027
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIBUTED_MED_SUPPORT__028.IsNumericValue()))                                         //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--028 IS NOT NUMERIC
            {
                LS.I_DISTRIBUTED_MED_SUPPORT__028.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIBUTED-MED-SUPPORT--028
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIBUTED_MED_SUPPORT__028.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIBUTED-MED-SUPPORT--028
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIBUTED_MED_SUPPORT__029.IsNumericValue()))                                         //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--029 IS NOT NUMERIC
            {
                LS.I_DISTRIBUTED_MED_SUPPORT__029.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIBUTED-MED-SUPPORT--029
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIBUTED_MED_SUPPORT__029.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIBUTED-MED-SUPPORT--029
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIBUTED_MED_SUPPORT__030.IsNumericValue()))                                         //COBOL==> IF I-DISTRIBUTED-MED-SUPPORT--030 IS NOT NUMERIC
            {
                LS.I_DISTRIBUTED_MED_SUPPORT__030.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIBUTED-MED-SUPPORT--030
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIBUTED_MED_SUPPORT__030.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIBUTED-MED-SUPPORT--030
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIBUTED_FAMILY_IVA_A_031.IsNumericValue()))                                         //COBOL==> IF I-DISTRIBUTED-FAMILY-IVA-A-031 IS NOT NUMERIC
            {
                LS.I_DISTRIBUTED_FAMILY_IVA_A_031.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIBUTED-FAMILY-IVA-A-031
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIBUTED_FAMILY_IVA_A_031.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIBUTED-FAMILY-IVA-A-031
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIBUTED_FAMILY_IVE_A_032.IsNumericValue()))                                         //COBOL==> IF I-DISTRIBUTED-FAMILY-IVE-A-032 IS NOT NUMERIC
            {
                LS.I_DISTRIBUTED_FAMILY_IVE_A_032.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIBUTED-FAMILY-IVE-A-032
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIBUTED_FAMILY_IVE_A_032.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIBUTED-FAMILY-IVE-A-032
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIBUTED_FAMILY_FORME_033.IsNumericValue()))                                         //COBOL==> IF I-DISTRIBUTED-FAMILY-FORME-033 IS NOT NUMERIC
            {
                LS.I_DISTRIBUTED_FAMILY_FORME_033.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIBUTED-FAMILY-FORME-033
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIBUTED_FAMILY_FORME_033.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIBUTED-FAMILY-FORME-033
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIBUTED_FAMILY_NEVER_034.IsNumericValue()))                                         //COBOL==> IF I-DISTRIBUTED-FAMILY-NEVER-034 IS NOT NUMERIC
            {
                LS.I_DISTRIBUTED_FAMILY_NEVER_034.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIBUTED-FAMILY-NEVER-034
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIBUTED_FAMILY_NEVER_034.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIBUTED-FAMILY-NEVER-034
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_DISTRIBUTED_FAMILY_AMOUN_035.IsNumericValue()))                                         //COBOL==> IF I-DISTRIBUTED-FAMILY-AMOUN-035 IS NOT NUMERIC
            {
                LS.I_DISTRIBUTED_FAMILY_AMOUN_035.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-DISTRIBUTED-FAMILY-AMOUN-035
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_DISTRIBUTED_FAMILY_AMOUN_035.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-DISTRIBUTED-FAMILY-AMOUN-035
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_TOTAL_DISTRIBUTED_IVA_AM_036.IsNumericValue()))                                         //COBOL==> IF I-TOTAL-DISTRIBUTED-IVA-AM-036 IS NOT NUMERIC
            {
                LS.I_TOTAL_DISTRIBUTED_IVA_AM_036.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-TOTAL-DISTRIBUTED-IVA-AM-036
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_TOTAL_DISTRIBUTED_IVA_AM_036.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-TOTAL-DISTRIBUTED-IVA-AM-036
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_TOTAL_DISTRIBUTED_IVE_AM_037.IsNumericValue()))                                         //COBOL==> IF I-TOTAL-DISTRIBUTED-IVE-AM-037 IS NOT NUMERIC
            {
                LS.I_TOTAL_DISTRIBUTED_IVE_AM_037.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-TOTAL-DISTRIBUTED-IVE-AM-037
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_TOTAL_DISTRIBUTED_IVE_AM_037.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-TOTAL-DISTRIBUTED-IVE-AM-037
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_TOTAL_DISTRIBUTED_FORMER_038.IsNumericValue()))                                         //COBOL==> IF I-TOTAL-DISTRIBUTED-FORMER-038 IS NOT NUMERIC
            {
                LS.I_TOTAL_DISTRIBUTED_FORMER_038.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-TOTAL-DISTRIBUTED-FORMER-038
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_TOTAL_DISTRIBUTED_FORMER_038.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-TOTAL-DISTRIBUTED-FORMER-038
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_TOTAL_DISTRIBUTED_NEVER__039.IsNumericValue()))                                         //COBOL==> IF I-TOTAL-DISTRIBUTED-NEVER--039 IS NOT NUMERIC
            {
                LS.I_TOTAL_DISTRIBUTED_NEVER__039.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-TOTAL-DISTRIBUTED-NEVER--039
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_TOTAL_DISTRIBUTED_NEVER__039.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-TOTAL-DISTRIBUTED-NEVER--039
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_TOTAL_DISTRIBUTED_AMOUNT_040.IsNumericValue()))                                         //COBOL==> IF I-TOTAL-DISTRIBUTED-AMOUNT-040 IS NOT NUMERIC
            {
                LS.I_TOTAL_DISTRIBUTED_AMOUNT_040.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-TOTAL-DISTRIBUTED-AMOUNT-040
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_TOTAL_DISTRIBUTED_AMOUNT_040.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-TOTAL-DISTRIBUTED-AMOUNT-040
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_GROSS_UNDISTRIBUTED_AMOU_041.IsNumericValue()))                                         //COBOL==> IF I-GROSS-UNDISTRIBUTED-AMOU-041 IS NOT NUMERIC
            {
                LS.I_GROSS_UNDISTRIBUTED_AMOU_041.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-GROSS-UNDISTRIBUTED-AMOU-041
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_GROSS_UNDISTRIBUTED_AMOU_041.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-GROSS-UNDISTRIBUTED-AMOU-041
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_UNDISTRIBUTED_AMOUNT_003_042.IsNumericValue()))                                         //COBOL==> IF I-UNDISTRIBUTED-AMOUNT-003-042 IS NOT NUMERIC
            {
                LS.I_UNDISTRIBUTED_AMOUNT_003_042.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-UNDISTRIBUTED-AMOUNT-003-042
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_UNDISTRIBUTED_AMOUNT_003_042.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-UNDISTRIBUTED-AMOUNT-003-042
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_NET_UNDISTRIBUTED_AMOUNT_043.IsNumericValue()))                                         //COBOL==> IF I-NET-UNDISTRIBUTED-AMOUNT-043 IS NOT NUMERIC
            {
                LS.I_NET_UNDISTRIBUTED_AMOUNT_043.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-NET-UNDISTRIBUTED-AMOUNT-043
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_NET_UNDISTRIBUTED_AMOUNT_043.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-NET-UNDISTRIBUTED-AMOUNT-043
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_FEDERAL_SHARE_IVA_AMOUNT_044.IsNumericValue()))                                         //COBOL==> IF I-FEDERAL-SHARE-IVA-AMOUNT-044 IS NOT NUMERIC
            {
                LS.I_FEDERAL_SHARE_IVA_AMOUNT_044.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-FEDERAL-SHARE-IVA-AMOUNT-044
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_FEDERAL_SHARE_IVA_AMOUNT_044.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-FEDERAL-SHARE-IVA-AMOUNT-044
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_FEDERAL_SHARE_IVE_AMOUNT_045.IsNumericValue()))                                         //COBOL==> IF I-FEDERAL-SHARE-IVE-AMOUNT-045 IS NOT NUMERIC
            {
                LS.I_FEDERAL_SHARE_IVE_AMOUNT_045.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-FEDERAL-SHARE-IVE-AMOUNT-045
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_FEDERAL_SHARE_IVE_AMOUNT_045.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-FEDERAL-SHARE-IVE-AMOUNT-045
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_FEDERAL_SHARE_FORMER_AMO_046.IsNumericValue()))                                         //COBOL==> IF I-FEDERAL-SHARE-FORMER-AMO-046 IS NOT NUMERIC
            {
                LS.I_FEDERAL_SHARE_FORMER_AMO_046.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-FEDERAL-SHARE-FORMER-AMO-046
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_FEDERAL_SHARE_FORMER_AMO_046.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-FEDERAL-SHARE-FORMER-AMO-046
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_FEDERAL_SHARE_TOTAL_AMOU_047.IsNumericValue()))                                         //COBOL==> IF I-FEDERAL-SHARE-TOTAL-AMOU-047 IS NOT NUMERIC
            {
                LS.I_FEDERAL_SHARE_TOTAL_AMOU_047.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-FEDERAL-SHARE-TOTAL-AMOU-047
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_FEDERAL_SHARE_TOTAL_AMOU_047.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-FEDERAL-SHARE-TOTAL-AMOU-047
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_INCENTIVE_PAYMENT_IVA_AM_048.IsNumericValue()))                                         //COBOL==> IF I-INCENTIVE-PAYMENT-IVA-AM-048 IS NOT NUMERIC
            {
                LS.I_INCENTIVE_PAYMENT_IVA_AM_048.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-INCENTIVE-PAYMENT-IVA-AM-048
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_INCENTIVE_PAYMENT_IVA_AM_048.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-INCENTIVE-PAYMENT-IVA-AM-048
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_INCENTIVE_PAYMENT_FORMER_049.IsNumericValue()))                                         //COBOL==> IF I-INCENTIVE-PAYMENT-FORMER-049 IS NOT NUMERIC
            {
                LS.I_INCENTIVE_PAYMENT_FORMER_049.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-INCENTIVE-PAYMENT-FORMER-049
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_INCENTIVE_PAYMENT_FORMER_049.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-INCENTIVE-PAYMENT-FORMER-049
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_INCENTIVE_PAYMENT_AMOUNT_050.IsNumericValue()))                                         //COBOL==> IF I-INCENTIVE-PAYMENT-AMOUNT-050 IS NOT NUMERIC
            {
                LS.I_INCENTIVE_PAYMENT_AMOUNT_050.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-INCENTIVE-PAYMENT-AMOUNT-050
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_INCENTIVE_PAYMENT_AMOUNT_050.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-INCENTIVE-PAYMENT-AMOUNT-050
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_NET_FEDERAL_SHARE_IVA_AM_051.IsNumericValue()))                                         //COBOL==> IF I-NET-FEDERAL-SHARE-IVA-AM-051 IS NOT NUMERIC
            {
                LS.I_NET_FEDERAL_SHARE_IVA_AM_051.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-NET-FEDERAL-SHARE-IVA-AM-051
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_NET_FEDERAL_SHARE_IVA_AM_051.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-NET-FEDERAL-SHARE-IVA-AM-051
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_NET_FEDERAL_SHARE_FORMER_052.IsNumericValue()))                                         //COBOL==> IF I-NET-FEDERAL-SHARE-FORMER-052 IS NOT NUMERIC
            {
                LS.I_NET_FEDERAL_SHARE_FORMER_052.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-NET-FEDERAL-SHARE-FORMER-052
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_NET_FEDERAL_SHARE_FORMER_052.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-NET-FEDERAL-SHARE-FORMER-052
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_NET_FEDERAL_SHARE_AMOUNT_053.IsNumericValue()))                                         //COBOL==> IF I-NET-FEDERAL-SHARE-AMOUNT-053 IS NOT NUMERIC
            {
                LS.I_NET_FEDERAL_SHARE_AMOUNT_053.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-NET-FEDERAL-SHARE-AMOUNT-053
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_NET_FEDERAL_SHARE_AMOUNT_053.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-NET-FEDERAL-SHARE-AMOUNT-053
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_FEES_RETAIN_OTHER_STATES_054.IsNumericValue()))                                         //COBOL==> IF I-FEES-RETAIN-OTHER-STATES-054 IS NOT NUMERIC
            {
                LS.I_FEES_RETAIN_OTHER_STATES_054.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO I-FEES-RETAIN-OTHER-STATES-054
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_FEES_RETAIN_OTHER_STATES_054.SetValueWithZeroes();                                             //COBOL==> MOVE ZEROS TO P-FEES-RETAIN-OTHER-STATES-054
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_CREATED_TIMESTAMP_0047_055.IsNumericValue()))                                           //COBOL==> IF I-CREATED-TIMESTAMP-0047-055 IS NOT NUMERIC
            {
                LS.I_CREATED_TIMESTAMP_0047_055.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO I-CREATED-TIMESTAMP-0047-055
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_CREATED_TIMESTAMP_0047_055.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO P-CREATED-TIMESTAMP-0047-055
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_CREATED_BY_0047_056XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_CREATED_BY_0047_056XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-CREATED-BY-0047-056XX = HIGH-VALUES OR I-CREATED-BY-0047-056XX = LOW-VALUES
            {
                LS.I_CREATED_BY_0047_056.SetValueWithSpaces();                                                      //COBOL==> MOVE SPACES TO I-CREATED-BY-0047-056
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_CREATED_BY_0047_056.SetValueWithSpaces();                                                      //COBOL==> MOVE SPACES TO P-CREATED-BY-0047-056
            }                                                                                                   //COBOL==> END-IF.
            LS.E_PARM1_0048_057.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO E-PARM1-0048-057.
            LS.E_PARM2_0048_058.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO E-PARM2-0048-058.
            LS.E_SUBREPORT_CODE_0048_059.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO E-SUBREPORT-CODE-0048-059.
            if (returnMethod != "" && returnMethod != "M_INI_IMPORT_EXPORT_FLDS") { M_INI_IMPORT_EXPORT_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_INI_IMPORT_EXPORT_FLDS_EXIT
        /// </summary>
        private void M_INI_IMPORT_EXPORT_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_INI_IMPORT_EXPORT_FLDS_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_INI_IMPORT_EXPORT_FLDS_EXIT") { M_JUSTIFY_TEXT_FIELD(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_JUSTIFY_TEXT_FIELD
        /// </summary>
        private void M_JUSTIFY_TEXT_FIELD(string returnMethod = "")
        {
            if ((WS.WS_JUSTIFIED_NONE.Value)
             || (WS.WS_UNJUSTIFIED_TEXT_FIELD.IsSpaces()))      //COBOL==> IF WS-JUSTIFIED-NONE OR WS-UNJUSTIFIED-TEXT-FIELD = SPACES
            {
                WS.WS_JUSTIFIED_TEXT_FIELD.SetValue(WS.WS_UNJUSTIFIED_TEXT_FIELD);                                  //COBOL==> MOVE WS-UNJUSTIFIED-TEXT-FIELD TO WS-JUSTIFIED-TEXT-FIELD
            }                                                                                                   //COBOL==> ELSE
            else
            {
                for (WS.WS_UNJUSTIFIED_TEXT_IDX.SetValue(1); (!(WS.WS_UNJUSTIFIED_TEXT_IDX.IsGreaterThan(249))); WS.WS_UNJUSTIFIED_TEXT_IDX.Add(1))  //COBOL==> PERFORM FIND-FIRST-NON-BLANK-CHAR VARYING WS-UNJUSTIFIED-TEXT-IDX FROM 1 BY 1 UNTIL WS-UNJUSTIFIED-TEXT-IDX > 249
                {
                    M_FIND_FIRST_NON_BLANK_CHAR(); if (Control.ExitProgram) { return; }
                }
                for (WS.WS_UNJUSTIFIED_TEXT_IDX.SetValue(250); (!(WS.WS_UNJUSTIFIED_TEXT_IDX.IsLessThan(1))); WS.WS_UNJUSTIFIED_TEXT_IDX.Add(-1))  //COBOL==> PERFORM FIND-LAST-NON-BLANK-CHAR VARYING WS-UNJUSTIFIED-TEXT-IDX FROM 250 BY -1 UNTIL WS-UNJUSTIFIED-TEXT-IDX < 1
                {
                    M_FIND_LAST_NON_BLANK_CHAR(); if (Control.ExitProgram) { return; }
                }
                WS.WS_JUSTIFIED_TEXT_DATA_LENGTH.SetComputeValue((WS.WS_LAST_CHAR.AsDecimal() - WS.WS_FIRST_CHAR.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-JUSTIFIED-TEXT-DATA-LENGTH = ( WS-LAST-CHAR - WS-FIRST-CHAR ) + 1
                if (WS.WS_JUSTIFIED_LEFT.Value)                                                                     //COBOL==> IF WS-JUSTIFIED-LEFT
                {
                    WS.WS_JUSTIFIED_FIELD_START.SetComputeValue(1);                                                     //COBOL==> COMPUTE WS-JUSTIFIED-FIELD-START = 1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.WS_JUSTIFIED_RIGHT.Value)                                                                    //COBOL==> IF WS-JUSTIFIED-RIGHT
                    {
                        WS.WS_JUSTIFIED_FIELD_START.SetComputeValue((WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.AsDecimal() - WS.WS_JUSTIFIED_TEXT_DATA_LENGTH.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-JUSTIFIED-FIELD-START = ( WS-JUSTIFIED-TEXT-FIELD-LENGTH - WS-JUSTIFIED-TEXT-DATA-LENGTH ) + 1
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.WS_JUSTIFIED_FIELD_START.SetComputeValue(((WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.AsDecimal() / 2m) - (WS.WS_JUSTIFIED_TEXT_DATA_LENGTH.AsDecimal() / 2m)) + 1m);  //COBOL==> COMPUTE WS-JUSTIFIED-FIELD-START = ( WS-JUSTIFIED-TEXT-FIELD-LENGTH / 2 ) - ( WS-JUSTIFIED-TEXT-DATA-LENGTH / 2 ) + 1
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_JUSTIFIED_TEXT_FIELD.SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO WS-JUSTIFIED-TEXT-FIELD
                WS.WS_JUSTIFIED_TEXT_IDX.SetComputeValue(WS.WS_JUSTIFIED_FIELD_START);                              //COBOL==> COMPUTE WS-JUSTIFIED-TEXT-IDX = WS-JUSTIFIED-FIELD-START
                WS.WS_UNJUSTIFIED_TEXT_IDX.SetComputeValue(WS.WS_FIRST_CHAR);                                       //COBOL==> COMPUTE WS-UNJUSTIFIED-TEXT-IDX = WS-FIRST-CHAR
                for (WS.WS_CHAR_CNTR.SetValue(1); (!(WS.WS_CHAR_CNTR.IsGreaterThan(WS.WS_JUSTIFIED_TEXT_DATA_LENGTH))); WS.WS_CHAR_CNTR.Add(1))  //COBOL==> PERFORM MOVE-TO-JUSTIFIED-FIELD VARYING WS-CHAR-CNTR FROM 1 BY 1 UNTIL WS-CHAR-CNTR > WS-JUSTIFIED-TEXT-DATA-LENGTH
                {
                    M_MOVE_TO_JUSTIFIED_FIELD(); if (Control.ExitProgram) { return; }
                }
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_JUSTIFY_TEXT_FIELD") { M_JUSTIFY_TEXT_FIELD_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_JUSTIFY_TEXT_FIELD_EXIT
        /// </summary>
        private void M_JUSTIFY_TEXT_FIELD_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_JUSTIFY_TEXT_FIELD_EXIT") { return; }                                        //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_JUSTIFY_TEXT_FIELD_EXIT") { M_FIND_FIRST_NON_BLANK_CHAR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FIND_FIRST_NON_BLANK_CHAR
        /// </summary>
        private void M_FIND_FIRST_NON_BLANK_CHAR(string returnMethod = "")
        {
            if (!(WS.WS_UNJUSTIFIED_TEXT_CHAR[WS.WS_UNJUSTIFIED_TEXT_IDX.AsInt()].IsSpaces()))                  //COBOL==> IF WS-UNJUSTIFIED-TEXT-CHAR ( WS-UNJUSTIFIED-TEXT-IDX ) NOT EQUAL SPACE
            {
                WS.WS_FIRST_CHAR.SetComputeValue(WS.WS_UNJUSTIFIED_TEXT_IDX);                                       //COBOL==> COMPUTE WS-FIRST-CHAR = WS-UNJUSTIFIED-TEXT-IDX
                WS.WS_UNJUSTIFIED_TEXT_IDX.SetComputeValue(251);                                                    //COBOL==> COMPUTE WS-UNJUSTIFIED-TEXT-IDX = 251
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_FIND_FIRST_NON_BLANK_CHAR") { M_FIND_LAST_NON_BLANK_CHAR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FIND_LAST_NON_BLANK_CHAR
        /// </summary>
        private void M_FIND_LAST_NON_BLANK_CHAR(string returnMethod = "")
        {
            if (WS.WS_UNJUSTIFIED_TEXT_IDX.IsGreaterThan(0))                                                    //COBOL==> IF WS-UNJUSTIFIED-TEXT-IDX GREATER THAN 0
            {
                if (!(WS.WS_UNJUSTIFIED_TEXT_CHAR[WS.WS_UNJUSTIFIED_TEXT_IDX.AsInt()].IsSpaces()))                  //COBOL==> IF WS-UNJUSTIFIED-TEXT-CHAR ( WS-UNJUSTIFIED-TEXT-IDX ) NOT EQUAL SPACE
                {
                    WS.WS_LAST_CHAR.SetComputeValue(WS.WS_UNJUSTIFIED_TEXT_IDX);                                        //COBOL==> COMPUTE WS-LAST-CHAR = WS-UNJUSTIFIED-TEXT-IDX
                    WS.WS_UNJUSTIFIED_TEXT_IDX.SetComputeValue(0);                                                      //COBOL==> COMPUTE WS-UNJUSTIFIED-TEXT-IDX = 0
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_FIND_LAST_NON_BLANK_CHAR") { M_MOVE_TO_JUSTIFIED_FIELD(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MOVE_TO_JUSTIFIED_FIELD
        /// </summary>
        private void M_MOVE_TO_JUSTIFIED_FIELD(string returnMethod = "")
        {
            WS.WS_JUSTIFIED_TEXT_CHAR[WS.WS_JUSTIFIED_TEXT_IDX.AsInt()].SetValue(WS.WS_UNJUSTIFIED_TEXT_CHAR[WS.WS_UNJUSTIFIED_TEXT_IDX.AsInt()]);  //COBOL==> MOVE WS-UNJUSTIFIED-TEXT-CHAR ( WS-UNJUSTIFIED-TEXT-IDX ) TO WS-JUSTIFIED-TEXT-CHAR ( WS-JUSTIFIED-TEXT-IDX ) .
            WS.WS_JUSTIFIED_TEXT_IDX.SetComputeValue(WS.WS_JUSTIFIED_TEXT_IDX.AsInt() + 1);                     //COBOL==> COMPUTE WS-JUSTIFIED-TEXT-IDX = WS-JUSTIFIED-TEXT-IDX + 1.
            WS.WS_UNJUSTIFIED_TEXT_IDX.SetComputeValue(WS.WS_UNJUSTIFIED_TEXT_IDX.AsInt() + 1);                 //COBOL==> COMPUTE WS-UNJUSTIFIED-TEXT-IDX = WS-UNJUSTIFIED-TEXT-IDX + 1.
            if (returnMethod != "" && returnMethod != "M_MOVE_TO_JUSTIFIED_FIELD") { M_GET_SYSTEM_DATE_N_TIME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_SYSTEM_DATE_N_TIME
        /// </summary>
        private void M_GET_SYSTEM_DATE_N_TIME(string returnMethod = "")
        {
            WS.WS_CURRENT_DATE.SetValue(ApplicationDate.ToString("yyMMdd"));                                    //COBOL==> ACCEPT WS-CURRENT-DATE FROM DATE.
            if (WS.WS_CURRENT_DATE_6_YY.IsLessThan(50))                                                         //COBOL==> IF WS-CURRENT-DATE-6-YY < 50
            {
                WS.WS_CURRENT_DATE_8_CC.SetValue(20);                                                               //COBOL==> MOVE 20 TO WS-CURRENT-DATE-8-CC
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_CURRENT_DATE_8_CC.SetValue(19);                                                               //COBOL==> MOVE 19 TO WS-CURRENT-DATE-8-CC
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_CURRENT_DATE_8_YY.SetValue(WS.WS_CURRENT_DATE_6_YY);                                          //COBOL==> MOVE WS-CURRENT-DATE-6-YY TO WS-CURRENT-DATE-8-YY.
            WS.WS_CURRENT_DATE_8_MM.SetValue(WS.WS_CURRENT_DATE_6_MM);                                          //COBOL==> MOVE WS-CURRENT-DATE-6-MM TO WS-CURRENT-DATE-8-MM.
            WS.WS_CURRENT_DATE_8_DD.SetValue(WS.WS_CURRENT_DATE_6_DD);                                          //COBOL==> MOVE WS-CURRENT-DATE-6-DD TO WS-CURRENT-DATE-8-DD.
            WS.WS_CURRENT_TIME.SetValue(ApplicationDate.TimeOfDay.ToString("hhmmssff"));                        //COBOL==> ACCEPT WS-CURRENT-TIME FROM TIME.
            if (returnMethod != "" && returnMethod != "M_GET_SYSTEM_DATE_N_TIME") { M_GET_SYSTEM_DATE_N_TIME_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_SYSTEM_DATE_N_TIME_EXIT
        /// </summary>
        private void M_GET_SYSTEM_DATE_N_TIME_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_GET_SYSTEM_DATE_N_TIME_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_GET_SYSTEM_DATE_N_TIME_EXIT") { M_FORMAT_DATE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_DATE
        /// </summary>
        private void M_FORMAT_DATE(string returnMethod = "")
        {
            WS.DT_FORMATTED_DATE.ResetToInitialValue();                                                         //COBOL==> INITIALIZE DT-FORMATTED-DATE DT-STRING-COUNT.
            WS.DT_STRING_COUNT.ResetToInitialValue();
            M_FORMAT_DATE_VALUE("M_FORMAT_DATE_VALUE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM FORMAT-DATE-VALUE THRU FORMAT-DATE-VALUE-EXIT.
            if (returnMethod != "" && returnMethod != "M_FORMAT_DATE") { M_FORMAT_DATE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_DATE_EXIT
        /// </summary>
        private void M_FORMAT_DATE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_FORMAT_DATE_EXIT") { return; }                                               //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_FORMAT_DATE_EXIT") { M_FORMAT_DATE_VALUE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_DATE_VALUE
        /// </summary>
        private void M_FORMAT_DATE_VALUE(string returnMethod = "")
        {
            WS.DT_STRING_COUNT.SetValue(WS.DT_EDIT_PATTERN.InspectGivingCount("12", "ALL"));                    //COBOL==> INSPECT DT-EDIT-PATTERN TALLYING DT-STRING-COUNT FOR ALL '12'.
            if (WS.DT_STRING_FOUND.Value)                                                                       //COBOL==> IF DT-STRING-FOUND
            {
                M_FORMAT_MM_DATE("M_FORMAT_MM_DATE_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM FORMAT-MM-DATE THRU FORMAT-MM-DATE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_FORMAT_DATE_VALUE") { M_FORMAT_DATE_VALUE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_DATE_VALUE_EXIT
        /// </summary>
        private void M_FORMAT_DATE_VALUE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_FORMAT_DATE_VALUE_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_FORMAT_DATE_VALUE_EXIT") { M_FORMAT_MM_DATE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_MM_DATE
        /// </summary>
        private void M_FORMAT_MM_DATE(string returnMethod = "")
        {
            if (WS.DT_EDIT_PATTERN.IsEqualTo("12-31-1999"))                                                     //COBOL==> IF DT-EDIT-PATTERN = '12-31-1999'
            {
                WS.DT_FORMATTED_DATE.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize(WS.DT_MONTH_MM.AsString(), "-", WS.DT_DAY.AsString(), "-", WS.DT_YEAR_4.AsString())));  //COBOL==> STRING DT-MONTH-MM , '-' , DT-DAY , '-' , DT-YEAR-4 DELIMITED BY SIZE INTO DT-FORMATTED-DATE
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_FORMAT_MM_DATE") { M_FORMAT_MM_DATE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_MM_DATE_EXIT
        /// </summary>
        private void M_FORMAT_MM_DATE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_FORMAT_MM_DATE_EXIT") { return; }                                            //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_FORMAT_MM_DATE_EXIT") { M_FORMAT_TIME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_TIME
        /// </summary>
        private void M_FORMAT_TIME(string returnMethod = "")
        {
            if (WS.DT_EDIT_PATTERN.IsEqualTo("23:59:59"))                                                       //COBOL==> IF DT-EDIT-PATTERN = '23:59:59'
            {
                WS.DT_FORMATTED_TIME.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize(WS.DT_HOUR.AsString(), ":", WS.DT_MINUTES.AsString(), ":", WS.DT_SECONDS.AsString())));  //COBOL==> STRING DT-HOUR , ':' , DT-MINUTES , ':' , DT-SECONDS DELIMITED BY SIZE INTO DT-FORMATTED-TIME
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_FORMAT_TIME") { M_FORMAT_TIME_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_TIME_EXIT
        /// </summary>
        private void M_FORMAT_TIME_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_FORMAT_TIME_EXIT") { return; }                                               //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_FORMAT_TIME_EXIT") { M_NUMERIC_FORMATTER(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_NUMERIC_FORMATTER
        /// </summary>
        private void M_NUMERIC_FORMATTER(string returnMethod = "")
        {
            WS.EP_SIGN_USED.SetValue("N");                                                                      //COBOL==> MOVE 'N' TO EP-SIGN-USED.
            WS.EP_DOLLAR_USED.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO EP-DOLLAR-USED.
            WS.EP_DPOINT_USED.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO EP-DPOINT-USED.
            WS.EP_FIRST_DIGIT.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO EP-FIRST-DIGIT.
            WS.EP_ISTHERE_DCML.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO EP-ISTHERE-DCML.
            WS.EP_ISTHERE_V.SetValue("N");                                                                      //COBOL==> MOVE 'N' TO EP-ISTHERE-V.
            WS.EP_CURRENCY_COUNT.SetValueWithZeroes();                                                          //COBOL==> MOVE 0 TO EP-CURRENCY-COUNT.
            WS.EP_PRECISION.SetValueWithZeroes();                                                               //COBOL==> MOVE 0 TO EP-PRECISION.
            WS.EP_SCALE.SetValueWithZeroes();                                                                   //COBOL==> MOVE 0 TO EP-SCALE.
            WS.EP_SZNUMERIC.SetValueWithSpaces();                                                               //COBOL==> MOVE SPACES TO EP-SZNUMERIC.
            WS.EP_FORMATTED_VALUE.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO EP-FORMATTED-VALUE.
                                                                                                                //COMMENT:     CALCULATE PRECISION AND SCALE
            for (WS.EP_COUNT.SetValue(1); (!(WS.EP_COUNT.IsEqualTo(40))); WS.EP_COUNT.Add(1))                  //COBOL==> PERFORM VARYING EP-COUNT FROM 1 BY 1 UNTIL EP-COUNT = 40
            {
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("."))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("V")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '.' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = 'V'
                {
                    WS.EP_ISTHERE_DCML.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO EP-ISTHERE-DCML
                    WS.EP_ISTHERE_V.SetValue("Y");                                                                      //COBOL==> MOVE 'Y' TO EP-ISTHERE-V
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            for (WS.EP_COUNT.SetValue(WS.EP_EDIT_PATTERN_LEN); (!(WS.EP_COUNT.IsEqualTo(0))); WS.EP_COUNT.Add(-1))  //COBOL==> PERFORM VARYING EP-COUNT FROM EP-EDIT-PATTERN-LEN BY -1 UNTIL EP-COUNT = 0
            {
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("9"))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("Z")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '9' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = 'Z'
                {
                    if (WS.EP_ISTHERE_DCML.IsEqualTo("Y"))                                                              //COBOL==> IF EP-ISTHERE-DCML = 'Y'
                    {
                        WS.EP_SCALE.Add(1);                                                                                 //COBOL==> ADD 1 TO EP-SCALE
                        WS.EP_PRECISION.Add(1);                                                                             //COBOL==> ADD 1 TO EP-PRECISION
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_PRECISION.Add(1);                                                                             //COBOL==> ADD 1 TO EP-PRECISION
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if ((((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("-"))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("+")))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("*")))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("$")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '-' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = '+' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = '*' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = '$'
                {
                    if (WS.EP_ISTHERE_DCML.IsEqualTo("Y"))                                                              //COBOL==> IF EP-ISTHERE-DCML = 'Y'
                    {
                        WS.EP_PRECISION.Add(1);                                                                             //COBOL==> ADD 1 TO EP-PRECISION
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("."))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("V")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '.' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = 'V'
                {
                    WS.EP_ISTHERE_DCML.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO EP-ISTHERE-DCML
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
                                                                                                                //COMMENT:     GET THE SIGN, CONVERT INTEGER PART TO ABSOLUTE VALUE
            if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN EQUAL '-'
            {
                WS.EP_INTEGER2.SetComputeValue(WS.EP_INTEGER2.AsInt() * -1);                                        //COBOL==> COMPUTE EP-INTEGER2 = EP-INTEGER2 * -1
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_INTEGER.SetValue(WS.EP_INTEGER2);                                                             //COBOL==> MOVE EP-INTEGER2 TO EP-INTEGER.
                                                                                                                //COMMENT:     CONVERT TO STRING WITH INTEGER AND DECIMALS
            WS.EP_COUNT2.SetValueWithZeroes();                                                                  //COBOL==> MOVE 0 TO EP-COUNT2.
            for (WS.EP_COUNT.SetValue(1); (!(WS.EP_COUNT.IsEqualTo(20))); WS.EP_COUNT.Add(1))                  //COBOL==> PERFORM VARYING EP-COUNT FROM 1 BY 1 UNTIL EP-COUNT = 20
            {
                if (!(WS.EP_INTEGER_X[WS.EP_COUNT.AsInt()].IsSpaces()))                                             //COBOL==> IF EP-INTEGER-X ( EP-COUNT ) NOT EQUAL SPACE
                {
                    WS.EP_COUNT2.Add(1);                                                                                //COBOL==> ADD 1 TO EP-COUNT2
                    WS.EP_SZNUMERIC_X[WS.EP_COUNT2.AsInt()].SetValue(WS.EP_INTEGER_X[WS.EP_COUNT.AsInt()]);             //COBOL==> MOVE EP-INTEGER-X ( EP-COUNT ) TO EP-SZNUMERIC-X ( EP-COUNT2 )
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            if (WS.EP_SCALE.IsGreaterThan(0))                                                                   //COBOL==> IF EP-SCALE > 0 THEN
            {
                WS.EP_COUNT2.Add(1);                                                                                //COBOL==> ADD 1 TO EP-COUNT2
                WS.EP_SZNUMERIC_X[WS.EP_COUNT2.AsInt()].SetValue(".");                                              //COBOL==> MOVE '.' TO EP-SZNUMERIC-X ( EP-COUNT2 )
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:     STRIP OFF TRAILING ZERO'S IN DECIMAL PLACES
            WS.EP_STOP.SetValue("N");                                                                           //COBOL==> MOVE 'N' TO EP-STOP.
            for (WS.EP_COUNT.SetValue(18); (!(((WS.EP_COUNT.IsEqualTo(0)) || (WS.EP_STOP.IsEqualTo("Y"))) || (WS.EP_COUNT.IsEqualTo(WS.EP_SCALE)))); WS.EP_COUNT.Add(-1))  //COBOL==> PERFORM VARYING EP-COUNT FROM 18 BY -1 UNTIL EP-COUNT = 0 OR EP-STOP = 'Y' OR EP-COUNT = EP-SCALE
            {
                if ((WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()].IsEqualTo(0))
             || (WS.EP_ISTHERE_DCML.IsEqualTo("N")))  //COBOL==> IF EP-DECIMAL-X ( EP-COUNT ) EQUAL 0 OR EP-ISTHERE-DCML = 'N'
                {
                    WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()].SetValueWithSpaces();                                          //COBOL==> MOVE SPACE TO EP-DECIMAL-X ( EP-COUNT )
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.EP_STOP.SetValue("Y");                                                                           //COBOL==> MOVE 'Y' TO EP-STOP
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM
            for (WS.EP_COUNT.SetValue(1); (!(WS.EP_COUNT.IsEqualTo(19))); WS.EP_COUNT.Add(1))                  //COBOL==> PERFORM VARYING EP-COUNT FROM 1 BY 1 UNTIL EP-COUNT = 19
            {
                if (!(WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()].IsSpaces()))                                             //COBOL==> IF EP-DECIMAL-X ( EP-COUNT ) NOT EQUAL SPACE
                {
                    WS.EP_COUNT2.Add(1);                                                                                //COBOL==> ADD 1 TO EP-COUNT2
                    WS.EP_SZNUMERIC_X[WS.EP_COUNT2.AsInt()].SetValue(WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()]);             //COBOL==> MOVE EP-DECIMAL-X ( EP-COUNT ) TO EP-SZNUMERIC-X ( EP-COUNT2 )
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            WS.EP_SZNUMERIC_LEN.SetValue(WS.EP_COUNT2);                                                         //COBOL==> MOVE EP-COUNT2 TO EP-SZNUMERIC-LEN.
                                                                                                                //COMMENT:     SET INITIAL INDEX
            WS.EP_INP_INDEX.SetValue(WS.EP_SZNUMERIC_LEN);                                                      //COBOL==> MOVE EP-SZNUMERIC-LEN TO EP-INP-INDEX.
            WS.EP_OUT_INDEX.SetValue(WS.EP_EDIT_PATTERN_LEN);                                                   //COBOL==> MOVE EP-EDIT-PATTERN-LEN TO EP-OUT-INDEX.
            WS.EP_INDEX.SetValue(WS.EP_EDIT_PATTERN_LEN);                                                       //COBOL==> MOVE EP-EDIT-PATTERN-LEN TO EP-INDEX.
                                                                                                                //COMMENT:     START PARSING
            while (!(WS.EP_INDEX.IsEqualTo(0)))                                                                 //COBOL==> PERFORM UNTIL EP-INDEX = 0
            {
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("9"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '9'
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("0");                                     //COBOL==> MOVE '0' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("Z"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'Z'
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        if (WS.EP_INTEGER2.IsEqualTo(0))                                                                    //COBOL==> IF EP-INTEGER2 = 0
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("*"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '*'
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("*");                                     //COBOL==> MOVE '*' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_OUT_INDEX.AsInt()].IsEqualTo("$"))                                   //COBOL==> IF EP-EDIT-PATTERN-X ( EP-OUT-INDEX ) = '$'
                {
                    WS.EP_CURRENCY_COUNT.Add(1);                                                                        //COBOL==> ADD 1 TO EP-CURRENCY-COUNT
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if (WS.EP_DOLLAR_USED.IsEqualTo("N"))                                                               //COBOL==> IF EP-DOLLAR-USED = 'N'
                        {
                            WS.EP_DOLLAR_USED.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO EP-DOLLAR-USED
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("$");                                     //COBOL==> MOVE '$' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("/"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '/'
                {
                    WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("/");                                     //COBOL==> MOVE '/' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("0"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '0'
                {
                    WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("0");                                     //COBOL==> MOVE '0' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo(","))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = ','
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(",");                                     //COBOL==> MOVE ',' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((!(WS.EP_OUT_INDEX.IsEqualTo(1)))
             && (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("*")))  //COBOL==> IF EP-OUT-INDEX NOT = 1 AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = '*'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("*");                                     //COBOL==> MOVE '*' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if ((!(WS.EP_OUT_INDEX.IsEqualTo(1)))
             && (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("9")))  //COBOL==> IF EP-OUT-INDEX NOT = 1 AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = '9'
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(",");                                     //COBOL==> MOVE ',' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("."))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '.'
                {
                    if (WS.EP_DPOINT_USED.IsEqualTo("N"))                                                               //COBOL==> IF EP-DPOINT-USED = 'N'
                    {
                        if (WS.EP_INTEGER2.IsEqualTo(0))                                                                    //COBOL==> IF EP-INTEGER2 = 0
                        {
                            if ((((WS.EP_OUT_INDEX.IsGreaterThan(1))
             && (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("Z")))
             && (WS.EP_EDIT_PATTERN_LEN.IsGreaterThan(WS.EP_INDEX)))
             && (!(WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() + 1)].IsEqualTo("9"))))  //COBOL==> IF EP-OUT-INDEX > 1 AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = 'Z' AND EP-EDIT-PATTERN-LEN > EP-INDEX AND EP-EDIT-PATTERN-X ( EP-INDEX + 1 ) NOT = '9'
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(".");                                     //COBOL==> MOVE '.' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_DPOINT_USED.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO EP-DPOINT-USED
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(".");                                     //COBOL==> MOVE '.' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            if (WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()].IsEqualTo("."))                                      //COBOL==> IF EP-SZNUMERIC-X ( EP-INP-INDEX ) = '.' THEN
                            {
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("-"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '-'
                {
                    if ((WS.EP_INTEGER2.IsEqualTo(0))
             && (!(WS.EP_SIGN.IsEqualTo("-"))))                //COBOL==> IF EP-INTEGER2 = 0 AND EP-SIGN NOT = '-'
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((WS.EP_SIGN_USED.IsEqualTo("N"))
             && ((WS.EP_INP_INDEX.IsLessThan(1))
             || ((WS.EP_FIRST_DIGIT.IsEqualTo("Y"))
             && (!(WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("-"))))))  //COBOL==> IF EP-SIGN-USED = 'N' AND ( EP-INP-INDEX LESS THAN 1 OR ( EP-FIRST-DIGIT = 'Y' AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) NOT = '-' ) )
                        {
                            WS.EP_SIGN_USED.SetValue("Y");                                                                      //COBOL==> MOVE 'Y' TO EP-SIGN-USED
                            if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SIGN);                              //COBOL==> MOVE EP-SIGN TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("+"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '+'
                {
                    if (WS.EP_INTEGER2.IsEqualTo(0))                                                                    //COBOL==> IF EP-INTEGER2 = 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((WS.EP_SIGN_USED.IsEqualTo("N"))
             && ((WS.EP_INP_INDEX.IsLessThan(1))
             || ((WS.EP_FIRST_DIGIT.IsEqualTo("Y"))
             && (!(WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("-"))))))  //COBOL==> IF EP-SIGN-USED = 'N' AND ( EP-INP-INDEX LESS THAN 1 OR ( EP-FIRST-DIGIT = 'Y' AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) NOT = '-' ) )
                        {
                            WS.EP_SIGN_USED.SetValue("Y");                                                                      //COBOL==> MOVE 'Y' TO EP-SIGN-USED
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SIGN);                              //COBOL==> MOVE EP-SIGN TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("C"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'C'
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() + 1)].IsEqualTo("R"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX + 1 ) = 'R'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("C");                                     //COBOL==> MOVE 'C' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("R"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'R'
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("C"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = 'C'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("R");                                     //COBOL==> MOVE 'R' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("D"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'D'
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() + 1)].IsEqualTo("B"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX + 1 ) = 'B'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("D");                                     //COBOL==> MOVE 'D' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("B"))
             && (WS.EP_OUT_INDEX.IsGreaterThan(1)))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'B' AND EP-OUT-INDEX > 1
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("D"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = 'D'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("B");                                     //COBOL==> MOVE 'B' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("V"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'V'
                {
                    WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.EP_OUT_INDEX.SetValue(WS.EP_OUT_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-OUT-INDEX
                }                                                                                                   //COBOL==> END-IF
                WS.EP_INDEX.SetValue(WS.EP_INDEX.AsInt() - 1);                                                      //COBOL==> SUBTRACT 1 FROM EP-INDEX
                WS.EP_FIRST_DIGIT.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO EP-FIRST-DIGIT
            }                                                                                                   //COBOL==> END-PERFORM.
                                                                                                                //COMMENT:     POST PROCESS TO ADJUST FLOATING CURRENCY SYMBOL
                                                                                                                //COMMENT:     INTO THOUSANDS SEPARATOR POSITION
            if (WS.EP_CURRENCY_COUNT.IsGreaterThan(1))                                                          //COBOL==> IF EP-CURRENCY-COUNT > 1 THEN
            {
                WS.EP_OUT_INDEX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO EP-OUT-INDEX
                WS.EP_INDEX.SetComputeValue(WS.EP_OUT_INDEX.AsDecimal() + 1m);                                      //COBOL==> COMPUTE EP-INDEX = EP-OUT-INDEX + 1
                while (!(WS.EP_INDEX.IsEqualTo(WS.EP_EDIT_PATTERN_LEN)))                                            //COBOL==> PERFORM UNTIL EP-INDEX = EP-EDIT-PATTERN-LEN
                {
                    if (((WS.EP_EDIT_PATTERN_X[WS.EP_OUT_INDEX.AsInt()].IsEqualTo("$"))
             && (WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].IsEqualTo("$")))
             && (WS.EP_FORMATTED_VALUE_X[WS.EP_INDEX.AsInt()].IsEqualTo(" ")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-OUT-INDEX ) = '$' AND EP-FORMATTED-VALUE-X ( EP-OUT-INDEX ) = '$' AND EP-FORMATTED-VALUE-X ( EP-INDEX ) = ' '
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_FORMATTED_VALUE_X[WS.EP_INDEX.AsInt()].SetValue("$");                                         //COBOL==> MOVE '$' TO EP-FORMATTED-VALUE-X ( EP-INDEX )
                        WS.EP_OUT_INDEX.SetValue(WS.EP_EDIT_PATTERN_LEN);                                                   //COBOL==> MOVE EP-EDIT-PATTERN-LEN TO EP-OUT-INDEX
                    }                                                                                                   //COBOL==> END-IF
                    WS.EP_OUT_INDEX.Add(1);                                                                             //COBOL==> ADD 1 TO EP-OUT-INDEX
                    WS.EP_INDEX.Add(1);                                                                                 //COBOL==> ADD 1 TO EP-INDEX
                }                                                                                                   //COBOL==> END-PERFORM
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_NUMERIC_FORMATTER") { M_NUMERIC_FORMATTER_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_NUMERIC_FORMATTER_EXIT
        /// </summary>
        private void M_NUMERIC_FORMATTER_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_NUMERIC_FORMATTER_EXIT") { return; }                                         //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
