#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:43:22 PM
   **        *   FROM COBOL PGM   :  SWEXEE39
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   **************************************************************
      THE PURPOSE OF THIS EXTERNAL IS TO "READ" THE LOCATE RESPONSE
       FILE AND PASS THE DATA BACK TO THE CALLING PROCEDURE.
      THE STATUS OF THE READ IS PASSED BACK TO THE PROCEDURE IN
       TEXT-RETURN-CODE-0003  USING THE FOLLOWING VALUES:
          "00" = ALL OK
          "EF" = END OF FILE
          "BI" = BAD INSTRUCTION (NOT OPEN, POSITION, OR CLOSE)
          "BR" = BAD READ
          "BP" = BAD POSITION
          "PE" = BAD OPEN
          "DB" = BAD DATE - BIRTH DATE
          "DX" = BAD DATE - EXPERATION DATE
          "DQ" = BAD DATE - REQUEST DATE
          "DP" = BAD DATE - RESPONSE DATE
          "DI" = BAD DATE - ISSUE DATE
          "DS" = BAD DATE - SUSPENSE DATE
                       SOURCE CODE GENERATED BY
                              COOL:GEN
               COPYRIGHT 2000, STERLING SOFTWARE, INC.
       NAME: EAB_PROCESS_LOCATE_RESPONSE      DATE: 2000/06/28
       TARGET OS:   MVS                       TIME: 14:49:29
       TARGET DBMS: DB2                       USER: SWSRPDP
       GENERATION OPTIONS:
       DEBUG TRACE OPTION NOT SELECTED
       DATA MODELING CONSTRAINT ENFORCEMENT NOT SELECTED
       OPTIMIZED IMPORT VIEW INITIALIZATION SELECTED
       HIGH PERFORMANCE VIEW PASSING SELECTED
       LAST-STATEMENT-NUM EXECUTION SELECTED
       ENFORCE DEFAULT VALUES WITH DBMS NOT SELECTED
       INIT UNSPECIFIED OPTIONAL FIELDS TO NULL NOT SELECTED
       WR/291  - 03/13/2001 - PAUL PHINNEY
                 ADD PROCESSING FOR SUSPENDED-STATUS
   **************************************************************
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.IO.Common;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
using GOV.KS.DCF.CSS.Common.BL;
using MDSY.Framework.IO.Common;
#endregion

namespace GOV.KS.DCF.CSS.Batch.BL
{
    #region File Section Class
    internal class SWEXEE39_fd : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string FileSection = "SWEXEE39_fd_FileSection";
            internal const string LOCATE_INPUT_FILE = "LOCATE_INPUT_FILE";
            internal const string LOCATE_INPUT_RECORD = "LOCATE_INPUT_RECORD";
            internal const string DETAIL_RECORD = "DETAIL_RECORD";
            internal const string LOCATE_SSN = "LOCATE_SSN";
            internal const string LOCATE_CSE_NAME = "LOCATE_CSE_NAME";
            internal const string LOCATE_DOB = "LOCATE_DOB";
            internal const string LOCATE_DOB_CC = "LOCATE_DOB_CC";
            internal const string LOCATE_DOB_YY = "LOCATE_DOB_YY";
            internal const string LOCATE_DOB_MM = "LOCATE_DOB_MM";
            internal const string LOCATE_DOB_DD = "LOCATE_DOB_DD";
            internal const string LOCATE_ADDRESS_TYPE = "LOCATE_ADDRESS_TYPE";
            internal const string LOCATE_ADDRESS = "LOCATE_ADDRESS";
            internal const string LOCATE_ADDRESS_1 = "LOCATE_ADDRESS_1";
            internal const string LOCATE_ADDRESS_2 = "LOCATE_ADDRESS_2";
            internal const string LOCATE_ADDRESS_3 = "LOCATE_ADDRESS_3";
            internal const string LOCATE_ADDRESS_4 = "LOCATE_ADDRESS_4";
            internal const string LOCATE_CITY = "LOCATE_CITY";
            internal const string LOCATE_STATE = "LOCATE_STATE";
            internal const string LOCATE_ZIP = "LOCATE_ZIP";
            internal const string LOCATE_ZIP_5 = "LOCATE_ZIP_5";
            internal const string LOCATE_ZIP_4 = "LOCATE_ZIP_4";
            internal const string LOCATE_ZIP_3 = "LOCATE_ZIP_3";
            internal const string LOCATE_COUNTRY = "LOCATE_COUNTRY";
            internal const string LOCATE_PROVINCE = "LOCATE_PROVINCE";
            internal const string LOCATE_POSTAL_CODE = "LOCATE_POSTAL_CODE";
            internal const string LOCATE_LICENSE_NUM = "LOCATE_LICENSE_NUM";
            internal const string LOCATE_EXPIRE_DATE = "LOCATE_EXPIRE_DATE";
            internal const string LOCATE_EXP_CC = "LOCATE_EXP_CC";
            internal const string LOCATE_EXP_YY = "LOCATE_EXP_YY";
            internal const string LOCATE_EXP_MM = "LOCATE_EXP_MM";
            internal const string LOCATE_EXP_DD = "LOCATE_EXP_DD";
            internal const string LOCATE_REQUEST_DATE = "LOCATE_REQUEST_DATE";
            internal const string LOCATE_REQ_CC = "LOCATE_REQ_CC";
            internal const string LOCATE_REQ_YY = "LOCATE_REQ_YY";
            internal const string LOCATE_REQ_MM = "LOCATE_REQ_MM";
            internal const string LOCATE_REQ_DD = "LOCATE_REQ_DD";
            internal const string LOCATE_RESPONSE_DATE = "LOCATE_RESPONSE_DATE";
            internal const string LOCATE_RSP_CC = "LOCATE_RSP_CC";
            internal const string LOCATE_RSP_YY = "LOCATE_RSP_YY";
            internal const string LOCATE_RSP_MM = "LOCATE_RSP_MM";
            internal const string LOCATE_RSP_DD = "LOCATE_RSP_DD";
            internal const string LOCATE_ISSUED_DATE = "LOCATE_ISSUED_DATE";
            internal const string LOCATE_ISS_CC = "LOCATE_ISS_CC";
            internal const string LOCATE_ISS_YY = "LOCATE_ISS_YY";
            internal const string LOCATE_ISS_MM = "LOCATE_ISS_MM";
            internal const string LOCATE_ISS_DD = "LOCATE_ISS_DD";
            internal const string LOCATE_SUSPENDED_DATE = "LOCATE_SUSPENDED_DATE";
            internal const string LOCATE_SUS_CC = "LOCATE_SUS_CC";
            internal const string LOCATE_SUS_YY = "LOCATE_SUS_YY";
            internal const string LOCATE_SUS_MM = "LOCATE_SUS_MM";
            internal const string LOCATE_SUS_DD = "LOCATE_SUS_DD";
            internal const string LOCATE_LICENSE_SOURCE = "LOCATE_LICENSE_SOURCE";
            internal const string LOCATE_SEQUENCE = "LOCATE_SEQUENCE";
            internal const string LOCATE_SEQUENCE_R = "LOCATE_SEQUENCE_R";
            internal const string LOCATE_CSE_PERSON_NUM = "LOCATE_CSE_PERSON_NUM";
            internal const string LOCATE_AGENCY_NUMBER = "LOCATE_AGENCY_NUMBER";
            internal const string LOCATE_SUSP_STATUS = "LOCATE_SUSP_STATUS";
        }
        #endregion

        #region Direct-access element properties
        public IFileLink LOCATE_INPUT_FILE { get; set; }
        public IGroup LOCATE_INPUT_RECORD { get { return GetElementByName<IGroup>(Names.LOCATE_INPUT_RECORD); } }
        public IGroup DETAIL_RECORD { get { return GetElementByName<IGroup>(Names.DETAIL_RECORD); } }
        public IField LOCATE_SSN { get { return GetElementByName<IField>(Names.LOCATE_SSN); } }
        public IField LOCATE_CSE_NAME { get { return GetElementByName<IField>(Names.LOCATE_CSE_NAME); } }
        public IGroup LOCATE_DOB { get { return GetElementByName<IGroup>(Names.LOCATE_DOB); } }
        public IField LOCATE_DOB_CC { get { return GetElementByName<IField>(Names.LOCATE_DOB_CC); } }
        public IField LOCATE_DOB_YY { get { return GetElementByName<IField>(Names.LOCATE_DOB_YY); } }
        public IField LOCATE_DOB_MM { get { return GetElementByName<IField>(Names.LOCATE_DOB_MM); } }
        public IField LOCATE_DOB_DD { get { return GetElementByName<IField>(Names.LOCATE_DOB_DD); } }
        public IField LOCATE_ADDRESS_TYPE { get { return GetElementByName<IField>(Names.LOCATE_ADDRESS_TYPE); } }
        public IGroup LOCATE_ADDRESS { get { return GetElementByName<IGroup>(Names.LOCATE_ADDRESS); } }
        public IField LOCATE_ADDRESS_1 { get { return GetElementByName<IField>(Names.LOCATE_ADDRESS_1); } }
        public IField LOCATE_ADDRESS_2 { get { return GetElementByName<IField>(Names.LOCATE_ADDRESS_2); } }
        public IField LOCATE_ADDRESS_3 { get { return GetElementByName<IField>(Names.LOCATE_ADDRESS_3); } }
        public IField LOCATE_ADDRESS_4 { get { return GetElementByName<IField>(Names.LOCATE_ADDRESS_4); } }
        public IField LOCATE_CITY { get { return GetElementByName<IField>(Names.LOCATE_CITY); } }
        public IField LOCATE_STATE { get { return GetElementByName<IField>(Names.LOCATE_STATE); } }
        public IGroup LOCATE_ZIP { get { return GetElementByName<IGroup>(Names.LOCATE_ZIP); } }
        public IField LOCATE_ZIP_5 { get { return GetElementByName<IField>(Names.LOCATE_ZIP_5); } }
        public IField LOCATE_ZIP_4 { get { return GetElementByName<IField>(Names.LOCATE_ZIP_4); } }
        public IField LOCATE_ZIP_3 { get { return GetElementByName<IField>(Names.LOCATE_ZIP_3); } }
        public IField LOCATE_COUNTRY { get { return GetElementByName<IField>(Names.LOCATE_COUNTRY); } }
        public IField LOCATE_PROVINCE { get { return GetElementByName<IField>(Names.LOCATE_PROVINCE); } }
        public IField LOCATE_POSTAL_CODE { get { return GetElementByName<IField>(Names.LOCATE_POSTAL_CODE); } }
        public IField LOCATE_LICENSE_NUM { get { return GetElementByName<IField>(Names.LOCATE_LICENSE_NUM); } }
        public IGroup LOCATE_EXPIRE_DATE { get { return GetElementByName<IGroup>(Names.LOCATE_EXPIRE_DATE); } }
        public IField LOCATE_EXP_CC { get { return GetElementByName<IField>(Names.LOCATE_EXP_CC); } }
        public IField LOCATE_EXP_YY { get { return GetElementByName<IField>(Names.LOCATE_EXP_YY); } }
        public IField LOCATE_EXP_MM { get { return GetElementByName<IField>(Names.LOCATE_EXP_MM); } }
        public IField LOCATE_EXP_DD { get { return GetElementByName<IField>(Names.LOCATE_EXP_DD); } }
        public IGroup LOCATE_REQUEST_DATE { get { return GetElementByName<IGroup>(Names.LOCATE_REQUEST_DATE); } }
        public IField LOCATE_REQ_CC { get { return GetElementByName<IField>(Names.LOCATE_REQ_CC); } }
        public IField LOCATE_REQ_YY { get { return GetElementByName<IField>(Names.LOCATE_REQ_YY); } }
        public IField LOCATE_REQ_MM { get { return GetElementByName<IField>(Names.LOCATE_REQ_MM); } }
        public IField LOCATE_REQ_DD { get { return GetElementByName<IField>(Names.LOCATE_REQ_DD); } }
        public IGroup LOCATE_RESPONSE_DATE { get { return GetElementByName<IGroup>(Names.LOCATE_RESPONSE_DATE); } }
        public IField LOCATE_RSP_CC { get { return GetElementByName<IField>(Names.LOCATE_RSP_CC); } }
        public IField LOCATE_RSP_YY { get { return GetElementByName<IField>(Names.LOCATE_RSP_YY); } }
        public IField LOCATE_RSP_MM { get { return GetElementByName<IField>(Names.LOCATE_RSP_MM); } }
        public IField LOCATE_RSP_DD { get { return GetElementByName<IField>(Names.LOCATE_RSP_DD); } }
        public IGroup LOCATE_ISSUED_DATE { get { return GetElementByName<IGroup>(Names.LOCATE_ISSUED_DATE); } }
        public IField LOCATE_ISS_CC { get { return GetElementByName<IField>(Names.LOCATE_ISS_CC); } }
        public IField LOCATE_ISS_YY { get { return GetElementByName<IField>(Names.LOCATE_ISS_YY); } }
        public IField LOCATE_ISS_MM { get { return GetElementByName<IField>(Names.LOCATE_ISS_MM); } }
        public IField LOCATE_ISS_DD { get { return GetElementByName<IField>(Names.LOCATE_ISS_DD); } }
        public IGroup LOCATE_SUSPENDED_DATE { get { return GetElementByName<IGroup>(Names.LOCATE_SUSPENDED_DATE); } }
        public IField LOCATE_SUS_CC { get { return GetElementByName<IField>(Names.LOCATE_SUS_CC); } }
        public IField LOCATE_SUS_YY { get { return GetElementByName<IField>(Names.LOCATE_SUS_YY); } }
        public IField LOCATE_SUS_MM { get { return GetElementByName<IField>(Names.LOCATE_SUS_MM); } }
        public IField LOCATE_SUS_DD { get { return GetElementByName<IField>(Names.LOCATE_SUS_DD); } }
        public IField LOCATE_LICENSE_SOURCE { get { return GetElementByName<IField>(Names.LOCATE_LICENSE_SOURCE); } }
        public IField LOCATE_SEQUENCE { get { return GetElementByName<IField>(Names.LOCATE_SEQUENCE); } }
        public IField LOCATE_SEQUENCE_R { get { return GetElementByName<IField>(Names.LOCATE_SEQUENCE_R); } }
        public IField LOCATE_CSE_PERSON_NUM { get { return GetElementByName<IField>(Names.LOCATE_CSE_PERSON_NUM); } }
        public IField LOCATE_AGENCY_NUMBER { get { return GetElementByName<IField>(Names.LOCATE_AGENCY_NUMBER); } }
        public IField LOCATE_SUSP_STATUS { get { return GetElementByName<IField>(Names.LOCATE_SUSP_STATUS); } }


        internal SWEXEE39_ws WS;
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the FileSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.LOCATE_INPUT_RECORD, (LOCATE_INPUT_RECORD) =>
           {
               LOCATE_INPUT_RECORD.CreateNewGroup(Names.DETAIL_RECORD, (DETAIL_RECORD) =>
               {
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_SSN, FieldType.String, 9);
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_CSE_NAME, FieldType.String, 30);
                   DETAIL_RECORD.CreateNewGroup(Names.LOCATE_DOB, (LOCATE_DOB) =>
                   {
                       LOCATE_DOB.CreateNewField(Names.LOCATE_DOB_CC, FieldType.String, 2);
                       LOCATE_DOB.CreateNewField(Names.LOCATE_DOB_YY, FieldType.String, 2);
                       LOCATE_DOB.CreateNewField(Names.LOCATE_DOB_MM, FieldType.String, 2);
                       LOCATE_DOB.CreateNewField(Names.LOCATE_DOB_DD, FieldType.String, 2);
                   });
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_ADDRESS_TYPE, FieldType.String, 1);
                   DETAIL_RECORD.CreateNewGroup(Names.LOCATE_ADDRESS, (LOCATE_ADDRESS) =>
                   {
                       LOCATE_ADDRESS.CreateNewField(Names.LOCATE_ADDRESS_1, FieldType.String, 25);
                       LOCATE_ADDRESS.CreateNewField(Names.LOCATE_ADDRESS_2, FieldType.String, 25);
                       LOCATE_ADDRESS.CreateNewField(Names.LOCATE_ADDRESS_3, FieldType.String, 25);
                       LOCATE_ADDRESS.CreateNewField(Names.LOCATE_ADDRESS_4, FieldType.String, 25);
                   });
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_CITY, FieldType.String, 15);
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_STATE, FieldType.String, 2);
                   DETAIL_RECORD.CreateNewGroup(Names.LOCATE_ZIP, (LOCATE_ZIP) =>
                   {
                       LOCATE_ZIP.CreateNewField(Names.LOCATE_ZIP_5, FieldType.String, 5);
                       LOCATE_ZIP.CreateNewField(Names.LOCATE_ZIP_4, FieldType.String, 4);
                       LOCATE_ZIP.CreateNewField(Names.LOCATE_ZIP_3, FieldType.String, 3);
                   });
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_COUNTRY, FieldType.String, 2);
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_PROVINCE, FieldType.String, 5);
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_POSTAL_CODE, FieldType.String, 10);
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_LICENSE_NUM, FieldType.String, 25);
                   DETAIL_RECORD.CreateNewGroup(Names.LOCATE_EXPIRE_DATE, (LOCATE_EXPIRE_DATE) =>
                   {
                       LOCATE_EXPIRE_DATE.CreateNewField(Names.LOCATE_EXP_CC, FieldType.String, 2);
                       LOCATE_EXPIRE_DATE.CreateNewField(Names.LOCATE_EXP_YY, FieldType.String, 2);
                       LOCATE_EXPIRE_DATE.CreateNewField(Names.LOCATE_EXP_MM, FieldType.String, 2);
                       LOCATE_EXPIRE_DATE.CreateNewField(Names.LOCATE_EXP_DD, FieldType.String, 2);
                   });
                   DETAIL_RECORD.CreateNewGroup(Names.LOCATE_REQUEST_DATE, (LOCATE_REQUEST_DATE) =>
                   {
                       LOCATE_REQUEST_DATE.CreateNewField(Names.LOCATE_REQ_CC, FieldType.String, 2);
                       LOCATE_REQUEST_DATE.CreateNewField(Names.LOCATE_REQ_YY, FieldType.String, 2);
                       LOCATE_REQUEST_DATE.CreateNewField(Names.LOCATE_REQ_MM, FieldType.String, 2);
                       LOCATE_REQUEST_DATE.CreateNewField(Names.LOCATE_REQ_DD, FieldType.String, 2);
                   });
                   DETAIL_RECORD.CreateNewGroup(Names.LOCATE_RESPONSE_DATE, (LOCATE_RESPONSE_DATE) =>
                   {
                       LOCATE_RESPONSE_DATE.CreateNewField(Names.LOCATE_RSP_CC, FieldType.String, 2);
                       LOCATE_RESPONSE_DATE.CreateNewField(Names.LOCATE_RSP_YY, FieldType.String, 2);
                       LOCATE_RESPONSE_DATE.CreateNewField(Names.LOCATE_RSP_MM, FieldType.String, 2);
                       LOCATE_RESPONSE_DATE.CreateNewField(Names.LOCATE_RSP_DD, FieldType.String, 2);
                   });
                   DETAIL_RECORD.CreateNewGroup(Names.LOCATE_ISSUED_DATE, (LOCATE_ISSUED_DATE) =>
                   {
                       LOCATE_ISSUED_DATE.CreateNewField(Names.LOCATE_ISS_CC, FieldType.String, 2);
                       LOCATE_ISSUED_DATE.CreateNewField(Names.LOCATE_ISS_YY, FieldType.String, 2);
                       LOCATE_ISSUED_DATE.CreateNewField(Names.LOCATE_ISS_MM, FieldType.String, 2);
                       LOCATE_ISSUED_DATE.CreateNewField(Names.LOCATE_ISS_DD, FieldType.String, 2);
                   });
                   DETAIL_RECORD.CreateNewGroup(Names.LOCATE_SUSPENDED_DATE, (LOCATE_SUSPENDED_DATE) =>
                   {
                       LOCATE_SUSPENDED_DATE.CreateNewField(Names.LOCATE_SUS_CC, FieldType.String, 2);
                       LOCATE_SUSPENDED_DATE.CreateNewField(Names.LOCATE_SUS_YY, FieldType.String, 2);
                       LOCATE_SUSPENDED_DATE.CreateNewField(Names.LOCATE_SUS_MM, FieldType.String, 2);
                       LOCATE_SUSPENDED_DATE.CreateNewField(Names.LOCATE_SUS_DD, FieldType.String, 2);
                   });
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_LICENSE_SOURCE, FieldType.String, 25);

                   IField LOCATE_SEQUENCE_local = DETAIL_RECORD.CreateNewField(Names.LOCATE_SEQUENCE, FieldType.String, 2);
                   DETAIL_RECORD.CreateNewFieldRedefine(Names.LOCATE_SEQUENCE_R, FieldType.SignedNumeric, LOCATE_SEQUENCE_local, 2);
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_CSE_PERSON_NUM, FieldType.String, 10);
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_AGENCY_NUMBER, FieldType.String, 5);
                   DETAIL_RECORD.CreateNewField(Names.LOCATE_SUSP_STATUS, FieldType.String, 1);
                   DETAIL_RECORD.CreateNewFillerField(48, FillWith.Hashes);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.FileSection;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            IFileHandler FileHandler = InversionContainer.GetImplementingObject<IFileHandler>();

            LOCATE_INPUT_FILE = FileHandler.GetFile("UT_S_LOCRSPIN");
            LOCATE_INPUT_FILE.StatusField = WS.LOCATE_FILE_STATUS;
            LOCATE_INPUT_FILE.AssociatedBuffer = LOCATE_INPUT_RECORD;
        }
        #endregion

        #region Constructors
        public SWEXEE39_fd(SWEXEE39_ws ws)
            : base()
        {
            this.WS = ws;
            Initialize();

        }
        #endregion
    }
    #endregion File Section Class
    #region Working Storage Class
    internal class SWEXEE39_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXEE39_ws_WorkingStorage";
            internal const string LOCATE_FILE_STATUS = "LOCATE_FILE_STATUS";
            internal const string WS_BAD_DATE_FLAG = "WS_BAD_DATE_FLAG";
            internal const string WS_DATE_CHECK = "WS_DATE_CHECK";
            internal const string WS_CHECK_CC = "WS_CHECK_CC";
            internal const string WS_CHECK_C1 = "WS_CHECK_C1";
            internal const string WS_CHECK_C2 = "WS_CHECK_C2";
            internal const string WS_CHECK_YY = "WS_CHECK_YY";
            internal const string WS_CHECK_Y1 = "WS_CHECK_Y1";
            internal const string WS_CHECK_Y2 = "WS_CHECK_Y2";
            internal const string WS_CHECK_MM = "WS_CHECK_MM";
            internal const string WS_CHECK_M1 = "WS_CHECK_M1";
            internal const string WS_CHECK_M2 = "WS_CHECK_M2";
            internal const string WS_CHECK_DD = "WS_CHECK_DD";
            internal const string WS_CHECK_D1 = "WS_CHECK_D1";
            internal const string WS_CHECK_D2 = "WS_CHECK_D2";
        }
        #endregion

        #region Direct-access element properties
        public IField LOCATE_FILE_STATUS { get { return GetElementByName<IField>(Names.LOCATE_FILE_STATUS); } }
        public IField WS_BAD_DATE_FLAG { get { return GetElementByName<IField>(Names.WS_BAD_DATE_FLAG); } }
        public IGroup WS_DATE_CHECK { get { return GetElementByName<IGroup>(Names.WS_DATE_CHECK); } }
        public IGroup WS_CHECK_CC { get { return GetElementByName<IGroup>(Names.WS_CHECK_CC); } }
        public IField WS_CHECK_C1 { get { return GetElementByName<IField>(Names.WS_CHECK_C1); } }
        public IField WS_CHECK_C2 { get { return GetElementByName<IField>(Names.WS_CHECK_C2); } }
        public IGroup WS_CHECK_YY { get { return GetElementByName<IGroup>(Names.WS_CHECK_YY); } }
        public IField WS_CHECK_Y1 { get { return GetElementByName<IField>(Names.WS_CHECK_Y1); } }
        public IField WS_CHECK_Y2 { get { return GetElementByName<IField>(Names.WS_CHECK_Y2); } }
        public IGroup WS_CHECK_MM { get { return GetElementByName<IGroup>(Names.WS_CHECK_MM); } }
        public IField WS_CHECK_M1 { get { return GetElementByName<IField>(Names.WS_CHECK_M1); } }
        public IField WS_CHECK_M2 { get { return GetElementByName<IField>(Names.WS_CHECK_M2); } }
        public IGroup WS_CHECK_DD { get { return GetElementByName<IGroup>(Names.WS_CHECK_DD); } }
        public IField WS_CHECK_D1 { get { return GetElementByName<IField>(Names.WS_CHECK_D1); } }
        public IField WS_CHECK_D2 { get { return GetElementByName<IField>(Names.WS_CHECK_D2); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.LOCATE_FILE_STATUS, FieldType.String, 2);
            recordDef.CreateNewField(Names.WS_BAD_DATE_FLAG, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.WS_DATE_CHECK, (WS_DATE_CHECK) =>
           {
               WS_DATE_CHECK.CreateNewGroup(Names.WS_CHECK_CC, (WS_CHECK_CC) =>
               {
                   WS_CHECK_CC.CreateNewField(Names.WS_CHECK_C1, FieldType.String, 1);
                   WS_CHECK_CC.CreateNewField(Names.WS_CHECK_C2, FieldType.String, 1);
               });
               WS_DATE_CHECK.CreateNewGroup(Names.WS_CHECK_YY, (WS_CHECK_YY) =>
               {
                   WS_CHECK_YY.CreateNewField(Names.WS_CHECK_Y1, FieldType.String, 1);
                   WS_CHECK_YY.CreateNewField(Names.WS_CHECK_Y2, FieldType.String, 1);
               });
               WS_DATE_CHECK.CreateNewGroup(Names.WS_CHECK_MM, (WS_CHECK_MM) =>
               {
                   WS_CHECK_MM.CreateNewField(Names.WS_CHECK_M1, FieldType.String, 1);
                   WS_CHECK_MM.CreateNewField(Names.WS_CHECK_M2, FieldType.String, 1);
               });
               WS_DATE_CHECK.CreateNewGroup(Names.WS_CHECK_DD, (WS_CHECK_DD) =>
               {
                   WS_CHECK_DD.CreateNewField(Names.WS_CHECK_D1, FieldType.String, 1);
                   WS_CHECK_DD.CreateNewField(Names.WS_CHECK_D2, FieldType.String, 1);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXEE39_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXEE39_ls_LinkageSection";
            internal const string IEF_RUNTIME_PARM1 = "IEF_RUNTIME_PARM1";
            internal const string IEF_RUNTIME_PARM2 = "IEF_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string DB_ERROR_SF = "DB_ERROR_SF";
            internal const string ABORT_SHOW_DBMS_MSG_SF = "ABORT_SHOW_DBMS_MSG_SF";
            internal const string ABORT_SHOW_USER_MSG_SF = "ABORT_SHOW_USER_MSG_SF";
            internal const string RETRY_TRAN_REQUESTED_SF = "RETRY_TRAN_REQUESTED_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DB_DEADLOCK_TIMOUT_FL_LS = "DB_DEADLOCK_TIMOUT_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_TIRDATE_SKIP_VAL = "PSMGR_TIRDATE_SKIP_VAL";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string TX_RETRY_COUNT = "TX_RETRY_COUNT";
            internal const string TX_USER_RETRY_ALLOWED = "TX_USER_RETRY_ALLOWED";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string IMPORT_RESTART_0001EV = "IMPORT_RESTART_0001EV";
            internal const string LOCATE_REQUEST_0001ET = "LOCATE_REQUEST_0001ET";
            internal const string CSE_PERSON_NUMBER_0001AS = "CSE_PERSON_NUMBER_0001AS";
            internal const string CSE_PERSON_NUMBER_0001 = "CSE_PERSON_NUMBER_0001";
            internal const string CSE_PERSON_NUMBER_0001XX = "CSE_PERSON_NUMBER_0001XX";
            internal const string AGENCY_NUMBER_0001AS = "AGENCY_NUMBER_0001AS";
            internal const string AGENCY_NUMBER_0001 = "AGENCY_NUMBER_0001";
            internal const string AGENCY_NUMBER_0001XX = "AGENCY_NUMBER_0001XX";
            internal const string SEQUENCE_NUMBER_0001AS = "SEQUENCE_NUMBER_0001AS";
            internal const string SEQUENCE_NUMBER_0001 = "SEQUENCE_NUMBER_0001";
            internal const string SEQUENCE_NUMBER_0001XX = "SEQUENCE_NUMBER_0001XX";
            internal const string IMPORT_0002EV = "IMPORT_0002EV";
            internal const string EXTERNAL_0002ET = "EXTERNAL_0002ET";
            internal const string FILE_INSTRUCTION_0002AS = "FILE_INSTRUCTION_0002AS";
            internal const string FILE_INSTRUCTION_0002 = "FILE_INSTRUCTION_0002";
            internal const string FILE_INSTRUCTION_0002XX = "FILE_INSTRUCTION_0002XX";
            internal const string TEXT_LINE_80_0002AS = "TEXT_LINE_80_0002AS";
            internal const string TEXT_LINE_80_0002 = "TEXT_LINE_80_0002";
            internal const string TEXT_LINE_80_0002XX = "TEXT_LINE_80_0002XX";
            internal const string EXPORT_RETURNED_0003EV = "EXPORT_RETURNED_0003EV";
            internal const string EXTERNAL_0003ET = "EXTERNAL_0003ET";
            internal const string TEXT_RETURN_CODE_0003AS = "TEXT_RETURN_CODE_0003AS";
            internal const string TEXT_RETURN_CODE_0003 = "TEXT_RETURN_CODE_0003";
            internal const string TEXT_RETURN_CODE_0003XX = "TEXT_RETURN_CODE_0003XX";
            internal const string TEXT_LINE_80_0003AS = "TEXT_LINE_80_0003AS";
            internal const string TEXT_LINE_80_0003 = "TEXT_LINE_80_0003";
            internal const string TEXT_LINE_80_0003XX = "TEXT_LINE_80_0003XX";
            internal const string EXPORT_RETURNED_0004EV = "EXPORT_RETURNED_0004EV";
            internal const string TEXT_WORK_AREA_0004ET = "TEXT_WORK_AREA_0004ET";
            internal const string TEXT_1_0004AS = "TEXT_1_0004AS";
            internal const string TEXT_1_0004 = "TEXT_1_0004";
            internal const string TEXT_1_0004XX = "TEXT_1_0004XX";
            internal const string EXPORT_RETURNED_0005EV = "EXPORT_RETURNED_0005EV";
            internal const string LOCATE_REQUEST_0005ET = "LOCATE_REQUEST_0005ET";
            internal const string SOCIAL_SECURITY_NUMBER_0005AS = "SOCIAL_SECURITY_NUMBER_0005AS";
            internal const string SOCIAL_SECURITY_NUMBER_0005 = "SOCIAL_SECURITY_NUMBER_0005";
            internal const string SOCIAL_SECURITY_NUMBER_0005XX = "SOCIAL_SECURITY_NUMBER_0005XX";
            internal const string DATE_OF_BIRTH_0005AS = "DATE_OF_BIRTH_0005AS";
            internal const string DATE_OF_BIRTH_0005 = "DATE_OF_BIRTH_0005";
            internal const string DATE_OF_BIRTH_0005XX = "DATE_OF_BIRTH_0005XX";
            internal const string CSE_PERSON_NUMBER_0005AS = "CSE_PERSON_NUMBER_0005AS";
            internal const string CSE_PERSON_NUMBER_0005 = "CSE_PERSON_NUMBER_0005";
            internal const string CSE_PERSON_NUMBER_0005XX = "CSE_PERSON_NUMBER_0005XX";
            internal const string REQUEST_DATE_0005AS = "REQUEST_DATE_0005AS";
            internal const string REQUEST_DATE_0005 = "REQUEST_DATE_0005";
            internal const string REQUEST_DATE_0005XX = "REQUEST_DATE_0005XX";
            internal const string RESPONSE_DATE_0005AS = "RESPONSE_DATE_0005AS";
            internal const string RESPONSE_DATE_0005 = "RESPONSE_DATE_0005";
            internal const string RESPONSE_DATE_0005XX = "RESPONSE_DATE_0005XX";
            internal const string LICENSE_ISSUED_DATE_0005AS = "LICENSE_ISSUED_DATE_0005AS";
            internal const string LICENSE_ISSUED_DATE_0005 = "LICENSE_ISSUED_DATE_0005";
            internal const string LICENSE_ISSUED_DATE_0005XX = "LICENSE_ISSUED_DATE_0005XX";
            internal const string LICENSE_EXPIRATION_DATE_0006AS = "LICENSE_EXPIRATION_DATE_0006AS";
            internal const string LICENSE_EXPIRATION_DATE_0006 = "LICENSE_EXPIRATION_DATE_0006";
            internal const string LICENSE_EXPIRATION_DATE_0006XX = "LICENSE_EXPIRATION_DATE_0006XX";
            internal const string LICENSE_SUSPENDED_DATE_0006AS = "LICENSE_SUSPENDED_DATE_0006AS";
            internal const string LICENSE_SUSPENDED_DATE_0006 = "LICENSE_SUSPENDED_DATE_0006";
            internal const string LICENSE_SUSPENDED_DATE_0006XX = "LICENSE_SUSPENDED_DATE_0006XX";
            internal const string LICENSE_NUMBER_0006AS = "LICENSE_NUMBER_0006AS";
            internal const string LICENSE_NUMBER_0006 = "LICENSE_NUMBER_0006";
            internal const string LICENSE_NUMBER_0006XX = "LICENSE_NUMBER_0006XX";
            internal const string AGENCY_NUMBER_0006AS = "AGENCY_NUMBER_0006AS";
            internal const string AGENCY_NUMBER_0006 = "AGENCY_NUMBER_0006";
            internal const string AGENCY_NUMBER_0006XX = "AGENCY_NUMBER_0006XX";
            internal const string SEQUENCE_NUMBER_0006AS = "SEQUENCE_NUMBER_0006AS";
            internal const string SEQUENCE_NUMBER_0006 = "SEQUENCE_NUMBER_0006";
            internal const string SEQUENCE_NUMBER_0006XX = "SEQUENCE_NUMBER_0006XX";
            internal const string LICENSE_SOURCE_NAME_0006AS = "LICENSE_SOURCE_NAME_0006AS";
            internal const string LICENSE_SOURCE_NAME_0006 = "LICENSE_SOURCE_NAME_0006";
            internal const string LICENSE_SOURCE_NAME_0006XX = "LICENSE_SOURCE_NAME_0006XX";
            internal const string STREET_1_0006AS = "STREET_1_0006AS";
            internal const string STREET_1_0006 = "STREET_1_0006";
            internal const string STREET_1_0006XX = "STREET_1_0006XX";
            internal const string ADDRESS_TYPE_0006AS = "ADDRESS_TYPE_0006AS";
            internal const string ADDRESS_TYPE_0006 = "ADDRESS_TYPE_0006";
            internal const string ADDRESS_TYPE_0006XX = "ADDRESS_TYPE_0006XX";
            internal const string STREET_2_0006AS = "STREET_2_0006AS";
            internal const string STREET_2_0006 = "STREET_2_0006";
            internal const string STREET_2_0006XX = "STREET_2_0006XX";
            internal const string STREET_3_0006AS = "STREET_3_0006AS";
            internal const string STREET_3_0006 = "STREET_3_0006";
            internal const string STREET_3_0006XX = "STREET_3_0006XX";
            internal const string STREET_4_0006AS = "STREET_4_0006AS";
            internal const string STREET_4_0006 = "STREET_4_0006";
            internal const string STREET_4_0006XX = "STREET_4_0006XX";
            internal const string CITY_0006AS = "CITY_0006AS";
            internal const string CITY_0006 = "CITY_0006";
            internal const string CITY_0006XX = "CITY_0006XX";
            internal const string STATE_0006AS = "STATE_0006AS";
            internal const string STATE_0006 = "STATE_0006";
            internal const string STATE_0006XX = "STATE_0006XX";
            internal const string ZIP_CODE_5_0006AS = "ZIP_CODE_5_0006AS";
            internal const string ZIP_CODE_5_0006 = "ZIP_CODE_5_0006";
            internal const string ZIP_CODE_5_0006XX = "ZIP_CODE_5_0006XX";
            internal const string ZIP_CODE_4_0006AS = "ZIP_CODE_4_0006AS";
            internal const string ZIP_CODE_4_0006 = "ZIP_CODE_4_0006";
            internal const string ZIP_CODE_4_0006XX = "ZIP_CODE_4_0006XX";
            internal const string ZIP_CODE_3_0006AS = "ZIP_CODE_3_0006AS";
            internal const string ZIP_CODE_3_0006 = "ZIP_CODE_3_0006";
            internal const string ZIP_CODE_3_0006XX = "ZIP_CODE_3_0006XX";
            internal const string PROVINCE_0006AS = "PROVINCE_0006AS";
            internal const string PROVINCE_0006 = "PROVINCE_0006";
            internal const string PROVINCE_0006XX = "PROVINCE_0006XX";
            internal const string POSTAL_CODE_0006AS = "POSTAL_CODE_0006AS";
            internal const string POSTAL_CODE_0006 = "POSTAL_CODE_0006";
            internal const string POSTAL_CODE_0006XX = "POSTAL_CODE_0006XX";
            internal const string COUNTRY_0006AS = "COUNTRY_0006AS";
            internal const string COUNTRY_0006 = "COUNTRY_0006";
            internal const string COUNTRY_0006XX = "COUNTRY_0006XX";
            internal const string SUSP_STATUS_0006AS = "SUSP_STATUS_0006AS";
            internal const string SUSP_STATUS_0006 = "SUSP_STATUS_0006";
            internal const string SUSP_STATUS_0006XX = "SUSP_STATUS_0006XX";
        }
        #endregion

        #region Direct-access element properties
        public IField IEF_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM1); } }
        public IField IEF_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.IEF_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField DB_ERROR_SF { get { return GetElementByName<ICheckField>(Names.DB_ERROR_SF); } }
        public ICheckField ABORT_SHOW_DBMS_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_DBMS_MSG_SF); } }
        public ICheckField ABORT_SHOW_USER_MSG_SF { get { return GetElementByName<ICheckField>(Names.ABORT_SHOW_USER_MSG_SF); } }
        public ICheckField RETRY_TRAN_REQUESTED_SF { get { return GetElementByName<ICheckField>(Names.RETRY_TRAN_REQUESTED_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DB_DEADLOCK_TIMOUT_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_DEADLOCK_TIMOUT_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_TIRDATE_SKIP_VAL { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SKIP_VAL); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IField TX_RETRY_COUNT { get { return GetElementByName<IField>(Names.TX_RETRY_COUNT); } }
        public IField TX_USER_RETRY_ALLOWED { get { return GetElementByName<IField>(Names.TX_USER_RETRY_ALLOWED); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup IMPORT_RESTART_0001EV { get { return GetElementByName<IGroup>(Names.IMPORT_RESTART_0001EV); } }
        public IGroup LOCATE_REQUEST_0001ET { get { return GetElementByName<IGroup>(Names.LOCATE_REQUEST_0001ET); } }
        public IField CSE_PERSON_NUMBER_0001AS { get { return GetElementByName<IField>(Names.CSE_PERSON_NUMBER_0001AS); } }
        public IField CSE_PERSON_NUMBER_0001 { get { return GetElementByName<IField>(Names.CSE_PERSON_NUMBER_0001); } }
        public IField CSE_PERSON_NUMBER_0001XX { get { return GetElementByName<IField>(Names.CSE_PERSON_NUMBER_0001XX); } }
        public IField AGENCY_NUMBER_0001AS { get { return GetElementByName<IField>(Names.AGENCY_NUMBER_0001AS); } }
        public IField AGENCY_NUMBER_0001 { get { return GetElementByName<IField>(Names.AGENCY_NUMBER_0001); } }
        public IField AGENCY_NUMBER_0001XX { get { return GetElementByName<IField>(Names.AGENCY_NUMBER_0001XX); } }
        public IField SEQUENCE_NUMBER_0001AS { get { return GetElementByName<IField>(Names.SEQUENCE_NUMBER_0001AS); } }
        public IField SEQUENCE_NUMBER_0001 { get { return GetElementByName<IField>(Names.SEQUENCE_NUMBER_0001); } }
        public IField SEQUENCE_NUMBER_0001XX { get { return GetElementByName<IField>(Names.SEQUENCE_NUMBER_0001XX); } }
        public IGroup IMPORT_0002EV { get { return GetElementByName<IGroup>(Names.IMPORT_0002EV); } }
        public IGroup EXTERNAL_0002ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0002ET); } }
        public IField FILE_INSTRUCTION_0002AS { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0002AS); } }
        public IField FILE_INSTRUCTION_0002 { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0002); } }
        public IField FILE_INSTRUCTION_0002XX { get { return GetElementByName<IField>(Names.FILE_INSTRUCTION_0002XX); } }
        public IField TEXT_LINE_80_0002AS { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0002AS); } }
        public IField TEXT_LINE_80_0002 { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0002); } }
        public IField TEXT_LINE_80_0002XX { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0002XX); } }
        public IGroup EXPORT_RETURNED_0003EV { get { return GetElementByName<IGroup>(Names.EXPORT_RETURNED_0003EV); } }
        public IGroup EXTERNAL_0003ET { get { return GetElementByName<IGroup>(Names.EXTERNAL_0003ET); } }
        public IField TEXT_RETURN_CODE_0003AS { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0003AS); } }
        public IField TEXT_RETURN_CODE_0003 { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0003); } }
        public IField TEXT_RETURN_CODE_0003XX { get { return GetElementByName<IField>(Names.TEXT_RETURN_CODE_0003XX); } }
        public IField TEXT_LINE_80_0003AS { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0003AS); } }
        public IField TEXT_LINE_80_0003 { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0003); } }
        public IField TEXT_LINE_80_0003XX { get { return GetElementByName<IField>(Names.TEXT_LINE_80_0003XX); } }
        public IGroup EXPORT_RETURNED_0004EV { get { return GetElementByName<IGroup>(Names.EXPORT_RETURNED_0004EV); } }
        public IGroup TEXT_WORK_AREA_0004ET { get { return GetElementByName<IGroup>(Names.TEXT_WORK_AREA_0004ET); } }
        public IField TEXT_1_0004AS { get { return GetElementByName<IField>(Names.TEXT_1_0004AS); } }
        public IField TEXT_1_0004 { get { return GetElementByName<IField>(Names.TEXT_1_0004); } }
        public IField TEXT_1_0004XX { get { return GetElementByName<IField>(Names.TEXT_1_0004XX); } }
        public IGroup EXPORT_RETURNED_0005EV { get { return GetElementByName<IGroup>(Names.EXPORT_RETURNED_0005EV); } }
        public IGroup LOCATE_REQUEST_0005ET { get { return GetElementByName<IGroup>(Names.LOCATE_REQUEST_0005ET); } }
        public IField SOCIAL_SECURITY_NUMBER_0005AS { get { return GetElementByName<IField>(Names.SOCIAL_SECURITY_NUMBER_0005AS); } }
        public IField SOCIAL_SECURITY_NUMBER_0005 { get { return GetElementByName<IField>(Names.SOCIAL_SECURITY_NUMBER_0005); } }
        public IField SOCIAL_SECURITY_NUMBER_0005XX { get { return GetElementByName<IField>(Names.SOCIAL_SECURITY_NUMBER_0005XX); } }
        public IField DATE_OF_BIRTH_0005AS { get { return GetElementByName<IField>(Names.DATE_OF_BIRTH_0005AS); } }
        public IField DATE_OF_BIRTH_0005 { get { return GetElementByName<IField>(Names.DATE_OF_BIRTH_0005); } }
        public IField DATE_OF_BIRTH_0005XX { get { return GetElementByName<IField>(Names.DATE_OF_BIRTH_0005XX); } }
        public IField CSE_PERSON_NUMBER_0005AS { get { return GetElementByName<IField>(Names.CSE_PERSON_NUMBER_0005AS); } }
        public IField CSE_PERSON_NUMBER_0005 { get { return GetElementByName<IField>(Names.CSE_PERSON_NUMBER_0005); } }
        public IField CSE_PERSON_NUMBER_0005XX { get { return GetElementByName<IField>(Names.CSE_PERSON_NUMBER_0005XX); } }
        public IField REQUEST_DATE_0005AS { get { return GetElementByName<IField>(Names.REQUEST_DATE_0005AS); } }
        public IField REQUEST_DATE_0005 { get { return GetElementByName<IField>(Names.REQUEST_DATE_0005); } }
        public IField REQUEST_DATE_0005XX { get { return GetElementByName<IField>(Names.REQUEST_DATE_0005XX); } }
        public IField RESPONSE_DATE_0005AS { get { return GetElementByName<IField>(Names.RESPONSE_DATE_0005AS); } }
        public IField RESPONSE_DATE_0005 { get { return GetElementByName<IField>(Names.RESPONSE_DATE_0005); } }
        public IField RESPONSE_DATE_0005XX { get { return GetElementByName<IField>(Names.RESPONSE_DATE_0005XX); } }
        public IField LICENSE_ISSUED_DATE_0005AS { get { return GetElementByName<IField>(Names.LICENSE_ISSUED_DATE_0005AS); } }
        public IField LICENSE_ISSUED_DATE_0005 { get { return GetElementByName<IField>(Names.LICENSE_ISSUED_DATE_0005); } }
        public IField LICENSE_ISSUED_DATE_0005XX { get { return GetElementByName<IField>(Names.LICENSE_ISSUED_DATE_0005XX); } }
        public IField LICENSE_EXPIRATION_DATE_0006AS { get { return GetElementByName<IField>(Names.LICENSE_EXPIRATION_DATE_0006AS); } }
        public IField LICENSE_EXPIRATION_DATE_0006 { get { return GetElementByName<IField>(Names.LICENSE_EXPIRATION_DATE_0006); } }
        public IField LICENSE_EXPIRATION_DATE_0006XX { get { return GetElementByName<IField>(Names.LICENSE_EXPIRATION_DATE_0006XX); } }
        public IField LICENSE_SUSPENDED_DATE_0006AS { get { return GetElementByName<IField>(Names.LICENSE_SUSPENDED_DATE_0006AS); } }
        public IField LICENSE_SUSPENDED_DATE_0006 { get { return GetElementByName<IField>(Names.LICENSE_SUSPENDED_DATE_0006); } }
        public IField LICENSE_SUSPENDED_DATE_0006XX { get { return GetElementByName<IField>(Names.LICENSE_SUSPENDED_DATE_0006XX); } }
        public IField LICENSE_NUMBER_0006AS { get { return GetElementByName<IField>(Names.LICENSE_NUMBER_0006AS); } }
        public IField LICENSE_NUMBER_0006 { get { return GetElementByName<IField>(Names.LICENSE_NUMBER_0006); } }
        public IField LICENSE_NUMBER_0006XX { get { return GetElementByName<IField>(Names.LICENSE_NUMBER_0006XX); } }
        public IField AGENCY_NUMBER_0006AS { get { return GetElementByName<IField>(Names.AGENCY_NUMBER_0006AS); } }
        public IField AGENCY_NUMBER_0006 { get { return GetElementByName<IField>(Names.AGENCY_NUMBER_0006); } }
        public IField AGENCY_NUMBER_0006XX { get { return GetElementByName<IField>(Names.AGENCY_NUMBER_0006XX); } }
        public IField SEQUENCE_NUMBER_0006AS { get { return GetElementByName<IField>(Names.SEQUENCE_NUMBER_0006AS); } }
        public IField SEQUENCE_NUMBER_0006 { get { return GetElementByName<IField>(Names.SEQUENCE_NUMBER_0006); } }
        public IField SEQUENCE_NUMBER_0006XX { get { return GetElementByName<IField>(Names.SEQUENCE_NUMBER_0006XX); } }
        public IField LICENSE_SOURCE_NAME_0006AS { get { return GetElementByName<IField>(Names.LICENSE_SOURCE_NAME_0006AS); } }
        public IField LICENSE_SOURCE_NAME_0006 { get { return GetElementByName<IField>(Names.LICENSE_SOURCE_NAME_0006); } }
        public IField LICENSE_SOURCE_NAME_0006XX { get { return GetElementByName<IField>(Names.LICENSE_SOURCE_NAME_0006XX); } }
        public IField STREET_1_0006AS { get { return GetElementByName<IField>(Names.STREET_1_0006AS); } }
        public IField STREET_1_0006 { get { return GetElementByName<IField>(Names.STREET_1_0006); } }
        public IField STREET_1_0006XX { get { return GetElementByName<IField>(Names.STREET_1_0006XX); } }
        public IField ADDRESS_TYPE_0006AS { get { return GetElementByName<IField>(Names.ADDRESS_TYPE_0006AS); } }
        public IField ADDRESS_TYPE_0006 { get { return GetElementByName<IField>(Names.ADDRESS_TYPE_0006); } }
        public IField ADDRESS_TYPE_0006XX { get { return GetElementByName<IField>(Names.ADDRESS_TYPE_0006XX); } }
        public IField STREET_2_0006AS { get { return GetElementByName<IField>(Names.STREET_2_0006AS); } }
        public IField STREET_2_0006 { get { return GetElementByName<IField>(Names.STREET_2_0006); } }
        public IField STREET_2_0006XX { get { return GetElementByName<IField>(Names.STREET_2_0006XX); } }
        public IField STREET_3_0006AS { get { return GetElementByName<IField>(Names.STREET_3_0006AS); } }
        public IField STREET_3_0006 { get { return GetElementByName<IField>(Names.STREET_3_0006); } }
        public IField STREET_3_0006XX { get { return GetElementByName<IField>(Names.STREET_3_0006XX); } }
        public IField STREET_4_0006AS { get { return GetElementByName<IField>(Names.STREET_4_0006AS); } }
        public IField STREET_4_0006 { get { return GetElementByName<IField>(Names.STREET_4_0006); } }
        public IField STREET_4_0006XX { get { return GetElementByName<IField>(Names.STREET_4_0006XX); } }
        public IField CITY_0006AS { get { return GetElementByName<IField>(Names.CITY_0006AS); } }
        public IField CITY_0006 { get { return GetElementByName<IField>(Names.CITY_0006); } }
        public IField CITY_0006XX { get { return GetElementByName<IField>(Names.CITY_0006XX); } }
        public IField STATE_0006AS { get { return GetElementByName<IField>(Names.STATE_0006AS); } }
        public IField STATE_0006 { get { return GetElementByName<IField>(Names.STATE_0006); } }
        public IField STATE_0006XX { get { return GetElementByName<IField>(Names.STATE_0006XX); } }
        public IField ZIP_CODE_5_0006AS { get { return GetElementByName<IField>(Names.ZIP_CODE_5_0006AS); } }
        public IField ZIP_CODE_5_0006 { get { return GetElementByName<IField>(Names.ZIP_CODE_5_0006); } }
        public IField ZIP_CODE_5_0006XX { get { return GetElementByName<IField>(Names.ZIP_CODE_5_0006XX); } }
        public IField ZIP_CODE_4_0006AS { get { return GetElementByName<IField>(Names.ZIP_CODE_4_0006AS); } }
        public IField ZIP_CODE_4_0006 { get { return GetElementByName<IField>(Names.ZIP_CODE_4_0006); } }
        public IField ZIP_CODE_4_0006XX { get { return GetElementByName<IField>(Names.ZIP_CODE_4_0006XX); } }
        public IField ZIP_CODE_3_0006AS { get { return GetElementByName<IField>(Names.ZIP_CODE_3_0006AS); } }
        public IField ZIP_CODE_3_0006 { get { return GetElementByName<IField>(Names.ZIP_CODE_3_0006); } }
        public IField ZIP_CODE_3_0006XX { get { return GetElementByName<IField>(Names.ZIP_CODE_3_0006XX); } }
        public IField PROVINCE_0006AS { get { return GetElementByName<IField>(Names.PROVINCE_0006AS); } }
        public IField PROVINCE_0006 { get { return GetElementByName<IField>(Names.PROVINCE_0006); } }
        public IField PROVINCE_0006XX { get { return GetElementByName<IField>(Names.PROVINCE_0006XX); } }
        public IField POSTAL_CODE_0006AS { get { return GetElementByName<IField>(Names.POSTAL_CODE_0006AS); } }
        public IField POSTAL_CODE_0006 { get { return GetElementByName<IField>(Names.POSTAL_CODE_0006); } }
        public IField POSTAL_CODE_0006XX { get { return GetElementByName<IField>(Names.POSTAL_CODE_0006XX); } }
        public IField COUNTRY_0006AS { get { return GetElementByName<IField>(Names.COUNTRY_0006AS); } }
        public IField COUNTRY_0006 { get { return GetElementByName<IField>(Names.COUNTRY_0006); } }
        public IField COUNTRY_0006XX { get { return GetElementByName<IField>(Names.COUNTRY_0006XX); } }
        public IField SUSP_STATUS_0006AS { get { return GetElementByName<IField>(Names.SUSP_STATUS_0006AS); } }
        public IField SUSP_STATUS_0006 { get { return GetElementByName<IField>(Names.SUSP_STATUS_0006); } }
        public IField SUSP_STATUS_0006XX { get { return GetElementByName<IField>(Names.SUSP_STATUS_0006XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.IEF_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.DB_ERROR_SF, "DB")
                       .NewCheckField(Names.ABORT_SHOW_DBMS_MSG_SF, "AB")
                       .NewCheckField(Names.ABORT_SHOW_USER_MSG_SF, "AM")
                       .NewCheckField(Names.RETRY_TRAN_REQUESTED_SF, "RT")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DB_DEADLOCK_TIMOUT_FL_LS, "DT")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d6", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d6) =>
                   {
                       FILLER_d6.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d6.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d6.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_SKIP_VAL, FieldType.String, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(95, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 8);
               });
               GLOBDATA.CreateNewField(Names.TX_RETRY_COUNT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_USER_RETRY_ALLOWED, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(3, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewFillerField(199, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.IMPORT_RESTART_0001EV, (IMPORT_RESTART_0001EV) =>
           {
               IMPORT_RESTART_0001EV.CreateNewGroup(Names.LOCATE_REQUEST_0001ET, (LOCATE_REQUEST_0001ET) =>
               {
                   LOCATE_REQUEST_0001ET.CreateNewField(Names.CSE_PERSON_NUMBER_0001AS, FieldType.String, 1);

                   IField CSE_PERSON_NUMBER_0001_local = LOCATE_REQUEST_0001ET.CreateNewField(Names.CSE_PERSON_NUMBER_0001, FieldType.String, 10);
                   LOCATE_REQUEST_0001ET.CreateNewFieldRedefine(Names.CSE_PERSON_NUMBER_0001XX, FieldType.String, CSE_PERSON_NUMBER_0001_local, 10);
                   LOCATE_REQUEST_0001ET.CreateNewField(Names.AGENCY_NUMBER_0001AS, FieldType.String, 1);

                   IField AGENCY_NUMBER_0001_local = LOCATE_REQUEST_0001ET.CreateNewField(Names.AGENCY_NUMBER_0001, FieldType.String, 5);
                   LOCATE_REQUEST_0001ET.CreateNewFieldRedefine(Names.AGENCY_NUMBER_0001XX, FieldType.String, AGENCY_NUMBER_0001_local, 5);
                   LOCATE_REQUEST_0001ET.CreateNewField(Names.SEQUENCE_NUMBER_0001AS, FieldType.String, 1);

                   IField SEQUENCE_NUMBER_0001_local = LOCATE_REQUEST_0001ET.CreateNewField(Names.SEQUENCE_NUMBER_0001, FieldType.SignedNumeric, 2);
                   LOCATE_REQUEST_0001ET.CreateNewFieldRedefine(Names.SEQUENCE_NUMBER_0001XX, FieldType.String, SEQUENCE_NUMBER_0001_local, 2);
               });
           });

            recordDef.CreateNewGroup(Names.IMPORT_0002EV, (IMPORT_0002EV) =>
           {
               IMPORT_0002EV.CreateNewGroup(Names.EXTERNAL_0002ET, (EXTERNAL_0002ET) =>
               {
                   EXTERNAL_0002ET.CreateNewField(Names.FILE_INSTRUCTION_0002AS, FieldType.String, 1);

                   IField FILE_INSTRUCTION_0002_local = EXTERNAL_0002ET.CreateNewField(Names.FILE_INSTRUCTION_0002, FieldType.String, 10);
                   EXTERNAL_0002ET.CreateNewFieldRedefine(Names.FILE_INSTRUCTION_0002XX, FieldType.String, FILE_INSTRUCTION_0002_local, 10);
                   EXTERNAL_0002ET.CreateNewField(Names.TEXT_LINE_80_0002AS, FieldType.String, 1);

                   IField TEXT_LINE_80_0002_local = EXTERNAL_0002ET.CreateNewField(Names.TEXT_LINE_80_0002, FieldType.String, 130);
                   EXTERNAL_0002ET.CreateNewFieldRedefine(Names.TEXT_LINE_80_0002XX, FieldType.String, TEXT_LINE_80_0002_local, 130);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_RETURNED_0003EV, (EXPORT_RETURNED_0003EV) =>
           {
               EXPORT_RETURNED_0003EV.CreateNewGroup(Names.EXTERNAL_0003ET, (EXTERNAL_0003ET) =>
               {
                   EXTERNAL_0003ET.CreateNewField(Names.TEXT_RETURN_CODE_0003AS, FieldType.String, 1);

                   IField TEXT_RETURN_CODE_0003_local = EXTERNAL_0003ET.CreateNewField(Names.TEXT_RETURN_CODE_0003, FieldType.String, 2);
                   EXTERNAL_0003ET.CreateNewFieldRedefine(Names.TEXT_RETURN_CODE_0003XX, FieldType.String, TEXT_RETURN_CODE_0003_local, 2);
                   EXTERNAL_0003ET.CreateNewField(Names.TEXT_LINE_80_0003AS, FieldType.String, 1);

                   IField TEXT_LINE_80_0003_local = EXTERNAL_0003ET.CreateNewField(Names.TEXT_LINE_80_0003, FieldType.String, 130);
                   EXTERNAL_0003ET.CreateNewFieldRedefine(Names.TEXT_LINE_80_0003XX, FieldType.String, TEXT_LINE_80_0003_local, 130);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_RETURNED_0004EV, (EXPORT_RETURNED_0004EV) =>
           {
               EXPORT_RETURNED_0004EV.CreateNewGroup(Names.TEXT_WORK_AREA_0004ET, (TEXT_WORK_AREA_0004ET) =>
               {
                   TEXT_WORK_AREA_0004ET.CreateNewField(Names.TEXT_1_0004AS, FieldType.String, 1);

                   IField TEXT_1_0004_local = TEXT_WORK_AREA_0004ET.CreateNewField(Names.TEXT_1_0004, FieldType.String, 1);
                   TEXT_WORK_AREA_0004ET.CreateNewFieldRedefine(Names.TEXT_1_0004XX, FieldType.String, TEXT_1_0004_local, 1);
               });
           });

            recordDef.CreateNewGroup(Names.EXPORT_RETURNED_0005EV, (EXPORT_RETURNED_0005EV) =>
           {
               EXPORT_RETURNED_0005EV.CreateNewGroup(Names.LOCATE_REQUEST_0005ET, (LOCATE_REQUEST_0005ET) =>
               {
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.SOCIAL_SECURITY_NUMBER_0005AS, FieldType.String, 1);

                   IField SOCIAL_SECURITY_NUMBER_0005_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.SOCIAL_SECURITY_NUMBER_0005, FieldType.String, 9);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.SOCIAL_SECURITY_NUMBER_0005XX, FieldType.String, SOCIAL_SECURITY_NUMBER_0005_local, 9);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.DATE_OF_BIRTH_0005AS, FieldType.String, 1);

                   IField DATE_OF_BIRTH_0005_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.DATE_OF_BIRTH_0005, FieldType.SignedNumeric, 8);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.DATE_OF_BIRTH_0005XX, FieldType.String, DATE_OF_BIRTH_0005_local, 8);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.CSE_PERSON_NUMBER_0005AS, FieldType.String, 1);

                   IField CSE_PERSON_NUMBER_0005_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.CSE_PERSON_NUMBER_0005, FieldType.String, 10);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.CSE_PERSON_NUMBER_0005XX, FieldType.String, CSE_PERSON_NUMBER_0005_local, 10);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.REQUEST_DATE_0005AS, FieldType.String, 1);

                   IField REQUEST_DATE_0005_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.REQUEST_DATE_0005, FieldType.SignedNumeric, 8);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.REQUEST_DATE_0005XX, FieldType.String, REQUEST_DATE_0005_local, 8);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.RESPONSE_DATE_0005AS, FieldType.String, 1);

                   IField RESPONSE_DATE_0005_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.RESPONSE_DATE_0005, FieldType.SignedNumeric, 8);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.RESPONSE_DATE_0005XX, FieldType.String, RESPONSE_DATE_0005_local, 8);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.LICENSE_ISSUED_DATE_0005AS, FieldType.String, 1);

                   IField LICENSE_ISSUED_DATE_0005_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.LICENSE_ISSUED_DATE_0005, FieldType.SignedNumeric, 8);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.LICENSE_ISSUED_DATE_0005XX, FieldType.String, LICENSE_ISSUED_DATE_0005_local, 8);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.LICENSE_EXPIRATION_DATE_0006AS, FieldType.String, 1);

                   IField LICENSE_EXPIRATION_DATE_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.LICENSE_EXPIRATION_DATE_0006, FieldType.SignedNumeric, 8);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.LICENSE_EXPIRATION_DATE_0006XX, FieldType.String, LICENSE_EXPIRATION_DATE_0006_local, 8);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.LICENSE_SUSPENDED_DATE_0006AS, FieldType.String, 1);

                   IField LICENSE_SUSPENDED_DATE_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.LICENSE_SUSPENDED_DATE_0006, FieldType.SignedNumeric, 8);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.LICENSE_SUSPENDED_DATE_0006XX, FieldType.String, LICENSE_SUSPENDED_DATE_0006_local, 8);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.LICENSE_NUMBER_0006AS, FieldType.String, 1);

                   IField LICENSE_NUMBER_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.LICENSE_NUMBER_0006, FieldType.String, 25);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.LICENSE_NUMBER_0006XX, FieldType.String, LICENSE_NUMBER_0006_local, 25);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.AGENCY_NUMBER_0006AS, FieldType.String, 1);

                   IField AGENCY_NUMBER_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.AGENCY_NUMBER_0006, FieldType.String, 5);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.AGENCY_NUMBER_0006XX, FieldType.String, AGENCY_NUMBER_0006_local, 5);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.SEQUENCE_NUMBER_0006AS, FieldType.String, 1);

                   IField SEQUENCE_NUMBER_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.SEQUENCE_NUMBER_0006, FieldType.SignedNumeric, 2);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.SEQUENCE_NUMBER_0006XX, FieldType.String, SEQUENCE_NUMBER_0006_local, 2);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.LICENSE_SOURCE_NAME_0006AS, FieldType.String, 1);

                   IField LICENSE_SOURCE_NAME_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.LICENSE_SOURCE_NAME_0006, FieldType.String, 25);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.LICENSE_SOURCE_NAME_0006XX, FieldType.String, LICENSE_SOURCE_NAME_0006_local, 25);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.STREET_1_0006AS, FieldType.String, 1);

                   IField STREET_1_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.STREET_1_0006, FieldType.String, 25);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.STREET_1_0006XX, FieldType.String, STREET_1_0006_local, 25);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.ADDRESS_TYPE_0006AS, FieldType.String, 1);

                   IField ADDRESS_TYPE_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.ADDRESS_TYPE_0006, FieldType.String, 1);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.ADDRESS_TYPE_0006XX, FieldType.String, ADDRESS_TYPE_0006_local, 1);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.STREET_2_0006AS, FieldType.String, 1);

                   IField STREET_2_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.STREET_2_0006, FieldType.String, 25);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.STREET_2_0006XX, FieldType.String, STREET_2_0006_local, 25);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.STREET_3_0006AS, FieldType.String, 1);

                   IField STREET_3_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.STREET_3_0006, FieldType.String, 25);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.STREET_3_0006XX, FieldType.String, STREET_3_0006_local, 25);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.STREET_4_0006AS, FieldType.String, 1);

                   IField STREET_4_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.STREET_4_0006, FieldType.String, 25);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.STREET_4_0006XX, FieldType.String, STREET_4_0006_local, 25);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.CITY_0006AS, FieldType.String, 1);

                   IField CITY_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.CITY_0006, FieldType.String, 15);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.CITY_0006XX, FieldType.String, CITY_0006_local, 15);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.STATE_0006AS, FieldType.String, 1);

                   IField STATE_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.STATE_0006, FieldType.String, 2);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.STATE_0006XX, FieldType.String, STATE_0006_local, 2);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.ZIP_CODE_5_0006AS, FieldType.String, 1);

                   IField ZIP_CODE_5_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.ZIP_CODE_5_0006, FieldType.String, 5);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.ZIP_CODE_5_0006XX, FieldType.String, ZIP_CODE_5_0006_local, 5);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.ZIP_CODE_4_0006AS, FieldType.String, 1);

                   IField ZIP_CODE_4_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.ZIP_CODE_4_0006, FieldType.String, 4);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.ZIP_CODE_4_0006XX, FieldType.String, ZIP_CODE_4_0006_local, 4);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.ZIP_CODE_3_0006AS, FieldType.String, 1);

                   IField ZIP_CODE_3_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.ZIP_CODE_3_0006, FieldType.String, 3);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.ZIP_CODE_3_0006XX, FieldType.String, ZIP_CODE_3_0006_local, 3);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.PROVINCE_0006AS, FieldType.String, 1);

                   IField PROVINCE_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.PROVINCE_0006, FieldType.String, 5);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.PROVINCE_0006XX, FieldType.String, PROVINCE_0006_local, 5);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.POSTAL_CODE_0006AS, FieldType.String, 1);

                   IField POSTAL_CODE_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.POSTAL_CODE_0006, FieldType.String, 10);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.POSTAL_CODE_0006XX, FieldType.String, POSTAL_CODE_0006_local, 10);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.COUNTRY_0006AS, FieldType.String, 1);

                   IField COUNTRY_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.COUNTRY_0006, FieldType.String, 2);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.COUNTRY_0006XX, FieldType.String, COUNTRY_0006_local, 2);
                   LOCATE_REQUEST_0005ET.CreateNewField(Names.SUSP_STATUS_0006AS, FieldType.String, 1);

                   IField SUSP_STATUS_0006_local = LOCATE_REQUEST_0005ET.CreateNewField(Names.SUSP_STATUS_0006, FieldType.String, 1);
                   LOCATE_REQUEST_0005ET.CreateNewFieldRedefine(Names.SUSP_STATUS_0006XX, FieldType.String, SUSP_STATUS_0006_local, 1);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(IEF_RUNTIME_PARM1, args, 0);
            SetPassedParm(IEF_RUNTIME_PARM2, args, 1);
            SetPassedParm(GLOBDATA, args, 2);
            SetPassedParm(IMPORT_RESTART_0001EV, args, 3);
            SetPassedParm(IMPORT_0002EV, args, 4);
            SetPassedParm(EXPORT_RETURNED_0003EV, args, 5);
            SetPassedParm(EXPORT_RETURNED_0004EV, args, 6);
            SetPassedParm(EXPORT_RETURNED_0005EV, args, 7);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(IEF_RUNTIME_PARM1, args, 0);
            SetReturnParm(IEF_RUNTIME_PARM2, args, 1);
            SetReturnParm(GLOBDATA, args, 2);
            SetReturnParm(IMPORT_RESTART_0001EV, args, 3);
            SetReturnParm(IMPORT_0002EV, args, 4);
            SetReturnParm(EXPORT_RETURNED_0003EV, args, 5);
            SetReturnParm(EXPORT_RETURNED_0004EV, args, 6);
            SetReturnParm(EXPORT_RETURNED_0005EV, args, 7);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXEE39 : EABBase
    {

        #region Public Constructors
        public SWEXEE39()
            : base()
        {
            this.ProgramName.SetValue("SWEXEE39");

            WS = new SWEXEE39_ws();
            FD = new SWEXEE39_fd(WS);
            LS = new SWEXEE39_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXEE39_ws WS;

        //==== File Data Class ========================================
        private SWEXEE39_fd FD;

        //==== Linkage Section Data Class ========================================
        private SWEXEE39_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING IEF-RUNTIME-PARM1 , IEF-RUNTIME-PARM2 , GLOBDATA , IMPORT-RESTART-0001EV , IMPORT-0002EV , EXPORT-RETURNED-0003EV , EXPORT-RETURNED-0004EV , EXPORT-RETURNED-0005EV.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_2038695603(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_2038695603
        /// </summary>
        private void M_MAIN_2038695603(string returnMethod = "")
        {
            M_PARA_2038695603_INIT("M_PARA_2038695603_INIT_EXIT"); if (Control.ExitProgram) { return; }           //COBOL==> PERFORM PARA-2038695603-INIT THRU PARA-2038695603-INIT-EXIT
            M_PARA_2038695603("M_PARA_2038695603_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PARA-2038695603 THRU PARA-2038695603-EXIT
            Control.ExitProgram = true; return;                                                                 //COBOL==> GOBACK.
        }
        /// <summary>
        /// Method M_PARA_2038695603
        /// </summary>
        private void M_PARA_2038695603(string returnMethod = "")
        {
            if (returnMethod != "" && returnMethod != "M_PARA_2038695603") { M_0000_MAINLINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_0000_MAINLINE
        /// </summary>
        /// <remarks>
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT:    USER-WRITTEN CODE SHOULD BE INSERTED HERE
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        ///COMMENT: ********************
        /// </remarks>
        private void M_0000_MAINLINE(string returnMethod = "")
        {
            //COMMENT: ********************
            LS.TEXT_RETURN_CODE_0003.SetValue("00");                                                            //COBOL==> MOVE '00' TO TEXT-RETURN-CODE-0003
                                                                                                                // EvaluateList !LS.FILE_INSTRUCTION_0002!                                                          //COBOL==> EVALUATE FILE-INSTRUCTION-0002
            if ((LS.FILE_INSTRUCTION_0002.IsEqualTo("OPEN")))                                                   //COBOL==> WHEN 'OPEN'
            {
                M_1000_OPEN_FILE(); if (Control.ExitProgram) { return; }                                              //COBOL==> PERFORM 1000-OPEN-FILE
            }                                                                                                //COBOL==> WHEN 'READ'
            else
            if ((LS.FILE_INSTRUCTION_0002.IsEqualTo("READ")))
            {
                M_2000_READ_FILE(); if (Control.ExitProgram) { return; }                                              //COBOL==> PERFORM 2000-READ-FILE
            }                                                                                                //COBOL==> WHEN 'POSITION'
            else
            if ((LS.FILE_INSTRUCTION_0002.IsEqualTo("POSITION")))
            {
                M_3000_POSITION_FILE(); if (Control.ExitProgram) { return; }                                          //COBOL==> PERFORM 3000-POSITION-FILE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("BI");                                                            //COBOL==> MOVE 'BI' TO TEXT-RETURN-CODE-0003
            }                                                                                                   //COBOL==> END-EVALUATE
            M_9999_FINISHED(CheckGotoReturn(returnMethod)); return;                                             //COBOL==> GO TO 9999-FINISHED.
        }
        /// <summary>
        /// Method M_1000_OPEN_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT: ****************
        /// </remarks>
        private void M_1000_OPEN_FILE(string returnMethod = "")
        {
            //COMMENT: ****************
            FD.LOCATE_INPUT_FILE.OpenFile(FileAccessMode.Read);                                                 //COBOL==> OPEN INPUT LOCATE-INPUT-FILE
            if (WS.LOCATE_FILE_STATUS.IsEqualTo("00"))                                                          //COBOL==> IF LOCATE-FILE-STATUS = '00'
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("00");                                                            //COBOL==> MOVE '00' TO TEXT-RETURN-CODE-0003
            }                                                                                                   //COBOL==> ELSE
            else
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("PE");                                                            //COBOL==> MOVE 'PE' TO TEXT-RETURN-CODE-0003
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_1000_OPEN_FILE") { M_2000_READ_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_READ_FILE
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************
        /// </remarks>
        private void M_2000_READ_FILE(string returnMethod = "")
        {
            //COMMENT: *****************
            FD.LOCATE_INPUT_FILE.ReadLine();                                                                    //COBOL==> READ LOCATE-INPUT-FILE
                                                                                                                // EvaluateList !WS.LOCATE_FILE_STATUS!                                                             //COBOL==> EVALUATE LOCATE-FILE-STATUS
            if ((WS.LOCATE_FILE_STATUS.IsEqualTo("00")))                                                        //COBOL==> WHEN '00'
            {
                M_2500_MOVE_DATA("M_2500_EXIT"); if (Control.ExitProgram) { return; }                                 //COBOL==> PERFORM 2500-MOVE-DATA THRU 2500-EXIT
            }                                                                                                //COBOL==> WHEN '10'
            else
            if ((WS.LOCATE_FILE_STATUS.IsEqualTo("10")))
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("EF");                                                            //COBOL==> MOVE 'EF' TO TEXT-RETURN-CODE-0003
                M_4000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 4000-CLOSE-FILE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("BR");                                                            //COBOL==> MOVE 'BR' TO TEXT-RETURN-CODE-0003
                M_4000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 4000-CLOSE-FILE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_2000_READ_FILE") { M_2000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2000_EXIT
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************
        /// </remarks>
        private void M_2000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2000_EXIT") { M_2500_MOVE_DATA(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2500_MOVE_DATA
        /// </summary>
        /// <remarks>
        ///COMMENT: *****************
        ///COMMENT: *****************
        /// </remarks>
        private void M_2500_MOVE_DATA(string returnMethod = "")
        {
            //COMMENT: *****************
            //COMMENT: *   MOVE LOCATE-CSE-NAME             PIC X(30).
            //COMMENT: ********************************************************
            if ((FD.LOCATE_SSN.IsEqualTo("LOCATE   "))
             || (FD.LOCATE_SSN.IsEqualTo("LICENSE  ")))  //COBOL==> IF LOCATE-SSN = 'LOCATE   ' OR LOCATE-SSN = 'LICENSE  '
            {
                LS.SEQUENCE_NUMBER_0006.SetValueWithZeroes();                                                       //COBOL==> MOVE ZERO TO SEQUENCE-NUMBER-0006
                LS.SOCIAL_SECURITY_NUMBER_0005.SetValue(FD.LOCATE_SSN);                                             //COBOL==> MOVE LOCATE-SSN TO SOCIAL-SECURITY-NUMBER-0005
                M_2500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2500-EXIT.
            }
            LS.SOCIAL_SECURITY_NUMBER_0005.SetValue(FD.LOCATE_SSN);                                             //COBOL==> MOVE LOCATE-SSN TO SOCIAL-SECURITY-NUMBER-0005.
            LS.DATE_OF_BIRTH_0005.SetValue(FD.LOCATE_DOB);                                                      //COBOL==> MOVE LOCATE-DOB TO DATE-OF-BIRTH-0005.
            LS.CSE_PERSON_NUMBER_0005.SetValue(FD.LOCATE_CSE_PERSON_NUM);                                       //COBOL==> MOVE LOCATE-CSE-PERSON-NUM TO CSE-PERSON-NUMBER-0005.
            LS.REQUEST_DATE_0005.SetValue(FD.LOCATE_REQUEST_DATE);                                              //COBOL==> MOVE LOCATE-REQUEST-DATE TO REQUEST-DATE-0005.
            LS.RESPONSE_DATE_0005.SetValue(FD.LOCATE_RESPONSE_DATE);                                            //COBOL==> MOVE LOCATE-RESPONSE-DATE TO RESPONSE-DATE-0005.
            LS.LICENSE_ISSUED_DATE_0005.SetValue(FD.LOCATE_ISSUED_DATE);                                        //COBOL==> MOVE LOCATE-ISSUED-DATE TO LICENSE-ISSUED-DATE-0005.
            if (FD.LOCATE_EXPIRE_DATE.IsSpaces())                                                               //COBOL==> IF LOCATE-EXPIRE-DATE = SPACES
            {
                FD.LOCATE_EXP_CC.SetValue("00");                                                                    //COBOL==> MOVE '00' TO LOCATE-EXP-CC LOCATE-EXP-YY LOCATE-EXP-MM LOCATE-EXP-DD
                FD.LOCATE_EXP_YY.SetValue("00");
                FD.LOCATE_EXP_MM.SetValue("00");
                FD.LOCATE_EXP_DD.SetValue("00");
            }                                                                                                   //COBOL==> END-IF.
            LS.LICENSE_EXPIRATION_DATE_0006.SetValue(FD.LOCATE_EXPIRE_DATE);                                    //COBOL==> MOVE LOCATE-EXPIRE-DATE TO LICENSE-EXPIRATION-DATE-0006.
            if (FD.LOCATE_SUSPENDED_DATE.IsSpaces())                                                            //COBOL==> IF LOCATE-SUSPENDED-DATE = SPACES
            {
                FD.LOCATE_SUS_CC.SetValue("00");                                                                    //COBOL==> MOVE '00' TO LOCATE-SUS-CC LOCATE-SUS-YY LOCATE-SUS-MM LOCATE-SUS-DD
                FD.LOCATE_SUS_YY.SetValue("00");
                FD.LOCATE_SUS_MM.SetValue("00");
                FD.LOCATE_SUS_DD.SetValue("00");
            }                                                                                                   //COBOL==> END-IF.
            LS.LICENSE_SUSPENDED_DATE_0006.SetValue(FD.LOCATE_SUSPENDED_DATE);                                  //COBOL==> MOVE LOCATE-SUSPENDED-DATE TO LICENSE-SUSPENDED-DATE-0006.
            LS.LICENSE_NUMBER_0006.SetValue(FD.LOCATE_LICENSE_NUM);                                             //COBOL==> MOVE LOCATE-LICENSE-NUM TO LICENSE-NUMBER-0006.
            LS.AGENCY_NUMBER_0006.SetValue(FD.LOCATE_AGENCY_NUMBER);                                            //COBOL==> MOVE LOCATE-AGENCY-NUMBER TO AGENCY-NUMBER-0006.
            LS.SEQUENCE_NUMBER_0006.SetValue(FD.LOCATE_SEQUENCE_R);                                             //COBOL==> MOVE LOCATE-SEQUENCE-R TO SEQUENCE-NUMBER-0006.
            LS.LICENSE_SOURCE_NAME_0006.SetValue(FD.LOCATE_LICENSE_SOURCE);                                     //COBOL==> MOVE LOCATE-LICENSE-SOURCE TO LICENSE-SOURCE-NAME-0006.
            LS.ADDRESS_TYPE_0006.SetValue(FD.LOCATE_ADDRESS_TYPE);                                              //COBOL==> MOVE LOCATE-ADDRESS-TYPE TO ADDRESS-TYPE-0006.
            LS.STREET_1_0006.SetValue(FD.LOCATE_ADDRESS_1);                                                     //COBOL==> MOVE LOCATE-ADDRESS-1 TO STREET-1-0006.
            LS.STREET_2_0006.SetValue(FD.LOCATE_ADDRESS_2);                                                     //COBOL==> MOVE LOCATE-ADDRESS-2 TO STREET-2-0006.
            LS.STREET_3_0006.SetValue(FD.LOCATE_ADDRESS_3);                                                     //COBOL==> MOVE LOCATE-ADDRESS-3 TO STREET-3-0006.
            LS.STREET_4_0006.SetValue(FD.LOCATE_ADDRESS_4);                                                     //COBOL==> MOVE LOCATE-ADDRESS-4 TO STREET-4-0006.
            LS.CITY_0006.SetValue(FD.LOCATE_CITY);                                                              //COBOL==> MOVE LOCATE-CITY TO CITY-0006.
            LS.STATE_0006.SetValue(FD.LOCATE_STATE);                                                            //COBOL==> MOVE LOCATE-STATE TO STATE-0006.
                                                                                                                //COMMENT:     WR/291  - 03/13/2001 - PAUL PHINNEY
            LS.SUSP_STATUS_0006.SetValue(FD.LOCATE_SUSP_STATUS);                                                //COBOL==> MOVE LOCATE-SUSP-STATUS TO SUSP-STATUS-0006.
            LS.ZIP_CODE_5_0006.SetValue(FD.LOCATE_ZIP_5);                                                       //COBOL==> MOVE LOCATE-ZIP-5 TO ZIP-CODE-5-0006.
            LS.ZIP_CODE_4_0006.SetValue(FD.LOCATE_ZIP_4);                                                       //COBOL==> MOVE LOCATE-ZIP-4 TO ZIP-CODE-4-0006.
            LS.ZIP_CODE_3_0006.SetValue(FD.LOCATE_ZIP_3);                                                       //COBOL==> MOVE LOCATE-ZIP-3 TO ZIP-CODE-3-0006.
            LS.PROVINCE_0006.SetValue(FD.LOCATE_PROVINCE);                                                      //COBOL==> MOVE LOCATE-PROVINCE TO PROVINCE-0006.
            LS.POSTAL_CODE_0006.SetValue(FD.LOCATE_POSTAL_CODE);                                                //COBOL==> MOVE LOCATE-POSTAL-CODE TO POSTAL-CODE-0006.
            LS.COUNTRY_0006.SetValue(FD.LOCATE_COUNTRY);                                                        //COBOL==> MOVE LOCATE-COUNTRY TO COUNTRY-0006.
            if (!(FD.LOCATE_DOB.IsEqualTo(0)))                                                                  //COBOL==> IF LOCATE-DOB NOT = ZERO
            {
                WS.WS_CHECK_MM.SetValue(FD.LOCATE_DOB_MM);                                                          //COBOL==> MOVE LOCATE-DOB-MM TO WS-CHECK-MM
                WS.WS_CHECK_DD.SetValue(FD.LOCATE_DOB_DD);                                                          //COBOL==> MOVE LOCATE-DOB-DD TO WS-CHECK-DD
                WS.WS_CHECK_YY.SetValue(FD.LOCATE_DOB_YY);                                                          //COBOL==> MOVE LOCATE-DOB-YY TO WS-CHECK-YY
                WS.WS_CHECK_CC.SetValue(FD.LOCATE_DOB_CC);                                                          //COBOL==> MOVE LOCATE-DOB-CC TO WS-CHECK-CC
                WS.WS_BAD_DATE_FLAG.SetValue("N");                                                                  //COBOL==> MOVE 'N' TO WS-BAD-DATE-FLAG
                M_2600_VERIFY_DATE("M_2600_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 2600-VERIFY-DATE THRU 2600-EXIT
                if (WS.WS_BAD_DATE_FLAG.IsEqualTo("B"))                                                             //COBOL==> IF WS-BAD-DATE-FLAG = 'B'
                {
                    LS.TEXT_RETURN_CODE_0003.SetValue("DB");                                                            //COBOL==> MOVE 'DB' TO TEXT-RETURN-CODE-0003
                    M_2500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2500-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF
            if (!(FD.LOCATE_EXPIRE_DATE.IsEqualTo(0)))                                                          //COBOL==> IF LOCATE-EXPIRE-DATE NOT = ZERO
            {
                WS.WS_CHECK_MM.SetValue(FD.LOCATE_EXP_MM);                                                          //COBOL==> MOVE LOCATE-EXP-MM TO WS-CHECK-MM
                WS.WS_CHECK_DD.SetValue(FD.LOCATE_EXP_DD);                                                          //COBOL==> MOVE LOCATE-EXP-DD TO WS-CHECK-DD
                WS.WS_CHECK_YY.SetValue(FD.LOCATE_EXP_YY);                                                          //COBOL==> MOVE LOCATE-EXP-YY TO WS-CHECK-YY
                WS.WS_CHECK_CC.SetValue(FD.LOCATE_EXP_CC);                                                          //COBOL==> MOVE LOCATE-EXP-CC TO WS-CHECK-CC
                WS.WS_BAD_DATE_FLAG.SetValue("N");                                                                  //COBOL==> MOVE 'N' TO WS-BAD-DATE-FLAG
                M_2600_VERIFY_DATE("M_2600_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 2600-VERIFY-DATE THRU 2600-EXIT
                if (WS.WS_BAD_DATE_FLAG.IsEqualTo("B"))                                                             //COBOL==> IF WS-BAD-DATE-FLAG = 'B'
                {
                    LS.TEXT_RETURN_CODE_0003.SetValue("DX");                                                            //COBOL==> MOVE 'DX' TO TEXT-RETURN-CODE-0003
                    M_2500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2500-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (!(FD.LOCATE_REQUEST_DATE.IsEqualTo(0)))                                                         //COBOL==> IF LOCATE-REQUEST-DATE NOT = ZERO
            {
                WS.WS_CHECK_MM.SetValue(FD.LOCATE_REQ_MM);                                                          //COBOL==> MOVE LOCATE-REQ-MM TO WS-CHECK-MM
                WS.WS_CHECK_DD.SetValue(FD.LOCATE_REQ_DD);                                                          //COBOL==> MOVE LOCATE-REQ-DD TO WS-CHECK-DD
                WS.WS_CHECK_YY.SetValue(FD.LOCATE_REQ_YY);                                                          //COBOL==> MOVE LOCATE-REQ-YY TO WS-CHECK-YY
                WS.WS_CHECK_CC.SetValue(FD.LOCATE_REQ_CC);                                                          //COBOL==> MOVE LOCATE-REQ-CC TO WS-CHECK-CC
                WS.WS_BAD_DATE_FLAG.SetValue("N");                                                                  //COBOL==> MOVE 'N' TO WS-BAD-DATE-FLAG
                M_2600_VERIFY_DATE("M_2600_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 2600-VERIFY-DATE THRU 2600-EXIT
                if (WS.WS_BAD_DATE_FLAG.IsEqualTo("B"))                                                             //COBOL==> IF WS-BAD-DATE-FLAG = 'B'
                {
                    LS.TEXT_RETURN_CODE_0003.SetValue("DQ");                                                            //COBOL==> MOVE 'DQ' TO TEXT-RETURN-CODE-0003
                    M_2500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2500-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (!(FD.LOCATE_RESPONSE_DATE.IsEqualTo(0)))                                                        //COBOL==> IF LOCATE-RESPONSE-DATE NOT = ZERO
            {
                WS.WS_CHECK_MM.SetValue(FD.LOCATE_RSP_MM);                                                          //COBOL==> MOVE LOCATE-RSP-MM TO WS-CHECK-MM
                WS.WS_CHECK_DD.SetValue(FD.LOCATE_RSP_DD);                                                          //COBOL==> MOVE LOCATE-RSP-DD TO WS-CHECK-DD
                WS.WS_CHECK_YY.SetValue(FD.LOCATE_RSP_YY);                                                          //COBOL==> MOVE LOCATE-RSP-YY TO WS-CHECK-YY
                WS.WS_CHECK_CC.SetValue(FD.LOCATE_RSP_CC);                                                          //COBOL==> MOVE LOCATE-RSP-CC TO WS-CHECK-CC
                WS.WS_BAD_DATE_FLAG.SetValue("N");                                                                  //COBOL==> MOVE 'N' TO WS-BAD-DATE-FLAG
                M_2600_VERIFY_DATE("M_2600_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 2600-VERIFY-DATE THRU 2600-EXIT
                if (WS.WS_BAD_DATE_FLAG.IsEqualTo("B"))                                                             //COBOL==> IF WS-BAD-DATE-FLAG = 'B'
                {
                    LS.TEXT_RETURN_CODE_0003.SetValue("DP");                                                            //COBOL==> MOVE 'DP' TO TEXT-RETURN-CODE-0003
                    M_2500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2500-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (!(FD.LOCATE_ISSUED_DATE.IsEqualTo(0)))                                                          //COBOL==> IF LOCATE-ISSUED-DATE NOT = ZERO
            {
                WS.WS_CHECK_MM.SetValue(FD.LOCATE_ISS_MM);                                                          //COBOL==> MOVE LOCATE-ISS-MM TO WS-CHECK-MM
                WS.WS_CHECK_DD.SetValue(FD.LOCATE_ISS_DD);                                                          //COBOL==> MOVE LOCATE-ISS-DD TO WS-CHECK-DD
                WS.WS_CHECK_YY.SetValue(FD.LOCATE_ISS_YY);                                                          //COBOL==> MOVE LOCATE-ISS-YY TO WS-CHECK-YY
                WS.WS_CHECK_CC.SetValue(FD.LOCATE_ISS_CC);                                                          //COBOL==> MOVE LOCATE-ISS-CC TO WS-CHECK-CC
                WS.WS_BAD_DATE_FLAG.SetValue("N");                                                                  //COBOL==> MOVE 'N' TO WS-BAD-DATE-FLAG
                M_2600_VERIFY_DATE("M_2600_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 2600-VERIFY-DATE THRU 2600-EXIT
                if (WS.WS_BAD_DATE_FLAG.IsEqualTo("B"))                                                             //COBOL==> IF WS-BAD-DATE-FLAG = 'B'
                {
                    LS.TEXT_RETURN_CODE_0003.SetValue("DI");                                                            //COBOL==> MOVE 'DI' TO TEXT-RETURN-CODE-0003
                    M_2500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2500-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (!(FD.LOCATE_SUSPENDED_DATE.IsEqualTo(0)))                                                       //COBOL==> IF LOCATE-SUSPENDED-DATE NOT = ZERO
            {
                WS.WS_CHECK_MM.SetValue(FD.LOCATE_SUS_MM);                                                          //COBOL==> MOVE LOCATE-SUS-MM TO WS-CHECK-MM
                WS.WS_CHECK_DD.SetValue(FD.LOCATE_SUS_DD);                                                          //COBOL==> MOVE LOCATE-SUS-DD TO WS-CHECK-DD
                WS.WS_CHECK_YY.SetValue(FD.LOCATE_SUS_YY);                                                          //COBOL==> MOVE LOCATE-SUS-YY TO WS-CHECK-YY
                WS.WS_CHECK_CC.SetValue(FD.LOCATE_SUS_CC);                                                          //COBOL==> MOVE LOCATE-SUS-CC TO WS-CHECK-CC
                WS.WS_BAD_DATE_FLAG.SetValue("N");                                                                  //COBOL==> MOVE 'N' TO WS-BAD-DATE-FLAG
                M_2600_VERIFY_DATE("M_2600_EXIT"); if (Control.ExitProgram) { return; }                               //COBOL==> PERFORM 2600-VERIFY-DATE THRU 2600-EXIT
                if (WS.WS_BAD_DATE_FLAG.IsEqualTo("B"))                                                             //COBOL==> IF WS-BAD-DATE-FLAG = 'B'
                {
                    LS.TEXT_RETURN_CODE_0003.SetValue("DS");                                                            //COBOL==> MOVE 'DS' TO TEXT-RETURN-CODE-0003
                    M_2500_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2500-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_2500_MOVE_DATA") { M_2500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2500_EXIT
        /// </summary>
        private void M_2500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2500_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2500_EXIT") { M_2600_VERIFY_DATE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2600_VERIFY_DATE
        /// </summary>
        /// <remarks>
        ///COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
        /// </remarks>
        private void M_2600_VERIFY_DATE(string returnMethod = "")
        {
            //COMMENT:  * * * * * * * * * * * * * * * * * * * * * *
            if ((WS.WS_CHECK_C1.IsLessThan("1"))
             || (WS.WS_CHECK_C1.IsGreaterThan("2")))        //COBOL==> IF WS-CHECK-C1 < '1' OR WS-CHECK-C1 > '2'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_C2.IsLessThan("0"))
             || (WS.WS_CHECK_C2.IsGreaterThan("9")))        //COBOL==> IF WS-CHECK-C2 < '0' OR WS-CHECK-C2 > '9'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_CC.IsLessThan("19"))
             || (WS.WS_CHECK_CC.IsGreaterThan("20")))      //COBOL==> IF WS-CHECK-CC < '19' OR WS-CHECK-CC > '20'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_Y1.IsLessThan("0"))
             || (WS.WS_CHECK_Y1.IsGreaterThan("9")))        //COBOL==> IF WS-CHECK-Y1 < '0' OR WS-CHECK-Y1 > '9'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_Y2.IsLessThan("0"))
             || (WS.WS_CHECK_Y2.IsGreaterThan("9")))        //COBOL==> IF WS-CHECK-Y2 < '0' OR WS-CHECK-Y2 > '9'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_YY.IsLessThan("00"))
             || (WS.WS_CHECK_YY.IsGreaterThan("99")))      //COBOL==> IF WS-CHECK-YY < '00' OR WS-CHECK-YY > '99'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_M1.IsLessThan("0"))
             || (WS.WS_CHECK_M1.IsGreaterThan("1")))        //COBOL==> IF WS-CHECK-M1 < '0' OR WS-CHECK-M1 > '1'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_M2.IsLessThan("0"))
             || (WS.WS_CHECK_M2.IsGreaterThan("9")))        //COBOL==> IF WS-CHECK-M2 < '0' OR WS-CHECK-M2 > '9'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_MM.IsLessThan("01"))
             || (WS.WS_CHECK_MM.IsGreaterThan("12")))      //COBOL==> IF WS-CHECK-MM < '01' OR WS-CHECK-MM > '12'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_D1.IsLessThan("0"))
             || (WS.WS_CHECK_D1.IsGreaterThan("3")))        //COBOL==> IF WS-CHECK-D1 < '0' OR WS-CHECK-D1 > '3'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_D2.IsLessThan("0"))
             || (WS.WS_CHECK_D2.IsGreaterThan("9")))        //COBOL==> IF WS-CHECK-D2 < '0' OR WS-CHECK-D2 > '9'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if ((WS.WS_CHECK_DD.IsLessThan("01"))
             || (WS.WS_CHECK_DD.IsGreaterThan("31")))      //COBOL==> IF WS-CHECK-DD < '01' OR WS-CHECK-DD > '31'
            {
                WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
            }
            if (WS.WS_CHECK_MM.IsEqualTo("02"))                                                                 //COBOL==> IF WS-CHECK-MM = '02'
            {
                if ((WS.WS_CHECK_DD.IsLessThan("01"))
             || (WS.WS_CHECK_DD.IsGreaterThan("29")))      //COBOL==> IF WS-CHECK-DD < '01' OR WS-CHECK-DD > '29'
                {
                    WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                    M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
                }
            }
            if ((((WS.WS_CHECK_MM.IsEqualTo("04"))
             || (WS.WS_CHECK_MM.IsEqualTo("06")))
             || (WS.WS_CHECK_MM.IsEqualTo("09")))
             || (WS.WS_CHECK_MM.IsEqualTo("11")))  //COBOL==> IF WS-CHECK-MM = '04' OR '06' OR '09' OR '11'
            {
                if ((WS.WS_CHECK_DD.IsLessThan("01"))
             || (WS.WS_CHECK_DD.IsGreaterThan("30")))      //COBOL==> IF WS-CHECK-DD < '01' OR WS-CHECK-DD > '30'
                {
                    WS.WS_BAD_DATE_FLAG.SetValue("B");                                                                  //COBOL==> MOVE 'B' TO WS-BAD-DATE-FLAG
                    M_2600_EXIT(CheckGotoReturn(returnMethod)); return;                                                 //COBOL==> GO TO 2600-EXIT.
                }
            }
            if (returnMethod != "" && returnMethod != "M_2600_VERIFY_DATE") { M_2600_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_2600_EXIT
        /// </summary>
        private void M_2600_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_2600_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_2600_EXIT") { M_3000_POSITION_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3000_POSITION_FILE
        /// </summary>
        private void M_3000_POSITION_FILE(string returnMethod = "")
        {
            LS.TEXT_RETURN_CODE_0003.SetValue("00");                                                            //COBOL==> MOVE '00' TO TEXT-RETURN-CODE-0003.
            M_1000_OPEN_FILE(); if (Control.ExitProgram) { return; }                                              //COBOL==> PERFORM 1000-OPEN-FILE.
            while (!((((LS.CSE_PERSON_NUMBER_0001.IsEqualTo(FD.LOCATE_CSE_PERSON_NUM)) && (LS.AGENCY_NUMBER_0001.IsEqualTo(FD.LOCATE_AGENCY_NUMBER))) && (LS.SEQUENCE_NUMBER_0001XX.IsEqualTo(FD.LOCATE_SEQUENCE))) || (!(LS.TEXT_RETURN_CODE_0003.IsEqualTo("00")))))  //COBOL==> PERFORM 3500-POSITION-READ UNTIL ( CSE-PERSON-NUMBER-0001 = LOCATE-CSE-PERSON-NUM AND AGENCY-NUMBER-0001 = LOCATE-AGENCY-NUMBER AND SEQUENCE-NUMBER-0001XX = LOCATE-SEQUENCE ) OR TEXT-RETURN-CODE-0003 NOT = '00'.
            {
                M_3500_POSITION_READ(); if (Control.ExitProgram) { return; }
            }
            if (LS.TEXT_RETURN_CODE_0003.IsEqualTo("00"))                                                       //COBOL==> IF TEXT-RETURN-CODE-0003 = '00'
            {
                M_2500_MOVE_DATA("M_2500_EXIT"); if (Control.ExitProgram) { return; }                                 //COBOL==> PERFORM 2500-MOVE-DATA THRU 2500-EXIT.
            }
            if (returnMethod != "" && returnMethod != "M_3000_POSITION_FILE") { M_3000_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3000_EXIT
        /// </summary>
        private void M_3000_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_3000_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_3000_EXIT") { M_3500_POSITION_READ(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3500_POSITION_READ
        /// </summary>
        private void M_3500_POSITION_READ(string returnMethod = "")
        {
            FD.LOCATE_INPUT_FILE.ReadLine();                                                                    //COBOL==> READ LOCATE-INPUT-FILE
                                                                                                                // EvaluateList !WS.LOCATE_FILE_STATUS!                                                             //COBOL==> EVALUATE LOCATE-FILE-STATUS
            if ((WS.LOCATE_FILE_STATUS.IsEqualTo("00")))                                                        //COBOL==> WHEN '00'
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("00");                                                            //COBOL==> MOVE '00' TO TEXT-RETURN-CODE-0003
            }                                                                                                //COBOL==> WHEN '10'
            else
            if ((WS.LOCATE_FILE_STATUS.IsEqualTo("10")))
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("EF");                                                            //COBOL==> MOVE 'EF' TO TEXT-RETURN-CODE-0003
                M_4000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 4000-CLOSE-FILE
            }                                                                                                //COBOL==> WHEN OTHER
            else
            {
                LS.TEXT_RETURN_CODE_0003.SetValue("BP");                                                            //COBOL==> MOVE 'BP' TO TEXT-RETURN-CODE-0003
                M_4000_CLOSE_FILE(); if (Control.ExitProgram) { return; }                                             //COBOL==> PERFORM 4000-CLOSE-FILE
            }                                                                                                   //COBOL==> END-EVALUATE.
            if (returnMethod != "" && returnMethod != "M_3500_POSITION_READ") { M_3500_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_3500_EXIT
        /// </summary>
        private void M_3500_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_3500_EXIT") { return; }                                                      //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_3500_EXIT") { M_4000_CLOSE_FILE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_4000_CLOSE_FILE
        /// </summary>
        private void M_4000_CLOSE_FILE(string returnMethod = "")
        {
            FD.LOCATE_INPUT_FILE.CloseFile();                                                                   //COBOL==> CLOSE LOCATE-INPUT-FILE.
            if (returnMethod != "" && returnMethod != "M_4000_CLOSE_FILE") { M_9999_FINISHED(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_9999_FINISHED
        /// </summary>
        private void M_9999_FINISHED(string returnMethod = "")
        {
            if (returnMethod == "M_9999_FINISHED") { return; }                                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_9999_FINISHED") { M_PARA_2038695603_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_2038695603_EXIT
        /// </summary>
        private void M_PARA_2038695603_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_2038695603_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PARA_2038695603_EXIT") { M_PARA_2038695603_INIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_2038695603_INIT
        /// </summary>
        private void M_PARA_2038695603_INIT(string returnMethod = "")
        {
            LS.EXPORT_RETURNED_0003EV.ResetToInitialValue();                                                    //COBOL==> INITIALIZE EXPORT-RETURNED-0003EV
            LS.EXPORT_RETURNED_0004EV.ResetToInitialValue();                                                    //COBOL==> INITIALIZE EXPORT-RETURNED-0004EV
            LS.EXPORT_RETURNED_0005EV.ResetToInitialValue();                                                    //COBOL==> INITIALIZE EXPORT-RETURNED-0005EV .
            if (returnMethod != "" && returnMethod != "M_PARA_2038695603_INIT") { M_PARA_2038695603_INIT_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PARA_2038695603_INIT_EXIT
        /// </summary>
        private void M_PARA_2038695603_INIT_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PARA_2038695603_INIT_EXIT") { return; }                                      //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
