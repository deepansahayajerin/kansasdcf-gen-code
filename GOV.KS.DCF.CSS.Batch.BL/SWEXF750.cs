#region Comments
/* Conversion Comments
   ************************************************************
   **   MODERN SYSTEMS INC.  COPYRIGHT 2000-2022
   **   DB-SHUTTLE COBOL to C# Conversion
   ************************************************************
   ** INIT   *  INITIAL VERSION   *  2022-03-02 04:46:46 PM
   **        *   FROM COBOL PGM   :  SWEXF750
   **        *   FROM CANISTER    :  SR.CAECSES.PROD.LIBR.SOURCE.PDS
   ************************************************************ */

/* Original Program Identification Comments
   *********************************************************
     SOURCE CODE GENERATED BY CANAM REPORT COMPOSER V4.0.35A
     COPYRIGHT (C) CANAM SOFTWARE LABS, INC. 1995-1998,1999
     REPORT COMPOSER LICENSE INFORMATION:
           STATE OF KANSAS
    EAB DEFINITION NAME:  MONTHLY COLLECTIONS REPORT V2
    ACTION BLOCK NAME:    EAB-PRODUCE-REPORT
    LANGUAGE:             COBOL
    STYLE:                BLOCK MODE REPORT
    TARGET OS:            MVS
    SOURCE:               C:\COOLGEN\MODELS\EXTRN\SWEXF750.CBL
    PRODUCT:              COMPOSER
    GEN DATE:             12/14/1999
    GEN TIME:             11:20:30
    LAST UPDATE USER:     FAIRLEY , COLIN
    LAST UPDATE DATE:     12/14/1999 11:20:30 AM
    IMPORT VIEW SPECIAL ATTRIBUTES
    ------------------------------
    PARM1 - USED TO CONTROL REPORT ACTION AND I/O TYPE
    I/O CONTROL CODE VALUES:
       'OF' - OPEN REPORT FILE
       'AF' - APPEND TO REPORT FILE
       'CF' - CLOSE REPORT FILE
       'VR' - VIEW REPORT FILE (ONLINE ONLY)
       'PR' - PRINT REPORT FILE (ONLINE ONLY)
       'GR' - GENERATE A REPORT LINE
    PARM2 - USED TO OVERRIDE REPORT PROPERTIES AT RUN TIME
    RUNTIME REPORT OPTION VALUES:
       'Y ' - ON OF RECORD ONLY, FORCES KEEP BODY LINES
              TOGETHER OPTION ON
       'N ' - ON OF RECORD ONLY, FORCES KEEP BODY LINES
              TOGETHER OPTION OFF
       '  ' - ON OF RECORD, USE THE KEEP BODY LINES
              TOGETHER SETTING FROM THE EAB DEFINITION
       'S ' - ON GR RECORDS, FORCES SUPPRESSION OF BODY LINE,
              BUT DETAILS WILL STILL BE ACCUMULATED IN COLUMN
              FUNCTIONS AND BREAKS WILL OCCUR IF NECESSARY
       'D ' - ON GR RECORDS, FORCES PRINTING OF BODY LINE, EVEN IF
              SUPPRESS BODY LINES PROPERTY IS SET IN EAB DEFINITION
       '0 ' - ON OF RECORD ONLY, SUPPRESS THE INITIAL PAGE EJECT
       '  ' - ON GR RECORDS, USE THE SUPPRESS BODY LINES PROPERTY
              SET IN EAB DEFINITION
    EXPORT VIEW SPECIAL ATTRIBUTES
    ------------------------------
    PARM1 - USED TO INDICATE ERROR ON I/O
            OR INVALID IMPORT PARM1 OR PARM2
    RETURN CODE VALUES:
       'EO' - ERROR ON OPEN REPORT FILE
       'EC' - ERROR ON CLOSE REPORT FILE
       'ER' - ERROR ON WRITING A REPORT LINE
       'II' - INVALID I/O CONTROL CODE
              (SEE VALID CODES IN PARM1 ABOVE)
       'RI' - INVALID RUNTIME REPORT OPTION
              (SEE VALID CODES IN PARM2 ABOVE)
       'IS' - INVALID SUBREPORT CODE
              (SUBREPORT CODES MUST BE IN UPPERCASE CHARACTERS)
    PARM2 - RETURNS THE FILE STATUS AFTER THE OUTPUT
            OPERATION ON THE REPORT FILE
*/
#endregion
#region Using Directives
using System;
using System.Data;
using System.Collections.Generic;
using MDSY.Framework.IO.Common;
using MDSY.Framework.Buffer;
using MDSY.Framework.Buffer.BaseClasses;
using MDSY.Framework.Buffer.Interfaces;
using MDSY.Framework.Buffer.Common;
using MDSY.Framework.Core;
using MDSY.Framework.Data.SQL;
using MDSY.Framework.Interfaces;
using GOV.KS.DCF.CSS.Common.BL;
using MDSY.Framework.IO.Common;
#endregion

namespace GOV.KS.DCF.CSS.Batch.BL
{
    #region File Section Class
    internal class SWEXF750_fd : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string FileSection = "SWEXF750_fd_FileSection";
            internal const string REPORT_FILE = "REPORT_FILE";
            internal const string REPORT_LINE = "REPORT_LINE";
        }
        #endregion

        #region Direct-access element properties
        public IFileLink REPORT_FILE { get; set; }
        public IGroup REPORT_LINE { get { return GetElementByName<IGroup>(Names.REPORT_LINE); } }


        internal SWEXF750_ws WS;
        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the FileSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {

            recordDef.CreateNewGroup(Names.REPORT_LINE, (REPORT_LINE) =>
           {
               REPORT_LINE.CreateNewFillerField(133, FillWith.Hashes);
           });

        }

        protected override string GetRecordName()
        {
            return Names.FileSection;
        }
        #endregion

        #region Initialize
        public override void Initialize()
        {
            InitializeWithLowValues();
            IFileHandler FileHandler = InversionContainer.GetImplementingObject<IFileHandler>();

            REPORT_FILE = FileHandler.GetFile("COLLRPT");
            REPORT_FILE.StatusField = WS.WS_FILE_STATUS;
            REPORT_FILE.AssociatedBuffer = REPORT_LINE;
        }
        #endregion

        #region Constructors
        public SWEXF750_fd(SWEXF750_ws ws)
            : base()
        {
            this.WS = ws;
            Initialize();

        }
        #endregion
    }
    #endregion File Section Class
    #region Working Storage Class
    internal class SWEXF750_ws : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string WorkingStorage = "SWEXF750_ws_WorkingStorage";
            internal const string WS_FILE_STATUS = "WS_FILE_STATUS";
            internal const string WORK_FIELDS = "WORK_FIELDS";
            internal const string WS_STK_CONTROL_BRK_FLAG = "WS_STK_CONTROL_BRK_FLAG";
            internal const string WS_STK_SECTION_PROCESSING_IND = "WS_STK_SECTION_PROCESSING_IND";
            internal const string WS_VERY_FIRST_WRITE = "WS_VERY_FIRST_WRITE";
            internal const string WS_PG_BRK_FLAG = "WS_PG_BRK_FLAG";
            internal const string WS_PG_BRK = "WS_PG_BRK";
            internal const string WS_PG_BRK_FLAG_SAVE = "WS_PG_BRK_FLAG_SAVE";
            internal const string WS_PRINT_LINE_SPACING = "WS_PRINT_LINE_SPACING";
            internal const string WS_TEMP_PRINT_LINE_SPACING = "WS_TEMP_PRINT_LINE_SPACING";
            internal const string WS_PRINT_RECORD = "WS_PRINT_RECORD";
            internal const string WS_PRINT_LINE = "WS_PRINT_LINE";
            internal const string WS_SPACE_RECORD = "WS_SPACE_RECORD";
            internal const string WS_SPACE_LINE = "WS_SPACE_LINE";
            internal const string WS_TEMP_PRINT_LINE = "WS_TEMP_PRINT_LINE";
            internal const string WS_TEMP_SAVE_PRINT_LINE = "WS_TEMP_SAVE_PRINT_LINE";
            internal const string WS_LINE_COUNT = "WS_LINE_COUNT";
            internal const string WS_PG_LENGTH = "WS_PG_LENGTH";
            internal const string WS_PG_NUMBER = "WS_PG_NUMBER";
            internal const string WS_PG_NUMBER_SAVE = "WS_PG_NUMBER_SAVE";
            internal const string SAVE_FOR_WRAP_TEXT = "SAVE_FOR_WRAP_TEXT";
            internal const string WS_CUR_SUBRPT_CODE = "WS_CUR_SUBRPT_CODE";
            internal const string WS_PREV_SUBRPT_CODE = "WS_PREV_SUBRPT_CODE";
            internal const string WS_CONTROL_BRK_FLAG = "WS_CONTROL_BRK_FLAG";
            internal const string WS_NOT_IN_CONTROL_BRK = "WS_NOT_IN_CONTROL_BRK";
            internal const string WS_SAVE_SECTION_PROCESSING_IND = "WS_SAVE_SECTION_PROCESSING_IND";
            internal const string WS_SAVE_RPT_HDR_IS_PROCESSED = "WS_SAVE_RPT_HDR_IS_PROCESSED";
            internal const string WS_SAVE_RPT_FTR_IS_PROCESSED = "WS_SAVE_RPT_FTR_IS_PROCESSED";
            internal const string WS_SAVE_PG_HDR_IS_PROCESSED = "WS_SAVE_PG_HDR_IS_PROCESSED";
            internal const string WS_SAVE_BODY_IS_PROCESSED = "WS_SAVE_BODY_IS_PROCESSED";
            internal const string WS_RESET_PG_NUMBER = "WS_RESET_PG_NUMBER";
            internal const string WS_SUPPRSS_BLANK_LINE = "WS_SUPPRSS_BLANK_LINE";
            internal const string WS_SUPPRSS_BLANK_LINE_SAVE = "WS_SUPPRSS_BLANK_LINE_SAVE";
            internal const string WS_USER_NULL_DATE = "WS_USER_NULL_DATE";
            internal const string WS_TEMP_LINE_QT = "WS_TEMP_LINE_QT";
            internal const string WS_CUR_SECTION_LINE_QT = "WS_CUR_SECTION_LINE_QT";
            internal const string WS_SAVE_PRINT_ATBOTTM = "WS_SAVE_PRINT_ATBOTTM";
            internal const string WS_TEMP_LINE_COUNT = "WS_TEMP_LINE_COUNT";
            internal const string WS_TEMP_INDX = "WS_TEMP_INDX";
            internal const string WS_MONTH_TEXT_LENGTH = "WS_MONTH_TEXT_LENGTH";
            internal const string PREV_IO_CONTROL_CD = "PREV_IO_CONTROL_CD";
            internal const string DATE_TIME_CONVERSION_FIELDS = "DATE_TIME_CONVERSION_FIELDS";
            internal const string IEF_DATE_TIME = "IEF_DATE_TIME";
            internal const string IEF_DATE = "IEF_DATE";
            internal const string IEF_TIME = "IEF_TIME";
            internal const string DT_YEAR_4 = "DT_YEAR_4";
            internal const string DT_YEAR_2 = "DT_YEAR_2";
            internal const string DT_YEAR_1 = "DT_YEAR_1";
            internal const string DT_MONTH_MM = "DT_MONTH_MM";
            internal const string DT_DAY = "DT_DAY";
            internal const string DT_TIME = "DT_TIME";
            internal const string DT_HOUR = "DT_HOUR";
            internal const string DT_MINUTES = "DT_MINUTES";
            internal const string DT_SECONDS = "DT_SECONDS";
            internal const string DT_MICROSECONDS = "DT_MICROSECONDS";
            internal const string DT_EDIT_PATTERN = "DT_EDIT_PATTERN";
            internal const string TS_EDIT_PATTERN = "TS_EDIT_PATTERN";
            internal const string DT_MONTH_MON = "DT_MONTH_MON";
            internal const string DT_MONTH_MON_U_STRING = "DT_MONTH_MON_U_STRING";
            internal const string DT_MONTH_MON_U_TABLE = "DT_MONTH_MON_U_TABLE";
            internal const string DT_MONTH_MON_U_TEXT = "DT_MONTH_MON_U_TEXT";
            internal const string DT_MONTH_MON_L_STRING = "DT_MONTH_MON_L_STRING";
            internal const string DT_MONTH_MON_L_TABLE = "DT_MONTH_MON_L_TABLE";
            internal const string DT_MONTH_MON_L_TEXT = "DT_MONTH_MON_L_TEXT";
            internal const string DT_MONTH_MONTH = "DT_MONTH_MONTH";
            internal const string DT_MONTH_MONTH_U_STRING = "DT_MONTH_MONTH_U_STRING";
            internal const string DT_MONTH_MONTH_U_TABLE = "DT_MONTH_MONTH_U_TABLE";
            internal const string DT_MONTH_MONTH_U_TEXT = "DT_MONTH_MONTH_U_TEXT";
            internal const string DT_MONTH_MONTH_L_STRING = "DT_MONTH_MONTH_L_STRING";
            internal const string DT_MONTH_MONTH_L_TABLE = "DT_MONTH_MONTH_L_TABLE";
            internal const string DT_MONTH_MONTH_L_TEXT = "DT_MONTH_MONTH_L_TEXT";
            internal const string DT_FORMATTED_DATETIME = "DT_FORMATTED_DATETIME";
            internal const string DT_FORMATTED_DATETIME_TABLE = "DT_FORMATTED_DATETIME_TABLE";
            internal const string DT_FORMATTED_DATETIME_TEXT = "DT_FORMATTED_DATETIME_TEXT";
            internal const string DT_FORMATTED_DATE = "DT_FORMATTED_DATE";
            internal const string DT_FORMATTED_DATE_TABLE = "DT_FORMATTED_DATE_TABLE";
            internal const string DT_FORMATTED_DATE_TEXT = "DT_FORMATTED_DATE_TEXT";
            internal const string DT_FORMATTED_TIME = "DT_FORMATTED_TIME";
            internal const string DT_FORMATTED_TIME_TABLE = "DT_FORMATTED_TIME_TABLE";
            internal const string DT_FORMATTED_TIME_TEXT = "DT_FORMATTED_TIME_TEXT";
            internal const string DT_STRING_COUNT = "DT_STRING_COUNT";
            internal const string DT_STRING_FOUND = "DT_STRING_FOUND";
            internal const string DT_LEAP_YEAR_DAYS1 = "DT_LEAP_YEAR_DAYS1";
            internal const string DT_LEAP_YEAR_TABLE1 = "DT_LEAP_YEAR_TABLE1";
            internal const string DT_NO_LEAP_DAYS = "DT_NO_LEAP_DAYS";
            internal const string DT_LEAP_YEAR_DAYS2 = "DT_LEAP_YEAR_DAYS2";
            internal const string DT_LEAP_YEAR_TABLE1_d2 = "DT_LEAP_YEAR_TABLE1_d2";
            internal const string DT_LEAP_DAYS = "DT_LEAP_DAYS";
            internal const string LEAP_DAY = "LEAP_DAY";
            internal const string LEAP1 = "LEAP1";
            internal const string LEAP2 = "LEAP2";
            internal const string LEAP3 = "LEAP3";
            internal const string DT_START = "DT_START";
            internal const string DT_INDEX = "DT_INDEX";
            internal const string WS_CURRENT_DATE_8 = "WS_CURRENT_DATE_8";
            internal const string WS_CURRENT_DATE_8_CC = "WS_CURRENT_DATE_8_CC";
            internal const string WS_CURRENT_DATE_8_YY = "WS_CURRENT_DATE_8_YY";
            internal const string WS_CURRENT_DATE_8_MM = "WS_CURRENT_DATE_8_MM";
            internal const string WS_CURRENT_DATE_8_DD = "WS_CURRENT_DATE_8_DD";
            internal const string WS_CURRENT_DATE = "WS_CURRENT_DATE";
            internal const string WS_CURRENT_DATE_6 = "WS_CURRENT_DATE_6";
            internal const string WS_CURRENT_DATE_6_YY = "WS_CURRENT_DATE_6_YY";
            internal const string WS_CURRENT_DATE_6_MM = "WS_CURRENT_DATE_6_MM";
            internal const string WS_CURRENT_DATE_6_DD = "WS_CURRENT_DATE_6_DD";
            internal const string WS_CURRENT_TIME = "WS_CURRENT_TIME";
            internal const string WS_CURRENT_TIME_X = "WS_CURRENT_TIME_X";
            internal const string WS_CURRENT_TIME_6 = "WS_CURRENT_TIME_6";
            internal const string WS_UNJUSTIFIED_TEXT_IDX = "WS_UNJUSTIFIED_TEXT_IDX";
            internal const string WS_JUSTIFIED_TEXT_IDX = "WS_JUSTIFIED_TEXT_IDX";
            internal const string WS_JUSTIFY_TEXT_FIELDS = "WS_JUSTIFY_TEXT_FIELDS";
            internal const string WS_UNJUSTIFIED_TEXT_FIELD = "WS_UNJUSTIFIED_TEXT_FIELD";
            internal const string WS_UNJUSTIFIED_TEXT_CHAR = "WS_UNJUSTIFIED_TEXT_CHAR";
            internal const string WS_JUSTIFIED_TEXT_FIELD = "WS_JUSTIFIED_TEXT_FIELD";
            internal const string WS_JUSTIFIED_TEXT_CHAR = "WS_JUSTIFIED_TEXT_CHAR";
            internal const string WS_JUSTIFICATION_TYPE_CD = "WS_JUSTIFICATION_TYPE_CD";
            internal const string WS_JUSTIFIED_NONE = "WS_JUSTIFIED_NONE";
            internal const string WS_JUSTIFIED_LEFT = "WS_JUSTIFIED_LEFT";
            internal const string WS_JUSTIFIED_CENTER = "WS_JUSTIFIED_CENTER";
            internal const string WS_JUSTIFIED_RIGHT = "WS_JUSTIFIED_RIGHT";
            internal const string WS_JUSTIFIED_TEXT_FIELD_LENGTH = "WS_JUSTIFIED_TEXT_FIELD_LENGTH";
            internal const string WS_JUSTIFIED_TEXT_DATA_LENGTH = "WS_JUSTIFIED_TEXT_DATA_LENGTH";
            internal const string WS_JUSTIFIED_FIELD_START = "WS_JUSTIFIED_FIELD_START";
            internal const string WS_FIRST_CHAR = "WS_FIRST_CHAR";
            internal const string WS_LAST_CHAR = "WS_LAST_CHAR";
            internal const string WS_CHAR_CNTR = "WS_CHAR_CNTR";
            internal const string RG_WORK_FIELDS = "RG_WORK_FIELDS";
            internal const string WS_RG_CNTL_HDR_FLAG = "WS_RG_CNTL_HDR_FLAG";
            internal const string WS_RG_CNTL_HDR = "WS_RG_CNTL_HDR";
            internal const string WS_RG_CNTL_FTR_FLAG = "WS_RG_CNTL_FTR_FLAG";
            internal const string WS_RG_CNTL_FTR = "WS_RG_CNTL_FTR";
            internal const string WS_RG_RPT_FTR_FLAG = "WS_RG_RPT_FTR_FLAG";
            internal const string WS_RG_RPT_FTR = "WS_RG_RPT_FTR";
            internal const string WS_RG_DTL_LINE_QT = "WS_RG_DTL_LINE_QT";
            internal const string WS_RG_PG_HDR_LINE_QT = "WS_RG_PG_HDR_LINE_QT";
            internal const string WS_RG_PG_FTR_LINE_QT = "WS_RG_PG_FTR_LINE_QT";
            internal const string WS_RG_RPT_HDR_LINE_QT = "WS_RG_RPT_HDR_LINE_QT";
            internal const string WS_RG_RPT_FTR_LINE_QT = "WS_RG_RPT_FTR_LINE_QT";
            internal const string WS_RG_LINE_SPACING = "WS_RG_LINE_SPACING";
            internal const string WS_RG_RPT_TYPE_CD = "WS_RG_RPT_TYPE_CD";
            internal const string WS_RG_SUMMARY_RPT_REQUESTED = "WS_RG_SUMMARY_RPT_REQUESTED";
            internal const string WS_RG_DTL_RPT_REQUESTED = "WS_RG_DTL_RPT_REQUESTED";
            internal const string WS_RG_SECTION_PROCESSING_IND = "WS_RG_SECTION_PROCESSING_IND";
            internal const string WS_RG_RPT_HDR_IS_PROCESSED = "WS_RG_RPT_HDR_IS_PROCESSED";
            internal const string WS_RG_RPT_FTR_IS_PROCESSED = "WS_RG_RPT_FTR_IS_PROCESSED";
            internal const string WS_RG_PG_HDR_IS_PROCESSED = "WS_RG_PG_HDR_IS_PROCESSED";
            internal const string WS_RG_BODY_IS_PROCESSED = "WS_RG_BODY_IS_PROCESSED";
            internal const string WS_RG_KEEP_DTL_TOGETHER_FG = "WS_RG_KEEP_DTL_TOGETHER_FG";
            internal const string WS_RG_PRINT_PG_BRK_SPACING = "WS_RG_PRINT_PG_BRK_SPACING";
            internal const string WS_RG_PRINT_PG_BRK_LINE = "WS_RG_PRINT_PG_BRK_LINE";
            internal const string WS_RG_PRINT_RPT_FTR_LINE = "WS_RG_PRINT_RPT_FTR_LINE";
            internal const string WS_RG_PG_BRK_FLAG = "WS_RG_PG_BRK_FLAG";
            internal const string WS_RG_CUR_RPT_HDR_LINE_NUM = "WS_RG_CUR_RPT_HDR_LINE_NUM";
            internal const string WS_RG_CUR_RPT_FTR_LINE_NUM = "WS_RG_CUR_RPT_FTR_LINE_NUM";
            internal const string WS_RG_FIRST_TIME_FLAG = "WS_RG_FIRST_TIME_FLAG";
            internal const string WS_RG_FIRST_TIME = "WS_RG_FIRST_TIME";
            internal const string WS_RG_DISABLE_SUPPRESS = "WS_RG_DISABLE_SUPPRESS";
            internal const string WS_RG_SUPPRESS_DUPLICATES = "WS_RG_SUPPRESS_DUPLICATES";
            internal const string WS_RG_PRINT_DUPLICATES = "WS_RG_PRINT_DUPLICATES";
            internal const string WS_RG_BODY_SECTION_LINES = "WS_RG_BODY_SECTION_LINES";
            internal const string WS_RG_BODY_SUPPRESS_LINES = "WS_RG_BODY_SUPPRESS_LINES";
            internal const string WS_RG_GR_COUNTER = "WS_RG_GR_COUNTER";
            internal const string WS_RG_PAGE_SUPPRESS = "WS_RG_PAGE_SUPPRESS";
            internal const string WS_RG_PAGE_SUPPRESS_AFTER = "WS_RG_PAGE_SUPPRESS_AFTER";
            internal const string WS_RG_PAGE_DTL_LINES = "WS_RG_PAGE_DTL_LINES";
            internal const string WS_RG_CURRENTLY_WRAPPING = "WS_RG_CURRENTLY_WRAPPING";
            internal const string WS_RG_CUR_PRINTING_PAGE_HDR = "WS_RG_CUR_PRINTING_PAGE_HDR";
            internal const string RG_EDIT_PATTERN_OBJ3 = "RG_EDIT_PATTERN_OBJ3";
            internal const string RG_EDIT_PATTERN_OBJ4 = "RG_EDIT_PATTERN_OBJ4";
            internal const string RG_EDIT_PATTERN_OBJ5 = "RG_EDIT_PATTERN_OBJ5";
            internal const string RG_EDIT_PATTERN_OBJ6 = "RG_EDIT_PATTERN_OBJ6";
            internal const string RG_EDIT_PATTERN_OBJ7 = "RG_EDIT_PATTERN_OBJ7";
            internal const string RG_EDIT_PATTERN_OBJ8 = "RG_EDIT_PATTERN_OBJ8";
            internal const string RG_EDIT_PATTERN_OBJ9 = "RG_EDIT_PATTERN_OBJ9";
            internal const string RG_EDIT_PATTERN_OBJ10 = "RG_EDIT_PATTERN_OBJ10";
            internal const string RG_EDIT_PATTERN_OBJ11 = "RG_EDIT_PATTERN_OBJ11";
            internal const string RG_EDIT_PATTERN_OBJ12 = "RG_EDIT_PATTERN_OBJ12";
            internal const string RG_EDIT_PATTERN_OBJ13 = "RG_EDIT_PATTERN_OBJ13";
            internal const string RG_EDIT_PATTERN_OBJ15 = "RG_EDIT_PATTERN_OBJ15";
            internal const string RG_EDIT_PATTERN_OBJ16 = "RG_EDIT_PATTERN_OBJ16";
            internal const string RG_EDIT_PATTERN_OBJ17 = "RG_EDIT_PATTERN_OBJ17";
            internal const string RG_EDIT_PATTERN_OBJ18 = "RG_EDIT_PATTERN_OBJ18";
            internal const string RG_EDIT_PATTERN_OBJ19 = "RG_EDIT_PATTERN_OBJ19";
            internal const string RG_EDIT_PATTERN_OBJ20 = "RG_EDIT_PATTERN_OBJ20";
            internal const string RG_EDIT_PATTERN_OBJ21 = "RG_EDIT_PATTERN_OBJ21";
            internal const string RG_EDIT_PATTERN_OBJ22 = "RG_EDIT_PATTERN_OBJ22";
            internal const string RG_EDIT_PATTERN_OBJ23 = "RG_EDIT_PATTERN_OBJ23";
            internal const string RG_EDIT_PATTERN_OBJ24 = "RG_EDIT_PATTERN_OBJ24";
            internal const string RG_EDIT_PATTERN_OBJ25 = "RG_EDIT_PATTERN_OBJ25";
            internal const string RG_DTL_LINE_SECTION = "RG_DTL_LINE_SECTION";
            internal const string RG_DTL_LINE_BEFORE_SPACE = "RG_DTL_LINE_BEFORE_SPACE";
            internal const string RG_DTL_LINE_AFTER_SPACING = "RG_DTL_LINE_AFTER_SPACING";
            internal const string RG_DTL_LINE_RESETPG_AFTER = "RG_DTL_LINE_RESETPG_AFTER";
            internal const string RG_DTL_LINE_KEEP_TOGETHER = "RG_DTL_LINE_KEEP_TOGETHER";
            internal const string RG_DTL_LINE_SUPPRSS_BLANK = "RG_DTL_LINE_SUPPRSS_BLANK";
            internal const string RG_DTL_LINE_PRINT_ATBOTTM = "RG_DTL_LINE_PRINT_ATBOTTM";
            internal const string RG_DTL_LINE_KEEP_WITHNEXT = "RG_DTL_LINE_KEEP_WITHNEXT";
            internal const string RG_DTL_LINE_BEFORE_PG_BRK = "RG_DTL_LINE_BEFORE_PG_BRK";
            internal const string RG_DTL_LINE_AFTER_PG_BRK = "RG_DTL_LINE_AFTER_PG_BRK";
            internal const string RG_DTL_LINE_PRINT_FLAG = "RG_DTL_LINE_PRINT_FLAG";
            internal const string RG_DTL_LINE_0 = "RG_DTL_LINE_0";
            internal const string RG_DTL_LINE_0_A_OBJ1 = "RG_DTL_LINE_0_A_OBJ1";
            internal const string RG_DTL_LINE_1 = "RG_DTL_LINE_1";
            internal const string RG_DTL_LINE_1_A_OBJ2 = "RG_DTL_LINE_1_A_OBJ2";
            internal const string RG_DTL_LINE_1_A_OBJ3 = "RG_DTL_LINE_1_A_OBJ3";
            internal const string RG_DTL_SUPRES_1_A_OBJ3 = "RG_DTL_SUPRES_1_A_OBJ3";
            internal const string RG_DTL_LINE_1_A_OBJ4 = "RG_DTL_LINE_1_A_OBJ4";
            internal const string RG_DTL_SUPRES_1_A_OBJ4 = "RG_DTL_SUPRES_1_A_OBJ4";
            internal const string RG_DTL_LINE_1_A_OBJ5 = "RG_DTL_LINE_1_A_OBJ5";
            internal const string RG_DTL_SUPRES_1_A_OBJ5 = "RG_DTL_SUPRES_1_A_OBJ5";
            internal const string RG_DTL_LINE_1_A_OBJ6 = "RG_DTL_LINE_1_A_OBJ6";
            internal const string RG_DTL_SUPRES_1_A_OBJ6 = "RG_DTL_SUPRES_1_A_OBJ6";
            internal const string RG_DTL_LINE_1_A_OBJ7 = "RG_DTL_LINE_1_A_OBJ7";
            internal const string RG_DTL_SUPRES_1_A_OBJ7 = "RG_DTL_SUPRES_1_A_OBJ7";
            internal const string RG_DTL_LINE_1_A_OBJ8 = "RG_DTL_LINE_1_A_OBJ8";
            internal const string RG_DTL_SUPRES_1_A_OBJ8 = "RG_DTL_SUPRES_1_A_OBJ8";
            internal const string RG_DTL_LINE_1_A_OBJ9 = "RG_DTL_LINE_1_A_OBJ9";
            internal const string RG_DTL_SUPRES_1_A_OBJ9 = "RG_DTL_SUPRES_1_A_OBJ9";
            internal const string RG_DTL_LINE_1_A_OBJ10 = "RG_DTL_LINE_1_A_OBJ10";
            internal const string RG_DTL_SUPRES_1_A_OBJ10 = "RG_DTL_SUPRES_1_A_OBJ10";
            internal const string RG_DTL_LINE_1_A_OBJ11 = "RG_DTL_LINE_1_A_OBJ11";
            internal const string RG_DTL_SUPRES_1_A_OBJ11 = "RG_DTL_SUPRES_1_A_OBJ11";
            internal const string RG_DTL_LINE_1_A_OBJ12 = "RG_DTL_LINE_1_A_OBJ12";
            internal const string RG_DTL_SUPRES_1_A_OBJ12 = "RG_DTL_SUPRES_1_A_OBJ12";
            internal const string RG_DTL_LINE_1_A_OBJ13 = "RG_DTL_LINE_1_A_OBJ13";
            internal const string RG_DTL_SUPRES_1_A_OBJ13 = "RG_DTL_SUPRES_1_A_OBJ13";
            internal const string RG_DTL_LINE_2 = "RG_DTL_LINE_2";
            internal const string RG_DTL_LINE_2_A_OBJ14 = "RG_DTL_LINE_2_A_OBJ14";
            internal const string RG_DTL_LINE_2_A_OBJ15 = "RG_DTL_LINE_2_A_OBJ15";
            internal const string RG_DTL_SUPRES_2_A_OBJ15 = "RG_DTL_SUPRES_2_A_OBJ15";
            internal const string RG_DTL_LINE_2_A_OBJ16 = "RG_DTL_LINE_2_A_OBJ16";
            internal const string RG_DTL_SUPRES_2_A_OBJ16 = "RG_DTL_SUPRES_2_A_OBJ16";
            internal const string RG_DTL_LINE_2_A_OBJ17 = "RG_DTL_LINE_2_A_OBJ17";
            internal const string RG_DTL_SUPRES_2_A_OBJ17 = "RG_DTL_SUPRES_2_A_OBJ17";
            internal const string RG_DTL_LINE_2_A_OBJ18 = "RG_DTL_LINE_2_A_OBJ18";
            internal const string RG_DTL_SUPRES_2_A_OBJ18 = "RG_DTL_SUPRES_2_A_OBJ18";
            internal const string RG_DTL_LINE_2_A_OBJ19 = "RG_DTL_LINE_2_A_OBJ19";
            internal const string RG_DTL_SUPRES_2_A_OBJ19 = "RG_DTL_SUPRES_2_A_OBJ19";
            internal const string RG_DTL_LINE_2_A_OBJ20 = "RG_DTL_LINE_2_A_OBJ20";
            internal const string RG_DTL_SUPRES_2_A_OBJ20 = "RG_DTL_SUPRES_2_A_OBJ20";
            internal const string RG_DTL_LINE_2_A_OBJ21 = "RG_DTL_LINE_2_A_OBJ21";
            internal const string RG_DTL_SUPRES_2_A_OBJ21 = "RG_DTL_SUPRES_2_A_OBJ21";
            internal const string RG_DTL_LINE_2_A_OBJ22 = "RG_DTL_LINE_2_A_OBJ22";
            internal const string RG_DTL_SUPRES_2_A_OBJ22 = "RG_DTL_SUPRES_2_A_OBJ22";
            internal const string RG_DTL_LINE_2_A_OBJ23 = "RG_DTL_LINE_2_A_OBJ23";
            internal const string RG_DTL_SUPRES_2_A_OBJ23 = "RG_DTL_SUPRES_2_A_OBJ23";
            internal const string RG_DTL_LINE_2_A_OBJ24 = "RG_DTL_LINE_2_A_OBJ24";
            internal const string RG_DTL_SUPRES_2_A_OBJ24 = "RG_DTL_SUPRES_2_A_OBJ24";
            internal const string RG_DTL_LINE_2_A_OBJ25 = "RG_DTL_LINE_2_A_OBJ25";
            internal const string RG_DTL_SUPRES_2_A_OBJ25 = "RG_DTL_SUPRES_2_A_OBJ25";
            internal const string RG_DTL_LINE_3 = "RG_DTL_LINE_3";
            internal const string RG_RPT_FTR_SECTION = "RG_RPT_FTR_SECTION";
            internal const string RG_RPT_FTR_BEFORE_SPACE = "RG_RPT_FTR_BEFORE_SPACE";
            internal const string RG_RPT_FTR_AFTER_SPACING = "RG_RPT_FTR_AFTER_SPACING";
            internal const string RG_RPT_FTR_RESETPG_AFTER = "RG_RPT_FTR_RESETPG_AFTER";
            internal const string RG_RPT_FTR_KEEP_TOGETHER = "RG_RPT_FTR_KEEP_TOGETHER";
            internal const string RG_RPT_FTR_SUPPRSS_BLANK = "RG_RPT_FTR_SUPPRSS_BLANK";
            internal const string RG_RPT_FTR_PRINT_ATBOTTM = "RG_RPT_FTR_PRINT_ATBOTTM";
            internal const string RG_RPT_FTR_KEEP_WITHNEXT = "RG_RPT_FTR_KEEP_WITHNEXT";
            internal const string RG_RPT_FTR_BEFORE_PG_BRK = "RG_RPT_FTR_BEFORE_PG_BRK";
            internal const string RG_RPT_FTR_AFTER_PG_BRK = "RG_RPT_FTR_AFTER_PG_BRK";
            internal const string RG_RPT_FTR_PRINT_FLAG = "RG_RPT_FTR_PRINT_FLAG";
            internal const string RG_RPT_FTR_0 = "RG_RPT_FTR_0";
            internal const string RG_RPT_FTR_1 = "RG_RPT_FTR_1";
            internal const string RG_PAGE_HDR_SECTION = "RG_PAGE_HDR_SECTION";
            internal const string RG_PAGE_HDR_BEFORE_SPACE = "RG_PAGE_HDR_BEFORE_SPACE";
            internal const string RG_PAGE_HDR_AFTER_SPACING = "RG_PAGE_HDR_AFTER_SPACING";
            internal const string RG_PAGE_HDR_RESETPG_AFTER = "RG_PAGE_HDR_RESETPG_AFTER";
            internal const string RG_PAGE_HDR_KEEP_TOGETHER = "RG_PAGE_HDR_KEEP_TOGETHER";
            internal const string RG_PAGE_HDR_SUPPRSS_BLANK = "RG_PAGE_HDR_SUPPRSS_BLANK";
            internal const string RG_PAGE_HDR_PRINT_ATBOTTM = "RG_PAGE_HDR_PRINT_ATBOTTM";
            internal const string RG_PAGE_HDR_KEEP_WITHNEXT = "RG_PAGE_HDR_KEEP_WITHNEXT";
            internal const string RG_PAGE_HDR_BEFORE_PG_BRK = "RG_PAGE_HDR_BEFORE_PG_BRK";
            internal const string RG_PAGE_HDR_AFTER_PG_BRK = "RG_PAGE_HDR_AFTER_PG_BRK";
            internal const string RG_PAGE_HDR_PRINT_FLAG = "RG_PAGE_HDR_PRINT_FLAG";
            internal const string RG_PAGE_HDR_0 = "RG_PAGE_HDR_0";
            internal const string RG_PAGE_HDR_0_P_OBJ30 = "RG_PAGE_HDR_0_P_OBJ30";
            internal const string RG_PAGE_HDR_1 = "RG_PAGE_HDR_1";
            internal const string RG_PAGE_HDR_1_D_OBJ32 = "RG_PAGE_HDR_1_D_OBJ32";
            internal const string RG_PAGE_HDR_2 = "RG_PAGE_HDR_2";
            internal const string RG_PAGE_HDR_2_T_OBJ35 = "RG_PAGE_HDR_2_T_OBJ35";
            internal const string RG_PAGE_HDR_3 = "RG_PAGE_HDR_3";
            internal const string RG_PAGE_HDR_4 = "RG_PAGE_HDR_4";
            internal const string RG_PAGE_HDR_5 = "RG_PAGE_HDR_5";
            internal const string RG_PAGE_HDR_5_A_OBJ39 = "RG_PAGE_HDR_5_A_OBJ39";
            internal const string RG_PAGE_HDR_6 = "RG_PAGE_HDR_6";
            internal const string RG_PAGE_HDR_7 = "RG_PAGE_HDR_7";
            internal const string RG_PAGE_HDR_8 = "RG_PAGE_HDR_8";
            internal const string RG_PAGE_HDR_9 = "RG_PAGE_HDR_9";
            internal const string ST_WORK_FIELDS = "ST_WORK_FIELDS";
            internal const string WS_ST_CNTL_HDR_FLAG = "WS_ST_CNTL_HDR_FLAG";
            internal const string WS_ST_CNTL_HDR = "WS_ST_CNTL_HDR";
            internal const string WS_ST_CNTL_FTR_FLAG = "WS_ST_CNTL_FTR_FLAG";
            internal const string WS_ST_CNTL_FTR = "WS_ST_CNTL_FTR";
            internal const string WS_ST_RPT_FTR_FLAG = "WS_ST_RPT_FTR_FLAG";
            internal const string WS_ST_RPT_FTR = "WS_ST_RPT_FTR";
            internal const string WS_ST_DTL_LINE_QT = "WS_ST_DTL_LINE_QT";
            internal const string WS_ST_PG_HDR_LINE_QT = "WS_ST_PG_HDR_LINE_QT";
            internal const string WS_ST_PG_FTR_LINE_QT = "WS_ST_PG_FTR_LINE_QT";
            internal const string WS_ST_RPT_HDR_LINE_QT = "WS_ST_RPT_HDR_LINE_QT";
            internal const string WS_ST_RPT_FTR_LINE_QT = "WS_ST_RPT_FTR_LINE_QT";
            internal const string WS_ST_LINE_SPACING = "WS_ST_LINE_SPACING";
            internal const string WS_ST_RPT_TYPE_CD = "WS_ST_RPT_TYPE_CD";
            internal const string WS_ST_SUMMARY_RPT_REQUESTED = "WS_ST_SUMMARY_RPT_REQUESTED";
            internal const string WS_ST_DTL_RPT_REQUESTED = "WS_ST_DTL_RPT_REQUESTED";
            internal const string WS_ST_SECTION_PROCESSING_IND = "WS_ST_SECTION_PROCESSING_IND";
            internal const string WS_ST_RPT_HDR_IS_PROCESSED = "WS_ST_RPT_HDR_IS_PROCESSED";
            internal const string WS_ST_RPT_FTR_IS_PROCESSED = "WS_ST_RPT_FTR_IS_PROCESSED";
            internal const string WS_ST_PG_HDR_IS_PROCESSED = "WS_ST_PG_HDR_IS_PROCESSED";
            internal const string WS_ST_BODY_IS_PROCESSED = "WS_ST_BODY_IS_PROCESSED";
            internal const string WS_ST_KEEP_DTL_TOGETHER_FG = "WS_ST_KEEP_DTL_TOGETHER_FG";
            internal const string WS_ST_PRINT_PG_BRK_SPACING = "WS_ST_PRINT_PG_BRK_SPACING";
            internal const string WS_ST_PRINT_PG_BRK_LINE = "WS_ST_PRINT_PG_BRK_LINE";
            internal const string WS_ST_PRINT_RPT_FTR_LINE = "WS_ST_PRINT_RPT_FTR_LINE";
            internal const string WS_ST_PG_BRK_FLAG = "WS_ST_PG_BRK_FLAG";
            internal const string WS_ST_CUR_RPT_HDR_LINE_NUM = "WS_ST_CUR_RPT_HDR_LINE_NUM";
            internal const string WS_ST_CUR_RPT_FTR_LINE_NUM = "WS_ST_CUR_RPT_FTR_LINE_NUM";
            internal const string WS_ST_FIRST_TIME_FLAG = "WS_ST_FIRST_TIME_FLAG";
            internal const string WS_ST_FIRST_TIME = "WS_ST_FIRST_TIME";
            internal const string WS_ST_DISABLE_SUPPRESS = "WS_ST_DISABLE_SUPPRESS";
            internal const string WS_ST_SUPPRESS_DUPLICATES = "WS_ST_SUPPRESS_DUPLICATES";
            internal const string WS_ST_PRINT_DUPLICATES = "WS_ST_PRINT_DUPLICATES";
            internal const string WS_ST_BODY_SECTION_LINES = "WS_ST_BODY_SECTION_LINES";
            internal const string WS_ST_BODY_SUPPRESS_LINES = "WS_ST_BODY_SUPPRESS_LINES";
            internal const string WS_ST_GR_COUNTER = "WS_ST_GR_COUNTER";
            internal const string WS_ST_PAGE_SUPPRESS = "WS_ST_PAGE_SUPPRESS";
            internal const string WS_ST_PAGE_SUPPRESS_AFTER = "WS_ST_PAGE_SUPPRESS_AFTER";
            internal const string WS_ST_PAGE_DTL_LINES = "WS_ST_PAGE_DTL_LINES";
            internal const string WS_ST_CURRENTLY_WRAPPING = "WS_ST_CURRENTLY_WRAPPING";
            internal const string WS_ST_CUR_PRINTING_PAGE_HDR = "WS_ST_CUR_PRINTING_PAGE_HDR";
            internal const string ST_EDIT_PATTERN_OBJ31 = "ST_EDIT_PATTERN_OBJ31";
            internal const string ST_EDIT_PATTERN_OBJ32 = "ST_EDIT_PATTERN_OBJ32";
            internal const string ST_EDIT_PATTERN_OBJ33 = "ST_EDIT_PATTERN_OBJ33";
            internal const string ST_EDIT_PATTERN_OBJ34 = "ST_EDIT_PATTERN_OBJ34";
            internal const string ST_EDIT_PATTERN_OBJ35 = "ST_EDIT_PATTERN_OBJ35";
            internal const string ST_EDIT_PATTERN_OBJ36 = "ST_EDIT_PATTERN_OBJ36";
            internal const string ST_EDIT_PATTERN_OBJ37 = "ST_EDIT_PATTERN_OBJ37";
            internal const string ST_EDIT_PATTERN_OBJ38 = "ST_EDIT_PATTERN_OBJ38";
            internal const string ST_EDIT_PATTERN_OBJ39 = "ST_EDIT_PATTERN_OBJ39";
            internal const string ST_EDIT_PATTERN_OBJ40 = "ST_EDIT_PATTERN_OBJ40";
            internal const string ST_EDIT_PATTERN_OBJ41 = "ST_EDIT_PATTERN_OBJ41";
            internal const string ST_EDIT_PATTERN_OBJ4 = "ST_EDIT_PATTERN_OBJ4";
            internal const string ST_EDIT_PATTERN_OBJ5 = "ST_EDIT_PATTERN_OBJ5";
            internal const string ST_EDIT_PATTERN_OBJ6 = "ST_EDIT_PATTERN_OBJ6";
            internal const string ST_EDIT_PATTERN_OBJ7 = "ST_EDIT_PATTERN_OBJ7";
            internal const string ST_EDIT_PATTERN_OBJ8 = "ST_EDIT_PATTERN_OBJ8";
            internal const string ST_EDIT_PATTERN_OBJ9 = "ST_EDIT_PATTERN_OBJ9";
            internal const string ST_EDIT_PATTERN_OBJ10 = "ST_EDIT_PATTERN_OBJ10";
            internal const string ST_EDIT_PATTERN_OBJ11 = "ST_EDIT_PATTERN_OBJ11";
            internal const string ST_EDIT_PATTERN_OBJ12 = "ST_EDIT_PATTERN_OBJ12";
            internal const string ST_EDIT_PATTERN_OBJ13 = "ST_EDIT_PATTERN_OBJ13";
            internal const string ST_EDIT_PATTERN_OBJ14 = "ST_EDIT_PATTERN_OBJ14";
            internal const string ST_DTL_LINE_SECTION = "ST_DTL_LINE_SECTION";
            internal const string ST_DTL_LINE_BEFORE_SPACE = "ST_DTL_LINE_BEFORE_SPACE";
            internal const string ST_DTL_LINE_AFTER_SPACING = "ST_DTL_LINE_AFTER_SPACING";
            internal const string ST_DTL_LINE_RESETPG_AFTER = "ST_DTL_LINE_RESETPG_AFTER";
            internal const string ST_DTL_LINE_KEEP_TOGETHER = "ST_DTL_LINE_KEEP_TOGETHER";
            internal const string ST_DTL_LINE_SUPPRSS_BLANK = "ST_DTL_LINE_SUPPRSS_BLANK";
            internal const string ST_DTL_LINE_PRINT_ATBOTTM = "ST_DTL_LINE_PRINT_ATBOTTM";
            internal const string ST_DTL_LINE_KEEP_WITHNEXT = "ST_DTL_LINE_KEEP_WITHNEXT";
            internal const string ST_DTL_LINE_BEFORE_PG_BRK = "ST_DTL_LINE_BEFORE_PG_BRK";
            internal const string ST_DTL_LINE_AFTER_PG_BRK = "ST_DTL_LINE_AFTER_PG_BRK";
            internal const string ST_DTL_LINE_PRINT_FLAG = "ST_DTL_LINE_PRINT_FLAG";
            internal const string ST_DTL_LINE_0 = "ST_DTL_LINE_0";
            internal const string ST_DTL_LINE_0_A_OBJ1 = "ST_DTL_LINE_0_A_OBJ1";
            internal const string ST_DTL_LINE_1 = "ST_DTL_LINE_1";
            internal const string ST_DTL_LINE_1_A_OBJ2 = "ST_DTL_LINE_1_A_OBJ2";
            internal const string ST_DTL_LINE_1_A_OBJ31 = "ST_DTL_LINE_1_A_OBJ31";
            internal const string ST_DTL_SUPRES_1_A_OBJ31 = "ST_DTL_SUPRES_1_A_OBJ31";
            internal const string ST_DTL_LINE_1_A_OBJ32 = "ST_DTL_LINE_1_A_OBJ32";
            internal const string ST_DTL_SUPRES_1_A_OBJ32 = "ST_DTL_SUPRES_1_A_OBJ32";
            internal const string ST_DTL_LINE_1_A_OBJ33 = "ST_DTL_LINE_1_A_OBJ33";
            internal const string ST_DTL_SUPRES_1_A_OBJ33 = "ST_DTL_SUPRES_1_A_OBJ33";
            internal const string ST_DTL_LINE_1_A_OBJ34 = "ST_DTL_LINE_1_A_OBJ34";
            internal const string ST_DTL_SUPRES_1_A_OBJ34 = "ST_DTL_SUPRES_1_A_OBJ34";
            internal const string ST_DTL_LINE_1_A_OBJ35 = "ST_DTL_LINE_1_A_OBJ35";
            internal const string ST_DTL_SUPRES_1_A_OBJ35 = "ST_DTL_SUPRES_1_A_OBJ35";
            internal const string ST_DTL_LINE_1_A_OBJ36 = "ST_DTL_LINE_1_A_OBJ36";
            internal const string ST_DTL_SUPRES_1_A_OBJ36 = "ST_DTL_SUPRES_1_A_OBJ36";
            internal const string ST_DTL_LINE_1_A_OBJ37 = "ST_DTL_LINE_1_A_OBJ37";
            internal const string ST_DTL_SUPRES_1_A_OBJ37 = "ST_DTL_SUPRES_1_A_OBJ37";
            internal const string ST_DTL_LINE_1_A_OBJ38 = "ST_DTL_LINE_1_A_OBJ38";
            internal const string ST_DTL_SUPRES_1_A_OBJ38 = "ST_DTL_SUPRES_1_A_OBJ38";
            internal const string ST_DTL_LINE_1_A_OBJ39 = "ST_DTL_LINE_1_A_OBJ39";
            internal const string ST_DTL_SUPRES_1_A_OBJ39 = "ST_DTL_SUPRES_1_A_OBJ39";
            internal const string ST_DTL_LINE_1_A_OBJ40 = "ST_DTL_LINE_1_A_OBJ40";
            internal const string ST_DTL_SUPRES_1_A_OBJ40 = "ST_DTL_SUPRES_1_A_OBJ40";
            internal const string ST_DTL_LINE_1_A_OBJ41 = "ST_DTL_LINE_1_A_OBJ41";
            internal const string ST_DTL_SUPRES_1_A_OBJ41 = "ST_DTL_SUPRES_1_A_OBJ41";
            internal const string ST_DTL_LINE_2 = "ST_DTL_LINE_2";
            internal const string ST_DTL_LINE_2_A_OBJ3 = "ST_DTL_LINE_2_A_OBJ3";
            internal const string ST_DTL_LINE_2_A_OBJ4 = "ST_DTL_LINE_2_A_OBJ4";
            internal const string ST_DTL_SUPRES_2_A_OBJ4 = "ST_DTL_SUPRES_2_A_OBJ4";
            internal const string ST_DTL_LINE_2_A_OBJ5 = "ST_DTL_LINE_2_A_OBJ5";
            internal const string ST_DTL_SUPRES_2_A_OBJ5 = "ST_DTL_SUPRES_2_A_OBJ5";
            internal const string ST_DTL_LINE_2_A_OBJ6 = "ST_DTL_LINE_2_A_OBJ6";
            internal const string ST_DTL_SUPRES_2_A_OBJ6 = "ST_DTL_SUPRES_2_A_OBJ6";
            internal const string ST_DTL_LINE_2_A_OBJ7 = "ST_DTL_LINE_2_A_OBJ7";
            internal const string ST_DTL_SUPRES_2_A_OBJ7 = "ST_DTL_SUPRES_2_A_OBJ7";
            internal const string ST_DTL_LINE_2_A_OBJ8 = "ST_DTL_LINE_2_A_OBJ8";
            internal const string ST_DTL_SUPRES_2_A_OBJ8 = "ST_DTL_SUPRES_2_A_OBJ8";
            internal const string ST_DTL_LINE_2_A_OBJ9 = "ST_DTL_LINE_2_A_OBJ9";
            internal const string ST_DTL_SUPRES_2_A_OBJ9 = "ST_DTL_SUPRES_2_A_OBJ9";
            internal const string ST_DTL_LINE_2_A_OBJ10 = "ST_DTL_LINE_2_A_OBJ10";
            internal const string ST_DTL_SUPRES_2_A_OBJ10 = "ST_DTL_SUPRES_2_A_OBJ10";
            internal const string ST_DTL_LINE_2_A_OBJ11 = "ST_DTL_LINE_2_A_OBJ11";
            internal const string ST_DTL_SUPRES_2_A_OBJ11 = "ST_DTL_SUPRES_2_A_OBJ11";
            internal const string ST_DTL_LINE_2_A_OBJ12 = "ST_DTL_LINE_2_A_OBJ12";
            internal const string ST_DTL_SUPRES_2_A_OBJ12 = "ST_DTL_SUPRES_2_A_OBJ12";
            internal const string ST_DTL_LINE_2_A_OBJ13 = "ST_DTL_LINE_2_A_OBJ13";
            internal const string ST_DTL_SUPRES_2_A_OBJ13 = "ST_DTL_SUPRES_2_A_OBJ13";
            internal const string ST_DTL_LINE_2_A_OBJ14 = "ST_DTL_LINE_2_A_OBJ14";
            internal const string ST_DTL_SUPRES_2_A_OBJ14 = "ST_DTL_SUPRES_2_A_OBJ14";
            internal const string ST_DTL_LINE_3 = "ST_DTL_LINE_3";
            internal const string ST_RPT_FTR_SECTION = "ST_RPT_FTR_SECTION";
            internal const string ST_RPT_FTR_BEFORE_SPACE = "ST_RPT_FTR_BEFORE_SPACE";
            internal const string ST_RPT_FTR_AFTER_SPACING = "ST_RPT_FTR_AFTER_SPACING";
            internal const string ST_RPT_FTR_RESETPG_AFTER = "ST_RPT_FTR_RESETPG_AFTER";
            internal const string ST_RPT_FTR_KEEP_TOGETHER = "ST_RPT_FTR_KEEP_TOGETHER";
            internal const string ST_RPT_FTR_SUPPRSS_BLANK = "ST_RPT_FTR_SUPPRSS_BLANK";
            internal const string ST_RPT_FTR_PRINT_ATBOTTM = "ST_RPT_FTR_PRINT_ATBOTTM";
            internal const string ST_RPT_FTR_KEEP_WITHNEXT = "ST_RPT_FTR_KEEP_WITHNEXT";
            internal const string ST_RPT_FTR_BEFORE_PG_BRK = "ST_RPT_FTR_BEFORE_PG_BRK";
            internal const string ST_RPT_FTR_AFTER_PG_BRK = "ST_RPT_FTR_AFTER_PG_BRK";
            internal const string ST_RPT_FTR_PRINT_FLAG = "ST_RPT_FTR_PRINT_FLAG";
            internal const string ST_RPT_FTR_0 = "ST_RPT_FTR_0";
            internal const string ST_RPT_FTR_1 = "ST_RPT_FTR_1";
            internal const string ST_PAGE_HDR_SECTION = "ST_PAGE_HDR_SECTION";
            internal const string ST_PAGE_HDR_BEFORE_SPACE = "ST_PAGE_HDR_BEFORE_SPACE";
            internal const string ST_PAGE_HDR_AFTER_SPACING = "ST_PAGE_HDR_AFTER_SPACING";
            internal const string ST_PAGE_HDR_RESETPG_AFTER = "ST_PAGE_HDR_RESETPG_AFTER";
            internal const string ST_PAGE_HDR_KEEP_TOGETHER = "ST_PAGE_HDR_KEEP_TOGETHER";
            internal const string ST_PAGE_HDR_SUPPRSS_BLANK = "ST_PAGE_HDR_SUPPRSS_BLANK";
            internal const string ST_PAGE_HDR_PRINT_ATBOTTM = "ST_PAGE_HDR_PRINT_ATBOTTM";
            internal const string ST_PAGE_HDR_KEEP_WITHNEXT = "ST_PAGE_HDR_KEEP_WITHNEXT";
            internal const string ST_PAGE_HDR_BEFORE_PG_BRK = "ST_PAGE_HDR_BEFORE_PG_BRK";
            internal const string ST_PAGE_HDR_AFTER_PG_BRK = "ST_PAGE_HDR_AFTER_PG_BRK";
            internal const string ST_PAGE_HDR_PRINT_FLAG = "ST_PAGE_HDR_PRINT_FLAG";
            internal const string ST_PAGE_HDR_0 = "ST_PAGE_HDR_0";
            internal const string ST_PAGE_HDR_0_P_OBJ19 = "ST_PAGE_HDR_0_P_OBJ19";
            internal const string ST_PAGE_HDR_1 = "ST_PAGE_HDR_1";
            internal const string ST_PAGE_HDR_1_D_OBJ21 = "ST_PAGE_HDR_1_D_OBJ21";
            internal const string ST_PAGE_HDR_2 = "ST_PAGE_HDR_2";
            internal const string ST_PAGE_HDR_2_T_OBJ24 = "ST_PAGE_HDR_2_T_OBJ24";
            internal const string ST_PAGE_HDR_3 = "ST_PAGE_HDR_3";
            internal const string ST_PAGE_HDR_4 = "ST_PAGE_HDR_4";
            internal const string ST_PAGE_HDR_5 = "ST_PAGE_HDR_5";
            internal const string ST_PAGE_HDR_5_A_OBJ27 = "ST_PAGE_HDR_5_A_OBJ27";
            internal const string ST_PAGE_HDR_6 = "ST_PAGE_HDR_6";
            internal const string ST_PAGE_HDR_7 = "ST_PAGE_HDR_7";
            internal const string ST_PAGE_HDR_8 = "ST_PAGE_HDR_8";
            internal const string ST_PAGE_HDR_9 = "ST_PAGE_HDR_9";
            internal const string SS_WORK_FIELDS = "SS_WORK_FIELDS";
            internal const string WS_SS_CNTL_HDR_FLAG = "WS_SS_CNTL_HDR_FLAG";
            internal const string WS_SS_CNTL_HDR = "WS_SS_CNTL_HDR";
            internal const string WS_SS_CNTL_FTR_FLAG = "WS_SS_CNTL_FTR_FLAG";
            internal const string WS_SS_CNTL_FTR = "WS_SS_CNTL_FTR";
            internal const string WS_SS_RPT_FTR_FLAG = "WS_SS_RPT_FTR_FLAG";
            internal const string WS_SS_RPT_FTR = "WS_SS_RPT_FTR";
            internal const string WS_SS_DTL_LINE_QT = "WS_SS_DTL_LINE_QT";
            internal const string WS_SS_PG_HDR_LINE_QT = "WS_SS_PG_HDR_LINE_QT";
            internal const string WS_SS_PG_FTR_LINE_QT = "WS_SS_PG_FTR_LINE_QT";
            internal const string WS_SS_RPT_HDR_LINE_QT = "WS_SS_RPT_HDR_LINE_QT";
            internal const string WS_SS_RPT_FTR_LINE_QT = "WS_SS_RPT_FTR_LINE_QT";
            internal const string WS_SS_LINE_SPACING = "WS_SS_LINE_SPACING";
            internal const string WS_SS_RPT_TYPE_CD = "WS_SS_RPT_TYPE_CD";
            internal const string WS_SS_SUMMARY_RPT_REQUESTED = "WS_SS_SUMMARY_RPT_REQUESTED";
            internal const string WS_SS_DTL_RPT_REQUESTED = "WS_SS_DTL_RPT_REQUESTED";
            internal const string WS_SS_SECTION_PROCESSING_IND = "WS_SS_SECTION_PROCESSING_IND";
            internal const string WS_SS_RPT_HDR_IS_PROCESSED = "WS_SS_RPT_HDR_IS_PROCESSED";
            internal const string WS_SS_RPT_FTR_IS_PROCESSED = "WS_SS_RPT_FTR_IS_PROCESSED";
            internal const string WS_SS_PG_HDR_IS_PROCESSED = "WS_SS_PG_HDR_IS_PROCESSED";
            internal const string WS_SS_BODY_IS_PROCESSED = "WS_SS_BODY_IS_PROCESSED";
            internal const string WS_SS_KEEP_DTL_TOGETHER_FG = "WS_SS_KEEP_DTL_TOGETHER_FG";
            internal const string WS_SS_PRINT_PG_BRK_SPACING = "WS_SS_PRINT_PG_BRK_SPACING";
            internal const string WS_SS_PRINT_PG_BRK_LINE = "WS_SS_PRINT_PG_BRK_LINE";
            internal const string WS_SS_PRINT_RPT_FTR_LINE = "WS_SS_PRINT_RPT_FTR_LINE";
            internal const string WS_SS_PG_BRK_FLAG = "WS_SS_PG_BRK_FLAG";
            internal const string WS_SS_CUR_RPT_HDR_LINE_NUM = "WS_SS_CUR_RPT_HDR_LINE_NUM";
            internal const string WS_SS_CUR_RPT_FTR_LINE_NUM = "WS_SS_CUR_RPT_FTR_LINE_NUM";
            internal const string WS_SS_FIRST_TIME_FLAG = "WS_SS_FIRST_TIME_FLAG";
            internal const string WS_SS_FIRST_TIME = "WS_SS_FIRST_TIME";
            internal const string WS_SS_DISABLE_SUPPRESS = "WS_SS_DISABLE_SUPPRESS";
            internal const string WS_SS_SUPPRESS_DUPLICATES = "WS_SS_SUPPRESS_DUPLICATES";
            internal const string WS_SS_PRINT_DUPLICATES = "WS_SS_PRINT_DUPLICATES";
            internal const string WS_SS_BODY_SECTION_LINES = "WS_SS_BODY_SECTION_LINES";
            internal const string WS_SS_BODY_SUPPRESS_LINES = "WS_SS_BODY_SUPPRESS_LINES";
            internal const string WS_SS_GR_COUNTER = "WS_SS_GR_COUNTER";
            internal const string WS_SS_PAGE_SUPPRESS = "WS_SS_PAGE_SUPPRESS";
            internal const string WS_SS_PAGE_SUPPRESS_AFTER = "WS_SS_PAGE_SUPPRESS_AFTER";
            internal const string WS_SS_PAGE_DTL_LINES = "WS_SS_PAGE_DTL_LINES";
            internal const string WS_SS_CURRENTLY_WRAPPING = "WS_SS_CURRENTLY_WRAPPING";
            internal const string WS_SS_CUR_PRINTING_PAGE_HDR = "WS_SS_CUR_PRINTING_PAGE_HDR";
            internal const string SS_EDIT_PATTERN_OBJ33 = "SS_EDIT_PATTERN_OBJ33";
            internal const string SS_EDIT_PATTERN_OBJ34 = "SS_EDIT_PATTERN_OBJ34";
            internal const string SS_EDIT_PATTERN_OBJ35 = "SS_EDIT_PATTERN_OBJ35";
            internal const string SS_EDIT_PATTERN_OBJ36 = "SS_EDIT_PATTERN_OBJ36";
            internal const string SS_EDIT_PATTERN_OBJ37 = "SS_EDIT_PATTERN_OBJ37";
            internal const string SS_EDIT_PATTERN_OBJ38 = "SS_EDIT_PATTERN_OBJ38";
            internal const string SS_EDIT_PATTERN_OBJ39 = "SS_EDIT_PATTERN_OBJ39";
            internal const string SS_EDIT_PATTERN_OBJ40 = "SS_EDIT_PATTERN_OBJ40";
            internal const string SS_EDIT_PATTERN_OBJ43 = "SS_EDIT_PATTERN_OBJ43";
            internal const string SS_EDIT_PATTERN_OBJ41 = "SS_EDIT_PATTERN_OBJ41";
            internal const string SS_EDIT_PATTERN_OBJ42 = "SS_EDIT_PATTERN_OBJ42";
            internal const string SS_EDIT_PATTERN_OBJ4 = "SS_EDIT_PATTERN_OBJ4";
            internal const string SS_EDIT_PATTERN_OBJ5 = "SS_EDIT_PATTERN_OBJ5";
            internal const string SS_EDIT_PATTERN_OBJ6 = "SS_EDIT_PATTERN_OBJ6";
            internal const string SS_EDIT_PATTERN_OBJ7 = "SS_EDIT_PATTERN_OBJ7";
            internal const string SS_EDIT_PATTERN_OBJ8 = "SS_EDIT_PATTERN_OBJ8";
            internal const string SS_EDIT_PATTERN_OBJ9 = "SS_EDIT_PATTERN_OBJ9";
            internal const string SS_EDIT_PATTERN_OBJ10 = "SS_EDIT_PATTERN_OBJ10";
            internal const string SS_EDIT_PATTERN_OBJ11 = "SS_EDIT_PATTERN_OBJ11";
            internal const string SS_EDIT_PATTERN_OBJ12 = "SS_EDIT_PATTERN_OBJ12";
            internal const string SS_EDIT_PATTERN_OBJ13 = "SS_EDIT_PATTERN_OBJ13";
            internal const string SS_EDIT_PATTERN_OBJ14 = "SS_EDIT_PATTERN_OBJ14";
            internal const string SS_DTL_LINE_SECTION = "SS_DTL_LINE_SECTION";
            internal const string SS_DTL_LINE_BEFORE_SPACE = "SS_DTL_LINE_BEFORE_SPACE";
            internal const string SS_DTL_LINE_AFTER_SPACING = "SS_DTL_LINE_AFTER_SPACING";
            internal const string SS_DTL_LINE_RESETPG_AFTER = "SS_DTL_LINE_RESETPG_AFTER";
            internal const string SS_DTL_LINE_KEEP_TOGETHER = "SS_DTL_LINE_KEEP_TOGETHER";
            internal const string SS_DTL_LINE_SUPPRSS_BLANK = "SS_DTL_LINE_SUPPRSS_BLANK";
            internal const string SS_DTL_LINE_PRINT_ATBOTTM = "SS_DTL_LINE_PRINT_ATBOTTM";
            internal const string SS_DTL_LINE_KEEP_WITHNEXT = "SS_DTL_LINE_KEEP_WITHNEXT";
            internal const string SS_DTL_LINE_BEFORE_PG_BRK = "SS_DTL_LINE_BEFORE_PG_BRK";
            internal const string SS_DTL_LINE_AFTER_PG_BRK = "SS_DTL_LINE_AFTER_PG_BRK";
            internal const string SS_DTL_LINE_PRINT_FLAG = "SS_DTL_LINE_PRINT_FLAG";
            internal const string SS_DTL_LINE_0 = "SS_DTL_LINE_0";
            internal const string SS_DTL_LINE_0_A_OBJ1 = "SS_DTL_LINE_0_A_OBJ1";
            internal const string SS_DTL_LINE_1 = "SS_DTL_LINE_1";
            internal const string SS_DTL_LINE_1_A_OBJ2 = "SS_DTL_LINE_1_A_OBJ2";
            internal const string SS_DTL_LINE_1_A_OBJ33 = "SS_DTL_LINE_1_A_OBJ33";
            internal const string SS_DTL_SUPRES_1_A_OBJ33 = "SS_DTL_SUPRES_1_A_OBJ33";
            internal const string SS_DTL_LINE_1_A_OBJ34 = "SS_DTL_LINE_1_A_OBJ34";
            internal const string SS_DTL_SUPRES_1_A_OBJ34 = "SS_DTL_SUPRES_1_A_OBJ34";
            internal const string SS_DTL_LINE_1_A_OBJ35 = "SS_DTL_LINE_1_A_OBJ35";
            internal const string SS_DTL_SUPRES_1_A_OBJ35 = "SS_DTL_SUPRES_1_A_OBJ35";
            internal const string SS_DTL_LINE_1_A_OBJ36 = "SS_DTL_LINE_1_A_OBJ36";
            internal const string SS_DTL_SUPRES_1_A_OBJ36 = "SS_DTL_SUPRES_1_A_OBJ36";
            internal const string SS_DTL_LINE_1_A_OBJ37 = "SS_DTL_LINE_1_A_OBJ37";
            internal const string SS_DTL_SUPRES_1_A_OBJ37 = "SS_DTL_SUPRES_1_A_OBJ37";
            internal const string SS_DTL_LINE_1_A_OBJ38 = "SS_DTL_LINE_1_A_OBJ38";
            internal const string SS_DTL_SUPRES_1_A_OBJ38 = "SS_DTL_SUPRES_1_A_OBJ38";
            internal const string SS_DTL_LINE_1_A_OBJ39 = "SS_DTL_LINE_1_A_OBJ39";
            internal const string SS_DTL_SUPRES_1_A_OBJ39 = "SS_DTL_SUPRES_1_A_OBJ39";
            internal const string SS_DTL_LINE_1_A_OBJ40 = "SS_DTL_LINE_1_A_OBJ40";
            internal const string SS_DTL_SUPRES_1_A_OBJ40 = "SS_DTL_SUPRES_1_A_OBJ40";
            internal const string SS_DTL_LINE_1_A_OBJ43 = "SS_DTL_LINE_1_A_OBJ43";
            internal const string SS_DTL_SUPRES_1_A_OBJ43 = "SS_DTL_SUPRES_1_A_OBJ43";
            internal const string SS_DTL_LINE_1_A_OBJ41 = "SS_DTL_LINE_1_A_OBJ41";
            internal const string SS_DTL_SUPRES_1_A_OBJ41 = "SS_DTL_SUPRES_1_A_OBJ41";
            internal const string SS_DTL_LINE_1_A_OBJ42 = "SS_DTL_LINE_1_A_OBJ42";
            internal const string SS_DTL_SUPRES_1_A_OBJ42 = "SS_DTL_SUPRES_1_A_OBJ42";
            internal const string SS_DTL_LINE_2 = "SS_DTL_LINE_2";
            internal const string SS_DTL_LINE_2_A_OBJ3 = "SS_DTL_LINE_2_A_OBJ3";
            internal const string SS_DTL_LINE_2_A_OBJ4 = "SS_DTL_LINE_2_A_OBJ4";
            internal const string SS_DTL_SUPRES_2_A_OBJ4 = "SS_DTL_SUPRES_2_A_OBJ4";
            internal const string SS_DTL_LINE_2_A_OBJ5 = "SS_DTL_LINE_2_A_OBJ5";
            internal const string SS_DTL_SUPRES_2_A_OBJ5 = "SS_DTL_SUPRES_2_A_OBJ5";
            internal const string SS_DTL_LINE_2_A_OBJ6 = "SS_DTL_LINE_2_A_OBJ6";
            internal const string SS_DTL_SUPRES_2_A_OBJ6 = "SS_DTL_SUPRES_2_A_OBJ6";
            internal const string SS_DTL_LINE_2_A_OBJ7 = "SS_DTL_LINE_2_A_OBJ7";
            internal const string SS_DTL_SUPRES_2_A_OBJ7 = "SS_DTL_SUPRES_2_A_OBJ7";
            internal const string SS_DTL_LINE_2_A_OBJ8 = "SS_DTL_LINE_2_A_OBJ8";
            internal const string SS_DTL_SUPRES_2_A_OBJ8 = "SS_DTL_SUPRES_2_A_OBJ8";
            internal const string SS_DTL_LINE_2_A_OBJ9 = "SS_DTL_LINE_2_A_OBJ9";
            internal const string SS_DTL_SUPRES_2_A_OBJ9 = "SS_DTL_SUPRES_2_A_OBJ9";
            internal const string SS_DTL_LINE_2_A_OBJ10 = "SS_DTL_LINE_2_A_OBJ10";
            internal const string SS_DTL_SUPRES_2_A_OBJ10 = "SS_DTL_SUPRES_2_A_OBJ10";
            internal const string SS_DTL_LINE_2_A_OBJ11 = "SS_DTL_LINE_2_A_OBJ11";
            internal const string SS_DTL_SUPRES_2_A_OBJ11 = "SS_DTL_SUPRES_2_A_OBJ11";
            internal const string SS_DTL_LINE_2_A_OBJ12 = "SS_DTL_LINE_2_A_OBJ12";
            internal const string SS_DTL_SUPRES_2_A_OBJ12 = "SS_DTL_SUPRES_2_A_OBJ12";
            internal const string SS_DTL_LINE_2_A_OBJ13 = "SS_DTL_LINE_2_A_OBJ13";
            internal const string SS_DTL_SUPRES_2_A_OBJ13 = "SS_DTL_SUPRES_2_A_OBJ13";
            internal const string SS_DTL_LINE_2_A_OBJ14 = "SS_DTL_LINE_2_A_OBJ14";
            internal const string SS_DTL_SUPRES_2_A_OBJ14 = "SS_DTL_SUPRES_2_A_OBJ14";
            internal const string SS_DTL_LINE_3 = "SS_DTL_LINE_3";
            internal const string SS_RPT_FTR_SECTION = "SS_RPT_FTR_SECTION";
            internal const string SS_RPT_FTR_BEFORE_SPACE = "SS_RPT_FTR_BEFORE_SPACE";
            internal const string SS_RPT_FTR_AFTER_SPACING = "SS_RPT_FTR_AFTER_SPACING";
            internal const string SS_RPT_FTR_RESETPG_AFTER = "SS_RPT_FTR_RESETPG_AFTER";
            internal const string SS_RPT_FTR_KEEP_TOGETHER = "SS_RPT_FTR_KEEP_TOGETHER";
            internal const string SS_RPT_FTR_SUPPRSS_BLANK = "SS_RPT_FTR_SUPPRSS_BLANK";
            internal const string SS_RPT_FTR_PRINT_ATBOTTM = "SS_RPT_FTR_PRINT_ATBOTTM";
            internal const string SS_RPT_FTR_KEEP_WITHNEXT = "SS_RPT_FTR_KEEP_WITHNEXT";
            internal const string SS_RPT_FTR_BEFORE_PG_BRK = "SS_RPT_FTR_BEFORE_PG_BRK";
            internal const string SS_RPT_FTR_AFTER_PG_BRK = "SS_RPT_FTR_AFTER_PG_BRK";
            internal const string SS_RPT_FTR_PRINT_FLAG = "SS_RPT_FTR_PRINT_FLAG";
            internal const string SS_RPT_FTR_0 = "SS_RPT_FTR_0";
            internal const string SS_RPT_FTR_1 = "SS_RPT_FTR_1";
            internal const string SS_PAGE_HDR_SECTION = "SS_PAGE_HDR_SECTION";
            internal const string SS_PAGE_HDR_BEFORE_SPACE = "SS_PAGE_HDR_BEFORE_SPACE";
            internal const string SS_PAGE_HDR_AFTER_SPACING = "SS_PAGE_HDR_AFTER_SPACING";
            internal const string SS_PAGE_HDR_RESETPG_AFTER = "SS_PAGE_HDR_RESETPG_AFTER";
            internal const string SS_PAGE_HDR_KEEP_TOGETHER = "SS_PAGE_HDR_KEEP_TOGETHER";
            internal const string SS_PAGE_HDR_SUPPRSS_BLANK = "SS_PAGE_HDR_SUPPRSS_BLANK";
            internal const string SS_PAGE_HDR_PRINT_ATBOTTM = "SS_PAGE_HDR_PRINT_ATBOTTM";
            internal const string SS_PAGE_HDR_KEEP_WITHNEXT = "SS_PAGE_HDR_KEEP_WITHNEXT";
            internal const string SS_PAGE_HDR_BEFORE_PG_BRK = "SS_PAGE_HDR_BEFORE_PG_BRK";
            internal const string SS_PAGE_HDR_AFTER_PG_BRK = "SS_PAGE_HDR_AFTER_PG_BRK";
            internal const string SS_PAGE_HDR_PRINT_FLAG = "SS_PAGE_HDR_PRINT_FLAG";
            internal const string SS_PAGE_HDR_0 = "SS_PAGE_HDR_0";
            internal const string SS_PAGE_HDR_0_P_OBJ19 = "SS_PAGE_HDR_0_P_OBJ19";
            internal const string SS_PAGE_HDR_1 = "SS_PAGE_HDR_1";
            internal const string SS_PAGE_HDR_1_D_OBJ21 = "SS_PAGE_HDR_1_D_OBJ21";
            internal const string SS_PAGE_HDR_2 = "SS_PAGE_HDR_2";
            internal const string SS_PAGE_HDR_2_T_OBJ24 = "SS_PAGE_HDR_2_T_OBJ24";
            internal const string SS_PAGE_HDR_3 = "SS_PAGE_HDR_3";
            internal const string SS_PAGE_HDR_4 = "SS_PAGE_HDR_4";
            internal const string SS_PAGE_HDR_5 = "SS_PAGE_HDR_5";
            internal const string SS_PAGE_HDR_5_A_OBJ28 = "SS_PAGE_HDR_5_A_OBJ28";
            internal const string SS_PAGE_HDR_6 = "SS_PAGE_HDR_6";
            internal const string SS_PAGE_HDR_7 = "SS_PAGE_HDR_7";
            internal const string SS_PAGE_HDR_8 = "SS_PAGE_HDR_8";
            internal const string SS_PAGE_HDR_9 = "SS_PAGE_HDR_9";
            internal const string MAIN_WORK_FIELDS = "MAIN_WORK_FIELDS";
            internal const string WS_MAIN_CNTL_HDR_FLAG = "WS_MAIN_CNTL_HDR_FLAG";
            internal const string WS_MAIN_CNTL_HDR = "WS_MAIN_CNTL_HDR";
            internal const string WS_MAIN_CNTL_FTR_FLAG = "WS_MAIN_CNTL_FTR_FLAG";
            internal const string WS_MAIN_CNTL_FTR = "WS_MAIN_CNTL_FTR";
            internal const string WS_MAIN_RPT_FTR_FLAG = "WS_MAIN_RPT_FTR_FLAG";
            internal const string WS_MAIN_RPT_FTR = "WS_MAIN_RPT_FTR";
            internal const string WS_MAIN_DTL_LINE_QT = "WS_MAIN_DTL_LINE_QT";
            internal const string WS_MAIN_PG_HDR_LINE_QT = "WS_MAIN_PG_HDR_LINE_QT";
            internal const string WS_MAIN_PG_FTR_LINE_QT = "WS_MAIN_PG_FTR_LINE_QT";
            internal const string WS_MAIN_RPT_HDR_LINE_QT = "WS_MAIN_RPT_HDR_LINE_QT";
            internal const string WS_MAIN_RPT_FTR_LINE_QT = "WS_MAIN_RPT_FTR_LINE_QT";
            internal const string WS_MAIN_LINE_SPACING = "WS_MAIN_LINE_SPACING";
            internal const string WS_MAIN_RPT_TYPE_CD = "WS_MAIN_RPT_TYPE_CD";
            internal const string WS_MAIN_SUMMARY_RPT_REQUESTED = "WS_MAIN_SUMMARY_RPT_REQUESTED";
            internal const string WS_MAIN_DTL_RPT_REQUESTED = "WS_MAIN_DTL_RPT_REQUESTED";
            internal const string WS_MAIN_SECTION_PROCESSING_IND = "WS_MAIN_SECTION_PROCESSING_IND";
            internal const string WS_MAIN_RPT_HDR_IS_PROCESSED = "WS_MAIN_RPT_HDR_IS_PROCESSED";
            internal const string WS_MAIN_RPT_FTR_IS_PROCESSED = "WS_MAIN_RPT_FTR_IS_PROCESSED";
            internal const string WS_MAIN_PG_HDR_IS_PROCESSED = "WS_MAIN_PG_HDR_IS_PROCESSED";
            internal const string WS_MAIN_BODY_IS_PROCESSED = "WS_MAIN_BODY_IS_PROCESSED";
            internal const string WS_MAIN_KEEP_DTL_TOGETHER_FG = "WS_MAIN_KEEP_DTL_TOGETHER_FG";
            internal const string WS_MAIN_PRINT_PG_BRK_SPACING = "WS_MAIN_PRINT_PG_BRK_SPACING";
            internal const string WS_MAIN_PRINT_PG_BRK_LINE = "WS_MAIN_PRINT_PG_BRK_LINE";
            internal const string WS_MAIN_PRINT_RPT_FTR_LINE = "WS_MAIN_PRINT_RPT_FTR_LINE";
            internal const string WS_MAIN_PG_BRK_FLAG = "WS_MAIN_PG_BRK_FLAG";
            internal const string WS_MAIN_CUR_RPT_HDR_LINE_NUM = "WS_MAIN_CUR_RPT_HDR_LINE_NUM";
            internal const string WS_MAIN_CUR_RPT_FTR_LINE_NUM = "WS_MAIN_CUR_RPT_FTR_LINE_NUM";
            internal const string WS_MAIN_FIRST_TIME_FLAG = "WS_MAIN_FIRST_TIME_FLAG";
            internal const string WS_MAIN_FIRST_TIME = "WS_MAIN_FIRST_TIME";
            internal const string WS_MAIN_DISABLE_SUPPRESS = "WS_MAIN_DISABLE_SUPPRESS";
            internal const string WS_MAIN_SUPPRESS_DUPLICATES = "WS_MAIN_SUPPRESS_DUPLICATES";
            internal const string WS_MAIN_PRINT_DUPLICATES = "WS_MAIN_PRINT_DUPLICATES";
            internal const string WS_MAIN_BODY_SECTION_LINES = "WS_MAIN_BODY_SECTION_LINES";
            internal const string WS_MAIN_BODY_SUPPRESS_LINES = "WS_MAIN_BODY_SUPPRESS_LINES";
            internal const string WS_MAIN_GR_COUNTER = "WS_MAIN_GR_COUNTER";
            internal const string WS_MAIN_PAGE_SUPPRESS = "WS_MAIN_PAGE_SUPPRESS";
            internal const string WS_MAIN_PAGE_SUPPRESS_AFTER = "WS_MAIN_PAGE_SUPPRESS_AFTER";
            internal const string WS_MAIN_PAGE_DTL_LINES = "WS_MAIN_PAGE_DTL_LINES";
            internal const string WS_MAIN_CURRENTLY_WRAPPING = "WS_MAIN_CURRENTLY_WRAPPING";
            internal const string WS_MAIN_CUR_PRINTING_PAGE_HDR = "WS_MAIN_CUR_PRINTING_PAGE_HDR";
            internal const string MAIN_EDIT_PATTERN_OBJ33 = "MAIN_EDIT_PATTERN_OBJ33";
            internal const string MAIN_EDIT_PATTERN_OBJ34 = "MAIN_EDIT_PATTERN_OBJ34";
            internal const string MAIN_EDIT_PATTERN_OBJ35 = "MAIN_EDIT_PATTERN_OBJ35";
            internal const string MAIN_EDIT_PATTERN_OBJ36 = "MAIN_EDIT_PATTERN_OBJ36";
            internal const string MAIN_EDIT_PATTERN_OBJ37 = "MAIN_EDIT_PATTERN_OBJ37";
            internal const string MAIN_EDIT_PATTERN_OBJ38 = "MAIN_EDIT_PATTERN_OBJ38";
            internal const string MAIN_EDIT_PATTERN_OBJ39 = "MAIN_EDIT_PATTERN_OBJ39";
            internal const string MAIN_EDIT_PATTERN_OBJ40 = "MAIN_EDIT_PATTERN_OBJ40";
            internal const string MAIN_EDIT_PATTERN_OBJ41 = "MAIN_EDIT_PATTERN_OBJ41";
            internal const string MAIN_EDIT_PATTERN_OBJ42 = "MAIN_EDIT_PATTERN_OBJ42";
            internal const string MAIN_EDIT_PATTERN_OBJ43 = "MAIN_EDIT_PATTERN_OBJ43";
            internal const string MAIN_EDIT_PATTERN_OBJ4 = "MAIN_EDIT_PATTERN_OBJ4";
            internal const string MAIN_EDIT_PATTERN_OBJ5 = "MAIN_EDIT_PATTERN_OBJ5";
            internal const string MAIN_EDIT_PATTERN_OBJ6 = "MAIN_EDIT_PATTERN_OBJ6";
            internal const string MAIN_EDIT_PATTERN_OBJ7 = "MAIN_EDIT_PATTERN_OBJ7";
            internal const string MAIN_EDIT_PATTERN_OBJ8 = "MAIN_EDIT_PATTERN_OBJ8";
            internal const string MAIN_EDIT_PATTERN_OBJ9 = "MAIN_EDIT_PATTERN_OBJ9";
            internal const string MAIN_EDIT_PATTERN_OBJ10 = "MAIN_EDIT_PATTERN_OBJ10";
            internal const string MAIN_EDIT_PATTERN_OBJ11 = "MAIN_EDIT_PATTERN_OBJ11";
            internal const string MAIN_EDIT_PATTERN_OBJ12 = "MAIN_EDIT_PATTERN_OBJ12";
            internal const string MAIN_EDIT_PATTERN_OBJ13 = "MAIN_EDIT_PATTERN_OBJ13";
            internal const string MAIN_EDIT_PATTERN_OBJ14 = "MAIN_EDIT_PATTERN_OBJ14";
            internal const string MAIN_DTL_LINE_SECTION = "MAIN_DTL_LINE_SECTION";
            internal const string MAIN_DTL_LINE_BEFORE_SPACE = "MAIN_DTL_LINE_BEFORE_SPACE";
            internal const string MAIN_DTL_LINE_AFTER_SPACING = "MAIN_DTL_LINE_AFTER_SPACING";
            internal const string MAIN_DTL_LINE_RESETPG_AFTER = "MAIN_DTL_LINE_RESETPG_AFTER";
            internal const string MAIN_DTL_LINE_KEEP_TOGETHER = "MAIN_DTL_LINE_KEEP_TOGETHER";
            internal const string MAIN_DTL_LINE_SUPPRSS_BLANK = "MAIN_DTL_LINE_SUPPRSS_BLANK";
            internal const string MAIN_DTL_LINE_PRINT_ATBOTTM = "MAIN_DTL_LINE_PRINT_ATBOTTM";
            internal const string MAIN_DTL_LINE_KEEP_WITHNEXT = "MAIN_DTL_LINE_KEEP_WITHNEXT";
            internal const string MAIN_DTL_LINE_BEFORE_PG_BRK = "MAIN_DTL_LINE_BEFORE_PG_BRK";
            internal const string MAIN_DTL_LINE_AFTER_PG_BRK = "MAIN_DTL_LINE_AFTER_PG_BRK";
            internal const string MAIN_DTL_LINE_PRINT_FLAG = "MAIN_DTL_LINE_PRINT_FLAG";
            internal const string MAIN_DTL_LINE_0 = "MAIN_DTL_LINE_0";
            internal const string MAIN_DTL_LINE_0_A_OBJ1 = "MAIN_DTL_LINE_0_A_OBJ1";
            internal const string MAIN_DTL_LINE_1 = "MAIN_DTL_LINE_1";
            internal const string MAIN_DTL_LINE_1_A_OBJ2 = "MAIN_DTL_LINE_1_A_OBJ2";
            internal const string MAIN_DTL_LINE_1_A_OBJ33 = "MAIN_DTL_LINE_1_A_OBJ33";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ33 = "MAIN_DTL_SUPRES_1_A_OBJ33";
            internal const string MAIN_DTL_LINE_1_A_OBJ34 = "MAIN_DTL_LINE_1_A_OBJ34";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ34 = "MAIN_DTL_SUPRES_1_A_OBJ34";
            internal const string MAIN_DTL_LINE_1_A_OBJ35 = "MAIN_DTL_LINE_1_A_OBJ35";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ35 = "MAIN_DTL_SUPRES_1_A_OBJ35";
            internal const string MAIN_DTL_LINE_1_A_OBJ36 = "MAIN_DTL_LINE_1_A_OBJ36";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ36 = "MAIN_DTL_SUPRES_1_A_OBJ36";
            internal const string MAIN_DTL_LINE_1_A_OBJ37 = "MAIN_DTL_LINE_1_A_OBJ37";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ37 = "MAIN_DTL_SUPRES_1_A_OBJ37";
            internal const string MAIN_DTL_LINE_1_A_OBJ38 = "MAIN_DTL_LINE_1_A_OBJ38";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ38 = "MAIN_DTL_SUPRES_1_A_OBJ38";
            internal const string MAIN_DTL_LINE_1_A_OBJ39 = "MAIN_DTL_LINE_1_A_OBJ39";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ39 = "MAIN_DTL_SUPRES_1_A_OBJ39";
            internal const string MAIN_DTL_LINE_1_A_OBJ40 = "MAIN_DTL_LINE_1_A_OBJ40";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ40 = "MAIN_DTL_SUPRES_1_A_OBJ40";
            internal const string MAIN_DTL_LINE_1_A_OBJ41 = "MAIN_DTL_LINE_1_A_OBJ41";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ41 = "MAIN_DTL_SUPRES_1_A_OBJ41";
            internal const string MAIN_DTL_LINE_1_A_OBJ42 = "MAIN_DTL_LINE_1_A_OBJ42";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ42 = "MAIN_DTL_SUPRES_1_A_OBJ42";
            internal const string MAIN_DTL_LINE_1_A_OBJ43 = "MAIN_DTL_LINE_1_A_OBJ43";
            internal const string MAIN_DTL_SUPRES_1_A_OBJ43 = "MAIN_DTL_SUPRES_1_A_OBJ43";
            internal const string MAIN_DTL_LINE_2 = "MAIN_DTL_LINE_2";
            internal const string MAIN_DTL_LINE_2_A_OBJ3 = "MAIN_DTL_LINE_2_A_OBJ3";
            internal const string MAIN_DTL_LINE_2_A_OBJ4 = "MAIN_DTL_LINE_2_A_OBJ4";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ4 = "MAIN_DTL_SUPRES_2_A_OBJ4";
            internal const string MAIN_DTL_LINE_2_A_OBJ5 = "MAIN_DTL_LINE_2_A_OBJ5";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ5 = "MAIN_DTL_SUPRES_2_A_OBJ5";
            internal const string MAIN_DTL_LINE_2_A_OBJ6 = "MAIN_DTL_LINE_2_A_OBJ6";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ6 = "MAIN_DTL_SUPRES_2_A_OBJ6";
            internal const string MAIN_DTL_LINE_2_A_OBJ7 = "MAIN_DTL_LINE_2_A_OBJ7";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ7 = "MAIN_DTL_SUPRES_2_A_OBJ7";
            internal const string MAIN_DTL_LINE_2_A_OBJ8 = "MAIN_DTL_LINE_2_A_OBJ8";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ8 = "MAIN_DTL_SUPRES_2_A_OBJ8";
            internal const string MAIN_DTL_LINE_2_A_OBJ9 = "MAIN_DTL_LINE_2_A_OBJ9";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ9 = "MAIN_DTL_SUPRES_2_A_OBJ9";
            internal const string MAIN_DTL_LINE_2_A_OBJ10 = "MAIN_DTL_LINE_2_A_OBJ10";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ10 = "MAIN_DTL_SUPRES_2_A_OBJ10";
            internal const string MAIN_DTL_LINE_2_A_OBJ11 = "MAIN_DTL_LINE_2_A_OBJ11";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ11 = "MAIN_DTL_SUPRES_2_A_OBJ11";
            internal const string MAIN_DTL_LINE_2_A_OBJ12 = "MAIN_DTL_LINE_2_A_OBJ12";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ12 = "MAIN_DTL_SUPRES_2_A_OBJ12";
            internal const string MAIN_DTL_LINE_2_A_OBJ13 = "MAIN_DTL_LINE_2_A_OBJ13";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ13 = "MAIN_DTL_SUPRES_2_A_OBJ13";
            internal const string MAIN_DTL_LINE_2_A_OBJ14 = "MAIN_DTL_LINE_2_A_OBJ14";
            internal const string MAIN_DTL_SUPRES_2_A_OBJ14 = "MAIN_DTL_SUPRES_2_A_OBJ14";
            internal const string MAIN_DTL_LINE_3 = "MAIN_DTL_LINE_3";
            internal const string MAIN_PAGE_HDR_SECTION = "MAIN_PAGE_HDR_SECTION";
            internal const string MAIN_PAGE_HDR_BEFORE_SPACE = "MAIN_PAGE_HDR_BEFORE_SPACE";
            internal const string MAIN_PAGE_HDR_AFTER_SPACING = "MAIN_PAGE_HDR_AFTER_SPACING";
            internal const string MAIN_PAGE_HDR_RESETPG_AFTER = "MAIN_PAGE_HDR_RESETPG_AFTER";
            internal const string MAIN_PAGE_HDR_KEEP_TOGETHER = "MAIN_PAGE_HDR_KEEP_TOGETHER";
            internal const string MAIN_PAGE_HDR_SUPPRSS_BLANK = "MAIN_PAGE_HDR_SUPPRSS_BLANK";
            internal const string MAIN_PAGE_HDR_PRINT_ATBOTTM = "MAIN_PAGE_HDR_PRINT_ATBOTTM";
            internal const string MAIN_PAGE_HDR_KEEP_WITHNEXT = "MAIN_PAGE_HDR_KEEP_WITHNEXT";
            internal const string MAIN_PAGE_HDR_BEFORE_PG_BRK = "MAIN_PAGE_HDR_BEFORE_PG_BRK";
            internal const string MAIN_PAGE_HDR_AFTER_PG_BRK = "MAIN_PAGE_HDR_AFTER_PG_BRK";
            internal const string MAIN_PAGE_HDR_PRINT_FLAG = "MAIN_PAGE_HDR_PRINT_FLAG";
            internal const string MAIN_PAGE_HDR_0 = "MAIN_PAGE_HDR_0";
            internal const string MAIN_PAGE_HDR_0_P_OBJ26 = "MAIN_PAGE_HDR_0_P_OBJ26";
            internal const string MAIN_PAGE_HDR_1 = "MAIN_PAGE_HDR_1";
            internal const string MAIN_PAGE_HDR_1_D_OBJ30 = "MAIN_PAGE_HDR_1_D_OBJ30";
            internal const string MAIN_PAGE_HDR_2 = "MAIN_PAGE_HDR_2";
            internal const string MAIN_PAGE_HDR_2_T_OBJ31 = "MAIN_PAGE_HDR_2_T_OBJ31";
            internal const string MAIN_PAGE_HDR_3 = "MAIN_PAGE_HDR_3";
            internal const string MAIN_PAGE_HDR_4 = "MAIN_PAGE_HDR_4";
            internal const string MAIN_PAGE_HDR_5 = "MAIN_PAGE_HDR_5";
            internal const string MAIN_PAGE_HDR_5_A_OBJ22 = "MAIN_PAGE_HDR_5_A_OBJ22";
            internal const string MAIN_PAGE_HDR_6 = "MAIN_PAGE_HDR_6";
            internal const string MAIN_PAGE_HDR_7 = "MAIN_PAGE_HDR_7";
            internal const string MAIN_PAGE_HDR_8 = "MAIN_PAGE_HDR_8";
            internal const string MAIN_PAGE_HDR_9 = "MAIN_PAGE_HDR_9";
            internal const string MAIN_PAGE_FTR_SECTION = "MAIN_PAGE_FTR_SECTION";
            internal const string MAIN_PAGE_FTR_BEFORE_SPACE = "MAIN_PAGE_FTR_BEFORE_SPACE";
            internal const string MAIN_PAGE_FTR_AFTER_SPACING = "MAIN_PAGE_FTR_AFTER_SPACING";
            internal const string MAIN_PAGE_FTR_RESETPG_AFTER = "MAIN_PAGE_FTR_RESETPG_AFTER";
            internal const string MAIN_PAGE_FTR_KEEP_TOGETHER = "MAIN_PAGE_FTR_KEEP_TOGETHER";
            internal const string MAIN_PAGE_FTR_SUPPRSS_BLANK = "MAIN_PAGE_FTR_SUPPRSS_BLANK";
            internal const string MAIN_PAGE_FTR_PRINT_ATBOTTM = "MAIN_PAGE_FTR_PRINT_ATBOTTM";
            internal const string MAIN_PAGE_FTR_KEEP_WITHNEXT = "MAIN_PAGE_FTR_KEEP_WITHNEXT";
            internal const string MAIN_PAGE_FTR_BEFORE_PG_BRK = "MAIN_PAGE_FTR_BEFORE_PG_BRK";
            internal const string MAIN_PAGE_FTR_AFTER_PG_BRK = "MAIN_PAGE_FTR_AFTER_PG_BRK";
            internal const string MAIN_PAGE_FTR_PRINT_FLAG = "MAIN_PAGE_FTR_PRINT_FLAG";
            internal const string MAIN_PAGE_FTR_0 = "MAIN_PAGE_FTR_0";
            internal const string MAIN_PAGE_FTR_1 = "MAIN_PAGE_FTR_1";
            internal const string P_IMPORT_EV1 = "P_IMPORT_EV1";
            internal const string P_COLLECTIONS_EXTRACT_ET = "P_COLLECTIONS_EXTRACT_ET";
            internal const string P_COLLECTION_OFFICER_000101MS = "P_COLLECTION_OFFICER_000101MS";
            internal const string P_COLLECTION_OFFICER_0001_001 = "P_COLLECTION_OFFICER_0001_001";
            internal const string P_COLLECTION_OFFICER_000101XX = "P_COLLECTION_OFFICER_000101XX";
            internal const string P_IMPORT_EV2 = "P_IMPORT_EV2";
            internal const string P_REPORT_PARMS_ET = "P_REPORT_PARMS_ET";
            internal const string P_PARM1_0002_002MS = "P_PARM1_0002_002MS";
            internal const string P_PARM1_0002_002 = "P_PARM1_0002_002";
            internal const string P_PARM1_0002_002XX = "P_PARM1_0002_002XX";
            internal const string P_PARM2_0002_003MS = "P_PARM2_0002_003MS";
            internal const string P_PARM2_0002_003 = "P_PARM2_0002_003";
            internal const string P_PARM2_0002_003XX = "P_PARM2_0002_003XX";
            internal const string P_SUBREPORT_CODE_0002_004MS = "P_SUBREPORT_CODE_0002_004MS";
            internal const string P_SUBREPORT_CODE_0002_004 = "P_SUBREPORT_CODE_0002_004";
            internal const string P_SUBREPORT_CODE_0002_004XX = "P_SUBREPORT_CODE_0002_004XX";
            internal const string P_IMPORT_EV3 = "P_IMPORT_EV3";
            internal const string P_REPORT_LITERALS_ET = "P_REPORT_LITERALS_ET";
            internal const string P_SUB_HEADING_1_0003_005MS = "P_SUB_HEADING_1_0003_005MS";
            internal const string P_SUB_HEADING_1_0003_005 = "P_SUB_HEADING_1_0003_005";
            internal const string P_SUB_HEADING_1_0003_005XX = "P_SUB_HEADING_1_0003_005XX";
            internal const string P_SUB_HEADING_2_0003_006MS = "P_SUB_HEADING_2_0003_006MS";
            internal const string P_SUB_HEADING_2_0003_006 = "P_SUB_HEADING_2_0003_006";
            internal const string P_SUB_HEADING_2_0003_006XX = "P_SUB_HEADING_2_0003_006XX";
            internal const string P_SUB_HEADING_3_0003_007MS = "P_SUB_HEADING_3_0003_007MS";
            internal const string P_SUB_HEADING_3_0003_007 = "P_SUB_HEADING_3_0003_007";
            internal const string P_SUB_HEADING_3_0003_007XX = "P_SUB_HEADING_3_0003_007XX";
            internal const string P_IMPORT_TOTAL_EV4 = "P_IMPORT_TOTAL_EV4";
            internal const string P_COLLECTIONS_EXTRACT_ET_d2 = "P_COLLECTIONS_EXTRACT_ET_d2";
            internal const string P_AMOUNT1_0004_008MS = "P_AMOUNT1_0004_008MS";
            internal const string P_AMOUNT1_0004_008 = "P_AMOUNT1_0004_008";
            internal const string P_AMOUNT1_0004_008XX = "P_AMOUNT1_0004_008XX";
            internal const string P_IMPORT_TOTAL_EV5 = "P_IMPORT_TOTAL_EV5";
            internal const string P_IEF_SUPPLIED_ET = "P_IEF_SUPPLIED_ET";
            internal const string P_COUNT_0005_009MS = "P_COUNT_0005_009MS";
            internal const string P_COUNT_0005_009 = "P_COUNT_0005_009";
            internal const string P_COUNT_0005_009XX = "P_COUNT_0005_009XX";
            internal const string P_IMPORT_TAF_TOTAL_EV6 = "P_IMPORT_TAF_TOTAL_EV6";
            internal const string P_COLLECTIONS_EXTRACT_ET_d3 = "P_COLLECTIONS_EXTRACT_ET_d3";
            internal const string P_AMOUNT1_0006_010MS = "P_AMOUNT1_0006_010MS";
            internal const string P_AMOUNT1_0006_010 = "P_AMOUNT1_0006_010";
            internal const string P_AMOUNT1_0006_010XX = "P_AMOUNT1_0006_010XX";
            internal const string P_IMPORT_TAF_TOTAL_EV7 = "P_IMPORT_TAF_TOTAL_EV7";
            internal const string P_IEF_SUPPLIED_ET_d2 = "P_IEF_SUPPLIED_ET_d2";
            internal const string P_COUNT_0007_011MS = "P_COUNT_0007_011MS";
            internal const string P_COUNT_0007_011 = "P_COUNT_0007_011";
            internal const string P_COUNT_0007_011XX = "P_COUNT_0007_011XX";
            internal const string P_IMPORT_TAF_EV8 = "P_IMPORT_TAF_EV8";
            internal const string P_COLLECTIONS_EXTRACT_ET_d4 = "P_COLLECTIONS_EXTRACT_ET_d4";
            internal const string P_AMOUNT1_0008_012MS = "P_AMOUNT1_0008_012MS";
            internal const string P_AMOUNT1_0008_012 = "P_AMOUNT1_0008_012";
            internal const string P_AMOUNT1_0008_012XX = "P_AMOUNT1_0008_012XX";
            internal const string P_IMPORT_TAF_EV9 = "P_IMPORT_TAF_EV9";
            internal const string P_IEF_SUPPLIED_ET_d3 = "P_IEF_SUPPLIED_ET_d3";
            internal const string P_COUNT_0009_013MS = "P_COUNT_0009_013MS";
            internal const string P_COUNT_0009_013 = "P_COUNT_0009_013";
            internal const string P_COUNT_0009_013XX = "P_COUNT_0009_013XX";
            internal const string P_IMPORT_XTAF_EV10 = "P_IMPORT_XTAF_EV10";
            internal const string P_COLLECTIONS_EXTRACT_ET_d5 = "P_COLLECTIONS_EXTRACT_ET_d5";
            internal const string P_AMOUNT1_0010_014MS = "P_AMOUNT1_0010_014MS";
            internal const string P_AMOUNT1_0010_014 = "P_AMOUNT1_0010_014";
            internal const string P_AMOUNT1_0010_014XX = "P_AMOUNT1_0010_014XX";
            internal const string P_IMPORT_XTAF_EV11 = "P_IMPORT_XTAF_EV11";
            internal const string P_IEF_SUPPLIED_ET_d4 = "P_IEF_SUPPLIED_ET_d4";
            internal const string P_COUNT_0011_015MS = "P_COUNT_0011_015MS";
            internal const string P_COUNT_0011_015 = "P_COUNT_0011_015";
            internal const string P_COUNT_0011_015XX = "P_COUNT_0011_015XX";
            internal const string P_IMPORT_TAF_FC_EV12 = "P_IMPORT_TAF_FC_EV12";
            internal const string P_COLLECTIONS_EXTRACT_ET_d6 = "P_COLLECTIONS_EXTRACT_ET_d6";
            internal const string P_AMOUNT1_0012_016MS = "P_AMOUNT1_0012_016MS";
            internal const string P_AMOUNT1_0012_016 = "P_AMOUNT1_0012_016";
            internal const string P_AMOUNT1_0012_016XX = "P_AMOUNT1_0012_016XX";
            internal const string P_IMPORT_TAF_FC_EV13 = "P_IMPORT_TAF_FC_EV13";
            internal const string P_IEF_SUPPLIED_ET_d5 = "P_IEF_SUPPLIED_ET_d5";
            internal const string P_COUNT_0013_017MS = "P_COUNT_0013_017MS";
            internal const string P_COUNT_0013_017 = "P_COUNT_0013_017";
            internal const string P_COUNT_0013_017XX = "P_COUNT_0013_017XX";
            internal const string P_IMPORT_NON_TAF_TOTAL_EV14 = "P_IMPORT_NON_TAF_TOTAL_EV14";
            internal const string P_COLLECTIONS_EXTRACT_ET_d7 = "P_COLLECTIONS_EXTRACT_ET_d7";
            internal const string P_AMOUNT1_0014_018MS = "P_AMOUNT1_0014_018MS";
            internal const string P_AMOUNT1_0014_018 = "P_AMOUNT1_0014_018";
            internal const string P_AMOUNT1_0014_018XX = "P_AMOUNT1_0014_018XX";
            internal const string P_IMPORT_NON_TAF_TOTAL_EV15 = "P_IMPORT_NON_TAF_TOTAL_EV15";
            internal const string P_IEF_SUPPLIED_ET_d6 = "P_IEF_SUPPLIED_ET_d6";
            internal const string P_COUNT_0015_019MS = "P_COUNT_0015_019MS";
            internal const string P_COUNT_0015_019 = "P_COUNT_0015_019";
            internal const string P_COUNT_0015_019XX = "P_COUNT_0015_019XX";
            internal const string P_IMPORT_NA_EV16 = "P_IMPORT_NA_EV16";
            internal const string P_COLLECTIONS_EXTRACT_ET_d8 = "P_COLLECTIONS_EXTRACT_ET_d8";
            internal const string P_AMOUNT1_0016_020MS = "P_AMOUNT1_0016_020MS";
            internal const string P_AMOUNT1_0016_020 = "P_AMOUNT1_0016_020";
            internal const string P_AMOUNT1_0016_020XX = "P_AMOUNT1_0016_020XX";
            internal const string P_IMPORT_NA_EV17 = "P_IMPORT_NA_EV17";
            internal const string P_IEF_SUPPLIED_ET_d7 = "P_IEF_SUPPLIED_ET_d7";
            internal const string P_COUNT_0017_021MS = "P_COUNT_0017_021MS";
            internal const string P_COUNT_0017_021 = "P_COUNT_0017_021";
            internal const string P_COUNT_0017_021XX = "P_COUNT_0017_021XX";
            internal const string P_IMPORT_PA_EV18 = "P_IMPORT_PA_EV18";
            internal const string P_COLLECTIONS_EXTRACT_ET_d9 = "P_COLLECTIONS_EXTRACT_ET_d9";
            internal const string P_AMOUNT1_0018_022MS = "P_AMOUNT1_0018_022MS";
            internal const string P_AMOUNT1_0018_022 = "P_AMOUNT1_0018_022";
            internal const string P_AMOUNT1_0018_022XX = "P_AMOUNT1_0018_022XX";
            internal const string P_IMPORT_PA_EV19 = "P_IMPORT_PA_EV19";
            internal const string P_IEF_SUPPLIED_ET_d8 = "P_IEF_SUPPLIED_ET_d8";
            internal const string P_COUNT_0019_023MS = "P_COUNT_0019_023MS";
            internal const string P_COUNT_0019_023 = "P_COUNT_0019_023";
            internal const string P_COUNT_0019_023XX = "P_COUNT_0019_023XX";
            internal const string P_IMPORT_STATE_ONLY_TOTAL_EV20 = "P_IMPORT_STATE_ONLY_TOTAL_EV20";
            internal const string P_COLLECTIONS_EXTRACT_ET_d10 = "P_COLLECTIONS_EXTRACT_ET_d10";
            internal const string P_AMOUNT1_0020_024MS = "P_AMOUNT1_0020_024MS";
            internal const string P_AMOUNT1_0020_024 = "P_AMOUNT1_0020_024";
            internal const string P_AMOUNT1_0020_024XX = "P_AMOUNT1_0020_024XX";
            internal const string P_IMPORT_STATE_ONLY_TOTAL_EV21 = "P_IMPORT_STATE_ONLY_TOTAL_EV21";
            internal const string P_IEF_SUPPLIED_ET_d9 = "P_IEF_SUPPLIED_ET_d9";
            internal const string P_COUNT_0021_025MS = "P_COUNT_0021_025MS";
            internal const string P_COUNT_0021_025 = "P_COUNT_0021_025";
            internal const string P_COUNT_0021_025XX = "P_COUNT_0021_025XX";
            internal const string P_IMPORT_GA_FC_EV22 = "P_IMPORT_GA_FC_EV22";
            internal const string P_COLLECTIONS_EXTRACT_ET_d11 = "P_COLLECTIONS_EXTRACT_ET_d11";
            internal const string P_AMOUNT1_0022_026MS = "P_AMOUNT1_0022_026MS";
            internal const string P_AMOUNT1_0022_026 = "P_AMOUNT1_0022_026";
            internal const string P_AMOUNT1_0022_026XX = "P_AMOUNT1_0022_026XX";
            internal const string P_IMPORT_GA_FC_EV23 = "P_IMPORT_GA_FC_EV23";
            internal const string P_IEF_SUPPLIED_ET_d10 = "P_IEF_SUPPLIED_ET_d10";
            internal const string P_COUNT_0023_027MS = "P_COUNT_0023_027MS";
            internal const string P_COUNT_0023_027 = "P_COUNT_0023_027";
            internal const string P_COUNT_0023_027XX = "P_COUNT_0023_027XX";
            internal const string P_IMPORT_MHDD_EV24 = "P_IMPORT_MHDD_EV24";
            internal const string P_COLLECTIONS_EXTRACT_ET_d12 = "P_COLLECTIONS_EXTRACT_ET_d12";
            internal const string P_AMOUNT1_0024_028MS = "P_AMOUNT1_0024_028MS";
            internal const string P_AMOUNT1_0024_028 = "P_AMOUNT1_0024_028";
            internal const string P_AMOUNT1_0024_028XX = "P_AMOUNT1_0024_028XX";
            internal const string P_IMPORT_MHDD_EV25 = "P_IMPORT_MHDD_EV25";
            internal const string P_IEF_SUPPLIED_ET_d11 = "P_IEF_SUPPLIED_ET_d11";
            internal const string P_COUNT_0025_029MS = "P_COUNT_0025_029MS";
            internal const string P_COUNT_0025_029 = "P_COUNT_0025_029";
            internal const string P_COUNT_0025_029XX = "P_COUNT_0025_029XX";
            internal const string NUMERIC_EDIT_PATTERNS = "NUMERIC_EDIT_PATTERNS";
            internal const string EP_INTEGER2 = "EP_INTEGER2";
            internal const string EP_INTEGER = "EP_INTEGER";
            internal const string EP_INTEGER_XX = "EP_INTEGER_XX";
            internal const string EP_INTEGER_X = "EP_INTEGER_X";
            internal const string EP_DECIMAL = "EP_DECIMAL";
            internal const string EP_DECIMAL_XX = "EP_DECIMAL_XX";
            internal const string EP_DECIMAL_X = "EP_DECIMAL_X";
            internal const string EP_PRECISION = "EP_PRECISION";
            internal const string EP_SCALE = "EP_SCALE";
            internal const string EP_INP_INDEX = "EP_INP_INDEX";
            internal const string EP_OUT_INDEX = "EP_OUT_INDEX";
            internal const string EP_INDEX = "EP_INDEX";
            internal const string EP_COUNT = "EP_COUNT";
            internal const string EP_COUNT2 = "EP_COUNT2";
            internal const string EP_SIGN = "EP_SIGN";
            internal const string EP_DPOINT_USED = "EP_DPOINT_USED";
            internal const string EP_SIGN_USED = "EP_SIGN_USED";
            internal const string EP_DOLLAR_USED = "EP_DOLLAR_USED";
            internal const string EP_FIRST_DIGIT = "EP_FIRST_DIGIT";
            internal const string EP_ISTHERE_DCML = "EP_ISTHERE_DCML";
            internal const string EP_ISTHERE_V = "EP_ISTHERE_V";
            internal const string EP_INTEGER_LEN = "EP_INTEGER_LEN";
            internal const string EP_SZNUMERIC = "EP_SZNUMERIC";
            internal const string EP_SZNUMERIC_X = "EP_SZNUMERIC_X";
            internal const string EP_FORMATTED_VALUE = "EP_FORMATTED_VALUE";
            internal const string EP_FORMATTED_VALUE_X = "EP_FORMATTED_VALUE_X";
            internal const string EP_EDIT_PATTERN = "EP_EDIT_PATTERN";
            internal const string EP_EDIT_PATTERN_X = "EP_EDIT_PATTERN_X";
            internal const string EP_EDIT_PATTERN_LEN = "EP_EDIT_PATTERN_LEN";
            internal const string EP_SZNUMERIC_LEN = "EP_SZNUMERIC_LEN";
            internal const string EP_STOP = "EP_STOP";
            internal const string EP_CURRENCY_COUNT = "EP_CURRENCY_COUNT";
        }
        #endregion

        #region Direct-access element properties
        public IField WS_FILE_STATUS { get { return GetElementByName<IField>(Names.WS_FILE_STATUS); } }
        public IGroup WORK_FIELDS { get { return GetElementByName<IGroup>(Names.WORK_FIELDS); } }
        public IField WS_STK_CONTROL_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_STK_CONTROL_BRK_FLAG); } }
        public IField WS_STK_SECTION_PROCESSING_IND { get { return GetElementByName<IField>(Names.WS_STK_SECTION_PROCESSING_IND); } }
        public IField WS_VERY_FIRST_WRITE { get { return GetElementByName<IField>(Names.WS_VERY_FIRST_WRITE); } }
        public IField WS_PG_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_PG_BRK_FLAG); } }
        public ICheckField WS_PG_BRK { get { return GetElementByName<ICheckField>(Names.WS_PG_BRK); } }
        public IField WS_PG_BRK_FLAG_SAVE { get { return GetElementByName<IField>(Names.WS_PG_BRK_FLAG_SAVE); } }
        public IField WS_PRINT_LINE_SPACING { get { return GetElementByName<IField>(Names.WS_PRINT_LINE_SPACING); } }
        public IField WS_TEMP_PRINT_LINE_SPACING { get { return GetElementByName<IField>(Names.WS_TEMP_PRINT_LINE_SPACING); } }
        public IGroup WS_PRINT_RECORD { get { return GetElementByName<IGroup>(Names.WS_PRINT_RECORD); } }
        public IField WS_PRINT_LINE { get { return GetElementByName<IField>(Names.WS_PRINT_LINE); } }
        public IGroup WS_SPACE_RECORD { get { return GetElementByName<IGroup>(Names.WS_SPACE_RECORD); } }
        public IField WS_SPACE_LINE { get { return GetElementByName<IField>(Names.WS_SPACE_LINE); } }
        public IField WS_TEMP_PRINT_LINE { get { return GetElementByName<IField>(Names.WS_TEMP_PRINT_LINE); } }
        public IField WS_TEMP_SAVE_PRINT_LINE { get { return GetElementByName<IField>(Names.WS_TEMP_SAVE_PRINT_LINE); } }
        public IField WS_LINE_COUNT { get { return GetElementByName<IField>(Names.WS_LINE_COUNT); } }
        public IField WS_PG_LENGTH { get { return GetElementByName<IField>(Names.WS_PG_LENGTH); } }
        public IField WS_PG_NUMBER { get { return GetElementByName<IField>(Names.WS_PG_NUMBER); } }
        public IField WS_PG_NUMBER_SAVE { get { return GetElementByName<IField>(Names.WS_PG_NUMBER_SAVE); } }
        public IField SAVE_FOR_WRAP_TEXT { get { return GetElementByName<IField>(Names.SAVE_FOR_WRAP_TEXT); } }
        public IField WS_CUR_SUBRPT_CODE { get { return GetElementByName<IField>(Names.WS_CUR_SUBRPT_CODE); } }
        public IField WS_PREV_SUBRPT_CODE { get { return GetElementByName<IField>(Names.WS_PREV_SUBRPT_CODE); } }
        public IField WS_CONTROL_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_CONTROL_BRK_FLAG); } }
        public ICheckField WS_NOT_IN_CONTROL_BRK { get { return GetElementByName<ICheckField>(Names.WS_NOT_IN_CONTROL_BRK); } }
        public IField WS_SAVE_SECTION_PROCESSING_IND { get { return GetElementByName<IField>(Names.WS_SAVE_SECTION_PROCESSING_IND); } }
        public ICheckField WS_SAVE_RPT_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SAVE_RPT_HDR_IS_PROCESSED); } }
        public ICheckField WS_SAVE_RPT_FTR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SAVE_RPT_FTR_IS_PROCESSED); } }
        public ICheckField WS_SAVE_PG_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SAVE_PG_HDR_IS_PROCESSED); } }
        public ICheckField WS_SAVE_BODY_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SAVE_BODY_IS_PROCESSED); } }
        public IField WS_RESET_PG_NUMBER { get { return GetElementByName<IField>(Names.WS_RESET_PG_NUMBER); } }
        public IField WS_SUPPRSS_BLANK_LINE { get { return GetElementByName<IField>(Names.WS_SUPPRSS_BLANK_LINE); } }
        public IField WS_SUPPRSS_BLANK_LINE_SAVE { get { return GetElementByName<IField>(Names.WS_SUPPRSS_BLANK_LINE_SAVE); } }
        public IField WS_USER_NULL_DATE { get { return GetElementByName<IField>(Names.WS_USER_NULL_DATE); } }
        public IField WS_TEMP_LINE_QT { get { return GetElementByName<IField>(Names.WS_TEMP_LINE_QT); } }
        public IField WS_CUR_SECTION_LINE_QT { get { return GetElementByName<IField>(Names.WS_CUR_SECTION_LINE_QT); } }
        public IField WS_SAVE_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.WS_SAVE_PRINT_ATBOTTM); } }
        public IField WS_TEMP_LINE_COUNT { get { return GetElementByName<IField>(Names.WS_TEMP_LINE_COUNT); } }
        public IField WS_TEMP_INDX { get { return GetElementByName<IField>(Names.WS_TEMP_INDX); } }
        public IField WS_MONTH_TEXT_LENGTH { get { return GetElementByName<IField>(Names.WS_MONTH_TEXT_LENGTH); } }
        public IField PREV_IO_CONTROL_CD { get { return GetElementByName<IField>(Names.PREV_IO_CONTROL_CD); } }
        public IGroup DATE_TIME_CONVERSION_FIELDS { get { return GetElementByName<IGroup>(Names.DATE_TIME_CONVERSION_FIELDS); } }
        public IField IEF_DATE_TIME { get { return GetElementByName<IField>(Names.IEF_DATE_TIME); } }
        public IField IEF_DATE { get { return GetElementByName<IField>(Names.IEF_DATE); } }
        public IField IEF_TIME { get { return GetElementByName<IField>(Names.IEF_TIME); } }
        public IField DT_YEAR_4 { get { return GetElementByName<IField>(Names.DT_YEAR_4); } }
        public IField DT_YEAR_2 { get { return GetElementByName<IField>(Names.DT_YEAR_2); } }
        public IField DT_YEAR_1 { get { return GetElementByName<IField>(Names.DT_YEAR_1); } }
        public IField DT_MONTH_MM { get { return GetElementByName<IField>(Names.DT_MONTH_MM); } }
        public IField DT_DAY { get { return GetElementByName<IField>(Names.DT_DAY); } }
        public IField DT_TIME { get { return GetElementByName<IField>(Names.DT_TIME); } }
        public IField DT_HOUR { get { return GetElementByName<IField>(Names.DT_HOUR); } }
        public IField DT_MINUTES { get { return GetElementByName<IField>(Names.DT_MINUTES); } }
        public IField DT_SECONDS { get { return GetElementByName<IField>(Names.DT_SECONDS); } }
        public IField DT_MICROSECONDS { get { return GetElementByName<IField>(Names.DT_MICROSECONDS); } }
        public IField DT_EDIT_PATTERN { get { return GetElementByName<IField>(Names.DT_EDIT_PATTERN); } }
        public IField TS_EDIT_PATTERN { get { return GetElementByName<IField>(Names.TS_EDIT_PATTERN); } }
        public IField DT_MONTH_MON { get { return GetElementByName<IField>(Names.DT_MONTH_MON); } }
        public IField DT_MONTH_MON_U_STRING { get { return GetElementByName<IField>(Names.DT_MONTH_MON_U_STRING); } }
        public IGroup DT_MONTH_MON_U_TABLE { get { return GetElementByName<IGroup>(Names.DT_MONTH_MON_U_TABLE); } }
        public IArrayElementAccessor<IField> DT_MONTH_MON_U_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_MONTH_MON_U_TEXT); } }
        public IField DT_MONTH_MON_L_STRING { get { return GetElementByName<IField>(Names.DT_MONTH_MON_L_STRING); } }
        public IGroup DT_MONTH_MON_L_TABLE { get { return GetElementByName<IGroup>(Names.DT_MONTH_MON_L_TABLE); } }
        public IArrayElementAccessor<IField> DT_MONTH_MON_L_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_MONTH_MON_L_TEXT); } }
        public IField DT_MONTH_MONTH { get { return GetElementByName<IField>(Names.DT_MONTH_MONTH); } }
        public IGroup DT_MONTH_MONTH_U_STRING { get { return GetElementByName<IGroup>(Names.DT_MONTH_MONTH_U_STRING); } }
        public IGroup DT_MONTH_MONTH_U_TABLE { get { return GetElementByName<IGroup>(Names.DT_MONTH_MONTH_U_TABLE); } }
        public IArrayElementAccessor<IField> DT_MONTH_MONTH_U_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_MONTH_MONTH_U_TEXT); } }
        public IGroup DT_MONTH_MONTH_L_STRING { get { return GetElementByName<IGroup>(Names.DT_MONTH_MONTH_L_STRING); } }
        public IGroup DT_MONTH_MONTH_L_TABLE { get { return GetElementByName<IGroup>(Names.DT_MONTH_MONTH_L_TABLE); } }
        public IArrayElementAccessor<IField> DT_MONTH_MONTH_L_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_MONTH_MONTH_L_TEXT); } }
        public IField DT_FORMATTED_DATETIME { get { return GetElementByName<IField>(Names.DT_FORMATTED_DATETIME); } }
        public IGroup DT_FORMATTED_DATETIME_TABLE { get { return GetElementByName<IGroup>(Names.DT_FORMATTED_DATETIME_TABLE); } }
        public IArrayElementAccessor<IField> DT_FORMATTED_DATETIME_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_FORMATTED_DATETIME_TEXT); } }
        public IField DT_FORMATTED_DATE { get { return GetElementByName<IField>(Names.DT_FORMATTED_DATE); } }
        public IGroup DT_FORMATTED_DATE_TABLE { get { return GetElementByName<IGroup>(Names.DT_FORMATTED_DATE_TABLE); } }
        public IArrayElementAccessor<IField> DT_FORMATTED_DATE_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_FORMATTED_DATE_TEXT); } }
        public IField DT_FORMATTED_TIME { get { return GetElementByName<IField>(Names.DT_FORMATTED_TIME); } }
        public IGroup DT_FORMATTED_TIME_TABLE { get { return GetElementByName<IGroup>(Names.DT_FORMATTED_TIME_TABLE); } }
        public IArrayElementAccessor<IField> DT_FORMATTED_TIME_TEXT { get { return GetArrayElementAccessor<IField>(Names.DT_FORMATTED_TIME_TEXT); } }
        public IField DT_STRING_COUNT { get { return GetElementByName<IField>(Names.DT_STRING_COUNT); } }
        public ICheckField DT_STRING_FOUND { get { return GetElementByName<ICheckField>(Names.DT_STRING_FOUND); } }
        public IField DT_LEAP_YEAR_DAYS1 { get { return GetElementByName<IField>(Names.DT_LEAP_YEAR_DAYS1); } }
        public IGroup DT_LEAP_YEAR_TABLE1 { get { return GetElementByName<IGroup>(Names.DT_LEAP_YEAR_TABLE1); } }
        public IArrayElementAccessor<IField> DT_NO_LEAP_DAYS { get { return GetArrayElementAccessor<IField>(Names.DT_NO_LEAP_DAYS); } }
        public IField DT_LEAP_YEAR_DAYS2 { get { return GetElementByName<IField>(Names.DT_LEAP_YEAR_DAYS2); } }
        public IGroup DT_LEAP_YEAR_TABLE1_d2 { get { return GetElementByName<IGroup>(Names.DT_LEAP_YEAR_TABLE1_d2); } }
        public IArrayElementAccessor<IField> DT_LEAP_DAYS { get { return GetArrayElementAccessor<IField>(Names.DT_LEAP_DAYS); } }
        public IField LEAP_DAY { get { return GetElementByName<IField>(Names.LEAP_DAY); } }
        public IField LEAP1 { get { return GetElementByName<IField>(Names.LEAP1); } }
        public IField LEAP2 { get { return GetElementByName<IField>(Names.LEAP2); } }
        public IField LEAP3 { get { return GetElementByName<IField>(Names.LEAP3); } }
        public IField DT_START { get { return GetElementByName<IField>(Names.DT_START); } }
        public IField DT_INDEX { get { return GetElementByName<IField>(Names.DT_INDEX); } }
        public IGroup WS_CURRENT_DATE_8 { get { return GetElementByName<IGroup>(Names.WS_CURRENT_DATE_8); } }
        public IField WS_CURRENT_DATE_8_CC { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_8_CC); } }
        public IField WS_CURRENT_DATE_8_YY { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_8_YY); } }
        public IField WS_CURRENT_DATE_8_MM { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_8_MM); } }
        public IField WS_CURRENT_DATE_8_DD { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_8_DD); } }
        public IField WS_CURRENT_DATE { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE); } }
        public IGroup WS_CURRENT_DATE_6 { get { return GetElementByName<IGroup>(Names.WS_CURRENT_DATE_6); } }
        public IField WS_CURRENT_DATE_6_YY { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_6_YY); } }
        public IField WS_CURRENT_DATE_6_MM { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_6_MM); } }
        public IField WS_CURRENT_DATE_6_DD { get { return GetElementByName<IField>(Names.WS_CURRENT_DATE_6_DD); } }
        public IField WS_CURRENT_TIME { get { return GetElementByName<IField>(Names.WS_CURRENT_TIME); } }
        public IGroup WS_CURRENT_TIME_X { get { return GetElementByName<IGroup>(Names.WS_CURRENT_TIME_X); } }
        public IField WS_CURRENT_TIME_6 { get { return GetElementByName<IField>(Names.WS_CURRENT_TIME_6); } }
        public IField WS_UNJUSTIFIED_TEXT_IDX { get { return GetElementByName<IField>(Names.WS_UNJUSTIFIED_TEXT_IDX); } }
        public IField WS_JUSTIFIED_TEXT_IDX { get { return GetElementByName<IField>(Names.WS_JUSTIFIED_TEXT_IDX); } }
        public IGroup WS_JUSTIFY_TEXT_FIELDS { get { return GetElementByName<IGroup>(Names.WS_JUSTIFY_TEXT_FIELDS); } }
        public IGroup WS_UNJUSTIFIED_TEXT_FIELD { get { return GetElementByName<IGroup>(Names.WS_UNJUSTIFIED_TEXT_FIELD); } }
        public IArrayElementAccessor<IField> WS_UNJUSTIFIED_TEXT_CHAR { get { return GetArrayElementAccessor<IField>(Names.WS_UNJUSTIFIED_TEXT_CHAR); } }
        public IGroup WS_JUSTIFIED_TEXT_FIELD { get { return GetElementByName<IGroup>(Names.WS_JUSTIFIED_TEXT_FIELD); } }
        public IArrayElementAccessor<IField> WS_JUSTIFIED_TEXT_CHAR { get { return GetArrayElementAccessor<IField>(Names.WS_JUSTIFIED_TEXT_CHAR); } }
        public IField WS_JUSTIFICATION_TYPE_CD { get { return GetElementByName<IField>(Names.WS_JUSTIFICATION_TYPE_CD); } }
        public ICheckField WS_JUSTIFIED_NONE { get { return GetElementByName<ICheckField>(Names.WS_JUSTIFIED_NONE); } }
        public ICheckField WS_JUSTIFIED_LEFT { get { return GetElementByName<ICheckField>(Names.WS_JUSTIFIED_LEFT); } }
        public ICheckField WS_JUSTIFIED_CENTER { get { return GetElementByName<ICheckField>(Names.WS_JUSTIFIED_CENTER); } }
        public ICheckField WS_JUSTIFIED_RIGHT { get { return GetElementByName<ICheckField>(Names.WS_JUSTIFIED_RIGHT); } }
        public IField WS_JUSTIFIED_TEXT_FIELD_LENGTH { get { return GetElementByName<IField>(Names.WS_JUSTIFIED_TEXT_FIELD_LENGTH); } }
        public IField WS_JUSTIFIED_TEXT_DATA_LENGTH { get { return GetElementByName<IField>(Names.WS_JUSTIFIED_TEXT_DATA_LENGTH); } }
        public IField WS_JUSTIFIED_FIELD_START { get { return GetElementByName<IField>(Names.WS_JUSTIFIED_FIELD_START); } }
        public IField WS_FIRST_CHAR { get { return GetElementByName<IField>(Names.WS_FIRST_CHAR); } }
        public IField WS_LAST_CHAR { get { return GetElementByName<IField>(Names.WS_LAST_CHAR); } }
        public IField WS_CHAR_CNTR { get { return GetElementByName<IField>(Names.WS_CHAR_CNTR); } }
        public IGroup RG_WORK_FIELDS { get { return GetElementByName<IGroup>(Names.RG_WORK_FIELDS); } }
        public IField WS_RG_CNTL_HDR_FLAG { get { return GetElementByName<IField>(Names.WS_RG_CNTL_HDR_FLAG); } }
        public ICheckField WS_RG_CNTL_HDR { get { return GetElementByName<ICheckField>(Names.WS_RG_CNTL_HDR); } }
        public IField WS_RG_CNTL_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_RG_CNTL_FTR_FLAG); } }
        public ICheckField WS_RG_CNTL_FTR { get { return GetElementByName<ICheckField>(Names.WS_RG_CNTL_FTR); } }
        public IField WS_RG_RPT_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_RG_RPT_FTR_FLAG); } }
        public ICheckField WS_RG_RPT_FTR { get { return GetElementByName<ICheckField>(Names.WS_RG_RPT_FTR); } }
        public IField WS_RG_DTL_LINE_QT { get { return GetElementByName<IField>(Names.WS_RG_DTL_LINE_QT); } }
        public IField WS_RG_PG_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_RG_PG_HDR_LINE_QT); } }
        public IField WS_RG_PG_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_RG_PG_FTR_LINE_QT); } }
        public IField WS_RG_RPT_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_RG_RPT_HDR_LINE_QT); } }
        public IField WS_RG_RPT_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_RG_RPT_FTR_LINE_QT); } }
        public IField WS_RG_LINE_SPACING { get { return GetElementByName<IField>(Names.WS_RG_LINE_SPACING); } }
        public IField WS_RG_RPT_TYPE_CD { get { return GetElementByName<IField>(Names.WS_RG_RPT_TYPE_CD); } }
        public ICheckField WS_RG_SUMMARY_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_RG_SUMMARY_RPT_REQUESTED); } }
        public ICheckField WS_RG_DTL_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_RG_DTL_RPT_REQUESTED); } }
        public IField WS_RG_SECTION_PROCESSING_IND { get { return GetElementByName<IField>(Names.WS_RG_SECTION_PROCESSING_IND); } }
        public ICheckField WS_RG_RPT_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_RG_RPT_HDR_IS_PROCESSED); } }
        public ICheckField WS_RG_RPT_FTR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_RG_RPT_FTR_IS_PROCESSED); } }
        public ICheckField WS_RG_PG_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_RG_PG_HDR_IS_PROCESSED); } }
        public ICheckField WS_RG_BODY_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_RG_BODY_IS_PROCESSED); } }
        public IField WS_RG_KEEP_DTL_TOGETHER_FG { get { return GetElementByName<IField>(Names.WS_RG_KEEP_DTL_TOGETHER_FG); } }
        public IField WS_RG_PRINT_PG_BRK_SPACING { get { return GetElementByName<IField>(Names.WS_RG_PRINT_PG_BRK_SPACING); } }
        public IField WS_RG_PRINT_PG_BRK_LINE { get { return GetElementByName<IField>(Names.WS_RG_PRINT_PG_BRK_LINE); } }
        public IField WS_RG_PRINT_RPT_FTR_LINE { get { return GetElementByName<IField>(Names.WS_RG_PRINT_RPT_FTR_LINE); } }
        public IField WS_RG_PG_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_RG_PG_BRK_FLAG); } }
        public IField WS_RG_CUR_RPT_HDR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_RG_CUR_RPT_HDR_LINE_NUM); } }
        public IField WS_RG_CUR_RPT_FTR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_RG_CUR_RPT_FTR_LINE_NUM); } }
        public IField WS_RG_FIRST_TIME_FLAG { get { return GetElementByName<IField>(Names.WS_RG_FIRST_TIME_FLAG); } }
        public ICheckField WS_RG_FIRST_TIME { get { return GetElementByName<ICheckField>(Names.WS_RG_FIRST_TIME); } }
        public IField WS_RG_DISABLE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_RG_DISABLE_SUPPRESS); } }
        public ICheckField WS_RG_SUPPRESS_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_RG_SUPPRESS_DUPLICATES); } }
        public ICheckField WS_RG_PRINT_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_RG_PRINT_DUPLICATES); } }
        public IField WS_RG_BODY_SECTION_LINES { get { return GetElementByName<IField>(Names.WS_RG_BODY_SECTION_LINES); } }
        public IField WS_RG_BODY_SUPPRESS_LINES { get { return GetElementByName<IField>(Names.WS_RG_BODY_SUPPRESS_LINES); } }
        public IField WS_RG_GR_COUNTER { get { return GetElementByName<IField>(Names.WS_RG_GR_COUNTER); } }
        public IField WS_RG_PAGE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_RG_PAGE_SUPPRESS); } }
        public IField WS_RG_PAGE_SUPPRESS_AFTER { get { return GetElementByName<IField>(Names.WS_RG_PAGE_SUPPRESS_AFTER); } }
        public IField WS_RG_PAGE_DTL_LINES { get { return GetElementByName<IField>(Names.WS_RG_PAGE_DTL_LINES); } }
        public IField WS_RG_CURRENTLY_WRAPPING { get { return GetElementByName<IField>(Names.WS_RG_CURRENTLY_WRAPPING); } }
        public IField WS_RG_CUR_PRINTING_PAGE_HDR { get { return GetElementByName<IField>(Names.WS_RG_CUR_PRINTING_PAGE_HDR); } }
        public IField RG_EDIT_PATTERN_OBJ3 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ3); } }
        public IField RG_EDIT_PATTERN_OBJ4 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ4); } }
        public IField RG_EDIT_PATTERN_OBJ5 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ5); } }
        public IField RG_EDIT_PATTERN_OBJ6 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ6); } }
        public IField RG_EDIT_PATTERN_OBJ7 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ7); } }
        public IField RG_EDIT_PATTERN_OBJ8 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ8); } }
        public IField RG_EDIT_PATTERN_OBJ9 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ9); } }
        public IField RG_EDIT_PATTERN_OBJ10 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ10); } }
        public IField RG_EDIT_PATTERN_OBJ11 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ11); } }
        public IField RG_EDIT_PATTERN_OBJ12 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ12); } }
        public IField RG_EDIT_PATTERN_OBJ13 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ13); } }
        public IField RG_EDIT_PATTERN_OBJ15 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ15); } }
        public IField RG_EDIT_PATTERN_OBJ16 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ16); } }
        public IField RG_EDIT_PATTERN_OBJ17 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ17); } }
        public IField RG_EDIT_PATTERN_OBJ18 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ18); } }
        public IField RG_EDIT_PATTERN_OBJ19 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ19); } }
        public IField RG_EDIT_PATTERN_OBJ20 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ20); } }
        public IField RG_EDIT_PATTERN_OBJ21 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ21); } }
        public IField RG_EDIT_PATTERN_OBJ22 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ22); } }
        public IField RG_EDIT_PATTERN_OBJ23 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ23); } }
        public IField RG_EDIT_PATTERN_OBJ24 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ24); } }
        public IField RG_EDIT_PATTERN_OBJ25 { get { return GetElementByName<IField>(Names.RG_EDIT_PATTERN_OBJ25); } }
        public IGroup RG_DTL_LINE_SECTION { get { return GetElementByName<IGroup>(Names.RG_DTL_LINE_SECTION); } }
        public IField RG_DTL_LINE_BEFORE_SPACE { get { return GetElementByName<IField>(Names.RG_DTL_LINE_BEFORE_SPACE); } }
        public IField RG_DTL_LINE_AFTER_SPACING { get { return GetElementByName<IField>(Names.RG_DTL_LINE_AFTER_SPACING); } }
        public IField RG_DTL_LINE_RESETPG_AFTER { get { return GetElementByName<IField>(Names.RG_DTL_LINE_RESETPG_AFTER); } }
        public IField RG_DTL_LINE_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.RG_DTL_LINE_KEEP_TOGETHER); } }
        public IField RG_DTL_LINE_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.RG_DTL_LINE_SUPPRSS_BLANK); } }
        public IField RG_DTL_LINE_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.RG_DTL_LINE_PRINT_ATBOTTM); } }
        public IField RG_DTL_LINE_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.RG_DTL_LINE_KEEP_WITHNEXT); } }
        public IField RG_DTL_LINE_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.RG_DTL_LINE_BEFORE_PG_BRK); } }
        public IField RG_DTL_LINE_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.RG_DTL_LINE_AFTER_PG_BRK); } }
        public IField RG_DTL_LINE_PRINT_FLAG { get { return GetElementByName<IField>(Names.RG_DTL_LINE_PRINT_FLAG); } }
        public IGroup RG_DTL_LINE_0 { get { return GetElementByName<IGroup>(Names.RG_DTL_LINE_0); } }
        public IField RG_DTL_LINE_0_A_OBJ1 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_0_A_OBJ1); } }
        public IGroup RG_DTL_LINE_1 { get { return GetElementByName<IGroup>(Names.RG_DTL_LINE_1); } }
        public IField RG_DTL_LINE_1_A_OBJ2 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ2); } }
        public IField RG_DTL_LINE_1_A_OBJ3 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ3); } }
        public IField RG_DTL_SUPRES_1_A_OBJ3 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ3); } }
        public IField RG_DTL_LINE_1_A_OBJ4 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ4); } }
        public IField RG_DTL_SUPRES_1_A_OBJ4 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ4); } }
        public IField RG_DTL_LINE_1_A_OBJ5 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ5); } }
        public IField RG_DTL_SUPRES_1_A_OBJ5 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ5); } }
        public IField RG_DTL_LINE_1_A_OBJ6 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ6); } }
        public IField RG_DTL_SUPRES_1_A_OBJ6 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ6); } }
        public IField RG_DTL_LINE_1_A_OBJ7 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ7); } }
        public IField RG_DTL_SUPRES_1_A_OBJ7 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ7); } }
        public IField RG_DTL_LINE_1_A_OBJ8 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ8); } }
        public IField RG_DTL_SUPRES_1_A_OBJ8 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ8); } }
        public IField RG_DTL_LINE_1_A_OBJ9 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ9); } }
        public IField RG_DTL_SUPRES_1_A_OBJ9 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ9); } }
        public IField RG_DTL_LINE_1_A_OBJ10 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ10); } }
        public IField RG_DTL_SUPRES_1_A_OBJ10 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ10); } }
        public IField RG_DTL_LINE_1_A_OBJ11 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ11); } }
        public IField RG_DTL_SUPRES_1_A_OBJ11 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ11); } }
        public IField RG_DTL_LINE_1_A_OBJ12 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ12); } }
        public IField RG_DTL_SUPRES_1_A_OBJ12 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ12); } }
        public IField RG_DTL_LINE_1_A_OBJ13 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_1_A_OBJ13); } }
        public IField RG_DTL_SUPRES_1_A_OBJ13 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_1_A_OBJ13); } }
        public IGroup RG_DTL_LINE_2 { get { return GetElementByName<IGroup>(Names.RG_DTL_LINE_2); } }
        public IField RG_DTL_LINE_2_A_OBJ14 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ14); } }
        public IField RG_DTL_LINE_2_A_OBJ15 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ15); } }
        public IField RG_DTL_SUPRES_2_A_OBJ15 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ15); } }
        public IField RG_DTL_LINE_2_A_OBJ16 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ16); } }
        public IField RG_DTL_SUPRES_2_A_OBJ16 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ16); } }
        public IField RG_DTL_LINE_2_A_OBJ17 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ17); } }
        public IField RG_DTL_SUPRES_2_A_OBJ17 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ17); } }
        public IField RG_DTL_LINE_2_A_OBJ18 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ18); } }
        public IField RG_DTL_SUPRES_2_A_OBJ18 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ18); } }
        public IField RG_DTL_LINE_2_A_OBJ19 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ19); } }
        public IField RG_DTL_SUPRES_2_A_OBJ19 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ19); } }
        public IField RG_DTL_LINE_2_A_OBJ20 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ20); } }
        public IField RG_DTL_SUPRES_2_A_OBJ20 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ20); } }
        public IField RG_DTL_LINE_2_A_OBJ21 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ21); } }
        public IField RG_DTL_SUPRES_2_A_OBJ21 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ21); } }
        public IField RG_DTL_LINE_2_A_OBJ22 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ22); } }
        public IField RG_DTL_SUPRES_2_A_OBJ22 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ22); } }
        public IField RG_DTL_LINE_2_A_OBJ23 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ23); } }
        public IField RG_DTL_SUPRES_2_A_OBJ23 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ23); } }
        public IField RG_DTL_LINE_2_A_OBJ24 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ24); } }
        public IField RG_DTL_SUPRES_2_A_OBJ24 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ24); } }
        public IField RG_DTL_LINE_2_A_OBJ25 { get { return GetElementByName<IField>(Names.RG_DTL_LINE_2_A_OBJ25); } }
        public IField RG_DTL_SUPRES_2_A_OBJ25 { get { return GetElementByName<IField>(Names.RG_DTL_SUPRES_2_A_OBJ25); } }
        public IGroup RG_DTL_LINE_3 { get { return GetElementByName<IGroup>(Names.RG_DTL_LINE_3); } }
        public IGroup RG_RPT_FTR_SECTION { get { return GetElementByName<IGroup>(Names.RG_RPT_FTR_SECTION); } }
        public IField RG_RPT_FTR_BEFORE_SPACE { get { return GetElementByName<IField>(Names.RG_RPT_FTR_BEFORE_SPACE); } }
        public IField RG_RPT_FTR_AFTER_SPACING { get { return GetElementByName<IField>(Names.RG_RPT_FTR_AFTER_SPACING); } }
        public IField RG_RPT_FTR_RESETPG_AFTER { get { return GetElementByName<IField>(Names.RG_RPT_FTR_RESETPG_AFTER); } }
        public IField RG_RPT_FTR_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.RG_RPT_FTR_KEEP_TOGETHER); } }
        public IField RG_RPT_FTR_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.RG_RPT_FTR_SUPPRSS_BLANK); } }
        public IField RG_RPT_FTR_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.RG_RPT_FTR_PRINT_ATBOTTM); } }
        public IField RG_RPT_FTR_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.RG_RPT_FTR_KEEP_WITHNEXT); } }
        public IField RG_RPT_FTR_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.RG_RPT_FTR_BEFORE_PG_BRK); } }
        public IField RG_RPT_FTR_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.RG_RPT_FTR_AFTER_PG_BRK); } }
        public IField RG_RPT_FTR_PRINT_FLAG { get { return GetElementByName<IField>(Names.RG_RPT_FTR_PRINT_FLAG); } }
        public IGroup RG_RPT_FTR_0 { get { return GetElementByName<IGroup>(Names.RG_RPT_FTR_0); } }
        public IGroup RG_RPT_FTR_1 { get { return GetElementByName<IGroup>(Names.RG_RPT_FTR_1); } }
        public IGroup RG_PAGE_HDR_SECTION { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_SECTION); } }
        public IField RG_PAGE_HDR_BEFORE_SPACE { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_BEFORE_SPACE); } }
        public IField RG_PAGE_HDR_AFTER_SPACING { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_AFTER_SPACING); } }
        public IField RG_PAGE_HDR_RESETPG_AFTER { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_RESETPG_AFTER); } }
        public IField RG_PAGE_HDR_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_KEEP_TOGETHER); } }
        public IField RG_PAGE_HDR_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_SUPPRSS_BLANK); } }
        public IField RG_PAGE_HDR_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_PRINT_ATBOTTM); } }
        public IField RG_PAGE_HDR_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_KEEP_WITHNEXT); } }
        public IField RG_PAGE_HDR_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_BEFORE_PG_BRK); } }
        public IField RG_PAGE_HDR_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_AFTER_PG_BRK); } }
        public IField RG_PAGE_HDR_PRINT_FLAG { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_PRINT_FLAG); } }
        public IGroup RG_PAGE_HDR_0 { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_0); } }
        public IField RG_PAGE_HDR_0_P_OBJ30 { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_0_P_OBJ30); } }
        public IGroup RG_PAGE_HDR_1 { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_1); } }
        public IField RG_PAGE_HDR_1_D_OBJ32 { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_1_D_OBJ32); } }
        public IGroup RG_PAGE_HDR_2 { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_2); } }
        public IField RG_PAGE_HDR_2_T_OBJ35 { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_2_T_OBJ35); } }
        public IGroup RG_PAGE_HDR_3 { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_3); } }
        public IGroup RG_PAGE_HDR_4 { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_4); } }
        public IGroup RG_PAGE_HDR_5 { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_5); } }
        public IField RG_PAGE_HDR_5_A_OBJ39 { get { return GetElementByName<IField>(Names.RG_PAGE_HDR_5_A_OBJ39); } }
        public IGroup RG_PAGE_HDR_6 { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_6); } }
        public IGroup RG_PAGE_HDR_7 { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_7); } }
        public IGroup RG_PAGE_HDR_8 { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_8); } }
        public IGroup RG_PAGE_HDR_9 { get { return GetElementByName<IGroup>(Names.RG_PAGE_HDR_9); } }
        public IGroup ST_WORK_FIELDS { get { return GetElementByName<IGroup>(Names.ST_WORK_FIELDS); } }
        public IField WS_ST_CNTL_HDR_FLAG { get { return GetElementByName<IField>(Names.WS_ST_CNTL_HDR_FLAG); } }
        public ICheckField WS_ST_CNTL_HDR { get { return GetElementByName<ICheckField>(Names.WS_ST_CNTL_HDR); } }
        public IField WS_ST_CNTL_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_ST_CNTL_FTR_FLAG); } }
        public ICheckField WS_ST_CNTL_FTR { get { return GetElementByName<ICheckField>(Names.WS_ST_CNTL_FTR); } }
        public IField WS_ST_RPT_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_ST_RPT_FTR_FLAG); } }
        public ICheckField WS_ST_RPT_FTR { get { return GetElementByName<ICheckField>(Names.WS_ST_RPT_FTR); } }
        public IField WS_ST_DTL_LINE_QT { get { return GetElementByName<IField>(Names.WS_ST_DTL_LINE_QT); } }
        public IField WS_ST_PG_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_ST_PG_HDR_LINE_QT); } }
        public IField WS_ST_PG_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_ST_PG_FTR_LINE_QT); } }
        public IField WS_ST_RPT_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_ST_RPT_HDR_LINE_QT); } }
        public IField WS_ST_RPT_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_ST_RPT_FTR_LINE_QT); } }
        public IField WS_ST_LINE_SPACING { get { return GetElementByName<IField>(Names.WS_ST_LINE_SPACING); } }
        public IField WS_ST_RPT_TYPE_CD { get { return GetElementByName<IField>(Names.WS_ST_RPT_TYPE_CD); } }
        public ICheckField WS_ST_SUMMARY_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_ST_SUMMARY_RPT_REQUESTED); } }
        public ICheckField WS_ST_DTL_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_ST_DTL_RPT_REQUESTED); } }
        public IField WS_ST_SECTION_PROCESSING_IND { get { return GetElementByName<IField>(Names.WS_ST_SECTION_PROCESSING_IND); } }
        public ICheckField WS_ST_RPT_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_ST_RPT_HDR_IS_PROCESSED); } }
        public ICheckField WS_ST_RPT_FTR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_ST_RPT_FTR_IS_PROCESSED); } }
        public ICheckField WS_ST_PG_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_ST_PG_HDR_IS_PROCESSED); } }
        public ICheckField WS_ST_BODY_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_ST_BODY_IS_PROCESSED); } }
        public IField WS_ST_KEEP_DTL_TOGETHER_FG { get { return GetElementByName<IField>(Names.WS_ST_KEEP_DTL_TOGETHER_FG); } }
        public IField WS_ST_PRINT_PG_BRK_SPACING { get { return GetElementByName<IField>(Names.WS_ST_PRINT_PG_BRK_SPACING); } }
        public IField WS_ST_PRINT_PG_BRK_LINE { get { return GetElementByName<IField>(Names.WS_ST_PRINT_PG_BRK_LINE); } }
        public IField WS_ST_PRINT_RPT_FTR_LINE { get { return GetElementByName<IField>(Names.WS_ST_PRINT_RPT_FTR_LINE); } }
        public IField WS_ST_PG_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_ST_PG_BRK_FLAG); } }
        public IField WS_ST_CUR_RPT_HDR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_ST_CUR_RPT_HDR_LINE_NUM); } }
        public IField WS_ST_CUR_RPT_FTR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_ST_CUR_RPT_FTR_LINE_NUM); } }
        public IField WS_ST_FIRST_TIME_FLAG { get { return GetElementByName<IField>(Names.WS_ST_FIRST_TIME_FLAG); } }
        public ICheckField WS_ST_FIRST_TIME { get { return GetElementByName<ICheckField>(Names.WS_ST_FIRST_TIME); } }
        public IField WS_ST_DISABLE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_ST_DISABLE_SUPPRESS); } }
        public ICheckField WS_ST_SUPPRESS_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_ST_SUPPRESS_DUPLICATES); } }
        public ICheckField WS_ST_PRINT_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_ST_PRINT_DUPLICATES); } }
        public IField WS_ST_BODY_SECTION_LINES { get { return GetElementByName<IField>(Names.WS_ST_BODY_SECTION_LINES); } }
        public IField WS_ST_BODY_SUPPRESS_LINES { get { return GetElementByName<IField>(Names.WS_ST_BODY_SUPPRESS_LINES); } }
        public IField WS_ST_GR_COUNTER { get { return GetElementByName<IField>(Names.WS_ST_GR_COUNTER); } }
        public IField WS_ST_PAGE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_ST_PAGE_SUPPRESS); } }
        public IField WS_ST_PAGE_SUPPRESS_AFTER { get { return GetElementByName<IField>(Names.WS_ST_PAGE_SUPPRESS_AFTER); } }
        public IField WS_ST_PAGE_DTL_LINES { get { return GetElementByName<IField>(Names.WS_ST_PAGE_DTL_LINES); } }
        public IField WS_ST_CURRENTLY_WRAPPING { get { return GetElementByName<IField>(Names.WS_ST_CURRENTLY_WRAPPING); } }
        public IField WS_ST_CUR_PRINTING_PAGE_HDR { get { return GetElementByName<IField>(Names.WS_ST_CUR_PRINTING_PAGE_HDR); } }
        public IField ST_EDIT_PATTERN_OBJ31 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ31); } }
        public IField ST_EDIT_PATTERN_OBJ32 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ32); } }
        public IField ST_EDIT_PATTERN_OBJ33 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ33); } }
        public IField ST_EDIT_PATTERN_OBJ34 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ34); } }
        public IField ST_EDIT_PATTERN_OBJ35 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ35); } }
        public IField ST_EDIT_PATTERN_OBJ36 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ36); } }
        public IField ST_EDIT_PATTERN_OBJ37 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ37); } }
        public IField ST_EDIT_PATTERN_OBJ38 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ38); } }
        public IField ST_EDIT_PATTERN_OBJ39 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ39); } }
        public IField ST_EDIT_PATTERN_OBJ40 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ40); } }
        public IField ST_EDIT_PATTERN_OBJ41 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ41); } }
        public IField ST_EDIT_PATTERN_OBJ4 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ4); } }
        public IField ST_EDIT_PATTERN_OBJ5 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ5); } }
        public IField ST_EDIT_PATTERN_OBJ6 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ6); } }
        public IField ST_EDIT_PATTERN_OBJ7 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ7); } }
        public IField ST_EDIT_PATTERN_OBJ8 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ8); } }
        public IField ST_EDIT_PATTERN_OBJ9 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ9); } }
        public IField ST_EDIT_PATTERN_OBJ10 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ10); } }
        public IField ST_EDIT_PATTERN_OBJ11 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ11); } }
        public IField ST_EDIT_PATTERN_OBJ12 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ12); } }
        public IField ST_EDIT_PATTERN_OBJ13 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ13); } }
        public IField ST_EDIT_PATTERN_OBJ14 { get { return GetElementByName<IField>(Names.ST_EDIT_PATTERN_OBJ14); } }
        public IGroup ST_DTL_LINE_SECTION { get { return GetElementByName<IGroup>(Names.ST_DTL_LINE_SECTION); } }
        public IField ST_DTL_LINE_BEFORE_SPACE { get { return GetElementByName<IField>(Names.ST_DTL_LINE_BEFORE_SPACE); } }
        public IField ST_DTL_LINE_AFTER_SPACING { get { return GetElementByName<IField>(Names.ST_DTL_LINE_AFTER_SPACING); } }
        public IField ST_DTL_LINE_RESETPG_AFTER { get { return GetElementByName<IField>(Names.ST_DTL_LINE_RESETPG_AFTER); } }
        public IField ST_DTL_LINE_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.ST_DTL_LINE_KEEP_TOGETHER); } }
        public IField ST_DTL_LINE_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.ST_DTL_LINE_SUPPRSS_BLANK); } }
        public IField ST_DTL_LINE_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.ST_DTL_LINE_PRINT_ATBOTTM); } }
        public IField ST_DTL_LINE_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.ST_DTL_LINE_KEEP_WITHNEXT); } }
        public IField ST_DTL_LINE_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.ST_DTL_LINE_BEFORE_PG_BRK); } }
        public IField ST_DTL_LINE_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.ST_DTL_LINE_AFTER_PG_BRK); } }
        public IField ST_DTL_LINE_PRINT_FLAG { get { return GetElementByName<IField>(Names.ST_DTL_LINE_PRINT_FLAG); } }
        public IGroup ST_DTL_LINE_0 { get { return GetElementByName<IGroup>(Names.ST_DTL_LINE_0); } }
        public IField ST_DTL_LINE_0_A_OBJ1 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_0_A_OBJ1); } }
        public IGroup ST_DTL_LINE_1 { get { return GetElementByName<IGroup>(Names.ST_DTL_LINE_1); } }
        public IField ST_DTL_LINE_1_A_OBJ2 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ2); } }
        public IField ST_DTL_LINE_1_A_OBJ31 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ31); } }
        public IField ST_DTL_SUPRES_1_A_OBJ31 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ31); } }
        public IField ST_DTL_LINE_1_A_OBJ32 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ32); } }
        public IField ST_DTL_SUPRES_1_A_OBJ32 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ32); } }
        public IField ST_DTL_LINE_1_A_OBJ33 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ33); } }
        public IField ST_DTL_SUPRES_1_A_OBJ33 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ33); } }
        public IField ST_DTL_LINE_1_A_OBJ34 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ34); } }
        public IField ST_DTL_SUPRES_1_A_OBJ34 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ34); } }
        public IField ST_DTL_LINE_1_A_OBJ35 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ35); } }
        public IField ST_DTL_SUPRES_1_A_OBJ35 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ35); } }
        public IField ST_DTL_LINE_1_A_OBJ36 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ36); } }
        public IField ST_DTL_SUPRES_1_A_OBJ36 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ36); } }
        public IField ST_DTL_LINE_1_A_OBJ37 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ37); } }
        public IField ST_DTL_SUPRES_1_A_OBJ37 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ37); } }
        public IField ST_DTL_LINE_1_A_OBJ38 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ38); } }
        public IField ST_DTL_SUPRES_1_A_OBJ38 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ38); } }
        public IField ST_DTL_LINE_1_A_OBJ39 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ39); } }
        public IField ST_DTL_SUPRES_1_A_OBJ39 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ39); } }
        public IField ST_DTL_LINE_1_A_OBJ40 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ40); } }
        public IField ST_DTL_SUPRES_1_A_OBJ40 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ40); } }
        public IField ST_DTL_LINE_1_A_OBJ41 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_1_A_OBJ41); } }
        public IField ST_DTL_SUPRES_1_A_OBJ41 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_1_A_OBJ41); } }
        public IGroup ST_DTL_LINE_2 { get { return GetElementByName<IGroup>(Names.ST_DTL_LINE_2); } }
        public IField ST_DTL_LINE_2_A_OBJ3 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ3); } }
        public IField ST_DTL_LINE_2_A_OBJ4 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ4); } }
        public IField ST_DTL_SUPRES_2_A_OBJ4 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ4); } }
        public IField ST_DTL_LINE_2_A_OBJ5 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ5); } }
        public IField ST_DTL_SUPRES_2_A_OBJ5 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ5); } }
        public IField ST_DTL_LINE_2_A_OBJ6 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ6); } }
        public IField ST_DTL_SUPRES_2_A_OBJ6 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ6); } }
        public IField ST_DTL_LINE_2_A_OBJ7 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ7); } }
        public IField ST_DTL_SUPRES_2_A_OBJ7 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ7); } }
        public IField ST_DTL_LINE_2_A_OBJ8 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ8); } }
        public IField ST_DTL_SUPRES_2_A_OBJ8 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ8); } }
        public IField ST_DTL_LINE_2_A_OBJ9 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ9); } }
        public IField ST_DTL_SUPRES_2_A_OBJ9 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ9); } }
        public IField ST_DTL_LINE_2_A_OBJ10 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ10); } }
        public IField ST_DTL_SUPRES_2_A_OBJ10 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ10); } }
        public IField ST_DTL_LINE_2_A_OBJ11 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ11); } }
        public IField ST_DTL_SUPRES_2_A_OBJ11 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ11); } }
        public IField ST_DTL_LINE_2_A_OBJ12 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ12); } }
        public IField ST_DTL_SUPRES_2_A_OBJ12 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ12); } }
        public IField ST_DTL_LINE_2_A_OBJ13 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ13); } }
        public IField ST_DTL_SUPRES_2_A_OBJ13 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ13); } }
        public IField ST_DTL_LINE_2_A_OBJ14 { get { return GetElementByName<IField>(Names.ST_DTL_LINE_2_A_OBJ14); } }
        public IField ST_DTL_SUPRES_2_A_OBJ14 { get { return GetElementByName<IField>(Names.ST_DTL_SUPRES_2_A_OBJ14); } }
        public IGroup ST_DTL_LINE_3 { get { return GetElementByName<IGroup>(Names.ST_DTL_LINE_3); } }
        public IGroup ST_RPT_FTR_SECTION { get { return GetElementByName<IGroup>(Names.ST_RPT_FTR_SECTION); } }
        public IField ST_RPT_FTR_BEFORE_SPACE { get { return GetElementByName<IField>(Names.ST_RPT_FTR_BEFORE_SPACE); } }
        public IField ST_RPT_FTR_AFTER_SPACING { get { return GetElementByName<IField>(Names.ST_RPT_FTR_AFTER_SPACING); } }
        public IField ST_RPT_FTR_RESETPG_AFTER { get { return GetElementByName<IField>(Names.ST_RPT_FTR_RESETPG_AFTER); } }
        public IField ST_RPT_FTR_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.ST_RPT_FTR_KEEP_TOGETHER); } }
        public IField ST_RPT_FTR_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.ST_RPT_FTR_SUPPRSS_BLANK); } }
        public IField ST_RPT_FTR_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.ST_RPT_FTR_PRINT_ATBOTTM); } }
        public IField ST_RPT_FTR_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.ST_RPT_FTR_KEEP_WITHNEXT); } }
        public IField ST_RPT_FTR_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.ST_RPT_FTR_BEFORE_PG_BRK); } }
        public IField ST_RPT_FTR_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.ST_RPT_FTR_AFTER_PG_BRK); } }
        public IField ST_RPT_FTR_PRINT_FLAG { get { return GetElementByName<IField>(Names.ST_RPT_FTR_PRINT_FLAG); } }
        public IGroup ST_RPT_FTR_0 { get { return GetElementByName<IGroup>(Names.ST_RPT_FTR_0); } }
        public IGroup ST_RPT_FTR_1 { get { return GetElementByName<IGroup>(Names.ST_RPT_FTR_1); } }
        public IGroup ST_PAGE_HDR_SECTION { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_SECTION); } }
        public IField ST_PAGE_HDR_BEFORE_SPACE { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_BEFORE_SPACE); } }
        public IField ST_PAGE_HDR_AFTER_SPACING { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_AFTER_SPACING); } }
        public IField ST_PAGE_HDR_RESETPG_AFTER { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_RESETPG_AFTER); } }
        public IField ST_PAGE_HDR_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_KEEP_TOGETHER); } }
        public IField ST_PAGE_HDR_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_SUPPRSS_BLANK); } }
        public IField ST_PAGE_HDR_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_PRINT_ATBOTTM); } }
        public IField ST_PAGE_HDR_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_KEEP_WITHNEXT); } }
        public IField ST_PAGE_HDR_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_BEFORE_PG_BRK); } }
        public IField ST_PAGE_HDR_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_AFTER_PG_BRK); } }
        public IField ST_PAGE_HDR_PRINT_FLAG { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_PRINT_FLAG); } }
        public IGroup ST_PAGE_HDR_0 { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_0); } }
        public IField ST_PAGE_HDR_0_P_OBJ19 { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_0_P_OBJ19); } }
        public IGroup ST_PAGE_HDR_1 { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_1); } }
        public IField ST_PAGE_HDR_1_D_OBJ21 { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_1_D_OBJ21); } }
        public IGroup ST_PAGE_HDR_2 { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_2); } }
        public IField ST_PAGE_HDR_2_T_OBJ24 { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_2_T_OBJ24); } }
        public IGroup ST_PAGE_HDR_3 { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_3); } }
        public IGroup ST_PAGE_HDR_4 { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_4); } }
        public IGroup ST_PAGE_HDR_5 { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_5); } }
        public IField ST_PAGE_HDR_5_A_OBJ27 { get { return GetElementByName<IField>(Names.ST_PAGE_HDR_5_A_OBJ27); } }
        public IGroup ST_PAGE_HDR_6 { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_6); } }
        public IGroup ST_PAGE_HDR_7 { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_7); } }
        public IGroup ST_PAGE_HDR_8 { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_8); } }
        public IGroup ST_PAGE_HDR_9 { get { return GetElementByName<IGroup>(Names.ST_PAGE_HDR_9); } }
        public IGroup SS_WORK_FIELDS { get { return GetElementByName<IGroup>(Names.SS_WORK_FIELDS); } }
        public IField WS_SS_CNTL_HDR_FLAG { get { return GetElementByName<IField>(Names.WS_SS_CNTL_HDR_FLAG); } }
        public ICheckField WS_SS_CNTL_HDR { get { return GetElementByName<ICheckField>(Names.WS_SS_CNTL_HDR); } }
        public IField WS_SS_CNTL_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_SS_CNTL_FTR_FLAG); } }
        public ICheckField WS_SS_CNTL_FTR { get { return GetElementByName<ICheckField>(Names.WS_SS_CNTL_FTR); } }
        public IField WS_SS_RPT_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_SS_RPT_FTR_FLAG); } }
        public ICheckField WS_SS_RPT_FTR { get { return GetElementByName<ICheckField>(Names.WS_SS_RPT_FTR); } }
        public IField WS_SS_DTL_LINE_QT { get { return GetElementByName<IField>(Names.WS_SS_DTL_LINE_QT); } }
        public IField WS_SS_PG_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_SS_PG_HDR_LINE_QT); } }
        public IField WS_SS_PG_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_SS_PG_FTR_LINE_QT); } }
        public IField WS_SS_RPT_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_SS_RPT_HDR_LINE_QT); } }
        public IField WS_SS_RPT_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_SS_RPT_FTR_LINE_QT); } }
        public IField WS_SS_LINE_SPACING { get { return GetElementByName<IField>(Names.WS_SS_LINE_SPACING); } }
        public IField WS_SS_RPT_TYPE_CD { get { return GetElementByName<IField>(Names.WS_SS_RPT_TYPE_CD); } }
        public ICheckField WS_SS_SUMMARY_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_SS_SUMMARY_RPT_REQUESTED); } }
        public ICheckField WS_SS_DTL_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_SS_DTL_RPT_REQUESTED); } }
        public IField WS_SS_SECTION_PROCESSING_IND { get { return GetElementByName<IField>(Names.WS_SS_SECTION_PROCESSING_IND); } }
        public ICheckField WS_SS_RPT_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SS_RPT_HDR_IS_PROCESSED); } }
        public ICheckField WS_SS_RPT_FTR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SS_RPT_FTR_IS_PROCESSED); } }
        public ICheckField WS_SS_PG_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SS_PG_HDR_IS_PROCESSED); } }
        public ICheckField WS_SS_BODY_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_SS_BODY_IS_PROCESSED); } }
        public IField WS_SS_KEEP_DTL_TOGETHER_FG { get { return GetElementByName<IField>(Names.WS_SS_KEEP_DTL_TOGETHER_FG); } }
        public IField WS_SS_PRINT_PG_BRK_SPACING { get { return GetElementByName<IField>(Names.WS_SS_PRINT_PG_BRK_SPACING); } }
        public IField WS_SS_PRINT_PG_BRK_LINE { get { return GetElementByName<IField>(Names.WS_SS_PRINT_PG_BRK_LINE); } }
        public IField WS_SS_PRINT_RPT_FTR_LINE { get { return GetElementByName<IField>(Names.WS_SS_PRINT_RPT_FTR_LINE); } }
        public IField WS_SS_PG_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_SS_PG_BRK_FLAG); } }
        public IField WS_SS_CUR_RPT_HDR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_SS_CUR_RPT_HDR_LINE_NUM); } }
        public IField WS_SS_CUR_RPT_FTR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_SS_CUR_RPT_FTR_LINE_NUM); } }
        public IField WS_SS_FIRST_TIME_FLAG { get { return GetElementByName<IField>(Names.WS_SS_FIRST_TIME_FLAG); } }
        public ICheckField WS_SS_FIRST_TIME { get { return GetElementByName<ICheckField>(Names.WS_SS_FIRST_TIME); } }
        public IField WS_SS_DISABLE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_SS_DISABLE_SUPPRESS); } }
        public ICheckField WS_SS_SUPPRESS_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_SS_SUPPRESS_DUPLICATES); } }
        public ICheckField WS_SS_PRINT_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_SS_PRINT_DUPLICATES); } }
        public IField WS_SS_BODY_SECTION_LINES { get { return GetElementByName<IField>(Names.WS_SS_BODY_SECTION_LINES); } }
        public IField WS_SS_BODY_SUPPRESS_LINES { get { return GetElementByName<IField>(Names.WS_SS_BODY_SUPPRESS_LINES); } }
        public IField WS_SS_GR_COUNTER { get { return GetElementByName<IField>(Names.WS_SS_GR_COUNTER); } }
        public IField WS_SS_PAGE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_SS_PAGE_SUPPRESS); } }
        public IField WS_SS_PAGE_SUPPRESS_AFTER { get { return GetElementByName<IField>(Names.WS_SS_PAGE_SUPPRESS_AFTER); } }
        public IField WS_SS_PAGE_DTL_LINES { get { return GetElementByName<IField>(Names.WS_SS_PAGE_DTL_LINES); } }
        public IField WS_SS_CURRENTLY_WRAPPING { get { return GetElementByName<IField>(Names.WS_SS_CURRENTLY_WRAPPING); } }
        public IField WS_SS_CUR_PRINTING_PAGE_HDR { get { return GetElementByName<IField>(Names.WS_SS_CUR_PRINTING_PAGE_HDR); } }
        public IField SS_EDIT_PATTERN_OBJ33 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ33); } }
        public IField SS_EDIT_PATTERN_OBJ34 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ34); } }
        public IField SS_EDIT_PATTERN_OBJ35 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ35); } }
        public IField SS_EDIT_PATTERN_OBJ36 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ36); } }
        public IField SS_EDIT_PATTERN_OBJ37 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ37); } }
        public IField SS_EDIT_PATTERN_OBJ38 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ38); } }
        public IField SS_EDIT_PATTERN_OBJ39 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ39); } }
        public IField SS_EDIT_PATTERN_OBJ40 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ40); } }
        public IField SS_EDIT_PATTERN_OBJ43 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ43); } }
        public IField SS_EDIT_PATTERN_OBJ41 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ41); } }
        public IField SS_EDIT_PATTERN_OBJ42 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ42); } }
        public IField SS_EDIT_PATTERN_OBJ4 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ4); } }
        public IField SS_EDIT_PATTERN_OBJ5 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ5); } }
        public IField SS_EDIT_PATTERN_OBJ6 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ6); } }
        public IField SS_EDIT_PATTERN_OBJ7 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ7); } }
        public IField SS_EDIT_PATTERN_OBJ8 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ8); } }
        public IField SS_EDIT_PATTERN_OBJ9 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ9); } }
        public IField SS_EDIT_PATTERN_OBJ10 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ10); } }
        public IField SS_EDIT_PATTERN_OBJ11 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ11); } }
        public IField SS_EDIT_PATTERN_OBJ12 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ12); } }
        public IField SS_EDIT_PATTERN_OBJ13 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ13); } }
        public IField SS_EDIT_PATTERN_OBJ14 { get { return GetElementByName<IField>(Names.SS_EDIT_PATTERN_OBJ14); } }
        public IGroup SS_DTL_LINE_SECTION { get { return GetElementByName<IGroup>(Names.SS_DTL_LINE_SECTION); } }
        public IField SS_DTL_LINE_BEFORE_SPACE { get { return GetElementByName<IField>(Names.SS_DTL_LINE_BEFORE_SPACE); } }
        public IField SS_DTL_LINE_AFTER_SPACING { get { return GetElementByName<IField>(Names.SS_DTL_LINE_AFTER_SPACING); } }
        public IField SS_DTL_LINE_RESETPG_AFTER { get { return GetElementByName<IField>(Names.SS_DTL_LINE_RESETPG_AFTER); } }
        public IField SS_DTL_LINE_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.SS_DTL_LINE_KEEP_TOGETHER); } }
        public IField SS_DTL_LINE_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.SS_DTL_LINE_SUPPRSS_BLANK); } }
        public IField SS_DTL_LINE_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.SS_DTL_LINE_PRINT_ATBOTTM); } }
        public IField SS_DTL_LINE_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.SS_DTL_LINE_KEEP_WITHNEXT); } }
        public IField SS_DTL_LINE_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.SS_DTL_LINE_BEFORE_PG_BRK); } }
        public IField SS_DTL_LINE_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.SS_DTL_LINE_AFTER_PG_BRK); } }
        public IField SS_DTL_LINE_PRINT_FLAG { get { return GetElementByName<IField>(Names.SS_DTL_LINE_PRINT_FLAG); } }
        public IGroup SS_DTL_LINE_0 { get { return GetElementByName<IGroup>(Names.SS_DTL_LINE_0); } }
        public IField SS_DTL_LINE_0_A_OBJ1 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_0_A_OBJ1); } }
        public IGroup SS_DTL_LINE_1 { get { return GetElementByName<IGroup>(Names.SS_DTL_LINE_1); } }
        public IField SS_DTL_LINE_1_A_OBJ2 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ2); } }
        public IField SS_DTL_LINE_1_A_OBJ33 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ33); } }
        public IField SS_DTL_SUPRES_1_A_OBJ33 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ33); } }
        public IField SS_DTL_LINE_1_A_OBJ34 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ34); } }
        public IField SS_DTL_SUPRES_1_A_OBJ34 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ34); } }
        public IField SS_DTL_LINE_1_A_OBJ35 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ35); } }
        public IField SS_DTL_SUPRES_1_A_OBJ35 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ35); } }
        public IField SS_DTL_LINE_1_A_OBJ36 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ36); } }
        public IField SS_DTL_SUPRES_1_A_OBJ36 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ36); } }
        public IField SS_DTL_LINE_1_A_OBJ37 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ37); } }
        public IField SS_DTL_SUPRES_1_A_OBJ37 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ37); } }
        public IField SS_DTL_LINE_1_A_OBJ38 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ38); } }
        public IField SS_DTL_SUPRES_1_A_OBJ38 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ38); } }
        public IField SS_DTL_LINE_1_A_OBJ39 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ39); } }
        public IField SS_DTL_SUPRES_1_A_OBJ39 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ39); } }
        public IField SS_DTL_LINE_1_A_OBJ40 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ40); } }
        public IField SS_DTL_SUPRES_1_A_OBJ40 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ40); } }
        public IField SS_DTL_LINE_1_A_OBJ43 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ43); } }
        public IField SS_DTL_SUPRES_1_A_OBJ43 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ43); } }
        public IField SS_DTL_LINE_1_A_OBJ41 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ41); } }
        public IField SS_DTL_SUPRES_1_A_OBJ41 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ41); } }
        public IField SS_DTL_LINE_1_A_OBJ42 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_1_A_OBJ42); } }
        public IField SS_DTL_SUPRES_1_A_OBJ42 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_1_A_OBJ42); } }
        public IGroup SS_DTL_LINE_2 { get { return GetElementByName<IGroup>(Names.SS_DTL_LINE_2); } }
        public IField SS_DTL_LINE_2_A_OBJ3 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ3); } }
        public IField SS_DTL_LINE_2_A_OBJ4 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ4); } }
        public IField SS_DTL_SUPRES_2_A_OBJ4 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ4); } }
        public IField SS_DTL_LINE_2_A_OBJ5 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ5); } }
        public IField SS_DTL_SUPRES_2_A_OBJ5 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ5); } }
        public IField SS_DTL_LINE_2_A_OBJ6 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ6); } }
        public IField SS_DTL_SUPRES_2_A_OBJ6 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ6); } }
        public IField SS_DTL_LINE_2_A_OBJ7 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ7); } }
        public IField SS_DTL_SUPRES_2_A_OBJ7 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ7); } }
        public IField SS_DTL_LINE_2_A_OBJ8 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ8); } }
        public IField SS_DTL_SUPRES_2_A_OBJ8 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ8); } }
        public IField SS_DTL_LINE_2_A_OBJ9 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ9); } }
        public IField SS_DTL_SUPRES_2_A_OBJ9 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ9); } }
        public IField SS_DTL_LINE_2_A_OBJ10 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ10); } }
        public IField SS_DTL_SUPRES_2_A_OBJ10 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ10); } }
        public IField SS_DTL_LINE_2_A_OBJ11 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ11); } }
        public IField SS_DTL_SUPRES_2_A_OBJ11 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ11); } }
        public IField SS_DTL_LINE_2_A_OBJ12 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ12); } }
        public IField SS_DTL_SUPRES_2_A_OBJ12 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ12); } }
        public IField SS_DTL_LINE_2_A_OBJ13 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ13); } }
        public IField SS_DTL_SUPRES_2_A_OBJ13 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ13); } }
        public IField SS_DTL_LINE_2_A_OBJ14 { get { return GetElementByName<IField>(Names.SS_DTL_LINE_2_A_OBJ14); } }
        public IField SS_DTL_SUPRES_2_A_OBJ14 { get { return GetElementByName<IField>(Names.SS_DTL_SUPRES_2_A_OBJ14); } }
        public IGroup SS_DTL_LINE_3 { get { return GetElementByName<IGroup>(Names.SS_DTL_LINE_3); } }
        public IGroup SS_RPT_FTR_SECTION { get { return GetElementByName<IGroup>(Names.SS_RPT_FTR_SECTION); } }
        public IField SS_RPT_FTR_BEFORE_SPACE { get { return GetElementByName<IField>(Names.SS_RPT_FTR_BEFORE_SPACE); } }
        public IField SS_RPT_FTR_AFTER_SPACING { get { return GetElementByName<IField>(Names.SS_RPT_FTR_AFTER_SPACING); } }
        public IField SS_RPT_FTR_RESETPG_AFTER { get { return GetElementByName<IField>(Names.SS_RPT_FTR_RESETPG_AFTER); } }
        public IField SS_RPT_FTR_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.SS_RPT_FTR_KEEP_TOGETHER); } }
        public IField SS_RPT_FTR_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.SS_RPT_FTR_SUPPRSS_BLANK); } }
        public IField SS_RPT_FTR_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.SS_RPT_FTR_PRINT_ATBOTTM); } }
        public IField SS_RPT_FTR_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.SS_RPT_FTR_KEEP_WITHNEXT); } }
        public IField SS_RPT_FTR_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.SS_RPT_FTR_BEFORE_PG_BRK); } }
        public IField SS_RPT_FTR_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.SS_RPT_FTR_AFTER_PG_BRK); } }
        public IField SS_RPT_FTR_PRINT_FLAG { get { return GetElementByName<IField>(Names.SS_RPT_FTR_PRINT_FLAG); } }
        public IGroup SS_RPT_FTR_0 { get { return GetElementByName<IGroup>(Names.SS_RPT_FTR_0); } }
        public IGroup SS_RPT_FTR_1 { get { return GetElementByName<IGroup>(Names.SS_RPT_FTR_1); } }
        public IGroup SS_PAGE_HDR_SECTION { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_SECTION); } }
        public IField SS_PAGE_HDR_BEFORE_SPACE { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_BEFORE_SPACE); } }
        public IField SS_PAGE_HDR_AFTER_SPACING { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_AFTER_SPACING); } }
        public IField SS_PAGE_HDR_RESETPG_AFTER { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_RESETPG_AFTER); } }
        public IField SS_PAGE_HDR_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_KEEP_TOGETHER); } }
        public IField SS_PAGE_HDR_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_SUPPRSS_BLANK); } }
        public IField SS_PAGE_HDR_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_PRINT_ATBOTTM); } }
        public IField SS_PAGE_HDR_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_KEEP_WITHNEXT); } }
        public IField SS_PAGE_HDR_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_BEFORE_PG_BRK); } }
        public IField SS_PAGE_HDR_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_AFTER_PG_BRK); } }
        public IField SS_PAGE_HDR_PRINT_FLAG { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_PRINT_FLAG); } }
        public IGroup SS_PAGE_HDR_0 { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_0); } }
        public IField SS_PAGE_HDR_0_P_OBJ19 { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_0_P_OBJ19); } }
        public IGroup SS_PAGE_HDR_1 { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_1); } }
        public IField SS_PAGE_HDR_1_D_OBJ21 { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_1_D_OBJ21); } }
        public IGroup SS_PAGE_HDR_2 { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_2); } }
        public IField SS_PAGE_HDR_2_T_OBJ24 { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_2_T_OBJ24); } }
        public IGroup SS_PAGE_HDR_3 { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_3); } }
        public IGroup SS_PAGE_HDR_4 { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_4); } }
        public IGroup SS_PAGE_HDR_5 { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_5); } }
        public IField SS_PAGE_HDR_5_A_OBJ28 { get { return GetElementByName<IField>(Names.SS_PAGE_HDR_5_A_OBJ28); } }
        public IGroup SS_PAGE_HDR_6 { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_6); } }
        public IGroup SS_PAGE_HDR_7 { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_7); } }
        public IGroup SS_PAGE_HDR_8 { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_8); } }
        public IGroup SS_PAGE_HDR_9 { get { return GetElementByName<IGroup>(Names.SS_PAGE_HDR_9); } }
        public IGroup MAIN_WORK_FIELDS { get { return GetElementByName<IGroup>(Names.MAIN_WORK_FIELDS); } }
        public IField WS_MAIN_CNTL_HDR_FLAG { get { return GetElementByName<IField>(Names.WS_MAIN_CNTL_HDR_FLAG); } }
        public ICheckField WS_MAIN_CNTL_HDR { get { return GetElementByName<ICheckField>(Names.WS_MAIN_CNTL_HDR); } }
        public IField WS_MAIN_CNTL_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_MAIN_CNTL_FTR_FLAG); } }
        public ICheckField WS_MAIN_CNTL_FTR { get { return GetElementByName<ICheckField>(Names.WS_MAIN_CNTL_FTR); } }
        public IField WS_MAIN_RPT_FTR_FLAG { get { return GetElementByName<IField>(Names.WS_MAIN_RPT_FTR_FLAG); } }
        public ICheckField WS_MAIN_RPT_FTR { get { return GetElementByName<ICheckField>(Names.WS_MAIN_RPT_FTR); } }
        public IField WS_MAIN_DTL_LINE_QT { get { return GetElementByName<IField>(Names.WS_MAIN_DTL_LINE_QT); } }
        public IField WS_MAIN_PG_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_MAIN_PG_HDR_LINE_QT); } }
        public IField WS_MAIN_PG_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_MAIN_PG_FTR_LINE_QT); } }
        public IField WS_MAIN_RPT_HDR_LINE_QT { get { return GetElementByName<IField>(Names.WS_MAIN_RPT_HDR_LINE_QT); } }
        public IField WS_MAIN_RPT_FTR_LINE_QT { get { return GetElementByName<IField>(Names.WS_MAIN_RPT_FTR_LINE_QT); } }
        public IField WS_MAIN_LINE_SPACING { get { return GetElementByName<IField>(Names.WS_MAIN_LINE_SPACING); } }
        public IField WS_MAIN_RPT_TYPE_CD { get { return GetElementByName<IField>(Names.WS_MAIN_RPT_TYPE_CD); } }
        public ICheckField WS_MAIN_SUMMARY_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_SUMMARY_RPT_REQUESTED); } }
        public ICheckField WS_MAIN_DTL_RPT_REQUESTED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_DTL_RPT_REQUESTED); } }
        public IField WS_MAIN_SECTION_PROCESSING_IND { get { return GetElementByName<IField>(Names.WS_MAIN_SECTION_PROCESSING_IND); } }
        public ICheckField WS_MAIN_RPT_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_RPT_HDR_IS_PROCESSED); } }
        public ICheckField WS_MAIN_RPT_FTR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_RPT_FTR_IS_PROCESSED); } }
        public ICheckField WS_MAIN_PG_HDR_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_PG_HDR_IS_PROCESSED); } }
        public ICheckField WS_MAIN_BODY_IS_PROCESSED { get { return GetElementByName<ICheckField>(Names.WS_MAIN_BODY_IS_PROCESSED); } }
        public IField WS_MAIN_KEEP_DTL_TOGETHER_FG { get { return GetElementByName<IField>(Names.WS_MAIN_KEEP_DTL_TOGETHER_FG); } }
        public IField WS_MAIN_PRINT_PG_BRK_SPACING { get { return GetElementByName<IField>(Names.WS_MAIN_PRINT_PG_BRK_SPACING); } }
        public IField WS_MAIN_PRINT_PG_BRK_LINE { get { return GetElementByName<IField>(Names.WS_MAIN_PRINT_PG_BRK_LINE); } }
        public IField WS_MAIN_PRINT_RPT_FTR_LINE { get { return GetElementByName<IField>(Names.WS_MAIN_PRINT_RPT_FTR_LINE); } }
        public IField WS_MAIN_PG_BRK_FLAG { get { return GetElementByName<IField>(Names.WS_MAIN_PG_BRK_FLAG); } }
        public IField WS_MAIN_CUR_RPT_HDR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_MAIN_CUR_RPT_HDR_LINE_NUM); } }
        public IField WS_MAIN_CUR_RPT_FTR_LINE_NUM { get { return GetElementByName<IField>(Names.WS_MAIN_CUR_RPT_FTR_LINE_NUM); } }
        public IField WS_MAIN_FIRST_TIME_FLAG { get { return GetElementByName<IField>(Names.WS_MAIN_FIRST_TIME_FLAG); } }
        public ICheckField WS_MAIN_FIRST_TIME { get { return GetElementByName<ICheckField>(Names.WS_MAIN_FIRST_TIME); } }
        public IField WS_MAIN_DISABLE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_MAIN_DISABLE_SUPPRESS); } }
        public ICheckField WS_MAIN_SUPPRESS_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_MAIN_SUPPRESS_DUPLICATES); } }
        public ICheckField WS_MAIN_PRINT_DUPLICATES { get { return GetElementByName<ICheckField>(Names.WS_MAIN_PRINT_DUPLICATES); } }
        public IField WS_MAIN_BODY_SECTION_LINES { get { return GetElementByName<IField>(Names.WS_MAIN_BODY_SECTION_LINES); } }
        public IField WS_MAIN_BODY_SUPPRESS_LINES { get { return GetElementByName<IField>(Names.WS_MAIN_BODY_SUPPRESS_LINES); } }
        public IField WS_MAIN_GR_COUNTER { get { return GetElementByName<IField>(Names.WS_MAIN_GR_COUNTER); } }
        public IField WS_MAIN_PAGE_SUPPRESS { get { return GetElementByName<IField>(Names.WS_MAIN_PAGE_SUPPRESS); } }
        public IField WS_MAIN_PAGE_SUPPRESS_AFTER { get { return GetElementByName<IField>(Names.WS_MAIN_PAGE_SUPPRESS_AFTER); } }
        public IField WS_MAIN_PAGE_DTL_LINES { get { return GetElementByName<IField>(Names.WS_MAIN_PAGE_DTL_LINES); } }
        public IField WS_MAIN_CURRENTLY_WRAPPING { get { return GetElementByName<IField>(Names.WS_MAIN_CURRENTLY_WRAPPING); } }
        public IField WS_MAIN_CUR_PRINTING_PAGE_HDR { get { return GetElementByName<IField>(Names.WS_MAIN_CUR_PRINTING_PAGE_HDR); } }
        public IField MAIN_EDIT_PATTERN_OBJ33 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ33); } }
        public IField MAIN_EDIT_PATTERN_OBJ34 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ34); } }
        public IField MAIN_EDIT_PATTERN_OBJ35 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ35); } }
        public IField MAIN_EDIT_PATTERN_OBJ36 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ36); } }
        public IField MAIN_EDIT_PATTERN_OBJ37 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ37); } }
        public IField MAIN_EDIT_PATTERN_OBJ38 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ38); } }
        public IField MAIN_EDIT_PATTERN_OBJ39 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ39); } }
        public IField MAIN_EDIT_PATTERN_OBJ40 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ40); } }
        public IField MAIN_EDIT_PATTERN_OBJ41 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ41); } }
        public IField MAIN_EDIT_PATTERN_OBJ42 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ42); } }
        public IField MAIN_EDIT_PATTERN_OBJ43 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ43); } }
        public IField MAIN_EDIT_PATTERN_OBJ4 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ4); } }
        public IField MAIN_EDIT_PATTERN_OBJ5 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ5); } }
        public IField MAIN_EDIT_PATTERN_OBJ6 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ6); } }
        public IField MAIN_EDIT_PATTERN_OBJ7 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ7); } }
        public IField MAIN_EDIT_PATTERN_OBJ8 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ8); } }
        public IField MAIN_EDIT_PATTERN_OBJ9 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ9); } }
        public IField MAIN_EDIT_PATTERN_OBJ10 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ10); } }
        public IField MAIN_EDIT_PATTERN_OBJ11 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ11); } }
        public IField MAIN_EDIT_PATTERN_OBJ12 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ12); } }
        public IField MAIN_EDIT_PATTERN_OBJ13 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ13); } }
        public IField MAIN_EDIT_PATTERN_OBJ14 { get { return GetElementByName<IField>(Names.MAIN_EDIT_PATTERN_OBJ14); } }
        public IGroup MAIN_DTL_LINE_SECTION { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_SECTION); } }
        public IField MAIN_DTL_LINE_BEFORE_SPACE { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_BEFORE_SPACE); } }
        public IField MAIN_DTL_LINE_AFTER_SPACING { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_AFTER_SPACING); } }
        public IField MAIN_DTL_LINE_RESETPG_AFTER { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_RESETPG_AFTER); } }
        public IField MAIN_DTL_LINE_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_KEEP_TOGETHER); } }
        public IField MAIN_DTL_LINE_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_SUPPRSS_BLANK); } }
        public IField MAIN_DTL_LINE_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_PRINT_ATBOTTM); } }
        public IField MAIN_DTL_LINE_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_KEEP_WITHNEXT); } }
        public IField MAIN_DTL_LINE_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_BEFORE_PG_BRK); } }
        public IField MAIN_DTL_LINE_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_AFTER_PG_BRK); } }
        public IField MAIN_DTL_LINE_PRINT_FLAG { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_PRINT_FLAG); } }
        public IGroup MAIN_DTL_LINE_0 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_0); } }
        public IField MAIN_DTL_LINE_0_A_OBJ1 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_0_A_OBJ1); } }
        public IGroup MAIN_DTL_LINE_1 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_1); } }
        public IField MAIN_DTL_LINE_1_A_OBJ2 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ2); } }
        public IField MAIN_DTL_LINE_1_A_OBJ33 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ33); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ33 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ33); } }
        public IField MAIN_DTL_LINE_1_A_OBJ34 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ34); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ34 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ34); } }
        public IField MAIN_DTL_LINE_1_A_OBJ35 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ35); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ35 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ35); } }
        public IField MAIN_DTL_LINE_1_A_OBJ36 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ36); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ36 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ36); } }
        public IField MAIN_DTL_LINE_1_A_OBJ37 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ37); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ37 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ37); } }
        public IField MAIN_DTL_LINE_1_A_OBJ38 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ38); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ38 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ38); } }
        public IField MAIN_DTL_LINE_1_A_OBJ39 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ39); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ39 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ39); } }
        public IField MAIN_DTL_LINE_1_A_OBJ40 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ40); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ40 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ40); } }
        public IField MAIN_DTL_LINE_1_A_OBJ41 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ41); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ41 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ41); } }
        public IField MAIN_DTL_LINE_1_A_OBJ42 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ42); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ42 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ42); } }
        public IField MAIN_DTL_LINE_1_A_OBJ43 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_1_A_OBJ43); } }
        public IField MAIN_DTL_SUPRES_1_A_OBJ43 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_1_A_OBJ43); } }
        public IGroup MAIN_DTL_LINE_2 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_2); } }
        public IField MAIN_DTL_LINE_2_A_OBJ3 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ3); } }
        public IField MAIN_DTL_LINE_2_A_OBJ4 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ4); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ4 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ4); } }
        public IField MAIN_DTL_LINE_2_A_OBJ5 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ5); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ5 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ5); } }
        public IField MAIN_DTL_LINE_2_A_OBJ6 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ6); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ6 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ6); } }
        public IField MAIN_DTL_LINE_2_A_OBJ7 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ7); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ7 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ7); } }
        public IField MAIN_DTL_LINE_2_A_OBJ8 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ8); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ8 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ8); } }
        public IField MAIN_DTL_LINE_2_A_OBJ9 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ9); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ9 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ9); } }
        public IField MAIN_DTL_LINE_2_A_OBJ10 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ10); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ10 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ10); } }
        public IField MAIN_DTL_LINE_2_A_OBJ11 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ11); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ11 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ11); } }
        public IField MAIN_DTL_LINE_2_A_OBJ12 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ12); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ12 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ12); } }
        public IField MAIN_DTL_LINE_2_A_OBJ13 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ13); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ13 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ13); } }
        public IField MAIN_DTL_LINE_2_A_OBJ14 { get { return GetElementByName<IField>(Names.MAIN_DTL_LINE_2_A_OBJ14); } }
        public IField MAIN_DTL_SUPRES_2_A_OBJ14 { get { return GetElementByName<IField>(Names.MAIN_DTL_SUPRES_2_A_OBJ14); } }
        public IGroup MAIN_DTL_LINE_3 { get { return GetElementByName<IGroup>(Names.MAIN_DTL_LINE_3); } }
        public IGroup MAIN_PAGE_HDR_SECTION { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_SECTION); } }
        public IField MAIN_PAGE_HDR_BEFORE_SPACE { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_BEFORE_SPACE); } }
        public IField MAIN_PAGE_HDR_AFTER_SPACING { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_AFTER_SPACING); } }
        public IField MAIN_PAGE_HDR_RESETPG_AFTER { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_RESETPG_AFTER); } }
        public IField MAIN_PAGE_HDR_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_KEEP_TOGETHER); } }
        public IField MAIN_PAGE_HDR_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_SUPPRSS_BLANK); } }
        public IField MAIN_PAGE_HDR_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_PRINT_ATBOTTM); } }
        public IField MAIN_PAGE_HDR_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_KEEP_WITHNEXT); } }
        public IField MAIN_PAGE_HDR_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_BEFORE_PG_BRK); } }
        public IField MAIN_PAGE_HDR_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_AFTER_PG_BRK); } }
        public IField MAIN_PAGE_HDR_PRINT_FLAG { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_PRINT_FLAG); } }
        public IGroup MAIN_PAGE_HDR_0 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_0); } }
        public IField MAIN_PAGE_HDR_0_P_OBJ26 { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_0_P_OBJ26); } }
        public IGroup MAIN_PAGE_HDR_1 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_1); } }
        public IField MAIN_PAGE_HDR_1_D_OBJ30 { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_1_D_OBJ30); } }
        public IGroup MAIN_PAGE_HDR_2 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_2); } }
        public IField MAIN_PAGE_HDR_2_T_OBJ31 { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_2_T_OBJ31); } }
        public IGroup MAIN_PAGE_HDR_3 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_3); } }
        public IGroup MAIN_PAGE_HDR_4 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_4); } }
        public IGroup MAIN_PAGE_HDR_5 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_5); } }
        public IField MAIN_PAGE_HDR_5_A_OBJ22 { get { return GetElementByName<IField>(Names.MAIN_PAGE_HDR_5_A_OBJ22); } }
        public IGroup MAIN_PAGE_HDR_6 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_6); } }
        public IGroup MAIN_PAGE_HDR_7 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_7); } }
        public IGroup MAIN_PAGE_HDR_8 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_8); } }
        public IGroup MAIN_PAGE_HDR_9 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_HDR_9); } }
        public IGroup MAIN_PAGE_FTR_SECTION { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_FTR_SECTION); } }
        public IField MAIN_PAGE_FTR_BEFORE_SPACE { get { return GetElementByName<IField>(Names.MAIN_PAGE_FTR_BEFORE_SPACE); } }
        public IField MAIN_PAGE_FTR_AFTER_SPACING { get { return GetElementByName<IField>(Names.MAIN_PAGE_FTR_AFTER_SPACING); } }
        public IField MAIN_PAGE_FTR_RESETPG_AFTER { get { return GetElementByName<IField>(Names.MAIN_PAGE_FTR_RESETPG_AFTER); } }
        public IField MAIN_PAGE_FTR_KEEP_TOGETHER { get { return GetElementByName<IField>(Names.MAIN_PAGE_FTR_KEEP_TOGETHER); } }
        public IField MAIN_PAGE_FTR_SUPPRSS_BLANK { get { return GetElementByName<IField>(Names.MAIN_PAGE_FTR_SUPPRSS_BLANK); } }
        public IField MAIN_PAGE_FTR_PRINT_ATBOTTM { get { return GetElementByName<IField>(Names.MAIN_PAGE_FTR_PRINT_ATBOTTM); } }
        public IField MAIN_PAGE_FTR_KEEP_WITHNEXT { get { return GetElementByName<IField>(Names.MAIN_PAGE_FTR_KEEP_WITHNEXT); } }
        public IField MAIN_PAGE_FTR_BEFORE_PG_BRK { get { return GetElementByName<IField>(Names.MAIN_PAGE_FTR_BEFORE_PG_BRK); } }
        public IField MAIN_PAGE_FTR_AFTER_PG_BRK { get { return GetElementByName<IField>(Names.MAIN_PAGE_FTR_AFTER_PG_BRK); } }
        public IField MAIN_PAGE_FTR_PRINT_FLAG { get { return GetElementByName<IField>(Names.MAIN_PAGE_FTR_PRINT_FLAG); } }
        public IGroup MAIN_PAGE_FTR_0 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_FTR_0); } }
        public IGroup MAIN_PAGE_FTR_1 { get { return GetElementByName<IGroup>(Names.MAIN_PAGE_FTR_1); } }
        public IGroup P_IMPORT_EV1 { get { return GetElementByName<IGroup>(Names.P_IMPORT_EV1); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET); } }
        public IField P_COLLECTION_OFFICER_000101MS { get { return GetElementByName<IField>(Names.P_COLLECTION_OFFICER_000101MS); } }
        public IField P_COLLECTION_OFFICER_0001_001 { get { return GetElementByName<IField>(Names.P_COLLECTION_OFFICER_0001_001); } }
        public IField P_COLLECTION_OFFICER_000101XX { get { return GetElementByName<IField>(Names.P_COLLECTION_OFFICER_000101XX); } }
        public IGroup P_IMPORT_EV2 { get { return GetElementByName<IGroup>(Names.P_IMPORT_EV2); } }
        public IGroup P_REPORT_PARMS_ET { get { return GetElementByName<IGroup>(Names.P_REPORT_PARMS_ET); } }
        public IField P_PARM1_0002_002MS { get { return GetElementByName<IField>(Names.P_PARM1_0002_002MS); } }
        public IField P_PARM1_0002_002 { get { return GetElementByName<IField>(Names.P_PARM1_0002_002); } }
        public IField P_PARM1_0002_002XX { get { return GetElementByName<IField>(Names.P_PARM1_0002_002XX); } }
        public IField P_PARM2_0002_003MS { get { return GetElementByName<IField>(Names.P_PARM2_0002_003MS); } }
        public IField P_PARM2_0002_003 { get { return GetElementByName<IField>(Names.P_PARM2_0002_003); } }
        public IField P_PARM2_0002_003XX { get { return GetElementByName<IField>(Names.P_PARM2_0002_003XX); } }
        public IField P_SUBREPORT_CODE_0002_004MS { get { return GetElementByName<IField>(Names.P_SUBREPORT_CODE_0002_004MS); } }
        public IField P_SUBREPORT_CODE_0002_004 { get { return GetElementByName<IField>(Names.P_SUBREPORT_CODE_0002_004); } }
        public IField P_SUBREPORT_CODE_0002_004XX { get { return GetElementByName<IField>(Names.P_SUBREPORT_CODE_0002_004XX); } }
        public IGroup P_IMPORT_EV3 { get { return GetElementByName<IGroup>(Names.P_IMPORT_EV3); } }
        public IGroup P_REPORT_LITERALS_ET { get { return GetElementByName<IGroup>(Names.P_REPORT_LITERALS_ET); } }
        public IField P_SUB_HEADING_1_0003_005MS { get { return GetElementByName<IField>(Names.P_SUB_HEADING_1_0003_005MS); } }
        public IField P_SUB_HEADING_1_0003_005 { get { return GetElementByName<IField>(Names.P_SUB_HEADING_1_0003_005); } }
        public IField P_SUB_HEADING_1_0003_005XX { get { return GetElementByName<IField>(Names.P_SUB_HEADING_1_0003_005XX); } }
        public IField P_SUB_HEADING_2_0003_006MS { get { return GetElementByName<IField>(Names.P_SUB_HEADING_2_0003_006MS); } }
        public IField P_SUB_HEADING_2_0003_006 { get { return GetElementByName<IField>(Names.P_SUB_HEADING_2_0003_006); } }
        public IField P_SUB_HEADING_2_0003_006XX { get { return GetElementByName<IField>(Names.P_SUB_HEADING_2_0003_006XX); } }
        public IField P_SUB_HEADING_3_0003_007MS { get { return GetElementByName<IField>(Names.P_SUB_HEADING_3_0003_007MS); } }
        public IField P_SUB_HEADING_3_0003_007 { get { return GetElementByName<IField>(Names.P_SUB_HEADING_3_0003_007); } }
        public IField P_SUB_HEADING_3_0003_007XX { get { return GetElementByName<IField>(Names.P_SUB_HEADING_3_0003_007XX); } }
        public IGroup P_IMPORT_TOTAL_EV4 { get { return GetElementByName<IGroup>(Names.P_IMPORT_TOTAL_EV4); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d2 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d2); } }
        public IField P_AMOUNT1_0004_008MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0004_008MS); } }
        public IField P_AMOUNT1_0004_008 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0004_008); } }
        public IField P_AMOUNT1_0004_008XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0004_008XX); } }
        public IGroup P_IMPORT_TOTAL_EV5 { get { return GetElementByName<IGroup>(Names.P_IMPORT_TOTAL_EV5); } }
        public IGroup P_IEF_SUPPLIED_ET { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET); } }
        public IField P_COUNT_0005_009MS { get { return GetElementByName<IField>(Names.P_COUNT_0005_009MS); } }
        public IField P_COUNT_0005_009 { get { return GetElementByName<IField>(Names.P_COUNT_0005_009); } }
        public IField P_COUNT_0005_009XX { get { return GetElementByName<IField>(Names.P_COUNT_0005_009XX); } }
        public IGroup P_IMPORT_TAF_TOTAL_EV6 { get { return GetElementByName<IGroup>(Names.P_IMPORT_TAF_TOTAL_EV6); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d3 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d3); } }
        public IField P_AMOUNT1_0006_010MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0006_010MS); } }
        public IField P_AMOUNT1_0006_010 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0006_010); } }
        public IField P_AMOUNT1_0006_010XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0006_010XX); } }
        public IGroup P_IMPORT_TAF_TOTAL_EV7 { get { return GetElementByName<IGroup>(Names.P_IMPORT_TAF_TOTAL_EV7); } }
        public IGroup P_IEF_SUPPLIED_ET_d2 { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET_d2); } }
        public IField P_COUNT_0007_011MS { get { return GetElementByName<IField>(Names.P_COUNT_0007_011MS); } }
        public IField P_COUNT_0007_011 { get { return GetElementByName<IField>(Names.P_COUNT_0007_011); } }
        public IField P_COUNT_0007_011XX { get { return GetElementByName<IField>(Names.P_COUNT_0007_011XX); } }
        public IGroup P_IMPORT_TAF_EV8 { get { return GetElementByName<IGroup>(Names.P_IMPORT_TAF_EV8); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d4 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d4); } }
        public IField P_AMOUNT1_0008_012MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0008_012MS); } }
        public IField P_AMOUNT1_0008_012 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0008_012); } }
        public IField P_AMOUNT1_0008_012XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0008_012XX); } }
        public IGroup P_IMPORT_TAF_EV9 { get { return GetElementByName<IGroup>(Names.P_IMPORT_TAF_EV9); } }
        public IGroup P_IEF_SUPPLIED_ET_d3 { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET_d3); } }
        public IField P_COUNT_0009_013MS { get { return GetElementByName<IField>(Names.P_COUNT_0009_013MS); } }
        public IField P_COUNT_0009_013 { get { return GetElementByName<IField>(Names.P_COUNT_0009_013); } }
        public IField P_COUNT_0009_013XX { get { return GetElementByName<IField>(Names.P_COUNT_0009_013XX); } }
        public IGroup P_IMPORT_XTAF_EV10 { get { return GetElementByName<IGroup>(Names.P_IMPORT_XTAF_EV10); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d5 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d5); } }
        public IField P_AMOUNT1_0010_014MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0010_014MS); } }
        public IField P_AMOUNT1_0010_014 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0010_014); } }
        public IField P_AMOUNT1_0010_014XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0010_014XX); } }
        public IGroup P_IMPORT_XTAF_EV11 { get { return GetElementByName<IGroup>(Names.P_IMPORT_XTAF_EV11); } }
        public IGroup P_IEF_SUPPLIED_ET_d4 { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET_d4); } }
        public IField P_COUNT_0011_015MS { get { return GetElementByName<IField>(Names.P_COUNT_0011_015MS); } }
        public IField P_COUNT_0011_015 { get { return GetElementByName<IField>(Names.P_COUNT_0011_015); } }
        public IField P_COUNT_0011_015XX { get { return GetElementByName<IField>(Names.P_COUNT_0011_015XX); } }
        public IGroup P_IMPORT_TAF_FC_EV12 { get { return GetElementByName<IGroup>(Names.P_IMPORT_TAF_FC_EV12); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d6 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d6); } }
        public IField P_AMOUNT1_0012_016MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0012_016MS); } }
        public IField P_AMOUNT1_0012_016 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0012_016); } }
        public IField P_AMOUNT1_0012_016XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0012_016XX); } }
        public IGroup P_IMPORT_TAF_FC_EV13 { get { return GetElementByName<IGroup>(Names.P_IMPORT_TAF_FC_EV13); } }
        public IGroup P_IEF_SUPPLIED_ET_d5 { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET_d5); } }
        public IField P_COUNT_0013_017MS { get { return GetElementByName<IField>(Names.P_COUNT_0013_017MS); } }
        public IField P_COUNT_0013_017 { get { return GetElementByName<IField>(Names.P_COUNT_0013_017); } }
        public IField P_COUNT_0013_017XX { get { return GetElementByName<IField>(Names.P_COUNT_0013_017XX); } }
        public IGroup P_IMPORT_NON_TAF_TOTAL_EV14 { get { return GetElementByName<IGroup>(Names.P_IMPORT_NON_TAF_TOTAL_EV14); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d7 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d7); } }
        public IField P_AMOUNT1_0014_018MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0014_018MS); } }
        public IField P_AMOUNT1_0014_018 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0014_018); } }
        public IField P_AMOUNT1_0014_018XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0014_018XX); } }
        public IGroup P_IMPORT_NON_TAF_TOTAL_EV15 { get { return GetElementByName<IGroup>(Names.P_IMPORT_NON_TAF_TOTAL_EV15); } }
        public IGroup P_IEF_SUPPLIED_ET_d6 { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET_d6); } }
        public IField P_COUNT_0015_019MS { get { return GetElementByName<IField>(Names.P_COUNT_0015_019MS); } }
        public IField P_COUNT_0015_019 { get { return GetElementByName<IField>(Names.P_COUNT_0015_019); } }
        public IField P_COUNT_0015_019XX { get { return GetElementByName<IField>(Names.P_COUNT_0015_019XX); } }
        public IGroup P_IMPORT_NA_EV16 { get { return GetElementByName<IGroup>(Names.P_IMPORT_NA_EV16); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d8 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d8); } }
        public IField P_AMOUNT1_0016_020MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0016_020MS); } }
        public IField P_AMOUNT1_0016_020 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0016_020); } }
        public IField P_AMOUNT1_0016_020XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0016_020XX); } }
        public IGroup P_IMPORT_NA_EV17 { get { return GetElementByName<IGroup>(Names.P_IMPORT_NA_EV17); } }
        public IGroup P_IEF_SUPPLIED_ET_d7 { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET_d7); } }
        public IField P_COUNT_0017_021MS { get { return GetElementByName<IField>(Names.P_COUNT_0017_021MS); } }
        public IField P_COUNT_0017_021 { get { return GetElementByName<IField>(Names.P_COUNT_0017_021); } }
        public IField P_COUNT_0017_021XX { get { return GetElementByName<IField>(Names.P_COUNT_0017_021XX); } }
        public IGroup P_IMPORT_PA_EV18 { get { return GetElementByName<IGroup>(Names.P_IMPORT_PA_EV18); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d9 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d9); } }
        public IField P_AMOUNT1_0018_022MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0018_022MS); } }
        public IField P_AMOUNT1_0018_022 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0018_022); } }
        public IField P_AMOUNT1_0018_022XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0018_022XX); } }
        public IGroup P_IMPORT_PA_EV19 { get { return GetElementByName<IGroup>(Names.P_IMPORT_PA_EV19); } }
        public IGroup P_IEF_SUPPLIED_ET_d8 { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET_d8); } }
        public IField P_COUNT_0019_023MS { get { return GetElementByName<IField>(Names.P_COUNT_0019_023MS); } }
        public IField P_COUNT_0019_023 { get { return GetElementByName<IField>(Names.P_COUNT_0019_023); } }
        public IField P_COUNT_0019_023XX { get { return GetElementByName<IField>(Names.P_COUNT_0019_023XX); } }
        public IGroup P_IMPORT_STATE_ONLY_TOTAL_EV20 { get { return GetElementByName<IGroup>(Names.P_IMPORT_STATE_ONLY_TOTAL_EV20); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d10 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d10); } }
        public IField P_AMOUNT1_0020_024MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0020_024MS); } }
        public IField P_AMOUNT1_0020_024 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0020_024); } }
        public IField P_AMOUNT1_0020_024XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0020_024XX); } }
        public IGroup P_IMPORT_STATE_ONLY_TOTAL_EV21 { get { return GetElementByName<IGroup>(Names.P_IMPORT_STATE_ONLY_TOTAL_EV21); } }
        public IGroup P_IEF_SUPPLIED_ET_d9 { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET_d9); } }
        public IField P_COUNT_0021_025MS { get { return GetElementByName<IField>(Names.P_COUNT_0021_025MS); } }
        public IField P_COUNT_0021_025 { get { return GetElementByName<IField>(Names.P_COUNT_0021_025); } }
        public IField P_COUNT_0021_025XX { get { return GetElementByName<IField>(Names.P_COUNT_0021_025XX); } }
        public IGroup P_IMPORT_GA_FC_EV22 { get { return GetElementByName<IGroup>(Names.P_IMPORT_GA_FC_EV22); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d11 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d11); } }
        public IField P_AMOUNT1_0022_026MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0022_026MS); } }
        public IField P_AMOUNT1_0022_026 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0022_026); } }
        public IField P_AMOUNT1_0022_026XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0022_026XX); } }
        public IGroup P_IMPORT_GA_FC_EV23 { get { return GetElementByName<IGroup>(Names.P_IMPORT_GA_FC_EV23); } }
        public IGroup P_IEF_SUPPLIED_ET_d10 { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET_d10); } }
        public IField P_COUNT_0023_027MS { get { return GetElementByName<IField>(Names.P_COUNT_0023_027MS); } }
        public IField P_COUNT_0023_027 { get { return GetElementByName<IField>(Names.P_COUNT_0023_027); } }
        public IField P_COUNT_0023_027XX { get { return GetElementByName<IField>(Names.P_COUNT_0023_027XX); } }
        public IGroup P_IMPORT_MHDD_EV24 { get { return GetElementByName<IGroup>(Names.P_IMPORT_MHDD_EV24); } }
        public IGroup P_COLLECTIONS_EXTRACT_ET_d12 { get { return GetElementByName<IGroup>(Names.P_COLLECTIONS_EXTRACT_ET_d12); } }
        public IField P_AMOUNT1_0024_028MS { get { return GetElementByName<IField>(Names.P_AMOUNT1_0024_028MS); } }
        public IField P_AMOUNT1_0024_028 { get { return GetElementByName<IField>(Names.P_AMOUNT1_0024_028); } }
        public IField P_AMOUNT1_0024_028XX { get { return GetElementByName<IField>(Names.P_AMOUNT1_0024_028XX); } }
        public IGroup P_IMPORT_MHDD_EV25 { get { return GetElementByName<IGroup>(Names.P_IMPORT_MHDD_EV25); } }
        public IGroup P_IEF_SUPPLIED_ET_d11 { get { return GetElementByName<IGroup>(Names.P_IEF_SUPPLIED_ET_d11); } }
        public IField P_COUNT_0025_029MS { get { return GetElementByName<IField>(Names.P_COUNT_0025_029MS); } }
        public IField P_COUNT_0025_029 { get { return GetElementByName<IField>(Names.P_COUNT_0025_029); } }
        public IField P_COUNT_0025_029XX { get { return GetElementByName<IField>(Names.P_COUNT_0025_029XX); } }
        public IGroup NUMERIC_EDIT_PATTERNS { get { return GetElementByName<IGroup>(Names.NUMERIC_EDIT_PATTERNS); } }
        public IField EP_INTEGER2 { get { return GetElementByName<IField>(Names.EP_INTEGER2); } }
        public IField EP_INTEGER { get { return GetElementByName<IField>(Names.EP_INTEGER); } }
        public IGroup EP_INTEGER_XX { get { return GetElementByName<IGroup>(Names.EP_INTEGER_XX); } }
        public IArrayElementAccessor<IField> EP_INTEGER_X { get { return GetArrayElementAccessor<IField>(Names.EP_INTEGER_X); } }
        public IField EP_DECIMAL { get { return GetElementByName<IField>(Names.EP_DECIMAL); } }
        public IGroup EP_DECIMAL_XX { get { return GetElementByName<IGroup>(Names.EP_DECIMAL_XX); } }
        public IArrayElementAccessor<IField> EP_DECIMAL_X { get { return GetArrayElementAccessor<IField>(Names.EP_DECIMAL_X); } }
        public IField EP_PRECISION { get { return GetElementByName<IField>(Names.EP_PRECISION); } }
        public IField EP_SCALE { get { return GetElementByName<IField>(Names.EP_SCALE); } }
        public IField EP_INP_INDEX { get { return GetElementByName<IField>(Names.EP_INP_INDEX); } }
        public IField EP_OUT_INDEX { get { return GetElementByName<IField>(Names.EP_OUT_INDEX); } }
        public IField EP_INDEX { get { return GetElementByName<IField>(Names.EP_INDEX); } }
        public IField EP_COUNT { get { return GetElementByName<IField>(Names.EP_COUNT); } }
        public IField EP_COUNT2 { get { return GetElementByName<IField>(Names.EP_COUNT2); } }
        public IField EP_SIGN { get { return GetElementByName<IField>(Names.EP_SIGN); } }
        public IField EP_DPOINT_USED { get { return GetElementByName<IField>(Names.EP_DPOINT_USED); } }
        public IField EP_SIGN_USED { get { return GetElementByName<IField>(Names.EP_SIGN_USED); } }
        public IField EP_DOLLAR_USED { get { return GetElementByName<IField>(Names.EP_DOLLAR_USED); } }
        public IField EP_FIRST_DIGIT { get { return GetElementByName<IField>(Names.EP_FIRST_DIGIT); } }
        public IField EP_ISTHERE_DCML { get { return GetElementByName<IField>(Names.EP_ISTHERE_DCML); } }
        public IField EP_ISTHERE_V { get { return GetElementByName<IField>(Names.EP_ISTHERE_V); } }
        public IField EP_INTEGER_LEN { get { return GetElementByName<IField>(Names.EP_INTEGER_LEN); } }
        public IGroup EP_SZNUMERIC { get { return GetElementByName<IGroup>(Names.EP_SZNUMERIC); } }
        public IArrayElementAccessor<IField> EP_SZNUMERIC_X { get { return GetArrayElementAccessor<IField>(Names.EP_SZNUMERIC_X); } }
        public IGroup EP_FORMATTED_VALUE { get { return GetElementByName<IGroup>(Names.EP_FORMATTED_VALUE); } }
        public IArrayElementAccessor<IField> EP_FORMATTED_VALUE_X { get { return GetArrayElementAccessor<IField>(Names.EP_FORMATTED_VALUE_X); } }
        public IGroup EP_EDIT_PATTERN { get { return GetElementByName<IGroup>(Names.EP_EDIT_PATTERN); } }
        public IArrayElementAccessor<IField> EP_EDIT_PATTERN_X { get { return GetArrayElementAccessor<IField>(Names.EP_EDIT_PATTERN_X); } }
        public IField EP_EDIT_PATTERN_LEN { get { return GetElementByName<IField>(Names.EP_EDIT_PATTERN_LEN); } }
        public IField EP_SZNUMERIC_LEN { get { return GetElementByName<IField>(Names.EP_SZNUMERIC_LEN); } }
        public IField EP_STOP { get { return GetElementByName<IField>(Names.EP_STOP); } }
        public IField EP_CURRENCY_COUNT { get { return GetElementByName<IField>(Names.EP_CURRENCY_COUNT); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the WorkingStorage IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewFillerField(FieldType.String, 40, "SWEXF750 WORKING STORAGE STARTS HERE");
            recordDef.CreateNewField(Names.WS_FILE_STATUS, FieldType.String, 2);

            recordDef.CreateNewGroup(Names.WORK_FIELDS, (WORK_FIELDS) =>
           {
               WORK_FIELDS.CreateNewField(Names.WS_STK_CONTROL_BRK_FLAG, FieldType.String, 1, "Y");
               WORK_FIELDS.CreateNewField(Names.WS_STK_SECTION_PROCESSING_IND, FieldType.String, 1, "Y");
               WORK_FIELDS.CreateNewField(Names.WS_VERY_FIRST_WRITE, FieldType.String, 1, "Y");
               WORK_FIELDS.CreateNewField(Names.WS_PG_BRK_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_PG_BRK, "Y")
                   ;
               WORK_FIELDS.CreateNewField(Names.WS_PG_BRK_FLAG_SAVE, FieldType.String, 1, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_PRINT_LINE_SPACING, FieldType.UnsignedNumeric, 4, 0);
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_PRINT_LINE_SPACING, FieldType.UnsignedNumeric, 4);
               WORK_FIELDS.CreateNewGroup(Names.WS_PRINT_RECORD, (WS_PRINT_RECORD) =>
               {
                   WS_PRINT_RECORD.CreateNewFillerField(FieldType.String, 1, SPACE);
                   WS_PRINT_RECORD.CreateNewField(Names.WS_PRINT_LINE, FieldType.String, 132);
               });
               WORK_FIELDS.CreateNewGroup(Names.WS_SPACE_RECORD, (WS_SPACE_RECORD) =>
               {
                   WS_SPACE_RECORD.CreateNewFillerField(FieldType.String, 1, SPACE);
                   WS_SPACE_RECORD.CreateNewField(Names.WS_SPACE_LINE, FieldType.String, 132, SPACES);
               });
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_PRINT_LINE, FieldType.String, 132);
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_SAVE_PRINT_LINE, FieldType.String, 132);
               WORK_FIELDS.CreateNewField(Names.WS_LINE_COUNT, FieldType.UnsignedNumeric, 4, 0);
               WORK_FIELDS.CreateNewField(Names.WS_PG_LENGTH, FieldType.UnsignedNumeric, 4, 52);
               WORK_FIELDS.CreateNewField(Names.WS_PG_NUMBER, FieldType.UnsignedNumeric, 7, 0);
               WORK_FIELDS.CreateNewField(Names.WS_PG_NUMBER_SAVE, FieldType.UnsignedNumeric, 7, 0);
               WORK_FIELDS.CreateNewField(Names.SAVE_FOR_WRAP_TEXT, FieldType.String, 133);
               WORK_FIELDS.CreateNewField(Names.WS_CUR_SUBRPT_CODE, FieldType.String, 8, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_PREV_SUBRPT_CODE, FieldType.String, 8, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_CONTROL_BRK_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_NOT_IN_CONTROL_BRK, "N")
                   ;
               WORK_FIELDS.CreateNewField(Names.WS_SAVE_SECTION_PROCESSING_IND, FieldType.String, 3, SPACE)
                   .NewCheckField(Names.WS_SAVE_RPT_HDR_IS_PROCESSED, "H  ")
                   .NewCheckField(Names.WS_SAVE_RPT_FTR_IS_PROCESSED, "F  ")
                   .NewCheckField(Names.WS_SAVE_PG_HDR_IS_PROCESSED, "P  ")
                   .NewCheckField(Names.WS_SAVE_BODY_IS_PROCESSED, "B  ")
                   ;
               WORK_FIELDS.CreateNewField(Names.WS_RESET_PG_NUMBER, FieldType.String, 1, "N");
               WORK_FIELDS.CreateNewField(Names.WS_SUPPRSS_BLANK_LINE, FieldType.String, 1, "N");
               WORK_FIELDS.CreateNewField(Names.WS_SUPPRSS_BLANK_LINE_SAVE, FieldType.String, 1, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_USER_NULL_DATE, FieldType.String, 8, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_LINE_QT, FieldType.UnsignedNumeric, 4, ZERO);
               WORK_FIELDS.CreateNewField(Names.WS_CUR_SECTION_LINE_QT, FieldType.UnsignedNumeric, 4, ZERO);
               WORK_FIELDS.CreateNewField(Names.WS_SAVE_PRINT_ATBOTTM, FieldType.String, 1, SPACES);
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_LINE_COUNT, FieldType.UnsignedNumeric, 4, 0);
               WORK_FIELDS.CreateNewField(Names.WS_TEMP_INDX, FieldType.UnsignedNumeric, 4, 0);
               WORK_FIELDS.CreateNewField(Names.WS_MONTH_TEXT_LENGTH, FieldType.UnsignedNumeric, 2, 0);
               WORK_FIELDS.CreateNewField(Names.PREV_IO_CONTROL_CD, FieldType.String, 2, SPACES);
           });

            recordDef.CreateNewGroup(Names.DATE_TIME_CONVERSION_FIELDS, (DATE_TIME_CONVERSION_FIELDS) =>
           {

               IField IEF_DATE_TIME_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.IEF_DATE_TIME, FieldType.String, 20);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine("FILLER_d5", IEF_DATE_TIME_local, (FILLER_d5) =>
               {
                   FILLER_d5.CreateNewField(Names.IEF_DATE, FieldType.UnsignedNumeric, 8);
                   FILLER_d5.CreateNewField(Names.IEF_TIME, FieldType.UnsignedNumeric, 6);
                   FILLER_d5.CreateNewFillerField(6, FillWith.Hashes);
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine("FILLER_d7", IEF_DATE_TIME_local, (FILLER_d7) =>
               {

                   IField DT_YEAR_4_local = FILLER_d7.CreateNewField(Names.DT_YEAR_4, FieldType.UnsignedNumeric, 4);
                   FILLER_d7.CreateNewGroupRedefine("FILLER_d8", DT_YEAR_4_local, (FILLER_d8) =>
                   {
                       FILLER_d8.CreateNewFillerField(2, FillWith.Hashes);
                       FILLER_d8.CreateNewField(Names.DT_YEAR_2, FieldType.UnsignedNumeric, 2);
                   });
                   FILLER_d7.CreateNewGroupRedefine("FILLER_d10", DT_YEAR_4_local, (FILLER_d10) =>
                   {
                       FILLER_d10.CreateNewFillerField(3, FillWith.Hashes);
                       FILLER_d10.CreateNewField(Names.DT_YEAR_1, FieldType.UnsignedNumeric, 1);
                   });
                   FILLER_d7.CreateNewField(Names.DT_MONTH_MM, FieldType.UnsignedNumeric, 2);
                   FILLER_d7.CreateNewField(Names.DT_DAY, FieldType.UnsignedNumeric, 2);

                   IField DT_TIME_local = FILLER_d7.CreateNewField(Names.DT_TIME, FieldType.UnsignedNumeric, 12);
                   FILLER_d7.CreateNewGroupRedefine("FILLER_d12", DT_TIME_local, (FILLER_d12) =>
                   {
                       FILLER_d12.CreateNewField(Names.DT_HOUR, FieldType.UnsignedNumeric, 2);
                       FILLER_d12.CreateNewField(Names.DT_MINUTES, FieldType.UnsignedNumeric, 2);
                       FILLER_d12.CreateNewField(Names.DT_SECONDS, FieldType.UnsignedNumeric, 2);
                       FILLER_d12.CreateNewField(Names.DT_MICROSECONDS, FieldType.UnsignedNumeric, 6);
                   });
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_EDIT_PATTERN, FieldType.String, 18);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.TS_EDIT_PATTERN, FieldType.String, 26);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_MONTH_MON, FieldType.String, 3);

               IField DT_MONTH_MON_U_STRING_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_MONTH_MON_U_STRING, FieldType.String, 36, "JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC");
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_MONTH_MON_U_TABLE, DT_MONTH_MON_U_STRING_local, (DT_MONTH_MON_U_TABLE) =>
               {
                   DT_MONTH_MON_U_TABLE.CreateNewFieldArray(Names.DT_MONTH_MON_U_TEXT, 12, FieldType.String, 3);
               });

               IField DT_MONTH_MON_L_STRING_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_MONTH_MON_L_STRING, FieldType.String, 36, "JanFebMarAprMayJunJulAugSepOctNovDec");
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_MONTH_MON_L_TABLE, DT_MONTH_MON_L_STRING_local, (DT_MONTH_MON_L_TABLE) =>
               {
                   DT_MONTH_MON_L_TABLE.CreateNewFieldArray(Names.DT_MONTH_MON_L_TEXT, 12, FieldType.String, 3);
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_MONTH_MONTH, FieldType.String, 9);
               IGroup DT_MONTH_MONTH_U_STRING_local = (IGroup)DATE_TIME_CONVERSION_FIELDS.CreateNewGroup(Names.DT_MONTH_MONTH_U_STRING, (DT_MONTH_MONTH_U_STRING) =>
               {
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "JANUARY");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "FEBRUARY");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "MARCH");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "APRIL");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "MAY");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "JUNE");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "JULY");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "AUGUST");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "SEPTEMBER");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "OCTOBER");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "NOVEMBER");
                   DT_MONTH_MONTH_U_STRING.CreateNewFillerField(FieldType.String, 9, "DECEMBER");
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_MONTH_MONTH_U_TABLE, DT_MONTH_MONTH_U_STRING_local, (DT_MONTH_MONTH_U_TABLE) =>
               {
                   DT_MONTH_MONTH_U_TABLE.CreateNewFieldArray(Names.DT_MONTH_MONTH_U_TEXT, 12, FieldType.String, 9);
               });
               IGroup DT_MONTH_MONTH_L_STRING_local = (IGroup)DATE_TIME_CONVERSION_FIELDS.CreateNewGroup(Names.DT_MONTH_MONTH_L_STRING, (DT_MONTH_MONTH_L_STRING) =>
               {
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "January");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "February");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "March");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "April");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "May");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "June");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "July");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "August");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "September");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "October");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "November");
                   DT_MONTH_MONTH_L_STRING.CreateNewFillerField(FieldType.String, 9, "December");
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_MONTH_MONTH_L_TABLE, DT_MONTH_MONTH_L_STRING_local, (DT_MONTH_MONTH_L_TABLE) =>
               {
                   DT_MONTH_MONTH_L_TABLE.CreateNewFieldArray(Names.DT_MONTH_MONTH_L_TEXT, 12, FieldType.String, 9);
               });

               IField DT_FORMATTED_DATETIME_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_FORMATTED_DATETIME, FieldType.String, 32);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_FORMATTED_DATETIME_TABLE, DT_FORMATTED_DATETIME_local, (DT_FORMATTED_DATETIME_TABLE) =>
               {
                   DT_FORMATTED_DATETIME_TABLE.CreateNewFieldArray(Names.DT_FORMATTED_DATETIME_TEXT, 32, FieldType.String, 1);
               });

               IField DT_FORMATTED_DATE_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_FORMATTED_DATE, FieldType.String, 18);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_FORMATTED_DATE_TABLE, DT_FORMATTED_DATE_local, (DT_FORMATTED_DATE_TABLE) =>
               {
                   DT_FORMATTED_DATE_TABLE.CreateNewFieldArray(Names.DT_FORMATTED_DATE_TEXT, 18, FieldType.String, 1);
               });

               IField DT_FORMATTED_TIME_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_FORMATTED_TIME, FieldType.String, 13);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_FORMATTED_TIME_TABLE, DT_FORMATTED_TIME_local, (DT_FORMATTED_TIME_TABLE) =>
               {
                   DT_FORMATTED_TIME_TABLE.CreateNewFieldArray(Names.DT_FORMATTED_TIME_TEXT, 13, FieldType.String, 1);
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_STRING_COUNT, FieldType.UnsignedNumeric, 1)
                   .NewCheckField(Names.DT_STRING_FOUND, 1)
                   ;

               IField DT_LEAP_YEAR_DAYS1_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_LEAP_YEAR_DAYS1, FieldType.String, 36, "000031059090120151181212243273304334");
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_LEAP_YEAR_TABLE1, DT_LEAP_YEAR_DAYS1_local, (DT_LEAP_YEAR_TABLE1) =>
               {
                   DT_LEAP_YEAR_TABLE1.CreateNewFieldArray(Names.DT_NO_LEAP_DAYS, 12, FieldType.UnsignedNumeric, 3);
               });

               IField DT_LEAP_YEAR_DAYS2_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_LEAP_YEAR_DAYS2, FieldType.String, 36, "000031060091121152182213244274305335");
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.DT_LEAP_YEAR_TABLE1_d2, DT_LEAP_YEAR_DAYS2_local, (DT_LEAP_YEAR_TABLE1_d2) =>
               {
                   DT_LEAP_YEAR_TABLE1_d2.CreateNewFieldArray(Names.DT_LEAP_DAYS, 12, FieldType.UnsignedNumeric, 3);
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.LEAP_DAY, FieldType.UnsignedNumeric, 3);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.LEAP1, FieldType.UnsignedNumeric, 4);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.LEAP2, FieldType.UnsignedNumeric, 4);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.LEAP3, FieldType.UnsignedNumeric, 4);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_START, FieldType.UnsignedNumeric, 2);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.DT_INDEX, FieldType.UnsignedNumeric, 3);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroup(Names.WS_CURRENT_DATE_8, (WS_CURRENT_DATE_8) =>
               {
                   WS_CURRENT_DATE_8.CreateNewField(Names.WS_CURRENT_DATE_8_CC, FieldType.String, 2);
                   WS_CURRENT_DATE_8.CreateNewField(Names.WS_CURRENT_DATE_8_YY, FieldType.String, 2);
                   WS_CURRENT_DATE_8.CreateNewField(Names.WS_CURRENT_DATE_8_MM, FieldType.String, 2);
                   WS_CURRENT_DATE_8.CreateNewField(Names.WS_CURRENT_DATE_8_DD, FieldType.String, 2);
               });

               IField WS_CURRENT_DATE_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.WS_CURRENT_DATE, FieldType.UnsignedNumeric, 6);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.WS_CURRENT_DATE_6, WS_CURRENT_DATE_local, (WS_CURRENT_DATE_6) =>
               {
                   WS_CURRENT_DATE_6.CreateNewField(Names.WS_CURRENT_DATE_6_YY, FieldType.UnsignedNumeric, 2);
                   WS_CURRENT_DATE_6.CreateNewField(Names.WS_CURRENT_DATE_6_MM, FieldType.UnsignedNumeric, 2);
                   WS_CURRENT_DATE_6.CreateNewField(Names.WS_CURRENT_DATE_6_DD, FieldType.UnsignedNumeric, 2);
               });

               IField WS_CURRENT_TIME_local = DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.WS_CURRENT_TIME, FieldType.UnsignedNumeric, 8);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroupRedefine(Names.WS_CURRENT_TIME_X, WS_CURRENT_TIME_local, (WS_CURRENT_TIME_X) =>
               {
                   WS_CURRENT_TIME_X.CreateNewField(Names.WS_CURRENT_TIME_6, FieldType.UnsignedNumeric, 6);
                   WS_CURRENT_TIME_X.CreateNewFillerField(2, FillWith.Hashes);
               });
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.WS_UNJUSTIFIED_TEXT_IDX, FieldType.SignedNumeric, 3);
               DATE_TIME_CONVERSION_FIELDS.CreateNewField(Names.WS_JUSTIFIED_TEXT_IDX, FieldType.SignedNumeric, 3);
               DATE_TIME_CONVERSION_FIELDS.CreateNewGroup(Names.WS_JUSTIFY_TEXT_FIELDS, (WS_JUSTIFY_TEXT_FIELDS) =>
               {
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewGroup(Names.WS_UNJUSTIFIED_TEXT_FIELD, (WS_UNJUSTIFIED_TEXT_FIELD) =>
                   {
                       WS_UNJUSTIFIED_TEXT_FIELD.CreateNewFieldArray(Names.WS_UNJUSTIFIED_TEXT_CHAR, 250, FieldType.String, 1);
                   });
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewGroup(Names.WS_JUSTIFIED_TEXT_FIELD, (WS_JUSTIFIED_TEXT_FIELD) =>
                   {
                       WS_JUSTIFIED_TEXT_FIELD.CreateNewFieldArray(Names.WS_JUSTIFIED_TEXT_CHAR, 250, FieldType.String, 1);
                   });
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_JUSTIFICATION_TYPE_CD, FieldType.String, 1)
                       .NewCheckField(Names.WS_JUSTIFIED_NONE, "N")
                       .NewCheckField(Names.WS_JUSTIFIED_LEFT, "L")
                       .NewCheckField(Names.WS_JUSTIFIED_CENTER, "C")
                       .NewCheckField(Names.WS_JUSTIFIED_RIGHT, "R")
                       ;
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_JUSTIFIED_TEXT_FIELD_LENGTH, FieldType.UnsignedNumeric, 4);
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_JUSTIFIED_TEXT_DATA_LENGTH, FieldType.UnsignedNumeric, 4);
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_JUSTIFIED_FIELD_START, FieldType.UnsignedNumeric, 4);
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_FIRST_CHAR, FieldType.UnsignedNumeric, 4);
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_LAST_CHAR, FieldType.UnsignedNumeric, 4);
                   WS_JUSTIFY_TEXT_FIELDS.CreateNewField(Names.WS_CHAR_CNTR, FieldType.UnsignedNumeric, 4);
               });
           });

            recordDef.CreateNewGroup(Names.RG_WORK_FIELDS, (RG_WORK_FIELDS) =>
           {
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_CNTL_HDR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_RG_CNTL_HDR, "Y")
                   ;
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_CNTL_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_RG_CNTL_FTR, "Y")
                   ;
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_RPT_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_RG_RPT_FTR, "Y")
                   ;
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_DTL_LINE_QT, FieldType.UnsignedNumeric, 4, 4);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_PG_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 10);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_PG_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_RPT_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_RPT_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 2);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_LINE_SPACING, FieldType.UnsignedNumeric, 4, 1);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_RPT_TYPE_CD, FieldType.String, 1, "D")
                   .NewCheckField(Names.WS_RG_SUMMARY_RPT_REQUESTED, "S")
                   .NewCheckField(Names.WS_RG_DTL_RPT_REQUESTED, "D")
                   ;
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_SECTION_PROCESSING_IND, FieldType.String, 3, SPACE)
                   .NewCheckField(Names.WS_RG_RPT_HDR_IS_PROCESSED, "H  ")
                   .NewCheckField(Names.WS_RG_RPT_FTR_IS_PROCESSED, "F  ")
                   .NewCheckField(Names.WS_RG_PG_HDR_IS_PROCESSED, "P  ")
                   .NewCheckField(Names.WS_RG_BODY_IS_PROCESSED, "B  ")
                   ;
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_KEEP_DTL_TOGETHER_FG, FieldType.String, 1, "N");
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_PRINT_PG_BRK_SPACING, FieldType.CompShort, 4);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_PRINT_PG_BRK_LINE, FieldType.String, 132);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_PRINT_RPT_FTR_LINE, FieldType.String, 132);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_PG_BRK_FLAG, FieldType.String, 1, "Y");
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_CUR_RPT_HDR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_CUR_RPT_FTR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_FIRST_TIME_FLAG, FieldType.String, 1, "Y")
                   .NewCheckField(Names.WS_RG_FIRST_TIME, "Y")
                   ;
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_DISABLE_SUPPRESS, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_RG_SUPPRESS_DUPLICATES, "N")
                   .NewCheckField(Names.WS_RG_PRINT_DUPLICATES, "Y")
                   ;
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_BODY_SECTION_LINES, FieldType.UnsignedNumeric, 3, 4);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_BODY_SUPPRESS_LINES, FieldType.SignedNumeric, 3, 1);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_GR_COUNTER, FieldType.UnsignedNumeric, 7, ZERO);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_PAGE_SUPPRESS, FieldType.String, 1, "N");
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_PAGE_SUPPRESS_AFTER, FieldType.String, 1, "N");
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_PAGE_DTL_LINES, FieldType.SignedNumeric, 3, 0);
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_CURRENTLY_WRAPPING, FieldType.String, 1, "N");
               RG_WORK_FIELDS.CreateNewField(Names.WS_RG_CUR_PRINTING_PAGE_HDR, FieldType.String, 1, "N");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ3, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ4, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ5, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ6, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ7, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ8, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ9, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ10, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ11, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ12, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ13, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ15, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ16, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ17, FieldType.String, 8, "ZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ18, FieldType.String, 8, "ZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ19, FieldType.String, 8, "ZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ20, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ21, FieldType.String, 8, "ZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ22, FieldType.String, 8, "ZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ23, FieldType.String, 9, "ZZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ24, FieldType.String, 8, "ZZZZZZZ9");
               RG_WORK_FIELDS.CreateNewField(Names.RG_EDIT_PATTERN_OBJ25, FieldType.String, 8, "ZZZZZZZ9");
           });

            recordDef.CreateNewGroup(Names.RG_DTL_LINE_SECTION, (RG_DTL_LINE_SECTION) =>
           {
               RG_DTL_LINE_SECTION.CreateNewField(Names.RG_DTL_LINE_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               RG_DTL_LINE_SECTION.CreateNewField(Names.RG_DTL_LINE_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               RG_DTL_LINE_SECTION.CreateNewField(Names.RG_DTL_LINE_RESETPG_AFTER, FieldType.String, 1, "N");
               RG_DTL_LINE_SECTION.CreateNewField(Names.RG_DTL_LINE_KEEP_TOGETHER, FieldType.String, 1, "N");
               RG_DTL_LINE_SECTION.CreateNewField(Names.RG_DTL_LINE_SUPPRSS_BLANK, FieldType.String, 1, "N");
               RG_DTL_LINE_SECTION.CreateNewField(Names.RG_DTL_LINE_PRINT_ATBOTTM, FieldType.String, 1, "N");
               RG_DTL_LINE_SECTION.CreateNewField(Names.RG_DTL_LINE_KEEP_WITHNEXT, FieldType.String, 1, "N");
               RG_DTL_LINE_SECTION.CreateNewField(Names.RG_DTL_LINE_BEFORE_PG_BRK, FieldType.String, 1, "N");
               RG_DTL_LINE_SECTION.CreateNewField(Names.RG_DTL_LINE_AFTER_PG_BRK, FieldType.String, 1, "N");
               RG_DTL_LINE_SECTION.CreateNewField(Names.RG_DTL_LINE_PRINT_FLAG, FieldType.String, 1, "Y");
               RG_DTL_LINE_SECTION.CreateNewGroup(Names.RG_DTL_LINE_0, (RG_DTL_LINE_0) =>
               {
                   RG_DTL_LINE_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   RG_DTL_LINE_0.CreateNewField(Names.RG_DTL_LINE_0_A_OBJ1, FieldType.String, 30);
               });
               RG_DTL_LINE_SECTION.CreateNewGroup(Names.RG_DTL_LINE_1, (RG_DTL_LINE_1) =>
               {
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ2, FieldType.String, 14);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ3_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ3, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ3, FieldType.String, RG_DTL_LINE_1_A_OBJ3_local, 9);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ4_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ4, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ4, FieldType.String, RG_DTL_LINE_1_A_OBJ4_local, 9);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ5_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ5, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ5, FieldType.String, RG_DTL_LINE_1_A_OBJ5_local, 9);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ6_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ6, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ6, FieldType.String, RG_DTL_LINE_1_A_OBJ6_local, 9);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ7_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ7, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ7, FieldType.String, RG_DTL_LINE_1_A_OBJ7_local, 9);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ8_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ8, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ8, FieldType.String, RG_DTL_LINE_1_A_OBJ8_local, 9);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ9_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ9, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ9, FieldType.String, RG_DTL_LINE_1_A_OBJ9_local, 9);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ10_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ10, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ10, FieldType.String, RG_DTL_LINE_1_A_OBJ10_local, 9);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ11_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ11, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ11, FieldType.String, RG_DTL_LINE_1_A_OBJ11_local, 9);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ12_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ12, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ12, FieldType.String, RG_DTL_LINE_1_A_OBJ12_local, 9);
                   RG_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField RG_DTL_LINE_1_A_OBJ13_local = RG_DTL_LINE_1.CreateNewField(Names.RG_DTL_LINE_1_A_OBJ13, FieldType.String, 9);
                   RG_DTL_LINE_1.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_1_A_OBJ13, FieldType.String, RG_DTL_LINE_1_A_OBJ13_local, 9);
               });
               RG_DTL_LINE_SECTION.CreateNewGroup(Names.RG_DTL_LINE_2, (RG_DTL_LINE_2) =>
               {
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 6, SPACES);
                   RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ14, FieldType.String, 5);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 6, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ15_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ15, FieldType.String, 9);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ15, FieldType.String, RG_DTL_LINE_2_A_OBJ15_local, 9);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ16_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ16, FieldType.String, 9);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ16, FieldType.String, RG_DTL_LINE_2_A_OBJ16_local, 9);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 3, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ17_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ17, FieldType.String, 8);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ17, FieldType.String, RG_DTL_LINE_2_A_OBJ17_local, 8);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ18_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ18, FieldType.String, 8);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ18, FieldType.String, RG_DTL_LINE_2_A_OBJ18_local, 8);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ19_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ19, FieldType.String, 8);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ19, FieldType.String, RG_DTL_LINE_2_A_OBJ19_local, 8);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ20_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ20, FieldType.String, 9);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ20, FieldType.String, RG_DTL_LINE_2_A_OBJ20_local, 9);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 3, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ21_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ21, FieldType.String, 8);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ21, FieldType.String, RG_DTL_LINE_2_A_OBJ21_local, 8);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ22_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ22, FieldType.String, 8);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ22, FieldType.String, RG_DTL_LINE_2_A_OBJ22_local, 8);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ23_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ23, FieldType.String, 9);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ23, FieldType.String, RG_DTL_LINE_2_A_OBJ23_local, 9);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 3, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ24_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ24, FieldType.String, 8);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ24, FieldType.String, RG_DTL_LINE_2_A_OBJ24_local, 8);
                   RG_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField RG_DTL_LINE_2_A_OBJ25_local = RG_DTL_LINE_2.CreateNewField(Names.RG_DTL_LINE_2_A_OBJ25, FieldType.String, 8);
                   RG_DTL_LINE_2.CreateNewFieldRedefine(Names.RG_DTL_SUPRES_2_A_OBJ25, FieldType.String, RG_DTL_LINE_2_A_OBJ25_local, 8);
               });
               RG_DTL_LINE_SECTION.CreateNewGroup(Names.RG_DTL_LINE_3, (RG_DTL_LINE_3) =>
               {
                   RG_DTL_LINE_3.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
           });

            recordDef.CreateNewGroup(Names.RG_RPT_FTR_SECTION, (RG_RPT_FTR_SECTION) =>
           {
               RG_RPT_FTR_SECTION.CreateNewField(Names.RG_RPT_FTR_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               RG_RPT_FTR_SECTION.CreateNewField(Names.RG_RPT_FTR_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               RG_RPT_FTR_SECTION.CreateNewField(Names.RG_RPT_FTR_RESETPG_AFTER, FieldType.String, 1, "N");
               RG_RPT_FTR_SECTION.CreateNewField(Names.RG_RPT_FTR_KEEP_TOGETHER, FieldType.String, 1, "N");
               RG_RPT_FTR_SECTION.CreateNewField(Names.RG_RPT_FTR_SUPPRSS_BLANK, FieldType.String, 1, "N");
               RG_RPT_FTR_SECTION.CreateNewField(Names.RG_RPT_FTR_PRINT_ATBOTTM, FieldType.String, 1, "N");
               RG_RPT_FTR_SECTION.CreateNewField(Names.RG_RPT_FTR_KEEP_WITHNEXT, FieldType.String, 1, "N");
               RG_RPT_FTR_SECTION.CreateNewField(Names.RG_RPT_FTR_BEFORE_PG_BRK, FieldType.String, 1, "N");
               RG_RPT_FTR_SECTION.CreateNewField(Names.RG_RPT_FTR_AFTER_PG_BRK, FieldType.String, 1, "N");
               RG_RPT_FTR_SECTION.CreateNewField(Names.RG_RPT_FTR_PRINT_FLAG, FieldType.String, 1, "Y");
               RG_RPT_FTR_SECTION.CreateNewGroup(Names.RG_RPT_FTR_0, (RG_RPT_FTR_0) =>
               {
                   RG_RPT_FTR_0.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               RG_RPT_FTR_SECTION.CreateNewGroup(Names.RG_RPT_FTR_1, (RG_RPT_FTR_1) =>
               {
                   RG_RPT_FTR_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   RG_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, "The number of cases in the Gra");
                   RG_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, "nd Total is not the sum of the");
                   RG_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, " prior counts as a case may ha");
                   RG_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, "ve many current or arrearage c");
                   RG_RPT_FTR_1.CreateNewFillerField(FieldType.String, 11, "ollections.");
               });
           });

            recordDef.CreateNewGroup(Names.RG_PAGE_HDR_SECTION, (RG_PAGE_HDR_SECTION) =>
           {
               RG_PAGE_HDR_SECTION.CreateNewField(Names.RG_PAGE_HDR_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               RG_PAGE_HDR_SECTION.CreateNewField(Names.RG_PAGE_HDR_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               RG_PAGE_HDR_SECTION.CreateNewField(Names.RG_PAGE_HDR_RESETPG_AFTER, FieldType.String, 1, "N");
               RG_PAGE_HDR_SECTION.CreateNewField(Names.RG_PAGE_HDR_KEEP_TOGETHER, FieldType.String, 1, "N");
               RG_PAGE_HDR_SECTION.CreateNewField(Names.RG_PAGE_HDR_SUPPRSS_BLANK, FieldType.String, 1, "N");
               RG_PAGE_HDR_SECTION.CreateNewField(Names.RG_PAGE_HDR_PRINT_ATBOTTM, FieldType.String, 1, "N");
               RG_PAGE_HDR_SECTION.CreateNewField(Names.RG_PAGE_HDR_KEEP_WITHNEXT, FieldType.String, 1, "N");
               RG_PAGE_HDR_SECTION.CreateNewField(Names.RG_PAGE_HDR_BEFORE_PG_BRK, FieldType.String, 1, "Y");
               RG_PAGE_HDR_SECTION.CreateNewField(Names.RG_PAGE_HDR_AFTER_PG_BRK, FieldType.String, 1, "N");
               RG_PAGE_HDR_SECTION.CreateNewField(Names.RG_PAGE_HDR_PRINT_FLAG, FieldType.String, 1, "Y");
               RG_PAGE_HDR_SECTION.CreateNewGroup(Names.RG_PAGE_HDR_0, (RG_PAGE_HDR_0) =>
               {
                   RG_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   RG_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 8, "SRRUN156");
                   RG_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 49, SPACES);
                   RG_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 15, "State of Kansas");
                   RG_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 50, SPACES);
                   RG_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 6, "Page: ");
                   RG_PAGE_HDR_0.CreateNewField(Names.RG_PAGE_HDR_0_P_OBJ30, FieldType.NumericEdited, "ZZ9", 3);
               });
               RG_PAGE_HDR_SECTION.CreateNewGroup(Names.RG_PAGE_HDR_1, (RG_PAGE_HDR_1) =>
               {
                   RG_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   RG_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 10, "Run Date: ");
                   RG_PAGE_HDR_1.CreateNewField(Names.RG_PAGE_HDR_1_D_OBJ32, FieldType.String, 10);
                   RG_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 21, SPACES);
                   RG_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 30, "Department of Social and Rehab");
                   RG_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 18, "ilitation Services");
               });
               RG_PAGE_HDR_SECTION.CreateNewGroup(Names.RG_PAGE_HDR_2, (RG_PAGE_HDR_2) =>
               {
                   RG_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 1, SPACES);
                   RG_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 10, "Run Time: ");
                   RG_PAGE_HDR_2.CreateNewField(Names.RG_PAGE_HDR_2_T_OBJ35, FieldType.String, 8);
                   RG_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 30, SPACES);
                   RG_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 30, "Child Support Enforcement Prog");
                   RG_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 3, "ram");
               });
               RG_PAGE_HDR_SECTION.CreateNewGroup(Names.RG_PAGE_HDR_3, (RG_PAGE_HDR_3) =>
               {
                   RG_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 49, SPACES);
                   RG_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 30, "Report of Monthly Collection C");
                   RG_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 4, "ount");
               });
               RG_PAGE_HDR_SECTION.CreateNewGroup(Names.RG_PAGE_HDR_4, (RG_PAGE_HDR_4) =>
               {
                   RG_PAGE_HDR_4.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               RG_PAGE_HDR_SECTION.CreateNewGroup(Names.RG_PAGE_HDR_5, (RG_PAGE_HDR_5) =>
               {
                   RG_PAGE_HDR_5.CreateNewFillerField(FieldType.String, 1, SPACES);
                   RG_PAGE_HDR_5.CreateNewFillerField(FieldType.String, 6, "Office");
                   RG_PAGE_HDR_5.CreateNewFillerField(FieldType.String, 1, SPACES);
                   RG_PAGE_HDR_5.CreateNewField(Names.RG_PAGE_HDR_5_A_OBJ39, FieldType.String, 30);
               });
               RG_PAGE_HDR_SECTION.CreateNewGroup(Names.RG_PAGE_HDR_6, (RG_PAGE_HDR_6) =>
               {
                   RG_PAGE_HDR_6.CreateNewFillerField(FieldType.String, 1, SPACES);
                   RG_PAGE_HDR_6.CreateNewFillerField(FieldType.String, 12, "Kansas Cases");
               });
               RG_PAGE_HDR_SECTION.CreateNewGroup(Names.RG_PAGE_HDR_7, (RG_PAGE_HDR_7) =>
               {
                   RG_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 20, SPACES);
                   RG_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 30, "Total |TAF                    ");
                   RG_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 30, "                 |Non TAF     ");
                   RG_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 29, "                  |State Only");
               });
               RG_PAGE_HDR_SECTION.CreateNewGroup(Names.RG_PAGE_HDR_8, (RG_PAGE_HDR_8) =>
               {
                   RG_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 26, SPACES);
                   RG_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "|Subtotal      TAF      XTAF  ");
                   RG_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "  TAF-FC   |Subtotal    NA Reg");
                   RG_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "  PA Related|Subtotal    GA-FC");
                   RG_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 14, "    MHDD Inst.");
               });
               RG_PAGE_HDR_SECTION.CreateNewGroup(Names.RG_PAGE_HDR_9, (RG_PAGE_HDR_9) =>
               {
                   RG_PAGE_HDR_9.CreateNewFillerField(FieldType.String, 1, SPACES);
                   RG_PAGE_HDR_9.CreateNewFillerField(FieldType.String, 13, "Child Support");
               });
           });

            recordDef.CreateNewGroup(Names.ST_WORK_FIELDS, (ST_WORK_FIELDS) =>
           {
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_CNTL_HDR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_ST_CNTL_HDR, "Y")
                   ;
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_CNTL_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_ST_CNTL_FTR, "Y")
                   ;
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_RPT_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_ST_RPT_FTR, "Y")
                   ;
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_DTL_LINE_QT, FieldType.UnsignedNumeric, 4, 4);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_PG_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 10);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_PG_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_RPT_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_RPT_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 2);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_LINE_SPACING, FieldType.UnsignedNumeric, 4, 1);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_RPT_TYPE_CD, FieldType.String, 1, "D")
                   .NewCheckField(Names.WS_ST_SUMMARY_RPT_REQUESTED, "S")
                   .NewCheckField(Names.WS_ST_DTL_RPT_REQUESTED, "D")
                   ;
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_SECTION_PROCESSING_IND, FieldType.String, 3, SPACE)
                   .NewCheckField(Names.WS_ST_RPT_HDR_IS_PROCESSED, "H  ")
                   .NewCheckField(Names.WS_ST_RPT_FTR_IS_PROCESSED, "F  ")
                   .NewCheckField(Names.WS_ST_PG_HDR_IS_PROCESSED, "P  ")
                   .NewCheckField(Names.WS_ST_BODY_IS_PROCESSED, "B  ")
                   ;
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_KEEP_DTL_TOGETHER_FG, FieldType.String, 1, "N");
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_PRINT_PG_BRK_SPACING, FieldType.CompShort, 4);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_PRINT_PG_BRK_LINE, FieldType.String, 132);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_PRINT_RPT_FTR_LINE, FieldType.String, 132);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_PG_BRK_FLAG, FieldType.String, 1, "Y");
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_CUR_RPT_HDR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_CUR_RPT_FTR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_FIRST_TIME_FLAG, FieldType.String, 1, "Y")
                   .NewCheckField(Names.WS_ST_FIRST_TIME, "Y")
                   ;
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_DISABLE_SUPPRESS, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_ST_SUPPRESS_DUPLICATES, "N")
                   .NewCheckField(Names.WS_ST_PRINT_DUPLICATES, "Y")
                   ;
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_BODY_SECTION_LINES, FieldType.UnsignedNumeric, 3, 4);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_BODY_SUPPRESS_LINES, FieldType.SignedNumeric, 3, 1);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_GR_COUNTER, FieldType.UnsignedNumeric, 7, ZERO);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_PAGE_SUPPRESS, FieldType.String, 1, "N");
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_PAGE_SUPPRESS_AFTER, FieldType.String, 1, "N");
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_PAGE_DTL_LINES, FieldType.SignedNumeric, 3, 0);
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_CURRENTLY_WRAPPING, FieldType.String, 1, "N");
               ST_WORK_FIELDS.CreateNewField(Names.WS_ST_CUR_PRINTING_PAGE_HDR, FieldType.String, 1, "N");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ31, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ32, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ33, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ34, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ35, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ36, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ37, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ38, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ39, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ40, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ41, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ4, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ5, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ6, FieldType.String, 8, "ZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ7, FieldType.String, 8, "ZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ8, FieldType.String, 8, "ZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ9, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ10, FieldType.String, 8, "ZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ11, FieldType.String, 8, "ZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ12, FieldType.String, 9, "ZZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ13, FieldType.String, 8, "ZZZZZZZ9");
               ST_WORK_FIELDS.CreateNewField(Names.ST_EDIT_PATTERN_OBJ14, FieldType.String, 8, "ZZZZZZZ9");
           });

            recordDef.CreateNewGroup(Names.ST_DTL_LINE_SECTION, (ST_DTL_LINE_SECTION) =>
           {
               ST_DTL_LINE_SECTION.CreateNewField(Names.ST_DTL_LINE_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               ST_DTL_LINE_SECTION.CreateNewField(Names.ST_DTL_LINE_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               ST_DTL_LINE_SECTION.CreateNewField(Names.ST_DTL_LINE_RESETPG_AFTER, FieldType.String, 1, "N");
               ST_DTL_LINE_SECTION.CreateNewField(Names.ST_DTL_LINE_KEEP_TOGETHER, FieldType.String, 1, "N");
               ST_DTL_LINE_SECTION.CreateNewField(Names.ST_DTL_LINE_SUPPRSS_BLANK, FieldType.String, 1, "N");
               ST_DTL_LINE_SECTION.CreateNewField(Names.ST_DTL_LINE_PRINT_ATBOTTM, FieldType.String, 1, "N");
               ST_DTL_LINE_SECTION.CreateNewField(Names.ST_DTL_LINE_KEEP_WITHNEXT, FieldType.String, 1, "N");
               ST_DTL_LINE_SECTION.CreateNewField(Names.ST_DTL_LINE_BEFORE_PG_BRK, FieldType.String, 1, "N");
               ST_DTL_LINE_SECTION.CreateNewField(Names.ST_DTL_LINE_AFTER_PG_BRK, FieldType.String, 1, "N");
               ST_DTL_LINE_SECTION.CreateNewField(Names.ST_DTL_LINE_PRINT_FLAG, FieldType.String, 1, "Y");
               ST_DTL_LINE_SECTION.CreateNewGroup(Names.ST_DTL_LINE_0, (ST_DTL_LINE_0) =>
               {
                   ST_DTL_LINE_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   ST_DTL_LINE_0.CreateNewField(Names.ST_DTL_LINE_0_A_OBJ1, FieldType.String, 30);
               });
               ST_DTL_LINE_SECTION.CreateNewGroup(Names.ST_DTL_LINE_1, (ST_DTL_LINE_1) =>
               {
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ2, FieldType.String, 14);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ31_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ31, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ31, FieldType.String, ST_DTL_LINE_1_A_OBJ31_local, 9);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ32_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ32, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ32, FieldType.String, ST_DTL_LINE_1_A_OBJ32_local, 9);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ33_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ33, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ33, FieldType.String, ST_DTL_LINE_1_A_OBJ33_local, 9);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ34_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ34, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ34, FieldType.String, ST_DTL_LINE_1_A_OBJ34_local, 9);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ35_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ35, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ35, FieldType.String, ST_DTL_LINE_1_A_OBJ35_local, 9);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ36_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ36, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ36, FieldType.String, ST_DTL_LINE_1_A_OBJ36_local, 9);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ37_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ37, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ37, FieldType.String, ST_DTL_LINE_1_A_OBJ37_local, 9);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ38_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ38, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ38, FieldType.String, ST_DTL_LINE_1_A_OBJ38_local, 9);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ39_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ39, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ39, FieldType.String, ST_DTL_LINE_1_A_OBJ39_local, 9);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ40_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ40, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ40, FieldType.String, ST_DTL_LINE_1_A_OBJ40_local, 9);
                   ST_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField ST_DTL_LINE_1_A_OBJ41_local = ST_DTL_LINE_1.CreateNewField(Names.ST_DTL_LINE_1_A_OBJ41, FieldType.String, 9);
                   ST_DTL_LINE_1.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_1_A_OBJ41, FieldType.String, ST_DTL_LINE_1_A_OBJ41_local, 9);
               });
               ST_DTL_LINE_SECTION.CreateNewGroup(Names.ST_DTL_LINE_2, (ST_DTL_LINE_2) =>
               {
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 6, SPACES);
                   ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ3, FieldType.String, 5);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 6, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ4_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ4, FieldType.String, 9);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ4, FieldType.String, ST_DTL_LINE_2_A_OBJ4_local, 9);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ5_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ5, FieldType.String, 9);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ5, FieldType.String, ST_DTL_LINE_2_A_OBJ5_local, 9);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 3, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ6_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ6, FieldType.String, 8);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ6, FieldType.String, ST_DTL_LINE_2_A_OBJ6_local, 8);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ7_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ7, FieldType.String, 8);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ7, FieldType.String, ST_DTL_LINE_2_A_OBJ7_local, 8);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ8_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ8, FieldType.String, 8);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ8, FieldType.String, ST_DTL_LINE_2_A_OBJ8_local, 8);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ9_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ9, FieldType.String, 9);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ9, FieldType.String, ST_DTL_LINE_2_A_OBJ9_local, 9);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 3, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ10_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ10, FieldType.String, 8);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ10, FieldType.String, ST_DTL_LINE_2_A_OBJ10_local, 8);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ11_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ11, FieldType.String, 8);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ11, FieldType.String, ST_DTL_LINE_2_A_OBJ11_local, 8);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ12_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ12, FieldType.String, 9);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ12, FieldType.String, ST_DTL_LINE_2_A_OBJ12_local, 9);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 3, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ13_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ13, FieldType.String, 8);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ13, FieldType.String, ST_DTL_LINE_2_A_OBJ13_local, 8);
                   ST_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField ST_DTL_LINE_2_A_OBJ14_local = ST_DTL_LINE_2.CreateNewField(Names.ST_DTL_LINE_2_A_OBJ14, FieldType.String, 8);
                   ST_DTL_LINE_2.CreateNewFieldRedefine(Names.ST_DTL_SUPRES_2_A_OBJ14, FieldType.String, ST_DTL_LINE_2_A_OBJ14_local, 8);
               });
               ST_DTL_LINE_SECTION.CreateNewGroup(Names.ST_DTL_LINE_3, (ST_DTL_LINE_3) =>
               {
                   ST_DTL_LINE_3.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
           });

            recordDef.CreateNewGroup(Names.ST_RPT_FTR_SECTION, (ST_RPT_FTR_SECTION) =>
           {
               ST_RPT_FTR_SECTION.CreateNewField(Names.ST_RPT_FTR_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               ST_RPT_FTR_SECTION.CreateNewField(Names.ST_RPT_FTR_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               ST_RPT_FTR_SECTION.CreateNewField(Names.ST_RPT_FTR_RESETPG_AFTER, FieldType.String, 1, "N");
               ST_RPT_FTR_SECTION.CreateNewField(Names.ST_RPT_FTR_KEEP_TOGETHER, FieldType.String, 1, "N");
               ST_RPT_FTR_SECTION.CreateNewField(Names.ST_RPT_FTR_SUPPRSS_BLANK, FieldType.String, 1, "N");
               ST_RPT_FTR_SECTION.CreateNewField(Names.ST_RPT_FTR_PRINT_ATBOTTM, FieldType.String, 1, "N");
               ST_RPT_FTR_SECTION.CreateNewField(Names.ST_RPT_FTR_KEEP_WITHNEXT, FieldType.String, 1, "N");
               ST_RPT_FTR_SECTION.CreateNewField(Names.ST_RPT_FTR_BEFORE_PG_BRK, FieldType.String, 1, "N");
               ST_RPT_FTR_SECTION.CreateNewField(Names.ST_RPT_FTR_AFTER_PG_BRK, FieldType.String, 1, "N");
               ST_RPT_FTR_SECTION.CreateNewField(Names.ST_RPT_FTR_PRINT_FLAG, FieldType.String, 1, "Y");
               ST_RPT_FTR_SECTION.CreateNewGroup(Names.ST_RPT_FTR_0, (ST_RPT_FTR_0) =>
               {
                   ST_RPT_FTR_0.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               ST_RPT_FTR_SECTION.CreateNewGroup(Names.ST_RPT_FTR_1, (ST_RPT_FTR_1) =>
               {
                   ST_RPT_FTR_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   ST_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, "The number of cases in the Gra");
                   ST_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, "nd Total is not the sum of the");
                   ST_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, " prior counts as a case may ha");
                   ST_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, "ve many current or arrearage c");
                   ST_RPT_FTR_1.CreateNewFillerField(FieldType.String, 11, "ollections.");
               });
           });

            recordDef.CreateNewGroup(Names.ST_PAGE_HDR_SECTION, (ST_PAGE_HDR_SECTION) =>
           {
               ST_PAGE_HDR_SECTION.CreateNewField(Names.ST_PAGE_HDR_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               ST_PAGE_HDR_SECTION.CreateNewField(Names.ST_PAGE_HDR_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               ST_PAGE_HDR_SECTION.CreateNewField(Names.ST_PAGE_HDR_RESETPG_AFTER, FieldType.String, 1, "N");
               ST_PAGE_HDR_SECTION.CreateNewField(Names.ST_PAGE_HDR_KEEP_TOGETHER, FieldType.String, 1, "N");
               ST_PAGE_HDR_SECTION.CreateNewField(Names.ST_PAGE_HDR_SUPPRSS_BLANK, FieldType.String, 1, "N");
               ST_PAGE_HDR_SECTION.CreateNewField(Names.ST_PAGE_HDR_PRINT_ATBOTTM, FieldType.String, 1, "N");
               ST_PAGE_HDR_SECTION.CreateNewField(Names.ST_PAGE_HDR_KEEP_WITHNEXT, FieldType.String, 1, "N");
               ST_PAGE_HDR_SECTION.CreateNewField(Names.ST_PAGE_HDR_BEFORE_PG_BRK, FieldType.String, 1, "Y");
               ST_PAGE_HDR_SECTION.CreateNewField(Names.ST_PAGE_HDR_AFTER_PG_BRK, FieldType.String, 1, "N");
               ST_PAGE_HDR_SECTION.CreateNewField(Names.ST_PAGE_HDR_PRINT_FLAG, FieldType.String, 1, "Y");
               ST_PAGE_HDR_SECTION.CreateNewGroup(Names.ST_PAGE_HDR_0, (ST_PAGE_HDR_0) =>
               {
                   ST_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   ST_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 8, "SRRUN156");
                   ST_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 49, SPACES);
                   ST_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 15, "State of Kansas");
                   ST_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 50, SPACES);
                   ST_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 6, "Page: ");
                   ST_PAGE_HDR_0.CreateNewField(Names.ST_PAGE_HDR_0_P_OBJ19, FieldType.NumericEdited, "ZZ9", 3);
               });
               ST_PAGE_HDR_SECTION.CreateNewGroup(Names.ST_PAGE_HDR_1, (ST_PAGE_HDR_1) =>
               {
                   ST_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   ST_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 10, "Run Date: ");
                   ST_PAGE_HDR_1.CreateNewField(Names.ST_PAGE_HDR_1_D_OBJ21, FieldType.String, 10);
                   ST_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 21, SPACES);
                   ST_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 30, "Department of Social and Rehab");
                   ST_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 18, "ilitation Services");
               });
               ST_PAGE_HDR_SECTION.CreateNewGroup(Names.ST_PAGE_HDR_2, (ST_PAGE_HDR_2) =>
               {
                   ST_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 1, SPACES);
                   ST_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 10, "Run Time: ");
                   ST_PAGE_HDR_2.CreateNewField(Names.ST_PAGE_HDR_2_T_OBJ24, FieldType.String, 8);
                   ST_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 30, SPACES);
                   ST_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 30, "Child Support Enforcement Prog");
                   ST_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 3, "ram");
               });
               ST_PAGE_HDR_SECTION.CreateNewGroup(Names.ST_PAGE_HDR_3, (ST_PAGE_HDR_3) =>
               {
                   ST_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 49, SPACES);
                   ST_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 30, "Report of Monthly Collection C");
                   ST_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 4, "ount");
               });
               ST_PAGE_HDR_SECTION.CreateNewGroup(Names.ST_PAGE_HDR_4, (ST_PAGE_HDR_4) =>
               {
                   ST_PAGE_HDR_4.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               ST_PAGE_HDR_SECTION.CreateNewGroup(Names.ST_PAGE_HDR_5, (ST_PAGE_HDR_5) =>
               {
                   ST_PAGE_HDR_5.CreateNewFillerField(FieldType.String, 1, SPACES);
                   ST_PAGE_HDR_5.CreateNewField(Names.ST_PAGE_HDR_5_A_OBJ27, FieldType.String, 30);
               });
               ST_PAGE_HDR_SECTION.CreateNewGroup(Names.ST_PAGE_HDR_6, (ST_PAGE_HDR_6) =>
               {
                   ST_PAGE_HDR_6.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               ST_PAGE_HDR_SECTION.CreateNewGroup(Names.ST_PAGE_HDR_7, (ST_PAGE_HDR_7) =>
               {
                   ST_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 20, SPACES);
                   ST_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 30, "Total |TAF                    ");
                   ST_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 30, "                 |Non TAF     ");
                   ST_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 29, "                  |State Only");
               });
               ST_PAGE_HDR_SECTION.CreateNewGroup(Names.ST_PAGE_HDR_8, (ST_PAGE_HDR_8) =>
               {
                   ST_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 26, SPACES);
                   ST_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "|Subtotal      TAF      XTAF  ");
                   ST_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "  TAF-FC   |Subtotal    NA Reg");
                   ST_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "  PA Related|Subtotal     GA-F");
                   ST_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 14, "C   MHDD Inst.");
               });
               ST_PAGE_HDR_SECTION.CreateNewGroup(Names.ST_PAGE_HDR_9, (ST_PAGE_HDR_9) =>
               {
                   ST_PAGE_HDR_9.CreateNewFillerField(FieldType.String, 1, SPACES);
                   ST_PAGE_HDR_9.CreateNewFillerField(FieldType.String, 13, "Child Support");
               });
           });

            recordDef.CreateNewGroup(Names.SS_WORK_FIELDS, (SS_WORK_FIELDS) =>
           {
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_CNTL_HDR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_SS_CNTL_HDR, "Y")
                   ;
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_CNTL_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_SS_CNTL_FTR, "Y")
                   ;
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_RPT_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_SS_RPT_FTR, "Y")
                   ;
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_DTL_LINE_QT, FieldType.UnsignedNumeric, 4, 4);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_PG_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 10);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_PG_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_RPT_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_RPT_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 2);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_LINE_SPACING, FieldType.UnsignedNumeric, 4, 1);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_RPT_TYPE_CD, FieldType.String, 1, "D")
                   .NewCheckField(Names.WS_SS_SUMMARY_RPT_REQUESTED, "S")
                   .NewCheckField(Names.WS_SS_DTL_RPT_REQUESTED, "D")
                   ;
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_SECTION_PROCESSING_IND, FieldType.String, 3, SPACE)
                   .NewCheckField(Names.WS_SS_RPT_HDR_IS_PROCESSED, "H  ")
                   .NewCheckField(Names.WS_SS_RPT_FTR_IS_PROCESSED, "F  ")
                   .NewCheckField(Names.WS_SS_PG_HDR_IS_PROCESSED, "P  ")
                   .NewCheckField(Names.WS_SS_BODY_IS_PROCESSED, "B  ")
                   ;
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_KEEP_DTL_TOGETHER_FG, FieldType.String, 1, "N");
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_PRINT_PG_BRK_SPACING, FieldType.CompShort, 4);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_PRINT_PG_BRK_LINE, FieldType.String, 132);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_PRINT_RPT_FTR_LINE, FieldType.String, 132);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_PG_BRK_FLAG, FieldType.String, 1, "Y");
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_CUR_RPT_HDR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_CUR_RPT_FTR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_FIRST_TIME_FLAG, FieldType.String, 1, "Y")
                   .NewCheckField(Names.WS_SS_FIRST_TIME, "Y")
                   ;
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_DISABLE_SUPPRESS, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_SS_SUPPRESS_DUPLICATES, "N")
                   .NewCheckField(Names.WS_SS_PRINT_DUPLICATES, "Y")
                   ;
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_BODY_SECTION_LINES, FieldType.UnsignedNumeric, 3, 4);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_BODY_SUPPRESS_LINES, FieldType.SignedNumeric, 3, 1);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_GR_COUNTER, FieldType.UnsignedNumeric, 7, ZERO);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_PAGE_SUPPRESS, FieldType.String, 1, "N");
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_PAGE_SUPPRESS_AFTER, FieldType.String, 1, "N");
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_PAGE_DTL_LINES, FieldType.SignedNumeric, 3, 0);
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_CURRENTLY_WRAPPING, FieldType.String, 1, "N");
               SS_WORK_FIELDS.CreateNewField(Names.WS_SS_CUR_PRINTING_PAGE_HDR, FieldType.String, 1, "N");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ33, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ34, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ35, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ36, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ37, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ38, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ39, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ40, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ43, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ41, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ42, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ4, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ5, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ6, FieldType.String, 8, "ZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ7, FieldType.String, 8, "ZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ8, FieldType.String, 8, "ZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ9, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ10, FieldType.String, 8, "ZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ11, FieldType.String, 8, "ZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ12, FieldType.String, 9, "ZZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ13, FieldType.String, 8, "ZZZZZZZ9");
               SS_WORK_FIELDS.CreateNewField(Names.SS_EDIT_PATTERN_OBJ14, FieldType.String, 8, "ZZZZZZZ9");
           });

            recordDef.CreateNewGroup(Names.SS_DTL_LINE_SECTION, (SS_DTL_LINE_SECTION) =>
           {
               SS_DTL_LINE_SECTION.CreateNewField(Names.SS_DTL_LINE_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               SS_DTL_LINE_SECTION.CreateNewField(Names.SS_DTL_LINE_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               SS_DTL_LINE_SECTION.CreateNewField(Names.SS_DTL_LINE_RESETPG_AFTER, FieldType.String, 1, "N");
               SS_DTL_LINE_SECTION.CreateNewField(Names.SS_DTL_LINE_KEEP_TOGETHER, FieldType.String, 1, "N");
               SS_DTL_LINE_SECTION.CreateNewField(Names.SS_DTL_LINE_SUPPRSS_BLANK, FieldType.String, 1, "N");
               SS_DTL_LINE_SECTION.CreateNewField(Names.SS_DTL_LINE_PRINT_ATBOTTM, FieldType.String, 1, "N");
               SS_DTL_LINE_SECTION.CreateNewField(Names.SS_DTL_LINE_KEEP_WITHNEXT, FieldType.String, 1, "N");
               SS_DTL_LINE_SECTION.CreateNewField(Names.SS_DTL_LINE_BEFORE_PG_BRK, FieldType.String, 1, "N");
               SS_DTL_LINE_SECTION.CreateNewField(Names.SS_DTL_LINE_AFTER_PG_BRK, FieldType.String, 1, "N");
               SS_DTL_LINE_SECTION.CreateNewField(Names.SS_DTL_LINE_PRINT_FLAG, FieldType.String, 1, "Y");
               SS_DTL_LINE_SECTION.CreateNewGroup(Names.SS_DTL_LINE_0, (SS_DTL_LINE_0) =>
               {
                   SS_DTL_LINE_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SS_DTL_LINE_0.CreateNewField(Names.SS_DTL_LINE_0_A_OBJ1, FieldType.String, 30);
               });
               SS_DTL_LINE_SECTION.CreateNewGroup(Names.SS_DTL_LINE_1, (SS_DTL_LINE_1) =>
               {
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ2, FieldType.String, 14);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ33_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ33, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ33, FieldType.String, SS_DTL_LINE_1_A_OBJ33_local, 9);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ34_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ34, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ34, FieldType.String, SS_DTL_LINE_1_A_OBJ34_local, 9);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ35_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ35, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ35, FieldType.String, SS_DTL_LINE_1_A_OBJ35_local, 9);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ36_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ36, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ36, FieldType.String, SS_DTL_LINE_1_A_OBJ36_local, 9);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ37_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ37, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ37, FieldType.String, SS_DTL_LINE_1_A_OBJ37_local, 9);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ38_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ38, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ38, FieldType.String, SS_DTL_LINE_1_A_OBJ38_local, 9);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ39_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ39, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ39, FieldType.String, SS_DTL_LINE_1_A_OBJ39_local, 9);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ40_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ40, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ40, FieldType.String, SS_DTL_LINE_1_A_OBJ40_local, 9);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ43_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ43, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ43, FieldType.String, SS_DTL_LINE_1_A_OBJ43_local, 9);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ41_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ41, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ41, FieldType.String, SS_DTL_LINE_1_A_OBJ41_local, 9);
                   SS_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SS_DTL_LINE_1_A_OBJ42_local = SS_DTL_LINE_1.CreateNewField(Names.SS_DTL_LINE_1_A_OBJ42, FieldType.String, 9);
                   SS_DTL_LINE_1.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_1_A_OBJ42, FieldType.String, SS_DTL_LINE_1_A_OBJ42_local, 9);
               });
               SS_DTL_LINE_SECTION.CreateNewGroup(Names.SS_DTL_LINE_2, (SS_DTL_LINE_2) =>
               {
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 6, SPACES);
                   SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ3, FieldType.String, 5);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 6, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ4_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ4, FieldType.String, 9);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ4, FieldType.String, SS_DTL_LINE_2_A_OBJ4_local, 9);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ5_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ5, FieldType.String, 9);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ5, FieldType.String, SS_DTL_LINE_2_A_OBJ5_local, 9);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 3, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ6_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ6, FieldType.String, 8);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ6, FieldType.String, SS_DTL_LINE_2_A_OBJ6_local, 8);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ7_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ7, FieldType.String, 8);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ7, FieldType.String, SS_DTL_LINE_2_A_OBJ7_local, 8);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ8_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ8, FieldType.String, 8);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ8, FieldType.String, SS_DTL_LINE_2_A_OBJ8_local, 8);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ9_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ9, FieldType.String, 9);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ9, FieldType.String, SS_DTL_LINE_2_A_OBJ9_local, 9);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 3, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ10_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ10, FieldType.String, 8);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ10, FieldType.String, SS_DTL_LINE_2_A_OBJ10_local, 8);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ11_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ11, FieldType.String, 8);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ11, FieldType.String, SS_DTL_LINE_2_A_OBJ11_local, 8);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ12_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ12, FieldType.String, 9);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ12, FieldType.String, SS_DTL_LINE_2_A_OBJ12_local, 9);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 3, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ13_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ13, FieldType.String, 8);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ13, FieldType.String, SS_DTL_LINE_2_A_OBJ13_local, 8);
                   SS_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField SS_DTL_LINE_2_A_OBJ14_local = SS_DTL_LINE_2.CreateNewField(Names.SS_DTL_LINE_2_A_OBJ14, FieldType.String, 8);
                   SS_DTL_LINE_2.CreateNewFieldRedefine(Names.SS_DTL_SUPRES_2_A_OBJ14, FieldType.String, SS_DTL_LINE_2_A_OBJ14_local, 8);
               });
               SS_DTL_LINE_SECTION.CreateNewGroup(Names.SS_DTL_LINE_3, (SS_DTL_LINE_3) =>
               {
                   SS_DTL_LINE_3.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
           });

            recordDef.CreateNewGroup(Names.SS_RPT_FTR_SECTION, (SS_RPT_FTR_SECTION) =>
           {
               SS_RPT_FTR_SECTION.CreateNewField(Names.SS_RPT_FTR_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               SS_RPT_FTR_SECTION.CreateNewField(Names.SS_RPT_FTR_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               SS_RPT_FTR_SECTION.CreateNewField(Names.SS_RPT_FTR_RESETPG_AFTER, FieldType.String, 1, "N");
               SS_RPT_FTR_SECTION.CreateNewField(Names.SS_RPT_FTR_KEEP_TOGETHER, FieldType.String, 1, "N");
               SS_RPT_FTR_SECTION.CreateNewField(Names.SS_RPT_FTR_SUPPRSS_BLANK, FieldType.String, 1, "N");
               SS_RPT_FTR_SECTION.CreateNewField(Names.SS_RPT_FTR_PRINT_ATBOTTM, FieldType.String, 1, "N");
               SS_RPT_FTR_SECTION.CreateNewField(Names.SS_RPT_FTR_KEEP_WITHNEXT, FieldType.String, 1, "N");
               SS_RPT_FTR_SECTION.CreateNewField(Names.SS_RPT_FTR_BEFORE_PG_BRK, FieldType.String, 1, "N");
               SS_RPT_FTR_SECTION.CreateNewField(Names.SS_RPT_FTR_AFTER_PG_BRK, FieldType.String, 1, "N");
               SS_RPT_FTR_SECTION.CreateNewField(Names.SS_RPT_FTR_PRINT_FLAG, FieldType.String, 1, "Y");
               SS_RPT_FTR_SECTION.CreateNewGroup(Names.SS_RPT_FTR_0, (SS_RPT_FTR_0) =>
               {
                   SS_RPT_FTR_0.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               SS_RPT_FTR_SECTION.CreateNewGroup(Names.SS_RPT_FTR_1, (SS_RPT_FTR_1) =>
               {
                   SS_RPT_FTR_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SS_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, "The number of cases in the Gra");
                   SS_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, "nd Total is not the sum of the");
                   SS_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, " prior counts as a case may ha");
                   SS_RPT_FTR_1.CreateNewFillerField(FieldType.String, 30, "ve many current or arrearage c");
                   SS_RPT_FTR_1.CreateNewFillerField(FieldType.String, 11, "ollections.");
               });
           });

            recordDef.CreateNewGroup(Names.SS_PAGE_HDR_SECTION, (SS_PAGE_HDR_SECTION) =>
           {
               SS_PAGE_HDR_SECTION.CreateNewField(Names.SS_PAGE_HDR_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               SS_PAGE_HDR_SECTION.CreateNewField(Names.SS_PAGE_HDR_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               SS_PAGE_HDR_SECTION.CreateNewField(Names.SS_PAGE_HDR_RESETPG_AFTER, FieldType.String, 1, "N");
               SS_PAGE_HDR_SECTION.CreateNewField(Names.SS_PAGE_HDR_KEEP_TOGETHER, FieldType.String, 1, "N");
               SS_PAGE_HDR_SECTION.CreateNewField(Names.SS_PAGE_HDR_SUPPRSS_BLANK, FieldType.String, 1, "N");
               SS_PAGE_HDR_SECTION.CreateNewField(Names.SS_PAGE_HDR_PRINT_ATBOTTM, FieldType.String, 1, "N");
               SS_PAGE_HDR_SECTION.CreateNewField(Names.SS_PAGE_HDR_KEEP_WITHNEXT, FieldType.String, 1, "N");
               SS_PAGE_HDR_SECTION.CreateNewField(Names.SS_PAGE_HDR_BEFORE_PG_BRK, FieldType.String, 1, "Y");
               SS_PAGE_HDR_SECTION.CreateNewField(Names.SS_PAGE_HDR_AFTER_PG_BRK, FieldType.String, 1, "N");
               SS_PAGE_HDR_SECTION.CreateNewField(Names.SS_PAGE_HDR_PRINT_FLAG, FieldType.String, 1, "Y");
               SS_PAGE_HDR_SECTION.CreateNewGroup(Names.SS_PAGE_HDR_0, (SS_PAGE_HDR_0) =>
               {
                   SS_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SS_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 8, "SRRUN156");
                   SS_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 49, SPACES);
                   SS_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 15, "State of Kansas");
                   SS_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 50, SPACES);
                   SS_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 6, "Page: ");
                   SS_PAGE_HDR_0.CreateNewField(Names.SS_PAGE_HDR_0_P_OBJ19, FieldType.NumericEdited, "ZZ9", 3);
               });
               SS_PAGE_HDR_SECTION.CreateNewGroup(Names.SS_PAGE_HDR_1, (SS_PAGE_HDR_1) =>
               {
                   SS_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SS_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 10, "Run Date: ");
                   SS_PAGE_HDR_1.CreateNewField(Names.SS_PAGE_HDR_1_D_OBJ21, FieldType.String, 10);
                   SS_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 21, SPACES);
                   SS_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 30, "Department of Social and Rehab");
                   SS_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 18, "ilitation Services");
               });
               SS_PAGE_HDR_SECTION.CreateNewGroup(Names.SS_PAGE_HDR_2, (SS_PAGE_HDR_2) =>
               {
                   SS_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SS_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 10, "Run Time: ");
                   SS_PAGE_HDR_2.CreateNewField(Names.SS_PAGE_HDR_2_T_OBJ24, FieldType.String, 8);
                   SS_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 30, SPACES);
                   SS_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 30, "Child Support Enforcement Prog");
                   SS_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 3, "ram");
               });
               SS_PAGE_HDR_SECTION.CreateNewGroup(Names.SS_PAGE_HDR_3, (SS_PAGE_HDR_3) =>
               {
                   SS_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 49, SPACES);
                   SS_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 30, "Report of Monthly Collection C");
                   SS_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 4, "ount");
               });
               SS_PAGE_HDR_SECTION.CreateNewGroup(Names.SS_PAGE_HDR_4, (SS_PAGE_HDR_4) =>
               {
                   SS_PAGE_HDR_4.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               SS_PAGE_HDR_SECTION.CreateNewGroup(Names.SS_PAGE_HDR_5, (SS_PAGE_HDR_5) =>
               {
                   SS_PAGE_HDR_5.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SS_PAGE_HDR_5.CreateNewFillerField(FieldType.String, 18, "Section Supervisor");
                   SS_PAGE_HDR_5.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SS_PAGE_HDR_5.CreateNewField(Names.SS_PAGE_HDR_5_A_OBJ28, FieldType.String, 30);
               });
               SS_PAGE_HDR_SECTION.CreateNewGroup(Names.SS_PAGE_HDR_6, (SS_PAGE_HDR_6) =>
               {
                   SS_PAGE_HDR_6.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SS_PAGE_HDR_6.CreateNewFillerField(FieldType.String, 12, "Kansas Cases");
               });
               SS_PAGE_HDR_SECTION.CreateNewGroup(Names.SS_PAGE_HDR_7, (SS_PAGE_HDR_7) =>
               {
                   SS_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 20, SPACES);
                   SS_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 30, "Total |TAF                    ");
                   SS_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 30, "                 |Non TAF     ");
                   SS_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 29, "                  |State Only");
               });
               SS_PAGE_HDR_SECTION.CreateNewGroup(Names.SS_PAGE_HDR_8, (SS_PAGE_HDR_8) =>
               {
                   SS_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 26, SPACES);
                   SS_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "|Subtotal      TAF      XTAF  ");
                   SS_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "  TAF-FC   |Subtotal   NA Reg ");
                   SS_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "  PA Related|Subtotal     GA-F");
                   SS_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 14, "C   MHDD Inst.");
               });
               SS_PAGE_HDR_SECTION.CreateNewGroup(Names.SS_PAGE_HDR_9, (SS_PAGE_HDR_9) =>
               {
                   SS_PAGE_HDR_9.CreateNewFillerField(FieldType.String, 1, SPACES);
                   SS_PAGE_HDR_9.CreateNewFillerField(FieldType.String, 13, "Child Support");
               });
           });

            recordDef.CreateNewGroup(Names.MAIN_WORK_FIELDS, (MAIN_WORK_FIELDS) =>
           {
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CNTL_HDR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_MAIN_CNTL_HDR, "Y")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CNTL_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_MAIN_CNTL_FTR, "Y")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_RPT_FTR_FLAG, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_MAIN_RPT_FTR, "Y")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_DTL_LINE_QT, FieldType.UnsignedNumeric, 4, 4);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PG_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 10);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PG_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 2);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_RPT_HDR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_RPT_FTR_LINE_QT, FieldType.UnsignedNumeric, 4, 0);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_LINE_SPACING, FieldType.UnsignedNumeric, 4, 1);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_RPT_TYPE_CD, FieldType.String, 1, "D")
                   .NewCheckField(Names.WS_MAIN_SUMMARY_RPT_REQUESTED, "S")
                   .NewCheckField(Names.WS_MAIN_DTL_RPT_REQUESTED, "D")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_SECTION_PROCESSING_IND, FieldType.String, 3, SPACE)
                   .NewCheckField(Names.WS_MAIN_RPT_HDR_IS_PROCESSED, "H  ")
                   .NewCheckField(Names.WS_MAIN_RPT_FTR_IS_PROCESSED, "F  ")
                   .NewCheckField(Names.WS_MAIN_PG_HDR_IS_PROCESSED, "P  ")
                   .NewCheckField(Names.WS_MAIN_BODY_IS_PROCESSED, "B  ")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_KEEP_DTL_TOGETHER_FG, FieldType.String, 1, "N");
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PRINT_PG_BRK_SPACING, FieldType.CompShort, 4);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PRINT_PG_BRK_LINE, FieldType.String, 132);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PRINT_RPT_FTR_LINE, FieldType.String, 132);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PG_BRK_FLAG, FieldType.String, 1, "Y");
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CUR_RPT_HDR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CUR_RPT_FTR_LINE_NUM, FieldType.UnsignedNumeric, 2, ZERO);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_FIRST_TIME_FLAG, FieldType.String, 1, "Y")
                   .NewCheckField(Names.WS_MAIN_FIRST_TIME, "Y")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_DISABLE_SUPPRESS, FieldType.String, 1, "N")
                   .NewCheckField(Names.WS_MAIN_SUPPRESS_DUPLICATES, "N")
                   .NewCheckField(Names.WS_MAIN_PRINT_DUPLICATES, "Y")
                   ;
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_BODY_SECTION_LINES, FieldType.UnsignedNumeric, 3, 4);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_BODY_SUPPRESS_LINES, FieldType.SignedNumeric, 3, 1);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_GR_COUNTER, FieldType.UnsignedNumeric, 7, ZERO);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PAGE_SUPPRESS, FieldType.String, 1, "N");
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PAGE_SUPPRESS_AFTER, FieldType.String, 1, "N");
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_PAGE_DTL_LINES, FieldType.SignedNumeric, 3, 0);
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CURRENTLY_WRAPPING, FieldType.String, 1, "N");
               MAIN_WORK_FIELDS.CreateNewField(Names.WS_MAIN_CUR_PRINTING_PAGE_HDR, FieldType.String, 1, "N");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ33, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ34, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ35, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ36, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ37, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ38, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ39, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ40, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ41, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ42, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ43, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ4, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ5, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ6, FieldType.String, 8, "ZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ7, FieldType.String, 8, "ZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ8, FieldType.String, 8, "ZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ9, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ10, FieldType.String, 8, "ZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ11, FieldType.String, 8, "ZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ12, FieldType.String, 9, "ZZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ13, FieldType.String, 8, "ZZZZZZZ9");
               MAIN_WORK_FIELDS.CreateNewField(Names.MAIN_EDIT_PATTERN_OBJ14, FieldType.String, 8, "ZZZZZZZ9");
           });

            recordDef.CreateNewGroup(Names.MAIN_DTL_LINE_SECTION, (MAIN_DTL_LINE_SECTION) =>
           {
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_RESETPG_AFTER, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_KEEP_TOGETHER, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_SUPPRSS_BLANK, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_PRINT_ATBOTTM, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_KEEP_WITHNEXT, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_BEFORE_PG_BRK, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_AFTER_PG_BRK, FieldType.String, 1, "N");
               MAIN_DTL_LINE_SECTION.CreateNewField(Names.MAIN_DTL_LINE_PRINT_FLAG, FieldType.String, 1, "Y");
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_0, (MAIN_DTL_LINE_0) =>
               {
                   MAIN_DTL_LINE_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_0.CreateNewField(Names.MAIN_DTL_LINE_0_A_OBJ1, FieldType.String, 30);
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_1, (MAIN_DTL_LINE_1) =>
               {
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ2, FieldType.String, 14);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ33_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ33, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ33, FieldType.String, MAIN_DTL_LINE_1_A_OBJ33_local, 9);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ34_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ34, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ34, FieldType.String, MAIN_DTL_LINE_1_A_OBJ34_local, 9);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ35_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ35, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ35, FieldType.String, MAIN_DTL_LINE_1_A_OBJ35_local, 9);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ36_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ36, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ36, FieldType.String, MAIN_DTL_LINE_1_A_OBJ36_local, 9);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ37_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ37, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ37, FieldType.String, MAIN_DTL_LINE_1_A_OBJ37_local, 9);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ38_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ38, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ38, FieldType.String, MAIN_DTL_LINE_1_A_OBJ38_local, 9);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ39_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ39, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ39, FieldType.String, MAIN_DTL_LINE_1_A_OBJ39_local, 9);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ40_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ40, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ40, FieldType.String, MAIN_DTL_LINE_1_A_OBJ40_local, 9);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ41_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ41, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ41, FieldType.String, MAIN_DTL_LINE_1_A_OBJ41_local, 9);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ42_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ42, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ42, FieldType.String, MAIN_DTL_LINE_1_A_OBJ42_local, 9);
                   MAIN_DTL_LINE_1.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_1_A_OBJ43_local = MAIN_DTL_LINE_1.CreateNewField(Names.MAIN_DTL_LINE_1_A_OBJ43, FieldType.String, 9);
                   MAIN_DTL_LINE_1.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_1_A_OBJ43, FieldType.String, MAIN_DTL_LINE_1_A_OBJ43_local, 9);
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_2, (MAIN_DTL_LINE_2) =>
               {
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 4, SPACES);
                   MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ3, FieldType.String, 5);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 8, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ4_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ4, FieldType.String, 9);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ4, FieldType.String, MAIN_DTL_LINE_2_A_OBJ4_local, 9);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 1, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ5_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ5, FieldType.String, 9);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ5, FieldType.String, MAIN_DTL_LINE_2_A_OBJ5_local, 9);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ6_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ6, FieldType.String, 8);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ6, FieldType.String, MAIN_DTL_LINE_2_A_OBJ6_local, 8);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ7_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ7, FieldType.String, 8);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ7, FieldType.String, MAIN_DTL_LINE_2_A_OBJ7_local, 8);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ8_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ8, FieldType.String, 8);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ8, FieldType.String, MAIN_DTL_LINE_2_A_OBJ8_local, 8);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ9_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ9, FieldType.String, 9);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ9, FieldType.String, MAIN_DTL_LINE_2_A_OBJ9_local, 9);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ10_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ10, FieldType.String, 8);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ10, FieldType.String, MAIN_DTL_LINE_2_A_OBJ10_local, 8);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ11_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ11, FieldType.String, 8);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ11, FieldType.String, MAIN_DTL_LINE_2_A_OBJ11_local, 8);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ12_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ12, FieldType.String, 9);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ12, FieldType.String, MAIN_DTL_LINE_2_A_OBJ12_local, 9);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ13_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ13, FieldType.String, 8);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ13, FieldType.String, MAIN_DTL_LINE_2_A_OBJ13_local, 8);
                   MAIN_DTL_LINE_2.CreateNewFillerField(FieldType.String, 2, SPACES);

                   IField MAIN_DTL_LINE_2_A_OBJ14_local = MAIN_DTL_LINE_2.CreateNewField(Names.MAIN_DTL_LINE_2_A_OBJ14, FieldType.String, 8);
                   MAIN_DTL_LINE_2.CreateNewFieldRedefine(Names.MAIN_DTL_SUPRES_2_A_OBJ14, FieldType.String, MAIN_DTL_LINE_2_A_OBJ14_local, 8);
               });
               MAIN_DTL_LINE_SECTION.CreateNewGroup(Names.MAIN_DTL_LINE_3, (MAIN_DTL_LINE_3) =>
               {
                   MAIN_DTL_LINE_3.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
           });

            recordDef.CreateNewGroup(Names.MAIN_PAGE_HDR_SECTION, (MAIN_PAGE_HDR_SECTION) =>
           {
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_RESETPG_AFTER, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_KEEP_TOGETHER, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_SUPPRSS_BLANK, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_PRINT_ATBOTTM, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_KEEP_WITHNEXT, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_BEFORE_PG_BRK, FieldType.String, 1, "Y");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_AFTER_PG_BRK, FieldType.String, 1, "N");
               MAIN_PAGE_HDR_SECTION.CreateNewField(Names.MAIN_PAGE_HDR_PRINT_FLAG, FieldType.String, 1, "Y");
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_0, (MAIN_PAGE_HDR_0) =>
               {
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 8, "SRRUN156");
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 49, SPACES);
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 15, "State of Kansas");
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 50, SPACES);
                   MAIN_PAGE_HDR_0.CreateNewFillerField(FieldType.String, 6, "Page: ");
                   MAIN_PAGE_HDR_0.CreateNewField(Names.MAIN_PAGE_HDR_0_P_OBJ26, FieldType.NumericEdited, "ZZ9", 3);
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_1, (MAIN_PAGE_HDR_1) =>
               {
                   MAIN_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 10, "Run Date: ");
                   MAIN_PAGE_HDR_1.CreateNewField(Names.MAIN_PAGE_HDR_1_D_OBJ30, FieldType.String, 10);
                   MAIN_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 21, SPACES);
                   MAIN_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 30, "Department of Social and Rehab");
                   MAIN_PAGE_HDR_1.CreateNewFillerField(FieldType.String, 18, "ilitation Services");
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_2, (MAIN_PAGE_HDR_2) =>
               {
                   MAIN_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 10, "Run Time: ");
                   MAIN_PAGE_HDR_2.CreateNewField(Names.MAIN_PAGE_HDR_2_T_OBJ31, FieldType.String, 8);
                   MAIN_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 30, SPACES);
                   MAIN_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 30, "Child Support Enforcement Prog");
                   MAIN_PAGE_HDR_2.CreateNewFillerField(FieldType.String, 3, "ram");
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_3, (MAIN_PAGE_HDR_3) =>
               {
                   MAIN_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 49, SPACES);
                   MAIN_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 30, "Report of Monthly Collection C");
                   MAIN_PAGE_HDR_3.CreateNewFillerField(FieldType.String, 4, "ount");
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_4, (MAIN_PAGE_HDR_4) =>
               {
                   MAIN_PAGE_HDR_4.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_5, (MAIN_PAGE_HDR_5) =>
               {
                   MAIN_PAGE_HDR_5.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_5.CreateNewFillerField(FieldType.String, 16, "Service Provider");
                   MAIN_PAGE_HDR_5.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_5.CreateNewField(Names.MAIN_PAGE_HDR_5_A_OBJ22, FieldType.String, 30);
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_6, (MAIN_PAGE_HDR_6) =>
               {
                   MAIN_PAGE_HDR_6.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_6.CreateNewFillerField(FieldType.String, 12, "Kansas Cases");
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_7, (MAIN_PAGE_HDR_7) =>
               {
                   MAIN_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 20, SPACES);
                   MAIN_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 30, "Total |TAF                    ");
                   MAIN_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 30, "                 |Non TAF     ");
                   MAIN_PAGE_HDR_7.CreateNewFillerField(FieldType.String, 29, "                  |State Only");
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_8, (MAIN_PAGE_HDR_8) =>
               {
                   MAIN_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 26, SPACES);
                   MAIN_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "|Subtotal     TAF      XTAF   ");
                   MAIN_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "  TAF-FC   |Subtotal   NA Reg ");
                   MAIN_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 30, "  PA Related|Subtotal    GA-FC");
                   MAIN_PAGE_HDR_8.CreateNewFillerField(FieldType.String, 13, "   MHDD Inst.");
               });
               MAIN_PAGE_HDR_SECTION.CreateNewGroup(Names.MAIN_PAGE_HDR_9, (MAIN_PAGE_HDR_9) =>
               {
                   MAIN_PAGE_HDR_9.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_HDR_9.CreateNewFillerField(FieldType.String, 13, "Child Support");
               });
           });

            recordDef.CreateNewGroup(Names.MAIN_PAGE_FTR_SECTION, (MAIN_PAGE_FTR_SECTION) =>
           {
               MAIN_PAGE_FTR_SECTION.CreateNewField(Names.MAIN_PAGE_FTR_BEFORE_SPACE, FieldType.UnsignedNumeric, 4, 0);
               MAIN_PAGE_FTR_SECTION.CreateNewField(Names.MAIN_PAGE_FTR_AFTER_SPACING, FieldType.UnsignedNumeric, 4, 0);
               MAIN_PAGE_FTR_SECTION.CreateNewField(Names.MAIN_PAGE_FTR_RESETPG_AFTER, FieldType.String, 1, "N");
               MAIN_PAGE_FTR_SECTION.CreateNewField(Names.MAIN_PAGE_FTR_KEEP_TOGETHER, FieldType.String, 1, "N");
               MAIN_PAGE_FTR_SECTION.CreateNewField(Names.MAIN_PAGE_FTR_SUPPRSS_BLANK, FieldType.String, 1, "N");
               MAIN_PAGE_FTR_SECTION.CreateNewField(Names.MAIN_PAGE_FTR_PRINT_ATBOTTM, FieldType.String, 1, "N");
               MAIN_PAGE_FTR_SECTION.CreateNewField(Names.MAIN_PAGE_FTR_KEEP_WITHNEXT, FieldType.String, 1, "N");
               MAIN_PAGE_FTR_SECTION.CreateNewField(Names.MAIN_PAGE_FTR_BEFORE_PG_BRK, FieldType.String, 1, "N");
               MAIN_PAGE_FTR_SECTION.CreateNewField(Names.MAIN_PAGE_FTR_AFTER_PG_BRK, FieldType.String, 1, "Y");
               MAIN_PAGE_FTR_SECTION.CreateNewField(Names.MAIN_PAGE_FTR_PRINT_FLAG, FieldType.String, 1, "Y");
               MAIN_PAGE_FTR_SECTION.CreateNewGroup(Names.MAIN_PAGE_FTR_0, (MAIN_PAGE_FTR_0) =>
               {
                   MAIN_PAGE_FTR_0.CreateNewFillerField(FieldType.String, 132, SPACES);
               });
               MAIN_PAGE_FTR_SECTION.CreateNewGroup(Names.MAIN_PAGE_FTR_1, (MAIN_PAGE_FTR_1) =>
               {
                   MAIN_PAGE_FTR_1.CreateNewFillerField(FieldType.String, 1, SPACES);
                   MAIN_PAGE_FTR_1.CreateNewFillerField(FieldType.String, 30, "The number of cases in the Gra");
                   MAIN_PAGE_FTR_1.CreateNewFillerField(FieldType.String, 30, "nd Total is not the sum of the");
                   MAIN_PAGE_FTR_1.CreateNewFillerField(FieldType.String, 30, " prior counts as a case may ha");
                   MAIN_PAGE_FTR_1.CreateNewFillerField(FieldType.String, 30, "ve many current or arrearage c");
                   MAIN_PAGE_FTR_1.CreateNewFillerField(FieldType.String, 11, "ollections.");
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_EV1, (P_IMPORT_EV1) =>
           {
               P_IMPORT_EV1.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET, (P_COLLECTIONS_EXTRACT_ET) =>
               {
                   P_COLLECTIONS_EXTRACT_ET.CreateNewField(Names.P_COLLECTION_OFFICER_000101MS, FieldType.String, 1);

                   IField P_COLLECTION_OFFICER_0001_001_local = P_COLLECTIONS_EXTRACT_ET.CreateNewField(Names.P_COLLECTION_OFFICER_0001_001, FieldType.String, 30);
                   P_COLLECTIONS_EXTRACT_ET.CreateNewFieldRedefine(Names.P_COLLECTION_OFFICER_000101XX, FieldType.String, P_COLLECTION_OFFICER_0001_001_local, 30);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_EV2, (P_IMPORT_EV2) =>
           {
               P_IMPORT_EV2.CreateNewGroup(Names.P_REPORT_PARMS_ET, (P_REPORT_PARMS_ET) =>
               {
                   P_REPORT_PARMS_ET.CreateNewField(Names.P_PARM1_0002_002MS, FieldType.String, 1);

                   IField P_PARM1_0002_002_local = P_REPORT_PARMS_ET.CreateNewField(Names.P_PARM1_0002_002, FieldType.String, 2);
                   P_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.P_PARM1_0002_002XX, FieldType.String, P_PARM1_0002_002_local, 2);
                   P_REPORT_PARMS_ET.CreateNewField(Names.P_PARM2_0002_003MS, FieldType.String, 1);

                   IField P_PARM2_0002_003_local = P_REPORT_PARMS_ET.CreateNewField(Names.P_PARM2_0002_003, FieldType.String, 2);
                   P_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.P_PARM2_0002_003XX, FieldType.String, P_PARM2_0002_003_local, 2);
                   P_REPORT_PARMS_ET.CreateNewField(Names.P_SUBREPORT_CODE_0002_004MS, FieldType.String, 1);

                   IField P_SUBREPORT_CODE_0002_004_local = P_REPORT_PARMS_ET.CreateNewField(Names.P_SUBREPORT_CODE_0002_004, FieldType.String, 4);
                   P_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.P_SUBREPORT_CODE_0002_004XX, FieldType.String, P_SUBREPORT_CODE_0002_004_local, 4);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_EV3, (P_IMPORT_EV3) =>
           {
               P_IMPORT_EV3.CreateNewGroup(Names.P_REPORT_LITERALS_ET, (P_REPORT_LITERALS_ET) =>
               {
                   P_REPORT_LITERALS_ET.CreateNewField(Names.P_SUB_HEADING_1_0003_005MS, FieldType.String, 1);

                   IField P_SUB_HEADING_1_0003_005_local = P_REPORT_LITERALS_ET.CreateNewField(Names.P_SUB_HEADING_1_0003_005, FieldType.String, 30);
                   P_REPORT_LITERALS_ET.CreateNewFieldRedefine(Names.P_SUB_HEADING_1_0003_005XX, FieldType.String, P_SUB_HEADING_1_0003_005_local, 30);
                   P_REPORT_LITERALS_ET.CreateNewField(Names.P_SUB_HEADING_2_0003_006MS, FieldType.String, 1);

                   IField P_SUB_HEADING_2_0003_006_local = P_REPORT_LITERALS_ET.CreateNewField(Names.P_SUB_HEADING_2_0003_006, FieldType.String, 14);
                   P_REPORT_LITERALS_ET.CreateNewFieldRedefine(Names.P_SUB_HEADING_2_0003_006XX, FieldType.String, P_SUB_HEADING_2_0003_006_local, 14);
                   P_REPORT_LITERALS_ET.CreateNewField(Names.P_SUB_HEADING_3_0003_007MS, FieldType.String, 1);

                   IField P_SUB_HEADING_3_0003_007_local = P_REPORT_LITERALS_ET.CreateNewField(Names.P_SUB_HEADING_3_0003_007, FieldType.String, 5);
                   P_REPORT_LITERALS_ET.CreateNewFieldRedefine(Names.P_SUB_HEADING_3_0003_007XX, FieldType.String, P_SUB_HEADING_3_0003_007_local, 5);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_TOTAL_EV4, (P_IMPORT_TOTAL_EV4) =>
           {
               P_IMPORT_TOTAL_EV4.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d2, (P_COLLECTIONS_EXTRACT_ET_d2) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d2.CreateNewField(Names.P_AMOUNT1_0004_008MS, FieldType.String, 1);

                   IField P_AMOUNT1_0004_008_local = P_COLLECTIONS_EXTRACT_ET_d2.CreateNewField(Names.P_AMOUNT1_0004_008, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d2.CreateNewFieldRedefine(Names.P_AMOUNT1_0004_008XX, FieldType.String, P_AMOUNT1_0004_008_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_TOTAL_EV5, (P_IMPORT_TOTAL_EV5) =>
           {
               P_IMPORT_TOTAL_EV5.CreateNewGroup(Names.P_IEF_SUPPLIED_ET, (P_IEF_SUPPLIED_ET) =>
               {
                   P_IEF_SUPPLIED_ET.CreateNewField(Names.P_COUNT_0005_009MS, FieldType.String, 1);

                   IField P_COUNT_0005_009_local = P_IEF_SUPPLIED_ET.CreateNewField(Names.P_COUNT_0005_009, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET.CreateNewFieldRedefine(Names.P_COUNT_0005_009XX, FieldType.String, P_COUNT_0005_009_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_TAF_TOTAL_EV6, (P_IMPORT_TAF_TOTAL_EV6) =>
           {
               P_IMPORT_TAF_TOTAL_EV6.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d3, (P_COLLECTIONS_EXTRACT_ET_d3) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d3.CreateNewField(Names.P_AMOUNT1_0006_010MS, FieldType.String, 1);

                   IField P_AMOUNT1_0006_010_local = P_COLLECTIONS_EXTRACT_ET_d3.CreateNewField(Names.P_AMOUNT1_0006_010, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d3.CreateNewFieldRedefine(Names.P_AMOUNT1_0006_010XX, FieldType.String, P_AMOUNT1_0006_010_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_TAF_TOTAL_EV7, (P_IMPORT_TAF_TOTAL_EV7) =>
           {
               P_IMPORT_TAF_TOTAL_EV7.CreateNewGroup(Names.P_IEF_SUPPLIED_ET_d2, (P_IEF_SUPPLIED_ET_d2) =>
               {
                   P_IEF_SUPPLIED_ET_d2.CreateNewField(Names.P_COUNT_0007_011MS, FieldType.String, 1);

                   IField P_COUNT_0007_011_local = P_IEF_SUPPLIED_ET_d2.CreateNewField(Names.P_COUNT_0007_011, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET_d2.CreateNewFieldRedefine(Names.P_COUNT_0007_011XX, FieldType.String, P_COUNT_0007_011_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_TAF_EV8, (P_IMPORT_TAF_EV8) =>
           {
               P_IMPORT_TAF_EV8.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d4, (P_COLLECTIONS_EXTRACT_ET_d4) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d4.CreateNewField(Names.P_AMOUNT1_0008_012MS, FieldType.String, 1);

                   IField P_AMOUNT1_0008_012_local = P_COLLECTIONS_EXTRACT_ET_d4.CreateNewField(Names.P_AMOUNT1_0008_012, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d4.CreateNewFieldRedefine(Names.P_AMOUNT1_0008_012XX, FieldType.String, P_AMOUNT1_0008_012_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_TAF_EV9, (P_IMPORT_TAF_EV9) =>
           {
               P_IMPORT_TAF_EV9.CreateNewGroup(Names.P_IEF_SUPPLIED_ET_d3, (P_IEF_SUPPLIED_ET_d3) =>
               {
                   P_IEF_SUPPLIED_ET_d3.CreateNewField(Names.P_COUNT_0009_013MS, FieldType.String, 1);

                   IField P_COUNT_0009_013_local = P_IEF_SUPPLIED_ET_d3.CreateNewField(Names.P_COUNT_0009_013, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET_d3.CreateNewFieldRedefine(Names.P_COUNT_0009_013XX, FieldType.String, P_COUNT_0009_013_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_XTAF_EV10, (P_IMPORT_XTAF_EV10) =>
           {
               P_IMPORT_XTAF_EV10.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d5, (P_COLLECTIONS_EXTRACT_ET_d5) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d5.CreateNewField(Names.P_AMOUNT1_0010_014MS, FieldType.String, 1);

                   IField P_AMOUNT1_0010_014_local = P_COLLECTIONS_EXTRACT_ET_d5.CreateNewField(Names.P_AMOUNT1_0010_014, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d5.CreateNewFieldRedefine(Names.P_AMOUNT1_0010_014XX, FieldType.String, P_AMOUNT1_0010_014_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_XTAF_EV11, (P_IMPORT_XTAF_EV11) =>
           {
               P_IMPORT_XTAF_EV11.CreateNewGroup(Names.P_IEF_SUPPLIED_ET_d4, (P_IEF_SUPPLIED_ET_d4) =>
               {
                   P_IEF_SUPPLIED_ET_d4.CreateNewField(Names.P_COUNT_0011_015MS, FieldType.String, 1);

                   IField P_COUNT_0011_015_local = P_IEF_SUPPLIED_ET_d4.CreateNewField(Names.P_COUNT_0011_015, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET_d4.CreateNewFieldRedefine(Names.P_COUNT_0011_015XX, FieldType.String, P_COUNT_0011_015_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_TAF_FC_EV12, (P_IMPORT_TAF_FC_EV12) =>
           {
               P_IMPORT_TAF_FC_EV12.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d6, (P_COLLECTIONS_EXTRACT_ET_d6) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d6.CreateNewField(Names.P_AMOUNT1_0012_016MS, FieldType.String, 1);

                   IField P_AMOUNT1_0012_016_local = P_COLLECTIONS_EXTRACT_ET_d6.CreateNewField(Names.P_AMOUNT1_0012_016, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d6.CreateNewFieldRedefine(Names.P_AMOUNT1_0012_016XX, FieldType.String, P_AMOUNT1_0012_016_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_TAF_FC_EV13, (P_IMPORT_TAF_FC_EV13) =>
           {
               P_IMPORT_TAF_FC_EV13.CreateNewGroup(Names.P_IEF_SUPPLIED_ET_d5, (P_IEF_SUPPLIED_ET_d5) =>
               {
                   P_IEF_SUPPLIED_ET_d5.CreateNewField(Names.P_COUNT_0013_017MS, FieldType.String, 1);

                   IField P_COUNT_0013_017_local = P_IEF_SUPPLIED_ET_d5.CreateNewField(Names.P_COUNT_0013_017, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET_d5.CreateNewFieldRedefine(Names.P_COUNT_0013_017XX, FieldType.String, P_COUNT_0013_017_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_NON_TAF_TOTAL_EV14, (P_IMPORT_NON_TAF_TOTAL_EV14) =>
           {
               P_IMPORT_NON_TAF_TOTAL_EV14.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d7, (P_COLLECTIONS_EXTRACT_ET_d7) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d7.CreateNewField(Names.P_AMOUNT1_0014_018MS, FieldType.String, 1);

                   IField P_AMOUNT1_0014_018_local = P_COLLECTIONS_EXTRACT_ET_d7.CreateNewField(Names.P_AMOUNT1_0014_018, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d7.CreateNewFieldRedefine(Names.P_AMOUNT1_0014_018XX, FieldType.String, P_AMOUNT1_0014_018_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_NON_TAF_TOTAL_EV15, (P_IMPORT_NON_TAF_TOTAL_EV15) =>
           {
               P_IMPORT_NON_TAF_TOTAL_EV15.CreateNewGroup(Names.P_IEF_SUPPLIED_ET_d6, (P_IEF_SUPPLIED_ET_d6) =>
               {
                   P_IEF_SUPPLIED_ET_d6.CreateNewField(Names.P_COUNT_0015_019MS, FieldType.String, 1);

                   IField P_COUNT_0015_019_local = P_IEF_SUPPLIED_ET_d6.CreateNewField(Names.P_COUNT_0015_019, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET_d6.CreateNewFieldRedefine(Names.P_COUNT_0015_019XX, FieldType.String, P_COUNT_0015_019_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_NA_EV16, (P_IMPORT_NA_EV16) =>
           {
               P_IMPORT_NA_EV16.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d8, (P_COLLECTIONS_EXTRACT_ET_d8) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d8.CreateNewField(Names.P_AMOUNT1_0016_020MS, FieldType.String, 1);

                   IField P_AMOUNT1_0016_020_local = P_COLLECTIONS_EXTRACT_ET_d8.CreateNewField(Names.P_AMOUNT1_0016_020, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d8.CreateNewFieldRedefine(Names.P_AMOUNT1_0016_020XX, FieldType.String, P_AMOUNT1_0016_020_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_NA_EV17, (P_IMPORT_NA_EV17) =>
           {
               P_IMPORT_NA_EV17.CreateNewGroup(Names.P_IEF_SUPPLIED_ET_d7, (P_IEF_SUPPLIED_ET_d7) =>
               {
                   P_IEF_SUPPLIED_ET_d7.CreateNewField(Names.P_COUNT_0017_021MS, FieldType.String, 1);

                   IField P_COUNT_0017_021_local = P_IEF_SUPPLIED_ET_d7.CreateNewField(Names.P_COUNT_0017_021, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET_d7.CreateNewFieldRedefine(Names.P_COUNT_0017_021XX, FieldType.String, P_COUNT_0017_021_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_PA_EV18, (P_IMPORT_PA_EV18) =>
           {
               P_IMPORT_PA_EV18.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d9, (P_COLLECTIONS_EXTRACT_ET_d9) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d9.CreateNewField(Names.P_AMOUNT1_0018_022MS, FieldType.String, 1);

                   IField P_AMOUNT1_0018_022_local = P_COLLECTIONS_EXTRACT_ET_d9.CreateNewField(Names.P_AMOUNT1_0018_022, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d9.CreateNewFieldRedefine(Names.P_AMOUNT1_0018_022XX, FieldType.String, P_AMOUNT1_0018_022_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_PA_EV19, (P_IMPORT_PA_EV19) =>
           {
               P_IMPORT_PA_EV19.CreateNewGroup(Names.P_IEF_SUPPLIED_ET_d8, (P_IEF_SUPPLIED_ET_d8) =>
               {
                   P_IEF_SUPPLIED_ET_d8.CreateNewField(Names.P_COUNT_0019_023MS, FieldType.String, 1);

                   IField P_COUNT_0019_023_local = P_IEF_SUPPLIED_ET_d8.CreateNewField(Names.P_COUNT_0019_023, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET_d8.CreateNewFieldRedefine(Names.P_COUNT_0019_023XX, FieldType.String, P_COUNT_0019_023_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_STATE_ONLY_TOTAL_EV20, (P_IMPORT_STATE_ONLY_TOTAL_EV20) =>
           {
               P_IMPORT_STATE_ONLY_TOTAL_EV20.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d10, (P_COLLECTIONS_EXTRACT_ET_d10) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d10.CreateNewField(Names.P_AMOUNT1_0020_024MS, FieldType.String, 1);

                   IField P_AMOUNT1_0020_024_local = P_COLLECTIONS_EXTRACT_ET_d10.CreateNewField(Names.P_AMOUNT1_0020_024, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d10.CreateNewFieldRedefine(Names.P_AMOUNT1_0020_024XX, FieldType.String, P_AMOUNT1_0020_024_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_STATE_ONLY_TOTAL_EV21, (P_IMPORT_STATE_ONLY_TOTAL_EV21) =>
           {
               P_IMPORT_STATE_ONLY_TOTAL_EV21.CreateNewGroup(Names.P_IEF_SUPPLIED_ET_d9, (P_IEF_SUPPLIED_ET_d9) =>
               {
                   P_IEF_SUPPLIED_ET_d9.CreateNewField(Names.P_COUNT_0021_025MS, FieldType.String, 1);

                   IField P_COUNT_0021_025_local = P_IEF_SUPPLIED_ET_d9.CreateNewField(Names.P_COUNT_0021_025, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET_d9.CreateNewFieldRedefine(Names.P_COUNT_0021_025XX, FieldType.String, P_COUNT_0021_025_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_GA_FC_EV22, (P_IMPORT_GA_FC_EV22) =>
           {
               P_IMPORT_GA_FC_EV22.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d11, (P_COLLECTIONS_EXTRACT_ET_d11) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d11.CreateNewField(Names.P_AMOUNT1_0022_026MS, FieldType.String, 1);

                   IField P_AMOUNT1_0022_026_local = P_COLLECTIONS_EXTRACT_ET_d11.CreateNewField(Names.P_AMOUNT1_0022_026, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d11.CreateNewFieldRedefine(Names.P_AMOUNT1_0022_026XX, FieldType.String, P_AMOUNT1_0022_026_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_GA_FC_EV23, (P_IMPORT_GA_FC_EV23) =>
           {
               P_IMPORT_GA_FC_EV23.CreateNewGroup(Names.P_IEF_SUPPLIED_ET_d10, (P_IEF_SUPPLIED_ET_d10) =>
               {
                   P_IEF_SUPPLIED_ET_d10.CreateNewField(Names.P_COUNT_0023_027MS, FieldType.String, 1);

                   IField P_COUNT_0023_027_local = P_IEF_SUPPLIED_ET_d10.CreateNewField(Names.P_COUNT_0023_027, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET_d10.CreateNewFieldRedefine(Names.P_COUNT_0023_027XX, FieldType.String, P_COUNT_0023_027_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_MHDD_EV24, (P_IMPORT_MHDD_EV24) =>
           {
               P_IMPORT_MHDD_EV24.CreateNewGroup(Names.P_COLLECTIONS_EXTRACT_ET_d12, (P_COLLECTIONS_EXTRACT_ET_d12) =>
               {
                   P_COLLECTIONS_EXTRACT_ET_d12.CreateNewField(Names.P_AMOUNT1_0024_028MS, FieldType.String, 1);

                   IField P_AMOUNT1_0024_028_local = P_COLLECTIONS_EXTRACT_ET_d12.CreateNewField(Names.P_AMOUNT1_0024_028, FieldType.SignedNumeric, 11, null, 2);
                   P_COLLECTIONS_EXTRACT_ET_d12.CreateNewFieldRedefine(Names.P_AMOUNT1_0024_028XX, FieldType.String, P_AMOUNT1_0024_028_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.P_IMPORT_MHDD_EV25, (P_IMPORT_MHDD_EV25) =>
           {
               P_IMPORT_MHDD_EV25.CreateNewGroup(Names.P_IEF_SUPPLIED_ET_d11, (P_IEF_SUPPLIED_ET_d11) =>
               {
                   P_IEF_SUPPLIED_ET_d11.CreateNewField(Names.P_COUNT_0025_029MS, FieldType.String, 1);

                   IField P_COUNT_0025_029_local = P_IEF_SUPPLIED_ET_d11.CreateNewField(Names.P_COUNT_0025_029, FieldType.SignedNumeric, 9);
                   P_IEF_SUPPLIED_ET_d11.CreateNewFieldRedefine(Names.P_COUNT_0025_029XX, FieldType.String, P_COUNT_0025_029_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.NUMERIC_EDIT_PATTERNS, (NUMERIC_EDIT_PATTERNS) =>
           {
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INTEGER2, FieldType.SignedNumeric, 18);

               IField EP_INTEGER_local = NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INTEGER, FieldType.NumericEdited, "-ZZZZZZZZZZZZZZZZZ9.", 20, null, 0);
               NUMERIC_EDIT_PATTERNS.CreateNewGroupRedefine(Names.EP_INTEGER_XX, EP_INTEGER_local, (EP_INTEGER_XX) =>
               {
                   EP_INTEGER_XX.CreateNewFieldArray(Names.EP_INTEGER_X, 20, FieldType.String, 1);
               });

               IField EP_DECIMAL_local = NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_DECIMAL, FieldType.UnsignedNumeric, 18, null, 18);
               NUMERIC_EDIT_PATTERNS.CreateNewGroupRedefine(Names.EP_DECIMAL_XX, EP_DECIMAL_local, (EP_DECIMAL_XX) =>
               {
                   EP_DECIMAL_XX.CreateNewFieldArray(Names.EP_DECIMAL_X, 18, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_PRECISION, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SCALE, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INP_INDEX, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_OUT_INDEX, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INDEX, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_COUNT, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_COUNT2, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SIGN, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_DPOINT_USED, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SIGN_USED, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_DOLLAR_USED, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_FIRST_DIGIT, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_ISTHERE_DCML, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_ISTHERE_V, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_INTEGER_LEN, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewGroup(Names.EP_SZNUMERIC, (EP_SZNUMERIC) =>
               {
                   EP_SZNUMERIC.CreateNewFieldArray(Names.EP_SZNUMERIC_X, 40, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewGroup(Names.EP_FORMATTED_VALUE, (EP_FORMATTED_VALUE) =>
               {
                   EP_FORMATTED_VALUE.CreateNewFieldArray(Names.EP_FORMATTED_VALUE_X, 40, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewGroup(Names.EP_EDIT_PATTERN, (EP_EDIT_PATTERN) =>
               {
                   EP_EDIT_PATTERN.CreateNewFieldArray(Names.EP_EDIT_PATTERN_X, 40, FieldType.String, 1);
               });
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_EDIT_PATTERN_LEN, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_SZNUMERIC_LEN, FieldType.UnsignedNumeric, 2);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_STOP, FieldType.String, 1);
               NUMERIC_EDIT_PATTERNS.CreateNewField(Names.EP_CURRENCY_COUNT, FieldType.UnsignedNumeric, 2);
           });
            recordDef.CreateNewFillerField(FieldType.String, 22, "END OF WORKING STORAGE");

        }

        protected override string GetRecordName()
        {
            return Names.WorkingStorage;
        }
        #endregion

    }
    #endregion Working Storage Class

    #region Linkage Section Class
    internal class SWEXF750_ls : PredefinedRecordBase
    {
        #region Name constants
        /// <summary>
        /// Name constants.
        /// </summary>
        internal static class Names
        {
            internal const string LinkageSection = "SWEXF750_ls_LinkageSection";
            internal const string TI_RUNTIME_PARM1 = "TI_RUNTIME_PARM1";
            internal const string TI_RUNTIME_PARM2 = "TI_RUNTIME_PARM2";
            internal const string GLOBDATA = "GLOBDATA";
            internal const string PSMGR_IEF_COMMAND = "PSMGR_IEF_COMMAND";
            internal const string PSMGR_IEF_COMMAND_1 = "PSMGR_IEF_COMMAND_1";
            internal const string PSMGR_IEF_COMMAND_2 = "PSMGR_IEF_COMMAND_2";
            internal const string PSMGR_IEF_TRANCODE = "PSMGR_IEF_TRANCODE";
            internal const string PSMGR_EXIT_STATE = "PSMGR_EXIT_STATE";
            internal const string PSMGR_EXIT_INFOMSG = "PSMGR_EXIT_INFOMSG";
            internal const string PSMGR_USER_ID = "PSMGR_USER_ID";
            internal const string PSMGR_TERMINAL_ID = "PSMGR_TERMINAL_ID";
            internal const string PSMGR_PRINTER_ID = "PSMGR_PRINTER_ID";
            internal const string PSMGR_CURRENT_DATE = "PSMGR_CURRENT_DATE";
            internal const string PSMGR_CURRENT_TIME = "PSMGR_CURRENT_TIME";
            internal const string PSMGR_RUNTIME_TYPE = "PSMGR_RUNTIME_TYPE";
            internal const string PSMGR_FUNCTION_DATA = "PSMGR_FUNCTION_DATA";
            internal const string PSMGR_FUNC_ERRMSG = "PSMGR_FUNC_ERRMSG";
            internal const string PSMGR_FUNC_NAME = "PSMGR_FUNC_NAME";
            internal const string PSMGR_FUNC_IN_DATE = "PSMGR_FUNC_IN_DATE";
            internal const string PSMGR_FUNC_IN_DDURA = "PSMGR_FUNC_IN_DDURA";
            internal const string DDURA_YEAR = "DDURA_YEAR";
            internal const string DDURA_Y_MISS = "DDURA_Y_MISS";
            internal const string DDURA_YYYY = "DDURA_YYYY";
            internal const string DDURA_MONTH = "DDURA_MONTH";
            internal const string DDURA_M_MISS = "DDURA_M_MISS";
            internal const string DDURA_MM = "DDURA_MM";
            internal const string DDURA_DAY = "DDURA_DAY";
            internal const string DDURA_D_MISS = "DDURA_D_MISS";
            internal const string DDURA_DD = "DDURA_DD";
            internal const string PSMGR_FUNC_OUT_DATE = "PSMGR_FUNC_OUT_DATE";
            internal const string PSMGR_FUNC_IN_TIME = "PSMGR_FUNC_IN_TIME";
            internal const string PSMGR_FUNC_IN_TDURA = "PSMGR_FUNC_IN_TDURA";
            internal const string TDURA_HOUR = "TDURA_HOUR";
            internal const string TDURA_H_MISS = "TDURA_H_MISS";
            internal const string TDURA_HH = "TDURA_HH";
            internal const string TDURA_MINUTE = "TDURA_MINUTE";
            internal const string TDURA_M_MISS = "TDURA_M_MISS";
            internal const string TDURA_MM = "TDURA_MM";
            internal const string TDURA_SECOND = "TDURA_SECOND";
            internal const string TDURA_S_MISS = "TDURA_S_MISS";
            internal const string TDURA_SS = "TDURA_SS";
            internal const string PSMGR_FUNC_OUT_TIME = "PSMGR_FUNC_OUT_TIME";
            internal const string PSMGR_IEF_NEXTTRAN = "PSMGR_IEF_NEXTTRAN";
            internal const string PSMGR_EXIT_MSGTYPE = "PSMGR_EXIT_MSGTYPE";
            internal const string PSMGR_IEF_DEBUG_FLAGS = "PSMGR_IEF_DEBUG_FLAGS";
            internal const string PSMGR_IEF_DEBUG = "PSMGR_IEF_DEBUG";
            internal const string PSMGR_DEBUG_ON = "PSMGR_DEBUG_ON";
            internal const string PSMGR_ENVIRONMENT_DATA = "PSMGR_ENVIRONMENT_DATA";
            internal const string PSMGR_PCB_CNT = "PSMGR_PCB_CNT";
            internal const string PSMGR_PCB_ENTRY = "PSMGR_PCB_ENTRY";
            internal const string PSMGR_PCB_ADR = "PSMGR_PCB_ADR";
            internal const string PSMGR_EAB_DATA = "PSMGR_EAB_DATA";
            internal const string PSMGR_EABPCB_CNT = "PSMGR_EABPCB_CNT";
            internal const string PSMGR_EABPCB_ENTRY = "PSMGR_EABPCB_ENTRY";
            internal const string PSMGR_EABPCB_ADR = "PSMGR_EABPCB_ADR";
            internal const string PSMGR_ERROR_DATA = "PSMGR_ERROR_DATA";
            internal const string ERROR_ACTION_NAME = "ERROR_ACTION_NAME";
            internal const string ERROR_ENCOUNTERED_SW = "ERROR_ENCOUNTERED_SW";
            internal const string VIEW_OVERFLOW_SW = "VIEW_OVERFLOW_SW";
            internal const string PSMGR_DASG_DATA = "PSMGR_DASG_DATA";
            internal const string ACTION_ID_X = "ACTION_ID_X";
            internal const string ACTION_ID = "ACTION_ID";
            internal const string ATTRIBUTE_ID_X = "ATTRIBUTE_ID_X";
            internal const string ATTRIBUTE_ID = "ATTRIBUTE_ID";
            internal const string STATUS_FLAG = "STATUS_FLAG";
            internal const string FATAL_ERROR_SF = "FATAL_ERROR_SF";
            internal const string PSTEP_USE_FAILURE = "PSTEP_USE_FAILURE";
            internal const string LAST_STATUS = "LAST_STATUS";
            internal const string DB_ERROR_FL_LS = "DB_ERROR_FL_LS";
            internal const string DUPLICATE_FOUND_FL_LS = "DUPLICATE_FOUND_FL_LS";
            internal const string INVALID_DATAA_FL_LS = "INVALID_DATAA_FL_LS";
            internal const string INVALID_DATAB_TYPE_FL_LS = "INVALID_DATAB_TYPE_FL_LS";
            internal const string INVALID_DATAB_PERM_FL_LS = "INVALID_DATAB_PERM_FL_LS";
            internal const string FATAL_ERROR_FL_LS = "FATAL_ERROR_FL_LS";
            internal const string NOT_FOUND_FL_LS = "NOT_FOUND_FL_LS";
            internal const string NOT_UNIQUE_FL_LS = "NOT_UNIQUE_FL_LS";
            internal const string IEF_FUNCTION_ERROR_FL_LS = "IEF_FUNCTION_ERROR_FL_LS";
            internal const string IEF_DURATION_ERROR_FL_LS = "IEF_DURATION_ERROR_FL_LS";
            internal const string USED_PSTEP_NOT_FOUND = "USED_PSTEP_NOT_FOUND";
            internal const string USED_PSTEP_ROUTING_ERR = "USED_PSTEP_ROUTING_ERR";
            internal const string USED_PSTEP_SND_FMT_ERR = "USED_PSTEP_SND_FMT_ERR";
            internal const string USED_PSTEP_ENCRYPT_ERR = "USED_PSTEP_ENCRYPT_ERR";
            internal const string USED_PSTEP_SND_BFR_ERR = "USED_PSTEP_SND_BFR_ERR";
            internal const string USED_PSTEP_RCV_BFR_ERR = "USED_PSTEP_RCV_BFR_ERR";
            internal const string USED_PSTEP_RCV_FMT_ERR = "USED_PSTEP_RCV_FMT_ERR";
            internal const string USED_PSTEP_TIRSECR_ERR = "USED_PSTEP_TIRSECR_ERR";
            internal const string USED_PSTEP_TOKEN_ERR = "USED_PSTEP_TOKEN_ERR";
            internal const string USED_PSTEP_SEND_MAX_SIZE = "USED_PSTEP_SEND_MAX_SIZE";
            internal const string USED_PSTEP_SECG_ERR = "USED_PSTEP_SECG_ERR";
            internal const string USED_PSTEP_ALLOC_ERR = "USED_PSTEP_ALLOC_ERR";
            internal const string USED_PSTEP_CONNECT_ERR = "USED_PSTEP_CONNECT_ERR";
            internal const string USED_PSTEP_XERR = "USED_PSTEP_XERR";
            internal const string USED_PSTEP_RCV_UA_ERR = "USED_PSTEP_RCV_UA_ERR";
            internal const string USED_PSTEP_RCV_ES_ERR = "USED_PSTEP_RCV_ES_ERR";
            internal const string USED_PSTEP_XFAL = "USED_PSTEP_XFAL";
            internal const string USED_PSTEP_SETOA_ERR = "USED_PSTEP_SETOA_ERR";
            internal const string USED_PSTEP_RCV_VIEW_ERR = "USED_PSTEP_RCV_VIEW_ERR";
            internal const string USED_PSTEP_DECRYPT_ERR = "USED_PSTEP_DECRYPT_ERR";
            internal const string SAVE_SQLCA = "SAVE_SQLCA";
            internal const string PSMGR_DEBUG_DATA = "PSMGR_DEBUG_DATA";
            internal const string PSMGR_TRACE_ADR = "PSMGR_TRACE_ADR";
            internal const string LAST_STATEMENT_X = "LAST_STATEMENT_X";
            internal const string LAST_STATEMENT_NUM = "LAST_STATEMENT_NUM";
            internal const string CUR_AB_ID = "CUR_AB_ID";
            internal const string CUR_AB_NAME = "CUR_AB_NAME";
            internal const string PSMGR_TIRDATE_SAVEAREA = "PSMGR_TIRDATE_SAVEAREA";
            internal const string PSMGR_TIRDATE_CMCB = "PSMGR_TIRDATE_CMCB";
            internal const string PSMGR_TIRDATE_DATE = "PSMGR_TIRDATE_DATE";
            internal const string PSMGR_TIRDATE_TIME = "PSMGR_TIRDATE_TIME";
            internal const string PSMGR_TIRDATE_INC = "PSMGR_TIRDATE_INC";
            internal const string PSMGR_TIRDATE_RC = "PSMGR_TIRDATE_RC";
            internal const string PSMGR_TIRDATE_OK = "PSMGR_TIRDATE_OK";
            internal const string PSMGR_TIRDATE_WARNING = "PSMGR_TIRDATE_WARNING";
            internal const string PSMGR_TIRDATE_ERROR = "PSMGR_TIRDATE_ERROR";
            internal const string PSMGR_TIRDATE_REQ = "PSMGR_TIRDATE_REQ";
            internal const string PSMGR_TIRDATE_DATEF = "PSMGR_TIRDATE_DATEF";
            internal const string PSMGR_TIRDATE_TIMEF = "PSMGR_TIRDATE_TIMEF";
            internal const string PSMGR_TIRDATE_RETMSG = "PSMGR_TIRDATE_RETMSG";
            internal const string PSMGR_TIRDATE_TSTAMP = "PSMGR_TIRDATE_TSTAMP";
            internal const string PSMGR_TIRDATE_DATE_Z = "PSMGR_TIRDATE_DATE_Z";
            internal const string PSMGR_TIRDATE_TIME_Z = "PSMGR_TIRDATE_TIME_Z";
            internal const string PSMGR_ROLLBACK_RQSTED = "PSMGR_ROLLBACK_RQSTED";
            internal const string ROLLBACK_RQSTED = "ROLLBACK_RQSTED";
            internal const string ABEND_RQSTED = "ABEND_RQSTED";
            internal const string TERMINATE_RQSTED = "TERMINATE_RQSTED";
            internal const string TIRTRCE_SAVE_AREA = "TIRTRCE_SAVE_AREA";
            internal const string TOP_INDX = "TOP_INDX";
            internal const string BOTTOM_INDX = "BOTTOM_INDX";
            internal const string END_INDX = "END_INDX";
            internal const string LAST_STMT = "LAST_STMT";
            internal const string TOP_OF_CALL = "TOP_OF_CALL";
            internal const string TRACE_BREAK_POINT = "TRACE_BREAK_POINT";
            internal const string TRACE_BREAK_POINT_STATUS = "TRACE_BREAK_POINT_STATUS";
            internal const string LAST_AB_NAME = "LAST_AB_NAME";
            internal const string COLOR = "COLOR";
            internal const string COLORT = "COLORT";
            internal const string HILITE = "HILITE";
            internal const string TRACE_ON_OFF = "TRACE_ON_OFF";
            internal const string CASCADE_DELETE_FLAGS = "CASCADE_DELETE_FLAGS";
            internal const string V1PRESENT = "V1PRESENT";
            internal const string V2PRESENT = "V2PRESENT";
            internal const string CASCADE1 = "CASCADE1";
            internal const string CASCADE2 = "CASCADE2";
            internal const string PROCESSQ_FLAG = "PROCESSQ_FLAG";
            internal const string PSMGR_ACTIVE_DIALECT = "PSMGR_ACTIVE_DIALECT";
            internal const string DIALECT_NAME = "DIALECT_NAME";
            internal const string MESSAGE_TABLE_NAME = "MESSAGE_TABLE_NAME";
            internal const string TRANSLATE_TABLE_NAME = "TRANSLATE_TABLE_NAME";
            internal const string PSMGR_FUNCTION_DATA_EXT = "PSMGR_FUNCTION_DATA_EXT";
            internal const string PSMGR_FUNC_IN_TIMESTAMP = "PSMGR_FUNC_IN_TIMESTAMP";
            internal const string PSMGR_FUNC_IN_TSDURA = "PSMGR_FUNC_IN_TSDURA";
            internal const string TSDURA_MICROSECOND = "TSDURA_MICROSECOND";
            internal const string TSDURA_M_MISS = "TSDURA_M_MISS";
            internal const string TSDURA_MS = "TSDURA_MS";
            internal const string PSMGR_FUNC_OUT_TIMESTAMP = "PSMGR_FUNC_OUT_TIMESTAMP";
            internal const string PSMGR_CICS_FAIL_SW = "PSMGR_CICS_FAIL_SW";
            internal const string INHIBIT_CICS_RECEIVE = "INHIBIT_CICS_RECEIVE";
            internal const string CLIENT_USERID = "CLIENT_USERID";
            internal const string CLIENT_PASSWORD = "CLIENT_PASSWORD";
            internal const string LOAD_MODULE_NAME = "LOAD_MODULE_NAME";
            internal const string INSTRUMENT_CODE = "INSTRUMENT_CODE";
            internal const string TX_RETRY_LIMIT = "TX_RETRY_LIMIT";
            internal const string TX_TIMEOUT = "TX_TIMEOUT";
            internal const string PSMGR_EXTRA_ERRINFO = "PSMGR_EXTRA_ERRINFO";
            internal const string ERRINFO_BUF_SIZE = "ERRINFO_BUF_SIZE";
            internal const string ERRINFO_MSG_SIZE = "ERRINFO_MSG_SIZE";
            internal const string ERRINFO_BUF_ADDR = "ERRINFO_BUF_ADDR";
            internal const string PSMGR_PSTEP_USE_PTRS = "PSMGR_PSTEP_USE_PTRS";
            internal const string PSTEP_FAIL_MSG_PTR = "PSTEP_FAIL_MSG_PTR";
            internal const string PSTEP_GURB_REST_PTR = "PSTEP_GURB_REST_PTR";
            internal const string PSTEP_LIPS_PTR = "PSTEP_LIPS_PTR";
            internal const string PSTEP_TBL_PTR = "PSTEP_TBL_PTR";
            internal const string PSTEP_DDF_PTR = "PSTEP_DDF_PTR";
            internal const string PSTEP_COMM_ID = "PSTEP_COMM_ID";
            internal const string PSTEP_APPL_LIST_PTR = "PSTEP_APPL_LIST_PTR";
            internal const string PSTEP_CURR_PST_PTR = "PSTEP_CURR_PST_PTR";
            internal const string PSMGR_PSTEP_USE_SYSFLDS = "PSMGR_PSTEP_USE_SYSFLDS";
            internal const string PSMGR_EIBERRCD = "PSMGR_EIBERRCD";
            internal const string PSMGR_EIBFN = "PSMGR_EIBFN";
            internal const string PSMGR_EIBRESP = "PSMGR_EIBRESP";
            internal const string PSMGR_EIBRESP2 = "PSMGR_EIBRESP2";
            internal const string I_IMPORT_EV1 = "I_IMPORT_EV1";
            internal const string I_COLLECTIONS_EXTRACT_ET = "I_COLLECTIONS_EXTRACT_ET";
            internal const string I_COLLECTION_OFFICER_000101MS = "I_COLLECTION_OFFICER_000101MS";
            internal const string I_COLLECTION_OFFICER_0001_001 = "I_COLLECTION_OFFICER_0001_001";
            internal const string I_COLLECTION_OFFICER_000101XX = "I_COLLECTION_OFFICER_000101XX";
            internal const string I_IMPORT_EV2 = "I_IMPORT_EV2";
            internal const string I_REPORT_PARMS_ET = "I_REPORT_PARMS_ET";
            internal const string I_PARM1_0002_002MS = "I_PARM1_0002_002MS";
            internal const string I_PARM1_0002_002 = "I_PARM1_0002_002";
            internal const string I_PARM1_0002_002XX = "I_PARM1_0002_002XX";
            internal const string IO_CONTROL_CD = "IO_CONTROL_CD";
            internal const string LS_OPEN_FILE_PASS = "LS_OPEN_FILE_PASS";
            internal const string LS_APPEND_FILE_PASS = "LS_APPEND_FILE_PASS";
            internal const string LS_CLOSE_FILE_PASS = "LS_CLOSE_FILE_PASS";
            internal const string LS_GEN_RPT_PASS = "LS_GEN_RPT_PASS";
            internal const string I_PARM2_0002_003MS = "I_PARM2_0002_003MS";
            internal const string I_PARM2_0002_003 = "I_PARM2_0002_003";
            internal const string I_PARM2_0002_003XX = "I_PARM2_0002_003XX";
            internal const string LS_RUNTIME_RPT_TYPE_CD = "LS_RUNTIME_RPT_TYPE_CD";
            internal const string I_PARM2_1 = "I_PARM2_1";
            internal const string I_PARM2_2 = "I_PARM2_2";
            internal const string I_SUBREPORT_CODE_0002_004MS = "I_SUBREPORT_CODE_0002_004MS";
            internal const string I_SUBREPORT_CODE_0002_004 = "I_SUBREPORT_CODE_0002_004";
            internal const string I_SUBREPORT_CODE_0002_004XX = "I_SUBREPORT_CODE_0002_004XX";
            internal const string I_IMPORT_EV3 = "I_IMPORT_EV3";
            internal const string I_REPORT_LITERALS_ET = "I_REPORT_LITERALS_ET";
            internal const string I_SUB_HEADING_1_0003_005MS = "I_SUB_HEADING_1_0003_005MS";
            internal const string I_SUB_HEADING_1_0003_005 = "I_SUB_HEADING_1_0003_005";
            internal const string I_SUB_HEADING_1_0003_005XX = "I_SUB_HEADING_1_0003_005XX";
            internal const string I_SUB_HEADING_2_0003_006MS = "I_SUB_HEADING_2_0003_006MS";
            internal const string I_SUB_HEADING_2_0003_006 = "I_SUB_HEADING_2_0003_006";
            internal const string I_SUB_HEADING_2_0003_006XX = "I_SUB_HEADING_2_0003_006XX";
            internal const string I_SUB_HEADING_3_0003_007MS = "I_SUB_HEADING_3_0003_007MS";
            internal const string I_SUB_HEADING_3_0003_007 = "I_SUB_HEADING_3_0003_007";
            internal const string I_SUB_HEADING_3_0003_007XX = "I_SUB_HEADING_3_0003_007XX";
            internal const string I_IMPORT_TOTAL_EV4 = "I_IMPORT_TOTAL_EV4";
            internal const string I_COLLECTIONS_EXTRACT_ET_d2 = "I_COLLECTIONS_EXTRACT_ET_d2";
            internal const string I_AMOUNT1_0004_008MS = "I_AMOUNT1_0004_008MS";
            internal const string I_AMOUNT1_0004_008 = "I_AMOUNT1_0004_008";
            internal const string I_AMOUNT1_0004_008XX = "I_AMOUNT1_0004_008XX";
            internal const string I_IMPORT_TOTAL_EV5 = "I_IMPORT_TOTAL_EV5";
            internal const string I_IEF_SUPPLIED_ET = "I_IEF_SUPPLIED_ET";
            internal const string I_COUNT_0005_009MS = "I_COUNT_0005_009MS";
            internal const string I_COUNT_0005_009 = "I_COUNT_0005_009";
            internal const string I_COUNT_0005_009XX = "I_COUNT_0005_009XX";
            internal const string I_IMPORT_TAF_TOTAL_EV6 = "I_IMPORT_TAF_TOTAL_EV6";
            internal const string I_COLLECTIONS_EXTRACT_ET_d3 = "I_COLLECTIONS_EXTRACT_ET_d3";
            internal const string I_AMOUNT1_0006_010MS = "I_AMOUNT1_0006_010MS";
            internal const string I_AMOUNT1_0006_010 = "I_AMOUNT1_0006_010";
            internal const string I_AMOUNT1_0006_010XX = "I_AMOUNT1_0006_010XX";
            internal const string I_IMPORT_TAF_TOTAL_EV7 = "I_IMPORT_TAF_TOTAL_EV7";
            internal const string I_IEF_SUPPLIED_ET_d2 = "I_IEF_SUPPLIED_ET_d2";
            internal const string I_COUNT_0007_011MS = "I_COUNT_0007_011MS";
            internal const string I_COUNT_0007_011 = "I_COUNT_0007_011";
            internal const string I_COUNT_0007_011XX = "I_COUNT_0007_011XX";
            internal const string I_IMPORT_TAF_EV8 = "I_IMPORT_TAF_EV8";
            internal const string I_COLLECTIONS_EXTRACT_ET_d4 = "I_COLLECTIONS_EXTRACT_ET_d4";
            internal const string I_AMOUNT1_0008_012MS = "I_AMOUNT1_0008_012MS";
            internal const string I_AMOUNT1_0008_012 = "I_AMOUNT1_0008_012";
            internal const string I_AMOUNT1_0008_012XX = "I_AMOUNT1_0008_012XX";
            internal const string I_IMPORT_TAF_EV9 = "I_IMPORT_TAF_EV9";
            internal const string I_IEF_SUPPLIED_ET_d3 = "I_IEF_SUPPLIED_ET_d3";
            internal const string I_COUNT_0009_013MS = "I_COUNT_0009_013MS";
            internal const string I_COUNT_0009_013 = "I_COUNT_0009_013";
            internal const string I_COUNT_0009_013XX = "I_COUNT_0009_013XX";
            internal const string I_IMPORT_XTAF_EV10 = "I_IMPORT_XTAF_EV10";
            internal const string I_COLLECTIONS_EXTRACT_ET_d5 = "I_COLLECTIONS_EXTRACT_ET_d5";
            internal const string I_AMOUNT1_0010_014MS = "I_AMOUNT1_0010_014MS";
            internal const string I_AMOUNT1_0010_014 = "I_AMOUNT1_0010_014";
            internal const string I_AMOUNT1_0010_014XX = "I_AMOUNT1_0010_014XX";
            internal const string I_IMPORT_XTAF_EV11 = "I_IMPORT_XTAF_EV11";
            internal const string I_IEF_SUPPLIED_ET_d4 = "I_IEF_SUPPLIED_ET_d4";
            internal const string I_COUNT_0011_015MS = "I_COUNT_0011_015MS";
            internal const string I_COUNT_0011_015 = "I_COUNT_0011_015";
            internal const string I_COUNT_0011_015XX = "I_COUNT_0011_015XX";
            internal const string I_IMPORT_TAF_FC_EV12 = "I_IMPORT_TAF_FC_EV12";
            internal const string I_COLLECTIONS_EXTRACT_ET_d6 = "I_COLLECTIONS_EXTRACT_ET_d6";
            internal const string I_AMOUNT1_0012_016MS = "I_AMOUNT1_0012_016MS";
            internal const string I_AMOUNT1_0012_016 = "I_AMOUNT1_0012_016";
            internal const string I_AMOUNT1_0012_016XX = "I_AMOUNT1_0012_016XX";
            internal const string I_IMPORT_TAF_FC_EV13 = "I_IMPORT_TAF_FC_EV13";
            internal const string I_IEF_SUPPLIED_ET_d5 = "I_IEF_SUPPLIED_ET_d5";
            internal const string I_COUNT_0013_017MS = "I_COUNT_0013_017MS";
            internal const string I_COUNT_0013_017 = "I_COUNT_0013_017";
            internal const string I_COUNT_0013_017XX = "I_COUNT_0013_017XX";
            internal const string I_IMPORT_NON_TAF_TOTAL_EV14 = "I_IMPORT_NON_TAF_TOTAL_EV14";
            internal const string I_COLLECTIONS_EXTRACT_ET_d7 = "I_COLLECTIONS_EXTRACT_ET_d7";
            internal const string I_AMOUNT1_0014_018MS = "I_AMOUNT1_0014_018MS";
            internal const string I_AMOUNT1_0014_018 = "I_AMOUNT1_0014_018";
            internal const string I_AMOUNT1_0014_018XX = "I_AMOUNT1_0014_018XX";
            internal const string I_IMPORT_NON_TAF_TOTAL_EV15 = "I_IMPORT_NON_TAF_TOTAL_EV15";
            internal const string I_IEF_SUPPLIED_ET_d6 = "I_IEF_SUPPLIED_ET_d6";
            internal const string I_COUNT_0015_019MS = "I_COUNT_0015_019MS";
            internal const string I_COUNT_0015_019 = "I_COUNT_0015_019";
            internal const string I_COUNT_0015_019XX = "I_COUNT_0015_019XX";
            internal const string I_IMPORT_NA_EV16 = "I_IMPORT_NA_EV16";
            internal const string I_COLLECTIONS_EXTRACT_ET_d8 = "I_COLLECTIONS_EXTRACT_ET_d8";
            internal const string I_AMOUNT1_0016_020MS = "I_AMOUNT1_0016_020MS";
            internal const string I_AMOUNT1_0016_020 = "I_AMOUNT1_0016_020";
            internal const string I_AMOUNT1_0016_020XX = "I_AMOUNT1_0016_020XX";
            internal const string I_IMPORT_NA_EV17 = "I_IMPORT_NA_EV17";
            internal const string I_IEF_SUPPLIED_ET_d7 = "I_IEF_SUPPLIED_ET_d7";
            internal const string I_COUNT_0017_021MS = "I_COUNT_0017_021MS";
            internal const string I_COUNT_0017_021 = "I_COUNT_0017_021";
            internal const string I_COUNT_0017_021XX = "I_COUNT_0017_021XX";
            internal const string I_IMPORT_PA_EV18 = "I_IMPORT_PA_EV18";
            internal const string I_COLLECTIONS_EXTRACT_ET_d9 = "I_COLLECTIONS_EXTRACT_ET_d9";
            internal const string I_AMOUNT1_0018_022MS = "I_AMOUNT1_0018_022MS";
            internal const string I_AMOUNT1_0018_022 = "I_AMOUNT1_0018_022";
            internal const string I_AMOUNT1_0018_022XX = "I_AMOUNT1_0018_022XX";
            internal const string I_IMPORT_PA_EV19 = "I_IMPORT_PA_EV19";
            internal const string I_IEF_SUPPLIED_ET_d8 = "I_IEF_SUPPLIED_ET_d8";
            internal const string I_COUNT_0019_023MS = "I_COUNT_0019_023MS";
            internal const string I_COUNT_0019_023 = "I_COUNT_0019_023";
            internal const string I_COUNT_0019_023XX = "I_COUNT_0019_023XX";
            internal const string I_IMPORT_STATE_ONLY_TOTAL_EV20 = "I_IMPORT_STATE_ONLY_TOTAL_EV20";
            internal const string I_COLLECTIONS_EXTRACT_ET_d10 = "I_COLLECTIONS_EXTRACT_ET_d10";
            internal const string I_AMOUNT1_0020_024MS = "I_AMOUNT1_0020_024MS";
            internal const string I_AMOUNT1_0020_024 = "I_AMOUNT1_0020_024";
            internal const string I_AMOUNT1_0020_024XX = "I_AMOUNT1_0020_024XX";
            internal const string I_IMPORT_STATE_ONLY_TOTAL_EV21 = "I_IMPORT_STATE_ONLY_TOTAL_EV21";
            internal const string I_IEF_SUPPLIED_ET_d9 = "I_IEF_SUPPLIED_ET_d9";
            internal const string I_COUNT_0021_025MS = "I_COUNT_0021_025MS";
            internal const string I_COUNT_0021_025 = "I_COUNT_0021_025";
            internal const string I_COUNT_0021_025XX = "I_COUNT_0021_025XX";
            internal const string I_IMPORT_GA_FC_EV22 = "I_IMPORT_GA_FC_EV22";
            internal const string I_COLLECTIONS_EXTRACT_ET_d11 = "I_COLLECTIONS_EXTRACT_ET_d11";
            internal const string I_AMOUNT1_0022_026MS = "I_AMOUNT1_0022_026MS";
            internal const string I_AMOUNT1_0022_026 = "I_AMOUNT1_0022_026";
            internal const string I_AMOUNT1_0022_026XX = "I_AMOUNT1_0022_026XX";
            internal const string I_IMPORT_GA_FC_EV23 = "I_IMPORT_GA_FC_EV23";
            internal const string I_IEF_SUPPLIED_ET_d10 = "I_IEF_SUPPLIED_ET_d10";
            internal const string I_COUNT_0023_027MS = "I_COUNT_0023_027MS";
            internal const string I_COUNT_0023_027 = "I_COUNT_0023_027";
            internal const string I_COUNT_0023_027XX = "I_COUNT_0023_027XX";
            internal const string I_IMPORT_MHDD_EV24 = "I_IMPORT_MHDD_EV24";
            internal const string I_COLLECTIONS_EXTRACT_ET_d12 = "I_COLLECTIONS_EXTRACT_ET_d12";
            internal const string I_AMOUNT1_0024_028MS = "I_AMOUNT1_0024_028MS";
            internal const string I_AMOUNT1_0024_028 = "I_AMOUNT1_0024_028";
            internal const string I_AMOUNT1_0024_028XX = "I_AMOUNT1_0024_028XX";
            internal const string I_IMPORT_MHDD_EV25 = "I_IMPORT_MHDD_EV25";
            internal const string I_IEF_SUPPLIED_ET_d11 = "I_IEF_SUPPLIED_ET_d11";
            internal const string I_COUNT_0025_029MS = "I_COUNT_0025_029MS";
            internal const string I_COUNT_0025_029 = "I_COUNT_0025_029";
            internal const string I_COUNT_0025_029XX = "I_COUNT_0025_029XX";
            internal const string E_EXPORT_EV26 = "E_EXPORT_EV26";
            internal const string E_REPORT_PARMS_ET = "E_REPORT_PARMS_ET";
            internal const string E_PARM1_0026_030MS = "E_PARM1_0026_030MS";
            internal const string E_PARM1_0026_030 = "E_PARM1_0026_030";
            internal const string E_PARM1_0026_030XX = "E_PARM1_0026_030XX";
            internal const string LS_RETURN_CD = "LS_RETURN_CD";
            internal const string E_PARM2_0026_031MS = "E_PARM2_0026_031MS";
            internal const string E_PARM2_0026_031 = "E_PARM2_0026_031";
            internal const string E_PARM2_0026_031XX = "E_PARM2_0026_031XX";
        }
        #endregion

        #region Direct-access element properties
        public IField TI_RUNTIME_PARM1 { get { return GetElementByName<IField>(Names.TI_RUNTIME_PARM1); } }
        public IField TI_RUNTIME_PARM2 { get { return GetElementByName<IField>(Names.TI_RUNTIME_PARM2); } }
        public IGroup GLOBDATA { get { return GetElementByName<IGroup>(Names.GLOBDATA); } }
        public IGroup PSMGR_IEF_COMMAND { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_COMMAND); } }
        public IField PSMGR_IEF_COMMAND_1 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_1); } }
        public IField PSMGR_IEF_COMMAND_2 { get { return GetElementByName<IField>(Names.PSMGR_IEF_COMMAND_2); } }
        public IField PSMGR_IEF_TRANCODE { get { return GetElementByName<IField>(Names.PSMGR_IEF_TRANCODE); } }
        public IField PSMGR_EXIT_STATE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_STATE); } }
        public IField PSMGR_EXIT_INFOMSG { get { return GetElementByName<IField>(Names.PSMGR_EXIT_INFOMSG); } }
        public IField PSMGR_USER_ID { get { return GetElementByName<IField>(Names.PSMGR_USER_ID); } }
        public IField PSMGR_TERMINAL_ID { get { return GetElementByName<IField>(Names.PSMGR_TERMINAL_ID); } }
        public IField PSMGR_PRINTER_ID { get { return GetElementByName<IField>(Names.PSMGR_PRINTER_ID); } }
        public IField PSMGR_CURRENT_DATE { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_DATE); } }
        public IField PSMGR_CURRENT_TIME { get { return GetElementByName<IField>(Names.PSMGR_CURRENT_TIME); } }
        public IField PSMGR_RUNTIME_TYPE { get { return GetElementByName<IField>(Names.PSMGR_RUNTIME_TYPE); } }
        public IGroup PSMGR_FUNCTION_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA); } }
        public IField PSMGR_FUNC_ERRMSG { get { return GetElementByName<IField>(Names.PSMGR_FUNC_ERRMSG); } }
        public IField PSMGR_FUNC_NAME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_NAME); } }
        public IField PSMGR_FUNC_IN_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_DATE); } }
        public IGroup PSMGR_FUNC_IN_DDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_DDURA); } }
        public IGroup DDURA_YEAR { get { return GetElementByName<IGroup>(Names.DDURA_YEAR); } }
        public IField DDURA_Y_MISS { get { return GetElementByName<IField>(Names.DDURA_Y_MISS); } }
        public IField DDURA_YYYY { get { return GetElementByName<IField>(Names.DDURA_YYYY); } }
        public IGroup DDURA_MONTH { get { return GetElementByName<IGroup>(Names.DDURA_MONTH); } }
        public IField DDURA_M_MISS { get { return GetElementByName<IField>(Names.DDURA_M_MISS); } }
        public IField DDURA_MM { get { return GetElementByName<IField>(Names.DDURA_MM); } }
        public IGroup DDURA_DAY { get { return GetElementByName<IGroup>(Names.DDURA_DAY); } }
        public IField DDURA_D_MISS { get { return GetElementByName<IField>(Names.DDURA_D_MISS); } }
        public IField DDURA_DD { get { return GetElementByName<IField>(Names.DDURA_DD); } }
        public IField PSMGR_FUNC_OUT_DATE { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_DATE); } }
        public IField PSMGR_FUNC_IN_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIME); } }
        public IGroup PSMGR_FUNC_IN_TDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TDURA); } }
        public IGroup TDURA_HOUR { get { return GetElementByName<IGroup>(Names.TDURA_HOUR); } }
        public IField TDURA_H_MISS { get { return GetElementByName<IField>(Names.TDURA_H_MISS); } }
        public IField TDURA_HH { get { return GetElementByName<IField>(Names.TDURA_HH); } }
        public IGroup TDURA_MINUTE { get { return GetElementByName<IGroup>(Names.TDURA_MINUTE); } }
        public IField TDURA_M_MISS { get { return GetElementByName<IField>(Names.TDURA_M_MISS); } }
        public IField TDURA_MM { get { return GetElementByName<IField>(Names.TDURA_MM); } }
        public IGroup TDURA_SECOND { get { return GetElementByName<IGroup>(Names.TDURA_SECOND); } }
        public IField TDURA_S_MISS { get { return GetElementByName<IField>(Names.TDURA_S_MISS); } }
        public IField TDURA_SS { get { return GetElementByName<IField>(Names.TDURA_SS); } }
        public IField PSMGR_FUNC_OUT_TIME { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIME); } }
        public IField PSMGR_IEF_NEXTTRAN { get { return GetElementByName<IField>(Names.PSMGR_IEF_NEXTTRAN); } }
        public IField PSMGR_EXIT_MSGTYPE { get { return GetElementByName<IField>(Names.PSMGR_EXIT_MSGTYPE); } }
        public IGroup PSMGR_IEF_DEBUG_FLAGS { get { return GetElementByName<IGroup>(Names.PSMGR_IEF_DEBUG_FLAGS); } }
        public IField PSMGR_IEF_DEBUG { get { return GetElementByName<IField>(Names.PSMGR_IEF_DEBUG); } }
        public ICheckField PSMGR_DEBUG_ON { get { return GetElementByName<ICheckField>(Names.PSMGR_DEBUG_ON); } }
        public IGroup PSMGR_ENVIRONMENT_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ENVIRONMENT_DATA); } }
        public IField PSMGR_PCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_PCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_PCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_PCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_PCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_PCB_ADR); } }
        public IGroup PSMGR_EAB_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_EAB_DATA); } }
        public IField PSMGR_EABPCB_CNT { get { return GetElementByName<IField>(Names.PSMGR_EABPCB_CNT); } }
        public IArrayElementAccessor<IGroup> PSMGR_EABPCB_ENTRY { get { return GetArrayElementAccessor<IGroup>(Names.PSMGR_EABPCB_ENTRY); } }
        public IArrayElementAccessor<IField> PSMGR_EABPCB_ADR { get { return GetArrayElementAccessor<IField>(Names.PSMGR_EABPCB_ADR); } }
        public IGroup PSMGR_ERROR_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_ERROR_DATA); } }
        public IField ERROR_ACTION_NAME { get { return GetElementByName<IField>(Names.ERROR_ACTION_NAME); } }
        public IField ERROR_ENCOUNTERED_SW { get { return GetElementByName<IField>(Names.ERROR_ENCOUNTERED_SW); } }
        public IField VIEW_OVERFLOW_SW { get { return GetElementByName<IField>(Names.VIEW_OVERFLOW_SW); } }
        public IGroup PSMGR_DASG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DASG_DATA); } }
        public IGroup ACTION_ID_X { get { return GetElementByName<IGroup>(Names.ACTION_ID_X); } }
        public IField ACTION_ID { get { return GetElementByName<IField>(Names.ACTION_ID); } }
        public IGroup ATTRIBUTE_ID_X { get { return GetElementByName<IGroup>(Names.ATTRIBUTE_ID_X); } }
        public IField ATTRIBUTE_ID { get { return GetElementByName<IField>(Names.ATTRIBUTE_ID); } }
        public IField STATUS_FLAG { get { return GetElementByName<IField>(Names.STATUS_FLAG); } }
        public ICheckField FATAL_ERROR_SF { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_SF); } }
        public ICheckField PSTEP_USE_FAILURE { get { return GetElementByName<ICheckField>(Names.PSTEP_USE_FAILURE); } }
        public IField LAST_STATUS { get { return GetElementByName<IField>(Names.LAST_STATUS); } }
        public ICheckField DB_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.DB_ERROR_FL_LS); } }
        public ICheckField DUPLICATE_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.DUPLICATE_FOUND_FL_LS); } }
        public ICheckField INVALID_DATAA_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAA_FL_LS); } }
        public ICheckField INVALID_DATAB_TYPE_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_TYPE_FL_LS); } }
        public ICheckField INVALID_DATAB_PERM_FL_LS { get { return GetElementByName<ICheckField>(Names.INVALID_DATAB_PERM_FL_LS); } }
        public ICheckField FATAL_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.FATAL_ERROR_FL_LS); } }
        public ICheckField NOT_FOUND_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_FOUND_FL_LS); } }
        public ICheckField NOT_UNIQUE_FL_LS { get { return GetElementByName<ICheckField>(Names.NOT_UNIQUE_FL_LS); } }
        public ICheckField IEF_FUNCTION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_FUNCTION_ERROR_FL_LS); } }
        public ICheckField IEF_DURATION_ERROR_FL_LS { get { return GetElementByName<ICheckField>(Names.IEF_DURATION_ERROR_FL_LS); } }
        public ICheckField USED_PSTEP_NOT_FOUND { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_NOT_FOUND); } }
        public ICheckField USED_PSTEP_ROUTING_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ROUTING_ERR); } }
        public ICheckField USED_PSTEP_SND_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_FMT_ERR); } }
        public ICheckField USED_PSTEP_ENCRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ENCRYPT_ERR); } }
        public ICheckField USED_PSTEP_SND_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SND_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_BFR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_BFR_ERR); } }
        public ICheckField USED_PSTEP_RCV_FMT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_FMT_ERR); } }
        public ICheckField USED_PSTEP_TIRSECR_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TIRSECR_ERR); } }
        public ICheckField USED_PSTEP_TOKEN_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_TOKEN_ERR); } }
        public ICheckField USED_PSTEP_SEND_MAX_SIZE { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SEND_MAX_SIZE); } }
        public ICheckField USED_PSTEP_SECG_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SECG_ERR); } }
        public ICheckField USED_PSTEP_ALLOC_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_ALLOC_ERR); } }
        public ICheckField USED_PSTEP_CONNECT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_CONNECT_ERR); } }
        public ICheckField USED_PSTEP_XERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XERR); } }
        public ICheckField USED_PSTEP_RCV_UA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_UA_ERR); } }
        public ICheckField USED_PSTEP_RCV_ES_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_ES_ERR); } }
        public ICheckField USED_PSTEP_XFAL { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_XFAL); } }
        public ICheckField USED_PSTEP_SETOA_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_SETOA_ERR); } }
        public ICheckField USED_PSTEP_RCV_VIEW_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_RCV_VIEW_ERR); } }
        public ICheckField USED_PSTEP_DECRYPT_ERR { get { return GetElementByName<ICheckField>(Names.USED_PSTEP_DECRYPT_ERR); } }
        public IField SAVE_SQLCA { get { return GetElementByName<IField>(Names.SAVE_SQLCA); } }
        public IGroup PSMGR_DEBUG_DATA { get { return GetElementByName<IGroup>(Names.PSMGR_DEBUG_DATA); } }
        public IField PSMGR_TRACE_ADR { get { return GetElementByName<IField>(Names.PSMGR_TRACE_ADR); } }
        public IGroup LAST_STATEMENT_X { get { return GetElementByName<IGroup>(Names.LAST_STATEMENT_X); } }
        public IField LAST_STATEMENT_NUM { get { return GetElementByName<IField>(Names.LAST_STATEMENT_NUM); } }
        public IField CUR_AB_ID { get { return GetElementByName<IField>(Names.CUR_AB_ID); } }
        public IField CUR_AB_NAME { get { return GetElementByName<IField>(Names.CUR_AB_NAME); } }
        public IField PSMGR_TIRDATE_SAVEAREA { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_SAVEAREA); } }
        public IGroup PSMGR_TIRDATE_CMCB { get { return GetElementByName<IGroup>(Names.PSMGR_TIRDATE_CMCB); } }
        public IField PSMGR_TIRDATE_DATE { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE); } }
        public IField PSMGR_TIRDATE_TIME { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME); } }
        public IField PSMGR_TIRDATE_INC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_INC); } }
        public IField PSMGR_TIRDATE_RC { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RC); } }
        public ICheckField PSMGR_TIRDATE_OK { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_OK); } }
        public ICheckField PSMGR_TIRDATE_WARNING { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_WARNING); } }
        public ICheckField PSMGR_TIRDATE_ERROR { get { return GetElementByName<ICheckField>(Names.PSMGR_TIRDATE_ERROR); } }
        public IField PSMGR_TIRDATE_REQ { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_REQ); } }
        public IField PSMGR_TIRDATE_DATEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATEF); } }
        public IField PSMGR_TIRDATE_TIMEF { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIMEF); } }
        public IField PSMGR_TIRDATE_RETMSG { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_RETMSG); } }
        public IField PSMGR_TIRDATE_TSTAMP { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TSTAMP); } }
        public IField PSMGR_TIRDATE_DATE_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_DATE_Z); } }
        public IField PSMGR_TIRDATE_TIME_Z { get { return GetElementByName<IField>(Names.PSMGR_TIRDATE_TIME_Z); } }
        public IField PSMGR_ROLLBACK_RQSTED { get { return GetElementByName<IField>(Names.PSMGR_ROLLBACK_RQSTED); } }
        public ICheckField ROLLBACK_RQSTED { get { return GetElementByName<ICheckField>(Names.ROLLBACK_RQSTED); } }
        public ICheckField ABEND_RQSTED { get { return GetElementByName<ICheckField>(Names.ABEND_RQSTED); } }
        public ICheckField TERMINATE_RQSTED { get { return GetElementByName<ICheckField>(Names.TERMINATE_RQSTED); } }
        public IGroup TIRTRCE_SAVE_AREA { get { return GetElementByName<IGroup>(Names.TIRTRCE_SAVE_AREA); } }
        public IField TOP_INDX { get { return GetElementByName<IField>(Names.TOP_INDX); } }
        public IField BOTTOM_INDX { get { return GetElementByName<IField>(Names.BOTTOM_INDX); } }
        public IField END_INDX { get { return GetElementByName<IField>(Names.END_INDX); } }
        public IField LAST_STMT { get { return GetElementByName<IField>(Names.LAST_STMT); } }
        public IField TOP_OF_CALL { get { return GetElementByName<IField>(Names.TOP_OF_CALL); } }
        public IField TRACE_BREAK_POINT { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT); } }
        public IField TRACE_BREAK_POINT_STATUS { get { return GetElementByName<IField>(Names.TRACE_BREAK_POINT_STATUS); } }
        public IField LAST_AB_NAME { get { return GetElementByName<IField>(Names.LAST_AB_NAME); } }
        public IField COLOR { get { return GetElementByName<IField>(Names.COLOR); } }
        public IField COLORT { get { return GetElementByName<IField>(Names.COLORT); } }
        public IField HILITE { get { return GetElementByName<IField>(Names.HILITE); } }
        public IField TRACE_ON_OFF { get { return GetElementByName<IField>(Names.TRACE_ON_OFF); } }
        public IGroup CASCADE_DELETE_FLAGS { get { return GetElementByName<IGroup>(Names.CASCADE_DELETE_FLAGS); } }
        public IField V1PRESENT { get { return GetElementByName<IField>(Names.V1PRESENT); } }
        public IField V2PRESENT { get { return GetElementByName<IField>(Names.V2PRESENT); } }
        public IField CASCADE1 { get { return GetElementByName<IField>(Names.CASCADE1); } }
        public IField CASCADE2 { get { return GetElementByName<IField>(Names.CASCADE2); } }
        public IField PROCESSQ_FLAG { get { return GetElementByName<IField>(Names.PROCESSQ_FLAG); } }
        public IGroup PSMGR_ACTIVE_DIALECT { get { return GetElementByName<IGroup>(Names.PSMGR_ACTIVE_DIALECT); } }
        public IField DIALECT_NAME { get { return GetElementByName<IField>(Names.DIALECT_NAME); } }
        public IField MESSAGE_TABLE_NAME { get { return GetElementByName<IField>(Names.MESSAGE_TABLE_NAME); } }
        public IField TRANSLATE_TABLE_NAME { get { return GetElementByName<IField>(Names.TRANSLATE_TABLE_NAME); } }
        public IGroup PSMGR_FUNCTION_DATA_EXT { get { return GetElementByName<IGroup>(Names.PSMGR_FUNCTION_DATA_EXT); } }
        public IField PSMGR_FUNC_IN_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_IN_TIMESTAMP); } }
        public IGroup PSMGR_FUNC_IN_TSDURA { get { return GetElementByName<IGroup>(Names.PSMGR_FUNC_IN_TSDURA); } }
        public IGroup TSDURA_MICROSECOND { get { return GetElementByName<IGroup>(Names.TSDURA_MICROSECOND); } }
        public IField TSDURA_M_MISS { get { return GetElementByName<IField>(Names.TSDURA_M_MISS); } }
        public IField TSDURA_MS { get { return GetElementByName<IField>(Names.TSDURA_MS); } }
        public IField PSMGR_FUNC_OUT_TIMESTAMP { get { return GetElementByName<IField>(Names.PSMGR_FUNC_OUT_TIMESTAMP); } }
        public IField PSMGR_CICS_FAIL_SW { get { return GetElementByName<IField>(Names.PSMGR_CICS_FAIL_SW); } }
        public ICheckField INHIBIT_CICS_RECEIVE { get { return GetElementByName<ICheckField>(Names.INHIBIT_CICS_RECEIVE); } }
        public IField CLIENT_USERID { get { return GetElementByName<IField>(Names.CLIENT_USERID); } }
        public IField CLIENT_PASSWORD { get { return GetElementByName<IField>(Names.CLIENT_PASSWORD); } }
        public IField LOAD_MODULE_NAME { get { return GetElementByName<IField>(Names.LOAD_MODULE_NAME); } }
        public IField INSTRUMENT_CODE { get { return GetElementByName<IField>(Names.INSTRUMENT_CODE); } }
        public IField TX_RETRY_LIMIT { get { return GetElementByName<IField>(Names.TX_RETRY_LIMIT); } }
        public IField TX_TIMEOUT { get { return GetElementByName<IField>(Names.TX_TIMEOUT); } }
        public IGroup PSMGR_EXTRA_ERRINFO { get { return GetElementByName<IGroup>(Names.PSMGR_EXTRA_ERRINFO); } }
        public IField ERRINFO_BUF_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_BUF_SIZE); } }
        public IField ERRINFO_MSG_SIZE { get { return GetElementByName<IField>(Names.ERRINFO_MSG_SIZE); } }
        public IField ERRINFO_BUF_ADDR { get { return GetElementByName<IField>(Names.ERRINFO_BUF_ADDR); } }
        public IGroup PSMGR_PSTEP_USE_PTRS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_PTRS); } }
        public IField PSTEP_FAIL_MSG_PTR { get { return GetElementByName<IField>(Names.PSTEP_FAIL_MSG_PTR); } }
        public IField PSTEP_GURB_REST_PTR { get { return GetElementByName<IField>(Names.PSTEP_GURB_REST_PTR); } }
        public IField PSTEP_LIPS_PTR { get { return GetElementByName<IField>(Names.PSTEP_LIPS_PTR); } }
        public IField PSTEP_TBL_PTR { get { return GetElementByName<IField>(Names.PSTEP_TBL_PTR); } }
        public IField PSTEP_DDF_PTR { get { return GetElementByName<IField>(Names.PSTEP_DDF_PTR); } }
        public IField PSTEP_COMM_ID { get { return GetElementByName<IField>(Names.PSTEP_COMM_ID); } }
        public IField PSTEP_APPL_LIST_PTR { get { return GetElementByName<IField>(Names.PSTEP_APPL_LIST_PTR); } }
        public IField PSTEP_CURR_PST_PTR { get { return GetElementByName<IField>(Names.PSTEP_CURR_PST_PTR); } }
        public IGroup PSMGR_PSTEP_USE_SYSFLDS { get { return GetElementByName<IGroup>(Names.PSMGR_PSTEP_USE_SYSFLDS); } }
        public IField PSMGR_EIBERRCD { get { return GetElementByName<IField>(Names.PSMGR_EIBERRCD); } }
        public IField PSMGR_EIBFN { get { return GetElementByName<IField>(Names.PSMGR_EIBFN); } }
        public IField PSMGR_EIBRESP { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP); } }
        public IField PSMGR_EIBRESP2 { get { return GetElementByName<IField>(Names.PSMGR_EIBRESP2); } }
        public IGroup I_IMPORT_EV1 { get { return GetElementByName<IGroup>(Names.I_IMPORT_EV1); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET); } }
        public IField I_COLLECTION_OFFICER_000101MS { get { return GetElementByName<IField>(Names.I_COLLECTION_OFFICER_000101MS); } }
        public IField I_COLLECTION_OFFICER_0001_001 { get { return GetElementByName<IField>(Names.I_COLLECTION_OFFICER_0001_001); } }
        public IField I_COLLECTION_OFFICER_000101XX { get { return GetElementByName<IField>(Names.I_COLLECTION_OFFICER_000101XX); } }
        public IGroup I_IMPORT_EV2 { get { return GetElementByName<IGroup>(Names.I_IMPORT_EV2); } }
        public IGroup I_REPORT_PARMS_ET { get { return GetElementByName<IGroup>(Names.I_REPORT_PARMS_ET); } }
        public IField I_PARM1_0002_002MS { get { return GetElementByName<IField>(Names.I_PARM1_0002_002MS); } }
        public IField I_PARM1_0002_002 { get { return GetElementByName<IField>(Names.I_PARM1_0002_002); } }
        public IField I_PARM1_0002_002XX { get { return GetElementByName<IField>(Names.I_PARM1_0002_002XX); } }
        public IField IO_CONTROL_CD { get { return GetElementByName<IField>(Names.IO_CONTROL_CD); } }
        public ICheckField LS_OPEN_FILE_PASS { get { return GetElementByName<ICheckField>(Names.LS_OPEN_FILE_PASS); } }
        public ICheckField LS_APPEND_FILE_PASS { get { return GetElementByName<ICheckField>(Names.LS_APPEND_FILE_PASS); } }
        public ICheckField LS_CLOSE_FILE_PASS { get { return GetElementByName<ICheckField>(Names.LS_CLOSE_FILE_PASS); } }
        public ICheckField LS_GEN_RPT_PASS { get { return GetElementByName<ICheckField>(Names.LS_GEN_RPT_PASS); } }
        public IField I_PARM2_0002_003MS { get { return GetElementByName<IField>(Names.I_PARM2_0002_003MS); } }
        public IField I_PARM2_0002_003 { get { return GetElementByName<IField>(Names.I_PARM2_0002_003); } }
        public IField I_PARM2_0002_003XX { get { return GetElementByName<IField>(Names.I_PARM2_0002_003XX); } }
        public IGroup LS_RUNTIME_RPT_TYPE_CD { get { return GetElementByName<IGroup>(Names.LS_RUNTIME_RPT_TYPE_CD); } }
        public IField I_PARM2_1 { get { return GetElementByName<IField>(Names.I_PARM2_1); } }
        public IField I_PARM2_2 { get { return GetElementByName<IField>(Names.I_PARM2_2); } }
        public IField I_SUBREPORT_CODE_0002_004MS { get { return GetElementByName<IField>(Names.I_SUBREPORT_CODE_0002_004MS); } }
        public IField I_SUBREPORT_CODE_0002_004 { get { return GetElementByName<IField>(Names.I_SUBREPORT_CODE_0002_004); } }
        public IField I_SUBREPORT_CODE_0002_004XX { get { return GetElementByName<IField>(Names.I_SUBREPORT_CODE_0002_004XX); } }
        public IGroup I_IMPORT_EV3 { get { return GetElementByName<IGroup>(Names.I_IMPORT_EV3); } }
        public IGroup I_REPORT_LITERALS_ET { get { return GetElementByName<IGroup>(Names.I_REPORT_LITERALS_ET); } }
        public IField I_SUB_HEADING_1_0003_005MS { get { return GetElementByName<IField>(Names.I_SUB_HEADING_1_0003_005MS); } }
        public IField I_SUB_HEADING_1_0003_005 { get { return GetElementByName<IField>(Names.I_SUB_HEADING_1_0003_005); } }
        public IField I_SUB_HEADING_1_0003_005XX { get { return GetElementByName<IField>(Names.I_SUB_HEADING_1_0003_005XX); } }
        public IField I_SUB_HEADING_2_0003_006MS { get { return GetElementByName<IField>(Names.I_SUB_HEADING_2_0003_006MS); } }
        public IField I_SUB_HEADING_2_0003_006 { get { return GetElementByName<IField>(Names.I_SUB_HEADING_2_0003_006); } }
        public IField I_SUB_HEADING_2_0003_006XX { get { return GetElementByName<IField>(Names.I_SUB_HEADING_2_0003_006XX); } }
        public IField I_SUB_HEADING_3_0003_007MS { get { return GetElementByName<IField>(Names.I_SUB_HEADING_3_0003_007MS); } }
        public IField I_SUB_HEADING_3_0003_007 { get { return GetElementByName<IField>(Names.I_SUB_HEADING_3_0003_007); } }
        public IField I_SUB_HEADING_3_0003_007XX { get { return GetElementByName<IField>(Names.I_SUB_HEADING_3_0003_007XX); } }
        public IGroup I_IMPORT_TOTAL_EV4 { get { return GetElementByName<IGroup>(Names.I_IMPORT_TOTAL_EV4); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d2 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d2); } }
        public IField I_AMOUNT1_0004_008MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0004_008MS); } }
        public IField I_AMOUNT1_0004_008 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0004_008); } }
        public IField I_AMOUNT1_0004_008XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0004_008XX); } }
        public IGroup I_IMPORT_TOTAL_EV5 { get { return GetElementByName<IGroup>(Names.I_IMPORT_TOTAL_EV5); } }
        public IGroup I_IEF_SUPPLIED_ET { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET); } }
        public IField I_COUNT_0005_009MS { get { return GetElementByName<IField>(Names.I_COUNT_0005_009MS); } }
        public IField I_COUNT_0005_009 { get { return GetElementByName<IField>(Names.I_COUNT_0005_009); } }
        public IField I_COUNT_0005_009XX { get { return GetElementByName<IField>(Names.I_COUNT_0005_009XX); } }
        public IGroup I_IMPORT_TAF_TOTAL_EV6 { get { return GetElementByName<IGroup>(Names.I_IMPORT_TAF_TOTAL_EV6); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d3 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d3); } }
        public IField I_AMOUNT1_0006_010MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0006_010MS); } }
        public IField I_AMOUNT1_0006_010 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0006_010); } }
        public IField I_AMOUNT1_0006_010XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0006_010XX); } }
        public IGroup I_IMPORT_TAF_TOTAL_EV7 { get { return GetElementByName<IGroup>(Names.I_IMPORT_TAF_TOTAL_EV7); } }
        public IGroup I_IEF_SUPPLIED_ET_d2 { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET_d2); } }
        public IField I_COUNT_0007_011MS { get { return GetElementByName<IField>(Names.I_COUNT_0007_011MS); } }
        public IField I_COUNT_0007_011 { get { return GetElementByName<IField>(Names.I_COUNT_0007_011); } }
        public IField I_COUNT_0007_011XX { get { return GetElementByName<IField>(Names.I_COUNT_0007_011XX); } }
        public IGroup I_IMPORT_TAF_EV8 { get { return GetElementByName<IGroup>(Names.I_IMPORT_TAF_EV8); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d4 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d4); } }
        public IField I_AMOUNT1_0008_012MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0008_012MS); } }
        public IField I_AMOUNT1_0008_012 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0008_012); } }
        public IField I_AMOUNT1_0008_012XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0008_012XX); } }
        public IGroup I_IMPORT_TAF_EV9 { get { return GetElementByName<IGroup>(Names.I_IMPORT_TAF_EV9); } }
        public IGroup I_IEF_SUPPLIED_ET_d3 { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET_d3); } }
        public IField I_COUNT_0009_013MS { get { return GetElementByName<IField>(Names.I_COUNT_0009_013MS); } }
        public IField I_COUNT_0009_013 { get { return GetElementByName<IField>(Names.I_COUNT_0009_013); } }
        public IField I_COUNT_0009_013XX { get { return GetElementByName<IField>(Names.I_COUNT_0009_013XX); } }
        public IGroup I_IMPORT_XTAF_EV10 { get { return GetElementByName<IGroup>(Names.I_IMPORT_XTAF_EV10); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d5 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d5); } }
        public IField I_AMOUNT1_0010_014MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0010_014MS); } }
        public IField I_AMOUNT1_0010_014 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0010_014); } }
        public IField I_AMOUNT1_0010_014XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0010_014XX); } }
        public IGroup I_IMPORT_XTAF_EV11 { get { return GetElementByName<IGroup>(Names.I_IMPORT_XTAF_EV11); } }
        public IGroup I_IEF_SUPPLIED_ET_d4 { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET_d4); } }
        public IField I_COUNT_0011_015MS { get { return GetElementByName<IField>(Names.I_COUNT_0011_015MS); } }
        public IField I_COUNT_0011_015 { get { return GetElementByName<IField>(Names.I_COUNT_0011_015); } }
        public IField I_COUNT_0011_015XX { get { return GetElementByName<IField>(Names.I_COUNT_0011_015XX); } }
        public IGroup I_IMPORT_TAF_FC_EV12 { get { return GetElementByName<IGroup>(Names.I_IMPORT_TAF_FC_EV12); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d6 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d6); } }
        public IField I_AMOUNT1_0012_016MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0012_016MS); } }
        public IField I_AMOUNT1_0012_016 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0012_016); } }
        public IField I_AMOUNT1_0012_016XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0012_016XX); } }
        public IGroup I_IMPORT_TAF_FC_EV13 { get { return GetElementByName<IGroup>(Names.I_IMPORT_TAF_FC_EV13); } }
        public IGroup I_IEF_SUPPLIED_ET_d5 { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET_d5); } }
        public IField I_COUNT_0013_017MS { get { return GetElementByName<IField>(Names.I_COUNT_0013_017MS); } }
        public IField I_COUNT_0013_017 { get { return GetElementByName<IField>(Names.I_COUNT_0013_017); } }
        public IField I_COUNT_0013_017XX { get { return GetElementByName<IField>(Names.I_COUNT_0013_017XX); } }
        public IGroup I_IMPORT_NON_TAF_TOTAL_EV14 { get { return GetElementByName<IGroup>(Names.I_IMPORT_NON_TAF_TOTAL_EV14); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d7 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d7); } }
        public IField I_AMOUNT1_0014_018MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0014_018MS); } }
        public IField I_AMOUNT1_0014_018 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0014_018); } }
        public IField I_AMOUNT1_0014_018XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0014_018XX); } }
        public IGroup I_IMPORT_NON_TAF_TOTAL_EV15 { get { return GetElementByName<IGroup>(Names.I_IMPORT_NON_TAF_TOTAL_EV15); } }
        public IGroup I_IEF_SUPPLIED_ET_d6 { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET_d6); } }
        public IField I_COUNT_0015_019MS { get { return GetElementByName<IField>(Names.I_COUNT_0015_019MS); } }
        public IField I_COUNT_0015_019 { get { return GetElementByName<IField>(Names.I_COUNT_0015_019); } }
        public IField I_COUNT_0015_019XX { get { return GetElementByName<IField>(Names.I_COUNT_0015_019XX); } }
        public IGroup I_IMPORT_NA_EV16 { get { return GetElementByName<IGroup>(Names.I_IMPORT_NA_EV16); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d8 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d8); } }
        public IField I_AMOUNT1_0016_020MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0016_020MS); } }
        public IField I_AMOUNT1_0016_020 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0016_020); } }
        public IField I_AMOUNT1_0016_020XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0016_020XX); } }
        public IGroup I_IMPORT_NA_EV17 { get { return GetElementByName<IGroup>(Names.I_IMPORT_NA_EV17); } }
        public IGroup I_IEF_SUPPLIED_ET_d7 { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET_d7); } }
        public IField I_COUNT_0017_021MS { get { return GetElementByName<IField>(Names.I_COUNT_0017_021MS); } }
        public IField I_COUNT_0017_021 { get { return GetElementByName<IField>(Names.I_COUNT_0017_021); } }
        public IField I_COUNT_0017_021XX { get { return GetElementByName<IField>(Names.I_COUNT_0017_021XX); } }
        public IGroup I_IMPORT_PA_EV18 { get { return GetElementByName<IGroup>(Names.I_IMPORT_PA_EV18); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d9 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d9); } }
        public IField I_AMOUNT1_0018_022MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0018_022MS); } }
        public IField I_AMOUNT1_0018_022 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0018_022); } }
        public IField I_AMOUNT1_0018_022XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0018_022XX); } }
        public IGroup I_IMPORT_PA_EV19 { get { return GetElementByName<IGroup>(Names.I_IMPORT_PA_EV19); } }
        public IGroup I_IEF_SUPPLIED_ET_d8 { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET_d8); } }
        public IField I_COUNT_0019_023MS { get { return GetElementByName<IField>(Names.I_COUNT_0019_023MS); } }
        public IField I_COUNT_0019_023 { get { return GetElementByName<IField>(Names.I_COUNT_0019_023); } }
        public IField I_COUNT_0019_023XX { get { return GetElementByName<IField>(Names.I_COUNT_0019_023XX); } }
        public IGroup I_IMPORT_STATE_ONLY_TOTAL_EV20 { get { return GetElementByName<IGroup>(Names.I_IMPORT_STATE_ONLY_TOTAL_EV20); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d10 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d10); } }
        public IField I_AMOUNT1_0020_024MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0020_024MS); } }
        public IField I_AMOUNT1_0020_024 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0020_024); } }
        public IField I_AMOUNT1_0020_024XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0020_024XX); } }
        public IGroup I_IMPORT_STATE_ONLY_TOTAL_EV21 { get { return GetElementByName<IGroup>(Names.I_IMPORT_STATE_ONLY_TOTAL_EV21); } }
        public IGroup I_IEF_SUPPLIED_ET_d9 { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET_d9); } }
        public IField I_COUNT_0021_025MS { get { return GetElementByName<IField>(Names.I_COUNT_0021_025MS); } }
        public IField I_COUNT_0021_025 { get { return GetElementByName<IField>(Names.I_COUNT_0021_025); } }
        public IField I_COUNT_0021_025XX { get { return GetElementByName<IField>(Names.I_COUNT_0021_025XX); } }
        public IGroup I_IMPORT_GA_FC_EV22 { get { return GetElementByName<IGroup>(Names.I_IMPORT_GA_FC_EV22); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d11 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d11); } }
        public IField I_AMOUNT1_0022_026MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0022_026MS); } }
        public IField I_AMOUNT1_0022_026 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0022_026); } }
        public IField I_AMOUNT1_0022_026XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0022_026XX); } }
        public IGroup I_IMPORT_GA_FC_EV23 { get { return GetElementByName<IGroup>(Names.I_IMPORT_GA_FC_EV23); } }
        public IGroup I_IEF_SUPPLIED_ET_d10 { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET_d10); } }
        public IField I_COUNT_0023_027MS { get { return GetElementByName<IField>(Names.I_COUNT_0023_027MS); } }
        public IField I_COUNT_0023_027 { get { return GetElementByName<IField>(Names.I_COUNT_0023_027); } }
        public IField I_COUNT_0023_027XX { get { return GetElementByName<IField>(Names.I_COUNT_0023_027XX); } }
        public IGroup I_IMPORT_MHDD_EV24 { get { return GetElementByName<IGroup>(Names.I_IMPORT_MHDD_EV24); } }
        public IGroup I_COLLECTIONS_EXTRACT_ET_d12 { get { return GetElementByName<IGroup>(Names.I_COLLECTIONS_EXTRACT_ET_d12); } }
        public IField I_AMOUNT1_0024_028MS { get { return GetElementByName<IField>(Names.I_AMOUNT1_0024_028MS); } }
        public IField I_AMOUNT1_0024_028 { get { return GetElementByName<IField>(Names.I_AMOUNT1_0024_028); } }
        public IField I_AMOUNT1_0024_028XX { get { return GetElementByName<IField>(Names.I_AMOUNT1_0024_028XX); } }
        public IGroup I_IMPORT_MHDD_EV25 { get { return GetElementByName<IGroup>(Names.I_IMPORT_MHDD_EV25); } }
        public IGroup I_IEF_SUPPLIED_ET_d11 { get { return GetElementByName<IGroup>(Names.I_IEF_SUPPLIED_ET_d11); } }
        public IField I_COUNT_0025_029MS { get { return GetElementByName<IField>(Names.I_COUNT_0025_029MS); } }
        public IField I_COUNT_0025_029 { get { return GetElementByName<IField>(Names.I_COUNT_0025_029); } }
        public IField I_COUNT_0025_029XX { get { return GetElementByName<IField>(Names.I_COUNT_0025_029XX); } }
        public IGroup E_EXPORT_EV26 { get { return GetElementByName<IGroup>(Names.E_EXPORT_EV26); } }
        public IGroup E_REPORT_PARMS_ET { get { return GetElementByName<IGroup>(Names.E_REPORT_PARMS_ET); } }
        public IField E_PARM1_0026_030MS { get { return GetElementByName<IField>(Names.E_PARM1_0026_030MS); } }
        public IField E_PARM1_0026_030 { get { return GetElementByName<IField>(Names.E_PARM1_0026_030); } }
        public IField E_PARM1_0026_030XX { get { return GetElementByName<IField>(Names.E_PARM1_0026_030XX); } }
        public IField LS_RETURN_CD { get { return GetElementByName<IField>(Names.LS_RETURN_CD); } }
        public IField E_PARM2_0026_031MS { get { return GetElementByName<IField>(Names.E_PARM2_0026_031MS); } }
        public IField E_PARM2_0026_031 { get { return GetElementByName<IField>(Names.E_PARM2_0026_031); } }
        public IField E_PARM2_0026_031XX { get { return GetElementByName<IField>(Names.E_PARM2_0026_031XX); } }

        #endregion

        #region Data structure definition
        /// <summary>
        /// Defines the entirety of the LinkageSection IRecord structure as described by the Ateras.Framework.Buffer API.
        /// </summary>
        /// <param name="recordDef">The IStructureDefinition object to be used in defining the record structure.</param>
        protected override void DefineRecordStructure(IStructureDefinition recordDef)
        {
            recordDef.CreateNewField(Names.TI_RUNTIME_PARM1, FieldType.String, 1);
            recordDef.CreateNewField(Names.TI_RUNTIME_PARM2, FieldType.String, 1);

            recordDef.CreateNewGroup(Names.GLOBDATA, (GLOBDATA) =>
           {
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_COMMAND, (PSMGR_IEF_COMMAND) =>
               {
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_1, FieldType.String, 8);
                   PSMGR_IEF_COMMAND.CreateNewField(Names.PSMGR_IEF_COMMAND_2, FieldType.String, 72);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_TRANCODE, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_STATE, FieldType.PackedDecimal, 11);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_INFOMSG, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_USER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_TERMINAL_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_PRINTER_ID, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_DATE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_CURRENT_TIME, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.PSMGR_RUNTIME_TYPE, FieldType.String, 4);
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA, (PSMGR_FUNCTION_DATA) =>
               {
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_ERRMSG, FieldType.String, 4);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_NAME, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_DDURA, (PSMGR_FUNC_IN_DDURA) =>
                   {
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_YEAR, (DDURA_YEAR) =>
                       {
                           DDURA_YEAR.CreateNewField(Names.DDURA_Y_MISS, FieldType.String, 1);
                           DDURA_YEAR.CreateNewField(Names.DDURA_YYYY, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_MONTH, (DDURA_MONTH) =>
                       {
                           DDURA_MONTH.CreateNewField(Names.DDURA_M_MISS, FieldType.String, 1);
                           DDURA_MONTH.CreateNewField(Names.DDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_DDURA.CreateNewGroup(Names.DDURA_DAY, (DDURA_DAY) =>
                       {
                           DDURA_DAY.CreateNewField(Names.DDURA_D_MISS, FieldType.String, 1);
                           DDURA_DAY.CreateNewField(Names.DDURA_DD, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_DATE, FieldType.String, 8);
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_IN_TIME, FieldType.String, 6);
                   PSMGR_FUNCTION_DATA.CreateNewGroup(Names.PSMGR_FUNC_IN_TDURA, (PSMGR_FUNC_IN_TDURA) =>
                   {
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_HOUR, (TDURA_HOUR) =>
                       {
                           TDURA_HOUR.CreateNewField(Names.TDURA_H_MISS, FieldType.String, 1);
                           TDURA_HOUR.CreateNewField(Names.TDURA_HH, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_MINUTE, (TDURA_MINUTE) =>
                       {
                           TDURA_MINUTE.CreateNewField(Names.TDURA_M_MISS, FieldType.String, 1);
                           TDURA_MINUTE.CreateNewField(Names.TDURA_MM, FieldType.CompInt, 9);
                       });
                       PSMGR_FUNC_IN_TDURA.CreateNewGroup(Names.TDURA_SECOND, (TDURA_SECOND) =>
                       {
                           TDURA_SECOND.CreateNewField(Names.TDURA_S_MISS, FieldType.String, 1);
                           TDURA_SECOND.CreateNewField(Names.TDURA_SS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA.CreateNewField(Names.PSMGR_FUNC_OUT_TIME, FieldType.String, 6);
               });
               GLOBDATA.CreateNewFillerField(2, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_IEF_NEXTTRAN, FieldType.String, 80);
               GLOBDATA.CreateNewField(Names.PSMGR_EXIT_MSGTYPE, FieldType.String, 1);
               GLOBDATA.CreateNewFillerField(11, FillWith.Hashes);
               GLOBDATA.CreateNewGroup(Names.PSMGR_IEF_DEBUG_FLAGS, (PSMGR_IEF_DEBUG_FLAGS) =>
               {
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewField(Names.PSMGR_IEF_DEBUG, FieldType.String, 1)
                       .NewCheckField(Names.PSMGR_DEBUG_ON, "Y")
                       ;
                   PSMGR_IEF_DEBUG_FLAGS.CreateNewFillerField(15, FillWith.Hashes);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ENVIRONMENT_DATA, (PSMGR_ENVIRONMENT_DATA) =>
               {
                   PSMGR_ENVIRONMENT_DATA.CreateNewField(Names.PSMGR_PCB_CNT, FieldType.CompInt, 9);
                   PSMGR_ENVIRONMENT_DATA.CreateNewGroupArray(Names.PSMGR_PCB_ENTRY, 255, (PSMGR_PCB_ENTRY) =>
                   {
                       PSMGR_PCB_ENTRY.CreateNewField(Names.PSMGR_PCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_EAB_DATA, (PSMGR_EAB_DATA) =>
               {
                   PSMGR_EAB_DATA.CreateNewField(Names.PSMGR_EABPCB_CNT, FieldType.CompInt, 9);
                   PSMGR_EAB_DATA.CreateNewGroupArray(Names.PSMGR_EABPCB_ENTRY, 255, (PSMGR_EABPCB_ENTRY) =>
                   {
                       PSMGR_EABPCB_ENTRY.CreateNewField(Names.PSMGR_EABPCB_ADR, FieldType.CompInt, 9);
                   });
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ERROR_DATA, (PSMGR_ERROR_DATA) =>
               {
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ACTION_NAME, FieldType.String, 32);
                   PSMGR_ERROR_DATA.CreateNewField(Names.ERROR_ENCOUNTERED_SW, FieldType.String, 1);
                   PSMGR_ERROR_DATA.CreateNewField(Names.VIEW_OVERFLOW_SW, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DASG_DATA, (PSMGR_DASG_DATA) =>
               {
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ACTION_ID_X, (ACTION_ID_X) =>
                   {
                       ACTION_ID_X.CreateNewField(Names.ACTION_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewGroup(Names.ATTRIBUTE_ID_X, (ATTRIBUTE_ID_X) =>
                   {
                       ATTRIBUTE_ID_X.CreateNewField(Names.ATTRIBUTE_ID, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DASG_DATA.CreateNewField(Names.STATUS_FLAG, FieldType.String, 2)
                       .NewCheckField(Names.FATAL_ERROR_SF, "FE")
                       .NewCheckField(Names.PSTEP_USE_FAILURE, "PU")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.LAST_STATUS, FieldType.String, 2)
                       .NewCheckField(Names.DB_ERROR_FL_LS, "DB")
                       .NewCheckField(Names.DUPLICATE_FOUND_FL_LS, "DF")
                       .NewCheckField(Names.INVALID_DATAA_FL_LS, "IA")
                       .NewCheckField(Names.INVALID_DATAB_TYPE_FL_LS, "BT")
                       .NewCheckField(Names.INVALID_DATAB_PERM_FL_LS, "BP")
                       .NewCheckField(Names.FATAL_ERROR_FL_LS, "FE")
                       .NewCheckField(Names.NOT_FOUND_FL_LS, "NF")
                       .NewCheckField(Names.NOT_UNIQUE_FL_LS, "NU")
                       .NewCheckField(Names.IEF_FUNCTION_ERROR_FL_LS, "IE")
                       .NewCheckField(Names.IEF_DURATION_ERROR_FL_LS, "DE")
                       .NewCheckField(Names.USED_PSTEP_NOT_FOUND, "PO")
                       .NewCheckField(Names.USED_PSTEP_ROUTING_ERR, "PX")
                       .NewCheckField(Names.USED_PSTEP_SND_FMT_ERR, "PF")
                       .NewCheckField(Names.USED_PSTEP_ENCRYPT_ERR, "PN")
                       .NewCheckField(Names.USED_PSTEP_SND_BFR_ERR, "PS")
                       .NewCheckField(Names.USED_PSTEP_RCV_BFR_ERR, "PR")
                       .NewCheckField(Names.USED_PSTEP_RCV_FMT_ERR, "PU")
                       .NewCheckField(Names.USED_PSTEP_TIRSECR_ERR, "PE")
                       .NewCheckField(Names.USED_PSTEP_TOKEN_ERR, "PT")
                       .NewCheckField(Names.USED_PSTEP_SEND_MAX_SIZE, "PM")
                       .NewCheckField(Names.USED_PSTEP_SECG_ERR, "PB")
                       .NewCheckField(Names.USED_PSTEP_ALLOC_ERR, "PA")
                       .NewCheckField(Names.USED_PSTEP_CONNECT_ERR, "PC")
                       .NewCheckField(Names.USED_PSTEP_XERR, "PD")
                       .NewCheckField(Names.USED_PSTEP_RCV_UA_ERR, "PH")
                       .NewCheckField(Names.USED_PSTEP_RCV_ES_ERR, "PI")
                       .NewCheckField(Names.USED_PSTEP_XFAL, "PJ")
                       .NewCheckField(Names.USED_PSTEP_SETOA_ERR, "PK")
                       .NewCheckField(Names.USED_PSTEP_RCV_VIEW_ERR, "PL")
                       .NewCheckField(Names.USED_PSTEP_DECRYPT_ERR, "PP")
                       ;
                   PSMGR_DASG_DATA.CreateNewField(Names.SAVE_SQLCA, FieldType.String, 255);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_DEBUG_DATA, (PSMGR_DEBUG_DATA) =>
               {
                   PSMGR_DEBUG_DATA.CreateNewField(Names.PSMGR_TRACE_ADR, FieldType.CompInt, 9);
                   PSMGR_DEBUG_DATA.CreateNewGroup(Names.LAST_STATEMENT_X, (LAST_STATEMENT_X) =>
                   {
                       LAST_STATEMENT_X.CreateNewField(Names.LAST_STATEMENT_NUM, FieldType.UnsignedNumeric, 10);
                   });
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_ID, FieldType.String, 10);
                   PSMGR_DEBUG_DATA.CreateNewField(Names.CUR_AB_NAME, FieldType.String, 32);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_TIRDATE_SAVEAREA, FieldType.String, 12);
               GLOBDATA.CreateNewGroup(Names.PSMGR_TIRDATE_CMCB, (PSMGR_TIRDATE_CMCB) =>
               {
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATE, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIME, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(8, FillWith.Hashes);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_INC, FieldType.CompInt, 9);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RC, FieldType.CompShort, 4)
                       .NewCheckField(Names.PSMGR_TIRDATE_OK, +0)
                       .NewCheckField(Names.PSMGR_TIRDATE_WARNING, +4)
                       .NewCheckField(Names.PSMGR_TIRDATE_ERROR, +8)
                       ;
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_REQ, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_DATEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TIMEF, FieldType.UnsignedNumeric, 1);
                   PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_RETMSG, FieldType.String, 60);

                   IField PSMGR_TIRDATE_TSTAMP_local = PSMGR_TIRDATE_CMCB.CreateNewField(Names.PSMGR_TIRDATE_TSTAMP, FieldType.String, 20);
                   PSMGR_TIRDATE_CMCB.CreateNewGroupRedefine("FILLER_d316", PSMGR_TIRDATE_TSTAMP_local, (FILLER_d316) =>
                   {
                       FILLER_d316.CreateNewField(Names.PSMGR_TIRDATE_DATE_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d316.CreateNewField(Names.PSMGR_TIRDATE_TIME_Z, FieldType.UnsignedNumeric, 8);
                       FILLER_d316.CreateNewFillerField(4, FillWith.Hashes);
                   });
                   PSMGR_TIRDATE_CMCB.CreateNewFillerField(96, FillWith.Hashes);
               });
               GLOBDATA.CreateNewField(Names.PSMGR_ROLLBACK_RQSTED, FieldType.String, 1)
                   .NewCheckField(Names.ROLLBACK_RQSTED, "R")
                   .NewCheckField(Names.ABEND_RQSTED, "A")
                   .NewCheckField(Names.TERMINATE_RQSTED, "T")
                   ;
               GLOBDATA.CreateNewGroup(Names.TIRTRCE_SAVE_AREA, (TIRTRCE_SAVE_AREA) =>
               {
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.BOTTOM_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.END_INDX, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_STMT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TOP_OF_CALL, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT, FieldType.CompInt, 9);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_BREAK_POINT_STATUS, FieldType.String, 3);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.LAST_AB_NAME, FieldType.String, 32);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLOR, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.COLORT, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.HILITE, FieldType.String, 15);
                   TIRTRCE_SAVE_AREA.CreateNewField(Names.TRACE_ON_OFF, FieldType.String, 3);
               });
               GLOBDATA.CreateNewGroup(Names.CASCADE_DELETE_FLAGS, (CASCADE_DELETE_FLAGS) =>
               {
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V1PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.V2PRESENT, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE1, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.CASCADE2, FieldType.String, 1);
                   CASCADE_DELETE_FLAGS.CreateNewField(Names.PROCESSQ_FLAG, FieldType.String, 1);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_ACTIVE_DIALECT, (PSMGR_ACTIVE_DIALECT) =>
               {
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.DIALECT_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.MESSAGE_TABLE_NAME, FieldType.String, 8);
                   PSMGR_ACTIVE_DIALECT.CreateNewField(Names.TRANSLATE_TABLE_NAME, FieldType.String, 8);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_FUNCTION_DATA_EXT, (PSMGR_FUNCTION_DATA_EXT) =>
               {
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_IN_TIMESTAMP, FieldType.String, 20);
                   PSMGR_FUNCTION_DATA_EXT.CreateNewGroup(Names.PSMGR_FUNC_IN_TSDURA, (PSMGR_FUNC_IN_TSDURA) =>
                   {
                       PSMGR_FUNC_IN_TSDURA.CreateNewGroup(Names.TSDURA_MICROSECOND, (TSDURA_MICROSECOND) =>
                       {
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_M_MISS, FieldType.String, 1);
                           TSDURA_MICROSECOND.CreateNewField(Names.TSDURA_MS, FieldType.CompInt, 9);
                       });
                   });
                   PSMGR_FUNCTION_DATA_EXT.CreateNewField(Names.PSMGR_FUNC_OUT_TIMESTAMP, FieldType.String, 20);
               });
               GLOBDATA.CreateNewFillerField(8, FillWith.Hashes);
               GLOBDATA.CreateNewField(Names.PSMGR_CICS_FAIL_SW, FieldType.String, 1)
                   .NewCheckField(Names.INHIBIT_CICS_RECEIVE, "I")
                   ;
               GLOBDATA.CreateNewField(Names.CLIENT_USERID, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.CLIENT_PASSWORD, FieldType.String, 64);
               GLOBDATA.CreateNewField(Names.LOAD_MODULE_NAME, FieldType.String, 8);
               GLOBDATA.CreateNewField(Names.INSTRUMENT_CODE, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_RETRY_LIMIT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewField(Names.TX_TIMEOUT, FieldType.CompInt, 9);
               GLOBDATA.CreateNewGroup(Names.PSMGR_EXTRA_ERRINFO, (PSMGR_EXTRA_ERRINFO) =>
               {
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_MSG_SIZE, FieldType.CompInt, 9);
                   PSMGR_EXTRA_ERRINFO.CreateNewField(Names.ERRINFO_BUF_ADDR, FieldType.String, 16);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_PTRS, (PSMGR_PSTEP_USE_PTRS) =>
               {
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_FAIL_MSG_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_GURB_REST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_LIPS_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_TBL_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_DDF_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_COMM_ID, FieldType.String, 8);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_APPL_LIST_PTR, FieldType.ReferencePointer, 4);
                   PSMGR_PSTEP_USE_PTRS.CreateNewField(Names.PSTEP_CURR_PST_PTR, FieldType.ReferencePointer, 4);
               });
               GLOBDATA.CreateNewGroup(Names.PSMGR_PSTEP_USE_SYSFLDS, (PSMGR_PSTEP_USE_SYSFLDS) =>
               {
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBERRCD, FieldType.String, 4);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBFN, FieldType.String, 2);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP, FieldType.String, 8);
                   PSMGR_PSTEP_USE_SYSFLDS.CreateNewField(Names.PSMGR_EIBRESP2, FieldType.String, 8);
               });
               GLOBDATA.CreateNewFillerField(199, FillWith.Hashes);
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_EV1, (I_IMPORT_EV1) =>
           {
               I_IMPORT_EV1.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET, (I_COLLECTIONS_EXTRACT_ET) =>
               {
                   I_COLLECTIONS_EXTRACT_ET.CreateNewField(Names.I_COLLECTION_OFFICER_000101MS, FieldType.String, 1);

                   IField I_COLLECTION_OFFICER_0001_001_local = I_COLLECTIONS_EXTRACT_ET.CreateNewField(Names.I_COLLECTION_OFFICER_0001_001, FieldType.String, 30);
                   I_COLLECTIONS_EXTRACT_ET.CreateNewFieldRedefine(Names.I_COLLECTION_OFFICER_000101XX, FieldType.String, I_COLLECTION_OFFICER_0001_001_local, 30);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_EV2, (I_IMPORT_EV2) =>
           {
               I_IMPORT_EV2.CreateNewGroup(Names.I_REPORT_PARMS_ET, (I_REPORT_PARMS_ET) =>
               {
                   I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM1_0002_002MS, FieldType.String, 1);

                   IField I_PARM1_0002_002_local = I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM1_0002_002, FieldType.String, 2);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.I_PARM1_0002_002XX, FieldType.String, I_PARM1_0002_002_local, 2);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.IO_CONTROL_CD, FieldType.String, I_PARM1_0002_002_local, 2)
                       .NewCheckField(Names.LS_OPEN_FILE_PASS, "OF")
                       .NewCheckField(Names.LS_APPEND_FILE_PASS, "AF")
                       .NewCheckField(Names.LS_CLOSE_FILE_PASS, "CF")
                       .NewCheckField(Names.LS_GEN_RPT_PASS, "GR")
                       ;
                   I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM2_0002_003MS, FieldType.String, 1);

                   IField I_PARM2_0002_003_local = I_REPORT_PARMS_ET.CreateNewField(Names.I_PARM2_0002_003, FieldType.String, 2);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.I_PARM2_0002_003XX, FieldType.String, I_PARM2_0002_003_local, 2);
                   I_REPORT_PARMS_ET.CreateNewGroupRedefine(Names.LS_RUNTIME_RPT_TYPE_CD, I_PARM2_0002_003_local, (LS_RUNTIME_RPT_TYPE_CD) =>
                   {
                       LS_RUNTIME_RPT_TYPE_CD.CreateNewField(Names.I_PARM2_1, FieldType.String, 1);
                       LS_RUNTIME_RPT_TYPE_CD.CreateNewField(Names.I_PARM2_2, FieldType.String, 1);
                   });
                   I_REPORT_PARMS_ET.CreateNewField(Names.I_SUBREPORT_CODE_0002_004MS, FieldType.String, 1);

                   IField I_SUBREPORT_CODE_0002_004_local = I_REPORT_PARMS_ET.CreateNewField(Names.I_SUBREPORT_CODE_0002_004, FieldType.String, 4);
                   I_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.I_SUBREPORT_CODE_0002_004XX, FieldType.String, I_SUBREPORT_CODE_0002_004_local, 4);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_EV3, (I_IMPORT_EV3) =>
           {
               I_IMPORT_EV3.CreateNewGroup(Names.I_REPORT_LITERALS_ET, (I_REPORT_LITERALS_ET) =>
               {
                   I_REPORT_LITERALS_ET.CreateNewField(Names.I_SUB_HEADING_1_0003_005MS, FieldType.String, 1);

                   IField I_SUB_HEADING_1_0003_005_local = I_REPORT_LITERALS_ET.CreateNewField(Names.I_SUB_HEADING_1_0003_005, FieldType.String, 30);
                   I_REPORT_LITERALS_ET.CreateNewFieldRedefine(Names.I_SUB_HEADING_1_0003_005XX, FieldType.String, I_SUB_HEADING_1_0003_005_local, 30);
                   I_REPORT_LITERALS_ET.CreateNewField(Names.I_SUB_HEADING_2_0003_006MS, FieldType.String, 1);

                   IField I_SUB_HEADING_2_0003_006_local = I_REPORT_LITERALS_ET.CreateNewField(Names.I_SUB_HEADING_2_0003_006, FieldType.String, 14);
                   I_REPORT_LITERALS_ET.CreateNewFieldRedefine(Names.I_SUB_HEADING_2_0003_006XX, FieldType.String, I_SUB_HEADING_2_0003_006_local, 14);
                   I_REPORT_LITERALS_ET.CreateNewField(Names.I_SUB_HEADING_3_0003_007MS, FieldType.String, 1);

                   IField I_SUB_HEADING_3_0003_007_local = I_REPORT_LITERALS_ET.CreateNewField(Names.I_SUB_HEADING_3_0003_007, FieldType.String, 5);
                   I_REPORT_LITERALS_ET.CreateNewFieldRedefine(Names.I_SUB_HEADING_3_0003_007XX, FieldType.String, I_SUB_HEADING_3_0003_007_local, 5);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_TOTAL_EV4, (I_IMPORT_TOTAL_EV4) =>
           {
               I_IMPORT_TOTAL_EV4.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d2, (I_COLLECTIONS_EXTRACT_ET_d2) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d2.CreateNewField(Names.I_AMOUNT1_0004_008MS, FieldType.String, 1);

                   IField I_AMOUNT1_0004_008_local = I_COLLECTIONS_EXTRACT_ET_d2.CreateNewField(Names.I_AMOUNT1_0004_008, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d2.CreateNewFieldRedefine(Names.I_AMOUNT1_0004_008XX, FieldType.String, I_AMOUNT1_0004_008_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_TOTAL_EV5, (I_IMPORT_TOTAL_EV5) =>
           {
               I_IMPORT_TOTAL_EV5.CreateNewGroup(Names.I_IEF_SUPPLIED_ET, (I_IEF_SUPPLIED_ET) =>
               {
                   I_IEF_SUPPLIED_ET.CreateNewField(Names.I_COUNT_0005_009MS, FieldType.String, 1);

                   IField I_COUNT_0005_009_local = I_IEF_SUPPLIED_ET.CreateNewField(Names.I_COUNT_0005_009, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET.CreateNewFieldRedefine(Names.I_COUNT_0005_009XX, FieldType.String, I_COUNT_0005_009_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_TAF_TOTAL_EV6, (I_IMPORT_TAF_TOTAL_EV6) =>
           {
               I_IMPORT_TAF_TOTAL_EV6.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d3, (I_COLLECTIONS_EXTRACT_ET_d3) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d3.CreateNewField(Names.I_AMOUNT1_0006_010MS, FieldType.String, 1);

                   IField I_AMOUNT1_0006_010_local = I_COLLECTIONS_EXTRACT_ET_d3.CreateNewField(Names.I_AMOUNT1_0006_010, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d3.CreateNewFieldRedefine(Names.I_AMOUNT1_0006_010XX, FieldType.String, I_AMOUNT1_0006_010_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_TAF_TOTAL_EV7, (I_IMPORT_TAF_TOTAL_EV7) =>
           {
               I_IMPORT_TAF_TOTAL_EV7.CreateNewGroup(Names.I_IEF_SUPPLIED_ET_d2, (I_IEF_SUPPLIED_ET_d2) =>
               {
                   I_IEF_SUPPLIED_ET_d2.CreateNewField(Names.I_COUNT_0007_011MS, FieldType.String, 1);

                   IField I_COUNT_0007_011_local = I_IEF_SUPPLIED_ET_d2.CreateNewField(Names.I_COUNT_0007_011, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET_d2.CreateNewFieldRedefine(Names.I_COUNT_0007_011XX, FieldType.String, I_COUNT_0007_011_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_TAF_EV8, (I_IMPORT_TAF_EV8) =>
           {
               I_IMPORT_TAF_EV8.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d4, (I_COLLECTIONS_EXTRACT_ET_d4) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d4.CreateNewField(Names.I_AMOUNT1_0008_012MS, FieldType.String, 1);

                   IField I_AMOUNT1_0008_012_local = I_COLLECTIONS_EXTRACT_ET_d4.CreateNewField(Names.I_AMOUNT1_0008_012, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d4.CreateNewFieldRedefine(Names.I_AMOUNT1_0008_012XX, FieldType.String, I_AMOUNT1_0008_012_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_TAF_EV9, (I_IMPORT_TAF_EV9) =>
           {
               I_IMPORT_TAF_EV9.CreateNewGroup(Names.I_IEF_SUPPLIED_ET_d3, (I_IEF_SUPPLIED_ET_d3) =>
               {
                   I_IEF_SUPPLIED_ET_d3.CreateNewField(Names.I_COUNT_0009_013MS, FieldType.String, 1);

                   IField I_COUNT_0009_013_local = I_IEF_SUPPLIED_ET_d3.CreateNewField(Names.I_COUNT_0009_013, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET_d3.CreateNewFieldRedefine(Names.I_COUNT_0009_013XX, FieldType.String, I_COUNT_0009_013_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_XTAF_EV10, (I_IMPORT_XTAF_EV10) =>
           {
               I_IMPORT_XTAF_EV10.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d5, (I_COLLECTIONS_EXTRACT_ET_d5) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d5.CreateNewField(Names.I_AMOUNT1_0010_014MS, FieldType.String, 1);

                   IField I_AMOUNT1_0010_014_local = I_COLLECTIONS_EXTRACT_ET_d5.CreateNewField(Names.I_AMOUNT1_0010_014, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d5.CreateNewFieldRedefine(Names.I_AMOUNT1_0010_014XX, FieldType.String, I_AMOUNT1_0010_014_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_XTAF_EV11, (I_IMPORT_XTAF_EV11) =>
           {
               I_IMPORT_XTAF_EV11.CreateNewGroup(Names.I_IEF_SUPPLIED_ET_d4, (I_IEF_SUPPLIED_ET_d4) =>
               {
                   I_IEF_SUPPLIED_ET_d4.CreateNewField(Names.I_COUNT_0011_015MS, FieldType.String, 1);

                   IField I_COUNT_0011_015_local = I_IEF_SUPPLIED_ET_d4.CreateNewField(Names.I_COUNT_0011_015, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET_d4.CreateNewFieldRedefine(Names.I_COUNT_0011_015XX, FieldType.String, I_COUNT_0011_015_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_TAF_FC_EV12, (I_IMPORT_TAF_FC_EV12) =>
           {
               I_IMPORT_TAF_FC_EV12.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d6, (I_COLLECTIONS_EXTRACT_ET_d6) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d6.CreateNewField(Names.I_AMOUNT1_0012_016MS, FieldType.String, 1);

                   IField I_AMOUNT1_0012_016_local = I_COLLECTIONS_EXTRACT_ET_d6.CreateNewField(Names.I_AMOUNT1_0012_016, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d6.CreateNewFieldRedefine(Names.I_AMOUNT1_0012_016XX, FieldType.String, I_AMOUNT1_0012_016_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_TAF_FC_EV13, (I_IMPORT_TAF_FC_EV13) =>
           {
               I_IMPORT_TAF_FC_EV13.CreateNewGroup(Names.I_IEF_SUPPLIED_ET_d5, (I_IEF_SUPPLIED_ET_d5) =>
               {
                   I_IEF_SUPPLIED_ET_d5.CreateNewField(Names.I_COUNT_0013_017MS, FieldType.String, 1);

                   IField I_COUNT_0013_017_local = I_IEF_SUPPLIED_ET_d5.CreateNewField(Names.I_COUNT_0013_017, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET_d5.CreateNewFieldRedefine(Names.I_COUNT_0013_017XX, FieldType.String, I_COUNT_0013_017_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_NON_TAF_TOTAL_EV14, (I_IMPORT_NON_TAF_TOTAL_EV14) =>
           {
               I_IMPORT_NON_TAF_TOTAL_EV14.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d7, (I_COLLECTIONS_EXTRACT_ET_d7) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d7.CreateNewField(Names.I_AMOUNT1_0014_018MS, FieldType.String, 1);

                   IField I_AMOUNT1_0014_018_local = I_COLLECTIONS_EXTRACT_ET_d7.CreateNewField(Names.I_AMOUNT1_0014_018, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d7.CreateNewFieldRedefine(Names.I_AMOUNT1_0014_018XX, FieldType.String, I_AMOUNT1_0014_018_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_NON_TAF_TOTAL_EV15, (I_IMPORT_NON_TAF_TOTAL_EV15) =>
           {
               I_IMPORT_NON_TAF_TOTAL_EV15.CreateNewGroup(Names.I_IEF_SUPPLIED_ET_d6, (I_IEF_SUPPLIED_ET_d6) =>
               {
                   I_IEF_SUPPLIED_ET_d6.CreateNewField(Names.I_COUNT_0015_019MS, FieldType.String, 1);

                   IField I_COUNT_0015_019_local = I_IEF_SUPPLIED_ET_d6.CreateNewField(Names.I_COUNT_0015_019, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET_d6.CreateNewFieldRedefine(Names.I_COUNT_0015_019XX, FieldType.String, I_COUNT_0015_019_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_NA_EV16, (I_IMPORT_NA_EV16) =>
           {
               I_IMPORT_NA_EV16.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d8, (I_COLLECTIONS_EXTRACT_ET_d8) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d8.CreateNewField(Names.I_AMOUNT1_0016_020MS, FieldType.String, 1);

                   IField I_AMOUNT1_0016_020_local = I_COLLECTIONS_EXTRACT_ET_d8.CreateNewField(Names.I_AMOUNT1_0016_020, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d8.CreateNewFieldRedefine(Names.I_AMOUNT1_0016_020XX, FieldType.String, I_AMOUNT1_0016_020_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_NA_EV17, (I_IMPORT_NA_EV17) =>
           {
               I_IMPORT_NA_EV17.CreateNewGroup(Names.I_IEF_SUPPLIED_ET_d7, (I_IEF_SUPPLIED_ET_d7) =>
               {
                   I_IEF_SUPPLIED_ET_d7.CreateNewField(Names.I_COUNT_0017_021MS, FieldType.String, 1);

                   IField I_COUNT_0017_021_local = I_IEF_SUPPLIED_ET_d7.CreateNewField(Names.I_COUNT_0017_021, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET_d7.CreateNewFieldRedefine(Names.I_COUNT_0017_021XX, FieldType.String, I_COUNT_0017_021_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_PA_EV18, (I_IMPORT_PA_EV18) =>
           {
               I_IMPORT_PA_EV18.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d9, (I_COLLECTIONS_EXTRACT_ET_d9) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d9.CreateNewField(Names.I_AMOUNT1_0018_022MS, FieldType.String, 1);

                   IField I_AMOUNT1_0018_022_local = I_COLLECTIONS_EXTRACT_ET_d9.CreateNewField(Names.I_AMOUNT1_0018_022, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d9.CreateNewFieldRedefine(Names.I_AMOUNT1_0018_022XX, FieldType.String, I_AMOUNT1_0018_022_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_PA_EV19, (I_IMPORT_PA_EV19) =>
           {
               I_IMPORT_PA_EV19.CreateNewGroup(Names.I_IEF_SUPPLIED_ET_d8, (I_IEF_SUPPLIED_ET_d8) =>
               {
                   I_IEF_SUPPLIED_ET_d8.CreateNewField(Names.I_COUNT_0019_023MS, FieldType.String, 1);

                   IField I_COUNT_0019_023_local = I_IEF_SUPPLIED_ET_d8.CreateNewField(Names.I_COUNT_0019_023, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET_d8.CreateNewFieldRedefine(Names.I_COUNT_0019_023XX, FieldType.String, I_COUNT_0019_023_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_STATE_ONLY_TOTAL_EV20, (I_IMPORT_STATE_ONLY_TOTAL_EV20) =>
           {
               I_IMPORT_STATE_ONLY_TOTAL_EV20.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d10, (I_COLLECTIONS_EXTRACT_ET_d10) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d10.CreateNewField(Names.I_AMOUNT1_0020_024MS, FieldType.String, 1);

                   IField I_AMOUNT1_0020_024_local = I_COLLECTIONS_EXTRACT_ET_d10.CreateNewField(Names.I_AMOUNT1_0020_024, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d10.CreateNewFieldRedefine(Names.I_AMOUNT1_0020_024XX, FieldType.String, I_AMOUNT1_0020_024_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_STATE_ONLY_TOTAL_EV21, (I_IMPORT_STATE_ONLY_TOTAL_EV21) =>
           {
               I_IMPORT_STATE_ONLY_TOTAL_EV21.CreateNewGroup(Names.I_IEF_SUPPLIED_ET_d9, (I_IEF_SUPPLIED_ET_d9) =>
               {
                   I_IEF_SUPPLIED_ET_d9.CreateNewField(Names.I_COUNT_0021_025MS, FieldType.String, 1);

                   IField I_COUNT_0021_025_local = I_IEF_SUPPLIED_ET_d9.CreateNewField(Names.I_COUNT_0021_025, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET_d9.CreateNewFieldRedefine(Names.I_COUNT_0021_025XX, FieldType.String, I_COUNT_0021_025_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_GA_FC_EV22, (I_IMPORT_GA_FC_EV22) =>
           {
               I_IMPORT_GA_FC_EV22.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d11, (I_COLLECTIONS_EXTRACT_ET_d11) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d11.CreateNewField(Names.I_AMOUNT1_0022_026MS, FieldType.String, 1);

                   IField I_AMOUNT1_0022_026_local = I_COLLECTIONS_EXTRACT_ET_d11.CreateNewField(Names.I_AMOUNT1_0022_026, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d11.CreateNewFieldRedefine(Names.I_AMOUNT1_0022_026XX, FieldType.String, I_AMOUNT1_0022_026_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_GA_FC_EV23, (I_IMPORT_GA_FC_EV23) =>
           {
               I_IMPORT_GA_FC_EV23.CreateNewGroup(Names.I_IEF_SUPPLIED_ET_d10, (I_IEF_SUPPLIED_ET_d10) =>
               {
                   I_IEF_SUPPLIED_ET_d10.CreateNewField(Names.I_COUNT_0023_027MS, FieldType.String, 1);

                   IField I_COUNT_0023_027_local = I_IEF_SUPPLIED_ET_d10.CreateNewField(Names.I_COUNT_0023_027, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET_d10.CreateNewFieldRedefine(Names.I_COUNT_0023_027XX, FieldType.String, I_COUNT_0023_027_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_MHDD_EV24, (I_IMPORT_MHDD_EV24) =>
           {
               I_IMPORT_MHDD_EV24.CreateNewGroup(Names.I_COLLECTIONS_EXTRACT_ET_d12, (I_COLLECTIONS_EXTRACT_ET_d12) =>
               {
                   I_COLLECTIONS_EXTRACT_ET_d12.CreateNewField(Names.I_AMOUNT1_0024_028MS, FieldType.String, 1);

                   IField I_AMOUNT1_0024_028_local = I_COLLECTIONS_EXTRACT_ET_d12.CreateNewField(Names.I_AMOUNT1_0024_028, FieldType.SignedNumeric, 11, null, 2);
                   I_COLLECTIONS_EXTRACT_ET_d12.CreateNewFieldRedefine(Names.I_AMOUNT1_0024_028XX, FieldType.String, I_AMOUNT1_0024_028_local, 11);
               });
           });

            recordDef.CreateNewGroup(Names.I_IMPORT_MHDD_EV25, (I_IMPORT_MHDD_EV25) =>
           {
               I_IMPORT_MHDD_EV25.CreateNewGroup(Names.I_IEF_SUPPLIED_ET_d11, (I_IEF_SUPPLIED_ET_d11) =>
               {
                   I_IEF_SUPPLIED_ET_d11.CreateNewField(Names.I_COUNT_0025_029MS, FieldType.String, 1);

                   IField I_COUNT_0025_029_local = I_IEF_SUPPLIED_ET_d11.CreateNewField(Names.I_COUNT_0025_029, FieldType.SignedNumeric, 9);
                   I_IEF_SUPPLIED_ET_d11.CreateNewFieldRedefine(Names.I_COUNT_0025_029XX, FieldType.String, I_COUNT_0025_029_local, 9);
               });
           });

            recordDef.CreateNewGroup(Names.E_EXPORT_EV26, (E_EXPORT_EV26) =>
           {
               E_EXPORT_EV26.CreateNewGroup(Names.E_REPORT_PARMS_ET, (E_REPORT_PARMS_ET) =>
               {
                   E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM1_0026_030MS, FieldType.String, 1);

                   IField E_PARM1_0026_030_local = E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM1_0026_030, FieldType.String, 2);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.E_PARM1_0026_030XX, FieldType.String, E_PARM1_0026_030_local, 2);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.LS_RETURN_CD, FieldType.String, E_PARM1_0026_030_local, 2);
                   E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM2_0026_031MS, FieldType.String, 1);

                   IField E_PARM2_0026_031_local = E_REPORT_PARMS_ET.CreateNewField(Names.E_PARM2_0026_031, FieldType.String, 2);
                   E_REPORT_PARMS_ET.CreateNewFieldRedefine(Names.E_PARM2_0026_031XX, FieldType.String, E_PARM2_0026_031_local, 2);
               });
           });

        }

        protected override string GetRecordName()
        {
            return Names.LinkageSection;
        }
        #endregion

        public void SetPassedParameters(object[] args)
        {
            SetPassedParm(TI_RUNTIME_PARM1, args, 0);
            SetPassedParm(TI_RUNTIME_PARM2, args, 1);
            SetPassedParm(GLOBDATA, args, 2);
            SetPassedParm(I_IMPORT_EV1, args, 3);
            SetPassedParm(I_IMPORT_EV2, args, 4);
            SetPassedParm(I_IMPORT_EV3, args, 5);
            SetPassedParm(I_IMPORT_TOTAL_EV4, args, 6);
            SetPassedParm(I_IMPORT_TOTAL_EV5, args, 7);
            SetPassedParm(I_IMPORT_TAF_TOTAL_EV6, args, 8);
            SetPassedParm(I_IMPORT_TAF_TOTAL_EV7, args, 9);
            SetPassedParm(I_IMPORT_TAF_EV8, args, 10);
            SetPassedParm(I_IMPORT_TAF_EV9, args, 11);
            SetPassedParm(I_IMPORT_XTAF_EV10, args, 12);
            SetPassedParm(I_IMPORT_XTAF_EV11, args, 13);
            SetPassedParm(I_IMPORT_TAF_FC_EV12, args, 14);
            SetPassedParm(I_IMPORT_TAF_FC_EV13, args, 15);
            SetPassedParm(I_IMPORT_NON_TAF_TOTAL_EV14, args, 16);
            SetPassedParm(I_IMPORT_NON_TAF_TOTAL_EV15, args, 17);
            SetPassedParm(I_IMPORT_NA_EV16, args, 18);
            SetPassedParm(I_IMPORT_NA_EV17, args, 19);
            SetPassedParm(I_IMPORT_PA_EV18, args, 20);
            SetPassedParm(I_IMPORT_PA_EV19, args, 21);
            SetPassedParm(I_IMPORT_STATE_ONLY_TOTAL_EV20, args, 22);
            SetPassedParm(I_IMPORT_STATE_ONLY_TOTAL_EV21, args, 23);
            SetPassedParm(I_IMPORT_GA_FC_EV22, args, 24);
            SetPassedParm(I_IMPORT_GA_FC_EV23, args, 25);
            SetPassedParm(I_IMPORT_MHDD_EV24, args, 26);
            SetPassedParm(I_IMPORT_MHDD_EV25, args, 27);
            SetPassedParm(E_EXPORT_EV26, args, 28);
        }


        public void UpdateReturnParameters(object[] args)
        {
            SetReturnParm(TI_RUNTIME_PARM1, args, 0);
            SetReturnParm(TI_RUNTIME_PARM2, args, 1);
            SetReturnParm(GLOBDATA, args, 2);
            SetReturnParm(I_IMPORT_EV1, args, 3);
            SetReturnParm(I_IMPORT_EV2, args, 4);
            SetReturnParm(I_IMPORT_EV3, args, 5);
            SetReturnParm(I_IMPORT_TOTAL_EV4, args, 6);
            SetReturnParm(I_IMPORT_TOTAL_EV5, args, 7);
            SetReturnParm(I_IMPORT_TAF_TOTAL_EV6, args, 8);
            SetReturnParm(I_IMPORT_TAF_TOTAL_EV7, args, 9);
            SetReturnParm(I_IMPORT_TAF_EV8, args, 10);
            SetReturnParm(I_IMPORT_TAF_EV9, args, 11);
            SetReturnParm(I_IMPORT_XTAF_EV10, args, 12);
            SetReturnParm(I_IMPORT_XTAF_EV11, args, 13);
            SetReturnParm(I_IMPORT_TAF_FC_EV12, args, 14);
            SetReturnParm(I_IMPORT_TAF_FC_EV13, args, 15);
            SetReturnParm(I_IMPORT_NON_TAF_TOTAL_EV14, args, 16);
            SetReturnParm(I_IMPORT_NON_TAF_TOTAL_EV15, args, 17);
            SetReturnParm(I_IMPORT_NA_EV16, args, 18);
            SetReturnParm(I_IMPORT_NA_EV17, args, 19);
            SetReturnParm(I_IMPORT_PA_EV18, args, 20);
            SetReturnParm(I_IMPORT_PA_EV19, args, 21);
            SetReturnParm(I_IMPORT_STATE_ONLY_TOTAL_EV20, args, 22);
            SetReturnParm(I_IMPORT_STATE_ONLY_TOTAL_EV21, args, 23);
            SetReturnParm(I_IMPORT_GA_FC_EV22, args, 24);
            SetReturnParm(I_IMPORT_GA_FC_EV23, args, 25);
            SetReturnParm(I_IMPORT_MHDD_EV24, args, 26);
            SetReturnParm(I_IMPORT_MHDD_EV25, args, 27);
            SetReturnParm(E_EXPORT_EV26, args, 28);
        }
    }
    #endregion Linkage Section Class

    #region Business Logic Class
    public class SWEXF750 : EABBase
    {

        #region Public Constructors
        public SWEXF750()
            : base()
        {
            this.ProgramName.SetValue("SWEXF750");

            WS = new SWEXF750_ws();
            FD = new SWEXF750_fd(WS);
            LS = new SWEXF750_ls();
        }

        #endregion

        #region Private Fields


        //==== Working Storage Data Class ========================================
        private SWEXF750_ws WS;

        //==== File Data Class ========================================
        private SWEXF750_fd FD;

        //==== Linkage Section Data Class ========================================
        private SWEXF750_ls LS;
        #endregion

        #region Public Methods
        //========================================================================
        //==== RunMain Entry Point Method ========================================
        //========================================================================
        public override int ExecuteMain(params object[] args)                                              //COBOL==> PROCEDURE DIVISION USING TI-RUNTIME-PARM1 , TI-RUNTIME-PARM2 , GLOBDATA , I-IMPORT-EV1 , I-IMPORT-EV2 , I-IMPORT-EV3 , I-IMPORT-TOTAL-EV4 , I-IMPORT-TOTAL-EV5 , I-IMPORT-TAF-TOTAL-EV6 , I-IMPORT-TAF-TOTAL-EV7 , I-IMPORT-TAF-EV8 , I-IMPORT-TAF-EV9 , I-IMPORT-XTAF-EV10 , I-IMPORT-XTAF-EV11 , I-IMPORT-TAF-FC-EV12 , I-IMPORT-TAF-FC-EV13 , I-IMPORT-NON-TAF-TOTAL-EV14 , I-IMPORT-NON-TAF-TOTAL-EV15 , I-IMPORT-NA-EV16 , I-IMPORT-NA-EV17 , I-IMPORT-PA-EV18 , I-IMPORT-PA-EV19 , I-IMPORT-STATE-ONLY-TOTAL-EV20 , I-IMPORT-STATE-ONLY-TOTAL-EV21 , I-IMPORT-GA-FC-EV22 , I-IMPORT-GA-FC-EV23 , I-IMPORT-MHDD-EV24 , I-IMPORT-MHDD-EV25 , E-EXPORT-EV26.
        {
            try
            {
                WS.Initialize();
                LS.SetPassedParameters(args);
                RunMain();
                LS.UpdateReturnParameters(args);
                return Return_Code.AsInt();
            }
            catch (Exception ex)
            {
                Control.ReturnException(ex);
                return 12;
            }
        }
        #endregion

        #region Private Methods

        private void RunMain()
        {
            string returnMethod = "Main";
            // Execute Procedure Division Logic
            M_MAIN_LINE(returnMethod);
        }
        /// <summary>
        /// Method M_MAIN_LINE
        /// </summary>
        private void M_MAIN_LINE(string returnMethod = "")
        {
            M_INI_IMPORT_EXPORT_FLDS("M_INI_IMPORT_EXPORT_FLDS_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM INI-IMPORT-EXPORT-FLDS THRU INI-IMPORT-EXPORT-FLDS-EXIT.
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                if ((((LS.I_SUBREPORT_CODE_0002_004.IsEqualTo("RG"))
             || (LS.I_SUBREPORT_CODE_0002_004.IsEqualTo("ST")))
             || (LS.I_SUBREPORT_CODE_0002_004.IsEqualTo("SS")))
             || (LS.I_SUBREPORT_CODE_0002_004.IsEqualTo("MAIN")))  //COBOL==> IF I-SUBREPORT-CODE-0002-004 = 'RG' OR I-SUBREPORT-CODE-0002-004 = 'ST' OR I-SUBREPORT-CODE-0002-004 = 'SS' OR I-SUBREPORT-CODE-0002-004 = 'MAIN'
                {
                    LS.LS_RETURN_CD.SetValueWithSpaces();                                                               //COBOL==> MOVE SPACES TO LS-RETURN-CD
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    LS.LS_RETURN_CD.SetValue("IS");                                                                     //COBOL==> MOVE 'IS' TO LS-RETURN-CD
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                if (LS.LS_OPEN_FILE_PASS.Value)                                                                     //COBOL==> IF LS-OPEN-FILE-PASS
                {
                    FD.REPORT_FILE.OpenFile(FileAccessMode.Write);                                                      //COBOL==> OPEN OUTPUT REPORT-FILE
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    FD.REPORT_FILE.OpenFile(FileAccessMode.WriteExtend);                                                //COBOL==> OPEN EXTEND REPORT-FILE
                }                                                                                                   //COBOL==> END-IF
                if ((LS.I_PARM2_1.IsEqualTo("Y"))
             || (LS.I_PARM2_2.IsEqualTo("Y")))                 //COBOL==> IF I-PARM2-1 = 'Y' OR I-PARM2-2 = 'Y'
                {
                    WS.WS_MAIN_KEEP_DTL_TOGETHER_FG.SetValue("Y");                                                      //COBOL==> MOVE 'Y' TO WS-MAIN-KEEP-DTL-TOGETHER-FG
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if ((LS.I_PARM2_1.IsEqualTo("N"))
             || (LS.I_PARM2_2.IsEqualTo("N")))                 //COBOL==> IF I-PARM2-1 = 'N' OR I-PARM2-2 = 'N'
                    {
                        WS.WS_MAIN_KEEP_DTL_TOGETHER_FG.SetValue("N");                                                      //COBOL==> MOVE 'N' TO WS-MAIN-KEEP-DTL-TOGETHER-FG
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((LS.I_PARM2_1.IsEqualTo("0"))
             || (LS.I_PARM2_2.IsEqualTo("0")))                 //COBOL==> IF I-PARM2-1 = '0' OR I-PARM2-2 = '0'
                        {
                            WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                            WS.WS_MAIN_PAGE_SUPPRESS.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-MAIN-PAGE-SUPPRESS
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (!(LS.LS_RUNTIME_RPT_TYPE_CD.IsSpaces()))                                                        //COBOL==> IF LS-RUNTIME-RPT-TYPE-CD NOT = SPACES
                            {
                                LS.LS_RETURN_CD.SetValue("RI");                                                                     //COBOL==> MOVE 'RI' TO LS-RETURN-CD
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_CUR_SUBRPT_CODE.SetValue(LS.I_SUBREPORT_CODE_0002_004);                                       //COBOL==> MOVE I-SUBREPORT-CODE-0002-004 TO WS-CUR-SUBRPT-CODE
                M_GET_SYSTEM_DATE_N_TIME("M_GET_SYSTEM_DATE_N_TIME_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM GET-SYSTEM-DATE-N-TIME THRU GET-SYSTEM-DATE-N-TIME-EXIT
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (LS.LS_CLOSE_FILE_PASS.Value)                                                                    //COBOL==> IF LS-CLOSE-FILE-PASS
                {
                    if ((LS.I_PARM2_1.IsEqualTo("0"))
             || (LS.I_PARM2_2.IsEqualTo("0")))                 //COBOL==> IF I-PARM2-1 = '0' OR I-PARM2-2 = '0'
                    {
                        WS.WS_MAIN_PAGE_SUPPRESS_AFTER.SetValue("Y");                                                       //COBOL==> MOVE 'Y' TO WS-MAIN-PAGE-SUPPRESS-AFTER
                    }                                                                                                   //COBOL==> END-IF
                                                                                                                        //COMMENT: **********************************************************
                                                                                                                        //COMMENT:  FOR THE LAST SUBREPORT CALLED (NOT INCLUDING THE MAIN REPORT)
                                                                                                                        //COMMENT:  PRINT THE FINAL CONTROL/SUBREPORT/PAGE FOOTER
                                                                                                                        //COMMENT: **********************************************************
                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("RG"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'RG'
                    {
                        //COMMENT:              THIS STATEMENT IS HERE TO ENSURE PROPER CODE
                        //COMMENT:              GENERATION IN ALL CASES
                        WS.WS_RG_FIRST_TIME_FLAG.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-RG-FIRST-TIME-FLAG
                        M_PRINT_RG_RPT_FTR("M_PRINT_RG_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-RG-RPT-FTR THRU PRINT-RG-RPT-FTR-EXIT
                    }                                                                                                   //COBOL==> END-IF
                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("ST"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'ST'
                    {
                        //COMMENT:              THIS STATEMENT IS HERE TO ENSURE PROPER CODE
                        //COMMENT:              GENERATION IN ALL CASES
                        WS.WS_ST_FIRST_TIME_FLAG.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-ST-FIRST-TIME-FLAG
                        M_PRINT_ST_RPT_FTR("M_PRINT_ST_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-ST-RPT-FTR THRU PRINT-ST-RPT-FTR-EXIT
                    }                                                                                                   //COBOL==> END-IF
                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("SS"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'SS'
                    {
                        //COMMENT:              THIS STATEMENT IS HERE TO ENSURE PROPER CODE
                        //COMMENT:              GENERATION IN ALL CASES
                        WS.WS_SS_FIRST_TIME_FLAG.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SS-FIRST-TIME-FLAG
                        M_PRINT_SS_RPT_FTR("M_PRINT_SS_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-SS-RPT-FTR THRU PRINT-SS-RPT-FTR-EXIT
                    }                                                                                                   //COBOL==> END-IF
                                                                                                                        //COMMENT: **********************************************************
                                                                                                                        //COMMENT:  PRINT THE MAIN REPORT's control footer and report footer
                                                                                                                        //COMMENT: **********************************************************
                                                                                                                        //COMMENT: **********************************************************
                                                                                                                        //COMMENT:  PRINT THE APPROPRIATE FINAL PAGE FOOTER
                                                                                                                        //COMMENT: **********************************************************
                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("MAIN"))                                                       //COBOL==> IF WS-PREV-SUBRPT-CODE = 'MAIN'
                    {
                        if (WS.MAIN_PAGE_FTR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-FTR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_MAIN_PG_FTR("M_PRINT_MAIN_PG_FTR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-FTR THRU PRINT-MAIN-PG-FTR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    FD.REPORT_FILE.CloseFile();                                                                         //COBOL==> CLOSE REPORT-FILE
                    WS.WS_MAIN_FIRST_TIME_FLAG.SetValue("Y");                                                           //COBOL==> MOVE 'Y' TO WS-MAIN-FIRST-TIME-FLAG
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    WS.WS_CONTROL_BRK_FLAG.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-CONTROL-BRK-FLAG
                    WS.WS_MAIN_CNTL_FTR_FLAG.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-MAIN-CNTL-FTR-FLAG
                    WS.WS_MAIN_GR_COUNTER.SetComputeValue(0);                                                           //COBOL==> COMPUTE WS-MAIN-GR-COUNTER = 0
                    WS.WS_LINE_COUNT.SetComputeValue(0);                                                                //COBOL==> COMPUTE WS-LINE-COUNT = 0
                    WS.WS_PG_NUMBER.SetComputeValue(0);                                                                 //COBOL==> COMPUTE WS-PG-NUMBER = 0
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
                    {
                        if (((LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("S"))
             || (LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("D")))
             || (LS.LS_RUNTIME_RPT_TYPE_CD.IsSpaces()))  //COBOL==> IF LS-RUNTIME-RPT-TYPE-CD = 'S' OR 'D' OR SPACES
                        {
                            WS.WS_CUR_SUBRPT_CODE.SetValue(LS.I_SUBREPORT_CODE_0002_004);                                       //COBOL==> MOVE I-SUBREPORT-CODE-0002-004 TO WS-CUR-SUBRPT-CODE
                            if ((!(WS.WS_CUR_SUBRPT_CODE.IsEqualTo(WS.WS_PREV_SUBRPT_CODE)))
             && (!(WS.WS_PREV_SUBRPT_CODE.IsSpaces())))  //COBOL==> IF WS-CUR-SUBRPT-CODE NOT = WS-PREV-SUBRPT-CODE AND WS-PREV-SUBRPT-CODE NOT = SPACES
                            {
                                if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("MAIN"))                                                        //COBOL==> IF WS-CUR-SUBRPT-CODE = 'MAIN'
                                {
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("RG"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'RG'
                                    {
                                        M_PRINT_RG_RPT_FTR("M_PRINT_RG_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-RG-RPT-FTR THRU PRINT-RG-RPT-FTR-EXIT
                                        M_CHECK_FOR_RG_NEW_PAGE("M_CHECK_FOR_RG_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM CHECK-FOR-RG-NEW-PAGE THRU CHECK-FOR-RG-NEW-PAGE-EXIT
                                        WS.WS_RG_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-RG-FIRST-TIME-FLAG
                                    }                                                                                                   //COBOL==> END-IF
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("ST"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'ST'
                                    {
                                        M_PRINT_ST_RPT_FTR("M_PRINT_ST_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-ST-RPT-FTR THRU PRINT-ST-RPT-FTR-EXIT
                                        M_CHECK_FOR_ST_NEW_PAGE("M_CHECK_FOR_ST_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM CHECK-FOR-ST-NEW-PAGE THRU CHECK-FOR-ST-NEW-PAGE-EXIT
                                        WS.WS_ST_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-ST-FIRST-TIME-FLAG
                                    }                                                                                                   //COBOL==> END-IF
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("SS"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'SS'
                                    {
                                        M_PRINT_SS_RPT_FTR("M_PRINT_SS_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-SS-RPT-FTR THRU PRINT-SS-RPT-FTR-EXIT
                                        M_CHECK_FOR_SS_NEW_PAGE("M_CHECK_FOR_SS_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM CHECK-FOR-SS-NEW-PAGE THRU CHECK-FOR-SS-NEW-PAGE-EXIT
                                        WS.WS_SS_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-SS-FIRST-TIME-FLAG
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                                if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("SS"))                                                          //COBOL==> IF WS-CUR-SUBRPT-CODE = 'SS'
                                {
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("RG"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'RG'
                                    {
                                        M_PRINT_RG_RPT_FTR("M_PRINT_RG_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-RG-RPT-FTR THRU PRINT-RG-RPT-FTR-EXIT
                                        WS.WS_RG_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-RG-FIRST-TIME-FLAG
                                        WS.WS_RG_GR_COUNTER.SetValueWithZeroes();                                                           //COBOL==> MOVE 0 TO WS-RG-GR-COUNTER
                                    }                                                                                                   //COBOL==> END-IF
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("ST"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'ST'
                                    {
                                        M_PRINT_ST_RPT_FTR("M_PRINT_ST_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-ST-RPT-FTR THRU PRINT-ST-RPT-FTR-EXIT
                                        WS.WS_ST_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-ST-FIRST-TIME-FLAG
                                        WS.WS_ST_GR_COUNTER.SetValueWithZeroes();                                                           //COBOL==> MOVE 0 TO WS-ST-GR-COUNTER
                                    }                                                                                                   //COBOL==> END-IF
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("MAIN"))                                                       //COBOL==> IF WS-PREV-SUBRPT-CODE = 'MAIN'
                                    {
                                        WS.WS_MAIN_FIRST_TIME_FLAG.SetValue("N");                                                           //COBOL==> MOVE 'N' TO WS-MAIN-FIRST-TIME-FLAG
                                        if (!(WS.WS_PREV_SUBRPT_CODE.IsSpaces()))                                                           //COBOL==> IF WS-PREV-SUBRPT-CODE NOT = SPACES
                                        {
                                            M_CHECK_FOR_MAIN_NEW_PAGE("M_CHECK_FOR_MAIN_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM CHECK-FOR-MAIN-NEW-PAGE THRU CHECK-FOR-MAIN-NEW-PAGE-EXIT
                                            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                                            {
                                                M_PRINT_MAIN_PG_FTR("M_PRINT_MAIN_PG_FTR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-FTR THRU PRINT-MAIN-PG-FTR-EXIT
                                            }                                                                                                   //COBOL==> END-IF
                                        }                                                                                                   //COBOL==> END-IF
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                                if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("ST"))                                                          //COBOL==> IF WS-CUR-SUBRPT-CODE = 'ST'
                                {
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("RG"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'RG'
                                    {
                                        M_PRINT_RG_RPT_FTR("M_PRINT_RG_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-RG-RPT-FTR THRU PRINT-RG-RPT-FTR-EXIT
                                        WS.WS_RG_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-RG-FIRST-TIME-FLAG
                                        WS.WS_RG_GR_COUNTER.SetValueWithZeroes();                                                           //COBOL==> MOVE 0 TO WS-RG-GR-COUNTER
                                    }                                                                                                   //COBOL==> END-IF
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("SS"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'SS'
                                    {
                                        M_PRINT_SS_RPT_FTR("M_PRINT_SS_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-SS-RPT-FTR THRU PRINT-SS-RPT-FTR-EXIT
                                        WS.WS_SS_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-SS-FIRST-TIME-FLAG
                                        WS.WS_SS_GR_COUNTER.SetValueWithZeroes();                                                           //COBOL==> MOVE 0 TO WS-SS-GR-COUNTER
                                    }                                                                                                   //COBOL==> END-IF
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("MAIN"))                                                       //COBOL==> IF WS-PREV-SUBRPT-CODE = 'MAIN'
                                    {
                                        WS.WS_MAIN_FIRST_TIME_FLAG.SetValue("N");                                                           //COBOL==> MOVE 'N' TO WS-MAIN-FIRST-TIME-FLAG
                                        if (!(WS.WS_PREV_SUBRPT_CODE.IsSpaces()))                                                           //COBOL==> IF WS-PREV-SUBRPT-CODE NOT = SPACES
                                        {
                                            M_CHECK_FOR_MAIN_NEW_PAGE("M_CHECK_FOR_MAIN_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM CHECK-FOR-MAIN-NEW-PAGE THRU CHECK-FOR-MAIN-NEW-PAGE-EXIT
                                            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                                            {
                                                M_PRINT_MAIN_PG_FTR("M_PRINT_MAIN_PG_FTR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-FTR THRU PRINT-MAIN-PG-FTR-EXIT
                                            }                                                                                                   //COBOL==> END-IF
                                        }                                                                                                   //COBOL==> END-IF
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                                if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("RG"))                                                          //COBOL==> IF WS-CUR-SUBRPT-CODE = 'RG'
                                {
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("ST"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'ST'
                                    {
                                        M_PRINT_ST_RPT_FTR("M_PRINT_ST_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-ST-RPT-FTR THRU PRINT-ST-RPT-FTR-EXIT
                                        WS.WS_ST_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-ST-FIRST-TIME-FLAG
                                        WS.WS_ST_GR_COUNTER.SetValueWithZeroes();                                                           //COBOL==> MOVE 0 TO WS-ST-GR-COUNTER
                                    }                                                                                                   //COBOL==> END-IF
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("SS"))                                                         //COBOL==> IF WS-PREV-SUBRPT-CODE = 'SS'
                                    {
                                        M_PRINT_SS_RPT_FTR("M_PRINT_SS_RPT_FTR_EXIT"); if (Control.ExitProgram) { return; }                   //COBOL==> PERFORM PRINT-SS-RPT-FTR THRU PRINT-SS-RPT-FTR-EXIT
                                        WS.WS_SS_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-SS-FIRST-TIME-FLAG
                                        WS.WS_SS_GR_COUNTER.SetValueWithZeroes();                                                           //COBOL==> MOVE 0 TO WS-SS-GR-COUNTER
                                    }                                                                                                   //COBOL==> END-IF
                                    if (WS.WS_PREV_SUBRPT_CODE.IsEqualTo("MAIN"))                                                       //COBOL==> IF WS-PREV-SUBRPT-CODE = 'MAIN'
                                    {
                                        WS.WS_MAIN_FIRST_TIME_FLAG.SetValue("N");                                                           //COBOL==> MOVE 'N' TO WS-MAIN-FIRST-TIME-FLAG
                                        if (!(WS.WS_PREV_SUBRPT_CODE.IsSpaces()))                                                           //COBOL==> IF WS-PREV-SUBRPT-CODE NOT = SPACES
                                        {
                                            M_CHECK_FOR_MAIN_NEW_PAGE("M_CHECK_FOR_MAIN_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM CHECK-FOR-MAIN-NEW-PAGE THRU CHECK-FOR-MAIN-NEW-PAGE-EXIT
                                            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                                            {
                                                M_PRINT_MAIN_PG_FTR("M_PRINT_MAIN_PG_FTR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-FTR THRU PRINT-MAIN-PG-FTR-EXIT
                                            }                                                                                                   //COBOL==> END-IF
                                        }                                                                                                   //COBOL==> END-IF
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                            if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("RG"))                                                          //COBOL==> IF WS-CUR-SUBRPT-CODE = 'RG'
                            {
                                WS.WS_RG_GR_COUNTER.Add(1);                                                                         //COBOL==> ADD 1 TO WS-RG-GR-COUNTER
                                if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_RG_PAGE_DTL_LINES.SetValue(4);                                                                //COBOL==> MOVE 4 TO WS-RG-PAGE-DTL-LINES
                                                                                                                                        //COMMENT:                     THIS STATEMENT IS HERE TO ENSURE PROPER CODE
                                                                                                                                        //COMMENT:                     GENERATION IN ALL CASES
                                    WS.WS_RG_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-RG-FIRST-TIME-FLAG
                                    if ((WS.WS_PREV_SUBRPT_CODE.IsSpaces())
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))      //COBOL==> IF WS-PREV-SUBRPT-CODE = SPACES OR WS-PG-BRK-FLAG = 'Y'
                                    {
                                        M_PRINT_RG_PG_HDR("M_PRINT_RG_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-RG-PG-HDR THRU PRINT-RG-PG-HDR-EXIT
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                                M_RG_MAINLINE_DTL("M_RG_MAINLINE_DTL_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM RG-MAINLINE-DTL THRU RG-MAINLINE-DTL-EXIT
                                if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_RG_FIRST_TIME_FLAG.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-RG-FIRST-TIME-FLAG
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                            if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("ST"))                                                          //COBOL==> IF WS-CUR-SUBRPT-CODE = 'ST'
                            {
                                WS.WS_ST_GR_COUNTER.Add(1);                                                                         //COBOL==> ADD 1 TO WS-ST-GR-COUNTER
                                if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_ST_PAGE_DTL_LINES.SetValue(4);                                                                //COBOL==> MOVE 4 TO WS-ST-PAGE-DTL-LINES
                                                                                                                                        //COMMENT:                     THIS STATEMENT IS HERE TO ENSURE PROPER CODE
                                                                                                                                        //COMMENT:                     GENERATION IN ALL CASES
                                    WS.WS_ST_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-ST-FIRST-TIME-FLAG
                                    if ((WS.WS_PREV_SUBRPT_CODE.IsSpaces())
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))      //COBOL==> IF WS-PREV-SUBRPT-CODE = SPACES OR WS-PG-BRK-FLAG = 'Y'
                                    {
                                        M_PRINT_ST_PG_HDR("M_PRINT_ST_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-ST-PG-HDR THRU PRINT-ST-PG-HDR-EXIT
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                                M_ST_MAINLINE_DTL("M_ST_MAINLINE_DTL_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM ST-MAINLINE-DTL THRU ST-MAINLINE-DTL-EXIT
                                if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_ST_FIRST_TIME_FLAG.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-ST-FIRST-TIME-FLAG
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                            if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("SS"))                                                          //COBOL==> IF WS-CUR-SUBRPT-CODE = 'SS'
                            {
                                WS.WS_SS_GR_COUNTER.Add(1);                                                                         //COBOL==> ADD 1 TO WS-SS-GR-COUNTER
                                if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_SS_PAGE_DTL_LINES.SetValue(4);                                                                //COBOL==> MOVE 4 TO WS-SS-PAGE-DTL-LINES
                                                                                                                                        //COMMENT:                     THIS STATEMENT IS HERE TO ENSURE PROPER CODE
                                                                                                                                        //COMMENT:                     GENERATION IN ALL CASES
                                    WS.WS_SS_FIRST_TIME_FLAG.SetValue("Y");                                                             //COBOL==> MOVE 'Y' TO WS-SS-FIRST-TIME-FLAG
                                    if ((WS.WS_PREV_SUBRPT_CODE.IsSpaces())
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))      //COBOL==> IF WS-PREV-SUBRPT-CODE = SPACES OR WS-PG-BRK-FLAG = 'Y'
                                    {
                                        M_PRINT_SS_PG_HDR("M_PRINT_SS_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-SS-PG-HDR THRU PRINT-SS-PG-HDR-EXIT
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                                M_SS_MAINLINE_DTL("M_SS_MAINLINE_DTL_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM SS-MAINLINE-DTL THRU SS-MAINLINE-DTL-EXIT
                                if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_SS_FIRST_TIME_FLAG.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SS-FIRST-TIME-FLAG
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                            if (WS.WS_CUR_SUBRPT_CODE.IsEqualTo("MAIN"))                                                        //COBOL==> IF WS-CUR-SUBRPT-CODE = 'MAIN'
                            {
                                WS.WS_MAIN_GR_COUNTER.Add(1);                                                                       //COBOL==> ADD 1 TO WS-MAIN-GR-COUNTER
                                if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_MAIN_PAGE_DTL_LINES.SetValue(4);                                                              //COBOL==> MOVE 4 TO WS-MAIN-PAGE-DTL-LINES
                                                                                                                                        //COMMENT:                     THIS STATEMENT IS HERE TO ENSURE PROPER CODE
                                                                                                                                        //COMMENT:                     GENERATION IN ALL CASES
                                    WS.WS_MAIN_FIRST_TIME_FLAG.SetValue("Y");                                                           //COBOL==> MOVE 'Y' TO WS-MAIN-FIRST-TIME-FLAG
                                    if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                                    {
                                        M_PRINT_MAIN_PG_HDR("M_PRINT_MAIN_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-HDR THRU PRINT-MAIN-PG-HDR-EXIT
                                    }                                                                                                   //COBOL==> END-IF
                                }                                                                                                   //COBOL==> END-IF
                                M_MAIN_MAINLINE_DTL("M_MAIN_MAINLINE_DTL_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM MAIN-MAINLINE-DTL THRU MAIN-MAINLINE-DTL-EXIT
                                if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
                                {
                                    WS.WS_MAIN_FIRST_TIME_FLAG.SetValue("N");                                                           //COBOL==> MOVE 'N' TO WS-MAIN-FIRST-TIME-FLAG
                                }                                                                                                   //COBOL==> END-IF
                            }                                                                                                   //COBOL==> END-IF
                            WS.WS_PREV_SUBRPT_CODE.SetValue(WS.WS_CUR_SUBRPT_CODE);                                             //COBOL==> MOVE WS-CUR-SUBRPT-CODE TO WS-PREV-SUBRPT-CODE
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            LS.LS_RETURN_CD.SetValue("RI");                                                                     //COBOL==> MOVE 'RI' TO LS-RETURN-CD
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        LS.LS_RETURN_CD.SetValue("II");                                                                     //COBOL==> MOVE 'II' TO LS-RETURN-CD
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF.
            }
            WS.PREV_IO_CONTROL_CD.SetValue(LS.IO_CONTROL_CD);                                                   //COBOL==> MOVE IO-CONTROL-CD TO PREV-IO-CONTROL-CD.
            if (returnMethod != "" && returnMethod != "M_MAIN_LINE") { M_MAINLINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAINLINE_EXIT
        /// </summary>
        private void M_MAINLINE_EXIT(string returnMethod = "")
        {
            LS.E_PARM2_0026_031.SetValue(WS.WS_FILE_STATUS);                                                    //COBOL==> MOVE WS-FILE-STATUS TO E-PARM2-0026-031.
            if (!(WS.WS_FILE_STATUS.IsEqualTo("00")))                                                           //COBOL==> IF WS-FILE-STATUS IS NOT EQUAL TO '00'
            {
                if (LS.LS_CLOSE_FILE_PASS.Value)                                                                    //COBOL==> IF LS-CLOSE-FILE-PASS
                {
                    LS.LS_RETURN_CD.SetValue("EC");                                                                     //COBOL==> MOVE 'EC' TO LS-RETURN-CD
                }                                                                                                   //COBOL==> END-IF
                if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
                {
                    LS.LS_RETURN_CD.SetValue("ER");                                                                     //COBOL==> MOVE 'ER' TO LS-RETURN-CD
                }                                                                                                   //COBOL==> END-IF
                if (LS.LS_OPEN_FILE_PASS.Value)                                                                     //COBOL==> IF LS-OPEN-FILE-PASS
                {
                    LS.LS_RETURN_CD.SetValue("EO");                                                                     //COBOL==> MOVE 'EO' TO LS-RETURN-CD
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_EV1.SetValue(LS.I_IMPORT_EV1);                                                          //COBOL==> MOVE I-IMPORT-EV1 TO P-IMPORT-EV1.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_EV2.SetValue(LS.I_IMPORT_EV2);                                                          //COBOL==> MOVE I-IMPORT-EV2 TO P-IMPORT-EV2.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_EV3.SetValue(LS.I_IMPORT_EV3);                                                          //COBOL==> MOVE I-IMPORT-EV3 TO P-IMPORT-EV3.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_TOTAL_EV4.SetValue(LS.I_IMPORT_TOTAL_EV4);                                              //COBOL==> MOVE I-IMPORT-TOTAL-EV4 TO P-IMPORT-TOTAL-EV4.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_TOTAL_EV5.SetValue(LS.I_IMPORT_TOTAL_EV5);                                              //COBOL==> MOVE I-IMPORT-TOTAL-EV5 TO P-IMPORT-TOTAL-EV5.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_TAF_TOTAL_EV6.SetValue(LS.I_IMPORT_TAF_TOTAL_EV6);                                      //COBOL==> MOVE I-IMPORT-TAF-TOTAL-EV6 TO P-IMPORT-TAF-TOTAL-EV6.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_TAF_TOTAL_EV7.SetValue(LS.I_IMPORT_TAF_TOTAL_EV7);                                      //COBOL==> MOVE I-IMPORT-TAF-TOTAL-EV7 TO P-IMPORT-TAF-TOTAL-EV7.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_TAF_EV8.SetValue(LS.I_IMPORT_TAF_EV8);                                                  //COBOL==> MOVE I-IMPORT-TAF-EV8 TO P-IMPORT-TAF-EV8.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_TAF_EV9.SetValue(LS.I_IMPORT_TAF_EV9);                                                  //COBOL==> MOVE I-IMPORT-TAF-EV9 TO P-IMPORT-TAF-EV9.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_XTAF_EV10.SetValue(LS.I_IMPORT_XTAF_EV10);                                              //COBOL==> MOVE I-IMPORT-XTAF-EV10 TO P-IMPORT-XTAF-EV10.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_XTAF_EV11.SetValue(LS.I_IMPORT_XTAF_EV11);                                              //COBOL==> MOVE I-IMPORT-XTAF-EV11 TO P-IMPORT-XTAF-EV11.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_TAF_FC_EV12.SetValue(LS.I_IMPORT_TAF_FC_EV12);                                          //COBOL==> MOVE I-IMPORT-TAF-FC-EV12 TO P-IMPORT-TAF-FC-EV12.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_TAF_FC_EV13.SetValue(LS.I_IMPORT_TAF_FC_EV13);                                          //COBOL==> MOVE I-IMPORT-TAF-FC-EV13 TO P-IMPORT-TAF-FC-EV13.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_NON_TAF_TOTAL_EV14.SetValue(LS.I_IMPORT_NON_TAF_TOTAL_EV14);                            //COBOL==> MOVE I-IMPORT-NON-TAF-TOTAL-EV14 TO P-IMPORT-NON-TAF-TOTAL-EV14.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_NON_TAF_TOTAL_EV15.SetValue(LS.I_IMPORT_NON_TAF_TOTAL_EV15);                            //COBOL==> MOVE I-IMPORT-NON-TAF-TOTAL-EV15 TO P-IMPORT-NON-TAF-TOTAL-EV15.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_NA_EV16.SetValue(LS.I_IMPORT_NA_EV16);                                                  //COBOL==> MOVE I-IMPORT-NA-EV16 TO P-IMPORT-NA-EV16.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_NA_EV17.SetValue(LS.I_IMPORT_NA_EV17);                                                  //COBOL==> MOVE I-IMPORT-NA-EV17 TO P-IMPORT-NA-EV17.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_PA_EV18.SetValue(LS.I_IMPORT_PA_EV18);                                                  //COBOL==> MOVE I-IMPORT-PA-EV18 TO P-IMPORT-PA-EV18.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_PA_EV19.SetValue(LS.I_IMPORT_PA_EV19);                                                  //COBOL==> MOVE I-IMPORT-PA-EV19 TO P-IMPORT-PA-EV19.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_STATE_ONLY_TOTAL_EV20.SetValue(LS.I_IMPORT_STATE_ONLY_TOTAL_EV20);                      //COBOL==> MOVE I-IMPORT-STATE-ONLY-TOTAL-EV20 TO P-IMPORT-STATE-ONLY-TOTAL-EV20.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_STATE_ONLY_TOTAL_EV21.SetValue(LS.I_IMPORT_STATE_ONLY_TOTAL_EV21);                      //COBOL==> MOVE I-IMPORT-STATE-ONLY-TOTAL-EV21 TO P-IMPORT-STATE-ONLY-TOTAL-EV21.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_GA_FC_EV22.SetValue(LS.I_IMPORT_GA_FC_EV22);                                            //COBOL==> MOVE I-IMPORT-GA-FC-EV22 TO P-IMPORT-GA-FC-EV22.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_GA_FC_EV23.SetValue(LS.I_IMPORT_GA_FC_EV23);                                            //COBOL==> MOVE I-IMPORT-GA-FC-EV23 TO P-IMPORT-GA-FC-EV23.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_MHDD_EV24.SetValue(LS.I_IMPORT_MHDD_EV24);                                              //COBOL==> MOVE I-IMPORT-MHDD-EV24 TO P-IMPORT-MHDD-EV24.
            }
            if (LS.LS_GEN_RPT_PASS.Value)                                                                       //COBOL==> IF LS-GEN-RPT-PASS
            {
                WS.P_IMPORT_MHDD_EV25.SetValue(LS.I_IMPORT_MHDD_EV25);                                              //COBOL==> MOVE I-IMPORT-MHDD-EV25 TO P-IMPORT-MHDD-EV25.
            }
            return;                                                                                             //COBOL==> EXIT PROGRAM.
        }
        /// <summary>
        /// Method M_RG_MAINLINE_DTL
        /// </summary>
        private void M_RG_MAINLINE_DTL(string returnMethod = "")
        {
            if (((WS.WS_RG_DTL_RPT_REQUESTED.Value)
             && (!(LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("S"))))
             || ((WS.WS_RG_SUMMARY_RPT_REQUESTED.Value)
             && (LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("D"))))  //COBOL==> IF ( WS-RG-DTL-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD NOT = 'S' ) OR ( WS-RG-SUMMARY-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD = 'D' )
            {
                WS.WS_RG_SECTION_PROCESSING_IND.SetValue("B  ");                                                    //COBOL==> MOVE 'B  ' TO WS-RG-SECTION-PROCESSING-IND
                WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.RG_DTL_LINE_SUPPRSS_BLANK);                                    //COBOL==> MOVE RG-DTL-LINE-SUPPRSS-BLANK TO WS-SUPPRSS-BLANK-LINE
                M_PRINT_RG_DTL_LINE_0("M_PRINT_RG_DTL_LINE_0_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-RG-DTL-LINE-0 THRU PRINT-RG-DTL-LINE-0-EXIT
                M_PRINT_RG_DTL_LINE_1("M_PRINT_RG_DTL_LINE_1_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-RG-DTL-LINE-1 THRU PRINT-RG-DTL-LINE-1-EXIT
                M_PRINT_RG_DTL_LINE_2("M_PRINT_RG_DTL_LINE_2_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-RG-DTL-LINE-2 THRU PRINT-RG-DTL-LINE-2-EXIT
                M_PRINT_RG_DTL_LINE_3("M_PRINT_RG_DTL_LINE_3_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-RG-DTL-LINE-3 THRU PRINT-RG-DTL-LINE-3-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_RG_SECTION_PROCESSING_IND.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO WS-RG-SECTION-PROCESSING-IND.
            if (WS.RG_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                     //COBOL==> IF RG-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_RG_MAINLINE_DTL") { M_RG_MAINLINE_DTL_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_RG_MAINLINE_DTL_EXIT
        /// </summary>
        private void M_RG_MAINLINE_DTL_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_RG_MAINLINE_DTL_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_RG_MAINLINE_DTL_EXIT") { M_PRINT_RG_RPT_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_RPT_LINE
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  THIS SECTION PRINTS ALL RG REPORT LINES.
        ///COMMENT:  IT IS CALLED FOR EACH REPORT LINE. IT CONTAINS:
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE PRINTING A LINE
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE DETAIL LINE PAGING
        ///COMMENT:  - ALSO CALL PRINT-A-RG-LINE
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_RG_RPT_LINE(string returnMethod = "")
        {
            M_CHECK_FOR_RG_NEW_PAGE("M_CHECK_FOR_RG_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM CHECK-FOR-RG-NEW-PAGE THRU CHECK-FOR-RG-NEW-PAGE-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                WS.WS_TEMP_PRINT_LINE.SetValue(WS.WS_PRINT_LINE);                                                   //COBOL==> MOVE WS-PRINT-LINE TO WS-TEMP-PRINT-LINE
                WS.WS_TEMP_PRINT_LINE_SPACING.SetValue(WS.WS_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-PRINT-LINE-SPACING TO WS-TEMP-PRINT-LINE-SPACING
                if (WS.RG_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF RG-PAGE-HDR-PRINT-FLAG = 'Y'
                {
                    WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                    if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                    {
                        if (WS.RG_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF RG-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_RG_PG_HDR("M_PRINT_RG_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-RG-PG-HDR THRU PRINT-RG-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
                    WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                         //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-TEMP-SAVE-PRINT-LINE
                    WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_TEMP_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE-SPACING TO WS-PRINT-LINE-SPACING
                    if (WS.RG_RPT_FTR_PRINT_ATBOTTM.IsEqualTo("Y"))                                                     //COBOL==> IF RG-RPT-FTR-PRINT-ATBOTTM = 'Y'
                    {
                        if (WS.WS_RG_RPT_FTR_IS_PROCESSED.Value)                                                            //COBOL==> IF WS-RG-RPT-FTR-IS-PROCESSED
                        {
                            WS.WS_CUR_SECTION_LINE_QT.SetValue(WS.WS_RG_RPT_FTR_LINE_QT);                                       //COBOL==> MOVE WS-RG-RPT-FTR-LINE-QT TO WS-CUR-SECTION-LINE-QT
                        }                                                                                                   //COBOL==> END-IF
                        M_RG_CALC_4_PRINT_BOTTM("M_RG_CALC_4_PRINT_BOTTM_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM RG-CALC-4-PRINT-BOTTM THRU RG-CALC-4-PRINT-BOTTM-EXIT
                    }                                                                                                   //COBOL==> END-IF
                    M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.RG_RPT_FTR_PRINT_ATBOTTM.IsEqualTo("Y"))                                                     //COBOL==> IF RG-RPT-FTR-PRINT-ATBOTTM = 'Y'
                    {
                        if (WS.WS_RG_RPT_FTR_IS_PROCESSED.Value)                                                            //COBOL==> IF WS-RG-RPT-FTR-IS-PROCESSED
                        {
                            WS.WS_CUR_SECTION_LINE_QT.SetValue(WS.WS_RG_RPT_FTR_LINE_QT);                                       //COBOL==> MOVE WS-RG-RPT-FTR-LINE-QT TO WS-CUR-SECTION-LINE-QT
                        }                                                                                                   //COBOL==> END-IF
                        M_RG_CALC_4_PRINT_BOTTM("M_RG_CALC_4_PRINT_BOTTM_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM RG-CALC-4-PRINT-BOTTM THRU RG-CALC-4-PRINT-BOTTM-EXIT
                    }                                                                                                   //COBOL==> END-IF
                    M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
                }                                                                                                   //COBOL==> END-IF
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((WS.WS_RG_PRINT_DUPLICATES.Value)
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))          //COBOL==> IF WS-RG-PRINT-DUPLICATES AND WS-NOT-IN-CONTROL-BRK
                {
                    WS.WS_RG_BODY_SUPPRESS_LINES.SetValue(WS.WS_RG_BODY_SUPPRESS_LINES.AsInt() - 1);                    //COBOL==> SUBTRACT 1 FROM WS-RG-BODY-SUPPRESS-LINES
                    if (WS.WS_RG_BODY_SUPPRESS_LINES.IsEqualTo(0))                                                      //COBOL==> IF WS-RG-BODY-SUPPRESS-LINES = 0
                    {
                        WS.WS_RG_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-RG-DISABLE-SUPPRESS
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.RG_RPT_FTR_PRINT_ATBOTTM.IsEqualTo("Y"))                                                     //COBOL==> IF RG-RPT-FTR-PRINT-ATBOTTM = 'Y'
                {
                    if (WS.WS_RG_RPT_FTR_IS_PROCESSED.Value)                                                            //COBOL==> IF WS-RG-RPT-FTR-IS-PROCESSED
                    {
                        WS.WS_CUR_SECTION_LINE_QT.SetValue(WS.WS_RG_RPT_FTR_LINE_QT);                                       //COBOL==> MOVE WS-RG-RPT-FTR-LINE-QT TO WS-CUR-SECTION-LINE-QT
                        M_RG_CALC_4_PRINT_BOTTM("M_RG_CALC_4_PRINT_BOTTM_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM RG-CALC-4-PRINT-BOTTM THRU RG-CALC-4-PRINT-BOTTM-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    if (WS.RG_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF RG-PAGE-HDR-PRINT-FLAG = 'Y'
                    {
                        WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                        if (WS.RG_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF RG-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_RG_PG_HDR("M_PRINT_RG_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-RG-PG-HDR THRU PRINT-RG-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                        WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                        M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_RPT_LINE") { M_PRINT_RG_RPT_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_RPT_LINE_EXIT
        /// </summary>
        private void M_PRINT_RG_RPT_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_RG_RPT_LINE_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_RPT_LINE_EXIT") { M_PRINT_A_RG_LINEONNEWPG(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_RG_LINEONNEWPG
        /// </summary>
        private void M_PRINT_A_RG_LINEONNEWPG(string returnMethod = "")
        {
            if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
            {
                if (((WS.WS_RG_CURRENTLY_WRAPPING.IsEqualTo("N"))
             && (WS.WS_RG_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (WS.WS_CONTROL_BRK_FLAG.IsEqualTo("N")))  //COBOL==> IF WS-RG-CURRENTLY-WRAPPING = 'N' AND WS-RG-CUR-PRINTING-PAGE-HDR = 'N' AND WS-CONTROL-BRK-FLAG = 'N'
                {
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
                }                                                                                                   //COBOL==> END-IF
                WS.WS_RG_PAGE_DTL_LINES.SetValue(4);                                                                //COBOL==> MOVE 4 TO WS-RG-PAGE-DTL-LINES
                if (((WS.WS_RG_BODY_IS_PROCESSED.Value)
             || (WS.WS_RG_RPT_HDR_IS_PROCESSED.Value))
             || (WS.WS_RG_RPT_FTR_IS_PROCESSED.Value))  //COBOL==> IF WS-RG-BODY-IS-PROCESSED OR WS-RG-RPT-HDR-IS-PROCESSED OR WS-RG-RPT-FTR-IS-PROCESSED
                {
                    if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                    {
                        WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                        WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((!(WS.WS_RG_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_RG_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-RG-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-RG-RPT-FTR-IS-PROCESSED )
                        {
                            WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    M_RG_UPDT_PG_NBR_FLDS("M_RG_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM RG-UPDT-PG-NBR-FLDS THRU RG-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(1))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 1
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_SPACE_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-SPACE-RECORD AFTER ADVANCING PAGE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                    WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_RG_LINEONNEWPG") { M_PRINT_A_RG_LINEONNEWPG_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_RG_LINEONNEWPG_EXIT
        /// </summary>
        private void M_PRINT_A_RG_LINEONNEWPG_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_RG_LINEONNEWPG_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_RG_LINEONNEWPG_EXIT") { M_PRINT_A_RG_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_RG_LINE
        /// </summary>
        private void M_PRINT_A_RG_LINE(string returnMethod = "")
        {
            if (((((((WS.WS_RG_PAGE_DTL_LINES.IsGreaterThan(0))
             && (WS.WS_PREV_SUBRPT_CODE.IsEqualTo(WS.WS_CUR_SUBRPT_CODE)))
             && (!(WS.WS_RG_CURRENTLY_WRAPPING.IsEqualTo("Y"))))
             && (WS.WS_RG_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (!(WS.WS_RG_RPT_HDR_IS_PROCESSED.Value)))
             && (!(WS.WS_RG_PG_HDR_IS_PROCESSED.Value)))
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))  //COBOL==> IF WS-RG-PAGE-DTL-LINES > 0 AND WS-PREV-SUBRPT-CODE = WS-CUR-SUBRPT-CODE AND WS-RG-CURRENTLY-WRAPPING NOT = 'Y' AND WS-RG-CUR-PRINTING-PAGE-HDR = 'N' AND NOT WS-RG-RPT-HDR-IS-PROCESSED AND NOT WS-RG-PG-HDR-IS-PROCESSED AND WS-NOT-IN-CONTROL-BRK
            {
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(0))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 0
            {
                if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                {
                    if (WS.WS_VERY_FIRST_WRITE.IsEqualTo("Y"))                                                          //COBOL==> IF WS-VERY-FIRST-WRITE = 'Y'
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                        WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.LINEBREAK, 0, WS.WS_PRINT_LINE_SPACING.AsInt());  //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING WS-PRINT-LINE-SPACING LINES
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_LINE_COUNT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-LINE-COUNT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_RG_LINE") { M_PRINT_A_RG_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_RG_LINE_EXIT
        /// </summary>
        private void M_PRINT_A_RG_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_RG_LINE_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_RG_LINE_EXIT") { M_CHECK_FOR_RG_NEW_PAGE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_RG_NEW_PAGE
        /// </summary>
        private void M_CHECK_FOR_RG_NEW_PAGE(string returnMethod = "")
        {
            WS.WS_TEMP_LINE_QT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-TEMP-LINE-QT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
            if (WS.WS_TEMP_LINE_QT.IsGreaterThan(WS.WS_PG_LENGTH))                                              //COBOL==> IF WS-TEMP-LINE-QT > WS-PG-LENGTH
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_RG_NEW_PAGE") { M_CHECK_FOR_RG_NEW_PAGE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_RG_NEW_PAGE_EXIT
        /// </summary>
        private void M_CHECK_FOR_RG_NEW_PAGE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_CHECK_FOR_RG_NEW_PAGE_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_RG_NEW_PAGE_EXIT") { M_RG_CALC_4_PRINT_BOTTM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_RG_CALC_4_PRINT_BOTTM
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  FOR THE RG REPORT
        ///COMMENT:  THIS PARAGRAPH CALCULATES THE NUMBER OF LINES
        ///COMMENT:  TO ADVANCE FOR A SECTION WHEN THE SECTION IS
        ///COMMENT:  SPECIFIED TO HAVE PRINT AT BOTTOM
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_RG_CALC_4_PRINT_BOTTM(string returnMethod = "")
        {
            if (WS.WS_SAVE_PRINT_ATBOTTM.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SAVE-PRINT-ATBOTTM = 'Y'
            {
                WS.WS_SAVE_PRINT_ATBOTTM.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SAVE-PRINT-ATBOTTM
                WS.WS_TEMP_LINE_QT.SetValueWithZeroes();                                                            //COBOL==> MOVE 0 TO WS-TEMP-LINE-QT
                if (WS.WS_PG_LENGTH.IsLessThan(((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_TEMP_LINE_QT.AsDecimal()) + WS.WS_CUR_SECTION_LINE_QT.AsDecimal())))  //COBOL==> IF WS-PG-LENGTH < ( WS-LINE-COUNT + WS-TEMP-LINE-QT + WS-CUR-SECTION-LINE-QT )
                {
                    if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue((((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_COUNT.AsDecimal()) - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-COUNT - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_RG_CALC_4_PRINT_BOTTM") { M_RG_CALC_4_PRINT_BOTTM_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_RG_CALC_4_PRINT_BOTTM_EXIT
        /// </summary>
        private void M_RG_CALC_4_PRINT_BOTTM_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_RG_CALC_4_PRINT_BOTTM_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_RG_CALC_4_PRINT_BOTTM_EXIT") { M_RG_UPDT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_RG_UPDT_PG_NBR_FLDS
        /// </summary>
        private void M_RG_UPDT_PG_NBR_FLDS(string returnMethod = "")
        {
            WS.RG_PAGE_HDR_0_P_OBJ30.SetValue(WS.WS_PG_NUMBER);                                                 //COBOL==> MOVE WS-PG-NUMBER TO RG-PAGE-HDR-0-P-OBJ30.
            if (returnMethod != "" && returnMethod != "M_RG_UPDT_PG_NBR_FLDS") { M_RG_UPDT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_RG_UPDT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_RG_UPDT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_RG_UPDT_PG_NBR_FLDS_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_RG_UPDT_PG_NBR_FLDS_EXIT") { M_PRINT_RG_DTL_LINE_0(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_DTL_LINE_0
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE BEFORE SPACING FOR RG REPORT BODY (DETAIL LINES)
        ///COMMENT:  FOR EACH DETAIL LINE...
        ///COMMENT:  - POPULATE THE OUTPUT FIELDS FROM THE IMPORTED ATTRIBUTES
        ///COMMENT:  - REPLACE ATTRIBUTE VALUES WITH SPACES IF DUPLICATE
        ///COMMENT:    SUPPRESSION ON AND NOT FIRST LINE OF PAGE OR
        ///COMMENT:    FIRST LINE AFTER CONTROL BREAK
        ///COMMENT:  - MOVE DETAIL LINE TO THE PRINT LINE
        ///COMMENT:  - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:  - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  - REPEAT AS NECESSARY FOR TEXT WRAPPING ATTRIBUTES
        ///COMMENT:  HANDLE AFTER SPACING FOR BODY (DETAIL LINES)
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_RG_DTL_LINE_0(string returnMethod = "")
        {
            if (WS.RG_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF RG-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_RG_UPDT_PG_NBR_FLDS("M_RG_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM RG-UPDT-PG-NBR-FLDS THRU RG-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.RG_DTL_LINE_0);                                                   //COBOL==> MOVE RG-DTL-LINE-0 TO SAVE-FOR-WRAP-TEXT.
            if (WS.RG_DTL_LINE_KEEP_TOGETHER.IsEqualTo("Y"))                                                    //COBOL==> IF RG-DTL-LINE-KEEP-TOGETHER = 'Y'
            {
                if (((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_RG_DTL_LINE_QT.AsDecimal()) + WS.WS_RG_PG_FTR_LINE_QT.AsDecimal()).IsGreaterThan(WS.WS_PG_LENGTH))  //COBOL==> IF ( WS-LINE-COUNT + WS-RG-DTL-LINE-QT + WS-RG-PG-FTR-LINE-QT ) > WS-PG-LENGTH
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.RG_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("Y"))                                                    //COBOL==> IF RG-DTL-LINE-BEFORE-PG-BRK = 'Y'
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_RG_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-RG-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_1_0003_005);                                 //COBOL==> MOVE I-SUB-HEADING-1-0003-005 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.RG_DTL_LINE_0_A_OBJ1.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                       //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO RG-DTL-LINE-0-A-OBJ1.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_DTL_LINE_0);                                              //COBOL==> MOVE RG-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_DTL_LINE_0);                                              //COBOL==> MOVE RG-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.RG_DTL_LINE_0);                                                        //COBOL==> MOVE RG-DTL-LINE-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_RG_RPT_LINE("M_PRINT_RG_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-RG-RPT-LINE THRU PRINT-RG-RPT-LINE-EXIT.
            WS.RG_DTL_LINE_0.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO RG-DTL-LINE-0.
            WS.WS_RG_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-RG-DISABLE-SUPPRESS.
            WS.WS_RG_PAGE_DTL_LINES.SetValue(WS.WS_RG_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-RG-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_DTL_LINE_0") { M_PRINT_RG_DTL_LINE_0_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_DTL_LINE_0_EXIT
        /// </summary>
        private void M_PRINT_RG_DTL_LINE_0_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_RG_DTL_LINE_0_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_DTL_LINE_0_EXIT") { M_PRINT_RG_DTL_LINE_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_DTL_LINE_1
        /// </summary>
        private void M_PRINT_RG_DTL_LINE_1(string returnMethod = "")
        {
            if (WS.RG_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF RG-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_RG_UPDT_PG_NBR_FLDS("M_RG_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM RG-UPDT-PG-NBR-FLDS THRU RG-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.RG_DTL_LINE_1);                                                   //COBOL==> MOVE RG-DTL-LINE-1 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_RG_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-RG-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_2_0003_006);                                 //COBOL==> MOVE I-SUB-HEADING-2-0003-006 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(14);                                                     //COBOL==> MOVE 14 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ2.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                       //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO RG-DTL-LINE-1-A-OBJ2.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0004_008);                                                      //COBOL==> MOVE I-AMOUNT1-0004-008 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0004_008);                                                     //COBOL==> MOVE I-AMOUNT1-0004-008 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0004_008.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0004-008 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ3);                                               //COBOL==> MOVE RG-EDIT-PATTERN-OBJ3 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ3.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ3.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0006_010);                                                      //COBOL==> MOVE I-AMOUNT1-0006-010 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0006_010);                                                     //COBOL==> MOVE I-AMOUNT1-0006-010 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0006_010.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0006-010 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ4);                                               //COBOL==> MOVE RG-EDIT-PATTERN-OBJ4 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ4.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ4.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0008_012);                                                      //COBOL==> MOVE I-AMOUNT1-0008-012 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0008_012);                                                     //COBOL==> MOVE I-AMOUNT1-0008-012 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0008_012.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0008-012 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ5);                                               //COBOL==> MOVE RG-EDIT-PATTERN-OBJ5 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ5.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ5.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0010_014);                                                      //COBOL==> MOVE I-AMOUNT1-0010-014 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0010_014);                                                     //COBOL==> MOVE I-AMOUNT1-0010-014 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0010_014.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0010-014 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ6);                                               //COBOL==> MOVE RG-EDIT-PATTERN-OBJ6 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ6.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ6.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0012_016);                                                      //COBOL==> MOVE I-AMOUNT1-0012-016 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0012_016);                                                     //COBOL==> MOVE I-AMOUNT1-0012-016 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0012_016.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0012-016 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ7);                                               //COBOL==> MOVE RG-EDIT-PATTERN-OBJ7 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ7.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ7.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0014_018);                                                      //COBOL==> MOVE I-AMOUNT1-0014-018 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0014_018);                                                     //COBOL==> MOVE I-AMOUNT1-0014-018 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0014_018.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0014-018 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ8);                                               //COBOL==> MOVE RG-EDIT-PATTERN-OBJ8 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ8.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ8.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0016_020);                                                      //COBOL==> MOVE I-AMOUNT1-0016-020 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0016_020);                                                     //COBOL==> MOVE I-AMOUNT1-0016-020 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0016_020.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0016-020 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ9);                                               //COBOL==> MOVE RG-EDIT-PATTERN-OBJ9 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ9.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ9.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0018_022);                                                      //COBOL==> MOVE I-AMOUNT1-0018-022 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0018_022);                                                     //COBOL==> MOVE I-AMOUNT1-0018-022 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0018_022.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0018-022 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ10);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ10 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ10.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ10.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0020_024);                                                      //COBOL==> MOVE I-AMOUNT1-0020-024 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0020_024);                                                     //COBOL==> MOVE I-AMOUNT1-0020-024 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0020_024.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0020-024 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ11);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ11 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ11.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ11.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0022_026);                                                      //COBOL==> MOVE I-AMOUNT1-0022-026 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0022_026);                                                     //COBOL==> MOVE I-AMOUNT1-0022-026 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0022_026.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0022-026 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ12);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ12 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ12.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ12.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0024_028);                                                      //COBOL==> MOVE I-AMOUNT1-0024-028 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0024_028);                                                     //COBOL==> MOVE I-AMOUNT1-0024-028 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0024_028.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0024-028 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ13);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ13 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_1_A_OBJ13.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-1-A-OBJ13.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_DTL_LINE_1);                                              //COBOL==> MOVE RG-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_DTL_LINE_1);                                              //COBOL==> MOVE RG-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.RG_DTL_LINE_1);                                                        //COBOL==> MOVE RG-DTL-LINE-1 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_RG_RPT_LINE("M_PRINT_RG_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-RG-RPT-LINE THRU PRINT-RG-RPT-LINE-EXIT.
            WS.RG_DTL_LINE_1.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO RG-DTL-LINE-1.
            WS.WS_RG_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-RG-DISABLE-SUPPRESS.
            WS.WS_RG_PAGE_DTL_LINES.SetValue(WS.WS_RG_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-RG-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_DTL_LINE_1") { M_PRINT_RG_DTL_LINE_1_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_DTL_LINE_1_EXIT
        /// </summary>
        private void M_PRINT_RG_DTL_LINE_1_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_RG_DTL_LINE_1_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_DTL_LINE_1_EXIT") { M_PRINT_RG_DTL_LINE_2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_DTL_LINE_2
        /// </summary>
        private void M_PRINT_RG_DTL_LINE_2(string returnMethod = "")
        {
            if (WS.RG_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF RG-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_RG_UPDT_PG_NBR_FLDS("M_RG_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM RG-UPDT-PG-NBR-FLDS THRU RG-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.RG_DTL_LINE_2);                                                   //COBOL==> MOVE RG-DTL-LINE-2 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_RG_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-RG-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_3_0003_007);                                 //COBOL==> MOVE I-SUB-HEADING-3-0003-007 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(5);                                                      //COBOL==> MOVE 5 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ14.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                      //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO RG-DTL-LINE-2-A-OBJ14.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0005_009);                                                        //COBOL==> MOVE I-COUNT-0005-009 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0005_009);                                                       //COBOL==> MOVE I-COUNT-0005-009 TO EP-INTEGER2.
            if (LS.I_COUNT_0005_009.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0005-009 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ15);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ15 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ15.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ15.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0007_011);                                                        //COBOL==> MOVE I-COUNT-0007-011 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0007_011);                                                       //COBOL==> MOVE I-COUNT-0007-011 TO EP-INTEGER2.
            if (LS.I_COUNT_0007_011.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0007-011 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ16);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ16 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ16.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ16.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0009_013);                                                        //COBOL==> MOVE I-COUNT-0009-013 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0009_013);                                                       //COBOL==> MOVE I-COUNT-0009-013 TO EP-INTEGER2.
            if (LS.I_COUNT_0009_013.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0009-013 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ17);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ17 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ17.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ17.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0011_015);                                                        //COBOL==> MOVE I-COUNT-0011-015 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0011_015);                                                       //COBOL==> MOVE I-COUNT-0011-015 TO EP-INTEGER2.
            if (LS.I_COUNT_0011_015.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0011-015 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ18);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ18 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ18.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ18.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0013_017);                                                        //COBOL==> MOVE I-COUNT-0013-017 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0013_017);                                                       //COBOL==> MOVE I-COUNT-0013-017 TO EP-INTEGER2.
            if (LS.I_COUNT_0013_017.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0013-017 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ19);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ19 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ19.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ19.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0015_019);                                                        //COBOL==> MOVE I-COUNT-0015-019 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0015_019);                                                       //COBOL==> MOVE I-COUNT-0015-019 TO EP-INTEGER2.
            if (LS.I_COUNT_0015_019.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0015-019 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ20);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ20 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ20.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ20.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0017_021);                                                        //COBOL==> MOVE I-COUNT-0017-021 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0017_021);                                                       //COBOL==> MOVE I-COUNT-0017-021 TO EP-INTEGER2.
            if (LS.I_COUNT_0017_021.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0017-021 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ21);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ21 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ21.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ21.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0019_023);                                                        //COBOL==> MOVE I-COUNT-0019-023 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0019_023);                                                       //COBOL==> MOVE I-COUNT-0019-023 TO EP-INTEGER2.
            if (LS.I_COUNT_0019_023.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0019-023 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ22);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ22 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ22.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ22.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0021_025);                                                        //COBOL==> MOVE I-COUNT-0021-025 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0021_025);                                                       //COBOL==> MOVE I-COUNT-0021-025 TO EP-INTEGER2.
            if (LS.I_COUNT_0021_025.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0021-025 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ23);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ23 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ23.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ23.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0023_027);                                                        //COBOL==> MOVE I-COUNT-0023-027 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0023_027);                                                       //COBOL==> MOVE I-COUNT-0023-027 TO EP-INTEGER2.
            if (LS.I_COUNT_0023_027.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0023-027 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ24);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ24 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ24.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ24.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0025_029);                                                        //COBOL==> MOVE I-COUNT-0025-029 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0025_029);                                                       //COBOL==> MOVE I-COUNT-0025-029 TO EP-INTEGER2.
            if (LS.I_COUNT_0025_029.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0025-029 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.RG_EDIT_PATTERN_OBJ25);                                              //COBOL==> MOVE RG-EDIT-PATTERN-OBJ25 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.RG_DTL_LINE_2_A_OBJ25.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO RG-DTL-LINE-2-A-OBJ25.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_DTL_LINE_2);                                              //COBOL==> MOVE RG-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_DTL_LINE_2);                                              //COBOL==> MOVE RG-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.RG_DTL_LINE_2);                                                        //COBOL==> MOVE RG-DTL-LINE-2 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_RG_RPT_LINE("M_PRINT_RG_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-RG-RPT-LINE THRU PRINT-RG-RPT-LINE-EXIT.
            WS.RG_DTL_LINE_2.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO RG-DTL-LINE-2.
            WS.WS_RG_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-RG-DISABLE-SUPPRESS.
            WS.WS_RG_PAGE_DTL_LINES.SetValue(WS.WS_RG_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-RG-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_DTL_LINE_2") { M_PRINT_RG_DTL_LINE_2_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_DTL_LINE_2_EXIT
        /// </summary>
        private void M_PRINT_RG_DTL_LINE_2_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_RG_DTL_LINE_2_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_DTL_LINE_2_EXIT") { M_PRINT_RG_DTL_LINE_3(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_DTL_LINE_3
        /// </summary>
        private void M_PRINT_RG_DTL_LINE_3(string returnMethod = "")
        {
            if (WS.RG_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF RG-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_RG_UPDT_PG_NBR_FLDS("M_RG_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM RG-UPDT-PG-NBR-FLDS THRU RG-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.RG_DTL_LINE_3);                                                   //COBOL==> MOVE RG-DTL-LINE-3 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_RG_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-RG-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_DTL_LINE_3);                                              //COBOL==> MOVE RG-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_DTL_LINE_3);                                              //COBOL==> MOVE RG-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.RG_DTL_LINE_3);                                                        //COBOL==> MOVE RG-DTL-LINE-3 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_RG_RPT_LINE("M_PRINT_RG_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-RG-RPT-LINE THRU PRINT-RG-RPT-LINE-EXIT.
            if (WS.RG_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                     //COBOL==> IF RG-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            WS.RG_DTL_LINE_3.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO RG-DTL-LINE-3.
            WS.WS_RG_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-RG-DISABLE-SUPPRESS.
            WS.WS_RG_PAGE_DTL_LINES.SetValue(WS.WS_RG_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-RG-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_DTL_LINE_3") { M_PRINT_RG_DTL_LINE_3_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_DTL_LINE_3_EXIT
        /// </summary>
        private void M_PRINT_RG_DTL_LINE_3_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_RG_DTL_LINE_3_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_DTL_LINE_3_EXIT") { M_PRINT_RG_PG_HDR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_PG_HDR
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  PRINT-RG-PAGE-HDR
        ///COMMENT:  DISABLE DUPLICATE FIELD SUPPRESSION FOR FIRST
        ///COMMENT:    LINE ON NEW PAGE
        ///COMMENT:  HANDLE BEFORE SPACING FOR PAGE HEADER LINES
        ///COMMENT:  FOR EACH PAGE HEADER SECTION LINE
        ///COMMENT:    - MOVE IMPORT ATTRIBUTES TO REPORT FIELDS
        ///COMMENT:    - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:    - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  HANDLE AFTER SPACING FOR PAGE HEADER LINES
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_RG_PG_HDR(string returnMethod = "")
        {
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((!(WS.WS_RG_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_RG_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-RG-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-RG-RPT-FTR-IS-PROCESSED )
                {
                    if ((WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            M_RG_UPDT_PG_NBR_FLDS("M_RG_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM RG-UPDT-PG-NBR-FLDS THRU RG-UPDT-PG-NBR-FLDS-EXIT.
            WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_RG_BODY_SUPPRESS_LINES.SetValue(WS.WS_RG_BODY_SECTION_LINES);                                 //COBOL==> MOVE WS-RG-BODY-SECTION-LINES TO WS-RG-BODY-SUPPRESS-LINES.
            WS.WS_SAVE_SECTION_PROCESSING_IND.SetValue(WS.WS_RG_SECTION_PROCESSING_IND);                        //COBOL==> MOVE WS-RG-SECTION-PROCESSING-IND TO WS-SAVE-SECTION-PROCESSING-IND.
            WS.WS_RG_SECTION_PROCESSING_IND.SetValue("P  ");                                                    //COBOL==> MOVE 'P  ' TO WS-RG-SECTION-PROCESSING-IND.
            if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_RG_SECTION_PROCESSING_IND.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO WS-RG-SECTION-PROCESSING-IND
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_0);                                              //COBOL==> MOVE RG-PAGE-HDR-0 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("Y");                                                       //COBOL==> MOVE 'Y' TO WS-RG-CUR-PRINTING-PAGE-HDR
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_0);                                                        //COBOL==> MOVE RG-PAGE-HDR-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_RG_UPDT_PG_NBR_FLDS("M_RG_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM RG-UPDT-PG-NBR-FLDS THRU RG-UPDT-PG-NBR-FLDS-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_DATE.SetValue(WS.WS_CURRENT_DATE_8);                                                         //COBOL==> MOVE WS-CURRENT-DATE-8 TO IEF-DATE.
            WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN.
            WS.DT_FORMATTED_DATE.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO DT-FORMATTED-DATE
            if (!(WS.IEF_DATE.IsEqualTo(00000000)))                                                             //COBOL==> IF IEF-DATE NOT = 00000000
            {
                WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN
                M_FORMAT_DATE("M_FORMAT_DATE_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-DATE THRU FORMAT-DATE-EXIT
            }                                                                                                   //COBOL==> END-IF
            WS.RG_PAGE_HDR_1_D_OBJ32.SetValue(WS.DT_FORMATTED_DATE);                                            //COBOL==> MOVE DT-FORMATTED-DATE TO RG-PAGE-HDR-1-D-OBJ32.
            if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_1);                                              //COBOL==> MOVE RG-PAGE-HDR-1 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_1);                                                        //COBOL==> MOVE RG-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_1);                                                        //COBOL==> MOVE RG-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_TIME.SetValue(WS.WS_CURRENT_TIME_6);                                                         //COBOL==> MOVE WS-CURRENT-TIME-6 TO IEF-TIME.
            WS.DT_EDIT_PATTERN.SetValue("23:59:59");                                                            //COBOL==> MOVE '23:59:59' TO DT-EDIT-PATTERN.
            M_FORMAT_TIME("M_FORMAT_TIME_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-TIME THRU FORMAT-TIME-EXIT.
            WS.RG_PAGE_HDR_2_T_OBJ35.SetValue(WS.DT_FORMATTED_TIME);                                            //COBOL==> MOVE DT-FORMATTED-TIME TO RG-PAGE-HDR-2-T-OBJ35.
            if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_2);                                              //COBOL==> MOVE RG-PAGE-HDR-2 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_2);                                                        //COBOL==> MOVE RG-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_2);                                                        //COBOL==> MOVE RG-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_3);                                              //COBOL==> MOVE RG-PAGE-HDR-3 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_3);                                                        //COBOL==> MOVE RG-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_3);                                                        //COBOL==> MOVE RG-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_4);                                              //COBOL==> MOVE RG-PAGE-HDR-4 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_4);                                                        //COBOL==> MOVE RG-PAGE-HDR-4 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_4);                                                        //COBOL==> MOVE RG-PAGE-HDR-4 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WS_RG_CNTL_FTR.Value))                                                                    //COBOL==> IF NOT WS-RG-CNTL-FTR
            {
                WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_COLLECTION_OFFICER_0001_001);                            //COBOL==> MOVE I-COLLECTION-OFFICER-0001-001 TO WS-UNJUSTIFIED-TEXT-FIELD
                WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH
                WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD
                M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT
                WS.RG_PAGE_HDR_5_A_OBJ39.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                      //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO RG-PAGE-HDR-5-A-OBJ39
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(WS.P_COLLECTION_OFFICER_0001_001);                            //COBOL==> MOVE P-COLLECTION-OFFICER-0001-001 TO WS-UNJUSTIFIED-TEXT-FIELD
                WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH
                WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD
                M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT
                WS.RG_PAGE_HDR_5_A_OBJ39.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                      //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO RG-PAGE-HDR-5-A-OBJ39
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_5);                                              //COBOL==> MOVE RG-PAGE-HDR-5 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_5);                                                        //COBOL==> MOVE RG-PAGE-HDR-5 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_5);                                                        //COBOL==> MOVE RG-PAGE-HDR-5 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_6);                                              //COBOL==> MOVE RG-PAGE-HDR-6 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_6);                                                        //COBOL==> MOVE RG-PAGE-HDR-6 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_6);                                                        //COBOL==> MOVE RG-PAGE-HDR-6 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_7);                                              //COBOL==> MOVE RG-PAGE-HDR-7 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_7);                                                        //COBOL==> MOVE RG-PAGE-HDR-7 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_7);                                                        //COBOL==> MOVE RG-PAGE-HDR-7 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_8);                                              //COBOL==> MOVE RG-PAGE-HDR-8 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_8);                                                        //COBOL==> MOVE RG-PAGE-HDR-8 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_8);                                                        //COBOL==> MOVE RG-PAGE-HDR-8 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_RG_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-RG-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_9);                                              //COBOL==> MOVE RG-PAGE-HDR-9 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_9);                                                        //COBOL==> MOVE RG-PAGE-HDR-9 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.RG_PAGE_HDR_9);                                                        //COBOL==> MOVE RG-PAGE-HDR-9 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_RG_LINEONNEWPG("M_PRINT_A_RG_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-RG-LINEONNEWPG THRU PRINT-A-RG-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_RG_LINE("M_PRINT_A_RG_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-RG-LINE THRU PRINT-A-RG-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_RG_SECTION_PROCESSING_IND.SetValue(WS.WS_SAVE_SECTION_PROCESSING_IND);                        //COBOL==> MOVE WS-SAVE-SECTION-PROCESSING-IND TO WS-RG-SECTION-PROCESSING-IND.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_RG_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-RG-CUR-PRINTING-PAGE-HDR.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_PG_HDR") { M_PRINT_RG_PG_HDR_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_PG_HDR_EXIT
        /// </summary>
        private void M_PRINT_RG_PG_HDR_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_RG_PG_HDR_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_PG_HDR_EXIT") { M_PRINT_RG_RPT_FTR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_RPT_FTR
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE BEFORE SPACING FOR RG REPORT FOOTER
        ///COMMENT:  FOR EACH RG REPORT FOOTER SECTION LINE
        ///COMMENT:    - MOVE IMPORT ATTRIBUTES TO REPORT FIELDS
        ///COMMENT:    - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:    - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  HANDLE AFTER SPACING FOR REPORT FOOTER
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_RG_RPT_FTR(string returnMethod = "")
        {
            if (WS.RG_RPT_FTR_BEFORE_PG_BRK.IsEqualTo("Y"))                                                     //COBOL==> IF RG-RPT-FTR-BEFORE-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_PG_NUMBER_SAVE.SetValue(WS.WS_PG_NUMBER);                                                     //COBOL==> MOVE WS-PG-NUMBER TO WS-PG-NUMBER-SAVE
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            M_RG_UPDT_RPT_PG_NBR_FLDS("M_RG_UPDT_RPT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM RG-UPDT-RPT-PG-NBR-FLDS THRU RG-UPDT-RPT-PG-NBR-FLDS-EXIT.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.RG_RPT_FTR_SUPPRSS_BLANK);                                     //COBOL==> MOVE RG-RPT-FTR-SUPPRSS-BLANK TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_SAVE_PRINT_ATBOTTM.SetValue(WS.RG_RPT_FTR_PRINT_ATBOTTM);                                     //COBOL==> MOVE RG-RPT-FTR-PRINT-ATBOTTM TO WS-SAVE-PRINT-ATBOTTM.
            WS.WS_RG_SECTION_PROCESSING_IND.SetValue("F  ");                                                    //COBOL==> MOVE 'F  ' TO WS-RG-SECTION-PROCESSING-IND.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_RG_RPT_SECTION_PAGING("M_RG_RPT_SECTION_PAGING_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM RG-RPT-SECTION-PAGING THRU RG-RPT-SECTION-PAGING-EXIT.
            if (WS.WS_RG_PG_HDR_LINE_QT.IsGreaterThan(0))                                                       //COBOL==> IF WS-RG-PG-HDR-LINE-QT > 0
            {
                if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                {
                    WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER_SAVE);                                                     //COBOL==> MOVE WS-PG-NUMBER-SAVE TO WS-PG-NUMBER
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.RG_RPT_FTR_0);                                                         //COBOL==> MOVE RG-RPT-FTR-0 TO WS-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_RPT_FTR_0);                                               //COBOL==> MOVE RG-RPT-FTR-0 TO WS-TEMP-SAVE-PRINT-LINE.
            M_PRINT_RG_RPT_LINE("M_PRINT_RG_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-RG-RPT-LINE THRU PRINT-RG-RPT-LINE-EXIT.
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_RG_LINE_SPACING);                                           //COBOL==> MOVE WS-RG-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_RG_RPT_SECTION_PAGING("M_RG_RPT_SECTION_PAGING_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM RG-RPT-SECTION-PAGING THRU RG-RPT-SECTION-PAGING-EXIT.
            if (WS.WS_RG_PG_HDR_LINE_QT.IsGreaterThan(0))                                                       //COBOL==> IF WS-RG-PG-HDR-LINE-QT > 0
            {
                if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                {
                    WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER_SAVE);                                                     //COBOL==> MOVE WS-PG-NUMBER-SAVE TO WS-PG-NUMBER
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.RG_RPT_FTR_1);                                                         //COBOL==> MOVE RG-RPT-FTR-1 TO WS-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.RG_RPT_FTR_1);                                               //COBOL==> MOVE RG-RPT-FTR-1 TO WS-TEMP-SAVE-PRINT-LINE.
            M_PRINT_RG_RPT_LINE("M_PRINT_RG_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-RG-RPT-LINE THRU PRINT-RG-RPT-LINE-EXIT.
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_RG_SECTION_PROCESSING_IND.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO WS-RG-SECTION-PROCESSING-IND.
            if ((WS.WS_RG_PAGE_SUPPRESS_AFTER.IsEqualTo("N"))
             && (WS.RG_RPT_FTR_AFTER_PG_BRK.IsEqualTo("Y")))  //COBOL==> IF WS-RG-PAGE-SUPPRESS-AFTER = 'N' AND RG-RPT-FTR-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (WS.RG_RPT_FTR_RESETPG_AFTER.IsEqualTo("Y"))                                                     //COBOL==> IF RG-RPT-FTR-RESETPG-AFTER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("Y");                                                                //COBOL==> MOVE 'Y' TO WS-RESET-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_RPT_FTR") { M_PRINT_RG_RPT_FTR_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_RG_RPT_FTR_EXIT
        /// </summary>
        private void M_PRINT_RG_RPT_FTR_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_RG_RPT_FTR_EXIT") { return; }                                          //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_RG_RPT_FTR_EXIT") { M_RG_RPT_SECTION_PAGING(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_RG_RPT_SECTION_PAGING
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE PAGING FOR RG REPORT SECTIONS
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_RG_RPT_SECTION_PAGING(string returnMethod = "")
        {
            WS.WS_TEMP_LINE_QT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-TEMP-LINE-QT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
            if ((WS.WS_TEMP_LINE_QT.IsGreaterThan(WS.WS_PG_LENGTH))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-TEMP-LINE-QT > WS-PG-LENGTH OR WS-PG-BRK-FLAG = 'Y'
            {
                if (WS.WS_RESET_PG_NUMBER.IsEqualTo("N"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'N'
                {
                    WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                }                                                                                                   //COBOL==> END-IF
                M_RG_UPDT_RPT_PG_NBR_FLDS("M_RG_UPDT_RPT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM RG-UPDT-RPT-PG-NBR-FLDS THRU RG-UPDT-RPT-PG-NBR-FLDS-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_RG_UPDT_RPT_PG_NBR_FLDS("M_RG_UPDT_RPT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM RG-UPDT-RPT-PG-NBR-FLDS THRU RG-UPDT-RPT-PG-NBR-FLDS-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_RG_RPT_SECTION_PAGING") { M_RG_RPT_SECTION_PAGING_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_RG_RPT_SECTION_PAGING_EXIT
        /// </summary>
        private void M_RG_RPT_SECTION_PAGING_EXIT(string returnMethod = "")
        {
            if (returnMethod != "" && returnMethod != "M_RG_RPT_SECTION_PAGING_EXIT") { M_RG_UPDT_RPT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_RG_UPDT_RPT_PG_NBR_FLDS
        /// </summary>
        private void M_RG_UPDT_RPT_PG_NBR_FLDS(string returnMethod = "")
        {
            //COMMENT:     STATEMENT BELOW EXISTS TO ENSURE PARAGRAPH NEVER EMPTY
            WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER);                                                          //COBOL==> MOVE WS-PG-NUMBER TO WS-PG-NUMBER.
            if (returnMethod != "" && returnMethod != "M_RG_UPDT_RPT_PG_NBR_FLDS") { M_RG_UPDT_RPT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_RG_UPDT_RPT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_RG_UPDT_RPT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_RG_UPDT_RPT_PG_NBR_FLDS_EXIT") { return; }                                   //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_RG_UPDT_RPT_PG_NBR_FLDS_EXIT") { M_ST_MAINLINE_DTL(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ST_MAINLINE_DTL
        /// </summary>
        private void M_ST_MAINLINE_DTL(string returnMethod = "")
        {
            if (((WS.WS_ST_DTL_RPT_REQUESTED.Value)
             && (!(LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("S"))))
             || ((WS.WS_ST_SUMMARY_RPT_REQUESTED.Value)
             && (LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("D"))))  //COBOL==> IF ( WS-ST-DTL-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD NOT = 'S' ) OR ( WS-ST-SUMMARY-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD = 'D' )
            {
                WS.WS_ST_SECTION_PROCESSING_IND.SetValue("B  ");                                                    //COBOL==> MOVE 'B  ' TO WS-ST-SECTION-PROCESSING-IND
                WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.ST_DTL_LINE_SUPPRSS_BLANK);                                    //COBOL==> MOVE ST-DTL-LINE-SUPPRSS-BLANK TO WS-SUPPRSS-BLANK-LINE
                M_PRINT_ST_DTL_LINE_0("M_PRINT_ST_DTL_LINE_0_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-ST-DTL-LINE-0 THRU PRINT-ST-DTL-LINE-0-EXIT
                M_PRINT_ST_DTL_LINE_1("M_PRINT_ST_DTL_LINE_1_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-ST-DTL-LINE-1 THRU PRINT-ST-DTL-LINE-1-EXIT
                M_PRINT_ST_DTL_LINE_2("M_PRINT_ST_DTL_LINE_2_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-ST-DTL-LINE-2 THRU PRINT-ST-DTL-LINE-2-EXIT
                M_PRINT_ST_DTL_LINE_3("M_PRINT_ST_DTL_LINE_3_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-ST-DTL-LINE-3 THRU PRINT-ST-DTL-LINE-3-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_ST_SECTION_PROCESSING_IND.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO WS-ST-SECTION-PROCESSING-IND.
            if (WS.ST_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                     //COBOL==> IF ST-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_ST_MAINLINE_DTL") { M_ST_MAINLINE_DTL_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ST_MAINLINE_DTL_EXIT
        /// </summary>
        private void M_ST_MAINLINE_DTL_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_ST_MAINLINE_DTL_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_ST_MAINLINE_DTL_EXIT") { M_PRINT_ST_RPT_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_RPT_LINE
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  THIS SECTION PRINTS ALL ST REPORT LINES.
        ///COMMENT:  IT IS CALLED FOR EACH REPORT LINE. IT CONTAINS:
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE PRINTING A LINE
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE DETAIL LINE PAGING
        ///COMMENT:  - ALSO CALL PRINT-A-ST-LINE
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_ST_RPT_LINE(string returnMethod = "")
        {
            M_CHECK_FOR_ST_NEW_PAGE("M_CHECK_FOR_ST_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM CHECK-FOR-ST-NEW-PAGE THRU CHECK-FOR-ST-NEW-PAGE-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                WS.WS_TEMP_PRINT_LINE.SetValue(WS.WS_PRINT_LINE);                                                   //COBOL==> MOVE WS-PRINT-LINE TO WS-TEMP-PRINT-LINE
                WS.WS_TEMP_PRINT_LINE_SPACING.SetValue(WS.WS_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-PRINT-LINE-SPACING TO WS-TEMP-PRINT-LINE-SPACING
                if (WS.ST_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF ST-PAGE-HDR-PRINT-FLAG = 'Y'
                {
                    WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                    if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                    {
                        if (WS.ST_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF ST-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_ST_PG_HDR("M_PRINT_ST_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-ST-PG-HDR THRU PRINT-ST-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
                    WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                         //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-TEMP-SAVE-PRINT-LINE
                    WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_TEMP_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE-SPACING TO WS-PRINT-LINE-SPACING
                    if (WS.ST_RPT_FTR_PRINT_ATBOTTM.IsEqualTo("Y"))                                                     //COBOL==> IF ST-RPT-FTR-PRINT-ATBOTTM = 'Y'
                    {
                        if (WS.WS_ST_RPT_FTR_IS_PROCESSED.Value)                                                            //COBOL==> IF WS-ST-RPT-FTR-IS-PROCESSED
                        {
                            WS.WS_CUR_SECTION_LINE_QT.SetValue(WS.WS_ST_RPT_FTR_LINE_QT);                                       //COBOL==> MOVE WS-ST-RPT-FTR-LINE-QT TO WS-CUR-SECTION-LINE-QT
                        }                                                                                                   //COBOL==> END-IF
                        M_ST_CALC_4_PRINT_BOTTM("M_ST_CALC_4_PRINT_BOTTM_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM ST-CALC-4-PRINT-BOTTM THRU ST-CALC-4-PRINT-BOTTM-EXIT
                    }                                                                                                   //COBOL==> END-IF
                    M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.ST_RPT_FTR_PRINT_ATBOTTM.IsEqualTo("Y"))                                                     //COBOL==> IF ST-RPT-FTR-PRINT-ATBOTTM = 'Y'
                    {
                        if (WS.WS_ST_RPT_FTR_IS_PROCESSED.Value)                                                            //COBOL==> IF WS-ST-RPT-FTR-IS-PROCESSED
                        {
                            WS.WS_CUR_SECTION_LINE_QT.SetValue(WS.WS_ST_RPT_FTR_LINE_QT);                                       //COBOL==> MOVE WS-ST-RPT-FTR-LINE-QT TO WS-CUR-SECTION-LINE-QT
                        }                                                                                                   //COBOL==> END-IF
                        M_ST_CALC_4_PRINT_BOTTM("M_ST_CALC_4_PRINT_BOTTM_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM ST-CALC-4-PRINT-BOTTM THRU ST-CALC-4-PRINT-BOTTM-EXIT
                    }                                                                                                   //COBOL==> END-IF
                    M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
                }                                                                                                   //COBOL==> END-IF
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((WS.WS_ST_PRINT_DUPLICATES.Value)
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))          //COBOL==> IF WS-ST-PRINT-DUPLICATES AND WS-NOT-IN-CONTROL-BRK
                {
                    WS.WS_ST_BODY_SUPPRESS_LINES.SetValue(WS.WS_ST_BODY_SUPPRESS_LINES.AsInt() - 1);                    //COBOL==> SUBTRACT 1 FROM WS-ST-BODY-SUPPRESS-LINES
                    if (WS.WS_ST_BODY_SUPPRESS_LINES.IsEqualTo(0))                                                      //COBOL==> IF WS-ST-BODY-SUPPRESS-LINES = 0
                    {
                        WS.WS_ST_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-ST-DISABLE-SUPPRESS
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.ST_RPT_FTR_PRINT_ATBOTTM.IsEqualTo("Y"))                                                     //COBOL==> IF ST-RPT-FTR-PRINT-ATBOTTM = 'Y'
                {
                    if (WS.WS_ST_RPT_FTR_IS_PROCESSED.Value)                                                            //COBOL==> IF WS-ST-RPT-FTR-IS-PROCESSED
                    {
                        WS.WS_CUR_SECTION_LINE_QT.SetValue(WS.WS_ST_RPT_FTR_LINE_QT);                                       //COBOL==> MOVE WS-ST-RPT-FTR-LINE-QT TO WS-CUR-SECTION-LINE-QT
                        M_ST_CALC_4_PRINT_BOTTM("M_ST_CALC_4_PRINT_BOTTM_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM ST-CALC-4-PRINT-BOTTM THRU ST-CALC-4-PRINT-BOTTM-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    if (WS.ST_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF ST-PAGE-HDR-PRINT-FLAG = 'Y'
                    {
                        WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                        if (WS.ST_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF ST-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_ST_PG_HDR("M_PRINT_ST_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-ST-PG-HDR THRU PRINT-ST-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                        WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                        M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_RPT_LINE") { M_PRINT_ST_RPT_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_RPT_LINE_EXIT
        /// </summary>
        private void M_PRINT_ST_RPT_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_ST_RPT_LINE_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_RPT_LINE_EXIT") { M_PRINT_A_ST_LINEONNEWPG(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_ST_LINEONNEWPG
        /// </summary>
        private void M_PRINT_A_ST_LINEONNEWPG(string returnMethod = "")
        {
            if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
            {
                if (((WS.WS_ST_CURRENTLY_WRAPPING.IsEqualTo("N"))
             && (WS.WS_ST_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (WS.WS_CONTROL_BRK_FLAG.IsEqualTo("N")))  //COBOL==> IF WS-ST-CURRENTLY-WRAPPING = 'N' AND WS-ST-CUR-PRINTING-PAGE-HDR = 'N' AND WS-CONTROL-BRK-FLAG = 'N'
                {
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
                }                                                                                                   //COBOL==> END-IF
                WS.WS_ST_PAGE_DTL_LINES.SetValue(4);                                                                //COBOL==> MOVE 4 TO WS-ST-PAGE-DTL-LINES
                if (((WS.WS_ST_BODY_IS_PROCESSED.Value)
             || (WS.WS_ST_RPT_HDR_IS_PROCESSED.Value))
             || (WS.WS_ST_RPT_FTR_IS_PROCESSED.Value))  //COBOL==> IF WS-ST-BODY-IS-PROCESSED OR WS-ST-RPT-HDR-IS-PROCESSED OR WS-ST-RPT-FTR-IS-PROCESSED
                {
                    if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                    {
                        WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                        WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((!(WS.WS_ST_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_ST_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-ST-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-ST-RPT-FTR-IS-PROCESSED )
                        {
                            WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    M_ST_UPDT_PG_NBR_FLDS("M_ST_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM ST-UPDT-PG-NBR-FLDS THRU ST-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(1))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 1
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_SPACE_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-SPACE-RECORD AFTER ADVANCING PAGE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                    WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_ST_LINEONNEWPG") { M_PRINT_A_ST_LINEONNEWPG_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_ST_LINEONNEWPG_EXIT
        /// </summary>
        private void M_PRINT_A_ST_LINEONNEWPG_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_ST_LINEONNEWPG_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_ST_LINEONNEWPG_EXIT") { M_PRINT_A_ST_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_ST_LINE
        /// </summary>
        private void M_PRINT_A_ST_LINE(string returnMethod = "")
        {
            if (((((((WS.WS_ST_PAGE_DTL_LINES.IsGreaterThan(0))
             && (WS.WS_PREV_SUBRPT_CODE.IsEqualTo(WS.WS_CUR_SUBRPT_CODE)))
             && (!(WS.WS_ST_CURRENTLY_WRAPPING.IsEqualTo("Y"))))
             && (WS.WS_ST_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (!(WS.WS_ST_RPT_HDR_IS_PROCESSED.Value)))
             && (!(WS.WS_ST_PG_HDR_IS_PROCESSED.Value)))
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))  //COBOL==> IF WS-ST-PAGE-DTL-LINES > 0 AND WS-PREV-SUBRPT-CODE = WS-CUR-SUBRPT-CODE AND WS-ST-CURRENTLY-WRAPPING NOT = 'Y' AND WS-ST-CUR-PRINTING-PAGE-HDR = 'N' AND NOT WS-ST-RPT-HDR-IS-PROCESSED AND NOT WS-ST-PG-HDR-IS-PROCESSED AND WS-NOT-IN-CONTROL-BRK
            {
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(0))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 0
            {
                if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                {
                    if (WS.WS_VERY_FIRST_WRITE.IsEqualTo("Y"))                                                          //COBOL==> IF WS-VERY-FIRST-WRITE = 'Y'
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                        WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.LINEBREAK, 0, WS.WS_PRINT_LINE_SPACING.AsInt());  //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING WS-PRINT-LINE-SPACING LINES
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_LINE_COUNT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-LINE-COUNT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_ST_LINE") { M_PRINT_A_ST_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_ST_LINE_EXIT
        /// </summary>
        private void M_PRINT_A_ST_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_ST_LINE_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_ST_LINE_EXIT") { M_CHECK_FOR_ST_NEW_PAGE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_ST_NEW_PAGE
        /// </summary>
        private void M_CHECK_FOR_ST_NEW_PAGE(string returnMethod = "")
        {
            WS.WS_TEMP_LINE_QT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-TEMP-LINE-QT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
            if (WS.WS_TEMP_LINE_QT.IsGreaterThan(WS.WS_PG_LENGTH))                                              //COBOL==> IF WS-TEMP-LINE-QT > WS-PG-LENGTH
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_ST_NEW_PAGE") { M_CHECK_FOR_ST_NEW_PAGE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_ST_NEW_PAGE_EXIT
        /// </summary>
        private void M_CHECK_FOR_ST_NEW_PAGE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_CHECK_FOR_ST_NEW_PAGE_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_ST_NEW_PAGE_EXIT") { M_ST_CALC_4_PRINT_BOTTM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ST_CALC_4_PRINT_BOTTM
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  FOR THE ST REPORT
        ///COMMENT:  THIS PARAGRAPH CALCULATES THE NUMBER OF LINES
        ///COMMENT:  TO ADVANCE FOR A SECTION WHEN THE SECTION IS
        ///COMMENT:  SPECIFIED TO HAVE PRINT AT BOTTOM
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_ST_CALC_4_PRINT_BOTTM(string returnMethod = "")
        {
            if (WS.WS_SAVE_PRINT_ATBOTTM.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SAVE-PRINT-ATBOTTM = 'Y'
            {
                WS.WS_SAVE_PRINT_ATBOTTM.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SAVE-PRINT-ATBOTTM
                WS.WS_TEMP_LINE_QT.SetValueWithZeroes();                                                            //COBOL==> MOVE 0 TO WS-TEMP-LINE-QT
                if (WS.WS_PG_LENGTH.IsLessThan(((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_TEMP_LINE_QT.AsDecimal()) + WS.WS_CUR_SECTION_LINE_QT.AsDecimal())))  //COBOL==> IF WS-PG-LENGTH < ( WS-LINE-COUNT + WS-TEMP-LINE-QT + WS-CUR-SECTION-LINE-QT )
                {
                    if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue((((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_COUNT.AsDecimal()) - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-COUNT - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_ST_CALC_4_PRINT_BOTTM") { M_ST_CALC_4_PRINT_BOTTM_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ST_CALC_4_PRINT_BOTTM_EXIT
        /// </summary>
        private void M_ST_CALC_4_PRINT_BOTTM_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_ST_CALC_4_PRINT_BOTTM_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_ST_CALC_4_PRINT_BOTTM_EXIT") { M_ST_UPDT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ST_UPDT_PG_NBR_FLDS
        /// </summary>
        private void M_ST_UPDT_PG_NBR_FLDS(string returnMethod = "")
        {
            WS.ST_PAGE_HDR_0_P_OBJ19.SetValue(WS.WS_PG_NUMBER);                                                 //COBOL==> MOVE WS-PG-NUMBER TO ST-PAGE-HDR-0-P-OBJ19.
            if (returnMethod != "" && returnMethod != "M_ST_UPDT_PG_NBR_FLDS") { M_ST_UPDT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ST_UPDT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_ST_UPDT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_ST_UPDT_PG_NBR_FLDS_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_ST_UPDT_PG_NBR_FLDS_EXIT") { M_PRINT_ST_DTL_LINE_0(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_DTL_LINE_0
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE BEFORE SPACING FOR ST REPORT BODY (DETAIL LINES)
        ///COMMENT:  FOR EACH DETAIL LINE...
        ///COMMENT:  - POPULATE THE OUTPUT FIELDS FROM THE IMPORTED ATTRIBUTES
        ///COMMENT:  - REPLACE ATTRIBUTE VALUES WITH SPACES IF DUPLICATE
        ///COMMENT:    SUPPRESSION ON AND NOT FIRST LINE OF PAGE OR
        ///COMMENT:    FIRST LINE AFTER CONTROL BREAK
        ///COMMENT:  - MOVE DETAIL LINE TO THE PRINT LINE
        ///COMMENT:  - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:  - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  - REPEAT AS NECESSARY FOR TEXT WRAPPING ATTRIBUTES
        ///COMMENT:  HANDLE AFTER SPACING FOR BODY (DETAIL LINES)
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_ST_DTL_LINE_0(string returnMethod = "")
        {
            if (WS.ST_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF ST-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_ST_UPDT_PG_NBR_FLDS("M_ST_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM ST-UPDT-PG-NBR-FLDS THRU ST-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.ST_DTL_LINE_0);                                                   //COBOL==> MOVE ST-DTL-LINE-0 TO SAVE-FOR-WRAP-TEXT.
            if (WS.ST_DTL_LINE_KEEP_TOGETHER.IsEqualTo("Y"))                                                    //COBOL==> IF ST-DTL-LINE-KEEP-TOGETHER = 'Y'
            {
                if (((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_ST_DTL_LINE_QT.AsDecimal()) + WS.WS_ST_PG_FTR_LINE_QT.AsDecimal()).IsGreaterThan(WS.WS_PG_LENGTH))  //COBOL==> IF ( WS-LINE-COUNT + WS-ST-DTL-LINE-QT + WS-ST-PG-FTR-LINE-QT ) > WS-PG-LENGTH
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.ST_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("Y"))                                                    //COBOL==> IF ST-DTL-LINE-BEFORE-PG-BRK = 'Y'
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_ST_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-ST-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_1_0003_005);                                 //COBOL==> MOVE I-SUB-HEADING-1-0003-005 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.ST_DTL_LINE_0_A_OBJ1.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                       //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO ST-DTL-LINE-0-A-OBJ1.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_DTL_LINE_0);                                              //COBOL==> MOVE ST-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_DTL_LINE_0);                                              //COBOL==> MOVE ST-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.ST_DTL_LINE_0);                                                        //COBOL==> MOVE ST-DTL-LINE-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_ST_RPT_LINE("M_PRINT_ST_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-ST-RPT-LINE THRU PRINT-ST-RPT-LINE-EXIT.
            WS.ST_DTL_LINE_0.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO ST-DTL-LINE-0.
            WS.WS_ST_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-ST-DISABLE-SUPPRESS.
            WS.WS_ST_PAGE_DTL_LINES.SetValue(WS.WS_ST_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-ST-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_DTL_LINE_0") { M_PRINT_ST_DTL_LINE_0_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_DTL_LINE_0_EXIT
        /// </summary>
        private void M_PRINT_ST_DTL_LINE_0_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_ST_DTL_LINE_0_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_DTL_LINE_0_EXIT") { M_PRINT_ST_DTL_LINE_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_DTL_LINE_1
        /// </summary>
        private void M_PRINT_ST_DTL_LINE_1(string returnMethod = "")
        {
            if (WS.ST_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF ST-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_ST_UPDT_PG_NBR_FLDS("M_ST_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM ST-UPDT-PG-NBR-FLDS THRU ST-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.ST_DTL_LINE_1);                                                   //COBOL==> MOVE ST-DTL-LINE-1 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_ST_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-ST-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_2_0003_006);                                 //COBOL==> MOVE I-SUB-HEADING-2-0003-006 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(14);                                                     //COBOL==> MOVE 14 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ2.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                       //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO ST-DTL-LINE-1-A-OBJ2.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0004_008);                                                      //COBOL==> MOVE I-AMOUNT1-0004-008 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0004_008);                                                     //COBOL==> MOVE I-AMOUNT1-0004-008 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0004_008.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0004-008 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ31);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ31 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ31.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ31.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0006_010);                                                      //COBOL==> MOVE I-AMOUNT1-0006-010 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0006_010);                                                     //COBOL==> MOVE I-AMOUNT1-0006-010 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0006_010.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0006-010 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ32);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ32 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ32.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ32.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0008_012);                                                      //COBOL==> MOVE I-AMOUNT1-0008-012 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0008_012);                                                     //COBOL==> MOVE I-AMOUNT1-0008-012 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0008_012.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0008-012 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ33);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ33 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ33.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ33.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0010_014);                                                      //COBOL==> MOVE I-AMOUNT1-0010-014 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0010_014);                                                     //COBOL==> MOVE I-AMOUNT1-0010-014 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0010_014.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0010-014 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ34);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ34 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ34.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ34.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0012_016);                                                      //COBOL==> MOVE I-AMOUNT1-0012-016 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0012_016);                                                     //COBOL==> MOVE I-AMOUNT1-0012-016 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0012_016.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0012-016 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ35);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ35 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ35.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ35.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0014_018);                                                      //COBOL==> MOVE I-AMOUNT1-0014-018 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0014_018);                                                     //COBOL==> MOVE I-AMOUNT1-0014-018 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0014_018.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0014-018 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ36);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ36 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ36.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ36.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0016_020);                                                      //COBOL==> MOVE I-AMOUNT1-0016-020 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0016_020);                                                     //COBOL==> MOVE I-AMOUNT1-0016-020 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0016_020.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0016-020 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ37);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ37 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ37.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ37.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0018_022);                                                      //COBOL==> MOVE I-AMOUNT1-0018-022 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0018_022);                                                     //COBOL==> MOVE I-AMOUNT1-0018-022 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0018_022.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0018-022 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ38);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ38 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ38.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ38.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0020_024);                                                      //COBOL==> MOVE I-AMOUNT1-0020-024 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0020_024);                                                     //COBOL==> MOVE I-AMOUNT1-0020-024 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0020_024.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0020-024 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ39);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ39 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ39.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ39.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0022_026);                                                      //COBOL==> MOVE I-AMOUNT1-0022-026 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0022_026);                                                     //COBOL==> MOVE I-AMOUNT1-0022-026 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0022_026.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0022-026 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ40);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ40 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ40.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ40.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0024_028);                                                      //COBOL==> MOVE I-AMOUNT1-0024-028 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0024_028);                                                     //COBOL==> MOVE I-AMOUNT1-0024-028 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0024_028.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0024-028 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ41);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ41 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_1_A_OBJ41.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-1-A-OBJ41.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_DTL_LINE_1);                                              //COBOL==> MOVE ST-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_DTL_LINE_1);                                              //COBOL==> MOVE ST-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.ST_DTL_LINE_1);                                                        //COBOL==> MOVE ST-DTL-LINE-1 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_ST_RPT_LINE("M_PRINT_ST_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-ST-RPT-LINE THRU PRINT-ST-RPT-LINE-EXIT.
            WS.ST_DTL_LINE_1.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO ST-DTL-LINE-1.
            WS.WS_ST_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-ST-DISABLE-SUPPRESS.
            WS.WS_ST_PAGE_DTL_LINES.SetValue(WS.WS_ST_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-ST-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_DTL_LINE_1") { M_PRINT_ST_DTL_LINE_1_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_DTL_LINE_1_EXIT
        /// </summary>
        private void M_PRINT_ST_DTL_LINE_1_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_ST_DTL_LINE_1_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_DTL_LINE_1_EXIT") { M_PRINT_ST_DTL_LINE_2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_DTL_LINE_2
        /// </summary>
        private void M_PRINT_ST_DTL_LINE_2(string returnMethod = "")
        {
            if (WS.ST_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF ST-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_ST_UPDT_PG_NBR_FLDS("M_ST_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM ST-UPDT-PG-NBR-FLDS THRU ST-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.ST_DTL_LINE_2);                                                   //COBOL==> MOVE ST-DTL-LINE-2 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_ST_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-ST-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_3_0003_007);                                 //COBOL==> MOVE I-SUB-HEADING-3-0003-007 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(5);                                                      //COBOL==> MOVE 5 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ3.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                       //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO ST-DTL-LINE-2-A-OBJ3.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0005_009);                                                        //COBOL==> MOVE I-COUNT-0005-009 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0005_009);                                                       //COBOL==> MOVE I-COUNT-0005-009 TO EP-INTEGER2.
            if (LS.I_COUNT_0005_009.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0005-009 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ4);                                               //COBOL==> MOVE ST-EDIT-PATTERN-OBJ4 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ4.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ4.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0007_011);                                                        //COBOL==> MOVE I-COUNT-0007-011 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0007_011);                                                       //COBOL==> MOVE I-COUNT-0007-011 TO EP-INTEGER2.
            if (LS.I_COUNT_0007_011.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0007-011 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ5);                                               //COBOL==> MOVE ST-EDIT-PATTERN-OBJ5 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ5.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ5.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0009_013);                                                        //COBOL==> MOVE I-COUNT-0009-013 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0009_013);                                                       //COBOL==> MOVE I-COUNT-0009-013 TO EP-INTEGER2.
            if (LS.I_COUNT_0009_013.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0009-013 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ6);                                               //COBOL==> MOVE ST-EDIT-PATTERN-OBJ6 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ6.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ6.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0011_015);                                                        //COBOL==> MOVE I-COUNT-0011-015 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0011_015);                                                       //COBOL==> MOVE I-COUNT-0011-015 TO EP-INTEGER2.
            if (LS.I_COUNT_0011_015.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0011-015 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ7);                                               //COBOL==> MOVE ST-EDIT-PATTERN-OBJ7 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ7.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ7.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0013_017);                                                        //COBOL==> MOVE I-COUNT-0013-017 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0013_017);                                                       //COBOL==> MOVE I-COUNT-0013-017 TO EP-INTEGER2.
            if (LS.I_COUNT_0013_017.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0013-017 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ8);                                               //COBOL==> MOVE ST-EDIT-PATTERN-OBJ8 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ8.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ8.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0015_019);                                                        //COBOL==> MOVE I-COUNT-0015-019 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0015_019);                                                       //COBOL==> MOVE I-COUNT-0015-019 TO EP-INTEGER2.
            if (LS.I_COUNT_0015_019.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0015-019 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ9);                                               //COBOL==> MOVE ST-EDIT-PATTERN-OBJ9 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ9.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ9.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0017_021);                                                        //COBOL==> MOVE I-COUNT-0017-021 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0017_021);                                                       //COBOL==> MOVE I-COUNT-0017-021 TO EP-INTEGER2.
            if (LS.I_COUNT_0017_021.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0017-021 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ10);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ10 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ10.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ10.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0019_023);                                                        //COBOL==> MOVE I-COUNT-0019-023 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0019_023);                                                       //COBOL==> MOVE I-COUNT-0019-023 TO EP-INTEGER2.
            if (LS.I_COUNT_0019_023.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0019-023 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ11);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ11 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ11.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ11.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0021_025);                                                        //COBOL==> MOVE I-COUNT-0021-025 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0021_025);                                                       //COBOL==> MOVE I-COUNT-0021-025 TO EP-INTEGER2.
            if (LS.I_COUNT_0021_025.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0021-025 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ12);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ12 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ12.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ12.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0023_027);                                                        //COBOL==> MOVE I-COUNT-0023-027 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0023_027);                                                       //COBOL==> MOVE I-COUNT-0023-027 TO EP-INTEGER2.
            if (LS.I_COUNT_0023_027.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0023-027 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ13);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ13 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ13.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ13.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0025_029);                                                        //COBOL==> MOVE I-COUNT-0025-029 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0025_029);                                                       //COBOL==> MOVE I-COUNT-0025-029 TO EP-INTEGER2.
            if (LS.I_COUNT_0025_029.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0025-029 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.ST_EDIT_PATTERN_OBJ14);                                              //COBOL==> MOVE ST-EDIT-PATTERN-OBJ14 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.ST_DTL_LINE_2_A_OBJ14.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO ST-DTL-LINE-2-A-OBJ14.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_DTL_LINE_2);                                              //COBOL==> MOVE ST-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_DTL_LINE_2);                                              //COBOL==> MOVE ST-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.ST_DTL_LINE_2);                                                        //COBOL==> MOVE ST-DTL-LINE-2 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_ST_RPT_LINE("M_PRINT_ST_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-ST-RPT-LINE THRU PRINT-ST-RPT-LINE-EXIT.
            WS.ST_DTL_LINE_2.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO ST-DTL-LINE-2.
            WS.WS_ST_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-ST-DISABLE-SUPPRESS.
            WS.WS_ST_PAGE_DTL_LINES.SetValue(WS.WS_ST_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-ST-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_DTL_LINE_2") { M_PRINT_ST_DTL_LINE_2_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_DTL_LINE_2_EXIT
        /// </summary>
        private void M_PRINT_ST_DTL_LINE_2_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_ST_DTL_LINE_2_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_DTL_LINE_2_EXIT") { M_PRINT_ST_DTL_LINE_3(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_DTL_LINE_3
        /// </summary>
        private void M_PRINT_ST_DTL_LINE_3(string returnMethod = "")
        {
            if (WS.ST_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF ST-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_ST_UPDT_PG_NBR_FLDS("M_ST_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM ST-UPDT-PG-NBR-FLDS THRU ST-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.ST_DTL_LINE_3);                                                   //COBOL==> MOVE ST-DTL-LINE-3 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_ST_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-ST-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_DTL_LINE_3);                                              //COBOL==> MOVE ST-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_DTL_LINE_3);                                              //COBOL==> MOVE ST-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.ST_DTL_LINE_3);                                                        //COBOL==> MOVE ST-DTL-LINE-3 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_ST_RPT_LINE("M_PRINT_ST_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-ST-RPT-LINE THRU PRINT-ST-RPT-LINE-EXIT.
            if (WS.ST_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                     //COBOL==> IF ST-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            WS.ST_DTL_LINE_3.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO ST-DTL-LINE-3.
            WS.WS_ST_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-ST-DISABLE-SUPPRESS.
            WS.WS_ST_PAGE_DTL_LINES.SetValue(WS.WS_ST_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-ST-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_DTL_LINE_3") { M_PRINT_ST_DTL_LINE_3_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_DTL_LINE_3_EXIT
        /// </summary>
        private void M_PRINT_ST_DTL_LINE_3_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_ST_DTL_LINE_3_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_DTL_LINE_3_EXIT") { M_PRINT_ST_PG_HDR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_PG_HDR
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  PRINT-ST-PAGE-HDR
        ///COMMENT:  DISABLE DUPLICATE FIELD SUPPRESSION FOR FIRST
        ///COMMENT:    LINE ON NEW PAGE
        ///COMMENT:  HANDLE BEFORE SPACING FOR PAGE HEADER LINES
        ///COMMENT:  FOR EACH PAGE HEADER SECTION LINE
        ///COMMENT:    - MOVE IMPORT ATTRIBUTES TO REPORT FIELDS
        ///COMMENT:    - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:    - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  HANDLE AFTER SPACING FOR PAGE HEADER LINES
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_ST_PG_HDR(string returnMethod = "")
        {
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((!(WS.WS_ST_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_ST_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-ST-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-ST-RPT-FTR-IS-PROCESSED )
                {
                    if ((WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            M_ST_UPDT_PG_NBR_FLDS("M_ST_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM ST-UPDT-PG-NBR-FLDS THRU ST-UPDT-PG-NBR-FLDS-EXIT.
            WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_ST_BODY_SUPPRESS_LINES.SetValue(WS.WS_ST_BODY_SECTION_LINES);                                 //COBOL==> MOVE WS-ST-BODY-SECTION-LINES TO WS-ST-BODY-SUPPRESS-LINES.
            WS.WS_SAVE_SECTION_PROCESSING_IND.SetValue(WS.WS_ST_SECTION_PROCESSING_IND);                        //COBOL==> MOVE WS-ST-SECTION-PROCESSING-IND TO WS-SAVE-SECTION-PROCESSING-IND.
            WS.WS_ST_SECTION_PROCESSING_IND.SetValue("P  ");                                                    //COBOL==> MOVE 'P  ' TO WS-ST-SECTION-PROCESSING-IND.
            if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_ST_SECTION_PROCESSING_IND.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO WS-ST-SECTION-PROCESSING-IND
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_0);                                              //COBOL==> MOVE ST-PAGE-HDR-0 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("Y");                                                       //COBOL==> MOVE 'Y' TO WS-ST-CUR-PRINTING-PAGE-HDR
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_0);                                                        //COBOL==> MOVE ST-PAGE-HDR-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_ST_UPDT_PG_NBR_FLDS("M_ST_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM ST-UPDT-PG-NBR-FLDS THRU ST-UPDT-PG-NBR-FLDS-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_DATE.SetValue(WS.WS_CURRENT_DATE_8);                                                         //COBOL==> MOVE WS-CURRENT-DATE-8 TO IEF-DATE.
            WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN.
            WS.DT_FORMATTED_DATE.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO DT-FORMATTED-DATE
            if (!(WS.IEF_DATE.IsEqualTo(00000000)))                                                             //COBOL==> IF IEF-DATE NOT = 00000000
            {
                WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN
                M_FORMAT_DATE("M_FORMAT_DATE_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-DATE THRU FORMAT-DATE-EXIT
            }                                                                                                   //COBOL==> END-IF
            WS.ST_PAGE_HDR_1_D_OBJ21.SetValue(WS.DT_FORMATTED_DATE);                                            //COBOL==> MOVE DT-FORMATTED-DATE TO ST-PAGE-HDR-1-D-OBJ21.
            if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_1);                                              //COBOL==> MOVE ST-PAGE-HDR-1 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_1);                                                        //COBOL==> MOVE ST-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_1);                                                        //COBOL==> MOVE ST-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_TIME.SetValue(WS.WS_CURRENT_TIME_6);                                                         //COBOL==> MOVE WS-CURRENT-TIME-6 TO IEF-TIME.
            WS.DT_EDIT_PATTERN.SetValue("23:59:59");                                                            //COBOL==> MOVE '23:59:59' TO DT-EDIT-PATTERN.
            M_FORMAT_TIME("M_FORMAT_TIME_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-TIME THRU FORMAT-TIME-EXIT.
            WS.ST_PAGE_HDR_2_T_OBJ24.SetValue(WS.DT_FORMATTED_TIME);                                            //COBOL==> MOVE DT-FORMATTED-TIME TO ST-PAGE-HDR-2-T-OBJ24.
            if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_2);                                              //COBOL==> MOVE ST-PAGE-HDR-2 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_2);                                                        //COBOL==> MOVE ST-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_2);                                                        //COBOL==> MOVE ST-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_3);                                              //COBOL==> MOVE ST-PAGE-HDR-3 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_3);                                                        //COBOL==> MOVE ST-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_3);                                                        //COBOL==> MOVE ST-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_4);                                              //COBOL==> MOVE ST-PAGE-HDR-4 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_4);                                                        //COBOL==> MOVE ST-PAGE-HDR-4 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_4);                                                        //COBOL==> MOVE ST-PAGE-HDR-4 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WS_ST_CNTL_FTR.Value))                                                                    //COBOL==> IF NOT WS-ST-CNTL-FTR
            {
                WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_COLLECTION_OFFICER_0001_001);                            //COBOL==> MOVE I-COLLECTION-OFFICER-0001-001 TO WS-UNJUSTIFIED-TEXT-FIELD
                WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH
                WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD
                M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT
                WS.ST_PAGE_HDR_5_A_OBJ27.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                      //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO ST-PAGE-HDR-5-A-OBJ27
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(WS.P_COLLECTION_OFFICER_0001_001);                            //COBOL==> MOVE P-COLLECTION-OFFICER-0001-001 TO WS-UNJUSTIFIED-TEXT-FIELD
                WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH
                WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD
                M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT
                WS.ST_PAGE_HDR_5_A_OBJ27.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                      //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO ST-PAGE-HDR-5-A-OBJ27
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_5);                                              //COBOL==> MOVE ST-PAGE-HDR-5 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_5);                                                        //COBOL==> MOVE ST-PAGE-HDR-5 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_5);                                                        //COBOL==> MOVE ST-PAGE-HDR-5 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_6);                                              //COBOL==> MOVE ST-PAGE-HDR-6 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_6);                                                        //COBOL==> MOVE ST-PAGE-HDR-6 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_6);                                                        //COBOL==> MOVE ST-PAGE-HDR-6 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_7);                                              //COBOL==> MOVE ST-PAGE-HDR-7 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_7);                                                        //COBOL==> MOVE ST-PAGE-HDR-7 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_7);                                                        //COBOL==> MOVE ST-PAGE-HDR-7 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_8);                                              //COBOL==> MOVE ST-PAGE-HDR-8 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_8);                                                        //COBOL==> MOVE ST-PAGE-HDR-8 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_8);                                                        //COBOL==> MOVE ST-PAGE-HDR-8 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_ST_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-ST-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_9);                                              //COBOL==> MOVE ST-PAGE-HDR-9 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_9);                                                        //COBOL==> MOVE ST-PAGE-HDR-9 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.ST_PAGE_HDR_9);                                                        //COBOL==> MOVE ST-PAGE-HDR-9 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_ST_LINEONNEWPG("M_PRINT_A_ST_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-ST-LINEONNEWPG THRU PRINT-A-ST-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_ST_LINE("M_PRINT_A_ST_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-ST-LINE THRU PRINT-A-ST-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_ST_SECTION_PROCESSING_IND.SetValue(WS.WS_SAVE_SECTION_PROCESSING_IND);                        //COBOL==> MOVE WS-SAVE-SECTION-PROCESSING-IND TO WS-ST-SECTION-PROCESSING-IND.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_ST_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-ST-CUR-PRINTING-PAGE-HDR.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_PG_HDR") { M_PRINT_ST_PG_HDR_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_PG_HDR_EXIT
        /// </summary>
        private void M_PRINT_ST_PG_HDR_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_ST_PG_HDR_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_PG_HDR_EXIT") { M_PRINT_ST_RPT_FTR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_RPT_FTR
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE BEFORE SPACING FOR ST REPORT FOOTER
        ///COMMENT:  FOR EACH ST REPORT FOOTER SECTION LINE
        ///COMMENT:    - MOVE IMPORT ATTRIBUTES TO REPORT FIELDS
        ///COMMENT:    - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:    - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  HANDLE AFTER SPACING FOR REPORT FOOTER
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_ST_RPT_FTR(string returnMethod = "")
        {
            if (WS.ST_RPT_FTR_BEFORE_PG_BRK.IsEqualTo("Y"))                                                     //COBOL==> IF ST-RPT-FTR-BEFORE-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_PG_NUMBER_SAVE.SetValue(WS.WS_PG_NUMBER);                                                     //COBOL==> MOVE WS-PG-NUMBER TO WS-PG-NUMBER-SAVE
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            M_ST_UPDT_RPT_PG_NBR_FLDS("M_ST_UPDT_RPT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM ST-UPDT-RPT-PG-NBR-FLDS THRU ST-UPDT-RPT-PG-NBR-FLDS-EXIT.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.ST_RPT_FTR_SUPPRSS_BLANK);                                     //COBOL==> MOVE ST-RPT-FTR-SUPPRSS-BLANK TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_SAVE_PRINT_ATBOTTM.SetValue(WS.ST_RPT_FTR_PRINT_ATBOTTM);                                     //COBOL==> MOVE ST-RPT-FTR-PRINT-ATBOTTM TO WS-SAVE-PRINT-ATBOTTM.
            WS.WS_ST_SECTION_PROCESSING_IND.SetValue("F  ");                                                    //COBOL==> MOVE 'F  ' TO WS-ST-SECTION-PROCESSING-IND.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_ST_RPT_SECTION_PAGING("M_ST_RPT_SECTION_PAGING_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM ST-RPT-SECTION-PAGING THRU ST-RPT-SECTION-PAGING-EXIT.
            if (WS.WS_ST_PG_HDR_LINE_QT.IsGreaterThan(0))                                                       //COBOL==> IF WS-ST-PG-HDR-LINE-QT > 0
            {
                if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                {
                    WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER_SAVE);                                                     //COBOL==> MOVE WS-PG-NUMBER-SAVE TO WS-PG-NUMBER
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.ST_RPT_FTR_0);                                                         //COBOL==> MOVE ST-RPT-FTR-0 TO WS-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_RPT_FTR_0);                                               //COBOL==> MOVE ST-RPT-FTR-0 TO WS-TEMP-SAVE-PRINT-LINE.
            M_PRINT_ST_RPT_LINE("M_PRINT_ST_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-ST-RPT-LINE THRU PRINT-ST-RPT-LINE-EXIT.
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_ST_LINE_SPACING);                                           //COBOL==> MOVE WS-ST-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_ST_RPT_SECTION_PAGING("M_ST_RPT_SECTION_PAGING_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM ST-RPT-SECTION-PAGING THRU ST-RPT-SECTION-PAGING-EXIT.
            if (WS.WS_ST_PG_HDR_LINE_QT.IsGreaterThan(0))                                                       //COBOL==> IF WS-ST-PG-HDR-LINE-QT > 0
            {
                if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                {
                    WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER_SAVE);                                                     //COBOL==> MOVE WS-PG-NUMBER-SAVE TO WS-PG-NUMBER
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.ST_RPT_FTR_1);                                                         //COBOL==> MOVE ST-RPT-FTR-1 TO WS-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.ST_RPT_FTR_1);                                               //COBOL==> MOVE ST-RPT-FTR-1 TO WS-TEMP-SAVE-PRINT-LINE.
            M_PRINT_ST_RPT_LINE("M_PRINT_ST_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-ST-RPT-LINE THRU PRINT-ST-RPT-LINE-EXIT.
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_ST_SECTION_PROCESSING_IND.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO WS-ST-SECTION-PROCESSING-IND.
            if ((WS.WS_ST_PAGE_SUPPRESS_AFTER.IsEqualTo("N"))
             && (WS.ST_RPT_FTR_AFTER_PG_BRK.IsEqualTo("Y")))  //COBOL==> IF WS-ST-PAGE-SUPPRESS-AFTER = 'N' AND ST-RPT-FTR-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (WS.ST_RPT_FTR_RESETPG_AFTER.IsEqualTo("Y"))                                                     //COBOL==> IF ST-RPT-FTR-RESETPG-AFTER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("Y");                                                                //COBOL==> MOVE 'Y' TO WS-RESET-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_RPT_FTR") { M_PRINT_ST_RPT_FTR_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_ST_RPT_FTR_EXIT
        /// </summary>
        private void M_PRINT_ST_RPT_FTR_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_ST_RPT_FTR_EXIT") { return; }                                          //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_ST_RPT_FTR_EXIT") { M_ST_RPT_SECTION_PAGING(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ST_RPT_SECTION_PAGING
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE PAGING FOR ST REPORT SECTIONS
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_ST_RPT_SECTION_PAGING(string returnMethod = "")
        {
            WS.WS_TEMP_LINE_QT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-TEMP-LINE-QT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
            if ((WS.WS_TEMP_LINE_QT.IsGreaterThan(WS.WS_PG_LENGTH))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-TEMP-LINE-QT > WS-PG-LENGTH OR WS-PG-BRK-FLAG = 'Y'
            {
                if (WS.WS_RESET_PG_NUMBER.IsEqualTo("N"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'N'
                {
                    WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                }                                                                                                   //COBOL==> END-IF
                M_ST_UPDT_RPT_PG_NBR_FLDS("M_ST_UPDT_RPT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM ST-UPDT-RPT-PG-NBR-FLDS THRU ST-UPDT-RPT-PG-NBR-FLDS-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_ST_UPDT_RPT_PG_NBR_FLDS("M_ST_UPDT_RPT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM ST-UPDT-RPT-PG-NBR-FLDS THRU ST-UPDT-RPT-PG-NBR-FLDS-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_ST_RPT_SECTION_PAGING") { M_ST_RPT_SECTION_PAGING_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ST_RPT_SECTION_PAGING_EXIT
        /// </summary>
        private void M_ST_RPT_SECTION_PAGING_EXIT(string returnMethod = "")
        {
            if (returnMethod != "" && returnMethod != "M_ST_RPT_SECTION_PAGING_EXIT") { M_ST_UPDT_RPT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ST_UPDT_RPT_PG_NBR_FLDS
        /// </summary>
        private void M_ST_UPDT_RPT_PG_NBR_FLDS(string returnMethod = "")
        {
            //COMMENT:     STATEMENT BELOW EXISTS TO ENSURE PARAGRAPH NEVER EMPTY
            WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER);                                                          //COBOL==> MOVE WS-PG-NUMBER TO WS-PG-NUMBER.
            if (returnMethod != "" && returnMethod != "M_ST_UPDT_RPT_PG_NBR_FLDS") { M_ST_UPDT_RPT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_ST_UPDT_RPT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_ST_UPDT_RPT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_ST_UPDT_RPT_PG_NBR_FLDS_EXIT") { return; }                                   //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_ST_UPDT_RPT_PG_NBR_FLDS_EXIT") { M_SS_MAINLINE_DTL(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SS_MAINLINE_DTL
        /// </summary>
        private void M_SS_MAINLINE_DTL(string returnMethod = "")
        {
            if (((WS.WS_SS_DTL_RPT_REQUESTED.Value)
             && (!(LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("S"))))
             || ((WS.WS_SS_SUMMARY_RPT_REQUESTED.Value)
             && (LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("D"))))  //COBOL==> IF ( WS-SS-DTL-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD NOT = 'S' ) OR ( WS-SS-SUMMARY-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD = 'D' )
            {
                WS.WS_SS_SECTION_PROCESSING_IND.SetValue("B  ");                                                    //COBOL==> MOVE 'B  ' TO WS-SS-SECTION-PROCESSING-IND
                WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.SS_DTL_LINE_SUPPRSS_BLANK);                                    //COBOL==> MOVE SS-DTL-LINE-SUPPRSS-BLANK TO WS-SUPPRSS-BLANK-LINE
                M_PRINT_SS_DTL_LINE_0("M_PRINT_SS_DTL_LINE_0_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SS-DTL-LINE-0 THRU PRINT-SS-DTL-LINE-0-EXIT
                M_PRINT_SS_DTL_LINE_1("M_PRINT_SS_DTL_LINE_1_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SS-DTL-LINE-1 THRU PRINT-SS-DTL-LINE-1-EXIT
                M_PRINT_SS_DTL_LINE_2("M_PRINT_SS_DTL_LINE_2_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SS-DTL-LINE-2 THRU PRINT-SS-DTL-LINE-2-EXIT
                M_PRINT_SS_DTL_LINE_3("M_PRINT_SS_DTL_LINE_3_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-SS-DTL-LINE-3 THRU PRINT-SS-DTL-LINE-3-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_SS_SECTION_PROCESSING_IND.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO WS-SS-SECTION-PROCESSING-IND.
            if (WS.SS_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                     //COBOL==> IF SS-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_SS_MAINLINE_DTL") { M_SS_MAINLINE_DTL_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SS_MAINLINE_DTL_EXIT
        /// </summary>
        private void M_SS_MAINLINE_DTL_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_SS_MAINLINE_DTL_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_SS_MAINLINE_DTL_EXIT") { M_PRINT_SS_RPT_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_RPT_LINE
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  THIS SECTION PRINTS ALL SS REPORT LINES.
        ///COMMENT:  IT IS CALLED FOR EACH REPORT LINE. IT CONTAINS:
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE PRINTING A LINE
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE DETAIL LINE PAGING
        ///COMMENT:  - ALSO CALL PRINT-A-SS-LINE
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_SS_RPT_LINE(string returnMethod = "")
        {
            M_CHECK_FOR_SS_NEW_PAGE("M_CHECK_FOR_SS_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM CHECK-FOR-SS-NEW-PAGE THRU CHECK-FOR-SS-NEW-PAGE-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                WS.WS_TEMP_PRINT_LINE.SetValue(WS.WS_PRINT_LINE);                                                   //COBOL==> MOVE WS-PRINT-LINE TO WS-TEMP-PRINT-LINE
                WS.WS_TEMP_PRINT_LINE_SPACING.SetValue(WS.WS_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-PRINT-LINE-SPACING TO WS-TEMP-PRINT-LINE-SPACING
                if (WS.SS_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF SS-PAGE-HDR-PRINT-FLAG = 'Y'
                {
                    WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                    if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                    {
                        if (WS.SS_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF SS-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_SS_PG_HDR("M_PRINT_SS_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-SS-PG-HDR THRU PRINT-SS-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
                    WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                         //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-TEMP-SAVE-PRINT-LINE
                    WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_TEMP_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE-SPACING TO WS-PRINT-LINE-SPACING
                    if (WS.SS_RPT_FTR_PRINT_ATBOTTM.IsEqualTo("Y"))                                                     //COBOL==> IF SS-RPT-FTR-PRINT-ATBOTTM = 'Y'
                    {
                        if (WS.WS_SS_RPT_FTR_IS_PROCESSED.Value)                                                            //COBOL==> IF WS-SS-RPT-FTR-IS-PROCESSED
                        {
                            WS.WS_CUR_SECTION_LINE_QT.SetValue(WS.WS_SS_RPT_FTR_LINE_QT);                                       //COBOL==> MOVE WS-SS-RPT-FTR-LINE-QT TO WS-CUR-SECTION-LINE-QT
                        }                                                                                                   //COBOL==> END-IF
                        M_SS_CALC_4_PRINT_BOTTM("M_SS_CALC_4_PRINT_BOTTM_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SS-CALC-4-PRINT-BOTTM THRU SS-CALC-4-PRINT-BOTTM-EXIT
                    }                                                                                                   //COBOL==> END-IF
                    M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.SS_RPT_FTR_PRINT_ATBOTTM.IsEqualTo("Y"))                                                     //COBOL==> IF SS-RPT-FTR-PRINT-ATBOTTM = 'Y'
                    {
                        if (WS.WS_SS_RPT_FTR_IS_PROCESSED.Value)                                                            //COBOL==> IF WS-SS-RPT-FTR-IS-PROCESSED
                        {
                            WS.WS_CUR_SECTION_LINE_QT.SetValue(WS.WS_SS_RPT_FTR_LINE_QT);                                       //COBOL==> MOVE WS-SS-RPT-FTR-LINE-QT TO WS-CUR-SECTION-LINE-QT
                        }                                                                                                   //COBOL==> END-IF
                        M_SS_CALC_4_PRINT_BOTTM("M_SS_CALC_4_PRINT_BOTTM_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SS-CALC-4-PRINT-BOTTM THRU SS-CALC-4-PRINT-BOTTM-EXIT
                    }                                                                                                   //COBOL==> END-IF
                    M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
                }                                                                                                   //COBOL==> END-IF
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((WS.WS_SS_PRINT_DUPLICATES.Value)
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))          //COBOL==> IF WS-SS-PRINT-DUPLICATES AND WS-NOT-IN-CONTROL-BRK
                {
                    WS.WS_SS_BODY_SUPPRESS_LINES.SetValue(WS.WS_SS_BODY_SUPPRESS_LINES.AsInt() - 1);                    //COBOL==> SUBTRACT 1 FROM WS-SS-BODY-SUPPRESS-LINES
                    if (WS.WS_SS_BODY_SUPPRESS_LINES.IsEqualTo(0))                                                      //COBOL==> IF WS-SS-BODY-SUPPRESS-LINES = 0
                    {
                        WS.WS_SS_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-SS-DISABLE-SUPPRESS
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.SS_RPT_FTR_PRINT_ATBOTTM.IsEqualTo("Y"))                                                     //COBOL==> IF SS-RPT-FTR-PRINT-ATBOTTM = 'Y'
                {
                    if (WS.WS_SS_RPT_FTR_IS_PROCESSED.Value)                                                            //COBOL==> IF WS-SS-RPT-FTR-IS-PROCESSED
                    {
                        WS.WS_CUR_SECTION_LINE_QT.SetValue(WS.WS_SS_RPT_FTR_LINE_QT);                                       //COBOL==> MOVE WS-SS-RPT-FTR-LINE-QT TO WS-CUR-SECTION-LINE-QT
                        M_SS_CALC_4_PRINT_BOTTM("M_SS_CALC_4_PRINT_BOTTM_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SS-CALC-4-PRINT-BOTTM THRU SS-CALC-4-PRINT-BOTTM-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    if (WS.SS_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF SS-PAGE-HDR-PRINT-FLAG = 'Y'
                    {
                        WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                        if (WS.SS_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                       //COBOL==> IF SS-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_SS_PG_HDR("M_PRINT_SS_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-SS-PG-HDR THRU PRINT-SS-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                        WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                        M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_RPT_LINE") { M_PRINT_SS_RPT_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_RPT_LINE_EXIT
        /// </summary>
        private void M_PRINT_SS_RPT_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SS_RPT_LINE_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_RPT_LINE_EXIT") { M_PRINT_A_SS_LINEONNEWPG(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_SS_LINEONNEWPG
        /// </summary>
        private void M_PRINT_A_SS_LINEONNEWPG(string returnMethod = "")
        {
            if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
            {
                if (((WS.WS_SS_CURRENTLY_WRAPPING.IsEqualTo("N"))
             && (WS.WS_SS_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (WS.WS_CONTROL_BRK_FLAG.IsEqualTo("N")))  //COBOL==> IF WS-SS-CURRENTLY-WRAPPING = 'N' AND WS-SS-CUR-PRINTING-PAGE-HDR = 'N' AND WS-CONTROL-BRK-FLAG = 'N'
                {
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
                }                                                                                                   //COBOL==> END-IF
                WS.WS_SS_PAGE_DTL_LINES.SetValue(4);                                                                //COBOL==> MOVE 4 TO WS-SS-PAGE-DTL-LINES
                if (((WS.WS_SS_BODY_IS_PROCESSED.Value)
             || (WS.WS_SS_RPT_HDR_IS_PROCESSED.Value))
             || (WS.WS_SS_RPT_FTR_IS_PROCESSED.Value))  //COBOL==> IF WS-SS-BODY-IS-PROCESSED OR WS-SS-RPT-HDR-IS-PROCESSED OR WS-SS-RPT-FTR-IS-PROCESSED
                {
                    if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                    {
                        WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                        WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((!(WS.WS_SS_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_SS_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-SS-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-SS-RPT-FTR-IS-PROCESSED )
                        {
                            WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    M_SS_UPDT_PG_NBR_FLDS("M_SS_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM SS-UPDT-PG-NBR-FLDS THRU SS-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(1))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 1
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_SPACE_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-SPACE-RECORD AFTER ADVANCING PAGE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                    WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_SS_LINEONNEWPG") { M_PRINT_A_SS_LINEONNEWPG_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_SS_LINEONNEWPG_EXIT
        /// </summary>
        private void M_PRINT_A_SS_LINEONNEWPG_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_SS_LINEONNEWPG_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_SS_LINEONNEWPG_EXIT") { M_PRINT_A_SS_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_SS_LINE
        /// </summary>
        private void M_PRINT_A_SS_LINE(string returnMethod = "")
        {
            if (((((((WS.WS_SS_PAGE_DTL_LINES.IsGreaterThan(0))
             && (WS.WS_PREV_SUBRPT_CODE.IsEqualTo(WS.WS_CUR_SUBRPT_CODE)))
             && (!(WS.WS_SS_CURRENTLY_WRAPPING.IsEqualTo("Y"))))
             && (WS.WS_SS_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (!(WS.WS_SS_RPT_HDR_IS_PROCESSED.Value)))
             && (!(WS.WS_SS_PG_HDR_IS_PROCESSED.Value)))
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))  //COBOL==> IF WS-SS-PAGE-DTL-LINES > 0 AND WS-PREV-SUBRPT-CODE = WS-CUR-SUBRPT-CODE AND WS-SS-CURRENTLY-WRAPPING NOT = 'Y' AND WS-SS-CUR-PRINTING-PAGE-HDR = 'N' AND NOT WS-SS-RPT-HDR-IS-PROCESSED AND NOT WS-SS-PG-HDR-IS-PROCESSED AND WS-NOT-IN-CONTROL-BRK
            {
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(0))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 0
            {
                if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                {
                    if (WS.WS_VERY_FIRST_WRITE.IsEqualTo("Y"))                                                          //COBOL==> IF WS-VERY-FIRST-WRITE = 'Y'
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                        WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.LINEBREAK, 0, WS.WS_PRINT_LINE_SPACING.AsInt());  //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING WS-PRINT-LINE-SPACING LINES
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_LINE_COUNT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-LINE-COUNT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_SS_LINE") { M_PRINT_A_SS_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_SS_LINE_EXIT
        /// </summary>
        private void M_PRINT_A_SS_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_SS_LINE_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_SS_LINE_EXIT") { M_CHECK_FOR_SS_NEW_PAGE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_SS_NEW_PAGE
        /// </summary>
        private void M_CHECK_FOR_SS_NEW_PAGE(string returnMethod = "")
        {
            WS.WS_TEMP_LINE_QT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-TEMP-LINE-QT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
            if (WS.WS_TEMP_LINE_QT.IsGreaterThan(WS.WS_PG_LENGTH))                                              //COBOL==> IF WS-TEMP-LINE-QT > WS-PG-LENGTH
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_SS_NEW_PAGE") { M_CHECK_FOR_SS_NEW_PAGE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_SS_NEW_PAGE_EXIT
        /// </summary>
        private void M_CHECK_FOR_SS_NEW_PAGE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_CHECK_FOR_SS_NEW_PAGE_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_SS_NEW_PAGE_EXIT") { M_SS_CALC_4_PRINT_BOTTM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SS_CALC_4_PRINT_BOTTM
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  FOR THE SS REPORT
        ///COMMENT:  THIS PARAGRAPH CALCULATES THE NUMBER OF LINES
        ///COMMENT:  TO ADVANCE FOR A SECTION WHEN THE SECTION IS
        ///COMMENT:  SPECIFIED TO HAVE PRINT AT BOTTOM
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_SS_CALC_4_PRINT_BOTTM(string returnMethod = "")
        {
            if (WS.WS_SAVE_PRINT_ATBOTTM.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SAVE-PRINT-ATBOTTM = 'Y'
            {
                WS.WS_SAVE_PRINT_ATBOTTM.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SAVE-PRINT-ATBOTTM
                WS.WS_TEMP_LINE_QT.SetValueWithZeroes();                                                            //COBOL==> MOVE 0 TO WS-TEMP-LINE-QT
                if (WS.WS_PG_LENGTH.IsLessThan(((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_TEMP_LINE_QT.AsDecimal()) + WS.WS_CUR_SECTION_LINE_QT.AsDecimal())))  //COBOL==> IF WS-PG-LENGTH < ( WS-LINE-COUNT + WS-TEMP-LINE-QT + WS-CUR-SECTION-LINE-QT )
                {
                    if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue((((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_COUNT.AsDecimal()) - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-COUNT - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_SS_CALC_4_PRINT_BOTTM") { M_SS_CALC_4_PRINT_BOTTM_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SS_CALC_4_PRINT_BOTTM_EXIT
        /// </summary>
        private void M_SS_CALC_4_PRINT_BOTTM_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_SS_CALC_4_PRINT_BOTTM_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_SS_CALC_4_PRINT_BOTTM_EXIT") { M_SS_UPDT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SS_UPDT_PG_NBR_FLDS
        /// </summary>
        private void M_SS_UPDT_PG_NBR_FLDS(string returnMethod = "")
        {
            WS.SS_PAGE_HDR_0_P_OBJ19.SetValue(WS.WS_PG_NUMBER);                                                 //COBOL==> MOVE WS-PG-NUMBER TO SS-PAGE-HDR-0-P-OBJ19.
            if (returnMethod != "" && returnMethod != "M_SS_UPDT_PG_NBR_FLDS") { M_SS_UPDT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SS_UPDT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_SS_UPDT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_SS_UPDT_PG_NBR_FLDS_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_SS_UPDT_PG_NBR_FLDS_EXIT") { M_PRINT_SS_DTL_LINE_0(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_DTL_LINE_0
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE BEFORE SPACING FOR SS REPORT BODY (DETAIL LINES)
        ///COMMENT:  FOR EACH DETAIL LINE...
        ///COMMENT:  - POPULATE THE OUTPUT FIELDS FROM THE IMPORTED ATTRIBUTES
        ///COMMENT:  - REPLACE ATTRIBUTE VALUES WITH SPACES IF DUPLICATE
        ///COMMENT:    SUPPRESSION ON AND NOT FIRST LINE OF PAGE OR
        ///COMMENT:    FIRST LINE AFTER CONTROL BREAK
        ///COMMENT:  - MOVE DETAIL LINE TO THE PRINT LINE
        ///COMMENT:  - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:  - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  - REPEAT AS NECESSARY FOR TEXT WRAPPING ATTRIBUTES
        ///COMMENT:  HANDLE AFTER SPACING FOR BODY (DETAIL LINES)
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_SS_DTL_LINE_0(string returnMethod = "")
        {
            if (WS.SS_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF SS-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SS_UPDT_PG_NBR_FLDS("M_SS_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM SS-UPDT-PG-NBR-FLDS THRU SS-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SS_DTL_LINE_0);                                                   //COBOL==> MOVE SS-DTL-LINE-0 TO SAVE-FOR-WRAP-TEXT.
            if (WS.SS_DTL_LINE_KEEP_TOGETHER.IsEqualTo("Y"))                                                    //COBOL==> IF SS-DTL-LINE-KEEP-TOGETHER = 'Y'
            {
                if (((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_SS_DTL_LINE_QT.AsDecimal()) + WS.WS_SS_PG_FTR_LINE_QT.AsDecimal()).IsGreaterThan(WS.WS_PG_LENGTH))  //COBOL==> IF ( WS-LINE-COUNT + WS-SS-DTL-LINE-QT + WS-SS-PG-FTR-LINE-QT ) > WS-PG-LENGTH
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.SS_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("Y"))                                                    //COBOL==> IF SS-DTL-LINE-BEFORE-PG-BRK = 'Y'
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SS_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SS-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_1_0003_005);                                 //COBOL==> MOVE I-SUB-HEADING-1-0003-005 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.SS_DTL_LINE_0_A_OBJ1.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                       //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO SS-DTL-LINE-0-A-OBJ1.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_DTL_LINE_0);                                              //COBOL==> MOVE SS-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_DTL_LINE_0);                                              //COBOL==> MOVE SS-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SS_DTL_LINE_0);                                                        //COBOL==> MOVE SS-DTL-LINE-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SS_RPT_LINE("M_PRINT_SS_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-SS-RPT-LINE THRU PRINT-SS-RPT-LINE-EXIT.
            WS.SS_DTL_LINE_0.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SS-DTL-LINE-0.
            WS.WS_SS_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-SS-DISABLE-SUPPRESS.
            WS.WS_SS_PAGE_DTL_LINES.SetValue(WS.WS_SS_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-SS-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_DTL_LINE_0") { M_PRINT_SS_DTL_LINE_0_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_DTL_LINE_0_EXIT
        /// </summary>
        private void M_PRINT_SS_DTL_LINE_0_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SS_DTL_LINE_0_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_DTL_LINE_0_EXIT") { M_PRINT_SS_DTL_LINE_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_DTL_LINE_1
        /// </summary>
        private void M_PRINT_SS_DTL_LINE_1(string returnMethod = "")
        {
            if (WS.SS_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF SS-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SS_UPDT_PG_NBR_FLDS("M_SS_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM SS-UPDT-PG-NBR-FLDS THRU SS-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SS_DTL_LINE_1);                                                   //COBOL==> MOVE SS-DTL-LINE-1 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SS_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SS-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_2_0003_006);                                 //COBOL==> MOVE I-SUB-HEADING-2-0003-006 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(14);                                                     //COBOL==> MOVE 14 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ2.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                       //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO SS-DTL-LINE-1-A-OBJ2.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0004_008);                                                      //COBOL==> MOVE I-AMOUNT1-0004-008 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0004_008);                                                     //COBOL==> MOVE I-AMOUNT1-0004-008 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0004_008.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0004-008 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ33);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ33 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ33.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ33.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0006_010);                                                      //COBOL==> MOVE I-AMOUNT1-0006-010 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0006_010);                                                     //COBOL==> MOVE I-AMOUNT1-0006-010 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0006_010.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0006-010 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ34);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ34 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ34.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ34.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0008_012);                                                      //COBOL==> MOVE I-AMOUNT1-0008-012 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0008_012);                                                     //COBOL==> MOVE I-AMOUNT1-0008-012 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0008_012.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0008-012 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ35);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ35 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ35.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ35.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0010_014);                                                      //COBOL==> MOVE I-AMOUNT1-0010-014 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0010_014);                                                     //COBOL==> MOVE I-AMOUNT1-0010-014 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0010_014.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0010-014 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ36);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ36 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ36.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ36.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0012_016);                                                      //COBOL==> MOVE I-AMOUNT1-0012-016 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0012_016);                                                     //COBOL==> MOVE I-AMOUNT1-0012-016 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0012_016.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0012-016 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ37);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ37 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ37.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ37.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0014_018);                                                      //COBOL==> MOVE I-AMOUNT1-0014-018 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0014_018);                                                     //COBOL==> MOVE I-AMOUNT1-0014-018 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0014_018.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0014-018 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ38);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ38 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ38.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ38.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0016_020);                                                      //COBOL==> MOVE I-AMOUNT1-0016-020 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0016_020);                                                     //COBOL==> MOVE I-AMOUNT1-0016-020 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0016_020.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0016-020 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ39);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ39 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ39.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ39.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0018_022);                                                      //COBOL==> MOVE I-AMOUNT1-0018-022 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0018_022);                                                     //COBOL==> MOVE I-AMOUNT1-0018-022 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0018_022.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0018-022 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ40);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ40 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ40.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ40.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0020_024);                                                      //COBOL==> MOVE I-AMOUNT1-0020-024 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0020_024);                                                     //COBOL==> MOVE I-AMOUNT1-0020-024 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0020_024.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0020-024 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ43);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ43 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ43.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ43.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0022_026);                                                      //COBOL==> MOVE I-AMOUNT1-0022-026 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0022_026);                                                     //COBOL==> MOVE I-AMOUNT1-0022-026 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0022_026.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0022-026 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ41);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ41 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ41.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ41.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0024_028);                                                      //COBOL==> MOVE I-AMOUNT1-0024-028 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0024_028);                                                     //COBOL==> MOVE I-AMOUNT1-0024-028 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0024_028.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0024-028 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ42);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ42 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_1_A_OBJ42.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-1-A-OBJ42.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_DTL_LINE_1);                                              //COBOL==> MOVE SS-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_DTL_LINE_1);                                              //COBOL==> MOVE SS-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SS_DTL_LINE_1);                                                        //COBOL==> MOVE SS-DTL-LINE-1 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SS_RPT_LINE("M_PRINT_SS_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-SS-RPT-LINE THRU PRINT-SS-RPT-LINE-EXIT.
            WS.SS_DTL_LINE_1.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SS-DTL-LINE-1.
            WS.WS_SS_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-SS-DISABLE-SUPPRESS.
            WS.WS_SS_PAGE_DTL_LINES.SetValue(WS.WS_SS_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-SS-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_DTL_LINE_1") { M_PRINT_SS_DTL_LINE_1_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_DTL_LINE_1_EXIT
        /// </summary>
        private void M_PRINT_SS_DTL_LINE_1_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SS_DTL_LINE_1_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_DTL_LINE_1_EXIT") { M_PRINT_SS_DTL_LINE_2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_DTL_LINE_2
        /// </summary>
        private void M_PRINT_SS_DTL_LINE_2(string returnMethod = "")
        {
            if (WS.SS_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF SS-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SS_UPDT_PG_NBR_FLDS("M_SS_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM SS-UPDT-PG-NBR-FLDS THRU SS-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SS_DTL_LINE_2);                                                   //COBOL==> MOVE SS-DTL-LINE-2 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SS_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SS-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_3_0003_007);                                 //COBOL==> MOVE I-SUB-HEADING-3-0003-007 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(5);                                                      //COBOL==> MOVE 5 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ3.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                       //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO SS-DTL-LINE-2-A-OBJ3.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0005_009);                                                        //COBOL==> MOVE I-COUNT-0005-009 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0005_009);                                                       //COBOL==> MOVE I-COUNT-0005-009 TO EP-INTEGER2.
            if (LS.I_COUNT_0005_009.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0005-009 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ4);                                               //COBOL==> MOVE SS-EDIT-PATTERN-OBJ4 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ4.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ4.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0007_011);                                                        //COBOL==> MOVE I-COUNT-0007-011 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0007_011);                                                       //COBOL==> MOVE I-COUNT-0007-011 TO EP-INTEGER2.
            if (LS.I_COUNT_0007_011.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0007-011 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ5);                                               //COBOL==> MOVE SS-EDIT-PATTERN-OBJ5 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ5.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ5.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0009_013);                                                        //COBOL==> MOVE I-COUNT-0009-013 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0009_013);                                                       //COBOL==> MOVE I-COUNT-0009-013 TO EP-INTEGER2.
            if (LS.I_COUNT_0009_013.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0009-013 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ6);                                               //COBOL==> MOVE SS-EDIT-PATTERN-OBJ6 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ6.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ6.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0011_015);                                                        //COBOL==> MOVE I-COUNT-0011-015 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0011_015);                                                       //COBOL==> MOVE I-COUNT-0011-015 TO EP-INTEGER2.
            if (LS.I_COUNT_0011_015.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0011-015 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ7);                                               //COBOL==> MOVE SS-EDIT-PATTERN-OBJ7 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ7.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ7.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0013_017);                                                        //COBOL==> MOVE I-COUNT-0013-017 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0013_017);                                                       //COBOL==> MOVE I-COUNT-0013-017 TO EP-INTEGER2.
            if (LS.I_COUNT_0013_017.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0013-017 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ8);                                               //COBOL==> MOVE SS-EDIT-PATTERN-OBJ8 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ8.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ8.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0015_019);                                                        //COBOL==> MOVE I-COUNT-0015-019 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0015_019);                                                       //COBOL==> MOVE I-COUNT-0015-019 TO EP-INTEGER2.
            if (LS.I_COUNT_0015_019.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0015-019 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ9);                                               //COBOL==> MOVE SS-EDIT-PATTERN-OBJ9 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ9.SetValue(WS.EP_FORMATTED_VALUE);                                            //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ9.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0017_021);                                                        //COBOL==> MOVE I-COUNT-0017-021 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0017_021);                                                       //COBOL==> MOVE I-COUNT-0017-021 TO EP-INTEGER2.
            if (LS.I_COUNT_0017_021.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0017-021 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ10);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ10 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ10.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ10.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0019_023);                                                        //COBOL==> MOVE I-COUNT-0019-023 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0019_023);                                                       //COBOL==> MOVE I-COUNT-0019-023 TO EP-INTEGER2.
            if (LS.I_COUNT_0019_023.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0019-023 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ11);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ11 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ11.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ11.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0021_025);                                                        //COBOL==> MOVE I-COUNT-0021-025 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0021_025);                                                       //COBOL==> MOVE I-COUNT-0021-025 TO EP-INTEGER2.
            if (LS.I_COUNT_0021_025.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0021-025 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ12);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ12 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ12.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ12.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0023_027);                                                        //COBOL==> MOVE I-COUNT-0023-027 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0023_027);                                                       //COBOL==> MOVE I-COUNT-0023-027 TO EP-INTEGER2.
            if (LS.I_COUNT_0023_027.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0023-027 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ13);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ13 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ13.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ13.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0025_029);                                                        //COBOL==> MOVE I-COUNT-0025-029 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0025_029);                                                       //COBOL==> MOVE I-COUNT-0025-029 TO EP-INTEGER2.
            if (LS.I_COUNT_0025_029.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0025-029 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.SS_EDIT_PATTERN_OBJ14);                                              //COBOL==> MOVE SS-EDIT-PATTERN-OBJ14 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.SS_DTL_LINE_2_A_OBJ14.SetValue(WS.EP_FORMATTED_VALUE);                                           //COBOL==> MOVE EP-FORMATTED-VALUE TO SS-DTL-LINE-2-A-OBJ14.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_DTL_LINE_2);                                              //COBOL==> MOVE SS-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_DTL_LINE_2);                                              //COBOL==> MOVE SS-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SS_DTL_LINE_2);                                                        //COBOL==> MOVE SS-DTL-LINE-2 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SS_RPT_LINE("M_PRINT_SS_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-SS-RPT-LINE THRU PRINT-SS-RPT-LINE-EXIT.
            WS.SS_DTL_LINE_2.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SS-DTL-LINE-2.
            WS.WS_SS_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-SS-DISABLE-SUPPRESS.
            WS.WS_SS_PAGE_DTL_LINES.SetValue(WS.WS_SS_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-SS-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_DTL_LINE_2") { M_PRINT_SS_DTL_LINE_2_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_DTL_LINE_2_EXIT
        /// </summary>
        private void M_PRINT_SS_DTL_LINE_2_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SS_DTL_LINE_2_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_DTL_LINE_2_EXIT") { M_PRINT_SS_DTL_LINE_3(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_DTL_LINE_3
        /// </summary>
        private void M_PRINT_SS_DTL_LINE_3(string returnMethod = "")
        {
            if (WS.SS_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                    //COBOL==> IF SS-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_SS_UPDT_PG_NBR_FLDS("M_SS_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM SS-UPDT-PG-NBR-FLDS THRU SS-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.SS_DTL_LINE_3);                                                   //COBOL==> MOVE SS-DTL-LINE-3 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_SS_CURRENTLY_WRAPPING.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-SS-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_DTL_LINE_3);                                              //COBOL==> MOVE SS-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_DTL_LINE_3);                                              //COBOL==> MOVE SS-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.SS_DTL_LINE_3);                                                        //COBOL==> MOVE SS-DTL-LINE-3 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_SS_RPT_LINE("M_PRINT_SS_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-SS-RPT-LINE THRU PRINT-SS-RPT-LINE-EXIT.
            if (WS.SS_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                     //COBOL==> IF SS-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            WS.SS_DTL_LINE_3.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                   //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO SS-DTL-LINE-3.
            WS.WS_SS_DISABLE_SUPPRESS.SetValue("N");                                                            //COBOL==> MOVE 'N' TO WS-SS-DISABLE-SUPPRESS.
            WS.WS_SS_PAGE_DTL_LINES.SetValue(WS.WS_SS_PAGE_DTL_LINES.AsInt() - 1);                              //COBOL==> SUBTRACT 1 FROM WS-SS-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_DTL_LINE_3") { M_PRINT_SS_DTL_LINE_3_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_DTL_LINE_3_EXIT
        /// </summary>
        private void M_PRINT_SS_DTL_LINE_3_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SS_DTL_LINE_3_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_DTL_LINE_3_EXIT") { M_PRINT_SS_PG_HDR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_PG_HDR
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  PRINT-SS-PAGE-HDR
        ///COMMENT:  DISABLE DUPLICATE FIELD SUPPRESSION FOR FIRST
        ///COMMENT:    LINE ON NEW PAGE
        ///COMMENT:  HANDLE BEFORE SPACING FOR PAGE HEADER LINES
        ///COMMENT:  FOR EACH PAGE HEADER SECTION LINE
        ///COMMENT:    - MOVE IMPORT ATTRIBUTES TO REPORT FIELDS
        ///COMMENT:    - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:    - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  HANDLE AFTER SPACING FOR PAGE HEADER LINES
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_SS_PG_HDR(string returnMethod = "")
        {
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((!(WS.WS_SS_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_SS_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-SS-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-SS-RPT-FTR-IS-PROCESSED )
                {
                    if ((WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            M_SS_UPDT_PG_NBR_FLDS("M_SS_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM SS-UPDT-PG-NBR-FLDS THRU SS-UPDT-PG-NBR-FLDS-EXIT.
            WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_SS_BODY_SUPPRESS_LINES.SetValue(WS.WS_SS_BODY_SECTION_LINES);                                 //COBOL==> MOVE WS-SS-BODY-SECTION-LINES TO WS-SS-BODY-SUPPRESS-LINES.
            WS.WS_SAVE_SECTION_PROCESSING_IND.SetValue(WS.WS_SS_SECTION_PROCESSING_IND);                        //COBOL==> MOVE WS-SS-SECTION-PROCESSING-IND TO WS-SAVE-SECTION-PROCESSING-IND.
            WS.WS_SS_SECTION_PROCESSING_IND.SetValue("P  ");                                                    //COBOL==> MOVE 'P  ' TO WS-SS-SECTION-PROCESSING-IND.
            if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SS_SECTION_PROCESSING_IND.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO WS-SS-SECTION-PROCESSING-IND
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_0);                                              //COBOL==> MOVE SS-PAGE-HDR-0 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("Y");                                                       //COBOL==> MOVE 'Y' TO WS-SS-CUR-PRINTING-PAGE-HDR
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_0);                                                        //COBOL==> MOVE SS-PAGE-HDR-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_SS_UPDT_PG_NBR_FLDS("M_SS_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM SS-UPDT-PG-NBR-FLDS THRU SS-UPDT-PG-NBR-FLDS-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_DATE.SetValue(WS.WS_CURRENT_DATE_8);                                                         //COBOL==> MOVE WS-CURRENT-DATE-8 TO IEF-DATE.
            WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN.
            WS.DT_FORMATTED_DATE.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO DT-FORMATTED-DATE
            if (!(WS.IEF_DATE.IsEqualTo(00000000)))                                                             //COBOL==> IF IEF-DATE NOT = 00000000
            {
                WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN
                M_FORMAT_DATE("M_FORMAT_DATE_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-DATE THRU FORMAT-DATE-EXIT
            }                                                                                                   //COBOL==> END-IF
            WS.SS_PAGE_HDR_1_D_OBJ21.SetValue(WS.DT_FORMATTED_DATE);                                            //COBOL==> MOVE DT-FORMATTED-DATE TO SS-PAGE-HDR-1-D-OBJ21.
            if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_1);                                              //COBOL==> MOVE SS-PAGE-HDR-1 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_1);                                                        //COBOL==> MOVE SS-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_1);                                                        //COBOL==> MOVE SS-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_TIME.SetValue(WS.WS_CURRENT_TIME_6);                                                         //COBOL==> MOVE WS-CURRENT-TIME-6 TO IEF-TIME.
            WS.DT_EDIT_PATTERN.SetValue("23:59:59");                                                            //COBOL==> MOVE '23:59:59' TO DT-EDIT-PATTERN.
            M_FORMAT_TIME("M_FORMAT_TIME_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-TIME THRU FORMAT-TIME-EXIT.
            WS.SS_PAGE_HDR_2_T_OBJ24.SetValue(WS.DT_FORMATTED_TIME);                                            //COBOL==> MOVE DT-FORMATTED-TIME TO SS-PAGE-HDR-2-T-OBJ24.
            if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_2);                                              //COBOL==> MOVE SS-PAGE-HDR-2 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_2);                                                        //COBOL==> MOVE SS-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_2);                                                        //COBOL==> MOVE SS-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_3);                                              //COBOL==> MOVE SS-PAGE-HDR-3 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_3);                                                        //COBOL==> MOVE SS-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_3);                                                        //COBOL==> MOVE SS-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_4);                                              //COBOL==> MOVE SS-PAGE-HDR-4 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_4);                                                        //COBOL==> MOVE SS-PAGE-HDR-4 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_4);                                                        //COBOL==> MOVE SS-PAGE-HDR-4 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WS_SS_CNTL_FTR.Value))                                                                    //COBOL==> IF NOT WS-SS-CNTL-FTR
            {
                WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_COLLECTION_OFFICER_0001_001);                            //COBOL==> MOVE I-COLLECTION-OFFICER-0001-001 TO WS-UNJUSTIFIED-TEXT-FIELD
                WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH
                WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD
                M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT
                WS.SS_PAGE_HDR_5_A_OBJ28.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                      //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO SS-PAGE-HDR-5-A-OBJ28
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(WS.P_COLLECTION_OFFICER_0001_001);                            //COBOL==> MOVE P-COLLECTION-OFFICER-0001-001 TO WS-UNJUSTIFIED-TEXT-FIELD
                WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH
                WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD
                M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT
                WS.SS_PAGE_HDR_5_A_OBJ28.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                      //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO SS-PAGE-HDR-5-A-OBJ28
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_5);                                              //COBOL==> MOVE SS-PAGE-HDR-5 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_5);                                                        //COBOL==> MOVE SS-PAGE-HDR-5 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_5);                                                        //COBOL==> MOVE SS-PAGE-HDR-5 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_6);                                              //COBOL==> MOVE SS-PAGE-HDR-6 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_6);                                                        //COBOL==> MOVE SS-PAGE-HDR-6 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_6);                                                        //COBOL==> MOVE SS-PAGE-HDR-6 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_7);                                              //COBOL==> MOVE SS-PAGE-HDR-7 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_7);                                                        //COBOL==> MOVE SS-PAGE-HDR-7 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_7);                                                        //COBOL==> MOVE SS-PAGE-HDR-7 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_8);                                              //COBOL==> MOVE SS-PAGE-HDR-8 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_8);                                                        //COBOL==> MOVE SS-PAGE-HDR-8 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_8);                                                        //COBOL==> MOVE SS-PAGE-HDR-8 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_SS_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SS-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_9);                                              //COBOL==> MOVE SS-PAGE-HDR-9 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_9);                                                        //COBOL==> MOVE SS-PAGE-HDR-9 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.SS_PAGE_HDR_9);                                                        //COBOL==> MOVE SS-PAGE-HDR-9 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_SS_LINEONNEWPG("M_PRINT_A_SS_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }       //COBOL==> PERFORM PRINT-A-SS-LINEONNEWPG THRU PRINT-A-SS-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_SS_LINE("M_PRINT_A_SS_LINE_EXIT"); if (Control.ExitProgram) { return; }                     //COBOL==> PERFORM PRINT-A-SS-LINE THRU PRINT-A-SS-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SS_SECTION_PROCESSING_IND.SetValue(WS.WS_SAVE_SECTION_PROCESSING_IND);                        //COBOL==> MOVE WS-SAVE-SECTION-PROCESSING-IND TO WS-SS-SECTION-PROCESSING-IND.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_SS_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                       //COBOL==> MOVE 'N' TO WS-SS-CUR-PRINTING-PAGE-HDR.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_PG_HDR") { M_PRINT_SS_PG_HDR_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_PG_HDR_EXIT
        /// </summary>
        private void M_PRINT_SS_PG_HDR_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SS_PG_HDR_EXIT") { return; }                                           //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_PG_HDR_EXIT") { M_PRINT_SS_RPT_FTR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_RPT_FTR
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE BEFORE SPACING FOR SS REPORT FOOTER
        ///COMMENT:  FOR EACH SS REPORT FOOTER SECTION LINE
        ///COMMENT:    - MOVE IMPORT ATTRIBUTES TO REPORT FIELDS
        ///COMMENT:    - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:    - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  HANDLE AFTER SPACING FOR REPORT FOOTER
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_SS_RPT_FTR(string returnMethod = "")
        {
            if (WS.SS_RPT_FTR_BEFORE_PG_BRK.IsEqualTo("Y"))                                                     //COBOL==> IF SS-RPT-FTR-BEFORE-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_PG_NUMBER_SAVE.SetValue(WS.WS_PG_NUMBER);                                                     //COBOL==> MOVE WS-PG-NUMBER TO WS-PG-NUMBER-SAVE
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            M_SS_UPDT_RPT_PG_NBR_FLDS("M_SS_UPDT_RPT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM SS-UPDT-RPT-PG-NBR-FLDS THRU SS-UPDT-RPT-PG-NBR-FLDS-EXIT.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.SS_RPT_FTR_SUPPRSS_BLANK);                                     //COBOL==> MOVE SS-RPT-FTR-SUPPRSS-BLANK TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_SAVE_PRINT_ATBOTTM.SetValue(WS.SS_RPT_FTR_PRINT_ATBOTTM);                                     //COBOL==> MOVE SS-RPT-FTR-PRINT-ATBOTTM TO WS-SAVE-PRINT-ATBOTTM.
            WS.WS_SS_SECTION_PROCESSING_IND.SetValue("F  ");                                                    //COBOL==> MOVE 'F  ' TO WS-SS-SECTION-PROCESSING-IND.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_SS_RPT_SECTION_PAGING("M_SS_RPT_SECTION_PAGING_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SS-RPT-SECTION-PAGING THRU SS-RPT-SECTION-PAGING-EXIT.
            if (WS.WS_SS_PG_HDR_LINE_QT.IsGreaterThan(0))                                                       //COBOL==> IF WS-SS-PG-HDR-LINE-QT > 0
            {
                if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                {
                    WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER_SAVE);                                                     //COBOL==> MOVE WS-PG-NUMBER-SAVE TO WS-PG-NUMBER
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.SS_RPT_FTR_0);                                                         //COBOL==> MOVE SS-RPT-FTR-0 TO WS-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_RPT_FTR_0);                                               //COBOL==> MOVE SS-RPT-FTR-0 TO WS-TEMP-SAVE-PRINT-LINE.
            M_PRINT_SS_RPT_LINE("M_PRINT_SS_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-SS-RPT-LINE THRU PRINT-SS-RPT-LINE-EXIT.
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_SS_LINE_SPACING);                                           //COBOL==> MOVE WS-SS-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_SS_RPT_SECTION_PAGING("M_SS_RPT_SECTION_PAGING_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM SS-RPT-SECTION-PAGING THRU SS-RPT-SECTION-PAGING-EXIT.
            if (WS.WS_SS_PG_HDR_LINE_QT.IsGreaterThan(0))                                                       //COBOL==> IF WS-SS-PG-HDR-LINE-QT > 0
            {
                if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                {
                    WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER_SAVE);                                                     //COBOL==> MOVE WS-PG-NUMBER-SAVE TO WS-PG-NUMBER
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.SS_RPT_FTR_1);                                                         //COBOL==> MOVE SS-RPT-FTR-1 TO WS-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.SS_RPT_FTR_1);                                               //COBOL==> MOVE SS-RPT-FTR-1 TO WS-TEMP-SAVE-PRINT-LINE.
            M_PRINT_SS_RPT_LINE("M_PRINT_SS_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-SS-RPT-LINE THRU PRINT-SS-RPT-LINE-EXIT.
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_SS_SECTION_PROCESSING_IND.SetValueWithSpaces();                                               //COBOL==> MOVE SPACES TO WS-SS-SECTION-PROCESSING-IND.
            if ((WS.WS_SS_PAGE_SUPPRESS_AFTER.IsEqualTo("N"))
             && (WS.SS_RPT_FTR_AFTER_PG_BRK.IsEqualTo("Y")))  //COBOL==> IF WS-SS-PAGE-SUPPRESS-AFTER = 'N' AND SS-RPT-FTR-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (WS.SS_RPT_FTR_RESETPG_AFTER.IsEqualTo("Y"))                                                     //COBOL==> IF SS-RPT-FTR-RESETPG-AFTER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("Y");                                                                //COBOL==> MOVE 'Y' TO WS-RESET-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_RPT_FTR") { M_PRINT_SS_RPT_FTR_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_SS_RPT_FTR_EXIT
        /// </summary>
        private void M_PRINT_SS_RPT_FTR_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_SS_RPT_FTR_EXIT") { return; }                                          //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_SS_RPT_FTR_EXIT") { M_SS_RPT_SECTION_PAGING(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SS_RPT_SECTION_PAGING
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE PAGING FOR SS REPORT SECTIONS
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_SS_RPT_SECTION_PAGING(string returnMethod = "")
        {
            WS.WS_TEMP_LINE_QT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-TEMP-LINE-QT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
            if ((WS.WS_TEMP_LINE_QT.IsGreaterThan(WS.WS_PG_LENGTH))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-TEMP-LINE-QT > WS-PG-LENGTH OR WS-PG-BRK-FLAG = 'Y'
            {
                if (WS.WS_RESET_PG_NUMBER.IsEqualTo("N"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'N'
                {
                    WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                }                                                                                                   //COBOL==> END-IF
                M_SS_UPDT_RPT_PG_NBR_FLDS("M_SS_UPDT_RPT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM SS-UPDT-RPT-PG-NBR-FLDS THRU SS-UPDT-RPT-PG-NBR-FLDS-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_SS_UPDT_RPT_PG_NBR_FLDS("M_SS_UPDT_RPT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM SS-UPDT-RPT-PG-NBR-FLDS THRU SS-UPDT-RPT-PG-NBR-FLDS-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_SS_RPT_SECTION_PAGING") { M_SS_RPT_SECTION_PAGING_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SS_RPT_SECTION_PAGING_EXIT
        /// </summary>
        private void M_SS_RPT_SECTION_PAGING_EXIT(string returnMethod = "")
        {
            if (returnMethod != "" && returnMethod != "M_SS_RPT_SECTION_PAGING_EXIT") { M_SS_UPDT_RPT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SS_UPDT_RPT_PG_NBR_FLDS
        /// </summary>
        private void M_SS_UPDT_RPT_PG_NBR_FLDS(string returnMethod = "")
        {
            //COMMENT:     STATEMENT BELOW EXISTS TO ENSURE PARAGRAPH NEVER EMPTY
            WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER);                                                          //COBOL==> MOVE WS-PG-NUMBER TO WS-PG-NUMBER.
            if (returnMethod != "" && returnMethod != "M_SS_UPDT_RPT_PG_NBR_FLDS") { M_SS_UPDT_RPT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_SS_UPDT_RPT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_SS_UPDT_RPT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_SS_UPDT_RPT_PG_NBR_FLDS_EXIT") { return; }                                   //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_SS_UPDT_RPT_PG_NBR_FLDS_EXIT") { M_MAIN_MAINLINE_DTL(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_MAINLINE_DTL
        /// </summary>
        private void M_MAIN_MAINLINE_DTL(string returnMethod = "")
        {
            if (((WS.WS_MAIN_DTL_RPT_REQUESTED.Value)
             && (!(LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("S"))))
             || ((WS.WS_MAIN_SUMMARY_RPT_REQUESTED.Value)
             && (LS.LS_RUNTIME_RPT_TYPE_CD.IsEqualTo("D"))))  //COBOL==> IF ( WS-MAIN-DTL-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD NOT = 'S' ) OR ( WS-MAIN-SUMMARY-RPT-REQUESTED AND LS-RUNTIME-RPT-TYPE-CD = 'D' )
            {
                WS.WS_MAIN_SECTION_PROCESSING_IND.SetValue("B  ");                                                  //COBOL==> MOVE 'B  ' TO WS-MAIN-SECTION-PROCESSING-IND
                WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.MAIN_DTL_LINE_SUPPRSS_BLANK);                                  //COBOL==> MOVE MAIN-DTL-LINE-SUPPRSS-BLANK TO WS-SUPPRSS-BLANK-LINE
                M_PRINT_MAIN_DTL_LINE_0("M_PRINT_MAIN_DTL_LINE_0_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-0 THRU PRINT-MAIN-DTL-LINE-0-EXIT
                M_PRINT_MAIN_DTL_LINE_1("M_PRINT_MAIN_DTL_LINE_1_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-1 THRU PRINT-MAIN-DTL-LINE-1-EXIT
                M_PRINT_MAIN_DTL_LINE_2("M_PRINT_MAIN_DTL_LINE_2_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-2 THRU PRINT-MAIN-DTL-LINE-2-EXIT
                M_PRINT_MAIN_DTL_LINE_3("M_PRINT_MAIN_DTL_LINE_3_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM PRINT-MAIN-DTL-LINE-3 THRU PRINT-MAIN-DTL-LINE-3-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_MAIN_SECTION_PROCESSING_IND.SetValueWithSpaces();                                             //COBOL==> MOVE SPACES TO WS-MAIN-SECTION-PROCESSING-IND.
            if (WS.MAIN_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                   //COBOL==> IF MAIN-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_MAIN_MAINLINE_DTL") { M_MAIN_MAINLINE_DTL_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_MAINLINE_DTL_EXIT
        /// </summary>
        private void M_MAIN_MAINLINE_DTL_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_MAIN_MAINLINE_DTL_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_MAIN_MAINLINE_DTL_EXIT") { M_PRINT_MAIN_RPT_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_RPT_LINE
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  THIS SECTION PRINTS ALL MAIN REPORT LINES.
        ///COMMENT:  IT IS CALLED FOR EACH REPORT LINE. IT CONTAINS:
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE PRINTING A LINE
        ///COMMENT:  - A COMMON ROUTINE TO HANDLE DETAIL LINE PAGING
        ///COMMENT:  - ALSO CALL PRINT-A-MAIN-LINE
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_MAIN_RPT_LINE(string returnMethod = "")
        {
            M_CHECK_FOR_MAIN_NEW_PAGE("M_CHECK_FOR_MAIN_NEW_PAGE_EXIT"); if (Control.ExitProgram) { return; }     //COBOL==> PERFORM CHECK-FOR-MAIN-NEW-PAGE THRU CHECK-FOR-MAIN-NEW-PAGE-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                WS.WS_TEMP_PRINT_LINE.SetValue(WS.WS_PRINT_LINE);                                                   //COBOL==> MOVE WS-PRINT-LINE TO WS-TEMP-PRINT-LINE
                WS.WS_TEMP_PRINT_LINE_SPACING.SetValue(WS.WS_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-PRINT-LINE-SPACING TO WS-TEMP-PRINT-LINE-SPACING
                if (WS.WS_LINE_COUNT.IsGreaterThan(0))                                                              //COBOL==> IF WS-LINE-COUNT > 0
                {
                    if ((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_MAIN_PG_FTR_LINE_QT.AsDecimal()).IsLessThanOrEqualTo(WS.WS_PG_LENGTH))  //COBOL==> IF WS-LINE-COUNT + WS-MAIN-PG-FTR-LINE-QT <= WS-PG-LENGTH
                    {
                        if (WS.MAIN_PAGE_FTR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-FTR-PRINT-FLAG = 'Y'
                        {
                            WS.WS_PG_BRK_FLAG_SAVE.SetValue(WS.WS_PG_BRK_FLAG);                                                 //COBOL==> MOVE WS-PG-BRK-FLAG TO WS-PG-BRK-FLAG-SAVE
                            WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                            M_PRINT_MAIN_PG_FTR("M_PRINT_MAIN_PG_FTR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-FTR THRU PRINT-MAIN-PG-FTR-EXIT
                            WS.WS_PG_BRK_FLAG.SetValue(WS.WS_PG_BRK_FLAG_SAVE);                                                 //COBOL==> MOVE WS-PG-BRK-FLAG-SAVE TO WS-PG-BRK-FLAG
                            WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    if ((!(WS.WS_MAIN_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_MAIN_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-MAIN-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-MAIN-RPT-FTR-IS-PROCESSED )
                    {
                        if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
                        {
                            if (WS.MAIN_PAGE_FTR_PRINT_FLAG.IsEqualTo("N"))                                                     //COBOL==> IF MAIN-PAGE-FTR-PRINT-FLAG = 'N'
                            {
                                WS.MAIN_PAGE_FTR_PRINT_FLAG.SetValue("Y");                                                          //COBOL==> MOVE 'Y' TO MAIN-PAGE-FTR-PRINT-FLAG
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.MAIN_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-HDR-PRINT-FLAG = 'Y'
                {
                    WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                    if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                    {
                        if (WS.MAIN_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_MAIN_PG_HDR("M_PRINT_MAIN_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-HDR THRU PRINT-MAIN-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
                    WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                         //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-TEMP-SAVE-PRINT-LINE
                    WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_TEMP_PRINT_LINE_SPACING);                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE-SPACING TO WS-PRINT-LINE-SPACING
                    M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
                }                                                                                                   //COBOL==> END-IF
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_PRINT_LINE);                                                   //COBOL==> MOVE WS-TEMP-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((WS.WS_MAIN_PRINT_DUPLICATES.Value)
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))        //COBOL==> IF WS-MAIN-PRINT-DUPLICATES AND WS-NOT-IN-CONTROL-BRK
                {
                    WS.WS_MAIN_BODY_SUPPRESS_LINES.SetValue(WS.WS_MAIN_BODY_SUPPRESS_LINES.AsInt() - 1);                //COBOL==> SUBTRACT 1 FROM WS-MAIN-BODY-SUPPRESS-LINES
                    if (WS.WS_MAIN_BODY_SUPPRESS_LINES.IsEqualTo(0))                                                    //COBOL==> IF WS-MAIN-BODY-SUPPRESS-LINES = 0
                    {
                        WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    if (WS.MAIN_PAGE_FTR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-FTR-PRINT-FLAG = 'Y'
                    {
                        M_PRINT_MAIN_PG_FTR("M_PRINT_MAIN_PG_FTR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-FTR THRU PRINT-MAIN-PG-FTR-EXIT
                    }                                                                                                   //COBOL==> END-IF
                    if (WS.MAIN_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-HDR-PRINT-FLAG = 'Y'
                    {
                        WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE
                        if (WS.MAIN_PAGE_HDR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-HDR-PRINT-FLAG = 'Y'
                        {
                            M_PRINT_MAIN_PG_HDR("M_PRINT_MAIN_PG_HDR_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-MAIN-PG-HDR THRU PRINT-MAIN-PG-HDR-EXIT
                        }                                                                                                   //COBOL==> END-IF
                        WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE
                        M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_RPT_LINE") { M_PRINT_MAIN_RPT_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_RPT_LINE_EXIT
        /// </summary>
        private void M_PRINT_MAIN_RPT_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_RPT_LINE_EXIT") { return; }                                       //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_RPT_LINE_EXIT") { M_PRINT_A_MAIN_LINEONNEWPG(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_MAIN_LINEONNEWPG
        /// </summary>
        private void M_PRINT_A_MAIN_LINEONNEWPG(string returnMethod = "")
        {
            if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
            {
                if (((WS.WS_MAIN_CURRENTLY_WRAPPING.IsEqualTo("N"))
             && (WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (WS.WS_CONTROL_BRK_FLAG.IsEqualTo("N")))  //COBOL==> IF WS-MAIN-CURRENTLY-WRAPPING = 'N' AND WS-MAIN-CUR-PRINTING-PAGE-HDR = 'N' AND WS-CONTROL-BRK-FLAG = 'N'
                {
                    WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
                }                                                                                                   //COBOL==> END-IF
                WS.WS_MAIN_PAGE_DTL_LINES.SetValue(4);                                                              //COBOL==> MOVE 4 TO WS-MAIN-PAGE-DTL-LINES
                if (((WS.WS_MAIN_BODY_IS_PROCESSED.Value)
             || (WS.WS_MAIN_RPT_HDR_IS_PROCESSED.Value))
             || (WS.WS_MAIN_RPT_FTR_IS_PROCESSED.Value))  //COBOL==> IF WS-MAIN-BODY-IS-PROCESSED OR WS-MAIN-RPT-HDR-IS-PROCESSED OR WS-MAIN-RPT-FTR-IS-PROCESSED
                {
                    if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
                    {
                        WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                        WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((!(WS.WS_MAIN_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_MAIN_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-MAIN-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-MAIN-RPT-FTR-IS-PROCESSED )
                        {
                            WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(1))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 1
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_SPACE_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-SPACE-RECORD AFTER ADVANCING PAGE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                    WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    WS.WS_LINE_COUNT.SetValue(1);                                                                       //COBOL==> MOVE 1 TO WS-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(WS.WS_PRINT_LINE_SPACING.AsDecimal() - 1m);                //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PRINT-LINE-SPACING - 1
                    WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_MAIN_LINEONNEWPG") { M_PRINT_A_MAIN_LINEONNEWPG_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_MAIN_LINEONNEWPG_EXIT
        /// </summary>
        private void M_PRINT_A_MAIN_LINEONNEWPG_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_MAIN_LINEONNEWPG_EXIT") { return; }                                  //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_MAIN_LINEONNEWPG_EXIT") { M_PRINT_A_MAIN_LINE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_MAIN_LINE
        /// </summary>
        private void M_PRINT_A_MAIN_LINE(string returnMethod = "")
        {
            if (((((((WS.WS_MAIN_PAGE_DTL_LINES.IsGreaterThan(0))
             && (WS.WS_PREV_SUBRPT_CODE.IsEqualTo(WS.WS_CUR_SUBRPT_CODE)))
             && (!(WS.WS_MAIN_CURRENTLY_WRAPPING.IsEqualTo("Y"))))
             && (WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.IsEqualTo("N")))
             && (!(WS.WS_MAIN_RPT_HDR_IS_PROCESSED.Value)))
             && (!(WS.WS_MAIN_PG_HDR_IS_PROCESSED.Value)))
             && (WS.WS_NOT_IN_CONTROL_BRK.Value))  //COBOL==> IF WS-MAIN-PAGE-DTL-LINES > 0 AND WS-PREV-SUBRPT-CODE = WS-CUR-SUBRPT-CODE AND WS-MAIN-CURRENTLY-WRAPPING NOT = 'Y' AND WS-MAIN-CUR-PRINTING-PAGE-HDR = 'N' AND NOT WS-MAIN-RPT-HDR-IS-PROCESSED AND NOT WS-MAIN-PG-HDR-IS-PROCESSED AND WS-NOT-IN-CONTROL-BRK
            {
                WS.WS_PRINT_LINE.SetValue(WS.WS_TEMP_SAVE_PRINT_LINE);                                              //COBOL==> MOVE WS-TEMP-SAVE-PRINT-LINE TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_PRINT_LINE_SPACING.IsGreaterThan(0))                                                      //COBOL==> IF WS-PRINT-LINE-SPACING > 0
            {
                if ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("N"))
             || ((WS.WS_SUPPRSS_BLANK_LINE.IsEqualTo("Y"))
             && (!(WS.WS_PRINT_RECORD.IsSpaces()))))  //COBOL==> IF WS-SUPPRSS-BLANK-LINE = 'N' OR ( WS-SUPPRSS-BLANK-LINE = 'Y' AND WS-PRINT-RECORD NOT = SPACES )
                {
                    if (WS.WS_VERY_FIRST_WRITE.IsEqualTo("Y"))                                                          //COBOL==> IF WS-VERY-FIRST-WRITE = 'Y'
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.PAGEBREAK, 0, 1);        //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING PAGE
                        WS.WS_VERY_FIRST_WRITE.SetValue("N");                                                               //COBOL==> MOVE 'N' TO WS-VERY-FIRST-WRITE
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        FD.REPORT_FILE.WriteLinePrinter(WS.WS_PRINT_RECORD.AsString(), PrinterControl.LINEBREAK, 0, WS.WS_PRINT_LINE_SPACING.AsInt());  //COBOL==> WRITE REPORT-LINE FROM WS-PRINT-RECORD AFTER ADVANCING WS-PRINT-LINE-SPACING LINES
                    }                                                                                                   //COBOL==> END-IF
                    WS.WS_LINE_COUNT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-LINE-COUNT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_MAIN_LINE") { M_PRINT_A_MAIN_LINE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_A_MAIN_LINE_EXIT
        /// </summary>
        private void M_PRINT_A_MAIN_LINE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_A_MAIN_LINE_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_A_MAIN_LINE_EXIT") { M_CHECK_FOR_MAIN_NEW_PAGE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_MAIN_NEW_PAGE
        /// </summary>
        private void M_CHECK_FOR_MAIN_NEW_PAGE(string returnMethod = "")
        {
            WS.WS_TEMP_LINE_QT.SetComputeValue(WS.WS_LINE_COUNT.AsDecimal() + WS.WS_PRINT_LINE_SPACING.AsDecimal());  //COBOL==> COMPUTE WS-TEMP-LINE-QT = WS-LINE-COUNT + WS-PRINT-LINE-SPACING
            if (WS.MAIN_PAGE_FTR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-FTR-PRINT-FLAG = 'Y'
            {
                WS.WS_TEMP_LINE_QT.SetComputeValue(WS.WS_TEMP_LINE_QT.AsDecimal() + WS.WS_MAIN_PG_FTR_LINE_QT.AsDecimal());  //COBOL==> COMPUTE WS-TEMP-LINE-QT = WS-TEMP-LINE-QT + WS-MAIN-PG-FTR-LINE-QT
            }                                                                                                   //COBOL==> END-IF
            if (WS.WS_TEMP_LINE_QT.IsGreaterThan(WS.WS_PG_LENGTH))                                              //COBOL==> IF WS-TEMP-LINE-QT > WS-PG-LENGTH
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_MAIN_NEW_PAGE") { M_CHECK_FOR_MAIN_NEW_PAGE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_CHECK_FOR_MAIN_NEW_PAGE_EXIT
        /// </summary>
        private void M_CHECK_FOR_MAIN_NEW_PAGE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_CHECK_FOR_MAIN_NEW_PAGE_EXIT") { return; }                                   //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_CHECK_FOR_MAIN_NEW_PAGE_EXIT") { M_MAIN_CALC_4_PRINT_BOTTM(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_CALC_4_PRINT_BOTTM
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  FOR THE MAIN REPORT
        ///COMMENT:  THIS PARAGRAPH CALCULATES THE NUMBER OF LINES
        ///COMMENT:  TO ADVANCE FOR A SECTION WHEN THE SECTION IS
        ///COMMENT:  SPECIFIED TO HAVE PRINT AT BOTTOM
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_MAIN_CALC_4_PRINT_BOTTM(string returnMethod = "")
        {
            if (WS.WS_SAVE_PRINT_ATBOTTM.IsEqualTo("Y"))                                                        //COBOL==> IF WS-SAVE-PRINT-ATBOTTM = 'Y'
            {
                WS.WS_SAVE_PRINT_ATBOTTM.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SAVE-PRINT-ATBOTTM
                if (WS.MAIN_PAGE_FTR_PRINT_FLAG.IsEqualTo("Y"))                                                     //COBOL==> IF MAIN-PAGE-FTR-PRINT-FLAG = 'Y'
                {
                    WS.WS_TEMP_LINE_QT.SetValue(WS.WS_MAIN_PG_FTR_LINE_QT);                                             //COBOL==> MOVE WS-MAIN-PG-FTR-LINE-QT TO WS-TEMP-LINE-QT
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_TEMP_LINE_QT.SetValueWithZeroes();                                                            //COBOL==> MOVE 0 TO WS-TEMP-LINE-QT
                }                                                                                                   //COBOL==> END-IF
                if (WS.WS_PG_LENGTH.IsLessThan(((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_TEMP_LINE_QT.AsDecimal()) + WS.WS_CUR_SECTION_LINE_QT.AsDecimal())))  //COBOL==> IF WS-PG-LENGTH < ( WS-LINE-COUNT + WS-TEMP-LINE-QT + WS-CUR-SECTION-LINE-QT )
                {
                    if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
                {
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue(((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.WS_TEMP_LINE_COUNT.SetValue(WS.WS_LINE_COUNT);                                                   //COBOL==> MOVE WS-LINE-COUNT TO WS-TEMP-LINE-COUNT
                    WS.WS_PRINT_LINE_SPACING.SetComputeValue((((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_TEMP_LINE_COUNT.AsDecimal()) - WS.WS_TEMP_LINE_QT.AsDecimal()) - WS.WS_CUR_SECTION_LINE_QT.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-PRINT-LINE-SPACING = WS-PG-LENGTH - WS-TEMP-LINE-COUNT - WS-TEMP-LINE-QT - WS-CUR-SECTION-LINE-QT + 1
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_MAIN_CALC_4_PRINT_BOTTM") { M_MAIN_CALC_4_PRINT_BOTTM_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_CALC_4_PRINT_BOTTM_EXIT
        /// </summary>
        private void M_MAIN_CALC_4_PRINT_BOTTM_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_MAIN_CALC_4_PRINT_BOTTM_EXIT") { return; }                                   //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_MAIN_CALC_4_PRINT_BOTTM_EXIT") { M_MAIN_UPDT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_UPDT_PG_NBR_FLDS
        /// </summary>
        private void M_MAIN_UPDT_PG_NBR_FLDS(string returnMethod = "")
        {
            WS.MAIN_PAGE_HDR_0_P_OBJ26.SetValue(WS.WS_PG_NUMBER);                                               //COBOL==> MOVE WS-PG-NUMBER TO MAIN-PAGE-HDR-0-P-OBJ26.
            if (returnMethod != "" && returnMethod != "M_MAIN_UPDT_PG_NBR_FLDS") { M_MAIN_UPDT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_UPDT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_MAIN_UPDT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_MAIN_UPDT_PG_NBR_FLDS_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_MAIN_UPDT_PG_NBR_FLDS_EXIT") { M_PRINT_MAIN_DTL_LINE_0(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_0
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE BEFORE SPACING FOR MAIN REPORT BODY (DETAIL LINES)
        ///COMMENT:  FOR EACH DETAIL LINE...
        ///COMMENT:  - POPULATE THE OUTPUT FIELDS FROM THE IMPORTED ATTRIBUTES
        ///COMMENT:  - REPLACE ATTRIBUTE VALUES WITH SPACES IF DUPLICATE
        ///COMMENT:    SUPPRESSION ON AND NOT FIRST LINE OF PAGE OR
        ///COMMENT:    FIRST LINE AFTER CONTROL BREAK
        ///COMMENT:  - MOVE DETAIL LINE TO THE PRINT LINE
        ///COMMENT:  - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:  - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  - REPEAT AS NECESSARY FOR TEXT WRAPPING ATTRIBUTES
        ///COMMENT:  HANDLE AFTER SPACING FOR BODY (DETAIL LINES)
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_MAIN_DTL_LINE_0(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_0);                                                 //COBOL==> MOVE MAIN-DTL-LINE-0 TO SAVE-FOR-WRAP-TEXT.
            if (WS.MAIN_DTL_LINE_KEEP_TOGETHER.IsEqualTo("Y"))                                                  //COBOL==> IF MAIN-DTL-LINE-KEEP-TOGETHER = 'Y'
            {
                if (((WS.WS_LINE_COUNT.AsDecimal() + WS.WS_MAIN_DTL_LINE_QT.AsDecimal()) + WS.WS_MAIN_PG_FTR_LINE_QT.AsDecimal()).IsGreaterThan(WS.WS_PG_LENGTH))  //COBOL==> IF ( WS-LINE-COUNT + WS-MAIN-DTL-LINE-QT + WS-MAIN-PG-FTR-LINE-QT ) > WS-PG-LENGTH
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("Y"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'Y'
                {
                    WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_1_0003_005);                                 //COBOL==> MOVE I-SUB-HEADING-1-0003-005 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.MAIN_DTL_LINE_0_A_OBJ1.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                     //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO MAIN-DTL-LINE-0-A-OBJ1.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_0);                                            //COBOL==> MOVE MAIN-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_0);                                            //COBOL==> MOVE MAIN-DTL-LINE-0 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_0);                                                      //COBOL==> MOVE MAIN-DTL-LINE-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_0.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-0.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_0") { M_PRINT_MAIN_DTL_LINE_0_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_0_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_0_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_0_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_0_EXIT") { M_PRINT_MAIN_DTL_LINE_1(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_1
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_1(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_1);                                                 //COBOL==> MOVE MAIN-DTL-LINE-1 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_2_0003_006);                                 //COBOL==> MOVE I-SUB-HEADING-2-0003-006 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(14);                                                     //COBOL==> MOVE 14 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ2.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                     //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO MAIN-DTL-LINE-1-A-OBJ2.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0004_008);                                                      //COBOL==> MOVE I-AMOUNT1-0004-008 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0004_008);                                                     //COBOL==> MOVE I-AMOUNT1-0004-008 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0004_008.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0004-008 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ33);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ33 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ33.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ33.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0006_010);                                                      //COBOL==> MOVE I-AMOUNT1-0006-010 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0006_010);                                                     //COBOL==> MOVE I-AMOUNT1-0006-010 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0006_010.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0006-010 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ34);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ34 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ34.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ34.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0008_012);                                                      //COBOL==> MOVE I-AMOUNT1-0008-012 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0008_012);                                                     //COBOL==> MOVE I-AMOUNT1-0008-012 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0008_012.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0008-012 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ35);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ35 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ35.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ35.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0010_014);                                                      //COBOL==> MOVE I-AMOUNT1-0010-014 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0010_014);                                                     //COBOL==> MOVE I-AMOUNT1-0010-014 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0010_014.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0010-014 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ36);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ36 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ36.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ36.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0012_016);                                                      //COBOL==> MOVE I-AMOUNT1-0012-016 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0012_016);                                                     //COBOL==> MOVE I-AMOUNT1-0012-016 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0012_016.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0012-016 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ37);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ37 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ37.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ37.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0014_018);                                                      //COBOL==> MOVE I-AMOUNT1-0014-018 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0014_018);                                                     //COBOL==> MOVE I-AMOUNT1-0014-018 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0014_018.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0014-018 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ38);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ38 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ38.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ38.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0016_020);                                                      //COBOL==> MOVE I-AMOUNT1-0016-020 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0016_020);                                                     //COBOL==> MOVE I-AMOUNT1-0016-020 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0016_020.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0016-020 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ39);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ39 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ39.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ39.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0018_022);                                                      //COBOL==> MOVE I-AMOUNT1-0018-022 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0018_022);                                                     //COBOL==> MOVE I-AMOUNT1-0018-022 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0018_022.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0018-022 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ40);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ40 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ40.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ40.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0020_024);                                                      //COBOL==> MOVE I-AMOUNT1-0020-024 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0020_024);                                                     //COBOL==> MOVE I-AMOUNT1-0020-024 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0020_024.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0020-024 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ41);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ41 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ41.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ41.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0022_026);                                                      //COBOL==> MOVE I-AMOUNT1-0022-026 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0022_026);                                                     //COBOL==> MOVE I-AMOUNT1-0022-026 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0022_026.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0022-026 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ42);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ42 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ42.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ42.
            WS.EP_DECIMAL.SetValue(LS.I_AMOUNT1_0024_028);                                                      //COBOL==> MOVE I-AMOUNT1-0024-028 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_AMOUNT1_0024_028);                                                     //COBOL==> MOVE I-AMOUNT1-0024-028 TO EP-INTEGER2.
            if (LS.I_AMOUNT1_0024_028.IsLessThan(ZEROS))                                                        //COBOL==> IF I-AMOUNT1-0024-028 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ43);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ43 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_1_A_OBJ43.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-1-A-OBJ43.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_1);                                            //COBOL==> MOVE MAIN-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_1);                                            //COBOL==> MOVE MAIN-DTL-LINE-1 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_1);                                                      //COBOL==> MOVE MAIN-DTL-LINE-1 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_1.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-1.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_1") { M_PRINT_MAIN_DTL_LINE_1_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_1_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_1_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_1_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_1_EXIT") { M_PRINT_MAIN_DTL_LINE_2(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_2
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_2(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_2);                                                 //COBOL==> MOVE MAIN-DTL-LINE-2 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_SUB_HEADING_3_0003_007);                                 //COBOL==> MOVE I-SUB-HEADING-3-0003-007 TO WS-UNJUSTIFIED-TEXT-FIELD.
            WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(5);                                                      //COBOL==> MOVE 5 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH.
            WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD.
            M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ3.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                     //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO MAIN-DTL-LINE-2-A-OBJ3.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0005_009);                                                        //COBOL==> MOVE I-COUNT-0005-009 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0005_009);                                                       //COBOL==> MOVE I-COUNT-0005-009 TO EP-INTEGER2.
            if (LS.I_COUNT_0005_009.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0005-009 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ4);                                             //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ4 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ4.SetValue(WS.EP_FORMATTED_VALUE);                                          //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ4.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0007_011);                                                        //COBOL==> MOVE I-COUNT-0007-011 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0007_011);                                                       //COBOL==> MOVE I-COUNT-0007-011 TO EP-INTEGER2.
            if (LS.I_COUNT_0007_011.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0007-011 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ5);                                             //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ5 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ5.SetValue(WS.EP_FORMATTED_VALUE);                                          //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ5.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0009_013);                                                        //COBOL==> MOVE I-COUNT-0009-013 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0009_013);                                                       //COBOL==> MOVE I-COUNT-0009-013 TO EP-INTEGER2.
            if (LS.I_COUNT_0009_013.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0009-013 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ6);                                             //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ6 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ6.SetValue(WS.EP_FORMATTED_VALUE);                                          //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ6.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0011_015);                                                        //COBOL==> MOVE I-COUNT-0011-015 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0011_015);                                                       //COBOL==> MOVE I-COUNT-0011-015 TO EP-INTEGER2.
            if (LS.I_COUNT_0011_015.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0011-015 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ7);                                             //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ7 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ7.SetValue(WS.EP_FORMATTED_VALUE);                                          //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ7.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0013_017);                                                        //COBOL==> MOVE I-COUNT-0013-017 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0013_017);                                                       //COBOL==> MOVE I-COUNT-0013-017 TO EP-INTEGER2.
            if (LS.I_COUNT_0013_017.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0013-017 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ8);                                             //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ8 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ8.SetValue(WS.EP_FORMATTED_VALUE);                                          //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ8.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0015_019);                                                        //COBOL==> MOVE I-COUNT-0015-019 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0015_019);                                                       //COBOL==> MOVE I-COUNT-0015-019 TO EP-INTEGER2.
            if (LS.I_COUNT_0015_019.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0015-019 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ9);                                             //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ9 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ9.SetValue(WS.EP_FORMATTED_VALUE);                                          //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ9.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0017_021);                                                        //COBOL==> MOVE I-COUNT-0017-021 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0017_021);                                                       //COBOL==> MOVE I-COUNT-0017-021 TO EP-INTEGER2.
            if (LS.I_COUNT_0017_021.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0017-021 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ10);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ10 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ10.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ10.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0019_023);                                                        //COBOL==> MOVE I-COUNT-0019-023 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0019_023);                                                       //COBOL==> MOVE I-COUNT-0019-023 TO EP-INTEGER2.
            if (LS.I_COUNT_0019_023.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0019-023 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ11);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ11 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ11.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ11.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0021_025);                                                        //COBOL==> MOVE I-COUNT-0021-025 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0021_025);                                                       //COBOL==> MOVE I-COUNT-0021-025 TO EP-INTEGER2.
            if (LS.I_COUNT_0021_025.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0021-025 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ12);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ12 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(9);                                                                 //COBOL==> MOVE 9 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ12.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ12.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0023_027);                                                        //COBOL==> MOVE I-COUNT-0023-027 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0023_027);                                                       //COBOL==> MOVE I-COUNT-0023-027 TO EP-INTEGER2.
            if (LS.I_COUNT_0023_027.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0023-027 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ13);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ13 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ13.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ13.
            WS.EP_DECIMAL.SetValue(LS.I_COUNT_0025_029);                                                        //COBOL==> MOVE I-COUNT-0025-029 TO EP-DECIMAL.
            WS.EP_INTEGER2.SetValue(LS.I_COUNT_0025_029);                                                       //COBOL==> MOVE I-COUNT-0025-029 TO EP-INTEGER2.
            if (LS.I_COUNT_0025_029.IsLessThan(ZEROS))                                                          //COBOL==> IF I-COUNT-0025-029 LESS THAN ZERO
            {
                WS.EP_SIGN.SetValue("-");                                                                           //COBOL==> MOVE '-' TO EP-SIGN
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.EP_SIGN.SetValue("+");                                                                           //COBOL==> MOVE '+' TO EP-SIGN
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_EDIT_PATTERN.SetValue(WS.MAIN_EDIT_PATTERN_OBJ14);                                            //COBOL==> MOVE MAIN-EDIT-PATTERN-OBJ14 TO EP-EDIT-PATTERN.
            WS.EP_EDIT_PATTERN_LEN.SetValue(8);                                                                 //COBOL==> MOVE 8 TO EP-EDIT-PATTERN-LEN.
            M_NUMERIC_FORMATTER("M_NUMERIC_FORMATTER_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM NUMERIC-FORMATTER THRU NUMERIC-FORMATTER-EXIT.
            WS.MAIN_DTL_LINE_2_A_OBJ14.SetValue(WS.EP_FORMATTED_VALUE);                                         //COBOL==> MOVE EP-FORMATTED-VALUE TO MAIN-DTL-LINE-2-A-OBJ14.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_2);                                            //COBOL==> MOVE MAIN-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_2);                                            //COBOL==> MOVE MAIN-DTL-LINE-2 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_2);                                                      //COBOL==> MOVE MAIN-DTL-LINE-2 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            WS.MAIN_DTL_LINE_2.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-2.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_2") { M_PRINT_MAIN_DTL_LINE_2_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_2_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_2_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_2_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_2_EXIT") { M_PRINT_MAIN_DTL_LINE_3(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_3
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_3(string returnMethod = "")
        {
            if (WS.MAIN_DTL_LINE_BEFORE_PG_BRK.IsEqualTo("N"))                                                  //COBOL==> IF MAIN-DTL-LINE-BEFORE-PG-BRK = 'N'
            {
                if (WS.WS_LINE_COUNT.IsEqualTo(0))                                                                  //COBOL==> IF WS-LINE-COUNT = 0
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                    M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            WS.SAVE_FOR_WRAP_TEXT.SetValue(WS.MAIN_DTL_LINE_3);                                                 //COBOL==> MOVE MAIN-DTL-LINE-3 TO SAVE-FOR-WRAP-TEXT.
            WS.WS_MAIN_CURRENTLY_WRAPPING.SetValue("N");                                                        //COBOL==> MOVE 'N' TO WS-MAIN-CURRENTLY-WRAPPING.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_3);                                            //COBOL==> MOVE MAIN-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_3);                                            //COBOL==> MOVE MAIN-DTL-LINE-3 TO WS-TEMP-SAVE-PRINT-LINE.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_DTL_LINE_3);                                                      //COBOL==> MOVE MAIN-DTL-LINE-3 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_MAIN_RPT_LINE("M_PRINT_MAIN_RPT_LINE_EXIT"); if (Control.ExitProgram) { return; }             //COBOL==> PERFORM PRINT-MAIN-RPT-LINE THRU PRINT-MAIN-RPT-LINE-EXIT.
            if (WS.MAIN_DTL_LINE_AFTER_PG_BRK.IsEqualTo("Y"))                                                   //COBOL==> IF MAIN-DTL-LINE-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            WS.MAIN_DTL_LINE_3.SetValue(WS.SAVE_FOR_WRAP_TEXT);                                                 //COBOL==> MOVE SAVE-FOR-WRAP-TEXT TO MAIN-DTL-LINE-3.
            WS.WS_MAIN_DISABLE_SUPPRESS.SetValue("N");                                                          //COBOL==> MOVE 'N' TO WS-MAIN-DISABLE-SUPPRESS.
            WS.WS_MAIN_PAGE_DTL_LINES.SetValue(WS.WS_MAIN_PAGE_DTL_LINES.AsInt() - 1);                          //COBOL==> SUBTRACT 1 FROM WS-MAIN-PAGE-DTL-LINES.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_3") { M_PRINT_MAIN_DTL_LINE_3_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_DTL_LINE_3_EXIT
        /// </summary>
        private void M_PRINT_MAIN_DTL_LINE_3_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_DTL_LINE_3_EXIT") { return; }                                     //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_DTL_LINE_3_EXIT") { M_PRINT_MAIN_PG_FTR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_PG_FTR
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  HANDLE BEFORE SPACING FOR MAIN REPORT PAGE FOOTER LINES
        ///COMMENT:  FOR EACH MAIN REPORT PAGE FOOTER SECTION LINE
        ///COMMENT:    - MOVE IMPORT ATTRIBUTES TO REPORT FIELDS
        ///COMMENT:    - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:    - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  HANDLE AFTER SPACING FOR FOOTER LINES
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_MAIN_PG_FTR(string returnMethod = "")
        {
            WS.WS_SAVE_SECTION_PROCESSING_IND.SetValue(WS.WS_MAIN_SECTION_PROCESSING_IND);                      //COBOL==> MOVE WS-MAIN-SECTION-PROCESSING-IND TO WS-SAVE-SECTION-PROCESSING-IND.
            WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_MAIN_SECTION_PROCESSING_IND.SetValue("P  ");                                                  //COBOL==> MOVE 'P  ' TO WS-MAIN-SECTION-PROCESSING-IND.
            if ((WS.WS_SAVE_RPT_HDR_IS_PROCESSED.Value)
             || (WS.WS_SAVE_RPT_FTR_IS_PROCESSED.Value))  //COBOL==> IF WS-SAVE-RPT-HDR-IS-PROCESSED OR WS-SAVE-RPT-FTR-IS-PROCESSED
            {
                WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() - 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER - 1
            }                                                                                                   //COBOL==> END-IF.
            M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT.
            if ((WS.WS_SAVE_RPT_HDR_IS_PROCESSED.Value)
             || (WS.WS_SAVE_RPT_FTR_IS_PROCESSED.Value))  //COBOL==> IF WS-SAVE-RPT-HDR-IS-PROCESSED OR WS-SAVE-RPT-FTR-IS-PROCESSED
            {
                WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_MAIN_PRINT_PG_BRK_SPACING.SetComputeValue((WS.WS_PG_LENGTH.AsDecimal() - WS.WS_LINE_COUNT.AsDecimal()) - WS.WS_MAIN_PG_FTR_LINE_QT.AsDecimal());  //COBOL==> COMPUTE WS-MAIN-PRINT-PG-BRK-SPACING = WS-PG-LENGTH - WS-LINE-COUNT - WS-MAIN-PG-FTR-LINE-QT.
            if (WS.WS_MAIN_PRINT_PG_BRK_SPACING.IsGreaterThan(0))                                               //COBOL==> IF WS-MAIN-PRINT-PG-BRK-SPACING > 0
            {
                WS.WS_PRINT_LINE.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACES TO WS-PRINT-LINE
                WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_PRINT_PG_BRK_SPACING);                                 //COBOL==> MOVE WS-MAIN-PRINT-PG-BRK-SPACING TO WS-PRINT-LINE-SPACING
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.MAIN_PAGE_FTR_BEFORE_SPACE.IsGreaterThan(0))                                                 //COBOL==> IF MAIN-PAGE-FTR-BEFORE-SPACE > 0
            {
                WS.WS_PRINT_LINE.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACES TO WS-PRINT-LINE
                WS.WS_PRINT_LINE_SPACING.SetValue(WS.MAIN_PAGE_FTR_BEFORE_SPACE);                                   //COBOL==> MOVE MAIN-PAGE-FTR-BEFORE-SPACE TO WS-PRINT-LINE-SPACING
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_FTR_0);                                                      //COBOL==> MOVE MAIN-PAGE-FTR-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_FTR_1);                                                      //COBOL==> MOVE MAIN-PAGE-FTR-1 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT.
            if (WS.MAIN_PAGE_FTR_AFTER_SPACING.IsGreaterThan(0))                                                //COBOL==> IF MAIN-PAGE-FTR-AFTER-SPACING > 0
            {
                WS.WS_PRINT_LINE.SetValueWithSpaces();                                                              //COBOL==> MOVE SPACES TO WS-PRINT-LINE
                WS.WS_PRINT_LINE_SPACING.SetValue(WS.MAIN_PAGE_FTR_AFTER_SPACING);                                  //COBOL==> MOVE MAIN-PAGE-FTR-AFTER-SPACING TO WS-PRINT-LINE-SPACING
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_MAIN_SECTION_PROCESSING_IND.SetValue(WS.WS_SAVE_SECTION_PROCESSING_IND);                      //COBOL==> MOVE WS-SAVE-SECTION-PROCESSING-IND TO WS-MAIN-SECTION-PROCESSING-IND.
            if (WS.MAIN_PAGE_FTR_AFTER_PG_BRK.IsEqualTo("Y"))                                                   //COBOL==> IF MAIN-PAGE-FTR-AFTER-PG-BRK = 'Y'
            {
                WS.WS_PG_BRK_FLAG.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO WS-PG-BRK-FLAG
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_PG_FTR") { M_PRINT_MAIN_PG_FTR_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_PG_FTR_EXIT
        /// </summary>
        private void M_PRINT_MAIN_PG_FTR_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_PG_FTR_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_PG_FTR_EXIT") { M_PRINT_MAIN_PG_HDR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_PG_HDR
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  PRINT-MAIN-PAGE-HDR
        ///COMMENT:  DISABLE DUPLICATE FIELD SUPPRESSION FOR FIRST
        ///COMMENT:    LINE ON NEW PAGE
        ///COMMENT:  HANDLE BEFORE SPACING FOR PAGE HEADER LINES
        ///COMMENT:  FOR EACH PAGE HEADER SECTION LINE
        ///COMMENT:    - MOVE IMPORT ATTRIBUTES TO REPORT FIELDS
        ///COMMENT:    - SET THE NUMBER OF LINES TO ADVANCE
        ///COMMENT:    - CALL THE PRINTING PARAGRAPH
        ///COMMENT:  HANDLE AFTER SPACING FOR PAGE HEADER LINES
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_PRINT_MAIN_PG_HDR(string returnMethod = "")
        {
            if (WS.WS_RESET_PG_NUMBER.IsEqualTo("Y"))                                                           //COBOL==> IF WS-RESET-PG-NUMBER = 'Y'
            {
                WS.WS_RESET_PG_NUMBER.SetValue("N");                                                                //COBOL==> MOVE 'N' TO WS-RESET-PG-NUMBER
                WS.WS_PG_NUMBER.SetValue(1);                                                                        //COBOL==> MOVE 1 TO WS-PG-NUMBER
            }                                                                                                   //COBOL==> ELSE
            else
            {
                if ((!(WS.WS_MAIN_RPT_HDR_IS_PROCESSED.Value))
             && (!(WS.WS_MAIN_RPT_FTR_IS_PROCESSED.Value)))  //COBOL==> IF ( NOT WS-MAIN-RPT-HDR-IS-PROCESSED ) AND ( NOT WS-MAIN-RPT-FTR-IS-PROCESSED )
                {
                    if ((WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("N"))
             || (WS.WS_PG_BRK_FLAG.IsEqualTo("Y")))  //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'N' OR WS-PG-BRK-FLAG = 'Y'
                    {
                        WS.WS_PG_NUMBER.SetComputeValue(WS.WS_PG_NUMBER.AsDecimal() + 1m);                                  //COBOL==> COMPUTE WS-PG-NUMBER = WS-PG-NUMBER + 1
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT.
            WS.WS_SUPPRSS_BLANK_LINE_SAVE.SetValue(WS.WS_SUPPRSS_BLANK_LINE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE TO WS-SUPPRSS-BLANK-LINE-SAVE.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue("N");                                                             //COBOL==> MOVE 'N' TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_MAIN_BODY_SUPPRESS_LINES.SetValue(WS.WS_MAIN_BODY_SECTION_LINES);                             //COBOL==> MOVE WS-MAIN-BODY-SECTION-LINES TO WS-MAIN-BODY-SUPPRESS-LINES.
            WS.WS_SAVE_SECTION_PROCESSING_IND.SetValue(WS.WS_MAIN_SECTION_PROCESSING_IND);                      //COBOL==> MOVE WS-MAIN-SECTION-PROCESSING-IND TO WS-SAVE-SECTION-PROCESSING-IND.
            WS.WS_MAIN_SECTION_PROCESSING_IND.SetValue("P  ");                                                  //COBOL==> MOVE 'P  ' TO WS-MAIN-SECTION-PROCESSING-IND.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_SECTION_PROCESSING_IND.SetValueWithSpaces();                                             //COBOL==> MOVE SPACES TO WS-MAIN-SECTION-PROCESSING-IND
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_0);                                            //COBOL==> MOVE MAIN-PAGE-HDR-0 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("Y");                                                     //COBOL==> MOVE 'Y' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_0);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-0 TO WS-PRINT-LINE.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            M_MAIN_UPDT_PG_NBR_FLDS("M_MAIN_UPDT_PG_NBR_FLDS_EXIT"); if (Control.ExitProgram) { return; }         //COBOL==> PERFORM MAIN-UPDT-PG-NBR-FLDS THRU MAIN-UPDT-PG-NBR-FLDS-EXIT.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_DATE.SetValue(WS.WS_CURRENT_DATE_8);                                                         //COBOL==> MOVE WS-CURRENT-DATE-8 TO IEF-DATE.
            WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN.
            WS.DT_FORMATTED_DATE.SetValueWithSpaces();                                                          //COBOL==> MOVE SPACES TO DT-FORMATTED-DATE
            if (!(WS.IEF_DATE.IsEqualTo(00000000)))                                                             //COBOL==> IF IEF-DATE NOT = 00000000
            {
                WS.DT_EDIT_PATTERN.SetValue("12-31-1999");                                                          //COBOL==> MOVE '12-31-1999' TO DT-EDIT-PATTERN
                M_FORMAT_DATE("M_FORMAT_DATE_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-DATE THRU FORMAT-DATE-EXIT
            }                                                                                                   //COBOL==> END-IF
            WS.MAIN_PAGE_HDR_1_D_OBJ30.SetValue(WS.DT_FORMATTED_DATE);                                          //COBOL==> MOVE DT-FORMATTED-DATE TO MAIN-PAGE-HDR-1-D-OBJ30.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_1);                                            //COBOL==> MOVE MAIN-PAGE-HDR-1 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_1);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_1);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-1 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.IEF_TIME.SetValue(WS.WS_CURRENT_TIME_6);                                                         //COBOL==> MOVE WS-CURRENT-TIME-6 TO IEF-TIME.
            WS.DT_EDIT_PATTERN.SetValue("23:59:59");                                                            //COBOL==> MOVE '23:59:59' TO DT-EDIT-PATTERN.
            M_FORMAT_TIME("M_FORMAT_TIME_EXIT"); if (Control.ExitProgram) { return; }                             //COBOL==> PERFORM FORMAT-TIME THRU FORMAT-TIME-EXIT.
            WS.MAIN_PAGE_HDR_2_T_OBJ31.SetValue(WS.DT_FORMATTED_TIME);                                          //COBOL==> MOVE DT-FORMATTED-TIME TO MAIN-PAGE-HDR-2-T-OBJ31.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_2);                                            //COBOL==> MOVE MAIN-PAGE-HDR-2 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_2);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_2);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-2 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_3);                                            //COBOL==> MOVE MAIN-PAGE-HDR-3 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_3);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_3);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-3 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_4);                                            //COBOL==> MOVE MAIN-PAGE-HDR-4 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_4);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-4 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_4);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-4 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (!(WS.WS_MAIN_CNTL_FTR.Value))                                                                  //COBOL==> IF NOT WS-MAIN-CNTL-FTR
            {
                WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(LS.I_COLLECTION_OFFICER_0001_001);                            //COBOL==> MOVE I-COLLECTION-OFFICER-0001-001 TO WS-UNJUSTIFIED-TEXT-FIELD
                WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH
                WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD
                M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT
                WS.MAIN_PAGE_HDR_5_A_OBJ22.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                    //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO MAIN-PAGE-HDR-5-A-OBJ22
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_UNJUSTIFIED_TEXT_FIELD.SetValue(WS.P_COLLECTION_OFFICER_0001_001);                            //COBOL==> MOVE P-COLLECTION-OFFICER-0001-001 TO WS-UNJUSTIFIED-TEXT-FIELD
                WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.SetValue(30);                                                     //COBOL==> MOVE 30 TO WS-JUSTIFIED-TEXT-FIELD-LENGTH
                WS.WS_JUSTIFICATION_TYPE_CD.SetValue("L");                                                          //COBOL==> MOVE 'L' TO WS-JUSTIFICATION-TYPE-CD
                M_JUSTIFY_TEXT_FIELD("M_JUSTIFY_TEXT_FIELD_EXIT"); if (Control.ExitProgram) { return; }               //COBOL==> PERFORM JUSTIFY-TEXT-FIELD THRU JUSTIFY-TEXT-FIELD-EXIT
                WS.MAIN_PAGE_HDR_5_A_OBJ22.SetValue(WS.WS_JUSTIFIED_TEXT_FIELD);                                    //COBOL==> MOVE WS-JUSTIFIED-TEXT-FIELD TO MAIN-PAGE-HDR-5-A-OBJ22
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_5);                                            //COBOL==> MOVE MAIN-PAGE-HDR-5 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_5);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-5 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_5);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-5 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_6);                                            //COBOL==> MOVE MAIN-PAGE-HDR-6 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_6);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-6 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_6);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-6 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_7);                                            //COBOL==> MOVE MAIN-PAGE-HDR-7 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_7);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-7 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_7);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-7 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_8);                                            //COBOL==> MOVE MAIN-PAGE-HDR-8 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_8);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-8 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_8);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-8 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (WS.WS_MAIN_FIRST_TIME_FLAG.IsEqualTo("Y"))                                                      //COBOL==> IF WS-MAIN-FIRST-TIME-FLAG = 'Y'
            {
                WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR
                WS.WS_TEMP_SAVE_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_9);                                            //COBOL==> MOVE MAIN-PAGE-HDR-9 TO WS-TEMP-SAVE-PRINT-LINE
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_9);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-9 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_PRINT_LINE.SetValue(WS.MAIN_PAGE_HDR_9);                                                      //COBOL==> MOVE MAIN-PAGE-HDR-9 TO WS-PRINT-LINE
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_PRINT_LINE_SPACING.SetValue(WS.WS_MAIN_LINE_SPACING);                                         //COBOL==> MOVE WS-MAIN-LINE-SPACING TO WS-PRINT-LINE-SPACING.
            if (WS.WS_PG_BRK_FLAG.IsEqualTo("Y"))                                                               //COBOL==> IF WS-PG-BRK-FLAG = 'Y'
            {
                M_PRINT_A_MAIN_LINEONNEWPG("M_PRINT_A_MAIN_LINEONNEWPG_EXIT"); if (Control.ExitProgram) { return; }   //COBOL==> PERFORM PRINT-A-MAIN-LINEONNEWPG THRU PRINT-A-MAIN-LINEONNEWPG-EXIT
            }                                                                                                   //COBOL==> ELSE
            else
            {
                M_PRINT_A_MAIN_LINE("M_PRINT_A_MAIN_LINE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM PRINT-A-MAIN-LINE THRU PRINT-A-MAIN-LINE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_MAIN_SECTION_PROCESSING_IND.SetValue(WS.WS_SAVE_SECTION_PROCESSING_IND);                      //COBOL==> MOVE WS-SAVE-SECTION-PROCESSING-IND TO WS-MAIN-SECTION-PROCESSING-IND.
            WS.WS_SUPPRSS_BLANK_LINE.SetValue(WS.WS_SUPPRSS_BLANK_LINE_SAVE);                                   //COBOL==> MOVE WS-SUPPRSS-BLANK-LINE-SAVE TO WS-SUPPRSS-BLANK-LINE.
            WS.WS_MAIN_CUR_PRINTING_PAGE_HDR.SetValue("N");                                                     //COBOL==> MOVE 'N' TO WS-MAIN-CUR-PRINTING-PAGE-HDR.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_PG_HDR") { M_PRINT_MAIN_PG_HDR_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_PRINT_MAIN_PG_HDR_EXIT
        /// </summary>
        private void M_PRINT_MAIN_PG_HDR_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_PRINT_MAIN_PG_HDR_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_PRINT_MAIN_PG_HDR_EXIT") { M_MAIN_UPDT_RPT_PG_NBR_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_UPDT_RPT_PG_NBR_FLDS
        /// </summary>
        private void M_MAIN_UPDT_RPT_PG_NBR_FLDS(string returnMethod = "")
        {
            //COMMENT:     STATEMENT BELOW EXISTS TO ENSURE PARAGRAPH NEVER EMPTY
            WS.WS_PG_NUMBER.SetValue(WS.WS_PG_NUMBER);                                                          //COBOL==> MOVE WS-PG-NUMBER TO WS-PG-NUMBER.
            if (returnMethod != "" && returnMethod != "M_MAIN_UPDT_RPT_PG_NBR_FLDS") { M_MAIN_UPDT_RPT_PG_NBR_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MAIN_UPDT_RPT_PG_NBR_FLDS_EXIT
        /// </summary>
        private void M_MAIN_UPDT_RPT_PG_NBR_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_MAIN_UPDT_RPT_PG_NBR_FLDS_EXIT") { return; }                                 //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_MAIN_UPDT_RPT_PG_NBR_FLDS_EXIT") { M_INI_IMPORT_EXPORT_FLDS(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_INI_IMPORT_EXPORT_FLDS
        /// </summary>
        /// <remarks>
        ///COMMENT: ************************************************
        ///COMMENT:  INITIALIZE IMPORT AND EXPORT ATTRIBUTES IN
        ///COMMENT:  THE LINKAGE SECTION
        ///COMMENT:    - IMPORT ATTRIBUTES
        ///COMMENT:        IF THEY HAVE INVALID VALUES
        ///COMMENT:    - EXPORT ATTRIBUTES ALWAYS
        ///COMMENT: ************************************************
        /// </remarks>
        private void M_INI_IMPORT_EXPORT_FLDS(string returnMethod = "")
        {
            if ((LS.I_COLLECTION_OFFICER_000101XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_COLLECTION_OFFICER_000101XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-COLLECTION-OFFICER-000101XX = HIGH-VALUES OR I-COLLECTION-OFFICER-000101XX = LOW-VALUES
            {
                LS.I_COLLECTION_OFFICER_0001_001.SetValueWithSpaces();                                              //COBOL==> MOVE SPACES TO I-COLLECTION-OFFICER-0001-001
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COLLECTION_OFFICER_0001_001.SetValueWithSpaces();                                              //COBOL==> MOVE SPACES TO P-COLLECTION-OFFICER-0001-001
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_PARM1_0002_002XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_PARM1_0002_002XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-PARM1-0002-002XX = HIGH-VALUES OR I-PARM1-0002-002XX = LOW-VALUES
            {
                LS.I_PARM1_0002_002.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO I-PARM1-0002-002
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_PARM1_0002_002.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO P-PARM1-0002-002
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_PARM2_0002_003XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_PARM2_0002_003XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-PARM2-0002-003XX = HIGH-VALUES OR I-PARM2-0002-003XX = LOW-VALUES
            {
                LS.I_PARM2_0002_003.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO I-PARM2-0002-003
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_PARM2_0002_003.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO P-PARM2-0002-003
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_SUBREPORT_CODE_0002_004XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_SUBREPORT_CODE_0002_004XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-SUBREPORT-CODE-0002-004XX = HIGH-VALUES OR I-SUBREPORT-CODE-0002-004XX = LOW-VALUES
            {
                LS.I_SUBREPORT_CODE_0002_004.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO I-SUBREPORT-CODE-0002-004
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_SUBREPORT_CODE_0002_004.SetValueWithSpaces();                                                  //COBOL==> MOVE SPACES TO P-SUBREPORT-CODE-0002-004
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_SUB_HEADING_1_0003_005XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_SUB_HEADING_1_0003_005XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-SUB-HEADING-1-0003-005XX = HIGH-VALUES OR I-SUB-HEADING-1-0003-005XX = LOW-VALUES
            {
                LS.I_SUB_HEADING_1_0003_005.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO I-SUB-HEADING-1-0003-005
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_SUB_HEADING_1_0003_005.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO P-SUB-HEADING-1-0003-005
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_SUB_HEADING_2_0003_006XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_SUB_HEADING_2_0003_006XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-SUB-HEADING-2-0003-006XX = HIGH-VALUES OR I-SUB-HEADING-2-0003-006XX = LOW-VALUES
            {
                LS.I_SUB_HEADING_2_0003_006.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO I-SUB-HEADING-2-0003-006
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_SUB_HEADING_2_0003_006.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO P-SUB-HEADING-2-0003-006
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.I_SUB_HEADING_3_0003_007XX.IsEqualTo(HIGH_VALUES))
             || (LS.I_SUB_HEADING_3_0003_007XX.IsEqualTo(LOW_VALUES)))  //COBOL==> IF I-SUB-HEADING-3-0003-007XX = HIGH-VALUES OR I-SUB-HEADING-3-0003-007XX = LOW-VALUES
            {
                LS.I_SUB_HEADING_3_0003_007.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO I-SUB-HEADING-3-0003-007
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_SUB_HEADING_3_0003_007.SetValueWithSpaces();                                                   //COBOL==> MOVE SPACES TO P-SUB-HEADING-3-0003-007
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0004_008.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0004-008 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0004_008.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0004-008
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0004_008.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0004-008
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0005_009.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0005-009 IS NOT NUMERIC
            {
                LS.I_COUNT_0005_009.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0005-009
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0005_009.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0005-009
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0006_010.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0006-010 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0006_010.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0006-010
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0006_010.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0006-010
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0007_011.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0007-011 IS NOT NUMERIC
            {
                LS.I_COUNT_0007_011.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0007-011
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0007_011.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0007-011
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0008_012.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0008-012 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0008_012.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0008-012
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0008_012.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0008-012
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0009_013.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0009-013 IS NOT NUMERIC
            {
                LS.I_COUNT_0009_013.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0009-013
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0009_013.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0009-013
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0010_014.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0010-014 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0010_014.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0010-014
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0010_014.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0010-014
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0011_015.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0011-015 IS NOT NUMERIC
            {
                LS.I_COUNT_0011_015.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0011-015
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0011_015.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0011-015
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0012_016.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0012-016 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0012_016.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0012-016
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0012_016.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0012-016
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0013_017.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0013-017 IS NOT NUMERIC
            {
                LS.I_COUNT_0013_017.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0013-017
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0013_017.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0013-017
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0014_018.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0014-018 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0014_018.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0014-018
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0014_018.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0014-018
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0015_019.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0015-019 IS NOT NUMERIC
            {
                LS.I_COUNT_0015_019.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0015-019
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0015_019.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0015-019
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0016_020.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0016-020 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0016_020.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0016-020
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0016_020.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0016-020
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0017_021.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0017-021 IS NOT NUMERIC
            {
                LS.I_COUNT_0017_021.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0017-021
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0017_021.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0017-021
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0018_022.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0018-022 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0018_022.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0018-022
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0018_022.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0018-022
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0019_023.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0019-023 IS NOT NUMERIC
            {
                LS.I_COUNT_0019_023.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0019-023
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0019_023.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0019-023
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0020_024.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0020-024 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0020_024.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0020-024
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0020_024.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0020-024
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0021_025.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0021-025 IS NOT NUMERIC
            {
                LS.I_COUNT_0021_025.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0021-025
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0021_025.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0021-025
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0022_026.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0022-026 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0022_026.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0022-026
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0022_026.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0022-026
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0023_027.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0023-027 IS NOT NUMERIC
            {
                LS.I_COUNT_0023_027.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0023-027
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0023_027.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0023-027
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_AMOUNT1_0024_028.IsNumericValue()))                                                     //COBOL==> IF I-AMOUNT1-0024-028 IS NOT NUMERIC
            {
                LS.I_AMOUNT1_0024_028.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO I-AMOUNT1-0024-028
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_AMOUNT1_0024_028.SetValueWithZeroes();                                                         //COBOL==> MOVE ZEROS TO P-AMOUNT1-0024-028
            }                                                                                                   //COBOL==> END-IF.
            if (!(LS.I_COUNT_0025_029.IsNumericValue()))                                                       //COBOL==> IF I-COUNT-0025-029 IS NOT NUMERIC
            {
                LS.I_COUNT_0025_029.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO I-COUNT-0025-029
            }                                                                                                   //COBOL==> END-IF.
            if ((LS.LS_OPEN_FILE_PASS.Value)
             || (LS.LS_APPEND_FILE_PASS.Value))                 //COBOL==> IF LS-OPEN-FILE-PASS OR LS-APPEND-FILE-PASS
            {
                WS.P_COUNT_0025_029.SetValueWithZeroes();                                                           //COBOL==> MOVE ZEROS TO P-COUNT-0025-029
            }                                                                                                   //COBOL==> END-IF.
            LS.E_PARM1_0026_030.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO E-PARM1-0026-030.
            LS.E_PARM2_0026_031.SetValueWithSpaces();                                                           //COBOL==> MOVE SPACES TO E-PARM2-0026-031.
            if (returnMethod != "" && returnMethod != "M_INI_IMPORT_EXPORT_FLDS") { M_INI_IMPORT_EXPORT_FLDS_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_INI_IMPORT_EXPORT_FLDS_EXIT
        /// </summary>
        private void M_INI_IMPORT_EXPORT_FLDS_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_INI_IMPORT_EXPORT_FLDS_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_INI_IMPORT_EXPORT_FLDS_EXIT") { M_JUSTIFY_TEXT_FIELD(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_JUSTIFY_TEXT_FIELD
        /// </summary>
        private void M_JUSTIFY_TEXT_FIELD(string returnMethod = "")
        {
            if ((WS.WS_JUSTIFIED_NONE.Value)
             || (WS.WS_UNJUSTIFIED_TEXT_FIELD.IsSpaces()))      //COBOL==> IF WS-JUSTIFIED-NONE OR WS-UNJUSTIFIED-TEXT-FIELD = SPACES
            {
                WS.WS_JUSTIFIED_TEXT_FIELD.SetValue(WS.WS_UNJUSTIFIED_TEXT_FIELD);                                  //COBOL==> MOVE WS-UNJUSTIFIED-TEXT-FIELD TO WS-JUSTIFIED-TEXT-FIELD
            }                                                                                                   //COBOL==> ELSE
            else
            {
                for (WS.WS_UNJUSTIFIED_TEXT_IDX.SetValue(1); (!(WS.WS_UNJUSTIFIED_TEXT_IDX.IsGreaterThan(249))); WS.WS_UNJUSTIFIED_TEXT_IDX.Add(1))  //COBOL==> PERFORM FIND-FIRST-NON-BLANK-CHAR VARYING WS-UNJUSTIFIED-TEXT-IDX FROM 1 BY 1 UNTIL WS-UNJUSTIFIED-TEXT-IDX > 249
                {
                    M_FIND_FIRST_NON_BLANK_CHAR(); if (Control.ExitProgram) { return; }
                }
                for (WS.WS_UNJUSTIFIED_TEXT_IDX.SetValue(250); (!(WS.WS_UNJUSTIFIED_TEXT_IDX.IsLessThan(1))); WS.WS_UNJUSTIFIED_TEXT_IDX.Add(-1))  //COBOL==> PERFORM FIND-LAST-NON-BLANK-CHAR VARYING WS-UNJUSTIFIED-TEXT-IDX FROM 250 BY -1 UNTIL WS-UNJUSTIFIED-TEXT-IDX < 1
                {
                    M_FIND_LAST_NON_BLANK_CHAR(); if (Control.ExitProgram) { return; }
                }
                WS.WS_JUSTIFIED_TEXT_DATA_LENGTH.SetComputeValue((WS.WS_LAST_CHAR.AsDecimal() - WS.WS_FIRST_CHAR.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-JUSTIFIED-TEXT-DATA-LENGTH = ( WS-LAST-CHAR - WS-FIRST-CHAR ) + 1
                if (WS.WS_JUSTIFIED_LEFT.Value)                                                                     //COBOL==> IF WS-JUSTIFIED-LEFT
                {
                    WS.WS_JUSTIFIED_FIELD_START.SetComputeValue(1);                                                     //COBOL==> COMPUTE WS-JUSTIFIED-FIELD-START = 1
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    if (WS.WS_JUSTIFIED_RIGHT.Value)                                                                    //COBOL==> IF WS-JUSTIFIED-RIGHT
                    {
                        WS.WS_JUSTIFIED_FIELD_START.SetComputeValue((WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.AsDecimal() - WS.WS_JUSTIFIED_TEXT_DATA_LENGTH.AsDecimal()) + 1m);  //COBOL==> COMPUTE WS-JUSTIFIED-FIELD-START = ( WS-JUSTIFIED-TEXT-FIELD-LENGTH - WS-JUSTIFIED-TEXT-DATA-LENGTH ) + 1
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.WS_JUSTIFIED_FIELD_START.SetComputeValue(((WS.WS_JUSTIFIED_TEXT_FIELD_LENGTH.AsDecimal() / 2m) - (WS.WS_JUSTIFIED_TEXT_DATA_LENGTH.AsDecimal() / 2m)) + 1m);  //COBOL==> COMPUTE WS-JUSTIFIED-FIELD-START = ( WS-JUSTIFIED-TEXT-FIELD-LENGTH / 2 ) - ( WS-JUSTIFIED-TEXT-DATA-LENGTH / 2 ) + 1
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                WS.WS_JUSTIFIED_TEXT_FIELD.SetValueWithSpaces();                                                    //COBOL==> MOVE SPACES TO WS-JUSTIFIED-TEXT-FIELD
                WS.WS_JUSTIFIED_TEXT_IDX.SetComputeValue(WS.WS_JUSTIFIED_FIELD_START);                              //COBOL==> COMPUTE WS-JUSTIFIED-TEXT-IDX = WS-JUSTIFIED-FIELD-START
                WS.WS_UNJUSTIFIED_TEXT_IDX.SetComputeValue(WS.WS_FIRST_CHAR);                                       //COBOL==> COMPUTE WS-UNJUSTIFIED-TEXT-IDX = WS-FIRST-CHAR
                for (WS.WS_CHAR_CNTR.SetValue(1); (!(WS.WS_CHAR_CNTR.IsGreaterThan(WS.WS_JUSTIFIED_TEXT_DATA_LENGTH))); WS.WS_CHAR_CNTR.Add(1))  //COBOL==> PERFORM MOVE-TO-JUSTIFIED-FIELD VARYING WS-CHAR-CNTR FROM 1 BY 1 UNTIL WS-CHAR-CNTR > WS-JUSTIFIED-TEXT-DATA-LENGTH
                {
                    M_MOVE_TO_JUSTIFIED_FIELD(); if (Control.ExitProgram) { return; }
                }
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_JUSTIFY_TEXT_FIELD") { M_JUSTIFY_TEXT_FIELD_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_JUSTIFY_TEXT_FIELD_EXIT
        /// </summary>
        private void M_JUSTIFY_TEXT_FIELD_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_JUSTIFY_TEXT_FIELD_EXIT") { return; }                                        //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_JUSTIFY_TEXT_FIELD_EXIT") { M_FIND_FIRST_NON_BLANK_CHAR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FIND_FIRST_NON_BLANK_CHAR
        /// </summary>
        private void M_FIND_FIRST_NON_BLANK_CHAR(string returnMethod = "")
        {
            if (!(WS.WS_UNJUSTIFIED_TEXT_CHAR[WS.WS_UNJUSTIFIED_TEXT_IDX.AsInt()].IsSpaces()))                  //COBOL==> IF WS-UNJUSTIFIED-TEXT-CHAR ( WS-UNJUSTIFIED-TEXT-IDX ) NOT EQUAL SPACE
            {
                WS.WS_FIRST_CHAR.SetComputeValue(WS.WS_UNJUSTIFIED_TEXT_IDX);                                       //COBOL==> COMPUTE WS-FIRST-CHAR = WS-UNJUSTIFIED-TEXT-IDX
                WS.WS_UNJUSTIFIED_TEXT_IDX.SetComputeValue(251);                                                    //COBOL==> COMPUTE WS-UNJUSTIFIED-TEXT-IDX = 251
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_FIND_FIRST_NON_BLANK_CHAR") { M_FIND_LAST_NON_BLANK_CHAR(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FIND_LAST_NON_BLANK_CHAR
        /// </summary>
        private void M_FIND_LAST_NON_BLANK_CHAR(string returnMethod = "")
        {
            if (WS.WS_UNJUSTIFIED_TEXT_IDX.IsGreaterThan(0))                                                    //COBOL==> IF WS-UNJUSTIFIED-TEXT-IDX GREATER THAN 0
            {
                if (!(WS.WS_UNJUSTIFIED_TEXT_CHAR[WS.WS_UNJUSTIFIED_TEXT_IDX.AsInt()].IsSpaces()))                  //COBOL==> IF WS-UNJUSTIFIED-TEXT-CHAR ( WS-UNJUSTIFIED-TEXT-IDX ) NOT EQUAL SPACE
                {
                    WS.WS_LAST_CHAR.SetComputeValue(WS.WS_UNJUSTIFIED_TEXT_IDX);                                        //COBOL==> COMPUTE WS-LAST-CHAR = WS-UNJUSTIFIED-TEXT-IDX
                    WS.WS_UNJUSTIFIED_TEXT_IDX.SetComputeValue(0);                                                      //COBOL==> COMPUTE WS-UNJUSTIFIED-TEXT-IDX = 0
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_FIND_LAST_NON_BLANK_CHAR") { M_MOVE_TO_JUSTIFIED_FIELD(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_MOVE_TO_JUSTIFIED_FIELD
        /// </summary>
        private void M_MOVE_TO_JUSTIFIED_FIELD(string returnMethod = "")
        {
            WS.WS_JUSTIFIED_TEXT_CHAR[WS.WS_JUSTIFIED_TEXT_IDX.AsInt()].SetValue(WS.WS_UNJUSTIFIED_TEXT_CHAR[WS.WS_UNJUSTIFIED_TEXT_IDX.AsInt()]);  //COBOL==> MOVE WS-UNJUSTIFIED-TEXT-CHAR ( WS-UNJUSTIFIED-TEXT-IDX ) TO WS-JUSTIFIED-TEXT-CHAR ( WS-JUSTIFIED-TEXT-IDX ) .
            WS.WS_JUSTIFIED_TEXT_IDX.SetComputeValue(WS.WS_JUSTIFIED_TEXT_IDX.AsInt() + 1);                     //COBOL==> COMPUTE WS-JUSTIFIED-TEXT-IDX = WS-JUSTIFIED-TEXT-IDX + 1.
            WS.WS_UNJUSTIFIED_TEXT_IDX.SetComputeValue(WS.WS_UNJUSTIFIED_TEXT_IDX.AsInt() + 1);                 //COBOL==> COMPUTE WS-UNJUSTIFIED-TEXT-IDX = WS-UNJUSTIFIED-TEXT-IDX + 1.
            if (returnMethod != "" && returnMethod != "M_MOVE_TO_JUSTIFIED_FIELD") { M_GET_SYSTEM_DATE_N_TIME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_SYSTEM_DATE_N_TIME
        /// </summary>
        private void M_GET_SYSTEM_DATE_N_TIME(string returnMethod = "")
        {
            WS.WS_CURRENT_DATE.SetValue(ApplicationDate.ToString("yyMMdd"));                                    //COBOL==> ACCEPT WS-CURRENT-DATE FROM DATE.
            if (WS.WS_CURRENT_DATE_6_YY.IsLessThan(50))                                                         //COBOL==> IF WS-CURRENT-DATE-6-YY < 50
            {
                WS.WS_CURRENT_DATE_8_CC.SetValue(20);                                                               //COBOL==> MOVE 20 TO WS-CURRENT-DATE-8-CC
            }                                                                                                   //COBOL==> ELSE
            else
            {
                WS.WS_CURRENT_DATE_8_CC.SetValue(19);                                                               //COBOL==> MOVE 19 TO WS-CURRENT-DATE-8-CC
            }                                                                                                   //COBOL==> END-IF.
            WS.WS_CURRENT_DATE_8_YY.SetValue(WS.WS_CURRENT_DATE_6_YY);                                          //COBOL==> MOVE WS-CURRENT-DATE-6-YY TO WS-CURRENT-DATE-8-YY.
            WS.WS_CURRENT_DATE_8_MM.SetValue(WS.WS_CURRENT_DATE_6_MM);                                          //COBOL==> MOVE WS-CURRENT-DATE-6-MM TO WS-CURRENT-DATE-8-MM.
            WS.WS_CURRENT_DATE_8_DD.SetValue(WS.WS_CURRENT_DATE_6_DD);                                          //COBOL==> MOVE WS-CURRENT-DATE-6-DD TO WS-CURRENT-DATE-8-DD.
            WS.WS_CURRENT_TIME.SetValue(ApplicationDate.TimeOfDay.ToString("hhmmssff"));                        //COBOL==> ACCEPT WS-CURRENT-TIME FROM TIME.
            if (returnMethod != "" && returnMethod != "M_GET_SYSTEM_DATE_N_TIME") { M_GET_SYSTEM_DATE_N_TIME_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_GET_SYSTEM_DATE_N_TIME_EXIT
        /// </summary>
        private void M_GET_SYSTEM_DATE_N_TIME_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_GET_SYSTEM_DATE_N_TIME_EXIT") { return; }                                    //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_GET_SYSTEM_DATE_N_TIME_EXIT") { M_FORMAT_DATE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_DATE
        /// </summary>
        private void M_FORMAT_DATE(string returnMethod = "")
        {
            WS.DT_FORMATTED_DATE.ResetToInitialValue();                                                         //COBOL==> INITIALIZE DT-FORMATTED-DATE DT-STRING-COUNT.
            WS.DT_STRING_COUNT.ResetToInitialValue();
            M_FORMAT_DATE_VALUE("M_FORMAT_DATE_VALUE_EXIT"); if (Control.ExitProgram) { return; }                 //COBOL==> PERFORM FORMAT-DATE-VALUE THRU FORMAT-DATE-VALUE-EXIT.
            if (returnMethod != "" && returnMethod != "M_FORMAT_DATE") { M_FORMAT_DATE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_DATE_EXIT
        /// </summary>
        private void M_FORMAT_DATE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_FORMAT_DATE_EXIT") { return; }                                               //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_FORMAT_DATE_EXIT") { M_FORMAT_DATE_VALUE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_DATE_VALUE
        /// </summary>
        private void M_FORMAT_DATE_VALUE(string returnMethod = "")
        {
            WS.DT_STRING_COUNT.SetValue(WS.DT_EDIT_PATTERN.InspectGivingCount("12", "ALL"));                    //COBOL==> INSPECT DT-EDIT-PATTERN TALLYING DT-STRING-COUNT FOR ALL '12'.
            if (WS.DT_STRING_FOUND.Value)                                                                       //COBOL==> IF DT-STRING-FOUND
            {
                M_FORMAT_MM_DATE("M_FORMAT_MM_DATE_EXIT"); if (Control.ExitProgram) { return; }                       //COBOL==> PERFORM FORMAT-MM-DATE THRU FORMAT-MM-DATE-EXIT
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_FORMAT_DATE_VALUE") { M_FORMAT_DATE_VALUE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_DATE_VALUE_EXIT
        /// </summary>
        private void M_FORMAT_DATE_VALUE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_FORMAT_DATE_VALUE_EXIT") { return; }                                         //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_FORMAT_DATE_VALUE_EXIT") { M_FORMAT_MM_DATE(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_MM_DATE
        /// </summary>
        private void M_FORMAT_MM_DATE(string returnMethod = "")
        {
            if (WS.DT_EDIT_PATTERN.IsEqualTo("12-31-1999"))                                                     //COBOL==> IF DT-EDIT-PATTERN = '12-31-1999'
            {
                WS.DT_FORMATTED_DATE.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize(WS.DT_MONTH_MM.AsString(), "-", WS.DT_DAY.AsString(), "-", WS.DT_YEAR_4.AsString())));  //COBOL==> STRING DT-MONTH-MM , '-' , DT-DAY , '-' , DT-YEAR-4 DELIMITED BY SIZE INTO DT-FORMATTED-DATE
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_FORMAT_MM_DATE") { M_FORMAT_MM_DATE_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_MM_DATE_EXIT
        /// </summary>
        private void M_FORMAT_MM_DATE_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_FORMAT_MM_DATE_EXIT") { return; }                                            //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_FORMAT_MM_DATE_EXIT") { M_FORMAT_TIME(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_TIME
        /// </summary>
        private void M_FORMAT_TIME(string returnMethod = "")
        {
            if (WS.DT_EDIT_PATTERN.IsEqualTo("23:59:59"))                                                       //COBOL==> IF DT-EDIT-PATTERN = '23:59:59'
            {
                WS.DT_FORMATTED_TIME.SetValue(StringUtils.Stringify(StringUtils.DelimitedBySize(WS.DT_HOUR.AsString(), ":", WS.DT_MINUTES.AsString(), ":", WS.DT_SECONDS.AsString())));  //COBOL==> STRING DT-HOUR , ':' , DT-MINUTES , ':' , DT-SECONDS DELIMITED BY SIZE INTO DT-FORMATTED-TIME
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_FORMAT_TIME") { M_FORMAT_TIME_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_FORMAT_TIME_EXIT
        /// </summary>
        private void M_FORMAT_TIME_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_FORMAT_TIME_EXIT") { return; }                                               //COBOL==> EXIT.
            if (returnMethod != "" && returnMethod != "M_FORMAT_TIME_EXIT") { M_NUMERIC_FORMATTER(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_NUMERIC_FORMATTER
        /// </summary>
        private void M_NUMERIC_FORMATTER(string returnMethod = "")
        {
            WS.EP_SIGN_USED.SetValue("N");                                                                      //COBOL==> MOVE 'N' TO EP-SIGN-USED.
            WS.EP_DOLLAR_USED.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO EP-DOLLAR-USED.
            WS.EP_DPOINT_USED.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO EP-DPOINT-USED.
            WS.EP_FIRST_DIGIT.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO EP-FIRST-DIGIT.
            WS.EP_ISTHERE_DCML.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO EP-ISTHERE-DCML.
            WS.EP_ISTHERE_V.SetValue("N");                                                                      //COBOL==> MOVE 'N' TO EP-ISTHERE-V.
            WS.EP_CURRENCY_COUNT.SetValueWithZeroes();                                                          //COBOL==> MOVE 0 TO EP-CURRENCY-COUNT.
            WS.EP_PRECISION.SetValueWithZeroes();                                                               //COBOL==> MOVE 0 TO EP-PRECISION.
            WS.EP_SCALE.SetValueWithZeroes();                                                                   //COBOL==> MOVE 0 TO EP-SCALE.
            WS.EP_SZNUMERIC.SetValueWithSpaces();                                                               //COBOL==> MOVE SPACES TO EP-SZNUMERIC.
            WS.EP_FORMATTED_VALUE.SetValueWithSpaces();                                                         //COBOL==> MOVE SPACES TO EP-FORMATTED-VALUE.
                                                                                                                //COMMENT:     CALCULATE PRECISION AND SCALE
            for (WS.EP_COUNT.SetValue(1); (!(WS.EP_COUNT.IsEqualTo(40))); WS.EP_COUNT.Add(1))                  //COBOL==> PERFORM VARYING EP-COUNT FROM 1 BY 1 UNTIL EP-COUNT = 40
            {
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("."))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("V")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '.' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = 'V'
                {
                    WS.EP_ISTHERE_DCML.SetValue("Y");                                                                   //COBOL==> MOVE 'Y' TO EP-ISTHERE-DCML
                    WS.EP_ISTHERE_V.SetValue("Y");                                                                      //COBOL==> MOVE 'Y' TO EP-ISTHERE-V
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            for (WS.EP_COUNT.SetValue(WS.EP_EDIT_PATTERN_LEN); (!(WS.EP_COUNT.IsEqualTo(0))); WS.EP_COUNT.Add(-1))  //COBOL==> PERFORM VARYING EP-COUNT FROM EP-EDIT-PATTERN-LEN BY -1 UNTIL EP-COUNT = 0
            {
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("9"))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("Z")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '9' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = 'Z'
                {
                    if (WS.EP_ISTHERE_DCML.IsEqualTo("Y"))                                                              //COBOL==> IF EP-ISTHERE-DCML = 'Y'
                    {
                        WS.EP_SCALE.Add(1);                                                                                 //COBOL==> ADD 1 TO EP-SCALE
                        WS.EP_PRECISION.Add(1);                                                                             //COBOL==> ADD 1 TO EP-PRECISION
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_PRECISION.Add(1);                                                                             //COBOL==> ADD 1 TO EP-PRECISION
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if ((((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("-"))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("+")))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("*")))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("$")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '-' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = '+' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = '*' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = '$'
                {
                    if (WS.EP_ISTHERE_DCML.IsEqualTo("Y"))                                                              //COBOL==> IF EP-ISTHERE-DCML = 'Y'
                    {
                        WS.EP_PRECISION.Add(1);                                                                             //COBOL==> ADD 1 TO EP-PRECISION
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("."))
             || (WS.EP_EDIT_PATTERN_X[WS.EP_COUNT.AsInt()].IsEqualTo("V")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-COUNT ) = '.' OR EP-EDIT-PATTERN-X ( EP-COUNT ) = 'V'
                {
                    WS.EP_ISTHERE_DCML.SetValue("N");                                                                   //COBOL==> MOVE 'N' TO EP-ISTHERE-DCML
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
                                                                                                                //COMMENT:     GET THE SIGN, CONVERT INTEGER PART TO ABSOLUTE VALUE
            if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN EQUAL '-'
            {
                WS.EP_INTEGER2.SetComputeValue(WS.EP_INTEGER2.AsInt() * -1);                                        //COBOL==> COMPUTE EP-INTEGER2 = EP-INTEGER2 * -1
            }                                                                                                   //COBOL==> END-IF.
            WS.EP_INTEGER.SetValue(WS.EP_INTEGER2);                                                             //COBOL==> MOVE EP-INTEGER2 TO EP-INTEGER.
                                                                                                                //COMMENT:     CONVERT TO STRING WITH INTEGER AND DECIMALS
            WS.EP_COUNT2.SetValueWithZeroes();                                                                  //COBOL==> MOVE 0 TO EP-COUNT2.
            for (WS.EP_COUNT.SetValue(1); (!(WS.EP_COUNT.IsEqualTo(20))); WS.EP_COUNT.Add(1))                  //COBOL==> PERFORM VARYING EP-COUNT FROM 1 BY 1 UNTIL EP-COUNT = 20
            {
                if (!(WS.EP_INTEGER_X[WS.EP_COUNT.AsInt()].IsSpaces()))                                             //COBOL==> IF EP-INTEGER-X ( EP-COUNT ) NOT EQUAL SPACE
                {
                    WS.EP_COUNT2.Add(1);                                                                                //COBOL==> ADD 1 TO EP-COUNT2
                    WS.EP_SZNUMERIC_X[WS.EP_COUNT2.AsInt()].SetValue(WS.EP_INTEGER_X[WS.EP_COUNT.AsInt()]);             //COBOL==> MOVE EP-INTEGER-X ( EP-COUNT ) TO EP-SZNUMERIC-X ( EP-COUNT2 )
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            if (WS.EP_SCALE.IsGreaterThan(0))                                                                   //COBOL==> IF EP-SCALE > 0 THEN
            {
                WS.EP_COUNT2.Add(1);                                                                                //COBOL==> ADD 1 TO EP-COUNT2
                WS.EP_SZNUMERIC_X[WS.EP_COUNT2.AsInt()].SetValue(".");                                              //COBOL==> MOVE '.' TO EP-SZNUMERIC-X ( EP-COUNT2 )
            }                                                                                                   //COBOL==> END-IF.
                                                                                                                //COMMENT:     STRIP OFF TRAILING ZERO'S IN DECIMAL PLACES
            WS.EP_STOP.SetValue("N");                                                                           //COBOL==> MOVE 'N' TO EP-STOP.
            for (WS.EP_COUNT.SetValue(18); (!(((WS.EP_COUNT.IsEqualTo(0)) || (WS.EP_STOP.IsEqualTo("Y"))) || (WS.EP_COUNT.IsEqualTo(WS.EP_SCALE)))); WS.EP_COUNT.Add(-1))  //COBOL==> PERFORM VARYING EP-COUNT FROM 18 BY -1 UNTIL EP-COUNT = 0 OR EP-STOP = 'Y' OR EP-COUNT = EP-SCALE
            {
                if ((WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()].IsEqualTo(0))
             || (WS.EP_ISTHERE_DCML.IsEqualTo("N")))  //COBOL==> IF EP-DECIMAL-X ( EP-COUNT ) EQUAL 0 OR EP-ISTHERE-DCML = 'N'
                {
                    WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()].SetValueWithSpaces();                                          //COBOL==> MOVE SPACE TO EP-DECIMAL-X ( EP-COUNT )
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.EP_STOP.SetValue("Y");                                                                           //COBOL==> MOVE 'Y' TO EP-STOP
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM
            for (WS.EP_COUNT.SetValue(1); (!(WS.EP_COUNT.IsEqualTo(19))); WS.EP_COUNT.Add(1))                  //COBOL==> PERFORM VARYING EP-COUNT FROM 1 BY 1 UNTIL EP-COUNT = 19
            {
                if (!(WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()].IsSpaces()))                                             //COBOL==> IF EP-DECIMAL-X ( EP-COUNT ) NOT EQUAL SPACE
                {
                    WS.EP_COUNT2.Add(1);                                                                                //COBOL==> ADD 1 TO EP-COUNT2
                    WS.EP_SZNUMERIC_X[WS.EP_COUNT2.AsInt()].SetValue(WS.EP_DECIMAL_X[WS.EP_COUNT.AsInt()]);             //COBOL==> MOVE EP-DECIMAL-X ( EP-COUNT ) TO EP-SZNUMERIC-X ( EP-COUNT2 )
                }                                                                                                   //COBOL==> END-IF
            }                                                                                                   //COBOL==> END-PERFORM.
            WS.EP_SZNUMERIC_LEN.SetValue(WS.EP_COUNT2);                                                         //COBOL==> MOVE EP-COUNT2 TO EP-SZNUMERIC-LEN.
                                                                                                                //COMMENT:     SET INITIAL INDEX
            WS.EP_INP_INDEX.SetValue(WS.EP_SZNUMERIC_LEN);                                                      //COBOL==> MOVE EP-SZNUMERIC-LEN TO EP-INP-INDEX.
            WS.EP_OUT_INDEX.SetValue(WS.EP_EDIT_PATTERN_LEN);                                                   //COBOL==> MOVE EP-EDIT-PATTERN-LEN TO EP-OUT-INDEX.
            WS.EP_INDEX.SetValue(WS.EP_EDIT_PATTERN_LEN);                                                       //COBOL==> MOVE EP-EDIT-PATTERN-LEN TO EP-INDEX.
                                                                                                                //COMMENT:     START PARSING
            while (!(WS.EP_INDEX.IsEqualTo(0)))                                                                 //COBOL==> PERFORM UNTIL EP-INDEX = 0
            {
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("9"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '9'
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("0");                                     //COBOL==> MOVE '0' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("Z"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'Z'
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        if (WS.EP_INTEGER2.IsEqualTo(0))                                                                    //COBOL==> IF EP-INTEGER2 = 0
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("*"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '*'
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("*");                                     //COBOL==> MOVE '*' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_OUT_INDEX.AsInt()].IsEqualTo("$"))                                   //COBOL==> IF EP-EDIT-PATTERN-X ( EP-OUT-INDEX ) = '$'
                {
                    WS.EP_CURRENCY_COUNT.Add(1);                                                                        //COBOL==> ADD 1 TO EP-CURRENCY-COUNT
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if (WS.EP_DOLLAR_USED.IsEqualTo("N"))                                                               //COBOL==> IF EP-DOLLAR-USED = 'N'
                        {
                            WS.EP_DOLLAR_USED.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO EP-DOLLAR-USED
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("$");                                     //COBOL==> MOVE '$' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("/"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '/'
                {
                    WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("/");                                     //COBOL==> MOVE '/' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("0"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '0'
                {
                    WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("0");                                     //COBOL==> MOVE '0' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo(","))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = ','
                {
                    if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(",");                                     //COBOL==> MOVE ',' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((!(WS.EP_OUT_INDEX.IsEqualTo(1)))
             && (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("*")))  //COBOL==> IF EP-OUT-INDEX NOT = 1 AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = '*'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("*");                                     //COBOL==> MOVE '*' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if ((!(WS.EP_OUT_INDEX.IsEqualTo(1)))
             && (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("9")))  //COBOL==> IF EP-OUT-INDEX NOT = 1 AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = '9'
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(",");                                     //COBOL==> MOVE ',' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("."))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '.'
                {
                    if (WS.EP_DPOINT_USED.IsEqualTo("N"))                                                               //COBOL==> IF EP-DPOINT-USED = 'N'
                    {
                        if (WS.EP_INTEGER2.IsEqualTo(0))                                                                    //COBOL==> IF EP-INTEGER2 = 0
                        {
                            if ((((WS.EP_OUT_INDEX.IsGreaterThan(1))
             && (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("Z")))
             && (WS.EP_EDIT_PATTERN_LEN.IsGreaterThan(WS.EP_INDEX)))
             && (!(WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() + 1)].IsEqualTo("9"))))  //COBOL==> IF EP-OUT-INDEX > 1 AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = 'Z' AND EP-EDIT-PATTERN-LEN > EP-INDEX AND EP-EDIT-PATTERN-X ( EP-INDEX + 1 ) NOT = '9'
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(".");                                     //COBOL==> MOVE '.' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_DPOINT_USED.SetValue("Y");                                                                    //COBOL==> MOVE 'Y' TO EP-DPOINT-USED
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(".");                                     //COBOL==> MOVE '.' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            if (WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()].IsEqualTo("."))                                      //COBOL==> IF EP-SZNUMERIC-X ( EP-INP-INDEX ) = '.' THEN
                            {
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("-"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '-'
                {
                    if ((WS.EP_INTEGER2.IsEqualTo(0))
             && (!(WS.EP_SIGN.IsEqualTo("-"))))                //COBOL==> IF EP-INTEGER2 = 0 AND EP-SIGN NOT = '-'
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((WS.EP_SIGN_USED.IsEqualTo("N"))
             && ((WS.EP_INP_INDEX.IsLessThan(1))
             || ((WS.EP_FIRST_DIGIT.IsEqualTo("Y"))
             && (!(WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("-"))))))  //COBOL==> IF EP-SIGN-USED = 'N' AND ( EP-INP-INDEX LESS THAN 1 OR ( EP-FIRST-DIGIT = 'Y' AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) NOT = '-' ) )
                        {
                            WS.EP_SIGN_USED.SetValue("Y");                                                                      //COBOL==> MOVE 'Y' TO EP-SIGN-USED
                            if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SIGN);                              //COBOL==> MOVE EP-SIGN TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("+"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = '+'
                {
                    if (WS.EP_INTEGER2.IsEqualTo(0))                                                                    //COBOL==> IF EP-INTEGER2 = 0
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        if ((WS.EP_SIGN_USED.IsEqualTo("N"))
             && ((WS.EP_INP_INDEX.IsLessThan(1))
             || ((WS.EP_FIRST_DIGIT.IsEqualTo("Y"))
             && (!(WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("-"))))))  //COBOL==> IF EP-SIGN-USED = 'N' AND ( EP-INP-INDEX LESS THAN 1 OR ( EP-FIRST-DIGIT = 'Y' AND EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) NOT = '-' ) )
                        {
                            WS.EP_SIGN_USED.SetValue("Y");                                                                      //COBOL==> MOVE 'Y' TO EP-SIGN-USED
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SIGN);                              //COBOL==> MOVE EP-SIGN TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            if (WS.EP_INP_INDEX.IsGreaterThan(0))                                                               //COBOL==> IF EP-INP-INDEX GREATER THAN 0
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(WS.EP_SZNUMERIC_X[WS.EP_INP_INDEX.AsInt()]);  //COBOL==> MOVE EP-SZNUMERIC-X ( EP-INP-INDEX ) TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                                WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                            }                                                                                                   //COBOL==> ELSE
                            else
                            {
                                WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                            }                                                                                                   //COBOL==> END-IF
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("C"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'C'
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() + 1)].IsEqualTo("R"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX + 1 ) = 'R'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("C");                                     //COBOL==> MOVE 'C' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("R"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'R'
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("C"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = 'C'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("R");                                     //COBOL==> MOVE 'R' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("D"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'D'
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() + 1)].IsEqualTo("B"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX + 1 ) = 'B'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("D");                                     //COBOL==> MOVE 'D' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if ((WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("B"))
             && (WS.EP_OUT_INDEX.IsGreaterThan(1)))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'B' AND EP-OUT-INDEX > 1
                {
                    if (WS.EP_EDIT_PATTERN_X[(WS.EP_INDEX.AsInt() - 1)].IsEqualTo("D"))                                 //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX - 1 ) = 'D'
                    {
                        if (WS.EP_SIGN.IsEqualTo("-"))                                                                      //COBOL==> IF EP-SIGN = '-'
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue("B");                                     //COBOL==> MOVE 'B' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> ELSE
                        else
                        {
                            WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        }                                                                                                   //COBOL==> END-IF
                    }                                                                                                   //COBOL==> ELSE
                    else
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                    }                                                                                                   //COBOL==> END-IF
                }                                                                                                   //COBOL==> END-IF
                if (WS.EP_EDIT_PATTERN_X[WS.EP_INDEX.AsInt()].IsEqualTo("V"))                                       //COBOL==> IF EP-EDIT-PATTERN-X ( EP-INDEX ) = 'V'
                {
                    WS.EP_INP_INDEX.SetValue(WS.EP_INP_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-INP-INDEX
                }                                                                                                   //COBOL==> ELSE
                else
                {
                    WS.EP_OUT_INDEX.SetValue(WS.EP_OUT_INDEX.AsInt() - 1);                                              //COBOL==> SUBTRACT 1 FROM EP-OUT-INDEX
                }                                                                                                   //COBOL==> END-IF
                WS.EP_INDEX.SetValue(WS.EP_INDEX.AsInt() - 1);                                                      //COBOL==> SUBTRACT 1 FROM EP-INDEX
                WS.EP_FIRST_DIGIT.SetValue("N");                                                                    //COBOL==> MOVE 'N' TO EP-FIRST-DIGIT
            }                                                                                                   //COBOL==> END-PERFORM.
                                                                                                                //COMMENT:     POST PROCESS TO ADJUST FLOATING CURRENCY SYMBOL
                                                                                                                //COMMENT:     INTO THOUSANDS SEPARATOR POSITION
            if (WS.EP_CURRENCY_COUNT.IsGreaterThan(1))                                                          //COBOL==> IF EP-CURRENCY-COUNT > 1 THEN
            {
                WS.EP_OUT_INDEX.SetValue(1);                                                                        //COBOL==> MOVE 1 TO EP-OUT-INDEX
                WS.EP_INDEX.SetComputeValue(WS.EP_OUT_INDEX.AsDecimal() + 1m);                                      //COBOL==> COMPUTE EP-INDEX = EP-OUT-INDEX + 1
                while (!(WS.EP_INDEX.IsEqualTo(WS.EP_EDIT_PATTERN_LEN)))                                            //COBOL==> PERFORM UNTIL EP-INDEX = EP-EDIT-PATTERN-LEN
                {
                    if (((WS.EP_EDIT_PATTERN_X[WS.EP_OUT_INDEX.AsInt()].IsEqualTo("$"))
             && (WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].IsEqualTo("$")))
             && (WS.EP_FORMATTED_VALUE_X[WS.EP_INDEX.AsInt()].IsEqualTo(" ")))  //COBOL==> IF EP-EDIT-PATTERN-X ( EP-OUT-INDEX ) = '$' AND EP-FORMATTED-VALUE-X ( EP-OUT-INDEX ) = '$' AND EP-FORMATTED-VALUE-X ( EP-INDEX ) = ' '
                    {
                        WS.EP_FORMATTED_VALUE_X[WS.EP_OUT_INDEX.AsInt()].SetValue(" ");                                     //COBOL==> MOVE ' ' TO EP-FORMATTED-VALUE-X ( EP-OUT-INDEX )
                        WS.EP_FORMATTED_VALUE_X[WS.EP_INDEX.AsInt()].SetValue("$");                                         //COBOL==> MOVE '$' TO EP-FORMATTED-VALUE-X ( EP-INDEX )
                        WS.EP_OUT_INDEX.SetValue(WS.EP_EDIT_PATTERN_LEN);                                                   //COBOL==> MOVE EP-EDIT-PATTERN-LEN TO EP-OUT-INDEX
                    }                                                                                                   //COBOL==> END-IF
                    WS.EP_OUT_INDEX.Add(1);                                                                             //COBOL==> ADD 1 TO EP-OUT-INDEX
                    WS.EP_INDEX.Add(1);                                                                                 //COBOL==> ADD 1 TO EP-INDEX
                }                                                                                                   //COBOL==> END-PERFORM
            }                                                                                                   //COBOL==> END-IF.
            if (returnMethod != "" && returnMethod != "M_NUMERIC_FORMATTER") { M_NUMERIC_FORMATTER_EXIT(returnMethod); }  //Check for pass through to next method
        }
        /// <summary>
        /// Method M_NUMERIC_FORMATTER_EXIT
        /// </summary>
        private void M_NUMERIC_FORMATTER_EXIT(string returnMethod = "")
        {
            if (returnMethod == "M_NUMERIC_FORMATTER_EXIT") { return; }                                         //COBOL==> EXIT.
        }
        #endregion
    }
    #endregion
}
